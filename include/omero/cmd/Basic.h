// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Basic.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __omero_cmd__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_cmd_Basic_h__
#define __omero_cmd__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_cmd_Basic_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/IncomingAsync.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/SlicedDataF.h>
#include <omero/cmd/API.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace omero
{

namespace cmd
{

class DoAll;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::cmd::DoAll>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::cmd::DoAll*);

class DoAllRsp;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::cmd::DoAllRsp>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::cmd::DoAllRsp*);

class ListRequests;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::cmd::ListRequests>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::cmd::ListRequests*);

class ListRequestsRsp;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::cmd::ListRequestsRsp>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::cmd::ListRequestsRsp*);

class PopStatus;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::cmd::PopStatus>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::cmd::PopStatus*);

class PopStatusRsp;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::cmd::PopStatusRsp>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::cmd::PopStatusRsp*);

class FindHandles;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::cmd::FindHandles>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::cmd::FindHandles*);

class FindHandlesRsp;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::cmd::FindHandlesRsp>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::cmd::FindHandlesRsp*);

class Timing;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::cmd::Timing>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::cmd::Timing*);

}

}

}

namespace omero
{

namespace cmd
{

class DoAll;
bool operator==(const DoAll&, const DoAll&);
bool operator<(const DoAll&, const DoAll&);
::Ice::Object* upCast(::omero::cmd::DoAll*);
typedef ::IceInternal::Handle< ::omero::cmd::DoAll> DoAllPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::cmd::DoAll> DoAllPrx;
void __patch(DoAllPtr&, const ::Ice::ObjectPtr&);

class DoAllRsp;
bool operator==(const DoAllRsp&, const DoAllRsp&);
bool operator<(const DoAllRsp&, const DoAllRsp&);
::Ice::Object* upCast(::omero::cmd::DoAllRsp*);
typedef ::IceInternal::Handle< ::omero::cmd::DoAllRsp> DoAllRspPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::cmd::DoAllRsp> DoAllRspPrx;
void __patch(DoAllRspPtr&, const ::Ice::ObjectPtr&);

class ListRequests;
bool operator==(const ListRequests&, const ListRequests&);
bool operator<(const ListRequests&, const ListRequests&);
::Ice::Object* upCast(::omero::cmd::ListRequests*);
typedef ::IceInternal::Handle< ::omero::cmd::ListRequests> ListRequestsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::cmd::ListRequests> ListRequestsPrx;
void __patch(ListRequestsPtr&, const ::Ice::ObjectPtr&);

class ListRequestsRsp;
bool operator==(const ListRequestsRsp&, const ListRequestsRsp&);
bool operator<(const ListRequestsRsp&, const ListRequestsRsp&);
::Ice::Object* upCast(::omero::cmd::ListRequestsRsp*);
typedef ::IceInternal::Handle< ::omero::cmd::ListRequestsRsp> ListRequestsRspPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::cmd::ListRequestsRsp> ListRequestsRspPrx;
void __patch(ListRequestsRspPtr&, const ::Ice::ObjectPtr&);

class PopStatus;
bool operator==(const PopStatus&, const PopStatus&);
bool operator<(const PopStatus&, const PopStatus&);
::Ice::Object* upCast(::omero::cmd::PopStatus*);
typedef ::IceInternal::Handle< ::omero::cmd::PopStatus> PopStatusPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::cmd::PopStatus> PopStatusPrx;
void __patch(PopStatusPtr&, const ::Ice::ObjectPtr&);

class PopStatusRsp;
bool operator==(const PopStatusRsp&, const PopStatusRsp&);
bool operator<(const PopStatusRsp&, const PopStatusRsp&);
::Ice::Object* upCast(::omero::cmd::PopStatusRsp*);
typedef ::IceInternal::Handle< ::omero::cmd::PopStatusRsp> PopStatusRspPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::cmd::PopStatusRsp> PopStatusRspPrx;
void __patch(PopStatusRspPtr&, const ::Ice::ObjectPtr&);

class FindHandles;
bool operator==(const FindHandles&, const FindHandles&);
bool operator<(const FindHandles&, const FindHandles&);
::Ice::Object* upCast(::omero::cmd::FindHandles*);
typedef ::IceInternal::Handle< ::omero::cmd::FindHandles> FindHandlesPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::cmd::FindHandles> FindHandlesPrx;
void __patch(FindHandlesPtr&, const ::Ice::ObjectPtr&);

class FindHandlesRsp;
bool operator==(const FindHandlesRsp&, const FindHandlesRsp&);
bool operator<(const FindHandlesRsp&, const FindHandlesRsp&);
::Ice::Object* upCast(::omero::cmd::FindHandlesRsp*);
typedef ::IceInternal::Handle< ::omero::cmd::FindHandlesRsp> FindHandlesRspPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::cmd::FindHandlesRsp> FindHandlesRspPrx;
void __patch(FindHandlesRspPtr&, const ::Ice::ObjectPtr&);

class Timing;
bool operator==(const Timing&, const Timing&);
bool operator<(const Timing&, const Timing&);
::Ice::Object* upCast(::omero::cmd::Timing*);
typedef ::IceInternal::Handle< ::omero::cmd::Timing> TimingPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::cmd::Timing> TimingPrx;
void __patch(TimingPtr&, const ::Ice::ObjectPtr&);

}

}

namespace IceAsync
{

}

namespace omero
{

namespace cmd
{

}

}

namespace IceProxy
{

namespace omero
{

namespace cmd
{

class DoAll : virtual public ::IceProxy::omero::cmd::Request
{
public:
    
    ::IceInternal::ProxyHandle<DoAll> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<DoAll*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<DoAll> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<DoAll*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<DoAll> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<DoAll*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<DoAll> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<DoAll*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<DoAll> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<DoAll*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<DoAll> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<DoAll*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<DoAll> ice_secure(bool __secure) const
    {
        return dynamic_cast<DoAll*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<DoAll> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<DoAll*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<DoAll> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<DoAll*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<DoAll> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<DoAll*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<DoAll> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<DoAll*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<DoAll> ice_twoway() const
    {
        return dynamic_cast<DoAll*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<DoAll> ice_oneway() const
    {
        return dynamic_cast<DoAll*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<DoAll> ice_batchOneway() const
    {
        return dynamic_cast<DoAll*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<DoAll> ice_datagram() const
    {
        return dynamic_cast<DoAll*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<DoAll> ice_batchDatagram() const
    {
        return dynamic_cast<DoAll*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<DoAll> ice_compress(bool __compress) const
    {
        return dynamic_cast<DoAll*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<DoAll> ice_timeout(int __timeout) const
    {
        return dynamic_cast<DoAll*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<DoAll> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<DoAll*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<DoAll> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<DoAll*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class DoAllRsp : virtual public ::IceProxy::omero::cmd::OK
{
public:
    
    ::IceInternal::ProxyHandle<DoAllRsp> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<DoAllRsp*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<DoAllRsp> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<DoAllRsp*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<DoAllRsp> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<DoAllRsp*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<DoAllRsp> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<DoAllRsp*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<DoAllRsp> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<DoAllRsp*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<DoAllRsp> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<DoAllRsp*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<DoAllRsp> ice_secure(bool __secure) const
    {
        return dynamic_cast<DoAllRsp*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<DoAllRsp> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<DoAllRsp*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<DoAllRsp> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<DoAllRsp*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<DoAllRsp> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<DoAllRsp*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<DoAllRsp> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<DoAllRsp*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<DoAllRsp> ice_twoway() const
    {
        return dynamic_cast<DoAllRsp*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<DoAllRsp> ice_oneway() const
    {
        return dynamic_cast<DoAllRsp*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<DoAllRsp> ice_batchOneway() const
    {
        return dynamic_cast<DoAllRsp*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<DoAllRsp> ice_datagram() const
    {
        return dynamic_cast<DoAllRsp*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<DoAllRsp> ice_batchDatagram() const
    {
        return dynamic_cast<DoAllRsp*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<DoAllRsp> ice_compress(bool __compress) const
    {
        return dynamic_cast<DoAllRsp*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<DoAllRsp> ice_timeout(int __timeout) const
    {
        return dynamic_cast<DoAllRsp*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<DoAllRsp> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<DoAllRsp*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<DoAllRsp> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<DoAllRsp*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class ListRequests : virtual public ::IceProxy::omero::cmd::Request
{
public:
    
    ::IceInternal::ProxyHandle<ListRequests> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<ListRequests*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<ListRequests> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<ListRequests*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ListRequests> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<ListRequests*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<ListRequests> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<ListRequests*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ListRequests> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<ListRequests*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<ListRequests> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<ListRequests*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<ListRequests> ice_secure(bool __secure) const
    {
        return dynamic_cast<ListRequests*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<ListRequests> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<ListRequests*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<ListRequests> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<ListRequests*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<ListRequests> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<ListRequests*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<ListRequests> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<ListRequests*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<ListRequests> ice_twoway() const
    {
        return dynamic_cast<ListRequests*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<ListRequests> ice_oneway() const
    {
        return dynamic_cast<ListRequests*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<ListRequests> ice_batchOneway() const
    {
        return dynamic_cast<ListRequests*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<ListRequests> ice_datagram() const
    {
        return dynamic_cast<ListRequests*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<ListRequests> ice_batchDatagram() const
    {
        return dynamic_cast<ListRequests*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<ListRequests> ice_compress(bool __compress) const
    {
        return dynamic_cast<ListRequests*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<ListRequests> ice_timeout(int __timeout) const
    {
        return dynamic_cast<ListRequests*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ListRequests> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<ListRequests*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ListRequests> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<ListRequests*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class ListRequestsRsp : virtual public ::IceProxy::omero::cmd::OK
{
public:
    
    ::IceInternal::ProxyHandle<ListRequestsRsp> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<ListRequestsRsp*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<ListRequestsRsp> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<ListRequestsRsp*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ListRequestsRsp> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<ListRequestsRsp*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<ListRequestsRsp> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<ListRequestsRsp*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ListRequestsRsp> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<ListRequestsRsp*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<ListRequestsRsp> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<ListRequestsRsp*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<ListRequestsRsp> ice_secure(bool __secure) const
    {
        return dynamic_cast<ListRequestsRsp*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<ListRequestsRsp> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<ListRequestsRsp*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<ListRequestsRsp> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<ListRequestsRsp*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<ListRequestsRsp> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<ListRequestsRsp*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<ListRequestsRsp> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<ListRequestsRsp*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<ListRequestsRsp> ice_twoway() const
    {
        return dynamic_cast<ListRequestsRsp*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<ListRequestsRsp> ice_oneway() const
    {
        return dynamic_cast<ListRequestsRsp*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<ListRequestsRsp> ice_batchOneway() const
    {
        return dynamic_cast<ListRequestsRsp*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<ListRequestsRsp> ice_datagram() const
    {
        return dynamic_cast<ListRequestsRsp*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<ListRequestsRsp> ice_batchDatagram() const
    {
        return dynamic_cast<ListRequestsRsp*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<ListRequestsRsp> ice_compress(bool __compress) const
    {
        return dynamic_cast<ListRequestsRsp*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<ListRequestsRsp> ice_timeout(int __timeout) const
    {
        return dynamic_cast<ListRequestsRsp*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ListRequestsRsp> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<ListRequestsRsp*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ListRequestsRsp> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<ListRequestsRsp*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class PopStatus : virtual public ::IceProxy::omero::cmd::Request
{
public:
    
    ::IceInternal::ProxyHandle<PopStatus> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<PopStatus*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<PopStatus> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<PopStatus*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<PopStatus> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<PopStatus*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<PopStatus> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<PopStatus*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<PopStatus> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<PopStatus*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<PopStatus> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<PopStatus*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<PopStatus> ice_secure(bool __secure) const
    {
        return dynamic_cast<PopStatus*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<PopStatus> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<PopStatus*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<PopStatus> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<PopStatus*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<PopStatus> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<PopStatus*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<PopStatus> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<PopStatus*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<PopStatus> ice_twoway() const
    {
        return dynamic_cast<PopStatus*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<PopStatus> ice_oneway() const
    {
        return dynamic_cast<PopStatus*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<PopStatus> ice_batchOneway() const
    {
        return dynamic_cast<PopStatus*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<PopStatus> ice_datagram() const
    {
        return dynamic_cast<PopStatus*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<PopStatus> ice_batchDatagram() const
    {
        return dynamic_cast<PopStatus*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<PopStatus> ice_compress(bool __compress) const
    {
        return dynamic_cast<PopStatus*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<PopStatus> ice_timeout(int __timeout) const
    {
        return dynamic_cast<PopStatus*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<PopStatus> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<PopStatus*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<PopStatus> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<PopStatus*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class PopStatusRsp : virtual public ::IceProxy::omero::cmd::OK
{
public:
    
    ::IceInternal::ProxyHandle<PopStatusRsp> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<PopStatusRsp*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<PopStatusRsp> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<PopStatusRsp*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<PopStatusRsp> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<PopStatusRsp*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<PopStatusRsp> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<PopStatusRsp*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<PopStatusRsp> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<PopStatusRsp*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<PopStatusRsp> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<PopStatusRsp*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<PopStatusRsp> ice_secure(bool __secure) const
    {
        return dynamic_cast<PopStatusRsp*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<PopStatusRsp> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<PopStatusRsp*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<PopStatusRsp> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<PopStatusRsp*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<PopStatusRsp> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<PopStatusRsp*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<PopStatusRsp> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<PopStatusRsp*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<PopStatusRsp> ice_twoway() const
    {
        return dynamic_cast<PopStatusRsp*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<PopStatusRsp> ice_oneway() const
    {
        return dynamic_cast<PopStatusRsp*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<PopStatusRsp> ice_batchOneway() const
    {
        return dynamic_cast<PopStatusRsp*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<PopStatusRsp> ice_datagram() const
    {
        return dynamic_cast<PopStatusRsp*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<PopStatusRsp> ice_batchDatagram() const
    {
        return dynamic_cast<PopStatusRsp*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<PopStatusRsp> ice_compress(bool __compress) const
    {
        return dynamic_cast<PopStatusRsp*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<PopStatusRsp> ice_timeout(int __timeout) const
    {
        return dynamic_cast<PopStatusRsp*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<PopStatusRsp> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<PopStatusRsp*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<PopStatusRsp> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<PopStatusRsp*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class FindHandles : virtual public ::IceProxy::omero::cmd::Request
{
public:
    
    ::IceInternal::ProxyHandle<FindHandles> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<FindHandles*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<FindHandles> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<FindHandles*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<FindHandles> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<FindHandles*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<FindHandles> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<FindHandles*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<FindHandles> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<FindHandles*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<FindHandles> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<FindHandles*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<FindHandles> ice_secure(bool __secure) const
    {
        return dynamic_cast<FindHandles*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<FindHandles> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<FindHandles*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<FindHandles> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<FindHandles*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<FindHandles> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<FindHandles*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<FindHandles> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<FindHandles*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<FindHandles> ice_twoway() const
    {
        return dynamic_cast<FindHandles*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<FindHandles> ice_oneway() const
    {
        return dynamic_cast<FindHandles*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<FindHandles> ice_batchOneway() const
    {
        return dynamic_cast<FindHandles*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<FindHandles> ice_datagram() const
    {
        return dynamic_cast<FindHandles*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<FindHandles> ice_batchDatagram() const
    {
        return dynamic_cast<FindHandles*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<FindHandles> ice_compress(bool __compress) const
    {
        return dynamic_cast<FindHandles*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<FindHandles> ice_timeout(int __timeout) const
    {
        return dynamic_cast<FindHandles*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<FindHandles> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<FindHandles*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<FindHandles> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<FindHandles*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class FindHandlesRsp : virtual public ::IceProxy::omero::cmd::OK
{
public:
    
    ::IceInternal::ProxyHandle<FindHandlesRsp> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<FindHandlesRsp*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<FindHandlesRsp> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<FindHandlesRsp*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<FindHandlesRsp> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<FindHandlesRsp*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<FindHandlesRsp> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<FindHandlesRsp*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<FindHandlesRsp> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<FindHandlesRsp*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<FindHandlesRsp> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<FindHandlesRsp*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<FindHandlesRsp> ice_secure(bool __secure) const
    {
        return dynamic_cast<FindHandlesRsp*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<FindHandlesRsp> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<FindHandlesRsp*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<FindHandlesRsp> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<FindHandlesRsp*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<FindHandlesRsp> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<FindHandlesRsp*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<FindHandlesRsp> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<FindHandlesRsp*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<FindHandlesRsp> ice_twoway() const
    {
        return dynamic_cast<FindHandlesRsp*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<FindHandlesRsp> ice_oneway() const
    {
        return dynamic_cast<FindHandlesRsp*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<FindHandlesRsp> ice_batchOneway() const
    {
        return dynamic_cast<FindHandlesRsp*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<FindHandlesRsp> ice_datagram() const
    {
        return dynamic_cast<FindHandlesRsp*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<FindHandlesRsp> ice_batchDatagram() const
    {
        return dynamic_cast<FindHandlesRsp*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<FindHandlesRsp> ice_compress(bool __compress) const
    {
        return dynamic_cast<FindHandlesRsp*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<FindHandlesRsp> ice_timeout(int __timeout) const
    {
        return dynamic_cast<FindHandlesRsp*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<FindHandlesRsp> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<FindHandlesRsp*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<FindHandlesRsp> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<FindHandlesRsp*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class Timing : virtual public ::IceProxy::omero::cmd::Request
{
public:
    
    ::IceInternal::ProxyHandle<Timing> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Timing*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Timing> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Timing*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Timing> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Timing*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Timing> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Timing*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Timing> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Timing*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Timing> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Timing*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Timing> ice_secure(bool __secure) const
    {
        return dynamic_cast<Timing*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Timing> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Timing*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Timing> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Timing*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Timing> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Timing*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Timing> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Timing*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Timing> ice_twoway() const
    {
        return dynamic_cast<Timing*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Timing> ice_oneway() const
    {
        return dynamic_cast<Timing*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Timing> ice_batchOneway() const
    {
        return dynamic_cast<Timing*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Timing> ice_datagram() const
    {
        return dynamic_cast<Timing*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Timing> ice_batchDatagram() const
    {
        return dynamic_cast<Timing*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Timing> ice_compress(bool __compress) const
    {
        return dynamic_cast<Timing*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Timing> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Timing*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Timing> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Timing*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Timing> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Timing*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

namespace IceDelegate
{

namespace omero
{

namespace cmd
{

class DoAll : virtual public ::IceDelegate::omero::cmd::Request
{
public:
};

class DoAllRsp : virtual public ::IceDelegate::omero::cmd::OK
{
public:
};

class ListRequests : virtual public ::IceDelegate::omero::cmd::Request
{
public:
};

class ListRequestsRsp : virtual public ::IceDelegate::omero::cmd::OK
{
public:
};

class PopStatus : virtual public ::IceDelegate::omero::cmd::Request
{
public:
};

class PopStatusRsp : virtual public ::IceDelegate::omero::cmd::OK
{
public:
};

class FindHandles : virtual public ::IceDelegate::omero::cmd::Request
{
public:
};

class FindHandlesRsp : virtual public ::IceDelegate::omero::cmd::OK
{
public:
};

class Timing : virtual public ::IceDelegate::omero::cmd::Request
{
public:
};

}

}

}

namespace IceDelegateM
{

namespace omero
{

namespace cmd
{

class DoAll : virtual public ::IceDelegate::omero::cmd::DoAll,
              virtual public ::IceDelegateM::omero::cmd::Request
{
public:
};

class DoAllRsp : virtual public ::IceDelegate::omero::cmd::DoAllRsp,
                 virtual public ::IceDelegateM::omero::cmd::OK
{
public:
};

class ListRequests : virtual public ::IceDelegate::omero::cmd::ListRequests,
                     virtual public ::IceDelegateM::omero::cmd::Request
{
public:
};

class ListRequestsRsp : virtual public ::IceDelegate::omero::cmd::ListRequestsRsp,
                        virtual public ::IceDelegateM::omero::cmd::OK
{
public:
};

class PopStatus : virtual public ::IceDelegate::omero::cmd::PopStatus,
                  virtual public ::IceDelegateM::omero::cmd::Request
{
public:
};

class PopStatusRsp : virtual public ::IceDelegate::omero::cmd::PopStatusRsp,
                     virtual public ::IceDelegateM::omero::cmd::OK
{
public:
};

class FindHandles : virtual public ::IceDelegate::omero::cmd::FindHandles,
                    virtual public ::IceDelegateM::omero::cmd::Request
{
public:
};

class FindHandlesRsp : virtual public ::IceDelegate::omero::cmd::FindHandlesRsp,
                       virtual public ::IceDelegateM::omero::cmd::OK
{
public:
};

class Timing : virtual public ::IceDelegate::omero::cmd::Timing,
               virtual public ::IceDelegateM::omero::cmd::Request
{
public:
};

}

}

}

namespace IceDelegateD
{

namespace omero
{

namespace cmd
{

class DoAll : virtual public ::IceDelegate::omero::cmd::DoAll,
              virtual public ::IceDelegateD::omero::cmd::Request
{
public:
};

class DoAllRsp : virtual public ::IceDelegate::omero::cmd::DoAllRsp,
                 virtual public ::IceDelegateD::omero::cmd::OK
{
public:
};

class ListRequests : virtual public ::IceDelegate::omero::cmd::ListRequests,
                     virtual public ::IceDelegateD::omero::cmd::Request
{
public:
};

class ListRequestsRsp : virtual public ::IceDelegate::omero::cmd::ListRequestsRsp,
                        virtual public ::IceDelegateD::omero::cmd::OK
{
public:
};

class PopStatus : virtual public ::IceDelegate::omero::cmd::PopStatus,
                  virtual public ::IceDelegateD::omero::cmd::Request
{
public:
};

class PopStatusRsp : virtual public ::IceDelegate::omero::cmd::PopStatusRsp,
                     virtual public ::IceDelegateD::omero::cmd::OK
{
public:
};

class FindHandles : virtual public ::IceDelegate::omero::cmd::FindHandles,
                    virtual public ::IceDelegateD::omero::cmd::Request
{
public:
};

class FindHandlesRsp : virtual public ::IceDelegate::omero::cmd::FindHandlesRsp,
                       virtual public ::IceDelegateD::omero::cmd::OK
{
public:
};

class Timing : virtual public ::IceDelegate::omero::cmd::Timing,
               virtual public ::IceDelegateD::omero::cmd::Request
{
public:
};

}

}

}

namespace omero
{

namespace cmd
{

class DoAll : public ::omero::cmd::Request, public IceInternal::GCShared
{
public:

    typedef DoAllPrx ProxyType;
    typedef DoAllPtr PointerType;

    DoAll()
    {
    }

    DoAll(const ::omero::cmd::RequestList& __ice_requests, const ::omero::cmd::StringMapList& __ice_contexts) :
        requests(__ice_requests),
        contexts(__ice_contexts)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __addObject(::IceInternal::GCCountMap&);
    virtual bool __usesGC();
    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::cmd::Request::__writeImpl;
    using ::omero::cmd::Request::__readImpl;
    #endif

public:

    ::omero::cmd::RequestList requests;

    ::omero::cmd::StringMapList contexts;

protected:

    virtual ~DoAll() {}

    friend class DoAll__staticInit;
};

class DoAll__staticInit
{
public:

    ::omero::cmd::DoAll _init;
};

static DoAll__staticInit _DoAll_init;

inline bool operator==(const DoAll& l, const DoAll& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const DoAll& l, const DoAll& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class DoAllRsp : public ::omero::cmd::OK, public IceInternal::GCShared
{
public:

    typedef DoAllRspPrx ProxyType;
    typedef DoAllRspPtr PointerType;

    DoAllRsp()
    {
    }

    DoAllRsp(const ::omero::cmd::ResponseList& __ice_responses, const ::omero::cmd::StatusList& __ice_status) :
        responses(__ice_responses),
        status(__ice_status)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __addObject(::IceInternal::GCCountMap&);
    virtual bool __usesGC();
    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::cmd::OK::__writeImpl;
    using ::omero::cmd::OK::__readImpl;
    #endif

public:

    ::omero::cmd::ResponseList responses;

    ::omero::cmd::StatusList status;

protected:

    virtual ~DoAllRsp() {}
};

inline bool operator==(const DoAllRsp& l, const DoAllRsp& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const DoAllRsp& l, const DoAllRsp& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class ListRequests : public ::omero::cmd::Request
{
public:

    typedef ListRequestsPrx ProxyType;
    typedef ListRequestsPtr PointerType;

    ListRequests()
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::cmd::Request::__writeImpl;
    using ::omero::cmd::Request::__readImpl;
    #endif

    virtual ~ListRequests() {}
};

inline bool operator==(const ListRequests& l, const ListRequests& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const ListRequests& l, const ListRequests& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class ListRequestsRsp : public ::omero::cmd::OK, public IceInternal::GCShared
{
public:

    typedef ListRequestsRspPrx ProxyType;
    typedef ListRequestsRspPtr PointerType;

    ListRequestsRsp()
    {
    }

    explicit ListRequestsRsp(const ::omero::cmd::RequestList& __ice_list) :
        list(__ice_list)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __addObject(::IceInternal::GCCountMap&);
    virtual bool __usesGC();
    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::cmd::OK::__writeImpl;
    using ::omero::cmd::OK::__readImpl;
    #endif

public:

    ::omero::cmd::RequestList list;

protected:

    virtual ~ListRequestsRsp() {}
};

inline bool operator==(const ListRequestsRsp& l, const ListRequestsRsp& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const ListRequestsRsp& l, const ListRequestsRsp& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class PopStatus : public ::omero::cmd::Request
{
public:

    typedef PopStatusPrx ProxyType;
    typedef PopStatusPtr PointerType;

    PopStatus()
    {
    }

    PopStatus(::Ice::Int __ice_limit, const ::omero::cmd::StateList& __ice_include, const ::omero::cmd::StateList& __ice_exclude) :
        limit(__ice_limit),
        include(__ice_include),
        exclude(__ice_exclude)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::cmd::Request::__writeImpl;
    using ::omero::cmd::Request::__readImpl;
    #endif

public:

    ::Ice::Int limit;

    ::omero::cmd::StateList include;

    ::omero::cmd::StateList exclude;

protected:

    virtual ~PopStatus() {}
};

inline bool operator==(const PopStatus& l, const PopStatus& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const PopStatus& l, const PopStatus& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class PopStatusRsp : public ::omero::cmd::OK, public IceInternal::GCShared
{
public:

    typedef PopStatusRspPrx ProxyType;
    typedef PopStatusRspPtr PointerType;

    PopStatusRsp()
    {
    }

    explicit PopStatusRsp(const ::omero::cmd::StatusList& __ice_list) :
        list(__ice_list)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __addObject(::IceInternal::GCCountMap&);
    virtual bool __usesGC();
    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::cmd::OK::__writeImpl;
    using ::omero::cmd::OK::__readImpl;
    #endif

public:

    ::omero::cmd::StatusList list;

protected:

    virtual ~PopStatusRsp() {}
};

inline bool operator==(const PopStatusRsp& l, const PopStatusRsp& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const PopStatusRsp& l, const PopStatusRsp& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class FindHandles : public ::omero::cmd::Request
{
public:

    typedef FindHandlesPrx ProxyType;
    typedef FindHandlesPtr PointerType;

    FindHandles()
    {
    }

    FindHandles(::Ice::Int __ice_limit, const ::omero::cmd::StateList& __ice_include, const ::omero::cmd::StateList& __ice_exclude) :
        limit(__ice_limit),
        include(__ice_include),
        exclude(__ice_exclude)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::cmd::Request::__writeImpl;
    using ::omero::cmd::Request::__readImpl;
    #endif

public:

    ::Ice::Int limit;

    ::omero::cmd::StateList include;

    ::omero::cmd::StateList exclude;

protected:

    virtual ~FindHandles() {}
};

inline bool operator==(const FindHandles& l, const FindHandles& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const FindHandles& l, const FindHandles& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class FindHandlesRsp : public ::omero::cmd::OK
{
public:

    typedef FindHandlesRspPrx ProxyType;
    typedef FindHandlesRspPtr PointerType;

    FindHandlesRsp()
    {
    }

    explicit FindHandlesRsp(const ::omero::cmd::HandleList& __ice_handles) :
        handles(__ice_handles)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::cmd::OK::__writeImpl;
    using ::omero::cmd::OK::__readImpl;
    #endif

public:

    ::omero::cmd::HandleList handles;

protected:

    virtual ~FindHandlesRsp() {}
};

inline bool operator==(const FindHandlesRsp& l, const FindHandlesRsp& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const FindHandlesRsp& l, const FindHandlesRsp& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class Timing : public ::omero::cmd::Request
{
public:

    typedef TimingPrx ProxyType;
    typedef TimingPtr PointerType;

    Timing()
    {
    }

    Timing(::Ice::Int __ice_steps, ::Ice::Int __ice_millisPerStep) :
        steps(__ice_steps),
        millisPerStep(__ice_millisPerStep)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::cmd::Request::__writeImpl;
    using ::omero::cmd::Request::__readImpl;
    #endif

public:

    ::Ice::Int steps;

    ::Ice::Int millisPerStep;

protected:

    virtual ~Timing() {}
};

inline bool operator==(const Timing& l, const Timing& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Timing& l, const Timing& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

}

namespace omero
{

namespace cmd
{

}

}

#endif
