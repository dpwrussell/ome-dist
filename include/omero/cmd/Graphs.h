// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Graphs.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __omero_cmd__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_cmd_Graphs_h__
#define __omero_cmd__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_cmd_Graphs_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/IncomingAsync.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/SlicedDataF.h>
#include <omero/cmd/API.h>
#include <omero/Collections.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace omero
{

namespace cmd
{

class GraphModify;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::cmd::GraphModify>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::cmd::GraphModify*);

class GraphConstraintERR;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::cmd::GraphConstraintERR>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::cmd::GraphConstraintERR*);

class GraphSpecList;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::cmd::GraphSpecList>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::cmd::GraphSpecList*);

class GraphSpecListRsp;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::cmd::GraphSpecListRsp>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::cmd::GraphSpecListRsp*);

class Chgrp;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::cmd::Chgrp>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::cmd::Chgrp*);

class ChgrpRsp;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::cmd::ChgrpRsp>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::cmd::ChgrpRsp*);

class Chmod;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::cmd::Chmod>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::cmd::Chmod*);

class ChmodRsp;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::cmd::ChmodRsp>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::cmd::ChmodRsp*);

class Chown;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::cmd::Chown>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::cmd::Chown*);

class ChownRsp;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::cmd::ChownRsp>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::cmd::ChownRsp*);

class Delete;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::cmd::Delete>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::cmd::Delete*);

class DeleteRsp;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::cmd::DeleteRsp>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::cmd::DeleteRsp*);

}

}

}

namespace omero
{

namespace cmd
{

class GraphModify;
bool operator==(const GraphModify&, const GraphModify&);
bool operator<(const GraphModify&, const GraphModify&);
::Ice::Object* upCast(::omero::cmd::GraphModify*);
typedef ::IceInternal::Handle< ::omero::cmd::GraphModify> GraphModifyPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::cmd::GraphModify> GraphModifyPrx;
void __patch(GraphModifyPtr&, const ::Ice::ObjectPtr&);

class GraphConstraintERR;
bool operator==(const GraphConstraintERR&, const GraphConstraintERR&);
bool operator<(const GraphConstraintERR&, const GraphConstraintERR&);
::Ice::Object* upCast(::omero::cmd::GraphConstraintERR*);
typedef ::IceInternal::Handle< ::omero::cmd::GraphConstraintERR> GraphConstraintERRPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::cmd::GraphConstraintERR> GraphConstraintERRPrx;
void __patch(GraphConstraintERRPtr&, const ::Ice::ObjectPtr&);

class GraphSpecList;
bool operator==(const GraphSpecList&, const GraphSpecList&);
bool operator<(const GraphSpecList&, const GraphSpecList&);
::Ice::Object* upCast(::omero::cmd::GraphSpecList*);
typedef ::IceInternal::Handle< ::omero::cmd::GraphSpecList> GraphSpecListPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::cmd::GraphSpecList> GraphSpecListPrx;
void __patch(GraphSpecListPtr&, const ::Ice::ObjectPtr&);

class GraphSpecListRsp;
bool operator==(const GraphSpecListRsp&, const GraphSpecListRsp&);
bool operator<(const GraphSpecListRsp&, const GraphSpecListRsp&);
::Ice::Object* upCast(::omero::cmd::GraphSpecListRsp*);
typedef ::IceInternal::Handle< ::omero::cmd::GraphSpecListRsp> GraphSpecListRspPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::cmd::GraphSpecListRsp> GraphSpecListRspPrx;
void __patch(GraphSpecListRspPtr&, const ::Ice::ObjectPtr&);

class Chgrp;
bool operator==(const Chgrp&, const Chgrp&);
bool operator<(const Chgrp&, const Chgrp&);
::Ice::Object* upCast(::omero::cmd::Chgrp*);
typedef ::IceInternal::Handle< ::omero::cmd::Chgrp> ChgrpPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::cmd::Chgrp> ChgrpPrx;
void __patch(ChgrpPtr&, const ::Ice::ObjectPtr&);

class ChgrpRsp;
bool operator==(const ChgrpRsp&, const ChgrpRsp&);
bool operator<(const ChgrpRsp&, const ChgrpRsp&);
::Ice::Object* upCast(::omero::cmd::ChgrpRsp*);
typedef ::IceInternal::Handle< ::omero::cmd::ChgrpRsp> ChgrpRspPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::cmd::ChgrpRsp> ChgrpRspPrx;
void __patch(ChgrpRspPtr&, const ::Ice::ObjectPtr&);

class Chmod;
bool operator==(const Chmod&, const Chmod&);
bool operator<(const Chmod&, const Chmod&);
::Ice::Object* upCast(::omero::cmd::Chmod*);
typedef ::IceInternal::Handle< ::omero::cmd::Chmod> ChmodPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::cmd::Chmod> ChmodPrx;
void __patch(ChmodPtr&, const ::Ice::ObjectPtr&);

class ChmodRsp;
bool operator==(const ChmodRsp&, const ChmodRsp&);
bool operator<(const ChmodRsp&, const ChmodRsp&);
::Ice::Object* upCast(::omero::cmd::ChmodRsp*);
typedef ::IceInternal::Handle< ::omero::cmd::ChmodRsp> ChmodRspPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::cmd::ChmodRsp> ChmodRspPrx;
void __patch(ChmodRspPtr&, const ::Ice::ObjectPtr&);

class Chown;
bool operator==(const Chown&, const Chown&);
bool operator<(const Chown&, const Chown&);
::Ice::Object* upCast(::omero::cmd::Chown*);
typedef ::IceInternal::Handle< ::omero::cmd::Chown> ChownPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::cmd::Chown> ChownPrx;
void __patch(ChownPtr&, const ::Ice::ObjectPtr&);

class ChownRsp;
bool operator==(const ChownRsp&, const ChownRsp&);
bool operator<(const ChownRsp&, const ChownRsp&);
::Ice::Object* upCast(::omero::cmd::ChownRsp*);
typedef ::IceInternal::Handle< ::omero::cmd::ChownRsp> ChownRspPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::cmd::ChownRsp> ChownRspPrx;
void __patch(ChownRspPtr&, const ::Ice::ObjectPtr&);

class Delete;
bool operator==(const Delete&, const Delete&);
bool operator<(const Delete&, const Delete&);
::Ice::Object* upCast(::omero::cmd::Delete*);
typedef ::IceInternal::Handle< ::omero::cmd::Delete> DeletePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::cmd::Delete> DeletePrx;
void __patch(DeletePtr&, const ::Ice::ObjectPtr&);

class DeleteRsp;
bool operator==(const DeleteRsp&, const DeleteRsp&);
bool operator<(const DeleteRsp&, const DeleteRsp&);
::Ice::Object* upCast(::omero::cmd::DeleteRsp*);
typedef ::IceInternal::Handle< ::omero::cmd::DeleteRsp> DeleteRspPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::cmd::DeleteRsp> DeleteRspPrx;
void __patch(DeleteRspPtr&, const ::Ice::ObjectPtr&);

}

}

namespace omero
{

namespace cmd
{

typedef ::std::vector< ::omero::cmd::GraphModifyPtr> GraphModifyList;

}

}

namespace IceAsync
{

}

namespace omero
{

namespace cmd
{

}

}

namespace IceProxy
{

namespace omero
{

namespace cmd
{

class GraphModify : virtual public ::IceProxy::omero::cmd::Request
{
public:
    
    ::IceInternal::ProxyHandle<GraphModify> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<GraphModify*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<GraphModify> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<GraphModify*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<GraphModify> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<GraphModify*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<GraphModify> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<GraphModify*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<GraphModify> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<GraphModify*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<GraphModify> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<GraphModify*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<GraphModify> ice_secure(bool __secure) const
    {
        return dynamic_cast<GraphModify*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<GraphModify> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<GraphModify*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<GraphModify> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<GraphModify*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<GraphModify> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<GraphModify*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<GraphModify> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<GraphModify*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<GraphModify> ice_twoway() const
    {
        return dynamic_cast<GraphModify*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<GraphModify> ice_oneway() const
    {
        return dynamic_cast<GraphModify*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<GraphModify> ice_batchOneway() const
    {
        return dynamic_cast<GraphModify*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<GraphModify> ice_datagram() const
    {
        return dynamic_cast<GraphModify*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<GraphModify> ice_batchDatagram() const
    {
        return dynamic_cast<GraphModify*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<GraphModify> ice_compress(bool __compress) const
    {
        return dynamic_cast<GraphModify*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<GraphModify> ice_timeout(int __timeout) const
    {
        return dynamic_cast<GraphModify*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<GraphModify> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<GraphModify*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<GraphModify> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<GraphModify*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class GraphConstraintERR : virtual public ::IceProxy::omero::cmd::ERR
{
public:
    
    ::IceInternal::ProxyHandle<GraphConstraintERR> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<GraphConstraintERR*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<GraphConstraintERR> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<GraphConstraintERR*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<GraphConstraintERR> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<GraphConstraintERR*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<GraphConstraintERR> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<GraphConstraintERR*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<GraphConstraintERR> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<GraphConstraintERR*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<GraphConstraintERR> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<GraphConstraintERR*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<GraphConstraintERR> ice_secure(bool __secure) const
    {
        return dynamic_cast<GraphConstraintERR*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<GraphConstraintERR> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<GraphConstraintERR*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<GraphConstraintERR> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<GraphConstraintERR*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<GraphConstraintERR> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<GraphConstraintERR*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<GraphConstraintERR> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<GraphConstraintERR*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<GraphConstraintERR> ice_twoway() const
    {
        return dynamic_cast<GraphConstraintERR*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<GraphConstraintERR> ice_oneway() const
    {
        return dynamic_cast<GraphConstraintERR*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<GraphConstraintERR> ice_batchOneway() const
    {
        return dynamic_cast<GraphConstraintERR*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<GraphConstraintERR> ice_datagram() const
    {
        return dynamic_cast<GraphConstraintERR*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<GraphConstraintERR> ice_batchDatagram() const
    {
        return dynamic_cast<GraphConstraintERR*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<GraphConstraintERR> ice_compress(bool __compress) const
    {
        return dynamic_cast<GraphConstraintERR*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<GraphConstraintERR> ice_timeout(int __timeout) const
    {
        return dynamic_cast<GraphConstraintERR*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<GraphConstraintERR> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<GraphConstraintERR*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<GraphConstraintERR> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<GraphConstraintERR*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class GraphSpecList : virtual public ::IceProxy::omero::cmd::Request
{
public:
    
    ::IceInternal::ProxyHandle<GraphSpecList> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<GraphSpecList*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<GraphSpecList> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<GraphSpecList*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<GraphSpecList> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<GraphSpecList*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<GraphSpecList> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<GraphSpecList*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<GraphSpecList> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<GraphSpecList*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<GraphSpecList> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<GraphSpecList*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<GraphSpecList> ice_secure(bool __secure) const
    {
        return dynamic_cast<GraphSpecList*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<GraphSpecList> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<GraphSpecList*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<GraphSpecList> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<GraphSpecList*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<GraphSpecList> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<GraphSpecList*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<GraphSpecList> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<GraphSpecList*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<GraphSpecList> ice_twoway() const
    {
        return dynamic_cast<GraphSpecList*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<GraphSpecList> ice_oneway() const
    {
        return dynamic_cast<GraphSpecList*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<GraphSpecList> ice_batchOneway() const
    {
        return dynamic_cast<GraphSpecList*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<GraphSpecList> ice_datagram() const
    {
        return dynamic_cast<GraphSpecList*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<GraphSpecList> ice_batchDatagram() const
    {
        return dynamic_cast<GraphSpecList*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<GraphSpecList> ice_compress(bool __compress) const
    {
        return dynamic_cast<GraphSpecList*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<GraphSpecList> ice_timeout(int __timeout) const
    {
        return dynamic_cast<GraphSpecList*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<GraphSpecList> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<GraphSpecList*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<GraphSpecList> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<GraphSpecList*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class GraphSpecListRsp : virtual public ::IceProxy::omero::cmd::Response
{
public:
    
    ::IceInternal::ProxyHandle<GraphSpecListRsp> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<GraphSpecListRsp*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<GraphSpecListRsp> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<GraphSpecListRsp*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<GraphSpecListRsp> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<GraphSpecListRsp*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<GraphSpecListRsp> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<GraphSpecListRsp*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<GraphSpecListRsp> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<GraphSpecListRsp*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<GraphSpecListRsp> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<GraphSpecListRsp*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<GraphSpecListRsp> ice_secure(bool __secure) const
    {
        return dynamic_cast<GraphSpecListRsp*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<GraphSpecListRsp> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<GraphSpecListRsp*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<GraphSpecListRsp> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<GraphSpecListRsp*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<GraphSpecListRsp> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<GraphSpecListRsp*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<GraphSpecListRsp> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<GraphSpecListRsp*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<GraphSpecListRsp> ice_twoway() const
    {
        return dynamic_cast<GraphSpecListRsp*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<GraphSpecListRsp> ice_oneway() const
    {
        return dynamic_cast<GraphSpecListRsp*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<GraphSpecListRsp> ice_batchOneway() const
    {
        return dynamic_cast<GraphSpecListRsp*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<GraphSpecListRsp> ice_datagram() const
    {
        return dynamic_cast<GraphSpecListRsp*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<GraphSpecListRsp> ice_batchDatagram() const
    {
        return dynamic_cast<GraphSpecListRsp*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<GraphSpecListRsp> ice_compress(bool __compress) const
    {
        return dynamic_cast<GraphSpecListRsp*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<GraphSpecListRsp> ice_timeout(int __timeout) const
    {
        return dynamic_cast<GraphSpecListRsp*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<GraphSpecListRsp> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<GraphSpecListRsp*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<GraphSpecListRsp> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<GraphSpecListRsp*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class Chgrp : virtual public ::IceProxy::omero::cmd::GraphModify
{
public:
    
    ::IceInternal::ProxyHandle<Chgrp> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Chgrp*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Chgrp> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Chgrp*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Chgrp> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Chgrp*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Chgrp> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Chgrp*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Chgrp> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Chgrp*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Chgrp> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Chgrp*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Chgrp> ice_secure(bool __secure) const
    {
        return dynamic_cast<Chgrp*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Chgrp> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Chgrp*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Chgrp> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Chgrp*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Chgrp> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Chgrp*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Chgrp> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Chgrp*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Chgrp> ice_twoway() const
    {
        return dynamic_cast<Chgrp*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Chgrp> ice_oneway() const
    {
        return dynamic_cast<Chgrp*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Chgrp> ice_batchOneway() const
    {
        return dynamic_cast<Chgrp*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Chgrp> ice_datagram() const
    {
        return dynamic_cast<Chgrp*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Chgrp> ice_batchDatagram() const
    {
        return dynamic_cast<Chgrp*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Chgrp> ice_compress(bool __compress) const
    {
        return dynamic_cast<Chgrp*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Chgrp> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Chgrp*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Chgrp> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Chgrp*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Chgrp> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Chgrp*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class ChgrpRsp : virtual public ::IceProxy::omero::cmd::Response
{
public:
    
    ::IceInternal::ProxyHandle<ChgrpRsp> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<ChgrpRsp*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<ChgrpRsp> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<ChgrpRsp*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ChgrpRsp> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<ChgrpRsp*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<ChgrpRsp> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<ChgrpRsp*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ChgrpRsp> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<ChgrpRsp*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<ChgrpRsp> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<ChgrpRsp*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<ChgrpRsp> ice_secure(bool __secure) const
    {
        return dynamic_cast<ChgrpRsp*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<ChgrpRsp> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<ChgrpRsp*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<ChgrpRsp> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<ChgrpRsp*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<ChgrpRsp> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<ChgrpRsp*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<ChgrpRsp> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<ChgrpRsp*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<ChgrpRsp> ice_twoway() const
    {
        return dynamic_cast<ChgrpRsp*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<ChgrpRsp> ice_oneway() const
    {
        return dynamic_cast<ChgrpRsp*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<ChgrpRsp> ice_batchOneway() const
    {
        return dynamic_cast<ChgrpRsp*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<ChgrpRsp> ice_datagram() const
    {
        return dynamic_cast<ChgrpRsp*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<ChgrpRsp> ice_batchDatagram() const
    {
        return dynamic_cast<ChgrpRsp*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<ChgrpRsp> ice_compress(bool __compress) const
    {
        return dynamic_cast<ChgrpRsp*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<ChgrpRsp> ice_timeout(int __timeout) const
    {
        return dynamic_cast<ChgrpRsp*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ChgrpRsp> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<ChgrpRsp*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ChgrpRsp> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<ChgrpRsp*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class Chmod : virtual public ::IceProxy::omero::cmd::GraphModify
{
public:
    
    ::IceInternal::ProxyHandle<Chmod> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Chmod*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Chmod> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Chmod*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Chmod> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Chmod*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Chmod> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Chmod*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Chmod> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Chmod*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Chmod> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Chmod*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Chmod> ice_secure(bool __secure) const
    {
        return dynamic_cast<Chmod*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Chmod> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Chmod*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Chmod> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Chmod*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Chmod> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Chmod*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Chmod> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Chmod*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Chmod> ice_twoway() const
    {
        return dynamic_cast<Chmod*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Chmod> ice_oneway() const
    {
        return dynamic_cast<Chmod*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Chmod> ice_batchOneway() const
    {
        return dynamic_cast<Chmod*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Chmod> ice_datagram() const
    {
        return dynamic_cast<Chmod*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Chmod> ice_batchDatagram() const
    {
        return dynamic_cast<Chmod*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Chmod> ice_compress(bool __compress) const
    {
        return dynamic_cast<Chmod*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Chmod> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Chmod*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Chmod> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Chmod*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Chmod> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Chmod*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class ChmodRsp : virtual public ::IceProxy::omero::cmd::Response
{
public:
    
    ::IceInternal::ProxyHandle<ChmodRsp> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<ChmodRsp*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<ChmodRsp> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<ChmodRsp*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ChmodRsp> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<ChmodRsp*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<ChmodRsp> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<ChmodRsp*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ChmodRsp> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<ChmodRsp*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<ChmodRsp> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<ChmodRsp*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<ChmodRsp> ice_secure(bool __secure) const
    {
        return dynamic_cast<ChmodRsp*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<ChmodRsp> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<ChmodRsp*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<ChmodRsp> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<ChmodRsp*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<ChmodRsp> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<ChmodRsp*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<ChmodRsp> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<ChmodRsp*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<ChmodRsp> ice_twoway() const
    {
        return dynamic_cast<ChmodRsp*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<ChmodRsp> ice_oneway() const
    {
        return dynamic_cast<ChmodRsp*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<ChmodRsp> ice_batchOneway() const
    {
        return dynamic_cast<ChmodRsp*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<ChmodRsp> ice_datagram() const
    {
        return dynamic_cast<ChmodRsp*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<ChmodRsp> ice_batchDatagram() const
    {
        return dynamic_cast<ChmodRsp*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<ChmodRsp> ice_compress(bool __compress) const
    {
        return dynamic_cast<ChmodRsp*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<ChmodRsp> ice_timeout(int __timeout) const
    {
        return dynamic_cast<ChmodRsp*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ChmodRsp> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<ChmodRsp*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ChmodRsp> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<ChmodRsp*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class Chown : virtual public ::IceProxy::omero::cmd::GraphModify
{
public:
    
    ::IceInternal::ProxyHandle<Chown> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Chown*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Chown> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Chown*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Chown> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Chown*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Chown> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Chown*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Chown> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Chown*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Chown> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Chown*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Chown> ice_secure(bool __secure) const
    {
        return dynamic_cast<Chown*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Chown> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Chown*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Chown> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Chown*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Chown> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Chown*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Chown> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Chown*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Chown> ice_twoway() const
    {
        return dynamic_cast<Chown*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Chown> ice_oneway() const
    {
        return dynamic_cast<Chown*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Chown> ice_batchOneway() const
    {
        return dynamic_cast<Chown*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Chown> ice_datagram() const
    {
        return dynamic_cast<Chown*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Chown> ice_batchDatagram() const
    {
        return dynamic_cast<Chown*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Chown> ice_compress(bool __compress) const
    {
        return dynamic_cast<Chown*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Chown> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Chown*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Chown> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Chown*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Chown> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Chown*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class ChownRsp : virtual public ::IceProxy::omero::cmd::Response
{
public:
    
    ::IceInternal::ProxyHandle<ChownRsp> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<ChownRsp*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<ChownRsp> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<ChownRsp*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ChownRsp> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<ChownRsp*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<ChownRsp> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<ChownRsp*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ChownRsp> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<ChownRsp*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<ChownRsp> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<ChownRsp*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<ChownRsp> ice_secure(bool __secure) const
    {
        return dynamic_cast<ChownRsp*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<ChownRsp> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<ChownRsp*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<ChownRsp> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<ChownRsp*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<ChownRsp> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<ChownRsp*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<ChownRsp> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<ChownRsp*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<ChownRsp> ice_twoway() const
    {
        return dynamic_cast<ChownRsp*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<ChownRsp> ice_oneway() const
    {
        return dynamic_cast<ChownRsp*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<ChownRsp> ice_batchOneway() const
    {
        return dynamic_cast<ChownRsp*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<ChownRsp> ice_datagram() const
    {
        return dynamic_cast<ChownRsp*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<ChownRsp> ice_batchDatagram() const
    {
        return dynamic_cast<ChownRsp*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<ChownRsp> ice_compress(bool __compress) const
    {
        return dynamic_cast<ChownRsp*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<ChownRsp> ice_timeout(int __timeout) const
    {
        return dynamic_cast<ChownRsp*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ChownRsp> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<ChownRsp*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ChownRsp> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<ChownRsp*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class Delete : virtual public ::IceProxy::omero::cmd::GraphModify
{
public:
    
    ::IceInternal::ProxyHandle<Delete> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Delete*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Delete> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Delete*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Delete> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Delete*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Delete> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Delete*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Delete> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Delete*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Delete> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Delete*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Delete> ice_secure(bool __secure) const
    {
        return dynamic_cast<Delete*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Delete> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Delete*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Delete> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Delete*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Delete> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Delete*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Delete> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Delete*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Delete> ice_twoway() const
    {
        return dynamic_cast<Delete*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Delete> ice_oneway() const
    {
        return dynamic_cast<Delete*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Delete> ice_batchOneway() const
    {
        return dynamic_cast<Delete*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Delete> ice_datagram() const
    {
        return dynamic_cast<Delete*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Delete> ice_batchDatagram() const
    {
        return dynamic_cast<Delete*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Delete> ice_compress(bool __compress) const
    {
        return dynamic_cast<Delete*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Delete> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Delete*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Delete> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Delete*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Delete> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Delete*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class DeleteRsp : virtual public ::IceProxy::omero::cmd::OK
{
public:
    
    ::IceInternal::ProxyHandle<DeleteRsp> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<DeleteRsp*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<DeleteRsp> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<DeleteRsp*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<DeleteRsp> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<DeleteRsp*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<DeleteRsp> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<DeleteRsp*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<DeleteRsp> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<DeleteRsp*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<DeleteRsp> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<DeleteRsp*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<DeleteRsp> ice_secure(bool __secure) const
    {
        return dynamic_cast<DeleteRsp*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<DeleteRsp> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<DeleteRsp*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<DeleteRsp> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<DeleteRsp*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<DeleteRsp> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<DeleteRsp*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<DeleteRsp> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<DeleteRsp*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<DeleteRsp> ice_twoway() const
    {
        return dynamic_cast<DeleteRsp*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<DeleteRsp> ice_oneway() const
    {
        return dynamic_cast<DeleteRsp*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<DeleteRsp> ice_batchOneway() const
    {
        return dynamic_cast<DeleteRsp*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<DeleteRsp> ice_datagram() const
    {
        return dynamic_cast<DeleteRsp*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<DeleteRsp> ice_batchDatagram() const
    {
        return dynamic_cast<DeleteRsp*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<DeleteRsp> ice_compress(bool __compress) const
    {
        return dynamic_cast<DeleteRsp*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<DeleteRsp> ice_timeout(int __timeout) const
    {
        return dynamic_cast<DeleteRsp*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<DeleteRsp> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<DeleteRsp*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<DeleteRsp> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<DeleteRsp*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

namespace IceDelegate
{

namespace omero
{

namespace cmd
{

class GraphModify : virtual public ::IceDelegate::omero::cmd::Request
{
public:
};

class GraphConstraintERR : virtual public ::IceDelegate::omero::cmd::ERR
{
public:
};

class GraphSpecList : virtual public ::IceDelegate::omero::cmd::Request
{
public:
};

class GraphSpecListRsp : virtual public ::IceDelegate::omero::cmd::Response
{
public:
};

class Chgrp : virtual public ::IceDelegate::omero::cmd::GraphModify
{
public:
};

class ChgrpRsp : virtual public ::IceDelegate::omero::cmd::Response
{
public:
};

class Chmod : virtual public ::IceDelegate::omero::cmd::GraphModify
{
public:
};

class ChmodRsp : virtual public ::IceDelegate::omero::cmd::Response
{
public:
};

class Chown : virtual public ::IceDelegate::omero::cmd::GraphModify
{
public:
};

class ChownRsp : virtual public ::IceDelegate::omero::cmd::Response
{
public:
};

class Delete : virtual public ::IceDelegate::omero::cmd::GraphModify
{
public:
};

class DeleteRsp : virtual public ::IceDelegate::omero::cmd::OK
{
public:
};

}

}

}

namespace IceDelegateM
{

namespace omero
{

namespace cmd
{

class GraphModify : virtual public ::IceDelegate::omero::cmd::GraphModify,
                    virtual public ::IceDelegateM::omero::cmd::Request
{
public:
};

class GraphConstraintERR : virtual public ::IceDelegate::omero::cmd::GraphConstraintERR,
                           virtual public ::IceDelegateM::omero::cmd::ERR
{
public:
};

class GraphSpecList : virtual public ::IceDelegate::omero::cmd::GraphSpecList,
                      virtual public ::IceDelegateM::omero::cmd::Request
{
public:
};

class GraphSpecListRsp : virtual public ::IceDelegate::omero::cmd::GraphSpecListRsp,
                         virtual public ::IceDelegateM::omero::cmd::Response
{
public:
};

class Chgrp : virtual public ::IceDelegate::omero::cmd::Chgrp,
              virtual public ::IceDelegateM::omero::cmd::GraphModify
{
public:
};

class ChgrpRsp : virtual public ::IceDelegate::omero::cmd::ChgrpRsp,
                 virtual public ::IceDelegateM::omero::cmd::Response
{
public:
};

class Chmod : virtual public ::IceDelegate::omero::cmd::Chmod,
              virtual public ::IceDelegateM::omero::cmd::GraphModify
{
public:
};

class ChmodRsp : virtual public ::IceDelegate::omero::cmd::ChmodRsp,
                 virtual public ::IceDelegateM::omero::cmd::Response
{
public:
};

class Chown : virtual public ::IceDelegate::omero::cmd::Chown,
              virtual public ::IceDelegateM::omero::cmd::GraphModify
{
public:
};

class ChownRsp : virtual public ::IceDelegate::omero::cmd::ChownRsp,
                 virtual public ::IceDelegateM::omero::cmd::Response
{
public:
};

class Delete : virtual public ::IceDelegate::omero::cmd::Delete,
               virtual public ::IceDelegateM::omero::cmd::GraphModify
{
public:
};

class DeleteRsp : virtual public ::IceDelegate::omero::cmd::DeleteRsp,
                  virtual public ::IceDelegateM::omero::cmd::OK
{
public:
};

}

}

}

namespace IceDelegateD
{

namespace omero
{

namespace cmd
{

class GraphModify : virtual public ::IceDelegate::omero::cmd::GraphModify,
                    virtual public ::IceDelegateD::omero::cmd::Request
{
public:
};

class GraphConstraintERR : virtual public ::IceDelegate::omero::cmd::GraphConstraintERR,
                           virtual public ::IceDelegateD::omero::cmd::ERR
{
public:
};

class GraphSpecList : virtual public ::IceDelegate::omero::cmd::GraphSpecList,
                      virtual public ::IceDelegateD::omero::cmd::Request
{
public:
};

class GraphSpecListRsp : virtual public ::IceDelegate::omero::cmd::GraphSpecListRsp,
                         virtual public ::IceDelegateD::omero::cmd::Response
{
public:
};

class Chgrp : virtual public ::IceDelegate::omero::cmd::Chgrp,
              virtual public ::IceDelegateD::omero::cmd::GraphModify
{
public:
};

class ChgrpRsp : virtual public ::IceDelegate::omero::cmd::ChgrpRsp,
                 virtual public ::IceDelegateD::omero::cmd::Response
{
public:
};

class Chmod : virtual public ::IceDelegate::omero::cmd::Chmod,
              virtual public ::IceDelegateD::omero::cmd::GraphModify
{
public:
};

class ChmodRsp : virtual public ::IceDelegate::omero::cmd::ChmodRsp,
                 virtual public ::IceDelegateD::omero::cmd::Response
{
public:
};

class Chown : virtual public ::IceDelegate::omero::cmd::Chown,
              virtual public ::IceDelegateD::omero::cmd::GraphModify
{
public:
};

class ChownRsp : virtual public ::IceDelegate::omero::cmd::ChownRsp,
                 virtual public ::IceDelegateD::omero::cmd::Response
{
public:
};

class Delete : virtual public ::IceDelegate::omero::cmd::Delete,
               virtual public ::IceDelegateD::omero::cmd::GraphModify
{
public:
};

class DeleteRsp : virtual public ::IceDelegate::omero::cmd::DeleteRsp,
                  virtual public ::IceDelegateD::omero::cmd::OK
{
public:
};

}

}

}

namespace omero
{

namespace cmd
{

class GraphModify : public ::omero::cmd::Request
{
public:

    typedef GraphModifyPrx ProxyType;
    typedef GraphModifyPtr PointerType;

    GraphModify()
    {
    }

    GraphModify(const ::std::string& __ice_type, ::Ice::Long __ice_id, const ::omero::cmd::StringMap& __ice_options) :
        type(__ice_type),
        id(__ice_id),
        options(__ice_options)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::cmd::Request::__writeImpl;
    using ::omero::cmd::Request::__readImpl;
    #endif

public:

    ::std::string type;

    ::Ice::Long id;

    ::omero::cmd::StringMap options;

protected:

    virtual ~GraphModify() {}

    friend class GraphModify__staticInit;
};

class GraphModify__staticInit
{
public:

    ::omero::cmd::GraphModify _init;
};

static GraphModify__staticInit _GraphModify_init;

inline bool operator==(const GraphModify& l, const GraphModify& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const GraphModify& l, const GraphModify& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class GraphConstraintERR : public ::omero::cmd::ERR
{
public:

    typedef GraphConstraintERRPrx ProxyType;
    typedef GraphConstraintERRPtr PointerType;

    GraphConstraintERR()
    {
    }

    GraphConstraintERR(const ::std::string& __ice_category, const ::std::string& __ice_name, const ::omero::cmd::StringMap& __ice_parameters, const ::omero::api::IdListMap& __ice_constraints) :
        ::omero::cmd::ERR(__ice_category, __ice_name, __ice_parameters)
        ,
        constraints(__ice_constraints)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::cmd::ERR::__writeImpl;
    using ::omero::cmd::ERR::__readImpl;
    #endif

public:

    ::omero::api::IdListMap constraints;

protected:

    virtual ~GraphConstraintERR() {}
};

inline bool operator==(const GraphConstraintERR& l, const GraphConstraintERR& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const GraphConstraintERR& l, const GraphConstraintERR& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class GraphSpecList : public ::omero::cmd::Request
{
public:

    typedef GraphSpecListPrx ProxyType;
    typedef GraphSpecListPtr PointerType;

    GraphSpecList()
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::cmd::Request::__writeImpl;
    using ::omero::cmd::Request::__readImpl;
    #endif

    virtual ~GraphSpecList() {}
};

inline bool operator==(const GraphSpecList& l, const GraphSpecList& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const GraphSpecList& l, const GraphSpecList& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class GraphSpecListRsp : public ::omero::cmd::Response, public IceInternal::GCShared
{
public:

    typedef GraphSpecListRspPrx ProxyType;
    typedef GraphSpecListRspPtr PointerType;

    GraphSpecListRsp()
    {
    }

    explicit GraphSpecListRsp(const ::omero::cmd::GraphModifyList& __ice_list) :
        list(__ice_list)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __addObject(::IceInternal::GCCountMap&);
    virtual bool __usesGC();
    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::cmd::Response::__writeImpl;
    using ::omero::cmd::Response::__readImpl;
    #endif

public:

    ::omero::cmd::GraphModifyList list;

protected:

    virtual ~GraphSpecListRsp() {}
};

inline bool operator==(const GraphSpecListRsp& l, const GraphSpecListRsp& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const GraphSpecListRsp& l, const GraphSpecListRsp& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class Chgrp : public ::omero::cmd::GraphModify
{
public:

    typedef ChgrpPrx ProxyType;
    typedef ChgrpPtr PointerType;

    Chgrp()
    {
    }

    Chgrp(const ::std::string& __ice_type, ::Ice::Long __ice_id, const ::omero::cmd::StringMap& __ice_options, ::Ice::Long __ice_grp) :
        ::omero::cmd::GraphModify(__ice_type, __ice_id, __ice_options)
        ,
        grp(__ice_grp)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::cmd::GraphModify::__writeImpl;
    using ::omero::cmd::GraphModify::__readImpl;
    #endif

public:

    ::Ice::Long grp;

protected:

    virtual ~Chgrp() {}
};

inline bool operator==(const Chgrp& l, const Chgrp& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Chgrp& l, const Chgrp& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class ChgrpRsp : public ::omero::cmd::Response
{
public:

    typedef ChgrpRspPrx ProxyType;
    typedef ChgrpRspPtr PointerType;

    ChgrpRsp()
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::cmd::Response::__writeImpl;
    using ::omero::cmd::Response::__readImpl;
    #endif

    virtual ~ChgrpRsp() {}
};

inline bool operator==(const ChgrpRsp& l, const ChgrpRsp& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const ChgrpRsp& l, const ChgrpRsp& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class Chmod : public ::omero::cmd::GraphModify
{
public:

    typedef ChmodPrx ProxyType;
    typedef ChmodPtr PointerType;

    Chmod()
    {
    }

    Chmod(const ::std::string& __ice_type, ::Ice::Long __ice_id, const ::omero::cmd::StringMap& __ice_options, const ::std::string& __ice_permissions) :
        ::omero::cmd::GraphModify(__ice_type, __ice_id, __ice_options)
        ,
        permissions(__ice_permissions)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::cmd::GraphModify::__writeImpl;
    using ::omero::cmd::GraphModify::__readImpl;
    #endif

public:

    ::std::string permissions;

protected:

    virtual ~Chmod() {}
};

inline bool operator==(const Chmod& l, const Chmod& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Chmod& l, const Chmod& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class ChmodRsp : public ::omero::cmd::Response
{
public:

    typedef ChmodRspPrx ProxyType;
    typedef ChmodRspPtr PointerType;

    ChmodRsp()
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::cmd::Response::__writeImpl;
    using ::omero::cmd::Response::__readImpl;
    #endif

    virtual ~ChmodRsp() {}
};

inline bool operator==(const ChmodRsp& l, const ChmodRsp& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const ChmodRsp& l, const ChmodRsp& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class Chown : public ::omero::cmd::GraphModify
{
public:

    typedef ChownPrx ProxyType;
    typedef ChownPtr PointerType;

    Chown()
    {
    }

    Chown(const ::std::string& __ice_type, ::Ice::Long __ice_id, const ::omero::cmd::StringMap& __ice_options, ::Ice::Long __ice_user) :
        ::omero::cmd::GraphModify(__ice_type, __ice_id, __ice_options)
        ,
        user(__ice_user)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::cmd::GraphModify::__writeImpl;
    using ::omero::cmd::GraphModify::__readImpl;
    #endif

public:

    ::Ice::Long user;

protected:

    virtual ~Chown() {}
};

inline bool operator==(const Chown& l, const Chown& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Chown& l, const Chown& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class ChownRsp : public ::omero::cmd::Response
{
public:

    typedef ChownRspPrx ProxyType;
    typedef ChownRspPtr PointerType;

    ChownRsp()
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::cmd::Response::__writeImpl;
    using ::omero::cmd::Response::__readImpl;
    #endif

    virtual ~ChownRsp() {}
};

inline bool operator==(const ChownRsp& l, const ChownRsp& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const ChownRsp& l, const ChownRsp& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class Delete : public ::omero::cmd::GraphModify
{
public:

    typedef DeletePrx ProxyType;
    typedef DeletePtr PointerType;

    Delete()
    {
    }

    Delete(const ::std::string& __ice_type, ::Ice::Long __ice_id, const ::omero::cmd::StringMap& __ice_options) :
        ::omero::cmd::GraphModify(__ice_type, __ice_id, __ice_options)
        
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::cmd::GraphModify::__writeImpl;
    using ::omero::cmd::GraphModify::__readImpl;
    #endif

    virtual ~Delete() {}
};

inline bool operator==(const Delete& l, const Delete& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Delete& l, const Delete& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class DeleteRsp : public ::omero::cmd::OK
{
public:

    typedef DeleteRspPrx ProxyType;
    typedef DeleteRspPtr PointerType;

    DeleteRsp()
    {
    }

    DeleteRsp(const ::std::string& __ice_warning, const ::omero::api::IdListMap& __ice_undeletedFiles, ::Ice::Int __ice_steps, ::Ice::Long __ice_scheduledDeletes, ::Ice::Long __ice_actualDeletes) :
        warning(__ice_warning),
        undeletedFiles(__ice_undeletedFiles),
        steps(__ice_steps),
        scheduledDeletes(__ice_scheduledDeletes),
        actualDeletes(__ice_actualDeletes)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::cmd::OK::__writeImpl;
    using ::omero::cmd::OK::__readImpl;
    #endif

public:

    ::std::string warning;

    ::omero::api::IdListMap undeletedFiles;

    ::Ice::Int steps;

    ::Ice::Long scheduledDeletes;

    ::Ice::Long actualDeletes;

protected:

    virtual ~DeleteRsp() {}
};

inline bool operator==(const DeleteRsp& l, const DeleteRsp& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const DeleteRsp& l, const DeleteRsp& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

}

namespace omero
{

namespace cmd
{

}

}

#endif
