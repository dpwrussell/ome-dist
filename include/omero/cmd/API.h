// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `API.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __omero_cmd__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_cmd_API_h__
#define __omero_cmd__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_cmd_API_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/IncomingAsync.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/SlicedDataF.h>
#include <omero/RTypes.h>
#include <omero/ServerErrors.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace omero
{

namespace cmd
{

class Handle;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::cmd::Handle>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::cmd::Handle*);

class Status;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::cmd::Status>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::cmd::Status*);

class Request;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::cmd::Request>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::cmd::Request*);

class Response;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::cmd::Response>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::cmd::Response*);

class OK;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::cmd::OK>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::cmd::OK*);

class ERR;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::cmd::ERR>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::cmd::ERR*);

class Unknown;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::cmd::Unknown>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::cmd::Unknown*);

class CmdCallback;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::cmd::CmdCallback>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::cmd::CmdCallback*);

class Session;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::cmd::Session>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::cmd::Session*);

}

}

}

namespace omero
{

namespace cmd
{

class Handle;
bool operator==(const Handle&, const Handle&);
bool operator<(const Handle&, const Handle&);
::Ice::Object* upCast(::omero::cmd::Handle*);
typedef ::IceInternal::Handle< ::omero::cmd::Handle> HandlePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::cmd::Handle> HandlePrx;
void __patch(HandlePtr&, const ::Ice::ObjectPtr&);

class Status;
bool operator==(const Status&, const Status&);
bool operator<(const Status&, const Status&);
::Ice::Object* upCast(::omero::cmd::Status*);
typedef ::IceInternal::Handle< ::omero::cmd::Status> StatusPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::cmd::Status> StatusPrx;
void __patch(StatusPtr&, const ::Ice::ObjectPtr&);

class Request;
bool operator==(const Request&, const Request&);
bool operator<(const Request&, const Request&);
::Ice::Object* upCast(::omero::cmd::Request*);
typedef ::IceInternal::Handle< ::omero::cmd::Request> RequestPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::cmd::Request> RequestPrx;
void __patch(RequestPtr&, const ::Ice::ObjectPtr&);

class Response;
bool operator==(const Response&, const Response&);
bool operator<(const Response&, const Response&);
::Ice::Object* upCast(::omero::cmd::Response*);
typedef ::IceInternal::Handle< ::omero::cmd::Response> ResponsePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::cmd::Response> ResponsePrx;
void __patch(ResponsePtr&, const ::Ice::ObjectPtr&);

class OK;
bool operator==(const OK&, const OK&);
bool operator<(const OK&, const OK&);
::Ice::Object* upCast(::omero::cmd::OK*);
typedef ::IceInternal::Handle< ::omero::cmd::OK> OKPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::cmd::OK> OKPrx;
void __patch(OKPtr&, const ::Ice::ObjectPtr&);

class ERR;
bool operator==(const ERR&, const ERR&);
bool operator<(const ERR&, const ERR&);
::Ice::Object* upCast(::omero::cmd::ERR*);
typedef ::IceInternal::Handle< ::omero::cmd::ERR> ERRPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::cmd::ERR> ERRPrx;
void __patch(ERRPtr&, const ::Ice::ObjectPtr&);

class Unknown;
bool operator==(const Unknown&, const Unknown&);
bool operator<(const Unknown&, const Unknown&);
::Ice::Object* upCast(::omero::cmd::Unknown*);
typedef ::IceInternal::Handle< ::omero::cmd::Unknown> UnknownPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::cmd::Unknown> UnknownPrx;
void __patch(UnknownPtr&, const ::Ice::ObjectPtr&);

class CmdCallback;
bool operator==(const CmdCallback&, const CmdCallback&);
bool operator<(const CmdCallback&, const CmdCallback&);
::Ice::Object* upCast(::omero::cmd::CmdCallback*);
typedef ::IceInternal::Handle< ::omero::cmd::CmdCallback> CmdCallbackPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::cmd::CmdCallback> CmdCallbackPrx;
void __patch(CmdCallbackPtr&, const ::Ice::ObjectPtr&);

class Session;
bool operator==(const Session&, const Session&);
bool operator<(const Session&, const Session&);
::Ice::Object* upCast(::omero::cmd::Session*);
typedef ::IceInternal::Handle< ::omero::cmd::Session> SessionPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::cmd::Session> SessionPrx;
void __patch(SessionPtr&, const ::Ice::ObjectPtr&);

}

}

namespace omero
{

namespace cmd
{

typedef ::std::map< ::std::string, ::std::string> StringMap;

typedef ::std::vector< ::omero::cmd::StringMap> StringMapList;

enum State
{
    ALL,
    ACTIVE,
    INACTIVE,
    SUCCESS,
    FAILURE,
    CANCELLED
};

typedef ::std::vector< ::omero::cmd::State> StateList;

typedef ::std::vector< ::omero::cmd::StatusPtr> StatusList;

typedef ::std::vector< ::omero::cmd::RequestPtr> RequestList;

typedef ::std::vector< ::omero::cmd::ResponsePtr> ResponseList;

typedef ::std::vector< ::omero::cmd::HandlePrx> HandleList;

}

}

namespace Ice
{
template<>
struct StreamableTraits< ::omero::cmd::State>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 5;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

}

namespace omero
{

namespace cmd
{

class AMI_Handle_addCallback : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::cmd::AMI_Handle_addCallback> AMI_Handle_addCallbackPtr;

class AMI_Handle_removeCallback : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::cmd::AMI_Handle_removeCallback> AMI_Handle_removeCallbackPtr;

class AMI_Handle_getRequest : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::cmd::RequestPtr&) = 0;

    void __response(const ::omero::cmd::RequestPtr& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::cmd::AMI_Handle_getRequest> AMI_Handle_getRequestPtr;

class AMI_Handle_getResponse : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::cmd::ResponsePtr&) = 0;

    void __response(const ::omero::cmd::ResponsePtr& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::cmd::AMI_Handle_getResponse> AMI_Handle_getResponsePtr;

class AMI_Handle_getStatus : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::cmd::StatusPtr&) = 0;

    void __response(const ::omero::cmd::StatusPtr& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::cmd::AMI_Handle_getStatus> AMI_Handle_getStatusPtr;

class AMI_Handle_cancel : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(bool) = 0;

    void __response(bool __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::cmd::AMI_Handle_cancel> AMI_Handle_cancelPtr;

class AMI_Handle_close : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::cmd::AMI_Handle_close> AMI_Handle_closePtr;

class AMI_Session_submit : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::cmd::HandlePrx&) = 0;

    void __response(const ::omero::cmd::HandlePrx& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::cmd::AMI_Session_submit> AMI_Session_submitPtr;

class AMD_Session_submit : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::cmd::HandlePrx&) = 0;
};

typedef ::IceUtil::Handle< ::omero::cmd::AMD_Session_submit> AMD_Session_submitPtr;

}

}

namespace IceAsync
{

namespace omero
{

namespace cmd
{

class AMD_Session_submit : public ::omero::cmd::AMD_Session_submit, public ::IceInternal::IncomingAsync
{
public:

    AMD_Session_submit(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::cmd::HandlePrx&);
};

}

}

}

namespace omero
{

namespace cmd
{

class Callback_CmdCallback_step_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CmdCallback_step_Base> Callback_CmdCallback_stepPtr;

class Callback_CmdCallback_finished_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CmdCallback_finished_Base> Callback_CmdCallback_finishedPtr;

class Callback_Handle_addCallback_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Handle_addCallback_Base> Callback_Handle_addCallbackPtr;

class Callback_Handle_removeCallback_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Handle_removeCallback_Base> Callback_Handle_removeCallbackPtr;

class Callback_Handle_getRequest_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Handle_getRequest_Base> Callback_Handle_getRequestPtr;

class Callback_Handle_getResponse_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Handle_getResponse_Base> Callback_Handle_getResponsePtr;

class Callback_Handle_getStatus_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Handle_getStatus_Base> Callback_Handle_getStatusPtr;

class Callback_Handle_cancel_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Handle_cancel_Base> Callback_Handle_cancelPtr;

class Callback_Handle_close_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Handle_close_Base> Callback_Handle_closePtr;

class Callback_Session_submit_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Session_submit_Base> Callback_Session_submitPtr;

}

}

namespace IceProxy
{

namespace omero
{

namespace cmd
{

class Status : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<Status> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Status*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Status> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Status*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Status> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Status*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Status> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Status*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Status> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Status*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Status> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Status*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Status> ice_secure(bool __secure) const
    {
        return dynamic_cast<Status*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Status> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Status*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Status> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Status*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Status> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Status*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Status> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Status*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Status> ice_twoway() const
    {
        return dynamic_cast<Status*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Status> ice_oneway() const
    {
        return dynamic_cast<Status*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Status> ice_batchOneway() const
    {
        return dynamic_cast<Status*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Status> ice_datagram() const
    {
        return dynamic_cast<Status*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Status> ice_batchDatagram() const
    {
        return dynamic_cast<Status*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Status> ice_compress(bool __compress) const
    {
        return dynamic_cast<Status*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Status> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Status*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Status> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Status*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Status> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Status*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class Request : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<Request> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Request*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Request> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Request*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Request> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Request*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Request> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Request*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Request> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Request*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Request> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Request*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Request> ice_secure(bool __secure) const
    {
        return dynamic_cast<Request*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Request> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Request*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Request> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Request*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Request> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Request*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Request> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Request*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Request> ice_twoway() const
    {
        return dynamic_cast<Request*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Request> ice_oneway() const
    {
        return dynamic_cast<Request*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Request> ice_batchOneway() const
    {
        return dynamic_cast<Request*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Request> ice_datagram() const
    {
        return dynamic_cast<Request*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Request> ice_batchDatagram() const
    {
        return dynamic_cast<Request*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Request> ice_compress(bool __compress) const
    {
        return dynamic_cast<Request*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Request> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Request*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Request> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Request*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Request> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Request*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class Response : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<Response> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Response*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Response> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Response*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Response> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Response*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Response> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Response*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Response> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Response*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Response> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Response*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Response> ice_secure(bool __secure) const
    {
        return dynamic_cast<Response*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Response> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Response*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Response> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Response*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Response> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Response*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Response> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Response*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Response> ice_twoway() const
    {
        return dynamic_cast<Response*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Response> ice_oneway() const
    {
        return dynamic_cast<Response*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Response> ice_batchOneway() const
    {
        return dynamic_cast<Response*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Response> ice_datagram() const
    {
        return dynamic_cast<Response*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Response> ice_batchDatagram() const
    {
        return dynamic_cast<Response*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Response> ice_compress(bool __compress) const
    {
        return dynamic_cast<Response*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Response> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Response*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Response> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Response*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Response> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Response*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class OK : virtual public ::IceProxy::omero::cmd::Response
{
public:
    
    ::IceInternal::ProxyHandle<OK> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<OK*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<OK> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<OK*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<OK> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<OK*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<OK> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<OK*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<OK> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<OK*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<OK> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<OK*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<OK> ice_secure(bool __secure) const
    {
        return dynamic_cast<OK*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<OK> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<OK*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<OK> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<OK*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<OK> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<OK*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<OK> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<OK*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<OK> ice_twoway() const
    {
        return dynamic_cast<OK*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<OK> ice_oneway() const
    {
        return dynamic_cast<OK*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<OK> ice_batchOneway() const
    {
        return dynamic_cast<OK*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<OK> ice_datagram() const
    {
        return dynamic_cast<OK*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<OK> ice_batchDatagram() const
    {
        return dynamic_cast<OK*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<OK> ice_compress(bool __compress) const
    {
        return dynamic_cast<OK*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<OK> ice_timeout(int __timeout) const
    {
        return dynamic_cast<OK*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<OK> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<OK*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<OK> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<OK*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class ERR : virtual public ::IceProxy::omero::cmd::Response
{
public:
    
    ::IceInternal::ProxyHandle<ERR> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<ERR*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<ERR> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<ERR*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ERR> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<ERR*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<ERR> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<ERR*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ERR> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<ERR*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<ERR> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<ERR*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<ERR> ice_secure(bool __secure) const
    {
        return dynamic_cast<ERR*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<ERR> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<ERR*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<ERR> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<ERR*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<ERR> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<ERR*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<ERR> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<ERR*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<ERR> ice_twoway() const
    {
        return dynamic_cast<ERR*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<ERR> ice_oneway() const
    {
        return dynamic_cast<ERR*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<ERR> ice_batchOneway() const
    {
        return dynamic_cast<ERR*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<ERR> ice_datagram() const
    {
        return dynamic_cast<ERR*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<ERR> ice_batchDatagram() const
    {
        return dynamic_cast<ERR*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<ERR> ice_compress(bool __compress) const
    {
        return dynamic_cast<ERR*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<ERR> ice_timeout(int __timeout) const
    {
        return dynamic_cast<ERR*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ERR> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<ERR*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ERR> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<ERR*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class Unknown : virtual public ::IceProxy::omero::cmd::ERR
{
public:
    
    ::IceInternal::ProxyHandle<Unknown> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Unknown*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Unknown> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Unknown*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Unknown> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Unknown*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Unknown> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Unknown*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Unknown> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Unknown*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Unknown> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Unknown*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Unknown> ice_secure(bool __secure) const
    {
        return dynamic_cast<Unknown*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Unknown> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Unknown*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Unknown> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Unknown*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Unknown> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Unknown*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Unknown> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Unknown*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Unknown> ice_twoway() const
    {
        return dynamic_cast<Unknown*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Unknown> ice_oneway() const
    {
        return dynamic_cast<Unknown*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Unknown> ice_batchOneway() const
    {
        return dynamic_cast<Unknown*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Unknown> ice_datagram() const
    {
        return dynamic_cast<Unknown*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Unknown> ice_batchDatagram() const
    {
        return dynamic_cast<Unknown*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Unknown> ice_compress(bool __compress) const
    {
        return dynamic_cast<Unknown*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Unknown> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Unknown*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Unknown> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Unknown*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Unknown> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Unknown*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class CmdCallback : virtual public ::IceProxy::Ice::Object
{
public:

    void step(::Ice::Int complete, ::Ice::Int total)
    {
        step(complete, total, 0);
    }
    void step(::Ice::Int complete, ::Ice::Int total, const ::Ice::Context& __ctx)
    {
        step(complete, total, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_step(::Ice::Int complete, ::Ice::Int total, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_step(complete, total, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_step(::Ice::Int complete, ::Ice::Int total, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_step(complete, total, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_step(::Ice::Int complete, ::Ice::Int total, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_step(complete, total, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_step(::Ice::Int complete, ::Ice::Int total, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_step(complete, total, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_step(::Ice::Int complete, ::Ice::Int total)
    {
        return begin_step(complete, total, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_step(::Ice::Int complete, ::Ice::Int total, const ::Ice::Context& __ctx)
    {
        return begin_step(complete, total, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_step(::Ice::Int complete, ::Ice::Int total, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_step(complete, total, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_step(::Ice::Int complete, ::Ice::Int total, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_step(complete, total, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_step(::Ice::Int complete, ::Ice::Int total, const ::omero::cmd::Callback_CmdCallback_stepPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_step(complete, total, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_step(::Ice::Int complete, ::Ice::Int total, const ::Ice::Context& __ctx, const ::omero::cmd::Callback_CmdCallback_stepPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_step(complete, total, &__ctx, __del, __cookie);
    }

    void end_step(const ::Ice::AsyncResultPtr&);
    
private:

    void step(::Ice::Int, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_step(::Ice::Int, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void finished(const ::omero::cmd::ResponsePtr& rsp, const ::omero::cmd::StatusPtr& s)
    {
        finished(rsp, s, 0);
    }
    void finished(const ::omero::cmd::ResponsePtr& rsp, const ::omero::cmd::StatusPtr& s, const ::Ice::Context& __ctx)
    {
        finished(rsp, s, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_finished(const ::omero::cmd::ResponsePtr& rsp, const ::omero::cmd::StatusPtr& s, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_finished(rsp, s, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_finished(const ::omero::cmd::ResponsePtr& rsp, const ::omero::cmd::StatusPtr& s, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_finished(rsp, s, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_finished(const ::omero::cmd::ResponsePtr& rsp, const ::omero::cmd::StatusPtr& s, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_finished(rsp, s, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_finished(const ::omero::cmd::ResponsePtr& rsp, const ::omero::cmd::StatusPtr& s, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_finished(rsp, s, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_finished(const ::omero::cmd::ResponsePtr& rsp, const ::omero::cmd::StatusPtr& s)
    {
        return begin_finished(rsp, s, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_finished(const ::omero::cmd::ResponsePtr& rsp, const ::omero::cmd::StatusPtr& s, const ::Ice::Context& __ctx)
    {
        return begin_finished(rsp, s, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_finished(const ::omero::cmd::ResponsePtr& rsp, const ::omero::cmd::StatusPtr& s, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_finished(rsp, s, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_finished(const ::omero::cmd::ResponsePtr& rsp, const ::omero::cmd::StatusPtr& s, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_finished(rsp, s, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_finished(const ::omero::cmd::ResponsePtr& rsp, const ::omero::cmd::StatusPtr& s, const ::omero::cmd::Callback_CmdCallback_finishedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_finished(rsp, s, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_finished(const ::omero::cmd::ResponsePtr& rsp, const ::omero::cmd::StatusPtr& s, const ::Ice::Context& __ctx, const ::omero::cmd::Callback_CmdCallback_finishedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_finished(rsp, s, &__ctx, __del, __cookie);
    }

    void end_finished(const ::Ice::AsyncResultPtr&);
    
private:

    void finished(const ::omero::cmd::ResponsePtr&, const ::omero::cmd::StatusPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_finished(const ::omero::cmd::ResponsePtr&, const ::omero::cmd::StatusPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<CmdCallback> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<CmdCallback*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<CmdCallback> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<CmdCallback*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<CmdCallback> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<CmdCallback*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<CmdCallback> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<CmdCallback*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<CmdCallback> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<CmdCallback*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<CmdCallback> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<CmdCallback*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<CmdCallback> ice_secure(bool __secure) const
    {
        return dynamic_cast<CmdCallback*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<CmdCallback> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<CmdCallback*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<CmdCallback> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<CmdCallback*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<CmdCallback> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<CmdCallback*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<CmdCallback> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<CmdCallback*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<CmdCallback> ice_twoway() const
    {
        return dynamic_cast<CmdCallback*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<CmdCallback> ice_oneway() const
    {
        return dynamic_cast<CmdCallback*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<CmdCallback> ice_batchOneway() const
    {
        return dynamic_cast<CmdCallback*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<CmdCallback> ice_datagram() const
    {
        return dynamic_cast<CmdCallback*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<CmdCallback> ice_batchDatagram() const
    {
        return dynamic_cast<CmdCallback*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<CmdCallback> ice_compress(bool __compress) const
    {
        return dynamic_cast<CmdCallback*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<CmdCallback> ice_timeout(int __timeout) const
    {
        return dynamic_cast<CmdCallback*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<CmdCallback> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<CmdCallback*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<CmdCallback> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<CmdCallback*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class Handle : virtual public ::IceProxy::Ice::Object
{
public:

    void addCallback(const ::omero::cmd::CmdCallbackPrx& cb)
    {
        addCallback(cb, 0);
    }
    void addCallback(const ::omero::cmd::CmdCallbackPrx& cb, const ::Ice::Context& __ctx)
    {
        addCallback(cb, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addCallback(const ::omero::cmd::CmdCallbackPrx& cb, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addCallback(cb, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addCallback(const ::omero::cmd::CmdCallbackPrx& cb, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addCallback(cb, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addCallback(const ::omero::cmd::CmdCallbackPrx& cb, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addCallback(cb, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addCallback(const ::omero::cmd::CmdCallbackPrx& cb, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addCallback(cb, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addCallback(const ::omero::cmd::CmdCallbackPrx& cb)
    {
        return begin_addCallback(cb, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addCallback(const ::omero::cmd::CmdCallbackPrx& cb, const ::Ice::Context& __ctx)
    {
        return begin_addCallback(cb, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addCallback(const ::omero::cmd::CmdCallbackPrx& cb, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addCallback(cb, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addCallback(const ::omero::cmd::CmdCallbackPrx& cb, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addCallback(cb, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addCallback(const ::omero::cmd::CmdCallbackPrx& cb, const ::omero::cmd::Callback_Handle_addCallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addCallback(cb, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addCallback(const ::omero::cmd::CmdCallbackPrx& cb, const ::Ice::Context& __ctx, const ::omero::cmd::Callback_Handle_addCallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addCallback(cb, &__ctx, __del, __cookie);
    }

    void end_addCallback(const ::Ice::AsyncResultPtr&);
    
private:

    void addCallback(const ::omero::cmd::CmdCallbackPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addCallback(const ::omero::cmd::CmdCallbackPrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool addCallback_async(const ::omero::cmd::AMI_Handle_addCallbackPtr&, const ::omero::cmd::CmdCallbackPrx&);
    bool addCallback_async(const ::omero::cmd::AMI_Handle_addCallbackPtr&, const ::omero::cmd::CmdCallbackPrx&, const ::Ice::Context&);

    void removeCallback(const ::omero::cmd::CmdCallbackPrx& cb)
    {
        removeCallback(cb, 0);
    }
    void removeCallback(const ::omero::cmd::CmdCallbackPrx& cb, const ::Ice::Context& __ctx)
    {
        removeCallback(cb, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeCallback(const ::omero::cmd::CmdCallbackPrx& cb, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeCallback(cb, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeCallback(const ::omero::cmd::CmdCallbackPrx& cb, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeCallback(cb, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeCallback(const ::omero::cmd::CmdCallbackPrx& cb, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeCallback(cb, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeCallback(const ::omero::cmd::CmdCallbackPrx& cb, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeCallback(cb, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeCallback(const ::omero::cmd::CmdCallbackPrx& cb)
    {
        return begin_removeCallback(cb, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeCallback(const ::omero::cmd::CmdCallbackPrx& cb, const ::Ice::Context& __ctx)
    {
        return begin_removeCallback(cb, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeCallback(const ::omero::cmd::CmdCallbackPrx& cb, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeCallback(cb, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeCallback(const ::omero::cmd::CmdCallbackPrx& cb, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeCallback(cb, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeCallback(const ::omero::cmd::CmdCallbackPrx& cb, const ::omero::cmd::Callback_Handle_removeCallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeCallback(cb, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeCallback(const ::omero::cmd::CmdCallbackPrx& cb, const ::Ice::Context& __ctx, const ::omero::cmd::Callback_Handle_removeCallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeCallback(cb, &__ctx, __del, __cookie);
    }

    void end_removeCallback(const ::Ice::AsyncResultPtr&);
    
private:

    void removeCallback(const ::omero::cmd::CmdCallbackPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeCallback(const ::omero::cmd::CmdCallbackPrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool removeCallback_async(const ::omero::cmd::AMI_Handle_removeCallbackPtr&, const ::omero::cmd::CmdCallbackPrx&);
    bool removeCallback_async(const ::omero::cmd::AMI_Handle_removeCallbackPtr&, const ::omero::cmd::CmdCallbackPrx&, const ::Ice::Context&);

    ::omero::cmd::RequestPtr getRequest()
    {
        return getRequest(0);
    }
    ::omero::cmd::RequestPtr getRequest(const ::Ice::Context& __ctx)
    {
        return getRequest(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getRequest(const ::IceInternal::Function<void (const ::omero::cmd::RequestPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getRequest(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getRequest(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getRequest(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getRequest(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::cmd::RequestPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getRequest(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getRequest(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getRequest(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getRequest(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::cmd::RequestPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::cmd::RequestPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::cmd::HandlePrx __proxy = ::omero::cmd::HandlePrx::uncheckedCast(__result->getProxy());
                ::omero::cmd::RequestPtr __ret;
                try
                {
                    __ret = __proxy->end_getRequest(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::cmd::RequestPtr&)> _response;
        };
        return begin_getRequest(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getRequest()
    {
        return begin_getRequest(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRequest(const ::Ice::Context& __ctx)
    {
        return begin_getRequest(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRequest(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRequest(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRequest(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRequest(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRequest(const ::omero::cmd::Callback_Handle_getRequestPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRequest(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRequest(const ::Ice::Context& __ctx, const ::omero::cmd::Callback_Handle_getRequestPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRequest(&__ctx, __del, __cookie);
    }

    ::omero::cmd::RequestPtr end_getRequest(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::cmd::RequestPtr getRequest(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getRequest(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool getRequest_async(const ::omero::cmd::AMI_Handle_getRequestPtr&);
    bool getRequest_async(const ::omero::cmd::AMI_Handle_getRequestPtr&, const ::Ice::Context&);

    ::omero::cmd::ResponsePtr getResponse()
    {
        return getResponse(0);
    }
    ::omero::cmd::ResponsePtr getResponse(const ::Ice::Context& __ctx)
    {
        return getResponse(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getResponse(const ::IceInternal::Function<void (const ::omero::cmd::ResponsePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getResponse(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getResponse(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getResponse(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getResponse(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::cmd::ResponsePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getResponse(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getResponse(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getResponse(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getResponse(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::cmd::ResponsePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::cmd::ResponsePtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::cmd::HandlePrx __proxy = ::omero::cmd::HandlePrx::uncheckedCast(__result->getProxy());
                ::omero::cmd::ResponsePtr __ret;
                try
                {
                    __ret = __proxy->end_getResponse(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::cmd::ResponsePtr&)> _response;
        };
        return begin_getResponse(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getResponse()
    {
        return begin_getResponse(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getResponse(const ::Ice::Context& __ctx)
    {
        return begin_getResponse(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getResponse(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getResponse(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getResponse(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getResponse(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getResponse(const ::omero::cmd::Callback_Handle_getResponsePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getResponse(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getResponse(const ::Ice::Context& __ctx, const ::omero::cmd::Callback_Handle_getResponsePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getResponse(&__ctx, __del, __cookie);
    }

    ::omero::cmd::ResponsePtr end_getResponse(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::cmd::ResponsePtr getResponse(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getResponse(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool getResponse_async(const ::omero::cmd::AMI_Handle_getResponsePtr&);
    bool getResponse_async(const ::omero::cmd::AMI_Handle_getResponsePtr&, const ::Ice::Context&);

    ::omero::cmd::StatusPtr getStatus()
    {
        return getStatus(0);
    }
    ::omero::cmd::StatusPtr getStatus(const ::Ice::Context& __ctx)
    {
        return getStatus(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getStatus(const ::IceInternal::Function<void (const ::omero::cmd::StatusPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getStatus(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getStatus(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getStatus(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getStatus(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::cmd::StatusPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getStatus(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getStatus(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getStatus(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getStatus(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::cmd::StatusPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::cmd::StatusPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::cmd::HandlePrx __proxy = ::omero::cmd::HandlePrx::uncheckedCast(__result->getProxy());
                ::omero::cmd::StatusPtr __ret;
                try
                {
                    __ret = __proxy->end_getStatus(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::cmd::StatusPtr&)> _response;
        };
        return begin_getStatus(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getStatus()
    {
        return begin_getStatus(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getStatus(const ::Ice::Context& __ctx)
    {
        return begin_getStatus(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getStatus(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStatus(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getStatus(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStatus(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getStatus(const ::omero::cmd::Callback_Handle_getStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStatus(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getStatus(const ::Ice::Context& __ctx, const ::omero::cmd::Callback_Handle_getStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStatus(&__ctx, __del, __cookie);
    }

    ::omero::cmd::StatusPtr end_getStatus(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::cmd::StatusPtr getStatus(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getStatus(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool getStatus_async(const ::omero::cmd::AMI_Handle_getStatusPtr&);
    bool getStatus_async(const ::omero::cmd::AMI_Handle_getStatusPtr&, const ::Ice::Context&);

    bool cancel()
    {
        return cancel(0);
    }
    bool cancel(const ::Ice::Context& __ctx)
    {
        return cancel(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_cancel(const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_cancel(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_cancel(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_cancel(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_cancel(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_cancel(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_cancel(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_cancel(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_cancel(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::cmd::HandlePrx __proxy = ::omero::cmd::HandlePrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_cancel(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_cancel(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_cancel()
    {
        return begin_cancel(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_cancel(const ::Ice::Context& __ctx)
    {
        return begin_cancel(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_cancel(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancel(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_cancel(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancel(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_cancel(const ::omero::cmd::Callback_Handle_cancelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancel(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_cancel(const ::Ice::Context& __ctx, const ::omero::cmd::Callback_Handle_cancelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancel(&__ctx, __del, __cookie);
    }

    bool end_cancel(const ::Ice::AsyncResultPtr&);
    
private:

    bool cancel(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_cancel(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool cancel_async(const ::omero::cmd::AMI_Handle_cancelPtr&);
    bool cancel_async(const ::omero::cmd::AMI_Handle_cancelPtr&, const ::Ice::Context&);

    void close()
    {
        close(0);
    }
    void close(const ::Ice::Context& __ctx)
    {
        close(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_close(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_close(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_close(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_close(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_close(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_close(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_close(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_close(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_close()
    {
        return begin_close(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_close(const ::Ice::Context& __ctx)
    {
        return begin_close(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_close(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_close(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_close(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_close(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_close(const ::omero::cmd::Callback_Handle_closePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_close(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_close(const ::Ice::Context& __ctx, const ::omero::cmd::Callback_Handle_closePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_close(&__ctx, __del, __cookie);
    }

    void end_close(const ::Ice::AsyncResultPtr&);
    
private:

    void close(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_close(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool close_async(const ::omero::cmd::AMI_Handle_closePtr&);
    bool close_async(const ::omero::cmd::AMI_Handle_closePtr&, const ::Ice::Context&);
    
    ::IceInternal::ProxyHandle<Handle> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Handle*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Handle> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Handle*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Handle> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Handle*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Handle> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Handle*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Handle> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Handle*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Handle> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Handle*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Handle> ice_secure(bool __secure) const
    {
        return dynamic_cast<Handle*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Handle> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Handle*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Handle> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Handle*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Handle> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Handle*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Handle> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Handle*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Handle> ice_twoway() const
    {
        return dynamic_cast<Handle*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Handle> ice_oneway() const
    {
        return dynamic_cast<Handle*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Handle> ice_batchOneway() const
    {
        return dynamic_cast<Handle*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Handle> ice_datagram() const
    {
        return dynamic_cast<Handle*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Handle> ice_batchDatagram() const
    {
        return dynamic_cast<Handle*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Handle> ice_compress(bool __compress) const
    {
        return dynamic_cast<Handle*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Handle> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Handle*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Handle> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Handle*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Handle> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Handle*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class Session : virtual public ::IceProxy::Glacier2::Session
{
public:

    ::omero::cmd::HandlePrx submit(const ::omero::cmd::RequestPtr& req)
    {
        return submit(req, 0);
    }
    ::omero::cmd::HandlePrx submit(const ::omero::cmd::RequestPtr& req, const ::Ice::Context& __ctx)
    {
        return submit(req, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_submit(const ::omero::cmd::RequestPtr& req, const ::IceInternal::Function<void (const ::omero::cmd::HandlePrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_submit(req, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_submit(const ::omero::cmd::RequestPtr& req, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_submit(req, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_submit(const ::omero::cmd::RequestPtr& req, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::cmd::HandlePrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_submit(req, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_submit(const ::omero::cmd::RequestPtr& req, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_submit(req, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_submit(const ::omero::cmd::RequestPtr& req, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::cmd::HandlePrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::cmd::HandlePrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::cmd::SessionPrx __proxy = ::omero::cmd::SessionPrx::uncheckedCast(__result->getProxy());
                ::omero::cmd::HandlePrx __ret;
                try
                {
                    __ret = __proxy->end_submit(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::cmd::HandlePrx&)> _response;
        };
        return begin_submit(req, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_submit(const ::omero::cmd::RequestPtr& req)
    {
        return begin_submit(req, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_submit(const ::omero::cmd::RequestPtr& req, const ::Ice::Context& __ctx)
    {
        return begin_submit(req, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_submit(const ::omero::cmd::RequestPtr& req, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_submit(req, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_submit(const ::omero::cmd::RequestPtr& req, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_submit(req, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_submit(const ::omero::cmd::RequestPtr& req, const ::omero::cmd::Callback_Session_submitPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_submit(req, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_submit(const ::omero::cmd::RequestPtr& req, const ::Ice::Context& __ctx, const ::omero::cmd::Callback_Session_submitPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_submit(req, &__ctx, __del, __cookie);
    }

    ::omero::cmd::HandlePrx end_submit(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::cmd::HandlePrx submit(const ::omero::cmd::RequestPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_submit(const ::omero::cmd::RequestPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool submit_async(const ::omero::cmd::AMI_Session_submitPtr&, const ::omero::cmd::RequestPtr&);
    bool submit_async(const ::omero::cmd::AMI_Session_submitPtr&, const ::omero::cmd::RequestPtr&, const ::Ice::Context&);
    
    ::IceInternal::ProxyHandle<Session> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_secure(bool __secure) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_twoway() const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_oneway() const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_batchOneway() const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_datagram() const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_batchDatagram() const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_compress(bool __compress) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

namespace IceDelegate
{

namespace omero
{

namespace cmd
{

class Status : virtual public ::IceDelegate::Ice::Object
{
public:
};

class Request : virtual public ::IceDelegate::Ice::Object
{
public:
};

class Response : virtual public ::IceDelegate::Ice::Object
{
public:
};

class OK : virtual public ::IceDelegate::omero::cmd::Response
{
public:
};

class ERR : virtual public ::IceDelegate::omero::cmd::Response
{
public:
};

class Unknown : virtual public ::IceDelegate::omero::cmd::ERR
{
public:
};

class CmdCallback : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void step(::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void finished(const ::omero::cmd::ResponsePtr&, const ::omero::cmd::StatusPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class Handle : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void addCallback(const ::omero::cmd::CmdCallbackPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeCallback(const ::omero::cmd::CmdCallbackPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::cmd::RequestPtr getRequest(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::cmd::ResponsePtr getResponse(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::cmd::StatusPtr getStatus(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool cancel(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void close(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class Session : virtual public ::IceDelegate::Glacier2::Session
{
public:

    virtual ::omero::cmd::HandlePrx submit(const ::omero::cmd::RequestPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

}

namespace IceDelegateM
{

namespace omero
{

namespace cmd
{

class Status : virtual public ::IceDelegate::omero::cmd::Status,
               virtual public ::IceDelegateM::Ice::Object
{
public:
};

class Request : virtual public ::IceDelegate::omero::cmd::Request,
                virtual public ::IceDelegateM::Ice::Object
{
public:
};

class Response : virtual public ::IceDelegate::omero::cmd::Response,
                 virtual public ::IceDelegateM::Ice::Object
{
public:
};

class OK : virtual public ::IceDelegate::omero::cmd::OK,
           virtual public ::IceDelegateM::omero::cmd::Response
{
public:
};

class ERR : virtual public ::IceDelegate::omero::cmd::ERR,
            virtual public ::IceDelegateM::omero::cmd::Response
{
public:
};

class Unknown : virtual public ::IceDelegate::omero::cmd::Unknown,
                virtual public ::IceDelegateM::omero::cmd::ERR
{
public:
};

class CmdCallback : virtual public ::IceDelegate::omero::cmd::CmdCallback,
                    virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void step(::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void finished(const ::omero::cmd::ResponsePtr&, const ::omero::cmd::StatusPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class Handle : virtual public ::IceDelegate::omero::cmd::Handle,
               virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void addCallback(const ::omero::cmd::CmdCallbackPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeCallback(const ::omero::cmd::CmdCallbackPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::cmd::RequestPtr getRequest(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::cmd::ResponsePtr getResponse(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::cmd::StatusPtr getStatus(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool cancel(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void close(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class Session : virtual public ::IceDelegate::omero::cmd::Session,
                virtual public ::IceDelegateM::Glacier2::Session
{
public:

    virtual ::omero::cmd::HandlePrx submit(const ::omero::cmd::RequestPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace IceDelegateD
{

namespace omero
{

namespace cmd
{

class Status : virtual public ::IceDelegate::omero::cmd::Status,
               virtual public ::IceDelegateD::Ice::Object
{
public:
};

class Request : virtual public ::IceDelegate::omero::cmd::Request,
                virtual public ::IceDelegateD::Ice::Object
{
public:
};

class Response : virtual public ::IceDelegate::omero::cmd::Response,
                 virtual public ::IceDelegateD::Ice::Object
{
public:
};

class OK : virtual public ::IceDelegate::omero::cmd::OK,
           virtual public ::IceDelegateD::omero::cmd::Response
{
public:
};

class ERR : virtual public ::IceDelegate::omero::cmd::ERR,
            virtual public ::IceDelegateD::omero::cmd::Response
{
public:
};

class Unknown : virtual public ::IceDelegate::omero::cmd::Unknown,
                virtual public ::IceDelegateD::omero::cmd::ERR
{
public:
};

class CmdCallback : virtual public ::IceDelegate::omero::cmd::CmdCallback,
                    virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void step(::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void finished(const ::omero::cmd::ResponsePtr&, const ::omero::cmd::StatusPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class Handle : virtual public ::IceDelegate::omero::cmd::Handle,
               virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void addCallback(const ::omero::cmd::CmdCallbackPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeCallback(const ::omero::cmd::CmdCallbackPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::cmd::RequestPtr getRequest(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::cmd::ResponsePtr getResponse(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::cmd::StatusPtr getStatus(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool cancel(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void close(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class Session : virtual public ::IceDelegate::omero::cmd::Session,
                virtual public ::IceDelegateD::Glacier2::Session
{
public:

    virtual ::omero::cmd::HandlePrx submit(const ::omero::cmd::RequestPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace omero
{

namespace cmd
{

class Status : virtual public ::Ice::Object
{
public:

    typedef StatusPrx ProxyType;
    typedef StatusPtr PointerType;

    Status()
    {
    }

    Status(const ::omero::cmd::HandlePrx& __ice_source, const ::std::string& __ice_category, const ::std::string& __ice_name, const ::omero::cmd::StateList& __ice_flags, const ::omero::cmd::StringMap& __ice_parameters, ::Ice::Int __ice_steps, ::Ice::Long __ice_startTime, const ::Ice::LongSeq& __ice_stepStartTimes, const ::Ice::LongSeq& __ice_stepStopTimes, ::Ice::Long __ice_stopTime) :
        source(__ice_source),
        category(__ice_category),
        name(__ice_name),
        flags(__ice_flags),
        parameters(__ice_parameters),
        steps(__ice_steps),
        startTime(__ice_startTime),
        stepStartTimes(__ice_stepStartTimes),
        stepStopTimes(__ice_stepStopTimes),
        stopTime(__ice_stopTime)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif

public:

    ::omero::cmd::HandlePrx source;

    ::std::string category;

    ::std::string name;

    ::omero::cmd::StateList flags;

    ::omero::cmd::StringMap parameters;

    ::Ice::Int steps;

    ::Ice::Long startTime;

    ::Ice::LongSeq stepStartTimes;

    ::Ice::LongSeq stepStopTimes;

    ::Ice::Long stopTime;

protected:

    virtual ~Status() {}

    friend class Status__staticInit;
};

class Status__staticInit
{
public:

    ::omero::cmd::Status _init;
};

static Status__staticInit _Status_init;

inline bool operator==(const Status& l, const Status& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Status& l, const Status& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class Request : virtual public ::Ice::Object
{
public:

    typedef RequestPrx ProxyType;
    typedef RequestPtr PointerType;

    Request()
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif

    virtual ~Request() {}
};

inline bool operator==(const Request& l, const Request& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Request& l, const Request& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class Response : virtual public ::Ice::Object
{
public:

    typedef ResponsePrx ProxyType;
    typedef ResponsePtr PointerType;

    Response()
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif

    virtual ~Response() {}
};

inline bool operator==(const Response& l, const Response& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Response& l, const Response& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class OK : public ::omero::cmd::Response
{
public:

    typedef OKPrx ProxyType;
    typedef OKPtr PointerType;

    OK()
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::cmd::Response::__writeImpl;
    using ::omero::cmd::Response::__readImpl;
    #endif

    virtual ~OK() {}
};

inline bool operator==(const OK& l, const OK& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const OK& l, const OK& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class ERR : public ::omero::cmd::Response
{
public:

    typedef ERRPrx ProxyType;
    typedef ERRPtr PointerType;

    ERR()
    {
    }

    ERR(const ::std::string& __ice_category, const ::std::string& __ice_name, const ::omero::cmd::StringMap& __ice_parameters) :
        category(__ice_category),
        name(__ice_name),
        parameters(__ice_parameters)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::cmd::Response::__writeImpl;
    using ::omero::cmd::Response::__readImpl;
    #endif

public:

    ::std::string category;

    ::std::string name;

    ::omero::cmd::StringMap parameters;

protected:

    virtual ~ERR() {}
};

inline bool operator==(const ERR& l, const ERR& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const ERR& l, const ERR& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class Unknown : public ::omero::cmd::ERR
{
public:

    typedef UnknownPrx ProxyType;
    typedef UnknownPtr PointerType;

    Unknown()
    {
    }

    Unknown(const ::std::string& __ice_category, const ::std::string& __ice_name, const ::omero::cmd::StringMap& __ice_parameters) :
        ::omero::cmd::ERR(__ice_category, __ice_name, __ice_parameters)
        
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::cmd::ERR::__writeImpl;
    using ::omero::cmd::ERR::__readImpl;
    #endif

    virtual ~Unknown() {}
};

inline bool operator==(const Unknown& l, const Unknown& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Unknown& l, const Unknown& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class CmdCallback : virtual public ::Ice::Object
{
public:

    typedef CmdCallbackPrx ProxyType;
    typedef CmdCallbackPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void step(::Ice::Int, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___step(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void finished(const ::omero::cmd::ResponsePtr&, const ::omero::cmd::StatusPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___finished(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const CmdCallback& l, const CmdCallback& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const CmdCallback& l, const CmdCallback& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class Handle : virtual public ::Ice::Object
{
public:

    typedef HandlePrx ProxyType;
    typedef HandlePtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void addCallback(const ::omero::cmd::CmdCallbackPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addCallback(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeCallback(const ::omero::cmd::CmdCallbackPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeCallback(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::cmd::RequestPtr getRequest(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getRequest(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::cmd::ResponsePtr getResponse(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getResponse(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::cmd::StatusPtr getStatus(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getStatus(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool cancel(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___cancel(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void close(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___close(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const Handle& l, const Handle& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Handle& l, const Handle& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class Session : virtual public ::Glacier2::Session
{
public:

    typedef SessionPrx ProxyType;
    typedef SessionPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void submit_async(const ::omero::cmd::AMD_Session_submitPtr&, const ::omero::cmd::RequestPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___submit(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const Session& l, const Session& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Session& l, const Session& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

}

namespace omero
{

namespace cmd
{

template<class T>
class CallbackNC_CmdCallback_step : public Callback_CmdCallback_step_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CmdCallback_step(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_CmdCallback_stepPtr
newCallback_CmdCallback_step(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CmdCallback_step<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CmdCallback_stepPtr
newCallback_CmdCallback_step(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CmdCallback_step<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_CmdCallback_stepPtr
newCallback_CmdCallback_step(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CmdCallback_step<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CmdCallback_stepPtr
newCallback_CmdCallback_step(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CmdCallback_step<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_CmdCallback_step : public Callback_CmdCallback_step_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CmdCallback_step(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_CmdCallback_stepPtr
newCallback_CmdCallback_step(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CmdCallback_step<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CmdCallback_stepPtr
newCallback_CmdCallback_step(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CmdCallback_step<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_CmdCallback_stepPtr
newCallback_CmdCallback_step(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CmdCallback_step<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CmdCallback_stepPtr
newCallback_CmdCallback_step(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CmdCallback_step<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_CmdCallback_finished : public Callback_CmdCallback_finished_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CmdCallback_finished(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_CmdCallback_finishedPtr
newCallback_CmdCallback_finished(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CmdCallback_finished<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CmdCallback_finishedPtr
newCallback_CmdCallback_finished(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CmdCallback_finished<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_CmdCallback_finishedPtr
newCallback_CmdCallback_finished(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CmdCallback_finished<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CmdCallback_finishedPtr
newCallback_CmdCallback_finished(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CmdCallback_finished<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_CmdCallback_finished : public Callback_CmdCallback_finished_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CmdCallback_finished(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_CmdCallback_finishedPtr
newCallback_CmdCallback_finished(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CmdCallback_finished<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CmdCallback_finishedPtr
newCallback_CmdCallback_finished(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CmdCallback_finished<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_CmdCallback_finishedPtr
newCallback_CmdCallback_finished(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CmdCallback_finished<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CmdCallback_finishedPtr
newCallback_CmdCallback_finished(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CmdCallback_finished<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Handle_addCallback : public Callback_Handle_addCallback_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Handle_addCallback(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Handle_addCallbackPtr
newCallback_Handle_addCallback(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Handle_addCallback<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Handle_addCallbackPtr
newCallback_Handle_addCallback(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Handle_addCallback<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Handle_addCallbackPtr
newCallback_Handle_addCallback(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Handle_addCallback<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Handle_addCallbackPtr
newCallback_Handle_addCallback(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Handle_addCallback<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Handle_addCallback : public Callback_Handle_addCallback_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Handle_addCallback(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Handle_addCallbackPtr
newCallback_Handle_addCallback(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Handle_addCallback<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Handle_addCallbackPtr
newCallback_Handle_addCallback(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Handle_addCallback<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Handle_addCallbackPtr
newCallback_Handle_addCallback(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Handle_addCallback<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Handle_addCallbackPtr
newCallback_Handle_addCallback(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Handle_addCallback<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Handle_removeCallback : public Callback_Handle_removeCallback_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Handle_removeCallback(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Handle_removeCallbackPtr
newCallback_Handle_removeCallback(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Handle_removeCallback<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Handle_removeCallbackPtr
newCallback_Handle_removeCallback(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Handle_removeCallback<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Handle_removeCallbackPtr
newCallback_Handle_removeCallback(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Handle_removeCallback<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Handle_removeCallbackPtr
newCallback_Handle_removeCallback(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Handle_removeCallback<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Handle_removeCallback : public Callback_Handle_removeCallback_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Handle_removeCallback(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Handle_removeCallbackPtr
newCallback_Handle_removeCallback(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Handle_removeCallback<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Handle_removeCallbackPtr
newCallback_Handle_removeCallback(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Handle_removeCallback<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Handle_removeCallbackPtr
newCallback_Handle_removeCallback(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Handle_removeCallback<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Handle_removeCallbackPtr
newCallback_Handle_removeCallback(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Handle_removeCallback<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Handle_getRequest : public Callback_Handle_getRequest_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::cmd::RequestPtr&);

    CallbackNC_Handle_getRequest(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::cmd::HandlePrx __proxy = ::omero::cmd::HandlePrx::uncheckedCast(__result->getProxy());
        ::omero::cmd::RequestPtr __ret;
        try
        {
            __ret = __proxy->end_getRequest(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Handle_getRequestPtr
newCallback_Handle_getRequest(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::cmd::RequestPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Handle_getRequest<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Handle_getRequestPtr
newCallback_Handle_getRequest(T* instance, void (T::*cb)(const ::omero::cmd::RequestPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Handle_getRequest<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Handle_getRequest : public Callback_Handle_getRequest_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::cmd::RequestPtr&, const CT&);

    Callback_Handle_getRequest(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::cmd::HandlePrx __proxy = ::omero::cmd::HandlePrx::uncheckedCast(__result->getProxy());
        ::omero::cmd::RequestPtr __ret;
        try
        {
            __ret = __proxy->end_getRequest(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Handle_getRequestPtr
newCallback_Handle_getRequest(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::cmd::RequestPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Handle_getRequest<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Handle_getRequestPtr
newCallback_Handle_getRequest(T* instance, void (T::*cb)(const ::omero::cmd::RequestPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Handle_getRequest<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Handle_getResponse : public Callback_Handle_getResponse_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::cmd::ResponsePtr&);

    CallbackNC_Handle_getResponse(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::cmd::HandlePrx __proxy = ::omero::cmd::HandlePrx::uncheckedCast(__result->getProxy());
        ::omero::cmd::ResponsePtr __ret;
        try
        {
            __ret = __proxy->end_getResponse(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Handle_getResponsePtr
newCallback_Handle_getResponse(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::cmd::ResponsePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Handle_getResponse<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Handle_getResponsePtr
newCallback_Handle_getResponse(T* instance, void (T::*cb)(const ::omero::cmd::ResponsePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Handle_getResponse<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Handle_getResponse : public Callback_Handle_getResponse_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::cmd::ResponsePtr&, const CT&);

    Callback_Handle_getResponse(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::cmd::HandlePrx __proxy = ::omero::cmd::HandlePrx::uncheckedCast(__result->getProxy());
        ::omero::cmd::ResponsePtr __ret;
        try
        {
            __ret = __proxy->end_getResponse(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Handle_getResponsePtr
newCallback_Handle_getResponse(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::cmd::ResponsePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Handle_getResponse<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Handle_getResponsePtr
newCallback_Handle_getResponse(T* instance, void (T::*cb)(const ::omero::cmd::ResponsePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Handle_getResponse<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Handle_getStatus : public Callback_Handle_getStatus_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::cmd::StatusPtr&);

    CallbackNC_Handle_getStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::cmd::HandlePrx __proxy = ::omero::cmd::HandlePrx::uncheckedCast(__result->getProxy());
        ::omero::cmd::StatusPtr __ret;
        try
        {
            __ret = __proxy->end_getStatus(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Handle_getStatusPtr
newCallback_Handle_getStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::cmd::StatusPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Handle_getStatus<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Handle_getStatusPtr
newCallback_Handle_getStatus(T* instance, void (T::*cb)(const ::omero::cmd::StatusPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Handle_getStatus<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Handle_getStatus : public Callback_Handle_getStatus_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::cmd::StatusPtr&, const CT&);

    Callback_Handle_getStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::cmd::HandlePrx __proxy = ::omero::cmd::HandlePrx::uncheckedCast(__result->getProxy());
        ::omero::cmd::StatusPtr __ret;
        try
        {
            __ret = __proxy->end_getStatus(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Handle_getStatusPtr
newCallback_Handle_getStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::cmd::StatusPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Handle_getStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Handle_getStatusPtr
newCallback_Handle_getStatus(T* instance, void (T::*cb)(const ::omero::cmd::StatusPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Handle_getStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Handle_cancel : public Callback_Handle_cancel_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_Handle_cancel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::cmd::HandlePrx __proxy = ::omero::cmd::HandlePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_cancel(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Handle_cancelPtr
newCallback_Handle_cancel(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Handle_cancel<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Handle_cancelPtr
newCallback_Handle_cancel(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Handle_cancel<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Handle_cancel : public Callback_Handle_cancel_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_Handle_cancel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::cmd::HandlePrx __proxy = ::omero::cmd::HandlePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_cancel(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Handle_cancelPtr
newCallback_Handle_cancel(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Handle_cancel<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Handle_cancelPtr
newCallback_Handle_cancel(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Handle_cancel<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Handle_close : public Callback_Handle_close_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Handle_close(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Handle_closePtr
newCallback_Handle_close(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Handle_close<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Handle_closePtr
newCallback_Handle_close(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Handle_close<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Handle_closePtr
newCallback_Handle_close(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Handle_close<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Handle_closePtr
newCallback_Handle_close(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Handle_close<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Handle_close : public Callback_Handle_close_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Handle_close(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Handle_closePtr
newCallback_Handle_close(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Handle_close<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Handle_closePtr
newCallback_Handle_close(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Handle_close<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Handle_closePtr
newCallback_Handle_close(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Handle_close<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Handle_closePtr
newCallback_Handle_close(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Handle_close<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Session_submit : public Callback_Session_submit_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::cmd::HandlePrx&);

    CallbackNC_Session_submit(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::cmd::SessionPrx __proxy = ::omero::cmd::SessionPrx::uncheckedCast(__result->getProxy());
        ::omero::cmd::HandlePrx __ret;
        try
        {
            __ret = __proxy->end_submit(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Session_submitPtr
newCallback_Session_submit(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::cmd::HandlePrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_submit<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_submitPtr
newCallback_Session_submit(T* instance, void (T::*cb)(const ::omero::cmd::HandlePrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_submit<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Session_submit : public Callback_Session_submit_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::cmd::HandlePrx&, const CT&);

    Callback_Session_submit(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::cmd::SessionPrx __proxy = ::omero::cmd::SessionPrx::uncheckedCast(__result->getProxy());
        ::omero::cmd::HandlePrx __ret;
        try
        {
            __ret = __proxy->end_submit(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Session_submitPtr
newCallback_Session_submit(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::cmd::HandlePrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_submit<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_submitPtr
newCallback_Session_submit(T* instance, void (T::*cb)(const ::omero::cmd::HandlePrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_submit<T, CT>(instance, cb, excb, sentcb);
}

}

}

#endif
