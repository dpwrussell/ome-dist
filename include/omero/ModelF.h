// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `ModelF.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __omero__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_ModelF_h__
#define __omero__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_ModelF_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace omero
{

namespace model
{

class Annotation;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Annotation>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Annotation*);

class Arc;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Arc>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Arc*);

class BooleanAnnotation;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::BooleanAnnotation>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::BooleanAnnotation*);

class ChecksumAlgorithm;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::ChecksumAlgorithm>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::ChecksumAlgorithm*);

class Dataset;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Dataset>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Dataset*);

class Details;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Details>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Details*);

class Event;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Event>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Event*);

class EventLog;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::EventLog>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::EventLog*);

class Experimenter;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Experimenter>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Experimenter*);

class ExperimenterGroup;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::ExperimenterGroup>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::ExperimenterGroup*);

class ExternalInfo;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::ExternalInfo>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::ExternalInfo*);

class Family;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Family>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Family*);

class Filament;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Filament>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Filament*);

class Fileset;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Fileset>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Fileset*);

class FilesetJobLink;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::FilesetJobLink>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::FilesetJobLink*);

class Format;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Format>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Format*);

class IObject;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::IObject>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::IObject*);

class Image;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Image>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Image*);

class Instrument;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Instrument>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Instrument*);

class Job;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Job>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Job*);

class JobStatus;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::JobStatus>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::JobStatus*);

class Laser;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Laser>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Laser*);

class LogicalChannel;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::LogicalChannel>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::LogicalChannel*);

class OriginalFile;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::OriginalFile>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::OriginalFile*);

class Permissions;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Permissions>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Permissions*);

class Pixels;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Pixels>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Pixels*);

class PixelsType;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::PixelsType>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::PixelsType*);

class PlaneInfo;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::PlaneInfo>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::PlaneInfo*);

class Plate;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Plate>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Plate*);

class Project;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Project>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Project*);

class QuantumDef;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::QuantumDef>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::QuantumDef*);

class RenderingDef;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::RenderingDef>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::RenderingDef*);

class RenderingModel;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::RenderingModel>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::RenderingModel*);

class Roi;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Roi>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Roi*);

class Screen;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Screen>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Screen*);

class ScriptJob;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::ScriptJob>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::ScriptJob*);

class Shape;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Shape>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Shape*);

class Session;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Session>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Session*);

class Share;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Share>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Share*);

class TextAnnotation;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::TextAnnotation>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::TextAnnotation*);

class Well;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Well>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Well*);

}

}

}

namespace omero
{

namespace model
{

class Annotation;
bool operator==(const Annotation&, const Annotation&);
bool operator<(const Annotation&, const Annotation&);
::Ice::Object* upCast(::omero::model::Annotation*);
typedef ::IceInternal::Handle< ::omero::model::Annotation> AnnotationPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Annotation> AnnotationPrx;
void __patch(AnnotationPtr&, const ::Ice::ObjectPtr&);

class Arc;
bool operator==(const Arc&, const Arc&);
bool operator<(const Arc&, const Arc&);
::Ice::Object* upCast(::omero::model::Arc*);
typedef ::IceInternal::Handle< ::omero::model::Arc> ArcPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Arc> ArcPrx;
void __patch(ArcPtr&, const ::Ice::ObjectPtr&);

class BooleanAnnotation;
bool operator==(const BooleanAnnotation&, const BooleanAnnotation&);
bool operator<(const BooleanAnnotation&, const BooleanAnnotation&);
::Ice::Object* upCast(::omero::model::BooleanAnnotation*);
typedef ::IceInternal::Handle< ::omero::model::BooleanAnnotation> BooleanAnnotationPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::BooleanAnnotation> BooleanAnnotationPrx;
void __patch(BooleanAnnotationPtr&, const ::Ice::ObjectPtr&);

class ChecksumAlgorithm;
bool operator==(const ChecksumAlgorithm&, const ChecksumAlgorithm&);
bool operator<(const ChecksumAlgorithm&, const ChecksumAlgorithm&);
::Ice::Object* upCast(::omero::model::ChecksumAlgorithm*);
typedef ::IceInternal::Handle< ::omero::model::ChecksumAlgorithm> ChecksumAlgorithmPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::ChecksumAlgorithm> ChecksumAlgorithmPrx;
void __patch(ChecksumAlgorithmPtr&, const ::Ice::ObjectPtr&);

class Dataset;
bool operator==(const Dataset&, const Dataset&);
bool operator<(const Dataset&, const Dataset&);
::Ice::Object* upCast(::omero::model::Dataset*);
typedef ::IceInternal::Handle< ::omero::model::Dataset> DatasetPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Dataset> DatasetPrx;
void __patch(DatasetPtr&, const ::Ice::ObjectPtr&);

class Details;
bool operator==(const Details&, const Details&);
bool operator<(const Details&, const Details&);
::Ice::Object* upCast(::omero::model::Details*);
typedef ::IceInternal::Handle< ::omero::model::Details> DetailsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Details> DetailsPrx;
void __patch(DetailsPtr&, const ::Ice::ObjectPtr&);

class Event;
bool operator==(const Event&, const Event&);
bool operator<(const Event&, const Event&);
::Ice::Object* upCast(::omero::model::Event*);
typedef ::IceInternal::Handle< ::omero::model::Event> EventPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Event> EventPrx;
void __patch(EventPtr&, const ::Ice::ObjectPtr&);

class EventLog;
bool operator==(const EventLog&, const EventLog&);
bool operator<(const EventLog&, const EventLog&);
::Ice::Object* upCast(::omero::model::EventLog*);
typedef ::IceInternal::Handle< ::omero::model::EventLog> EventLogPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::EventLog> EventLogPrx;
void __patch(EventLogPtr&, const ::Ice::ObjectPtr&);

class Experimenter;
bool operator==(const Experimenter&, const Experimenter&);
bool operator<(const Experimenter&, const Experimenter&);
::Ice::Object* upCast(::omero::model::Experimenter*);
typedef ::IceInternal::Handle< ::omero::model::Experimenter> ExperimenterPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Experimenter> ExperimenterPrx;
void __patch(ExperimenterPtr&, const ::Ice::ObjectPtr&);

class ExperimenterGroup;
bool operator==(const ExperimenterGroup&, const ExperimenterGroup&);
bool operator<(const ExperimenterGroup&, const ExperimenterGroup&);
::Ice::Object* upCast(::omero::model::ExperimenterGroup*);
typedef ::IceInternal::Handle< ::omero::model::ExperimenterGroup> ExperimenterGroupPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::ExperimenterGroup> ExperimenterGroupPrx;
void __patch(ExperimenterGroupPtr&, const ::Ice::ObjectPtr&);

class ExternalInfo;
bool operator==(const ExternalInfo&, const ExternalInfo&);
bool operator<(const ExternalInfo&, const ExternalInfo&);
::Ice::Object* upCast(::omero::model::ExternalInfo*);
typedef ::IceInternal::Handle< ::omero::model::ExternalInfo> ExternalInfoPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::ExternalInfo> ExternalInfoPrx;
void __patch(ExternalInfoPtr&, const ::Ice::ObjectPtr&);

class Family;
bool operator==(const Family&, const Family&);
bool operator<(const Family&, const Family&);
::Ice::Object* upCast(::omero::model::Family*);
typedef ::IceInternal::Handle< ::omero::model::Family> FamilyPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Family> FamilyPrx;
void __patch(FamilyPtr&, const ::Ice::ObjectPtr&);

class Filament;
bool operator==(const Filament&, const Filament&);
bool operator<(const Filament&, const Filament&);
::Ice::Object* upCast(::omero::model::Filament*);
typedef ::IceInternal::Handle< ::omero::model::Filament> FilamentPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Filament> FilamentPrx;
void __patch(FilamentPtr&, const ::Ice::ObjectPtr&);

class Fileset;
bool operator==(const Fileset&, const Fileset&);
bool operator<(const Fileset&, const Fileset&);
::Ice::Object* upCast(::omero::model::Fileset*);
typedef ::IceInternal::Handle< ::omero::model::Fileset> FilesetPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Fileset> FilesetPrx;
void __patch(FilesetPtr&, const ::Ice::ObjectPtr&);

class FilesetJobLink;
bool operator==(const FilesetJobLink&, const FilesetJobLink&);
bool operator<(const FilesetJobLink&, const FilesetJobLink&);
::Ice::Object* upCast(::omero::model::FilesetJobLink*);
typedef ::IceInternal::Handle< ::omero::model::FilesetJobLink> FilesetJobLinkPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::FilesetJobLink> FilesetJobLinkPrx;
void __patch(FilesetJobLinkPtr&, const ::Ice::ObjectPtr&);

class Format;
bool operator==(const Format&, const Format&);
bool operator<(const Format&, const Format&);
::Ice::Object* upCast(::omero::model::Format*);
typedef ::IceInternal::Handle< ::omero::model::Format> FormatPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Format> FormatPrx;
void __patch(FormatPtr&, const ::Ice::ObjectPtr&);

class IObject;
bool operator==(const IObject&, const IObject&);
bool operator<(const IObject&, const IObject&);
::Ice::Object* upCast(::omero::model::IObject*);
typedef ::IceInternal::Handle< ::omero::model::IObject> IObjectPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::IObject> IObjectPrx;
void __patch(IObjectPtr&, const ::Ice::ObjectPtr&);

class Image;
bool operator==(const Image&, const Image&);
bool operator<(const Image&, const Image&);
::Ice::Object* upCast(::omero::model::Image*);
typedef ::IceInternal::Handle< ::omero::model::Image> ImagePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Image> ImagePrx;
void __patch(ImagePtr&, const ::Ice::ObjectPtr&);

class Instrument;
bool operator==(const Instrument&, const Instrument&);
bool operator<(const Instrument&, const Instrument&);
::Ice::Object* upCast(::omero::model::Instrument*);
typedef ::IceInternal::Handle< ::omero::model::Instrument> InstrumentPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Instrument> InstrumentPrx;
void __patch(InstrumentPtr&, const ::Ice::ObjectPtr&);

class Job;
bool operator==(const Job&, const Job&);
bool operator<(const Job&, const Job&);
::Ice::Object* upCast(::omero::model::Job*);
typedef ::IceInternal::Handle< ::omero::model::Job> JobPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Job> JobPrx;
void __patch(JobPtr&, const ::Ice::ObjectPtr&);

class JobStatus;
bool operator==(const JobStatus&, const JobStatus&);
bool operator<(const JobStatus&, const JobStatus&);
::Ice::Object* upCast(::omero::model::JobStatus*);
typedef ::IceInternal::Handle< ::omero::model::JobStatus> JobStatusPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::JobStatus> JobStatusPrx;
void __patch(JobStatusPtr&, const ::Ice::ObjectPtr&);

class Laser;
bool operator==(const Laser&, const Laser&);
bool operator<(const Laser&, const Laser&);
::Ice::Object* upCast(::omero::model::Laser*);
typedef ::IceInternal::Handle< ::omero::model::Laser> LaserPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Laser> LaserPrx;
void __patch(LaserPtr&, const ::Ice::ObjectPtr&);

class LogicalChannel;
bool operator==(const LogicalChannel&, const LogicalChannel&);
bool operator<(const LogicalChannel&, const LogicalChannel&);
::Ice::Object* upCast(::omero::model::LogicalChannel*);
typedef ::IceInternal::Handle< ::omero::model::LogicalChannel> LogicalChannelPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::LogicalChannel> LogicalChannelPrx;
void __patch(LogicalChannelPtr&, const ::Ice::ObjectPtr&);

class OriginalFile;
bool operator==(const OriginalFile&, const OriginalFile&);
bool operator<(const OriginalFile&, const OriginalFile&);
::Ice::Object* upCast(::omero::model::OriginalFile*);
typedef ::IceInternal::Handle< ::omero::model::OriginalFile> OriginalFilePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::OriginalFile> OriginalFilePrx;
void __patch(OriginalFilePtr&, const ::Ice::ObjectPtr&);

class Permissions;
bool operator==(const Permissions&, const Permissions&);
bool operator<(const Permissions&, const Permissions&);
::Ice::Object* upCast(::omero::model::Permissions*);
typedef ::IceInternal::Handle< ::omero::model::Permissions> PermissionsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Permissions> PermissionsPrx;
void __patch(PermissionsPtr&, const ::Ice::ObjectPtr&);

class Pixels;
bool operator==(const Pixels&, const Pixels&);
bool operator<(const Pixels&, const Pixels&);
::Ice::Object* upCast(::omero::model::Pixels*);
typedef ::IceInternal::Handle< ::omero::model::Pixels> PixelsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Pixels> PixelsPrx;
void __patch(PixelsPtr&, const ::Ice::ObjectPtr&);

class PixelsType;
bool operator==(const PixelsType&, const PixelsType&);
bool operator<(const PixelsType&, const PixelsType&);
::Ice::Object* upCast(::omero::model::PixelsType*);
typedef ::IceInternal::Handle< ::omero::model::PixelsType> PixelsTypePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::PixelsType> PixelsTypePrx;
void __patch(PixelsTypePtr&, const ::Ice::ObjectPtr&);

class PlaneInfo;
bool operator==(const PlaneInfo&, const PlaneInfo&);
bool operator<(const PlaneInfo&, const PlaneInfo&);
::Ice::Object* upCast(::omero::model::PlaneInfo*);
typedef ::IceInternal::Handle< ::omero::model::PlaneInfo> PlaneInfoPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::PlaneInfo> PlaneInfoPrx;
void __patch(PlaneInfoPtr&, const ::Ice::ObjectPtr&);

class Plate;
bool operator==(const Plate&, const Plate&);
bool operator<(const Plate&, const Plate&);
::Ice::Object* upCast(::omero::model::Plate*);
typedef ::IceInternal::Handle< ::omero::model::Plate> PlatePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Plate> PlatePrx;
void __patch(PlatePtr&, const ::Ice::ObjectPtr&);

class Project;
bool operator==(const Project&, const Project&);
bool operator<(const Project&, const Project&);
::Ice::Object* upCast(::omero::model::Project*);
typedef ::IceInternal::Handle< ::omero::model::Project> ProjectPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Project> ProjectPrx;
void __patch(ProjectPtr&, const ::Ice::ObjectPtr&);

class QuantumDef;
bool operator==(const QuantumDef&, const QuantumDef&);
bool operator<(const QuantumDef&, const QuantumDef&);
::Ice::Object* upCast(::omero::model::QuantumDef*);
typedef ::IceInternal::Handle< ::omero::model::QuantumDef> QuantumDefPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::QuantumDef> QuantumDefPrx;
void __patch(QuantumDefPtr&, const ::Ice::ObjectPtr&);

class RenderingDef;
bool operator==(const RenderingDef&, const RenderingDef&);
bool operator<(const RenderingDef&, const RenderingDef&);
::Ice::Object* upCast(::omero::model::RenderingDef*);
typedef ::IceInternal::Handle< ::omero::model::RenderingDef> RenderingDefPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::RenderingDef> RenderingDefPrx;
void __patch(RenderingDefPtr&, const ::Ice::ObjectPtr&);

class RenderingModel;
bool operator==(const RenderingModel&, const RenderingModel&);
bool operator<(const RenderingModel&, const RenderingModel&);
::Ice::Object* upCast(::omero::model::RenderingModel*);
typedef ::IceInternal::Handle< ::omero::model::RenderingModel> RenderingModelPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::RenderingModel> RenderingModelPrx;
void __patch(RenderingModelPtr&, const ::Ice::ObjectPtr&);

class Roi;
bool operator==(const Roi&, const Roi&);
bool operator<(const Roi&, const Roi&);
::Ice::Object* upCast(::omero::model::Roi*);
typedef ::IceInternal::Handle< ::omero::model::Roi> RoiPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Roi> RoiPrx;
void __patch(RoiPtr&, const ::Ice::ObjectPtr&);

class Screen;
bool operator==(const Screen&, const Screen&);
bool operator<(const Screen&, const Screen&);
::Ice::Object* upCast(::omero::model::Screen*);
typedef ::IceInternal::Handle< ::omero::model::Screen> ScreenPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Screen> ScreenPrx;
void __patch(ScreenPtr&, const ::Ice::ObjectPtr&);

class ScriptJob;
bool operator==(const ScriptJob&, const ScriptJob&);
bool operator<(const ScriptJob&, const ScriptJob&);
::Ice::Object* upCast(::omero::model::ScriptJob*);
typedef ::IceInternal::Handle< ::omero::model::ScriptJob> ScriptJobPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::ScriptJob> ScriptJobPrx;
void __patch(ScriptJobPtr&, const ::Ice::ObjectPtr&);

class Shape;
bool operator==(const Shape&, const Shape&);
bool operator<(const Shape&, const Shape&);
::Ice::Object* upCast(::omero::model::Shape*);
typedef ::IceInternal::Handle< ::omero::model::Shape> ShapePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Shape> ShapePrx;
void __patch(ShapePtr&, const ::Ice::ObjectPtr&);

class Session;
bool operator==(const Session&, const Session&);
bool operator<(const Session&, const Session&);
::Ice::Object* upCast(::omero::model::Session*);
typedef ::IceInternal::Handle< ::omero::model::Session> SessionPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Session> SessionPrx;
void __patch(SessionPtr&, const ::Ice::ObjectPtr&);

class Share;
bool operator==(const Share&, const Share&);
bool operator<(const Share&, const Share&);
::Ice::Object* upCast(::omero::model::Share*);
typedef ::IceInternal::Handle< ::omero::model::Share> SharePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Share> SharePrx;
void __patch(SharePtr&, const ::Ice::ObjectPtr&);

class TextAnnotation;
bool operator==(const TextAnnotation&, const TextAnnotation&);
bool operator<(const TextAnnotation&, const TextAnnotation&);
::Ice::Object* upCast(::omero::model::TextAnnotation*);
typedef ::IceInternal::Handle< ::omero::model::TextAnnotation> TextAnnotationPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::TextAnnotation> TextAnnotationPrx;
void __patch(TextAnnotationPtr&, const ::Ice::ObjectPtr&);

class Well;
bool operator==(const Well&, const Well&);
bool operator<(const Well&, const Well&);
::Ice::Object* upCast(::omero::model::Well*);
typedef ::IceInternal::Handle< ::omero::model::Well> WellPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Well> WellPrx;
void __patch(WellPtr&, const ::Ice::ObjectPtr&);

}

}

#endif
