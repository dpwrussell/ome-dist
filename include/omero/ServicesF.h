// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `ServicesF.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __omero__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_ServicesF_h__
#define __omero__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_ServicesF_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/IncomingAsync.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/SlicedDataF.h>
#include <omero/ServerErrors.h>
#include <omero/System.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace omero
{

namespace api
{

class ServiceInterface;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::api::ServiceInterface>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::api::ServiceInterface*);

class StatefulServiceInterface;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::api::StatefulServiceInterface>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::api::StatefulServiceInterface*);

class IAdmin;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::api::IAdmin>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::api::IAdmin*);

class IConfig;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::api::IConfig>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::api::IConfig*);

class IContainer;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::api::IContainer>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::api::IContainer*);

class IDelete;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::api::IDelete>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::api::IDelete*);

class ILdap;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::api::ILdap>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::api::ILdap*);

class IMetadata;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::api::IMetadata>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::api::IMetadata*);

class IPixels;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::api::IPixels>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::api::IPixels*);

class IProjection;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::api::IProjection>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::api::IProjection*);

class IQuery;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::api::IQuery>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::api::IQuery*);

class IRoi;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::api::IRoi>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::api::IRoi*);

class IScript;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::api::IScript>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::api::IScript*);

class ISession;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::api::ISession>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::api::ISession*);

class IShare;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::api::IShare>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::api::IShare*);

class ITypes;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::api::ITypes>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::api::ITypes*);

class IUpdate;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::api::IUpdate>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::api::IUpdate*);

class IRenderingSettings;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::api::IRenderingSettings>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::api::IRenderingSettings*);

class IRepositoryInfo;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::api::IRepositoryInfo>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::api::IRepositoryInfo*);

class ITimeline;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::api::ITimeline>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::api::ITimeline*);

class Exporter;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::api::Exporter>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::api::Exporter*);

class Gateway;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::api::Gateway>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::api::Gateway*);

class JobHandle;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::api::JobHandle>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::api::JobHandle*);

class RawFileStore;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::api::RawFileStore>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::api::RawFileStore*);

class RawPixelsStore;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::api::RawPixelsStore>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::api::RawPixelsStore*);

class RenderingEngine;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::api::RenderingEngine>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::api::RenderingEngine*);

class Search;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::api::Search>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::api::Search*);

class ThumbnailStore;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::api::ThumbnailStore>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::api::ThumbnailStore*);

}

namespace grid
{

class ManagedRepository;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::grid::ManagedRepository>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::grid::ManagedRepository*);

class ScriptProcessor;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::grid::ScriptProcessor>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::grid::ScriptProcessor*);

class SharedResources;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::grid::SharedResources>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::grid::SharedResources*);

class Table;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::grid::Table>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::grid::Table*);

}

}

}

namespace omero
{

namespace api
{

class ServiceInterface;
bool operator==(const ServiceInterface&, const ServiceInterface&);
bool operator<(const ServiceInterface&, const ServiceInterface&);
::Ice::Object* upCast(::omero::api::ServiceInterface*);
typedef ::IceInternal::Handle< ::omero::api::ServiceInterface> ServiceInterfacePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::api::ServiceInterface> ServiceInterfacePrx;
void __patch(ServiceInterfacePtr&, const ::Ice::ObjectPtr&);

class StatefulServiceInterface;
bool operator==(const StatefulServiceInterface&, const StatefulServiceInterface&);
bool operator<(const StatefulServiceInterface&, const StatefulServiceInterface&);
::Ice::Object* upCast(::omero::api::StatefulServiceInterface*);
typedef ::IceInternal::Handle< ::omero::api::StatefulServiceInterface> StatefulServiceInterfacePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::api::StatefulServiceInterface> StatefulServiceInterfacePrx;
void __patch(StatefulServiceInterfacePtr&, const ::Ice::ObjectPtr&);

class IAdmin;
bool operator==(const IAdmin&, const IAdmin&);
bool operator<(const IAdmin&, const IAdmin&);
::Ice::Object* upCast(::omero::api::IAdmin*);
typedef ::IceInternal::Handle< ::omero::api::IAdmin> IAdminPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::api::IAdmin> IAdminPrx;
void __patch(IAdminPtr&, const ::Ice::ObjectPtr&);

class IConfig;
bool operator==(const IConfig&, const IConfig&);
bool operator<(const IConfig&, const IConfig&);
::Ice::Object* upCast(::omero::api::IConfig*);
typedef ::IceInternal::Handle< ::omero::api::IConfig> IConfigPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::api::IConfig> IConfigPrx;
void __patch(IConfigPtr&, const ::Ice::ObjectPtr&);

class IContainer;
bool operator==(const IContainer&, const IContainer&);
bool operator<(const IContainer&, const IContainer&);
::Ice::Object* upCast(::omero::api::IContainer*);
typedef ::IceInternal::Handle< ::omero::api::IContainer> IContainerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::api::IContainer> IContainerPrx;
void __patch(IContainerPtr&, const ::Ice::ObjectPtr&);

class IDelete;
bool operator==(const IDelete&, const IDelete&);
bool operator<(const IDelete&, const IDelete&);
::Ice::Object* upCast(::omero::api::IDelete*);
typedef ::IceInternal::Handle< ::omero::api::IDelete> IDeletePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::api::IDelete> IDeletePrx;
void __patch(IDeletePtr&, const ::Ice::ObjectPtr&);

class ILdap;
bool operator==(const ILdap&, const ILdap&);
bool operator<(const ILdap&, const ILdap&);
::Ice::Object* upCast(::omero::api::ILdap*);
typedef ::IceInternal::Handle< ::omero::api::ILdap> ILdapPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::api::ILdap> ILdapPrx;
void __patch(ILdapPtr&, const ::Ice::ObjectPtr&);

class IMetadata;
bool operator==(const IMetadata&, const IMetadata&);
bool operator<(const IMetadata&, const IMetadata&);
::Ice::Object* upCast(::omero::api::IMetadata*);
typedef ::IceInternal::Handle< ::omero::api::IMetadata> IMetadataPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::api::IMetadata> IMetadataPrx;
void __patch(IMetadataPtr&, const ::Ice::ObjectPtr&);

class IPixels;
bool operator==(const IPixels&, const IPixels&);
bool operator<(const IPixels&, const IPixels&);
::Ice::Object* upCast(::omero::api::IPixels*);
typedef ::IceInternal::Handle< ::omero::api::IPixels> IPixelsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::api::IPixels> IPixelsPrx;
void __patch(IPixelsPtr&, const ::Ice::ObjectPtr&);

class IProjection;
bool operator==(const IProjection&, const IProjection&);
bool operator<(const IProjection&, const IProjection&);
::Ice::Object* upCast(::omero::api::IProjection*);
typedef ::IceInternal::Handle< ::omero::api::IProjection> IProjectionPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::api::IProjection> IProjectionPrx;
void __patch(IProjectionPtr&, const ::Ice::ObjectPtr&);

class IQuery;
bool operator==(const IQuery&, const IQuery&);
bool operator<(const IQuery&, const IQuery&);
::Ice::Object* upCast(::omero::api::IQuery*);
typedef ::IceInternal::Handle< ::omero::api::IQuery> IQueryPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::api::IQuery> IQueryPrx;
void __patch(IQueryPtr&, const ::Ice::ObjectPtr&);

class IRoi;
bool operator==(const IRoi&, const IRoi&);
bool operator<(const IRoi&, const IRoi&);
::Ice::Object* upCast(::omero::api::IRoi*);
typedef ::IceInternal::Handle< ::omero::api::IRoi> IRoiPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::api::IRoi> IRoiPrx;
void __patch(IRoiPtr&, const ::Ice::ObjectPtr&);

class IScript;
bool operator==(const IScript&, const IScript&);
bool operator<(const IScript&, const IScript&);
::Ice::Object* upCast(::omero::api::IScript*);
typedef ::IceInternal::Handle< ::omero::api::IScript> IScriptPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::api::IScript> IScriptPrx;
void __patch(IScriptPtr&, const ::Ice::ObjectPtr&);

class ISession;
bool operator==(const ISession&, const ISession&);
bool operator<(const ISession&, const ISession&);
::Ice::Object* upCast(::omero::api::ISession*);
typedef ::IceInternal::Handle< ::omero::api::ISession> ISessionPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::api::ISession> ISessionPrx;
void __patch(ISessionPtr&, const ::Ice::ObjectPtr&);

class IShare;
bool operator==(const IShare&, const IShare&);
bool operator<(const IShare&, const IShare&);
::Ice::Object* upCast(::omero::api::IShare*);
typedef ::IceInternal::Handle< ::omero::api::IShare> ISharePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::api::IShare> ISharePrx;
void __patch(ISharePtr&, const ::Ice::ObjectPtr&);

class ITypes;
bool operator==(const ITypes&, const ITypes&);
bool operator<(const ITypes&, const ITypes&);
::Ice::Object* upCast(::omero::api::ITypes*);
typedef ::IceInternal::Handle< ::omero::api::ITypes> ITypesPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::api::ITypes> ITypesPrx;
void __patch(ITypesPtr&, const ::Ice::ObjectPtr&);

class IUpdate;
bool operator==(const IUpdate&, const IUpdate&);
bool operator<(const IUpdate&, const IUpdate&);
::Ice::Object* upCast(::omero::api::IUpdate*);
typedef ::IceInternal::Handle< ::omero::api::IUpdate> IUpdatePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::api::IUpdate> IUpdatePrx;
void __patch(IUpdatePtr&, const ::Ice::ObjectPtr&);

class IRenderingSettings;
bool operator==(const IRenderingSettings&, const IRenderingSettings&);
bool operator<(const IRenderingSettings&, const IRenderingSettings&);
::Ice::Object* upCast(::omero::api::IRenderingSettings*);
typedef ::IceInternal::Handle< ::omero::api::IRenderingSettings> IRenderingSettingsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::api::IRenderingSettings> IRenderingSettingsPrx;
void __patch(IRenderingSettingsPtr&, const ::Ice::ObjectPtr&);

class IRepositoryInfo;
bool operator==(const IRepositoryInfo&, const IRepositoryInfo&);
bool operator<(const IRepositoryInfo&, const IRepositoryInfo&);
::Ice::Object* upCast(::omero::api::IRepositoryInfo*);
typedef ::IceInternal::Handle< ::omero::api::IRepositoryInfo> IRepositoryInfoPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::api::IRepositoryInfo> IRepositoryInfoPrx;
void __patch(IRepositoryInfoPtr&, const ::Ice::ObjectPtr&);

class ITimeline;
bool operator==(const ITimeline&, const ITimeline&);
bool operator<(const ITimeline&, const ITimeline&);
::Ice::Object* upCast(::omero::api::ITimeline*);
typedef ::IceInternal::Handle< ::omero::api::ITimeline> ITimelinePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::api::ITimeline> ITimelinePrx;
void __patch(ITimelinePtr&, const ::Ice::ObjectPtr&);

class Exporter;
bool operator==(const Exporter&, const Exporter&);
bool operator<(const Exporter&, const Exporter&);
::Ice::Object* upCast(::omero::api::Exporter*);
typedef ::IceInternal::Handle< ::omero::api::Exporter> ExporterPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::api::Exporter> ExporterPrx;
void __patch(ExporterPtr&, const ::Ice::ObjectPtr&);

class Gateway;
bool operator==(const Gateway&, const Gateway&);
bool operator<(const Gateway&, const Gateway&);
::Ice::Object* upCast(::omero::api::Gateway*);
typedef ::IceInternal::Handle< ::omero::api::Gateway> GatewayPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::api::Gateway> GatewayPrx;
void __patch(GatewayPtr&, const ::Ice::ObjectPtr&);

class JobHandle;
bool operator==(const JobHandle&, const JobHandle&);
bool operator<(const JobHandle&, const JobHandle&);
::Ice::Object* upCast(::omero::api::JobHandle*);
typedef ::IceInternal::Handle< ::omero::api::JobHandle> JobHandlePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::api::JobHandle> JobHandlePrx;
void __patch(JobHandlePtr&, const ::Ice::ObjectPtr&);

class RawFileStore;
bool operator==(const RawFileStore&, const RawFileStore&);
bool operator<(const RawFileStore&, const RawFileStore&);
::Ice::Object* upCast(::omero::api::RawFileStore*);
typedef ::IceInternal::Handle< ::omero::api::RawFileStore> RawFileStorePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::api::RawFileStore> RawFileStorePrx;
void __patch(RawFileStorePtr&, const ::Ice::ObjectPtr&);

class RawPixelsStore;
bool operator==(const RawPixelsStore&, const RawPixelsStore&);
bool operator<(const RawPixelsStore&, const RawPixelsStore&);
::Ice::Object* upCast(::omero::api::RawPixelsStore*);
typedef ::IceInternal::Handle< ::omero::api::RawPixelsStore> RawPixelsStorePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::api::RawPixelsStore> RawPixelsStorePrx;
void __patch(RawPixelsStorePtr&, const ::Ice::ObjectPtr&);

class RenderingEngine;
bool operator==(const RenderingEngine&, const RenderingEngine&);
bool operator<(const RenderingEngine&, const RenderingEngine&);
::Ice::Object* upCast(::omero::api::RenderingEngine*);
typedef ::IceInternal::Handle< ::omero::api::RenderingEngine> RenderingEnginePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::api::RenderingEngine> RenderingEnginePrx;
void __patch(RenderingEnginePtr&, const ::Ice::ObjectPtr&);

class Search;
bool operator==(const Search&, const Search&);
bool operator<(const Search&, const Search&);
::Ice::Object* upCast(::omero::api::Search*);
typedef ::IceInternal::Handle< ::omero::api::Search> SearchPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::api::Search> SearchPrx;
void __patch(SearchPtr&, const ::Ice::ObjectPtr&);

class ThumbnailStore;
bool operator==(const ThumbnailStore&, const ThumbnailStore&);
bool operator<(const ThumbnailStore&, const ThumbnailStore&);
::Ice::Object* upCast(::omero::api::ThumbnailStore*);
typedef ::IceInternal::Handle< ::omero::api::ThumbnailStore> ThumbnailStorePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::api::ThumbnailStore> ThumbnailStorePrx;
void __patch(ThumbnailStorePtr&, const ::Ice::ObjectPtr&);

}

namespace grid
{

class ManagedRepository;
bool operator==(const ManagedRepository&, const ManagedRepository&);
bool operator<(const ManagedRepository&, const ManagedRepository&);
::Ice::Object* upCast(::omero::grid::ManagedRepository*);
typedef ::IceInternal::Handle< ::omero::grid::ManagedRepository> ManagedRepositoryPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::grid::ManagedRepository> ManagedRepositoryPrx;
void __patch(ManagedRepositoryPtr&, const ::Ice::ObjectPtr&);

class ScriptProcessor;
bool operator==(const ScriptProcessor&, const ScriptProcessor&);
bool operator<(const ScriptProcessor&, const ScriptProcessor&);
::Ice::Object* upCast(::omero::grid::ScriptProcessor*);
typedef ::IceInternal::Handle< ::omero::grid::ScriptProcessor> ScriptProcessorPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::grid::ScriptProcessor> ScriptProcessorPrx;
void __patch(ScriptProcessorPtr&, const ::Ice::ObjectPtr&);

class SharedResources;
bool operator==(const SharedResources&, const SharedResources&);
bool operator<(const SharedResources&, const SharedResources&);
::Ice::Object* upCast(::omero::grid::SharedResources*);
typedef ::IceInternal::Handle< ::omero::grid::SharedResources> SharedResourcesPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::grid::SharedResources> SharedResourcesPrx;
void __patch(SharedResourcesPtr&, const ::Ice::ObjectPtr&);

class Table;
bool operator==(const Table&, const Table&);
bool operator<(const Table&, const Table&);
::Ice::Object* upCast(::omero::grid::Table*);
typedef ::IceInternal::Handle< ::omero::grid::Table> TablePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::grid::Table> TablePrx;
void __patch(TablePtr&, const ::Ice::ObjectPtr&);

}

}

namespace omero
{

namespace api
{

typedef ::std::vector< ::omero::api::ServiceInterfacePrx> ServiceList;

}

}

namespace omero
{

namespace api
{

class AMI_StatefulServiceInterface_passivate : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_StatefulServiceInterface_passivate> AMI_StatefulServiceInterface_passivatePtr;

class AMD_StatefulServiceInterface_passivate : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_StatefulServiceInterface_passivate> AMD_StatefulServiceInterface_passivatePtr;

class AMI_StatefulServiceInterface_activate : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_StatefulServiceInterface_activate> AMI_StatefulServiceInterface_activatePtr;

class AMD_StatefulServiceInterface_activate : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_StatefulServiceInterface_activate> AMD_StatefulServiceInterface_activatePtr;

class AMI_StatefulServiceInterface_close : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_StatefulServiceInterface_close> AMI_StatefulServiceInterface_closePtr;

class AMD_StatefulServiceInterface_close : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_StatefulServiceInterface_close> AMD_StatefulServiceInterface_closePtr;

class AMI_StatefulServiceInterface_getCurrentEventContext : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::sys::EventContextPtr&) = 0;

    void __response(const ::omero::sys::EventContextPtr& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_StatefulServiceInterface_getCurrentEventContext> AMI_StatefulServiceInterface_getCurrentEventContextPtr;

class AMD_StatefulServiceInterface_getCurrentEventContext : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::sys::EventContextPtr&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_StatefulServiceInterface_getCurrentEventContext> AMD_StatefulServiceInterface_getCurrentEventContextPtr;

}

}

namespace IceAsync
{

namespace omero
{

namespace api
{

class AMD_StatefulServiceInterface_passivate : public ::omero::api::AMD_StatefulServiceInterface_passivate, public ::IceInternal::IncomingAsync
{
public:

    AMD_StatefulServiceInterface_passivate(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_StatefulServiceInterface_activate : public ::omero::api::AMD_StatefulServiceInterface_activate, public ::IceInternal::IncomingAsync
{
public:

    AMD_StatefulServiceInterface_activate(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_StatefulServiceInterface_close : public ::omero::api::AMD_StatefulServiceInterface_close, public ::IceInternal::IncomingAsync
{
public:

    AMD_StatefulServiceInterface_close(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_StatefulServiceInterface_getCurrentEventContext : public ::omero::api::AMD_StatefulServiceInterface_getCurrentEventContext, public ::IceInternal::IncomingAsync
{
public:

    AMD_StatefulServiceInterface_getCurrentEventContext(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::sys::EventContextPtr&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

}

}

}

namespace omero
{

namespace api
{

class Callback_StatefulServiceInterface_passivate_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_StatefulServiceInterface_passivate_Base> Callback_StatefulServiceInterface_passivatePtr;

class Callback_StatefulServiceInterface_activate_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_StatefulServiceInterface_activate_Base> Callback_StatefulServiceInterface_activatePtr;

class Callback_StatefulServiceInterface_close_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_StatefulServiceInterface_close_Base> Callback_StatefulServiceInterface_closePtr;

class Callback_StatefulServiceInterface_getCurrentEventContext_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_StatefulServiceInterface_getCurrentEventContext_Base> Callback_StatefulServiceInterface_getCurrentEventContextPtr;

}

}

namespace IceProxy
{

namespace omero
{

namespace api
{

class ServiceInterface : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<ServiceInterface> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<ServiceInterface*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<ServiceInterface> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<ServiceInterface*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ServiceInterface> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<ServiceInterface*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<ServiceInterface> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<ServiceInterface*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ServiceInterface> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<ServiceInterface*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<ServiceInterface> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<ServiceInterface*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<ServiceInterface> ice_secure(bool __secure) const
    {
        return dynamic_cast<ServiceInterface*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<ServiceInterface> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<ServiceInterface*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<ServiceInterface> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<ServiceInterface*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<ServiceInterface> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<ServiceInterface*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<ServiceInterface> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<ServiceInterface*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<ServiceInterface> ice_twoway() const
    {
        return dynamic_cast<ServiceInterface*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<ServiceInterface> ice_oneway() const
    {
        return dynamic_cast<ServiceInterface*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<ServiceInterface> ice_batchOneway() const
    {
        return dynamic_cast<ServiceInterface*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<ServiceInterface> ice_datagram() const
    {
        return dynamic_cast<ServiceInterface*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<ServiceInterface> ice_batchDatagram() const
    {
        return dynamic_cast<ServiceInterface*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<ServiceInterface> ice_compress(bool __compress) const
    {
        return dynamic_cast<ServiceInterface*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<ServiceInterface> ice_timeout(int __timeout) const
    {
        return dynamic_cast<ServiceInterface*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ServiceInterface> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<ServiceInterface*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ServiceInterface> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<ServiceInterface*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class StatefulServiceInterface : virtual public ::IceProxy::omero::api::ServiceInterface
{
public:

    void passivate()
    {
        passivate(0);
    }
    void passivate(const ::Ice::Context& __ctx)
    {
        passivate(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_passivate(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_passivate(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_passivate(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_passivate(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_passivate(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_passivate(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_passivate(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_passivate(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_passivate(const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::StatefulServiceInterfacePrx __proxy = ::omero::api::StatefulServiceInterfacePrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_passivate(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_passivate(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_passivate()
    {
        return begin_passivate(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_passivate(const ::Ice::Context& __ctx)
    {
        return begin_passivate(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_passivate(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_passivate(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_passivate(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_passivate(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_passivate(const ::omero::api::Callback_StatefulServiceInterface_passivatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_passivate(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_passivate(const ::Ice::Context& __ctx, const ::omero::api::Callback_StatefulServiceInterface_passivatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_passivate(&__ctx, __del, __cookie);
    }

    void end_passivate(const ::Ice::AsyncResultPtr&);
    
private:

    void passivate(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_passivate(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool passivate_async(const ::omero::api::AMI_StatefulServiceInterface_passivatePtr&);
    bool passivate_async(const ::omero::api::AMI_StatefulServiceInterface_passivatePtr&, const ::Ice::Context&);

    void activate()
    {
        activate(0);
    }
    void activate(const ::Ice::Context& __ctx)
    {
        activate(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_activate(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_activate(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_activate(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_activate(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_activate(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_activate(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_activate(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_activate(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_activate(const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::StatefulServiceInterfacePrx __proxy = ::omero::api::StatefulServiceInterfacePrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_activate(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_activate(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_activate()
    {
        return begin_activate(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_activate(const ::Ice::Context& __ctx)
    {
        return begin_activate(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_activate(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_activate(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_activate(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_activate(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_activate(const ::omero::api::Callback_StatefulServiceInterface_activatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_activate(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_activate(const ::Ice::Context& __ctx, const ::omero::api::Callback_StatefulServiceInterface_activatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_activate(&__ctx, __del, __cookie);
    }

    void end_activate(const ::Ice::AsyncResultPtr&);
    
private:

    void activate(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_activate(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool activate_async(const ::omero::api::AMI_StatefulServiceInterface_activatePtr&);
    bool activate_async(const ::omero::api::AMI_StatefulServiceInterface_activatePtr&, const ::Ice::Context&);

    void close()
    {
        close(0);
    }
    void close(const ::Ice::Context& __ctx)
    {
        close(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_close(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_close(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_close(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_close(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_close(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_close(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_close(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_close(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_close(const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::StatefulServiceInterfacePrx __proxy = ::omero::api::StatefulServiceInterfacePrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_close(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_close(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_close()
    {
        return begin_close(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_close(const ::Ice::Context& __ctx)
    {
        return begin_close(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_close(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_close(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_close(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_close(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_close(const ::omero::api::Callback_StatefulServiceInterface_closePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_close(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_close(const ::Ice::Context& __ctx, const ::omero::api::Callback_StatefulServiceInterface_closePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_close(&__ctx, __del, __cookie);
    }

    void end_close(const ::Ice::AsyncResultPtr&);
    
private:

    void close(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_close(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool close_async(const ::omero::api::AMI_StatefulServiceInterface_closePtr&);
    bool close_async(const ::omero::api::AMI_StatefulServiceInterface_closePtr&, const ::Ice::Context&);

    ::omero::sys::EventContextPtr getCurrentEventContext()
    {
        return getCurrentEventContext(0);
    }
    ::omero::sys::EventContextPtr getCurrentEventContext(const ::Ice::Context& __ctx)
    {
        return getCurrentEventContext(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getCurrentEventContext(const ::IceInternal::Function<void (const ::omero::sys::EventContextPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getCurrentEventContext(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getCurrentEventContext(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getCurrentEventContext(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getCurrentEventContext(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::sys::EventContextPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getCurrentEventContext(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getCurrentEventContext(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getCurrentEventContext(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getCurrentEventContext(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::sys::EventContextPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::sys::EventContextPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::StatefulServiceInterfacePrx __proxy = ::omero::api::StatefulServiceInterfacePrx::uncheckedCast(__result->getProxy());
                ::omero::sys::EventContextPtr __ret;
                try
                {
                    __ret = __proxy->end_getCurrentEventContext(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::sys::EventContextPtr&)> _response;
        };
        return begin_getCurrentEventContext(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getCurrentEventContext()
    {
        return begin_getCurrentEventContext(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getCurrentEventContext(const ::Ice::Context& __ctx)
    {
        return begin_getCurrentEventContext(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getCurrentEventContext(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCurrentEventContext(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCurrentEventContext(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCurrentEventContext(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCurrentEventContext(const ::omero::api::Callback_StatefulServiceInterface_getCurrentEventContextPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCurrentEventContext(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCurrentEventContext(const ::Ice::Context& __ctx, const ::omero::api::Callback_StatefulServiceInterface_getCurrentEventContextPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCurrentEventContext(&__ctx, __del, __cookie);
    }

    ::omero::sys::EventContextPtr end_getCurrentEventContext(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::sys::EventContextPtr getCurrentEventContext(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getCurrentEventContext(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool getCurrentEventContext_async(const ::omero::api::AMI_StatefulServiceInterface_getCurrentEventContextPtr&);
    bool getCurrentEventContext_async(const ::omero::api::AMI_StatefulServiceInterface_getCurrentEventContextPtr&, const ::Ice::Context&);
    
    ::IceInternal::ProxyHandle<StatefulServiceInterface> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<StatefulServiceInterface*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<StatefulServiceInterface> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<StatefulServiceInterface*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<StatefulServiceInterface> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<StatefulServiceInterface*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<StatefulServiceInterface> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<StatefulServiceInterface*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<StatefulServiceInterface> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<StatefulServiceInterface*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<StatefulServiceInterface> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<StatefulServiceInterface*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<StatefulServiceInterface> ice_secure(bool __secure) const
    {
        return dynamic_cast<StatefulServiceInterface*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<StatefulServiceInterface> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<StatefulServiceInterface*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<StatefulServiceInterface> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<StatefulServiceInterface*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<StatefulServiceInterface> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<StatefulServiceInterface*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<StatefulServiceInterface> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<StatefulServiceInterface*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<StatefulServiceInterface> ice_twoway() const
    {
        return dynamic_cast<StatefulServiceInterface*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<StatefulServiceInterface> ice_oneway() const
    {
        return dynamic_cast<StatefulServiceInterface*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<StatefulServiceInterface> ice_batchOneway() const
    {
        return dynamic_cast<StatefulServiceInterface*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<StatefulServiceInterface> ice_datagram() const
    {
        return dynamic_cast<StatefulServiceInterface*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<StatefulServiceInterface> ice_batchDatagram() const
    {
        return dynamic_cast<StatefulServiceInterface*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<StatefulServiceInterface> ice_compress(bool __compress) const
    {
        return dynamic_cast<StatefulServiceInterface*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<StatefulServiceInterface> ice_timeout(int __timeout) const
    {
        return dynamic_cast<StatefulServiceInterface*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<StatefulServiceInterface> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<StatefulServiceInterface*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<StatefulServiceInterface> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<StatefulServiceInterface*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

namespace IceDelegate
{

namespace omero
{

namespace api
{

class ServiceInterface : virtual public ::IceDelegate::Ice::Object
{
public:
};

class StatefulServiceInterface : virtual public ::IceDelegate::omero::api::ServiceInterface
{
public:

    virtual void passivate(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void activate(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void close(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::sys::EventContextPtr getCurrentEventContext(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

}

namespace IceDelegateM
{

namespace omero
{

namespace api
{

class ServiceInterface : virtual public ::IceDelegate::omero::api::ServiceInterface,
                         virtual public ::IceDelegateM::Ice::Object
{
public:
};

class StatefulServiceInterface : virtual public ::IceDelegate::omero::api::StatefulServiceInterface,
                                 virtual public ::IceDelegateM::omero::api::ServiceInterface
{
public:

    virtual void passivate(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void activate(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void close(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::sys::EventContextPtr getCurrentEventContext(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace IceDelegateD
{

namespace omero
{

namespace api
{

class ServiceInterface : virtual public ::IceDelegate::omero::api::ServiceInterface,
                         virtual public ::IceDelegateD::Ice::Object
{
public:
};

class StatefulServiceInterface : virtual public ::IceDelegate::omero::api::StatefulServiceInterface,
                                 virtual public ::IceDelegateD::omero::api::ServiceInterface
{
public:

    virtual void passivate(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void activate(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void close(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::sys::EventContextPtr getCurrentEventContext(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace omero
{

namespace api
{

class ServiceInterface : virtual public ::Ice::Object
{
public:

    typedef ServiceInterfacePrx ProxyType;
    typedef ServiceInterfacePtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const ServiceInterface& l, const ServiceInterface& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const ServiceInterface& l, const ServiceInterface& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class StatefulServiceInterface : virtual public ::omero::api::ServiceInterface
{
public:

    typedef StatefulServiceInterfacePrx ProxyType;
    typedef StatefulServiceInterfacePtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void passivate_async(const ::omero::api::AMD_StatefulServiceInterface_passivatePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___passivate(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void activate_async(const ::omero::api::AMD_StatefulServiceInterface_activatePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___activate(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void close_async(const ::omero::api::AMD_StatefulServiceInterface_closePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___close(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getCurrentEventContext_async(const ::omero::api::AMD_StatefulServiceInterface_getCurrentEventContextPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getCurrentEventContext(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const StatefulServiceInterface& l, const StatefulServiceInterface& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const StatefulServiceInterface& l, const StatefulServiceInterface& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

}

namespace omero
{

namespace api
{

template<class T>
class CallbackNC_StatefulServiceInterface_passivate : public Callback_StatefulServiceInterface_passivate_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_StatefulServiceInterface_passivate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::StatefulServiceInterfacePrx __proxy = ::omero::api::StatefulServiceInterfacePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_passivate(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_StatefulServiceInterface_passivatePtr
newCallback_StatefulServiceInterface_passivate(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_StatefulServiceInterface_passivate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_StatefulServiceInterface_passivatePtr
newCallback_StatefulServiceInterface_passivate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_StatefulServiceInterface_passivate<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_StatefulServiceInterface_passivatePtr
newCallback_StatefulServiceInterface_passivate(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_StatefulServiceInterface_passivate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_StatefulServiceInterface_passivatePtr
newCallback_StatefulServiceInterface_passivate(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_StatefulServiceInterface_passivate<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_StatefulServiceInterface_passivate : public Callback_StatefulServiceInterface_passivate_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_StatefulServiceInterface_passivate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::StatefulServiceInterfacePrx __proxy = ::omero::api::StatefulServiceInterfacePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_passivate(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_StatefulServiceInterface_passivatePtr
newCallback_StatefulServiceInterface_passivate(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_StatefulServiceInterface_passivate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_StatefulServiceInterface_passivatePtr
newCallback_StatefulServiceInterface_passivate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_StatefulServiceInterface_passivate<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_StatefulServiceInterface_passivatePtr
newCallback_StatefulServiceInterface_passivate(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_StatefulServiceInterface_passivate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_StatefulServiceInterface_passivatePtr
newCallback_StatefulServiceInterface_passivate(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_StatefulServiceInterface_passivate<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_StatefulServiceInterface_activate : public Callback_StatefulServiceInterface_activate_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_StatefulServiceInterface_activate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::StatefulServiceInterfacePrx __proxy = ::omero::api::StatefulServiceInterfacePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_activate(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_StatefulServiceInterface_activatePtr
newCallback_StatefulServiceInterface_activate(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_StatefulServiceInterface_activate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_StatefulServiceInterface_activatePtr
newCallback_StatefulServiceInterface_activate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_StatefulServiceInterface_activate<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_StatefulServiceInterface_activatePtr
newCallback_StatefulServiceInterface_activate(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_StatefulServiceInterface_activate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_StatefulServiceInterface_activatePtr
newCallback_StatefulServiceInterface_activate(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_StatefulServiceInterface_activate<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_StatefulServiceInterface_activate : public Callback_StatefulServiceInterface_activate_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_StatefulServiceInterface_activate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::StatefulServiceInterfacePrx __proxy = ::omero::api::StatefulServiceInterfacePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_activate(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_StatefulServiceInterface_activatePtr
newCallback_StatefulServiceInterface_activate(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_StatefulServiceInterface_activate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_StatefulServiceInterface_activatePtr
newCallback_StatefulServiceInterface_activate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_StatefulServiceInterface_activate<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_StatefulServiceInterface_activatePtr
newCallback_StatefulServiceInterface_activate(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_StatefulServiceInterface_activate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_StatefulServiceInterface_activatePtr
newCallback_StatefulServiceInterface_activate(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_StatefulServiceInterface_activate<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_StatefulServiceInterface_close : public Callback_StatefulServiceInterface_close_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_StatefulServiceInterface_close(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::StatefulServiceInterfacePrx __proxy = ::omero::api::StatefulServiceInterfacePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_close(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_StatefulServiceInterface_closePtr
newCallback_StatefulServiceInterface_close(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_StatefulServiceInterface_close<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_StatefulServiceInterface_closePtr
newCallback_StatefulServiceInterface_close(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_StatefulServiceInterface_close<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_StatefulServiceInterface_closePtr
newCallback_StatefulServiceInterface_close(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_StatefulServiceInterface_close<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_StatefulServiceInterface_closePtr
newCallback_StatefulServiceInterface_close(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_StatefulServiceInterface_close<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_StatefulServiceInterface_close : public Callback_StatefulServiceInterface_close_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_StatefulServiceInterface_close(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::StatefulServiceInterfacePrx __proxy = ::omero::api::StatefulServiceInterfacePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_close(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_StatefulServiceInterface_closePtr
newCallback_StatefulServiceInterface_close(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_StatefulServiceInterface_close<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_StatefulServiceInterface_closePtr
newCallback_StatefulServiceInterface_close(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_StatefulServiceInterface_close<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_StatefulServiceInterface_closePtr
newCallback_StatefulServiceInterface_close(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_StatefulServiceInterface_close<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_StatefulServiceInterface_closePtr
newCallback_StatefulServiceInterface_close(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_StatefulServiceInterface_close<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_StatefulServiceInterface_getCurrentEventContext : public Callback_StatefulServiceInterface_getCurrentEventContext_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::sys::EventContextPtr&);

    CallbackNC_StatefulServiceInterface_getCurrentEventContext(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::StatefulServiceInterfacePrx __proxy = ::omero::api::StatefulServiceInterfacePrx::uncheckedCast(__result->getProxy());
        ::omero::sys::EventContextPtr __ret;
        try
        {
            __ret = __proxy->end_getCurrentEventContext(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_StatefulServiceInterface_getCurrentEventContextPtr
newCallback_StatefulServiceInterface_getCurrentEventContext(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::EventContextPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_StatefulServiceInterface_getCurrentEventContext<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_StatefulServiceInterface_getCurrentEventContextPtr
newCallback_StatefulServiceInterface_getCurrentEventContext(T* instance, void (T::*cb)(const ::omero::sys::EventContextPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_StatefulServiceInterface_getCurrentEventContext<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_StatefulServiceInterface_getCurrentEventContext : public Callback_StatefulServiceInterface_getCurrentEventContext_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::sys::EventContextPtr&, const CT&);

    Callback_StatefulServiceInterface_getCurrentEventContext(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::StatefulServiceInterfacePrx __proxy = ::omero::api::StatefulServiceInterfacePrx::uncheckedCast(__result->getProxy());
        ::omero::sys::EventContextPtr __ret;
        try
        {
            __ret = __proxy->end_getCurrentEventContext(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_StatefulServiceInterface_getCurrentEventContextPtr
newCallback_StatefulServiceInterface_getCurrentEventContext(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::EventContextPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_StatefulServiceInterface_getCurrentEventContext<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_StatefulServiceInterface_getCurrentEventContextPtr
newCallback_StatefulServiceInterface_getCurrentEventContext(T* instance, void (T::*cb)(const ::omero::sys::EventContextPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_StatefulServiceInterface_getCurrentEventContext<T, CT>(instance, cb, excb, sentcb);
}

}

}

#endif
