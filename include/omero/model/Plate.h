// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Plate.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_Plate_h__
#define __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_Plate_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <omero/model/IObject.h>
#include <omero/RTypes.h>
#include <omero/System.h>
#include <omero/Collections.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace omero
{

namespace model
{

class ScreenPlateLink;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::ScreenPlateLink>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::ScreenPlateLink*);

class Screen;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Screen>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Screen*);

class Well;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Well>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Well*);

class PlateAcquisition;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::PlateAcquisition>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::PlateAcquisition*);

class PlateAnnotationLink;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::PlateAnnotationLink>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::PlateAnnotationLink*);

class Annotation;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Annotation>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Annotation*);

class Details;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Details>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Details*);

class Plate;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Plate>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Plate*);

}

}

}

namespace omero
{

namespace model
{

class ScreenPlateLink;
bool operator==(const ScreenPlateLink&, const ScreenPlateLink&);
bool operator<(const ScreenPlateLink&, const ScreenPlateLink&);
::Ice::Object* upCast(::omero::model::ScreenPlateLink*);
typedef ::IceInternal::Handle< ::omero::model::ScreenPlateLink> ScreenPlateLinkPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::ScreenPlateLink> ScreenPlateLinkPrx;
void __patch(ScreenPlateLinkPtr&, const ::Ice::ObjectPtr&);

class Screen;
bool operator==(const Screen&, const Screen&);
bool operator<(const Screen&, const Screen&);
::Ice::Object* upCast(::omero::model::Screen*);
typedef ::IceInternal::Handle< ::omero::model::Screen> ScreenPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Screen> ScreenPrx;
void __patch(ScreenPtr&, const ::Ice::ObjectPtr&);

class Well;
bool operator==(const Well&, const Well&);
bool operator<(const Well&, const Well&);
::Ice::Object* upCast(::omero::model::Well*);
typedef ::IceInternal::Handle< ::omero::model::Well> WellPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Well> WellPrx;
void __patch(WellPtr&, const ::Ice::ObjectPtr&);

class PlateAcquisition;
bool operator==(const PlateAcquisition&, const PlateAcquisition&);
bool operator<(const PlateAcquisition&, const PlateAcquisition&);
::Ice::Object* upCast(::omero::model::PlateAcquisition*);
typedef ::IceInternal::Handle< ::omero::model::PlateAcquisition> PlateAcquisitionPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::PlateAcquisition> PlateAcquisitionPrx;
void __patch(PlateAcquisitionPtr&, const ::Ice::ObjectPtr&);

class PlateAnnotationLink;
bool operator==(const PlateAnnotationLink&, const PlateAnnotationLink&);
bool operator<(const PlateAnnotationLink&, const PlateAnnotationLink&);
::Ice::Object* upCast(::omero::model::PlateAnnotationLink*);
typedef ::IceInternal::Handle< ::omero::model::PlateAnnotationLink> PlateAnnotationLinkPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::PlateAnnotationLink> PlateAnnotationLinkPrx;
void __patch(PlateAnnotationLinkPtr&, const ::Ice::ObjectPtr&);

class Annotation;
bool operator==(const Annotation&, const Annotation&);
bool operator<(const Annotation&, const Annotation&);
::Ice::Object* upCast(::omero::model::Annotation*);
typedef ::IceInternal::Handle< ::omero::model::Annotation> AnnotationPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Annotation> AnnotationPrx;
void __patch(AnnotationPtr&, const ::Ice::ObjectPtr&);

class Details;
bool operator==(const Details&, const Details&);
bool operator<(const Details&, const Details&);
::Ice::Object* upCast(::omero::model::Details*);
typedef ::IceInternal::Handle< ::omero::model::Details> DetailsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Details> DetailsPrx;
void __patch(DetailsPtr&, const ::Ice::ObjectPtr&);

class Plate;
bool operator==(const Plate&, const Plate&);
bool operator<(const Plate&, const Plate&);
::Ice::Object* upCast(::omero::model::Plate*);
typedef ::IceInternal::Handle< ::omero::model::Plate> PlatePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Plate> PlatePrx;
void __patch(PlatePtr&, const ::Ice::ObjectPtr&);

}

}

namespace omero
{

namespace model
{

typedef ::std::vector< ::omero::model::ScreenPlateLinkPtr> PlateScreenLinksSeq;

typedef ::std::vector< ::omero::model::ScreenPtr> PlateLinkedScreenSeq;

typedef ::std::vector< ::omero::model::WellPtr> PlateWellsSeq;

typedef ::std::vector< ::omero::model::PlateAcquisitionPtr> PlatePlateAcquisitionsSeq;

typedef ::std::vector< ::omero::model::PlateAnnotationLinkPtr> PlateAnnotationLinksSeq;

typedef ::std::vector< ::omero::model::AnnotationPtr> PlateLinkedAnnotationSeq;

}

}

namespace omero
{

namespace model
{

class Callback_Plate_getVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_getVersion_Base> Callback_Plate_getVersionPtr;

class Callback_Plate_setVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_setVersion_Base> Callback_Plate_setVersionPtr;

class Callback_Plate_getDefaultSample_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_getDefaultSample_Base> Callback_Plate_getDefaultSamplePtr;

class Callback_Plate_setDefaultSample_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_setDefaultSample_Base> Callback_Plate_setDefaultSamplePtr;

class Callback_Plate_getColumnNamingConvention_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_getColumnNamingConvention_Base> Callback_Plate_getColumnNamingConventionPtr;

class Callback_Plate_setColumnNamingConvention_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_setColumnNamingConvention_Base> Callback_Plate_setColumnNamingConventionPtr;

class Callback_Plate_getRowNamingConvention_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_getRowNamingConvention_Base> Callback_Plate_getRowNamingConventionPtr;

class Callback_Plate_setRowNamingConvention_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_setRowNamingConvention_Base> Callback_Plate_setRowNamingConventionPtr;

class Callback_Plate_getWellOriginX_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_getWellOriginX_Base> Callback_Plate_getWellOriginXPtr;

class Callback_Plate_setWellOriginX_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_setWellOriginX_Base> Callback_Plate_setWellOriginXPtr;

class Callback_Plate_getWellOriginY_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_getWellOriginY_Base> Callback_Plate_getWellOriginYPtr;

class Callback_Plate_setWellOriginY_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_setWellOriginY_Base> Callback_Plate_setWellOriginYPtr;

class Callback_Plate_getRows_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_getRows_Base> Callback_Plate_getRowsPtr;

class Callback_Plate_setRows_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_setRows_Base> Callback_Plate_setRowsPtr;

class Callback_Plate_getColumns_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_getColumns_Base> Callback_Plate_getColumnsPtr;

class Callback_Plate_setColumns_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_setColumns_Base> Callback_Plate_setColumnsPtr;

class Callback_Plate_getStatus_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_getStatus_Base> Callback_Plate_getStatusPtr;

class Callback_Plate_setStatus_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_setStatus_Base> Callback_Plate_setStatusPtr;

class Callback_Plate_getExternalIdentifier_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_getExternalIdentifier_Base> Callback_Plate_getExternalIdentifierPtr;

class Callback_Plate_setExternalIdentifier_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_setExternalIdentifier_Base> Callback_Plate_setExternalIdentifierPtr;

class Callback_Plate_unloadScreenLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_unloadScreenLinks_Base> Callback_Plate_unloadScreenLinksPtr;

class Callback_Plate_sizeOfScreenLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_sizeOfScreenLinks_Base> Callback_Plate_sizeOfScreenLinksPtr;

class Callback_Plate_copyScreenLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_copyScreenLinks_Base> Callback_Plate_copyScreenLinksPtr;

class Callback_Plate_addScreenPlateLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_addScreenPlateLink_Base> Callback_Plate_addScreenPlateLinkPtr;

class Callback_Plate_addAllScreenPlateLinkSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_addAllScreenPlateLinkSet_Base> Callback_Plate_addAllScreenPlateLinkSetPtr;

class Callback_Plate_removeScreenPlateLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_removeScreenPlateLink_Base> Callback_Plate_removeScreenPlateLinkPtr;

class Callback_Plate_removeAllScreenPlateLinkSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_removeAllScreenPlateLinkSet_Base> Callback_Plate_removeAllScreenPlateLinkSetPtr;

class Callback_Plate_clearScreenLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_clearScreenLinks_Base> Callback_Plate_clearScreenLinksPtr;

class Callback_Plate_reloadScreenLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_reloadScreenLinks_Base> Callback_Plate_reloadScreenLinksPtr;

class Callback_Plate_getScreenLinksCountPerOwner_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_getScreenLinksCountPerOwner_Base> Callback_Plate_getScreenLinksCountPerOwnerPtr;

class Callback_Plate_linkScreen_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_linkScreen_Base> Callback_Plate_linkScreenPtr;

class Callback_Plate_addScreenPlateLinkToBoth_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_addScreenPlateLinkToBoth_Base> Callback_Plate_addScreenPlateLinkToBothPtr;

class Callback_Plate_findScreenPlateLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_findScreenPlateLink_Base> Callback_Plate_findScreenPlateLinkPtr;

class Callback_Plate_unlinkScreen_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_unlinkScreen_Base> Callback_Plate_unlinkScreenPtr;

class Callback_Plate_removeScreenPlateLinkFromBoth_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_removeScreenPlateLinkFromBoth_Base> Callback_Plate_removeScreenPlateLinkFromBothPtr;

class Callback_Plate_linkedScreenList_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_linkedScreenList_Base> Callback_Plate_linkedScreenListPtr;

class Callback_Plate_unloadWells_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_unloadWells_Base> Callback_Plate_unloadWellsPtr;

class Callback_Plate_sizeOfWells_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_sizeOfWells_Base> Callback_Plate_sizeOfWellsPtr;

class Callback_Plate_copyWells_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_copyWells_Base> Callback_Plate_copyWellsPtr;

class Callback_Plate_addWell_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_addWell_Base> Callback_Plate_addWellPtr;

class Callback_Plate_addAllWellSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_addAllWellSet_Base> Callback_Plate_addAllWellSetPtr;

class Callback_Plate_removeWell_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_removeWell_Base> Callback_Plate_removeWellPtr;

class Callback_Plate_removeAllWellSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_removeAllWellSet_Base> Callback_Plate_removeAllWellSetPtr;

class Callback_Plate_clearWells_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_clearWells_Base> Callback_Plate_clearWellsPtr;

class Callback_Plate_reloadWells_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_reloadWells_Base> Callback_Plate_reloadWellsPtr;

class Callback_Plate_unloadPlateAcquisitions_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_unloadPlateAcquisitions_Base> Callback_Plate_unloadPlateAcquisitionsPtr;

class Callback_Plate_sizeOfPlateAcquisitions_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_sizeOfPlateAcquisitions_Base> Callback_Plate_sizeOfPlateAcquisitionsPtr;

class Callback_Plate_copyPlateAcquisitions_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_copyPlateAcquisitions_Base> Callback_Plate_copyPlateAcquisitionsPtr;

class Callback_Plate_addPlateAcquisition_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_addPlateAcquisition_Base> Callback_Plate_addPlateAcquisitionPtr;

class Callback_Plate_addAllPlateAcquisitionSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_addAllPlateAcquisitionSet_Base> Callback_Plate_addAllPlateAcquisitionSetPtr;

class Callback_Plate_removePlateAcquisition_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_removePlateAcquisition_Base> Callback_Plate_removePlateAcquisitionPtr;

class Callback_Plate_removeAllPlateAcquisitionSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_removeAllPlateAcquisitionSet_Base> Callback_Plate_removeAllPlateAcquisitionSetPtr;

class Callback_Plate_clearPlateAcquisitions_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_clearPlateAcquisitions_Base> Callback_Plate_clearPlateAcquisitionsPtr;

class Callback_Plate_reloadPlateAcquisitions_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_reloadPlateAcquisitions_Base> Callback_Plate_reloadPlateAcquisitionsPtr;

class Callback_Plate_unloadAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_unloadAnnotationLinks_Base> Callback_Plate_unloadAnnotationLinksPtr;

class Callback_Plate_sizeOfAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_sizeOfAnnotationLinks_Base> Callback_Plate_sizeOfAnnotationLinksPtr;

class Callback_Plate_copyAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_copyAnnotationLinks_Base> Callback_Plate_copyAnnotationLinksPtr;

class Callback_Plate_addPlateAnnotationLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_addPlateAnnotationLink_Base> Callback_Plate_addPlateAnnotationLinkPtr;

class Callback_Plate_addAllPlateAnnotationLinkSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_addAllPlateAnnotationLinkSet_Base> Callback_Plate_addAllPlateAnnotationLinkSetPtr;

class Callback_Plate_removePlateAnnotationLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_removePlateAnnotationLink_Base> Callback_Plate_removePlateAnnotationLinkPtr;

class Callback_Plate_removeAllPlateAnnotationLinkSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_removeAllPlateAnnotationLinkSet_Base> Callback_Plate_removeAllPlateAnnotationLinkSetPtr;

class Callback_Plate_clearAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_clearAnnotationLinks_Base> Callback_Plate_clearAnnotationLinksPtr;

class Callback_Plate_reloadAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_reloadAnnotationLinks_Base> Callback_Plate_reloadAnnotationLinksPtr;

class Callback_Plate_getAnnotationLinksCountPerOwner_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_getAnnotationLinksCountPerOwner_Base> Callback_Plate_getAnnotationLinksCountPerOwnerPtr;

class Callback_Plate_linkAnnotation_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_linkAnnotation_Base> Callback_Plate_linkAnnotationPtr;

class Callback_Plate_addPlateAnnotationLinkToBoth_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_addPlateAnnotationLinkToBoth_Base> Callback_Plate_addPlateAnnotationLinkToBothPtr;

class Callback_Plate_findPlateAnnotationLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_findPlateAnnotationLink_Base> Callback_Plate_findPlateAnnotationLinkPtr;

class Callback_Plate_unlinkAnnotation_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_unlinkAnnotation_Base> Callback_Plate_unlinkAnnotationPtr;

class Callback_Plate_removePlateAnnotationLinkFromBoth_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_removePlateAnnotationLinkFromBoth_Base> Callback_Plate_removePlateAnnotationLinkFromBothPtr;

class Callback_Plate_linkedAnnotationList_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_linkedAnnotationList_Base> Callback_Plate_linkedAnnotationListPtr;

class Callback_Plate_getName_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_getName_Base> Callback_Plate_getNamePtr;

class Callback_Plate_setName_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_setName_Base> Callback_Plate_setNamePtr;

class Callback_Plate_getDescription_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_getDescription_Base> Callback_Plate_getDescriptionPtr;

class Callback_Plate_setDescription_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Plate_setDescription_Base> Callback_Plate_setDescriptionPtr;

}

}

namespace IceProxy
{

namespace omero
{

namespace model
{

class Plate : virtual public ::IceProxy::omero::model::IObject
{
public:

    ::omero::RIntPtr getVersion()
    {
        return getVersion(0);
    }
    ::omero::RIntPtr getVersion(const ::Ice::Context& __ctx)
    {
        return getVersion(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getVersion(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getVersion(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getVersion(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getVersion(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getVersion(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RIntPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
                ::omero::RIntPtr __ret;
                try
                {
                    __ret = __proxy->end_getVersion(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RIntPtr&)> _response;
        };
        return begin_getVersion(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getVersion()
    {
        return begin_getVersion(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx)
    {
        return begin_getVersion(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::omero::model::Callback_Plate_getVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_getVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(&__ctx, __del, __cookie);
    }

    ::omero::RIntPtr end_getVersion(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RIntPtr getVersion(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setVersion(const ::omero::RIntPtr& theVersion)
    {
        setVersion(theVersion, 0);
    }
    void setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx)
    {
        setVersion(theVersion, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setVersion(const ::omero::RIntPtr& theVersion, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setVersion(theVersion, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setVersion(const ::omero::RIntPtr& theVersion, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setVersion(theVersion, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setVersion(theVersion, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setVersion(theVersion, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion)
    {
        return begin_setVersion(theVersion, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx)
    {
        return begin_setVersion(theVersion, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::omero::model::Callback_Plate_setVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_setVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, &__ctx, __del, __cookie);
    }

    void end_setVersion(const ::Ice::AsyncResultPtr&);
    
private:

    void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RIntPtr getDefaultSample()
    {
        return getDefaultSample(0);
    }
    ::omero::RIntPtr getDefaultSample(const ::Ice::Context& __ctx)
    {
        return getDefaultSample(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getDefaultSample(const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getDefaultSample(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getDefaultSample(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getDefaultSample(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getDefaultSample(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getDefaultSample(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getDefaultSample(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getDefaultSample(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getDefaultSample(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RIntPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
                ::omero::RIntPtr __ret;
                try
                {
                    __ret = __proxy->end_getDefaultSample(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RIntPtr&)> _response;
        };
        return begin_getDefaultSample(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getDefaultSample()
    {
        return begin_getDefaultSample(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDefaultSample(const ::Ice::Context& __ctx)
    {
        return begin_getDefaultSample(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDefaultSample(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDefaultSample(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDefaultSample(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDefaultSample(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDefaultSample(const ::omero::model::Callback_Plate_getDefaultSamplePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDefaultSample(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDefaultSample(const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_getDefaultSamplePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDefaultSample(&__ctx, __del, __cookie);
    }

    ::omero::RIntPtr end_getDefaultSample(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RIntPtr getDefaultSample(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getDefaultSample(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setDefaultSample(const ::omero::RIntPtr& theDefaultSample)
    {
        setDefaultSample(theDefaultSample, 0);
    }
    void setDefaultSample(const ::omero::RIntPtr& theDefaultSample, const ::Ice::Context& __ctx)
    {
        setDefaultSample(theDefaultSample, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setDefaultSample(const ::omero::RIntPtr& theDefaultSample, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setDefaultSample(theDefaultSample, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setDefaultSample(const ::omero::RIntPtr& theDefaultSample, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setDefaultSample(theDefaultSample, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setDefaultSample(const ::omero::RIntPtr& theDefaultSample, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setDefaultSample(theDefaultSample, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setDefaultSample(const ::omero::RIntPtr& theDefaultSample, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setDefaultSample(theDefaultSample, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setDefaultSample(const ::omero::RIntPtr& theDefaultSample)
    {
        return begin_setDefaultSample(theDefaultSample, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setDefaultSample(const ::omero::RIntPtr& theDefaultSample, const ::Ice::Context& __ctx)
    {
        return begin_setDefaultSample(theDefaultSample, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setDefaultSample(const ::omero::RIntPtr& theDefaultSample, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDefaultSample(theDefaultSample, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDefaultSample(const ::omero::RIntPtr& theDefaultSample, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDefaultSample(theDefaultSample, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDefaultSample(const ::omero::RIntPtr& theDefaultSample, const ::omero::model::Callback_Plate_setDefaultSamplePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDefaultSample(theDefaultSample, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDefaultSample(const ::omero::RIntPtr& theDefaultSample, const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_setDefaultSamplePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDefaultSample(theDefaultSample, &__ctx, __del, __cookie);
    }

    void end_setDefaultSample(const ::Ice::AsyncResultPtr&);
    
private:

    void setDefaultSample(const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setDefaultSample(const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getColumnNamingConvention()
    {
        return getColumnNamingConvention(0);
    }
    ::omero::RStringPtr getColumnNamingConvention(const ::Ice::Context& __ctx)
    {
        return getColumnNamingConvention(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getColumnNamingConvention(const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getColumnNamingConvention(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getColumnNamingConvention(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getColumnNamingConvention(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getColumnNamingConvention(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getColumnNamingConvention(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getColumnNamingConvention(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getColumnNamingConvention(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getColumnNamingConvention(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RStringPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
                ::omero::RStringPtr __ret;
                try
                {
                    __ret = __proxy->end_getColumnNamingConvention(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RStringPtr&)> _response;
        };
        return begin_getColumnNamingConvention(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getColumnNamingConvention()
    {
        return begin_getColumnNamingConvention(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getColumnNamingConvention(const ::Ice::Context& __ctx)
    {
        return begin_getColumnNamingConvention(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getColumnNamingConvention(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getColumnNamingConvention(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getColumnNamingConvention(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getColumnNamingConvention(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getColumnNamingConvention(const ::omero::model::Callback_Plate_getColumnNamingConventionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getColumnNamingConvention(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getColumnNamingConvention(const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_getColumnNamingConventionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getColumnNamingConvention(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getColumnNamingConvention(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getColumnNamingConvention(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getColumnNamingConvention(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setColumnNamingConvention(const ::omero::RStringPtr& theColumnNamingConvention)
    {
        setColumnNamingConvention(theColumnNamingConvention, 0);
    }
    void setColumnNamingConvention(const ::omero::RStringPtr& theColumnNamingConvention, const ::Ice::Context& __ctx)
    {
        setColumnNamingConvention(theColumnNamingConvention, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setColumnNamingConvention(const ::omero::RStringPtr& theColumnNamingConvention, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setColumnNamingConvention(theColumnNamingConvention, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setColumnNamingConvention(const ::omero::RStringPtr& theColumnNamingConvention, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setColumnNamingConvention(theColumnNamingConvention, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setColumnNamingConvention(const ::omero::RStringPtr& theColumnNamingConvention, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setColumnNamingConvention(theColumnNamingConvention, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setColumnNamingConvention(const ::omero::RStringPtr& theColumnNamingConvention, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setColumnNamingConvention(theColumnNamingConvention, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setColumnNamingConvention(const ::omero::RStringPtr& theColumnNamingConvention)
    {
        return begin_setColumnNamingConvention(theColumnNamingConvention, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setColumnNamingConvention(const ::omero::RStringPtr& theColumnNamingConvention, const ::Ice::Context& __ctx)
    {
        return begin_setColumnNamingConvention(theColumnNamingConvention, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setColumnNamingConvention(const ::omero::RStringPtr& theColumnNamingConvention, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setColumnNamingConvention(theColumnNamingConvention, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setColumnNamingConvention(const ::omero::RStringPtr& theColumnNamingConvention, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setColumnNamingConvention(theColumnNamingConvention, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setColumnNamingConvention(const ::omero::RStringPtr& theColumnNamingConvention, const ::omero::model::Callback_Plate_setColumnNamingConventionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setColumnNamingConvention(theColumnNamingConvention, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setColumnNamingConvention(const ::omero::RStringPtr& theColumnNamingConvention, const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_setColumnNamingConventionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setColumnNamingConvention(theColumnNamingConvention, &__ctx, __del, __cookie);
    }

    void end_setColumnNamingConvention(const ::Ice::AsyncResultPtr&);
    
private:

    void setColumnNamingConvention(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setColumnNamingConvention(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getRowNamingConvention()
    {
        return getRowNamingConvention(0);
    }
    ::omero::RStringPtr getRowNamingConvention(const ::Ice::Context& __ctx)
    {
        return getRowNamingConvention(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getRowNamingConvention(const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getRowNamingConvention(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getRowNamingConvention(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getRowNamingConvention(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getRowNamingConvention(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getRowNamingConvention(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getRowNamingConvention(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getRowNamingConvention(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getRowNamingConvention(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RStringPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
                ::omero::RStringPtr __ret;
                try
                {
                    __ret = __proxy->end_getRowNamingConvention(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RStringPtr&)> _response;
        };
        return begin_getRowNamingConvention(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getRowNamingConvention()
    {
        return begin_getRowNamingConvention(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRowNamingConvention(const ::Ice::Context& __ctx)
    {
        return begin_getRowNamingConvention(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRowNamingConvention(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRowNamingConvention(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRowNamingConvention(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRowNamingConvention(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRowNamingConvention(const ::omero::model::Callback_Plate_getRowNamingConventionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRowNamingConvention(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRowNamingConvention(const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_getRowNamingConventionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRowNamingConvention(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getRowNamingConvention(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getRowNamingConvention(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getRowNamingConvention(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setRowNamingConvention(const ::omero::RStringPtr& theRowNamingConvention)
    {
        setRowNamingConvention(theRowNamingConvention, 0);
    }
    void setRowNamingConvention(const ::omero::RStringPtr& theRowNamingConvention, const ::Ice::Context& __ctx)
    {
        setRowNamingConvention(theRowNamingConvention, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setRowNamingConvention(const ::omero::RStringPtr& theRowNamingConvention, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setRowNamingConvention(theRowNamingConvention, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setRowNamingConvention(const ::omero::RStringPtr& theRowNamingConvention, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setRowNamingConvention(theRowNamingConvention, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setRowNamingConvention(const ::omero::RStringPtr& theRowNamingConvention, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setRowNamingConvention(theRowNamingConvention, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setRowNamingConvention(const ::omero::RStringPtr& theRowNamingConvention, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setRowNamingConvention(theRowNamingConvention, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setRowNamingConvention(const ::omero::RStringPtr& theRowNamingConvention)
    {
        return begin_setRowNamingConvention(theRowNamingConvention, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setRowNamingConvention(const ::omero::RStringPtr& theRowNamingConvention, const ::Ice::Context& __ctx)
    {
        return begin_setRowNamingConvention(theRowNamingConvention, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setRowNamingConvention(const ::omero::RStringPtr& theRowNamingConvention, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setRowNamingConvention(theRowNamingConvention, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setRowNamingConvention(const ::omero::RStringPtr& theRowNamingConvention, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setRowNamingConvention(theRowNamingConvention, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setRowNamingConvention(const ::omero::RStringPtr& theRowNamingConvention, const ::omero::model::Callback_Plate_setRowNamingConventionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setRowNamingConvention(theRowNamingConvention, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setRowNamingConvention(const ::omero::RStringPtr& theRowNamingConvention, const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_setRowNamingConventionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setRowNamingConvention(theRowNamingConvention, &__ctx, __del, __cookie);
    }

    void end_setRowNamingConvention(const ::Ice::AsyncResultPtr&);
    
private:

    void setRowNamingConvention(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setRowNamingConvention(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RDoublePtr getWellOriginX()
    {
        return getWellOriginX(0);
    }
    ::omero::RDoublePtr getWellOriginX(const ::Ice::Context& __ctx)
    {
        return getWellOriginX(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getWellOriginX(const ::IceInternal::Function<void (const ::omero::RDoublePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getWellOriginX(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getWellOriginX(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getWellOriginX(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getWellOriginX(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RDoublePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getWellOriginX(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getWellOriginX(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getWellOriginX(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getWellOriginX(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RDoublePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RDoublePtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
                ::omero::RDoublePtr __ret;
                try
                {
                    __ret = __proxy->end_getWellOriginX(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RDoublePtr&)> _response;
        };
        return begin_getWellOriginX(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getWellOriginX()
    {
        return begin_getWellOriginX(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getWellOriginX(const ::Ice::Context& __ctx)
    {
        return begin_getWellOriginX(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getWellOriginX(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getWellOriginX(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getWellOriginX(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getWellOriginX(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getWellOriginX(const ::omero::model::Callback_Plate_getWellOriginXPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getWellOriginX(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getWellOriginX(const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_getWellOriginXPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getWellOriginX(&__ctx, __del, __cookie);
    }

    ::omero::RDoublePtr end_getWellOriginX(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RDoublePtr getWellOriginX(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getWellOriginX(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setWellOriginX(const ::omero::RDoublePtr& theWellOriginX)
    {
        setWellOriginX(theWellOriginX, 0);
    }
    void setWellOriginX(const ::omero::RDoublePtr& theWellOriginX, const ::Ice::Context& __ctx)
    {
        setWellOriginX(theWellOriginX, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setWellOriginX(const ::omero::RDoublePtr& theWellOriginX, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setWellOriginX(theWellOriginX, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setWellOriginX(const ::omero::RDoublePtr& theWellOriginX, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setWellOriginX(theWellOriginX, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setWellOriginX(const ::omero::RDoublePtr& theWellOriginX, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setWellOriginX(theWellOriginX, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setWellOriginX(const ::omero::RDoublePtr& theWellOriginX, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setWellOriginX(theWellOriginX, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setWellOriginX(const ::omero::RDoublePtr& theWellOriginX)
    {
        return begin_setWellOriginX(theWellOriginX, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setWellOriginX(const ::omero::RDoublePtr& theWellOriginX, const ::Ice::Context& __ctx)
    {
        return begin_setWellOriginX(theWellOriginX, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setWellOriginX(const ::omero::RDoublePtr& theWellOriginX, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setWellOriginX(theWellOriginX, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setWellOriginX(const ::omero::RDoublePtr& theWellOriginX, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setWellOriginX(theWellOriginX, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setWellOriginX(const ::omero::RDoublePtr& theWellOriginX, const ::omero::model::Callback_Plate_setWellOriginXPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setWellOriginX(theWellOriginX, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setWellOriginX(const ::omero::RDoublePtr& theWellOriginX, const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_setWellOriginXPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setWellOriginX(theWellOriginX, &__ctx, __del, __cookie);
    }

    void end_setWellOriginX(const ::Ice::AsyncResultPtr&);
    
private:

    void setWellOriginX(const ::omero::RDoublePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setWellOriginX(const ::omero::RDoublePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RDoublePtr getWellOriginY()
    {
        return getWellOriginY(0);
    }
    ::omero::RDoublePtr getWellOriginY(const ::Ice::Context& __ctx)
    {
        return getWellOriginY(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getWellOriginY(const ::IceInternal::Function<void (const ::omero::RDoublePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getWellOriginY(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getWellOriginY(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getWellOriginY(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getWellOriginY(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RDoublePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getWellOriginY(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getWellOriginY(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getWellOriginY(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getWellOriginY(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RDoublePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RDoublePtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
                ::omero::RDoublePtr __ret;
                try
                {
                    __ret = __proxy->end_getWellOriginY(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RDoublePtr&)> _response;
        };
        return begin_getWellOriginY(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getWellOriginY()
    {
        return begin_getWellOriginY(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getWellOriginY(const ::Ice::Context& __ctx)
    {
        return begin_getWellOriginY(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getWellOriginY(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getWellOriginY(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getWellOriginY(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getWellOriginY(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getWellOriginY(const ::omero::model::Callback_Plate_getWellOriginYPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getWellOriginY(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getWellOriginY(const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_getWellOriginYPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getWellOriginY(&__ctx, __del, __cookie);
    }

    ::omero::RDoublePtr end_getWellOriginY(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RDoublePtr getWellOriginY(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getWellOriginY(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setWellOriginY(const ::omero::RDoublePtr& theWellOriginY)
    {
        setWellOriginY(theWellOriginY, 0);
    }
    void setWellOriginY(const ::omero::RDoublePtr& theWellOriginY, const ::Ice::Context& __ctx)
    {
        setWellOriginY(theWellOriginY, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setWellOriginY(const ::omero::RDoublePtr& theWellOriginY, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setWellOriginY(theWellOriginY, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setWellOriginY(const ::omero::RDoublePtr& theWellOriginY, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setWellOriginY(theWellOriginY, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setWellOriginY(const ::omero::RDoublePtr& theWellOriginY, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setWellOriginY(theWellOriginY, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setWellOriginY(const ::omero::RDoublePtr& theWellOriginY, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setWellOriginY(theWellOriginY, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setWellOriginY(const ::omero::RDoublePtr& theWellOriginY)
    {
        return begin_setWellOriginY(theWellOriginY, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setWellOriginY(const ::omero::RDoublePtr& theWellOriginY, const ::Ice::Context& __ctx)
    {
        return begin_setWellOriginY(theWellOriginY, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setWellOriginY(const ::omero::RDoublePtr& theWellOriginY, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setWellOriginY(theWellOriginY, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setWellOriginY(const ::omero::RDoublePtr& theWellOriginY, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setWellOriginY(theWellOriginY, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setWellOriginY(const ::omero::RDoublePtr& theWellOriginY, const ::omero::model::Callback_Plate_setWellOriginYPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setWellOriginY(theWellOriginY, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setWellOriginY(const ::omero::RDoublePtr& theWellOriginY, const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_setWellOriginYPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setWellOriginY(theWellOriginY, &__ctx, __del, __cookie);
    }

    void end_setWellOriginY(const ::Ice::AsyncResultPtr&);
    
private:

    void setWellOriginY(const ::omero::RDoublePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setWellOriginY(const ::omero::RDoublePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RIntPtr getRows()
    {
        return getRows(0);
    }
    ::omero::RIntPtr getRows(const ::Ice::Context& __ctx)
    {
        return getRows(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getRows(const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getRows(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getRows(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getRows(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getRows(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getRows(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getRows(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getRows(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getRows(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RIntPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
                ::omero::RIntPtr __ret;
                try
                {
                    __ret = __proxy->end_getRows(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RIntPtr&)> _response;
        };
        return begin_getRows(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getRows()
    {
        return begin_getRows(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRows(const ::Ice::Context& __ctx)
    {
        return begin_getRows(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRows(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRows(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRows(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRows(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRows(const ::omero::model::Callback_Plate_getRowsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRows(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRows(const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_getRowsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRows(&__ctx, __del, __cookie);
    }

    ::omero::RIntPtr end_getRows(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RIntPtr getRows(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getRows(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setRows(const ::omero::RIntPtr& theRows)
    {
        setRows(theRows, 0);
    }
    void setRows(const ::omero::RIntPtr& theRows, const ::Ice::Context& __ctx)
    {
        setRows(theRows, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setRows(const ::omero::RIntPtr& theRows, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setRows(theRows, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setRows(const ::omero::RIntPtr& theRows, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setRows(theRows, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setRows(const ::omero::RIntPtr& theRows, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setRows(theRows, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setRows(const ::omero::RIntPtr& theRows, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setRows(theRows, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setRows(const ::omero::RIntPtr& theRows)
    {
        return begin_setRows(theRows, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setRows(const ::omero::RIntPtr& theRows, const ::Ice::Context& __ctx)
    {
        return begin_setRows(theRows, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setRows(const ::omero::RIntPtr& theRows, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setRows(theRows, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setRows(const ::omero::RIntPtr& theRows, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setRows(theRows, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setRows(const ::omero::RIntPtr& theRows, const ::omero::model::Callback_Plate_setRowsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setRows(theRows, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setRows(const ::omero::RIntPtr& theRows, const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_setRowsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setRows(theRows, &__ctx, __del, __cookie);
    }

    void end_setRows(const ::Ice::AsyncResultPtr&);
    
private:

    void setRows(const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setRows(const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RIntPtr getColumns()
    {
        return getColumns(0);
    }
    ::omero::RIntPtr getColumns(const ::Ice::Context& __ctx)
    {
        return getColumns(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getColumns(const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getColumns(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getColumns(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getColumns(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getColumns(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getColumns(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getColumns(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getColumns(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getColumns(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RIntPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
                ::omero::RIntPtr __ret;
                try
                {
                    __ret = __proxy->end_getColumns(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RIntPtr&)> _response;
        };
        return begin_getColumns(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getColumns()
    {
        return begin_getColumns(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getColumns(const ::Ice::Context& __ctx)
    {
        return begin_getColumns(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getColumns(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getColumns(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getColumns(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getColumns(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getColumns(const ::omero::model::Callback_Plate_getColumnsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getColumns(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getColumns(const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_getColumnsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getColumns(&__ctx, __del, __cookie);
    }

    ::omero::RIntPtr end_getColumns(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RIntPtr getColumns(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getColumns(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setColumns(const ::omero::RIntPtr& theColumns)
    {
        setColumns(theColumns, 0);
    }
    void setColumns(const ::omero::RIntPtr& theColumns, const ::Ice::Context& __ctx)
    {
        setColumns(theColumns, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setColumns(const ::omero::RIntPtr& theColumns, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setColumns(theColumns, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setColumns(const ::omero::RIntPtr& theColumns, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setColumns(theColumns, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setColumns(const ::omero::RIntPtr& theColumns, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setColumns(theColumns, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setColumns(const ::omero::RIntPtr& theColumns, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setColumns(theColumns, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setColumns(const ::omero::RIntPtr& theColumns)
    {
        return begin_setColumns(theColumns, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setColumns(const ::omero::RIntPtr& theColumns, const ::Ice::Context& __ctx)
    {
        return begin_setColumns(theColumns, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setColumns(const ::omero::RIntPtr& theColumns, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setColumns(theColumns, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setColumns(const ::omero::RIntPtr& theColumns, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setColumns(theColumns, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setColumns(const ::omero::RIntPtr& theColumns, const ::omero::model::Callback_Plate_setColumnsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setColumns(theColumns, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setColumns(const ::omero::RIntPtr& theColumns, const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_setColumnsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setColumns(theColumns, &__ctx, __del, __cookie);
    }

    void end_setColumns(const ::Ice::AsyncResultPtr&);
    
private:

    void setColumns(const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setColumns(const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getStatus()
    {
        return getStatus(0);
    }
    ::omero::RStringPtr getStatus(const ::Ice::Context& __ctx)
    {
        return getStatus(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getStatus(const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getStatus(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getStatus(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getStatus(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getStatus(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getStatus(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getStatus(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getStatus(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getStatus(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RStringPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
                ::omero::RStringPtr __ret;
                try
                {
                    __ret = __proxy->end_getStatus(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RStringPtr&)> _response;
        };
        return begin_getStatus(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getStatus()
    {
        return begin_getStatus(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getStatus(const ::Ice::Context& __ctx)
    {
        return begin_getStatus(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getStatus(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStatus(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getStatus(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStatus(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getStatus(const ::omero::model::Callback_Plate_getStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStatus(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getStatus(const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_getStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStatus(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getStatus(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getStatus(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getStatus(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setStatus(const ::omero::RStringPtr& theStatus)
    {
        setStatus(theStatus, 0);
    }
    void setStatus(const ::omero::RStringPtr& theStatus, const ::Ice::Context& __ctx)
    {
        setStatus(theStatus, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setStatus(const ::omero::RStringPtr& theStatus, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setStatus(theStatus, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setStatus(const ::omero::RStringPtr& theStatus, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setStatus(theStatus, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setStatus(const ::omero::RStringPtr& theStatus, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setStatus(theStatus, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setStatus(const ::omero::RStringPtr& theStatus, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setStatus(theStatus, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setStatus(const ::omero::RStringPtr& theStatus)
    {
        return begin_setStatus(theStatus, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setStatus(const ::omero::RStringPtr& theStatus, const ::Ice::Context& __ctx)
    {
        return begin_setStatus(theStatus, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setStatus(const ::omero::RStringPtr& theStatus, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setStatus(theStatus, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setStatus(const ::omero::RStringPtr& theStatus, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setStatus(theStatus, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setStatus(const ::omero::RStringPtr& theStatus, const ::omero::model::Callback_Plate_setStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setStatus(theStatus, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setStatus(const ::omero::RStringPtr& theStatus, const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_setStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setStatus(theStatus, &__ctx, __del, __cookie);
    }

    void end_setStatus(const ::Ice::AsyncResultPtr&);
    
private:

    void setStatus(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setStatus(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getExternalIdentifier()
    {
        return getExternalIdentifier(0);
    }
    ::omero::RStringPtr getExternalIdentifier(const ::Ice::Context& __ctx)
    {
        return getExternalIdentifier(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getExternalIdentifier(const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getExternalIdentifier(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getExternalIdentifier(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getExternalIdentifier(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getExternalIdentifier(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getExternalIdentifier(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getExternalIdentifier(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getExternalIdentifier(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getExternalIdentifier(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RStringPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
                ::omero::RStringPtr __ret;
                try
                {
                    __ret = __proxy->end_getExternalIdentifier(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RStringPtr&)> _response;
        };
        return begin_getExternalIdentifier(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getExternalIdentifier()
    {
        return begin_getExternalIdentifier(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getExternalIdentifier(const ::Ice::Context& __ctx)
    {
        return begin_getExternalIdentifier(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getExternalIdentifier(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getExternalIdentifier(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getExternalIdentifier(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getExternalIdentifier(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getExternalIdentifier(const ::omero::model::Callback_Plate_getExternalIdentifierPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getExternalIdentifier(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getExternalIdentifier(const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_getExternalIdentifierPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getExternalIdentifier(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getExternalIdentifier(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getExternalIdentifier(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getExternalIdentifier(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setExternalIdentifier(const ::omero::RStringPtr& theExternalIdentifier)
    {
        setExternalIdentifier(theExternalIdentifier, 0);
    }
    void setExternalIdentifier(const ::omero::RStringPtr& theExternalIdentifier, const ::Ice::Context& __ctx)
    {
        setExternalIdentifier(theExternalIdentifier, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setExternalIdentifier(const ::omero::RStringPtr& theExternalIdentifier, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setExternalIdentifier(theExternalIdentifier, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setExternalIdentifier(const ::omero::RStringPtr& theExternalIdentifier, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setExternalIdentifier(theExternalIdentifier, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setExternalIdentifier(const ::omero::RStringPtr& theExternalIdentifier, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setExternalIdentifier(theExternalIdentifier, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setExternalIdentifier(const ::omero::RStringPtr& theExternalIdentifier, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setExternalIdentifier(theExternalIdentifier, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setExternalIdentifier(const ::omero::RStringPtr& theExternalIdentifier)
    {
        return begin_setExternalIdentifier(theExternalIdentifier, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setExternalIdentifier(const ::omero::RStringPtr& theExternalIdentifier, const ::Ice::Context& __ctx)
    {
        return begin_setExternalIdentifier(theExternalIdentifier, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setExternalIdentifier(const ::omero::RStringPtr& theExternalIdentifier, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setExternalIdentifier(theExternalIdentifier, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setExternalIdentifier(const ::omero::RStringPtr& theExternalIdentifier, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setExternalIdentifier(theExternalIdentifier, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setExternalIdentifier(const ::omero::RStringPtr& theExternalIdentifier, const ::omero::model::Callback_Plate_setExternalIdentifierPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setExternalIdentifier(theExternalIdentifier, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setExternalIdentifier(const ::omero::RStringPtr& theExternalIdentifier, const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_setExternalIdentifierPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setExternalIdentifier(theExternalIdentifier, &__ctx, __del, __cookie);
    }

    void end_setExternalIdentifier(const ::Ice::AsyncResultPtr&);
    
private:

    void setExternalIdentifier(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setExternalIdentifier(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unloadScreenLinks()
    {
        unloadScreenLinks(0);
    }
    void unloadScreenLinks(const ::Ice::Context& __ctx)
    {
        unloadScreenLinks(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_unloadScreenLinks(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unloadScreenLinks(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_unloadScreenLinks(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unloadScreenLinks(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unloadScreenLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unloadScreenLinks(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unloadScreenLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unloadScreenLinks(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_unloadScreenLinks()
    {
        return begin_unloadScreenLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadScreenLinks(const ::Ice::Context& __ctx)
    {
        return begin_unloadScreenLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadScreenLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadScreenLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadScreenLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadScreenLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadScreenLinks(const ::omero::model::Callback_Plate_unloadScreenLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadScreenLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadScreenLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_unloadScreenLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadScreenLinks(&__ctx, __del, __cookie);
    }

    void end_unloadScreenLinks(const ::Ice::AsyncResultPtr&);
    
private:

    void unloadScreenLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unloadScreenLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int sizeOfScreenLinks()
    {
        return sizeOfScreenLinks(0);
    }
    ::Ice::Int sizeOfScreenLinks(const ::Ice::Context& __ctx)
    {
        return sizeOfScreenLinks(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_sizeOfScreenLinks(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sizeOfScreenLinks(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfScreenLinks(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sizeOfScreenLinks(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfScreenLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sizeOfScreenLinks(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfScreenLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sizeOfScreenLinks(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_sizeOfScreenLinks(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_sizeOfScreenLinks(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_sizeOfScreenLinks(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_sizeOfScreenLinks()
    {
        return begin_sizeOfScreenLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfScreenLinks(const ::Ice::Context& __ctx)
    {
        return begin_sizeOfScreenLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfScreenLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfScreenLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfScreenLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfScreenLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfScreenLinks(const ::omero::model::Callback_Plate_sizeOfScreenLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfScreenLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfScreenLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_sizeOfScreenLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfScreenLinks(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_sizeOfScreenLinks(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int sizeOfScreenLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sizeOfScreenLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::PlateScreenLinksSeq copyScreenLinks()
    {
        return copyScreenLinks(0);
    }
    ::omero::model::PlateScreenLinksSeq copyScreenLinks(const ::Ice::Context& __ctx)
    {
        return copyScreenLinks(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_copyScreenLinks(const ::IceInternal::Function<void (const ::omero::model::PlateScreenLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_copyScreenLinks(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_copyScreenLinks(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_copyScreenLinks(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_copyScreenLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::PlateScreenLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_copyScreenLinks(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_copyScreenLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_copyScreenLinks(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_copyScreenLinks(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::PlateScreenLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::PlateScreenLinksSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
                ::omero::model::PlateScreenLinksSeq __ret;
                try
                {
                    __ret = __proxy->end_copyScreenLinks(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::PlateScreenLinksSeq&)> _response;
        };
        return begin_copyScreenLinks(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_copyScreenLinks()
    {
        return begin_copyScreenLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyScreenLinks(const ::Ice::Context& __ctx)
    {
        return begin_copyScreenLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyScreenLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyScreenLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyScreenLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyScreenLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyScreenLinks(const ::omero::model::Callback_Plate_copyScreenLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyScreenLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyScreenLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_copyScreenLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyScreenLinks(&__ctx, __del, __cookie);
    }

    ::omero::model::PlateScreenLinksSeq end_copyScreenLinks(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::PlateScreenLinksSeq copyScreenLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_copyScreenLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addScreenPlateLink(const ::omero::model::ScreenPlateLinkPtr& target)
    {
        addScreenPlateLink(target, 0);
    }
    void addScreenPlateLink(const ::omero::model::ScreenPlateLinkPtr& target, const ::Ice::Context& __ctx)
    {
        addScreenPlateLink(target, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addScreenPlateLink(const ::omero::model::ScreenPlateLinkPtr& target, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addScreenPlateLink(target, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addScreenPlateLink(const ::omero::model::ScreenPlateLinkPtr& target, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addScreenPlateLink(target, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addScreenPlateLink(const ::omero::model::ScreenPlateLinkPtr& target, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addScreenPlateLink(target, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addScreenPlateLink(const ::omero::model::ScreenPlateLinkPtr& target, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addScreenPlateLink(target, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addScreenPlateLink(const ::omero::model::ScreenPlateLinkPtr& target)
    {
        return begin_addScreenPlateLink(target, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addScreenPlateLink(const ::omero::model::ScreenPlateLinkPtr& target, const ::Ice::Context& __ctx)
    {
        return begin_addScreenPlateLink(target, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addScreenPlateLink(const ::omero::model::ScreenPlateLinkPtr& target, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addScreenPlateLink(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addScreenPlateLink(const ::omero::model::ScreenPlateLinkPtr& target, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addScreenPlateLink(target, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addScreenPlateLink(const ::omero::model::ScreenPlateLinkPtr& target, const ::omero::model::Callback_Plate_addScreenPlateLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addScreenPlateLink(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addScreenPlateLink(const ::omero::model::ScreenPlateLinkPtr& target, const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_addScreenPlateLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addScreenPlateLink(target, &__ctx, __del, __cookie);
    }

    void end_addScreenPlateLink(const ::Ice::AsyncResultPtr&);
    
private:

    void addScreenPlateLink(const ::omero::model::ScreenPlateLinkPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addScreenPlateLink(const ::omero::model::ScreenPlateLinkPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addAllScreenPlateLinkSet(const ::omero::model::PlateScreenLinksSeq& targets)
    {
        addAllScreenPlateLinkSet(targets, 0);
    }
    void addAllScreenPlateLinkSet(const ::omero::model::PlateScreenLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        addAllScreenPlateLinkSet(targets, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addAllScreenPlateLinkSet(const ::omero::model::PlateScreenLinksSeq& targets, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addAllScreenPlateLinkSet(targets, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addAllScreenPlateLinkSet(const ::omero::model::PlateScreenLinksSeq& targets, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addAllScreenPlateLinkSet(targets, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addAllScreenPlateLinkSet(const ::omero::model::PlateScreenLinksSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addAllScreenPlateLinkSet(targets, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addAllScreenPlateLinkSet(const ::omero::model::PlateScreenLinksSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addAllScreenPlateLinkSet(targets, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addAllScreenPlateLinkSet(const ::omero::model::PlateScreenLinksSeq& targets)
    {
        return begin_addAllScreenPlateLinkSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllScreenPlateLinkSet(const ::omero::model::PlateScreenLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_addAllScreenPlateLinkSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllScreenPlateLinkSet(const ::omero::model::PlateScreenLinksSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllScreenPlateLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllScreenPlateLinkSet(const ::omero::model::PlateScreenLinksSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllScreenPlateLinkSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllScreenPlateLinkSet(const ::omero::model::PlateScreenLinksSeq& targets, const ::omero::model::Callback_Plate_addAllScreenPlateLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllScreenPlateLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllScreenPlateLinkSet(const ::omero::model::PlateScreenLinksSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_addAllScreenPlateLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllScreenPlateLinkSet(targets, &__ctx, __del, __cookie);
    }

    void end_addAllScreenPlateLinkSet(const ::Ice::AsyncResultPtr&);
    
private:

    void addAllScreenPlateLinkSet(const ::omero::model::PlateScreenLinksSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addAllScreenPlateLinkSet(const ::omero::model::PlateScreenLinksSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeScreenPlateLink(const ::omero::model::ScreenPlateLinkPtr& theTarget)
    {
        removeScreenPlateLink(theTarget, 0);
    }
    void removeScreenPlateLink(const ::omero::model::ScreenPlateLinkPtr& theTarget, const ::Ice::Context& __ctx)
    {
        removeScreenPlateLink(theTarget, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeScreenPlateLink(const ::omero::model::ScreenPlateLinkPtr& theTarget, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeScreenPlateLink(theTarget, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeScreenPlateLink(const ::omero::model::ScreenPlateLinkPtr& theTarget, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeScreenPlateLink(theTarget, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeScreenPlateLink(const ::omero::model::ScreenPlateLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeScreenPlateLink(theTarget, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeScreenPlateLink(const ::omero::model::ScreenPlateLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeScreenPlateLink(theTarget, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeScreenPlateLink(const ::omero::model::ScreenPlateLinkPtr& theTarget)
    {
        return begin_removeScreenPlateLink(theTarget, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeScreenPlateLink(const ::omero::model::ScreenPlateLinkPtr& theTarget, const ::Ice::Context& __ctx)
    {
        return begin_removeScreenPlateLink(theTarget, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeScreenPlateLink(const ::omero::model::ScreenPlateLinkPtr& theTarget, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeScreenPlateLink(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeScreenPlateLink(const ::omero::model::ScreenPlateLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeScreenPlateLink(theTarget, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeScreenPlateLink(const ::omero::model::ScreenPlateLinkPtr& theTarget, const ::omero::model::Callback_Plate_removeScreenPlateLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeScreenPlateLink(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeScreenPlateLink(const ::omero::model::ScreenPlateLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_removeScreenPlateLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeScreenPlateLink(theTarget, &__ctx, __del, __cookie);
    }

    void end_removeScreenPlateLink(const ::Ice::AsyncResultPtr&);
    
private:

    void removeScreenPlateLink(const ::omero::model::ScreenPlateLinkPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeScreenPlateLink(const ::omero::model::ScreenPlateLinkPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeAllScreenPlateLinkSet(const ::omero::model::PlateScreenLinksSeq& targets)
    {
        removeAllScreenPlateLinkSet(targets, 0);
    }
    void removeAllScreenPlateLinkSet(const ::omero::model::PlateScreenLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        removeAllScreenPlateLinkSet(targets, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeAllScreenPlateLinkSet(const ::omero::model::PlateScreenLinksSeq& targets, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeAllScreenPlateLinkSet(targets, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeAllScreenPlateLinkSet(const ::omero::model::PlateScreenLinksSeq& targets, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeAllScreenPlateLinkSet(targets, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeAllScreenPlateLinkSet(const ::omero::model::PlateScreenLinksSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeAllScreenPlateLinkSet(targets, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeAllScreenPlateLinkSet(const ::omero::model::PlateScreenLinksSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeAllScreenPlateLinkSet(targets, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeAllScreenPlateLinkSet(const ::omero::model::PlateScreenLinksSeq& targets)
    {
        return begin_removeAllScreenPlateLinkSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllScreenPlateLinkSet(const ::omero::model::PlateScreenLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_removeAllScreenPlateLinkSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllScreenPlateLinkSet(const ::omero::model::PlateScreenLinksSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllScreenPlateLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllScreenPlateLinkSet(const ::omero::model::PlateScreenLinksSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllScreenPlateLinkSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllScreenPlateLinkSet(const ::omero::model::PlateScreenLinksSeq& targets, const ::omero::model::Callback_Plate_removeAllScreenPlateLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllScreenPlateLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllScreenPlateLinkSet(const ::omero::model::PlateScreenLinksSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_removeAllScreenPlateLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllScreenPlateLinkSet(targets, &__ctx, __del, __cookie);
    }

    void end_removeAllScreenPlateLinkSet(const ::Ice::AsyncResultPtr&);
    
private:

    void removeAllScreenPlateLinkSet(const ::omero::model::PlateScreenLinksSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeAllScreenPlateLinkSet(const ::omero::model::PlateScreenLinksSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void clearScreenLinks()
    {
        clearScreenLinks(0);
    }
    void clearScreenLinks(const ::Ice::Context& __ctx)
    {
        clearScreenLinks(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_clearScreenLinks(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_clearScreenLinks(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_clearScreenLinks(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_clearScreenLinks(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_clearScreenLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_clearScreenLinks(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_clearScreenLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_clearScreenLinks(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_clearScreenLinks()
    {
        return begin_clearScreenLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearScreenLinks(const ::Ice::Context& __ctx)
    {
        return begin_clearScreenLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearScreenLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearScreenLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearScreenLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearScreenLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearScreenLinks(const ::omero::model::Callback_Plate_clearScreenLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearScreenLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearScreenLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_clearScreenLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearScreenLinks(&__ctx, __del, __cookie);
    }

    void end_clearScreenLinks(const ::Ice::AsyncResultPtr&);
    
private:

    void clearScreenLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_clearScreenLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reloadScreenLinks(const ::omero::model::PlatePtr& toCopy)
    {
        reloadScreenLinks(toCopy, 0);
    }
    void reloadScreenLinks(const ::omero::model::PlatePtr& toCopy, const ::Ice::Context& __ctx)
    {
        reloadScreenLinks(toCopy, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_reloadScreenLinks(const ::omero::model::PlatePtr& toCopy, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reloadScreenLinks(toCopy, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_reloadScreenLinks(const ::omero::model::PlatePtr& toCopy, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reloadScreenLinks(toCopy, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reloadScreenLinks(const ::omero::model::PlatePtr& toCopy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reloadScreenLinks(toCopy, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reloadScreenLinks(const ::omero::model::PlatePtr& toCopy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reloadScreenLinks(toCopy, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_reloadScreenLinks(const ::omero::model::PlatePtr& toCopy)
    {
        return begin_reloadScreenLinks(toCopy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadScreenLinks(const ::omero::model::PlatePtr& toCopy, const ::Ice::Context& __ctx)
    {
        return begin_reloadScreenLinks(toCopy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadScreenLinks(const ::omero::model::PlatePtr& toCopy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadScreenLinks(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadScreenLinks(const ::omero::model::PlatePtr& toCopy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadScreenLinks(toCopy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadScreenLinks(const ::omero::model::PlatePtr& toCopy, const ::omero::model::Callback_Plate_reloadScreenLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadScreenLinks(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadScreenLinks(const ::omero::model::PlatePtr& toCopy, const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_reloadScreenLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadScreenLinks(toCopy, &__ctx, __del, __cookie);
    }

    void end_reloadScreenLinks(const ::Ice::AsyncResultPtr&);
    
private:

    void reloadScreenLinks(const ::omero::model::PlatePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reloadScreenLinks(const ::omero::model::PlatePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::sys::CountMap getScreenLinksCountPerOwner()
    {
        return getScreenLinksCountPerOwner(0);
    }
    ::omero::sys::CountMap getScreenLinksCountPerOwner(const ::Ice::Context& __ctx)
    {
        return getScreenLinksCountPerOwner(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getScreenLinksCountPerOwner(const ::IceInternal::Function<void (const ::omero::sys::CountMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getScreenLinksCountPerOwner(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getScreenLinksCountPerOwner(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getScreenLinksCountPerOwner(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getScreenLinksCountPerOwner(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::sys::CountMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getScreenLinksCountPerOwner(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getScreenLinksCountPerOwner(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getScreenLinksCountPerOwner(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getScreenLinksCountPerOwner(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::sys::CountMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::sys::CountMap&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
                ::omero::sys::CountMap __ret;
                try
                {
                    __ret = __proxy->end_getScreenLinksCountPerOwner(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::sys::CountMap&)> _response;
        };
        return begin_getScreenLinksCountPerOwner(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getScreenLinksCountPerOwner()
    {
        return begin_getScreenLinksCountPerOwner(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getScreenLinksCountPerOwner(const ::Ice::Context& __ctx)
    {
        return begin_getScreenLinksCountPerOwner(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getScreenLinksCountPerOwner(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getScreenLinksCountPerOwner(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getScreenLinksCountPerOwner(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getScreenLinksCountPerOwner(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getScreenLinksCountPerOwner(const ::omero::model::Callback_Plate_getScreenLinksCountPerOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getScreenLinksCountPerOwner(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getScreenLinksCountPerOwner(const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_getScreenLinksCountPerOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getScreenLinksCountPerOwner(&__ctx, __del, __cookie);
    }

    ::omero::sys::CountMap end_getScreenLinksCountPerOwner(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::sys::CountMap getScreenLinksCountPerOwner(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getScreenLinksCountPerOwner(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::ScreenPlateLinkPtr linkScreen(const ::omero::model::ScreenPtr& addition)
    {
        return linkScreen(addition, 0);
    }
    ::omero::model::ScreenPlateLinkPtr linkScreen(const ::omero::model::ScreenPtr& addition, const ::Ice::Context& __ctx)
    {
        return linkScreen(addition, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_linkScreen(const ::omero::model::ScreenPtr& addition, const ::IceInternal::Function<void (const ::omero::model::ScreenPlateLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_linkScreen(addition, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_linkScreen(const ::omero::model::ScreenPtr& addition, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_linkScreen(addition, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_linkScreen(const ::omero::model::ScreenPtr& addition, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::ScreenPlateLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_linkScreen(addition, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_linkScreen(const ::omero::model::ScreenPtr& addition, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_linkScreen(addition, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_linkScreen(const ::omero::model::ScreenPtr& addition, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::ScreenPlateLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::ScreenPlateLinkPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
                ::omero::model::ScreenPlateLinkPtr __ret;
                try
                {
                    __ret = __proxy->end_linkScreen(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::ScreenPlateLinkPtr&)> _response;
        };
        return begin_linkScreen(addition, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_linkScreen(const ::omero::model::ScreenPtr& addition)
    {
        return begin_linkScreen(addition, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkScreen(const ::omero::model::ScreenPtr& addition, const ::Ice::Context& __ctx)
    {
        return begin_linkScreen(addition, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkScreen(const ::omero::model::ScreenPtr& addition, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkScreen(addition, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkScreen(const ::omero::model::ScreenPtr& addition, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkScreen(addition, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkScreen(const ::omero::model::ScreenPtr& addition, const ::omero::model::Callback_Plate_linkScreenPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkScreen(addition, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkScreen(const ::omero::model::ScreenPtr& addition, const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_linkScreenPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkScreen(addition, &__ctx, __del, __cookie);
    }

    ::omero::model::ScreenPlateLinkPtr end_linkScreen(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::ScreenPlateLinkPtr linkScreen(const ::omero::model::ScreenPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_linkScreen(const ::omero::model::ScreenPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addScreenPlateLinkToBoth(const ::omero::model::ScreenPlateLinkPtr& link, bool bothSides)
    {
        addScreenPlateLinkToBoth(link, bothSides, 0);
    }
    void addScreenPlateLinkToBoth(const ::omero::model::ScreenPlateLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        addScreenPlateLinkToBoth(link, bothSides, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addScreenPlateLinkToBoth(const ::omero::model::ScreenPlateLinkPtr& link, bool bothSides, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addScreenPlateLinkToBoth(link, bothSides, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addScreenPlateLinkToBoth(const ::omero::model::ScreenPlateLinkPtr& link, bool bothSides, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addScreenPlateLinkToBoth(link, bothSides, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addScreenPlateLinkToBoth(const ::omero::model::ScreenPlateLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addScreenPlateLinkToBoth(link, bothSides, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addScreenPlateLinkToBoth(const ::omero::model::ScreenPlateLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addScreenPlateLinkToBoth(link, bothSides, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addScreenPlateLinkToBoth(const ::omero::model::ScreenPlateLinkPtr& link, bool bothSides)
    {
        return begin_addScreenPlateLinkToBoth(link, bothSides, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addScreenPlateLinkToBoth(const ::omero::model::ScreenPlateLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        return begin_addScreenPlateLinkToBoth(link, bothSides, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addScreenPlateLinkToBoth(const ::omero::model::ScreenPlateLinkPtr& link, bool bothSides, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addScreenPlateLinkToBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addScreenPlateLinkToBoth(const ::omero::model::ScreenPlateLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addScreenPlateLinkToBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addScreenPlateLinkToBoth(const ::omero::model::ScreenPlateLinkPtr& link, bool bothSides, const ::omero::model::Callback_Plate_addScreenPlateLinkToBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addScreenPlateLinkToBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addScreenPlateLinkToBoth(const ::omero::model::ScreenPlateLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_addScreenPlateLinkToBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addScreenPlateLinkToBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    void end_addScreenPlateLinkToBoth(const ::Ice::AsyncResultPtr&);
    
private:

    void addScreenPlateLinkToBoth(const ::omero::model::ScreenPlateLinkPtr&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addScreenPlateLinkToBoth(const ::omero::model::ScreenPlateLinkPtr&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::PlateScreenLinksSeq findScreenPlateLink(const ::omero::model::ScreenPtr& removal)
    {
        return findScreenPlateLink(removal, 0);
    }
    ::omero::model::PlateScreenLinksSeq findScreenPlateLink(const ::omero::model::ScreenPtr& removal, const ::Ice::Context& __ctx)
    {
        return findScreenPlateLink(removal, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_findScreenPlateLink(const ::omero::model::ScreenPtr& removal, const ::IceInternal::Function<void (const ::omero::model::PlateScreenLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_findScreenPlateLink(removal, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_findScreenPlateLink(const ::omero::model::ScreenPtr& removal, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_findScreenPlateLink(removal, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_findScreenPlateLink(const ::omero::model::ScreenPtr& removal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::PlateScreenLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_findScreenPlateLink(removal, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_findScreenPlateLink(const ::omero::model::ScreenPtr& removal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_findScreenPlateLink(removal, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_findScreenPlateLink(const ::omero::model::ScreenPtr& removal, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::PlateScreenLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::PlateScreenLinksSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
                ::omero::model::PlateScreenLinksSeq __ret;
                try
                {
                    __ret = __proxy->end_findScreenPlateLink(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::PlateScreenLinksSeq&)> _response;
        };
        return begin_findScreenPlateLink(removal, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_findScreenPlateLink(const ::omero::model::ScreenPtr& removal)
    {
        return begin_findScreenPlateLink(removal, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findScreenPlateLink(const ::omero::model::ScreenPtr& removal, const ::Ice::Context& __ctx)
    {
        return begin_findScreenPlateLink(removal, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findScreenPlateLink(const ::omero::model::ScreenPtr& removal, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findScreenPlateLink(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findScreenPlateLink(const ::omero::model::ScreenPtr& removal, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findScreenPlateLink(removal, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findScreenPlateLink(const ::omero::model::ScreenPtr& removal, const ::omero::model::Callback_Plate_findScreenPlateLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findScreenPlateLink(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findScreenPlateLink(const ::omero::model::ScreenPtr& removal, const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_findScreenPlateLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findScreenPlateLink(removal, &__ctx, __del, __cookie);
    }

    ::omero::model::PlateScreenLinksSeq end_findScreenPlateLink(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::PlateScreenLinksSeq findScreenPlateLink(const ::omero::model::ScreenPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_findScreenPlateLink(const ::omero::model::ScreenPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unlinkScreen(const ::omero::model::ScreenPtr& removal)
    {
        unlinkScreen(removal, 0);
    }
    void unlinkScreen(const ::omero::model::ScreenPtr& removal, const ::Ice::Context& __ctx)
    {
        unlinkScreen(removal, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_unlinkScreen(const ::omero::model::ScreenPtr& removal, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unlinkScreen(removal, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_unlinkScreen(const ::omero::model::ScreenPtr& removal, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unlinkScreen(removal, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unlinkScreen(const ::omero::model::ScreenPtr& removal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unlinkScreen(removal, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unlinkScreen(const ::omero::model::ScreenPtr& removal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unlinkScreen(removal, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_unlinkScreen(const ::omero::model::ScreenPtr& removal)
    {
        return begin_unlinkScreen(removal, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unlinkScreen(const ::omero::model::ScreenPtr& removal, const ::Ice::Context& __ctx)
    {
        return begin_unlinkScreen(removal, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unlinkScreen(const ::omero::model::ScreenPtr& removal, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkScreen(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkScreen(const ::omero::model::ScreenPtr& removal, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkScreen(removal, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkScreen(const ::omero::model::ScreenPtr& removal, const ::omero::model::Callback_Plate_unlinkScreenPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkScreen(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkScreen(const ::omero::model::ScreenPtr& removal, const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_unlinkScreenPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkScreen(removal, &__ctx, __del, __cookie);
    }

    void end_unlinkScreen(const ::Ice::AsyncResultPtr&);
    
private:

    void unlinkScreen(const ::omero::model::ScreenPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unlinkScreen(const ::omero::model::ScreenPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeScreenPlateLinkFromBoth(const ::omero::model::ScreenPlateLinkPtr& link, bool bothSides)
    {
        removeScreenPlateLinkFromBoth(link, bothSides, 0);
    }
    void removeScreenPlateLinkFromBoth(const ::omero::model::ScreenPlateLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        removeScreenPlateLinkFromBoth(link, bothSides, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeScreenPlateLinkFromBoth(const ::omero::model::ScreenPlateLinkPtr& link, bool bothSides, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeScreenPlateLinkFromBoth(link, bothSides, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeScreenPlateLinkFromBoth(const ::omero::model::ScreenPlateLinkPtr& link, bool bothSides, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeScreenPlateLinkFromBoth(link, bothSides, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeScreenPlateLinkFromBoth(const ::omero::model::ScreenPlateLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeScreenPlateLinkFromBoth(link, bothSides, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeScreenPlateLinkFromBoth(const ::omero::model::ScreenPlateLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeScreenPlateLinkFromBoth(link, bothSides, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeScreenPlateLinkFromBoth(const ::omero::model::ScreenPlateLinkPtr& link, bool bothSides)
    {
        return begin_removeScreenPlateLinkFromBoth(link, bothSides, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeScreenPlateLinkFromBoth(const ::omero::model::ScreenPlateLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        return begin_removeScreenPlateLinkFromBoth(link, bothSides, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeScreenPlateLinkFromBoth(const ::omero::model::ScreenPlateLinkPtr& link, bool bothSides, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeScreenPlateLinkFromBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeScreenPlateLinkFromBoth(const ::omero::model::ScreenPlateLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeScreenPlateLinkFromBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeScreenPlateLinkFromBoth(const ::omero::model::ScreenPlateLinkPtr& link, bool bothSides, const ::omero::model::Callback_Plate_removeScreenPlateLinkFromBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeScreenPlateLinkFromBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeScreenPlateLinkFromBoth(const ::omero::model::ScreenPlateLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_removeScreenPlateLinkFromBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeScreenPlateLinkFromBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    void end_removeScreenPlateLinkFromBoth(const ::Ice::AsyncResultPtr&);
    
private:

    void removeScreenPlateLinkFromBoth(const ::omero::model::ScreenPlateLinkPtr&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeScreenPlateLinkFromBoth(const ::omero::model::ScreenPlateLinkPtr&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::PlateLinkedScreenSeq linkedScreenList()
    {
        return linkedScreenList(0);
    }
    ::omero::model::PlateLinkedScreenSeq linkedScreenList(const ::Ice::Context& __ctx)
    {
        return linkedScreenList(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_linkedScreenList(const ::IceInternal::Function<void (const ::omero::model::PlateLinkedScreenSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_linkedScreenList(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_linkedScreenList(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_linkedScreenList(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_linkedScreenList(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::PlateLinkedScreenSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_linkedScreenList(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_linkedScreenList(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_linkedScreenList(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_linkedScreenList(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::PlateLinkedScreenSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::PlateLinkedScreenSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
                ::omero::model::PlateLinkedScreenSeq __ret;
                try
                {
                    __ret = __proxy->end_linkedScreenList(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::PlateLinkedScreenSeq&)> _response;
        };
        return begin_linkedScreenList(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_linkedScreenList()
    {
        return begin_linkedScreenList(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkedScreenList(const ::Ice::Context& __ctx)
    {
        return begin_linkedScreenList(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkedScreenList(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedScreenList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedScreenList(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedScreenList(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedScreenList(const ::omero::model::Callback_Plate_linkedScreenListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedScreenList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedScreenList(const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_linkedScreenListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedScreenList(&__ctx, __del, __cookie);
    }

    ::omero::model::PlateLinkedScreenSeq end_linkedScreenList(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::PlateLinkedScreenSeq linkedScreenList(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_linkedScreenList(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unloadWells()
    {
        unloadWells(0);
    }
    void unloadWells(const ::Ice::Context& __ctx)
    {
        unloadWells(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_unloadWells(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unloadWells(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_unloadWells(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unloadWells(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unloadWells(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unloadWells(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unloadWells(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unloadWells(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_unloadWells()
    {
        return begin_unloadWells(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadWells(const ::Ice::Context& __ctx)
    {
        return begin_unloadWells(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadWells(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadWells(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadWells(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadWells(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadWells(const ::omero::model::Callback_Plate_unloadWellsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadWells(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadWells(const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_unloadWellsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadWells(&__ctx, __del, __cookie);
    }

    void end_unloadWells(const ::Ice::AsyncResultPtr&);
    
private:

    void unloadWells(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unloadWells(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int sizeOfWells()
    {
        return sizeOfWells(0);
    }
    ::Ice::Int sizeOfWells(const ::Ice::Context& __ctx)
    {
        return sizeOfWells(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_sizeOfWells(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sizeOfWells(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfWells(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sizeOfWells(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfWells(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sizeOfWells(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfWells(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sizeOfWells(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_sizeOfWells(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_sizeOfWells(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_sizeOfWells(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_sizeOfWells()
    {
        return begin_sizeOfWells(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfWells(const ::Ice::Context& __ctx)
    {
        return begin_sizeOfWells(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfWells(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfWells(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfWells(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfWells(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfWells(const ::omero::model::Callback_Plate_sizeOfWellsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfWells(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfWells(const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_sizeOfWellsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfWells(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_sizeOfWells(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int sizeOfWells(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sizeOfWells(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::PlateWellsSeq copyWells()
    {
        return copyWells(0);
    }
    ::omero::model::PlateWellsSeq copyWells(const ::Ice::Context& __ctx)
    {
        return copyWells(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_copyWells(const ::IceInternal::Function<void (const ::omero::model::PlateWellsSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_copyWells(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_copyWells(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_copyWells(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_copyWells(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::PlateWellsSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_copyWells(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_copyWells(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_copyWells(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_copyWells(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::PlateWellsSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::PlateWellsSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
                ::omero::model::PlateWellsSeq __ret;
                try
                {
                    __ret = __proxy->end_copyWells(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::PlateWellsSeq&)> _response;
        };
        return begin_copyWells(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_copyWells()
    {
        return begin_copyWells(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyWells(const ::Ice::Context& __ctx)
    {
        return begin_copyWells(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyWells(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyWells(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyWells(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyWells(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyWells(const ::omero::model::Callback_Plate_copyWellsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyWells(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyWells(const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_copyWellsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyWells(&__ctx, __del, __cookie);
    }

    ::omero::model::PlateWellsSeq end_copyWells(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::PlateWellsSeq copyWells(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_copyWells(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addWell(const ::omero::model::WellPtr& target)
    {
        addWell(target, 0);
    }
    void addWell(const ::omero::model::WellPtr& target, const ::Ice::Context& __ctx)
    {
        addWell(target, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addWell(const ::omero::model::WellPtr& target, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addWell(target, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addWell(const ::omero::model::WellPtr& target, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addWell(target, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addWell(const ::omero::model::WellPtr& target, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addWell(target, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addWell(const ::omero::model::WellPtr& target, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addWell(target, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addWell(const ::omero::model::WellPtr& target)
    {
        return begin_addWell(target, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addWell(const ::omero::model::WellPtr& target, const ::Ice::Context& __ctx)
    {
        return begin_addWell(target, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addWell(const ::omero::model::WellPtr& target, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addWell(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addWell(const ::omero::model::WellPtr& target, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addWell(target, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addWell(const ::omero::model::WellPtr& target, const ::omero::model::Callback_Plate_addWellPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addWell(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addWell(const ::omero::model::WellPtr& target, const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_addWellPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addWell(target, &__ctx, __del, __cookie);
    }

    void end_addWell(const ::Ice::AsyncResultPtr&);
    
private:

    void addWell(const ::omero::model::WellPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addWell(const ::omero::model::WellPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addAllWellSet(const ::omero::model::PlateWellsSeq& targets)
    {
        addAllWellSet(targets, 0);
    }
    void addAllWellSet(const ::omero::model::PlateWellsSeq& targets, const ::Ice::Context& __ctx)
    {
        addAllWellSet(targets, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addAllWellSet(const ::omero::model::PlateWellsSeq& targets, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addAllWellSet(targets, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addAllWellSet(const ::omero::model::PlateWellsSeq& targets, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addAllWellSet(targets, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addAllWellSet(const ::omero::model::PlateWellsSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addAllWellSet(targets, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addAllWellSet(const ::omero::model::PlateWellsSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addAllWellSet(targets, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addAllWellSet(const ::omero::model::PlateWellsSeq& targets)
    {
        return begin_addAllWellSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllWellSet(const ::omero::model::PlateWellsSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_addAllWellSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllWellSet(const ::omero::model::PlateWellsSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllWellSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllWellSet(const ::omero::model::PlateWellsSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllWellSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllWellSet(const ::omero::model::PlateWellsSeq& targets, const ::omero::model::Callback_Plate_addAllWellSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllWellSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllWellSet(const ::omero::model::PlateWellsSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_addAllWellSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllWellSet(targets, &__ctx, __del, __cookie);
    }

    void end_addAllWellSet(const ::Ice::AsyncResultPtr&);
    
private:

    void addAllWellSet(const ::omero::model::PlateWellsSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addAllWellSet(const ::omero::model::PlateWellsSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeWell(const ::omero::model::WellPtr& theTarget)
    {
        removeWell(theTarget, 0);
    }
    void removeWell(const ::omero::model::WellPtr& theTarget, const ::Ice::Context& __ctx)
    {
        removeWell(theTarget, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeWell(const ::omero::model::WellPtr& theTarget, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeWell(theTarget, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeWell(const ::omero::model::WellPtr& theTarget, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeWell(theTarget, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeWell(const ::omero::model::WellPtr& theTarget, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeWell(theTarget, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeWell(const ::omero::model::WellPtr& theTarget, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeWell(theTarget, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeWell(const ::omero::model::WellPtr& theTarget)
    {
        return begin_removeWell(theTarget, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeWell(const ::omero::model::WellPtr& theTarget, const ::Ice::Context& __ctx)
    {
        return begin_removeWell(theTarget, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeWell(const ::omero::model::WellPtr& theTarget, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeWell(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeWell(const ::omero::model::WellPtr& theTarget, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeWell(theTarget, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeWell(const ::omero::model::WellPtr& theTarget, const ::omero::model::Callback_Plate_removeWellPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeWell(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeWell(const ::omero::model::WellPtr& theTarget, const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_removeWellPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeWell(theTarget, &__ctx, __del, __cookie);
    }

    void end_removeWell(const ::Ice::AsyncResultPtr&);
    
private:

    void removeWell(const ::omero::model::WellPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeWell(const ::omero::model::WellPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeAllWellSet(const ::omero::model::PlateWellsSeq& targets)
    {
        removeAllWellSet(targets, 0);
    }
    void removeAllWellSet(const ::omero::model::PlateWellsSeq& targets, const ::Ice::Context& __ctx)
    {
        removeAllWellSet(targets, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeAllWellSet(const ::omero::model::PlateWellsSeq& targets, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeAllWellSet(targets, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeAllWellSet(const ::omero::model::PlateWellsSeq& targets, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeAllWellSet(targets, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeAllWellSet(const ::omero::model::PlateWellsSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeAllWellSet(targets, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeAllWellSet(const ::omero::model::PlateWellsSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeAllWellSet(targets, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeAllWellSet(const ::omero::model::PlateWellsSeq& targets)
    {
        return begin_removeAllWellSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllWellSet(const ::omero::model::PlateWellsSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_removeAllWellSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllWellSet(const ::omero::model::PlateWellsSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllWellSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllWellSet(const ::omero::model::PlateWellsSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllWellSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllWellSet(const ::omero::model::PlateWellsSeq& targets, const ::omero::model::Callback_Plate_removeAllWellSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllWellSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllWellSet(const ::omero::model::PlateWellsSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_removeAllWellSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllWellSet(targets, &__ctx, __del, __cookie);
    }

    void end_removeAllWellSet(const ::Ice::AsyncResultPtr&);
    
private:

    void removeAllWellSet(const ::omero::model::PlateWellsSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeAllWellSet(const ::omero::model::PlateWellsSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void clearWells()
    {
        clearWells(0);
    }
    void clearWells(const ::Ice::Context& __ctx)
    {
        clearWells(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_clearWells(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_clearWells(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_clearWells(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_clearWells(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_clearWells(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_clearWells(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_clearWells(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_clearWells(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_clearWells()
    {
        return begin_clearWells(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearWells(const ::Ice::Context& __ctx)
    {
        return begin_clearWells(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearWells(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearWells(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearWells(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearWells(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearWells(const ::omero::model::Callback_Plate_clearWellsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearWells(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearWells(const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_clearWellsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearWells(&__ctx, __del, __cookie);
    }

    void end_clearWells(const ::Ice::AsyncResultPtr&);
    
private:

    void clearWells(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_clearWells(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reloadWells(const ::omero::model::PlatePtr& toCopy)
    {
        reloadWells(toCopy, 0);
    }
    void reloadWells(const ::omero::model::PlatePtr& toCopy, const ::Ice::Context& __ctx)
    {
        reloadWells(toCopy, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_reloadWells(const ::omero::model::PlatePtr& toCopy, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reloadWells(toCopy, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_reloadWells(const ::omero::model::PlatePtr& toCopy, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reloadWells(toCopy, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reloadWells(const ::omero::model::PlatePtr& toCopy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reloadWells(toCopy, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reloadWells(const ::omero::model::PlatePtr& toCopy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reloadWells(toCopy, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_reloadWells(const ::omero::model::PlatePtr& toCopy)
    {
        return begin_reloadWells(toCopy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadWells(const ::omero::model::PlatePtr& toCopy, const ::Ice::Context& __ctx)
    {
        return begin_reloadWells(toCopy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadWells(const ::omero::model::PlatePtr& toCopy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadWells(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadWells(const ::omero::model::PlatePtr& toCopy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadWells(toCopy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadWells(const ::omero::model::PlatePtr& toCopy, const ::omero::model::Callback_Plate_reloadWellsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadWells(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadWells(const ::omero::model::PlatePtr& toCopy, const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_reloadWellsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadWells(toCopy, &__ctx, __del, __cookie);
    }

    void end_reloadWells(const ::Ice::AsyncResultPtr&);
    
private:

    void reloadWells(const ::omero::model::PlatePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reloadWells(const ::omero::model::PlatePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unloadPlateAcquisitions()
    {
        unloadPlateAcquisitions(0);
    }
    void unloadPlateAcquisitions(const ::Ice::Context& __ctx)
    {
        unloadPlateAcquisitions(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_unloadPlateAcquisitions(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unloadPlateAcquisitions(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_unloadPlateAcquisitions(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unloadPlateAcquisitions(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unloadPlateAcquisitions(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unloadPlateAcquisitions(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unloadPlateAcquisitions(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unloadPlateAcquisitions(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_unloadPlateAcquisitions()
    {
        return begin_unloadPlateAcquisitions(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadPlateAcquisitions(const ::Ice::Context& __ctx)
    {
        return begin_unloadPlateAcquisitions(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadPlateAcquisitions(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadPlateAcquisitions(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadPlateAcquisitions(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadPlateAcquisitions(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadPlateAcquisitions(const ::omero::model::Callback_Plate_unloadPlateAcquisitionsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadPlateAcquisitions(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadPlateAcquisitions(const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_unloadPlateAcquisitionsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadPlateAcquisitions(&__ctx, __del, __cookie);
    }

    void end_unloadPlateAcquisitions(const ::Ice::AsyncResultPtr&);
    
private:

    void unloadPlateAcquisitions(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unloadPlateAcquisitions(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int sizeOfPlateAcquisitions()
    {
        return sizeOfPlateAcquisitions(0);
    }
    ::Ice::Int sizeOfPlateAcquisitions(const ::Ice::Context& __ctx)
    {
        return sizeOfPlateAcquisitions(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_sizeOfPlateAcquisitions(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sizeOfPlateAcquisitions(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfPlateAcquisitions(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sizeOfPlateAcquisitions(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfPlateAcquisitions(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sizeOfPlateAcquisitions(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfPlateAcquisitions(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sizeOfPlateAcquisitions(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_sizeOfPlateAcquisitions(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_sizeOfPlateAcquisitions(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_sizeOfPlateAcquisitions(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_sizeOfPlateAcquisitions()
    {
        return begin_sizeOfPlateAcquisitions(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfPlateAcquisitions(const ::Ice::Context& __ctx)
    {
        return begin_sizeOfPlateAcquisitions(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfPlateAcquisitions(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfPlateAcquisitions(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfPlateAcquisitions(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfPlateAcquisitions(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfPlateAcquisitions(const ::omero::model::Callback_Plate_sizeOfPlateAcquisitionsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfPlateAcquisitions(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfPlateAcquisitions(const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_sizeOfPlateAcquisitionsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfPlateAcquisitions(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_sizeOfPlateAcquisitions(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int sizeOfPlateAcquisitions(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sizeOfPlateAcquisitions(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::PlatePlateAcquisitionsSeq copyPlateAcquisitions()
    {
        return copyPlateAcquisitions(0);
    }
    ::omero::model::PlatePlateAcquisitionsSeq copyPlateAcquisitions(const ::Ice::Context& __ctx)
    {
        return copyPlateAcquisitions(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_copyPlateAcquisitions(const ::IceInternal::Function<void (const ::omero::model::PlatePlateAcquisitionsSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_copyPlateAcquisitions(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_copyPlateAcquisitions(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_copyPlateAcquisitions(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_copyPlateAcquisitions(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::PlatePlateAcquisitionsSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_copyPlateAcquisitions(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_copyPlateAcquisitions(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_copyPlateAcquisitions(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_copyPlateAcquisitions(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::PlatePlateAcquisitionsSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::PlatePlateAcquisitionsSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
                ::omero::model::PlatePlateAcquisitionsSeq __ret;
                try
                {
                    __ret = __proxy->end_copyPlateAcquisitions(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::PlatePlateAcquisitionsSeq&)> _response;
        };
        return begin_copyPlateAcquisitions(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_copyPlateAcquisitions()
    {
        return begin_copyPlateAcquisitions(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyPlateAcquisitions(const ::Ice::Context& __ctx)
    {
        return begin_copyPlateAcquisitions(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyPlateAcquisitions(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyPlateAcquisitions(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyPlateAcquisitions(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyPlateAcquisitions(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyPlateAcquisitions(const ::omero::model::Callback_Plate_copyPlateAcquisitionsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyPlateAcquisitions(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyPlateAcquisitions(const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_copyPlateAcquisitionsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyPlateAcquisitions(&__ctx, __del, __cookie);
    }

    ::omero::model::PlatePlateAcquisitionsSeq end_copyPlateAcquisitions(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::PlatePlateAcquisitionsSeq copyPlateAcquisitions(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_copyPlateAcquisitions(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addPlateAcquisition(const ::omero::model::PlateAcquisitionPtr& target)
    {
        addPlateAcquisition(target, 0);
    }
    void addPlateAcquisition(const ::omero::model::PlateAcquisitionPtr& target, const ::Ice::Context& __ctx)
    {
        addPlateAcquisition(target, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addPlateAcquisition(const ::omero::model::PlateAcquisitionPtr& target, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addPlateAcquisition(target, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addPlateAcquisition(const ::omero::model::PlateAcquisitionPtr& target, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addPlateAcquisition(target, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addPlateAcquisition(const ::omero::model::PlateAcquisitionPtr& target, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addPlateAcquisition(target, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addPlateAcquisition(const ::omero::model::PlateAcquisitionPtr& target, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addPlateAcquisition(target, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addPlateAcquisition(const ::omero::model::PlateAcquisitionPtr& target)
    {
        return begin_addPlateAcquisition(target, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addPlateAcquisition(const ::omero::model::PlateAcquisitionPtr& target, const ::Ice::Context& __ctx)
    {
        return begin_addPlateAcquisition(target, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addPlateAcquisition(const ::omero::model::PlateAcquisitionPtr& target, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPlateAcquisition(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addPlateAcquisition(const ::omero::model::PlateAcquisitionPtr& target, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPlateAcquisition(target, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addPlateAcquisition(const ::omero::model::PlateAcquisitionPtr& target, const ::omero::model::Callback_Plate_addPlateAcquisitionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPlateAcquisition(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addPlateAcquisition(const ::omero::model::PlateAcquisitionPtr& target, const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_addPlateAcquisitionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPlateAcquisition(target, &__ctx, __del, __cookie);
    }

    void end_addPlateAcquisition(const ::Ice::AsyncResultPtr&);
    
private:

    void addPlateAcquisition(const ::omero::model::PlateAcquisitionPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addPlateAcquisition(const ::omero::model::PlateAcquisitionPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addAllPlateAcquisitionSet(const ::omero::model::PlatePlateAcquisitionsSeq& targets)
    {
        addAllPlateAcquisitionSet(targets, 0);
    }
    void addAllPlateAcquisitionSet(const ::omero::model::PlatePlateAcquisitionsSeq& targets, const ::Ice::Context& __ctx)
    {
        addAllPlateAcquisitionSet(targets, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addAllPlateAcquisitionSet(const ::omero::model::PlatePlateAcquisitionsSeq& targets, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addAllPlateAcquisitionSet(targets, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addAllPlateAcquisitionSet(const ::omero::model::PlatePlateAcquisitionsSeq& targets, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addAllPlateAcquisitionSet(targets, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addAllPlateAcquisitionSet(const ::omero::model::PlatePlateAcquisitionsSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addAllPlateAcquisitionSet(targets, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addAllPlateAcquisitionSet(const ::omero::model::PlatePlateAcquisitionsSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addAllPlateAcquisitionSet(targets, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addAllPlateAcquisitionSet(const ::omero::model::PlatePlateAcquisitionsSeq& targets)
    {
        return begin_addAllPlateAcquisitionSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllPlateAcquisitionSet(const ::omero::model::PlatePlateAcquisitionsSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_addAllPlateAcquisitionSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllPlateAcquisitionSet(const ::omero::model::PlatePlateAcquisitionsSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllPlateAcquisitionSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllPlateAcquisitionSet(const ::omero::model::PlatePlateAcquisitionsSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllPlateAcquisitionSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllPlateAcquisitionSet(const ::omero::model::PlatePlateAcquisitionsSeq& targets, const ::omero::model::Callback_Plate_addAllPlateAcquisitionSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllPlateAcquisitionSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllPlateAcquisitionSet(const ::omero::model::PlatePlateAcquisitionsSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_addAllPlateAcquisitionSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllPlateAcquisitionSet(targets, &__ctx, __del, __cookie);
    }

    void end_addAllPlateAcquisitionSet(const ::Ice::AsyncResultPtr&);
    
private:

    void addAllPlateAcquisitionSet(const ::omero::model::PlatePlateAcquisitionsSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addAllPlateAcquisitionSet(const ::omero::model::PlatePlateAcquisitionsSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removePlateAcquisition(const ::omero::model::PlateAcquisitionPtr& theTarget)
    {
        removePlateAcquisition(theTarget, 0);
    }
    void removePlateAcquisition(const ::omero::model::PlateAcquisitionPtr& theTarget, const ::Ice::Context& __ctx)
    {
        removePlateAcquisition(theTarget, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removePlateAcquisition(const ::omero::model::PlateAcquisitionPtr& theTarget, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removePlateAcquisition(theTarget, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removePlateAcquisition(const ::omero::model::PlateAcquisitionPtr& theTarget, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removePlateAcquisition(theTarget, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removePlateAcquisition(const ::omero::model::PlateAcquisitionPtr& theTarget, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removePlateAcquisition(theTarget, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removePlateAcquisition(const ::omero::model::PlateAcquisitionPtr& theTarget, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removePlateAcquisition(theTarget, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removePlateAcquisition(const ::omero::model::PlateAcquisitionPtr& theTarget)
    {
        return begin_removePlateAcquisition(theTarget, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removePlateAcquisition(const ::omero::model::PlateAcquisitionPtr& theTarget, const ::Ice::Context& __ctx)
    {
        return begin_removePlateAcquisition(theTarget, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removePlateAcquisition(const ::omero::model::PlateAcquisitionPtr& theTarget, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removePlateAcquisition(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removePlateAcquisition(const ::omero::model::PlateAcquisitionPtr& theTarget, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removePlateAcquisition(theTarget, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removePlateAcquisition(const ::omero::model::PlateAcquisitionPtr& theTarget, const ::omero::model::Callback_Plate_removePlateAcquisitionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removePlateAcquisition(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removePlateAcquisition(const ::omero::model::PlateAcquisitionPtr& theTarget, const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_removePlateAcquisitionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removePlateAcquisition(theTarget, &__ctx, __del, __cookie);
    }

    void end_removePlateAcquisition(const ::Ice::AsyncResultPtr&);
    
private:

    void removePlateAcquisition(const ::omero::model::PlateAcquisitionPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removePlateAcquisition(const ::omero::model::PlateAcquisitionPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeAllPlateAcquisitionSet(const ::omero::model::PlatePlateAcquisitionsSeq& targets)
    {
        removeAllPlateAcquisitionSet(targets, 0);
    }
    void removeAllPlateAcquisitionSet(const ::omero::model::PlatePlateAcquisitionsSeq& targets, const ::Ice::Context& __ctx)
    {
        removeAllPlateAcquisitionSet(targets, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeAllPlateAcquisitionSet(const ::omero::model::PlatePlateAcquisitionsSeq& targets, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeAllPlateAcquisitionSet(targets, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeAllPlateAcquisitionSet(const ::omero::model::PlatePlateAcquisitionsSeq& targets, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeAllPlateAcquisitionSet(targets, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeAllPlateAcquisitionSet(const ::omero::model::PlatePlateAcquisitionsSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeAllPlateAcquisitionSet(targets, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeAllPlateAcquisitionSet(const ::omero::model::PlatePlateAcquisitionsSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeAllPlateAcquisitionSet(targets, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeAllPlateAcquisitionSet(const ::omero::model::PlatePlateAcquisitionsSeq& targets)
    {
        return begin_removeAllPlateAcquisitionSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllPlateAcquisitionSet(const ::omero::model::PlatePlateAcquisitionsSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_removeAllPlateAcquisitionSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllPlateAcquisitionSet(const ::omero::model::PlatePlateAcquisitionsSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllPlateAcquisitionSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllPlateAcquisitionSet(const ::omero::model::PlatePlateAcquisitionsSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllPlateAcquisitionSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllPlateAcquisitionSet(const ::omero::model::PlatePlateAcquisitionsSeq& targets, const ::omero::model::Callback_Plate_removeAllPlateAcquisitionSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllPlateAcquisitionSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllPlateAcquisitionSet(const ::omero::model::PlatePlateAcquisitionsSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_removeAllPlateAcquisitionSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllPlateAcquisitionSet(targets, &__ctx, __del, __cookie);
    }

    void end_removeAllPlateAcquisitionSet(const ::Ice::AsyncResultPtr&);
    
private:

    void removeAllPlateAcquisitionSet(const ::omero::model::PlatePlateAcquisitionsSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeAllPlateAcquisitionSet(const ::omero::model::PlatePlateAcquisitionsSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void clearPlateAcquisitions()
    {
        clearPlateAcquisitions(0);
    }
    void clearPlateAcquisitions(const ::Ice::Context& __ctx)
    {
        clearPlateAcquisitions(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_clearPlateAcquisitions(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_clearPlateAcquisitions(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_clearPlateAcquisitions(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_clearPlateAcquisitions(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_clearPlateAcquisitions(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_clearPlateAcquisitions(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_clearPlateAcquisitions(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_clearPlateAcquisitions(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_clearPlateAcquisitions()
    {
        return begin_clearPlateAcquisitions(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearPlateAcquisitions(const ::Ice::Context& __ctx)
    {
        return begin_clearPlateAcquisitions(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearPlateAcquisitions(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearPlateAcquisitions(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearPlateAcquisitions(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearPlateAcquisitions(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearPlateAcquisitions(const ::omero::model::Callback_Plate_clearPlateAcquisitionsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearPlateAcquisitions(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearPlateAcquisitions(const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_clearPlateAcquisitionsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearPlateAcquisitions(&__ctx, __del, __cookie);
    }

    void end_clearPlateAcquisitions(const ::Ice::AsyncResultPtr&);
    
private:

    void clearPlateAcquisitions(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_clearPlateAcquisitions(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reloadPlateAcquisitions(const ::omero::model::PlatePtr& toCopy)
    {
        reloadPlateAcquisitions(toCopy, 0);
    }
    void reloadPlateAcquisitions(const ::omero::model::PlatePtr& toCopy, const ::Ice::Context& __ctx)
    {
        reloadPlateAcquisitions(toCopy, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_reloadPlateAcquisitions(const ::omero::model::PlatePtr& toCopy, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reloadPlateAcquisitions(toCopy, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_reloadPlateAcquisitions(const ::omero::model::PlatePtr& toCopy, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reloadPlateAcquisitions(toCopy, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reloadPlateAcquisitions(const ::omero::model::PlatePtr& toCopy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reloadPlateAcquisitions(toCopy, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reloadPlateAcquisitions(const ::omero::model::PlatePtr& toCopy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reloadPlateAcquisitions(toCopy, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_reloadPlateAcquisitions(const ::omero::model::PlatePtr& toCopy)
    {
        return begin_reloadPlateAcquisitions(toCopy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadPlateAcquisitions(const ::omero::model::PlatePtr& toCopy, const ::Ice::Context& __ctx)
    {
        return begin_reloadPlateAcquisitions(toCopy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadPlateAcquisitions(const ::omero::model::PlatePtr& toCopy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadPlateAcquisitions(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadPlateAcquisitions(const ::omero::model::PlatePtr& toCopy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadPlateAcquisitions(toCopy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadPlateAcquisitions(const ::omero::model::PlatePtr& toCopy, const ::omero::model::Callback_Plate_reloadPlateAcquisitionsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadPlateAcquisitions(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadPlateAcquisitions(const ::omero::model::PlatePtr& toCopy, const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_reloadPlateAcquisitionsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadPlateAcquisitions(toCopy, &__ctx, __del, __cookie);
    }

    void end_reloadPlateAcquisitions(const ::Ice::AsyncResultPtr&);
    
private:

    void reloadPlateAcquisitions(const ::omero::model::PlatePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reloadPlateAcquisitions(const ::omero::model::PlatePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unloadAnnotationLinks()
    {
        unloadAnnotationLinks(0);
    }
    void unloadAnnotationLinks(const ::Ice::Context& __ctx)
    {
        unloadAnnotationLinks(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_unloadAnnotationLinks(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unloadAnnotationLinks(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_unloadAnnotationLinks(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unloadAnnotationLinks(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unloadAnnotationLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unloadAnnotationLinks(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unloadAnnotationLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unloadAnnotationLinks(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks()
    {
        return begin_unloadAnnotationLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return begin_unloadAnnotationLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::omero::model::Callback_Plate_unloadAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_unloadAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadAnnotationLinks(&__ctx, __del, __cookie);
    }

    void end_unloadAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    void unloadAnnotationLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int sizeOfAnnotationLinks()
    {
        return sizeOfAnnotationLinks(0);
    }
    ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return sizeOfAnnotationLinks(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_sizeOfAnnotationLinks(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sizeOfAnnotationLinks(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfAnnotationLinks(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sizeOfAnnotationLinks(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfAnnotationLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sizeOfAnnotationLinks(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfAnnotationLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sizeOfAnnotationLinks(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_sizeOfAnnotationLinks(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_sizeOfAnnotationLinks(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_sizeOfAnnotationLinks(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks()
    {
        return begin_sizeOfAnnotationLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return begin_sizeOfAnnotationLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::omero::model::Callback_Plate_sizeOfAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_sizeOfAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_sizeOfAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::PlateAnnotationLinksSeq copyAnnotationLinks()
    {
        return copyAnnotationLinks(0);
    }
    ::omero::model::PlateAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return copyAnnotationLinks(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_copyAnnotationLinks(const ::IceInternal::Function<void (const ::omero::model::PlateAnnotationLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_copyAnnotationLinks(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_copyAnnotationLinks(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_copyAnnotationLinks(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_copyAnnotationLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::PlateAnnotationLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_copyAnnotationLinks(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_copyAnnotationLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_copyAnnotationLinks(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_copyAnnotationLinks(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::PlateAnnotationLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::PlateAnnotationLinksSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
                ::omero::model::PlateAnnotationLinksSeq __ret;
                try
                {
                    __ret = __proxy->end_copyAnnotationLinks(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::PlateAnnotationLinksSeq&)> _response;
        };
        return begin_copyAnnotationLinks(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks()
    {
        return begin_copyAnnotationLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return begin_copyAnnotationLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::omero::model::Callback_Plate_copyAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_copyAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::omero::model::PlateAnnotationLinksSeq end_copyAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::PlateAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addPlateAnnotationLink(const ::omero::model::PlateAnnotationLinkPtr& target)
    {
        addPlateAnnotationLink(target, 0);
    }
    void addPlateAnnotationLink(const ::omero::model::PlateAnnotationLinkPtr& target, const ::Ice::Context& __ctx)
    {
        addPlateAnnotationLink(target, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addPlateAnnotationLink(const ::omero::model::PlateAnnotationLinkPtr& target, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addPlateAnnotationLink(target, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addPlateAnnotationLink(const ::omero::model::PlateAnnotationLinkPtr& target, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addPlateAnnotationLink(target, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addPlateAnnotationLink(const ::omero::model::PlateAnnotationLinkPtr& target, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addPlateAnnotationLink(target, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addPlateAnnotationLink(const ::omero::model::PlateAnnotationLinkPtr& target, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addPlateAnnotationLink(target, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addPlateAnnotationLink(const ::omero::model::PlateAnnotationLinkPtr& target)
    {
        return begin_addPlateAnnotationLink(target, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addPlateAnnotationLink(const ::omero::model::PlateAnnotationLinkPtr& target, const ::Ice::Context& __ctx)
    {
        return begin_addPlateAnnotationLink(target, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addPlateAnnotationLink(const ::omero::model::PlateAnnotationLinkPtr& target, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPlateAnnotationLink(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addPlateAnnotationLink(const ::omero::model::PlateAnnotationLinkPtr& target, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPlateAnnotationLink(target, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addPlateAnnotationLink(const ::omero::model::PlateAnnotationLinkPtr& target, const ::omero::model::Callback_Plate_addPlateAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPlateAnnotationLink(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addPlateAnnotationLink(const ::omero::model::PlateAnnotationLinkPtr& target, const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_addPlateAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPlateAnnotationLink(target, &__ctx, __del, __cookie);
    }

    void end_addPlateAnnotationLink(const ::Ice::AsyncResultPtr&);
    
private:

    void addPlateAnnotationLink(const ::omero::model::PlateAnnotationLinkPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addPlateAnnotationLink(const ::omero::model::PlateAnnotationLinkPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addAllPlateAnnotationLinkSet(const ::omero::model::PlateAnnotationLinksSeq& targets)
    {
        addAllPlateAnnotationLinkSet(targets, 0);
    }
    void addAllPlateAnnotationLinkSet(const ::omero::model::PlateAnnotationLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        addAllPlateAnnotationLinkSet(targets, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addAllPlateAnnotationLinkSet(const ::omero::model::PlateAnnotationLinksSeq& targets, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addAllPlateAnnotationLinkSet(targets, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addAllPlateAnnotationLinkSet(const ::omero::model::PlateAnnotationLinksSeq& targets, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addAllPlateAnnotationLinkSet(targets, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addAllPlateAnnotationLinkSet(const ::omero::model::PlateAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addAllPlateAnnotationLinkSet(targets, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addAllPlateAnnotationLinkSet(const ::omero::model::PlateAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addAllPlateAnnotationLinkSet(targets, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addAllPlateAnnotationLinkSet(const ::omero::model::PlateAnnotationLinksSeq& targets)
    {
        return begin_addAllPlateAnnotationLinkSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllPlateAnnotationLinkSet(const ::omero::model::PlateAnnotationLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_addAllPlateAnnotationLinkSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllPlateAnnotationLinkSet(const ::omero::model::PlateAnnotationLinksSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllPlateAnnotationLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllPlateAnnotationLinkSet(const ::omero::model::PlateAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllPlateAnnotationLinkSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllPlateAnnotationLinkSet(const ::omero::model::PlateAnnotationLinksSeq& targets, const ::omero::model::Callback_Plate_addAllPlateAnnotationLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllPlateAnnotationLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllPlateAnnotationLinkSet(const ::omero::model::PlateAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_addAllPlateAnnotationLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllPlateAnnotationLinkSet(targets, &__ctx, __del, __cookie);
    }

    void end_addAllPlateAnnotationLinkSet(const ::Ice::AsyncResultPtr&);
    
private:

    void addAllPlateAnnotationLinkSet(const ::omero::model::PlateAnnotationLinksSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addAllPlateAnnotationLinkSet(const ::omero::model::PlateAnnotationLinksSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removePlateAnnotationLink(const ::omero::model::PlateAnnotationLinkPtr& theTarget)
    {
        removePlateAnnotationLink(theTarget, 0);
    }
    void removePlateAnnotationLink(const ::omero::model::PlateAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx)
    {
        removePlateAnnotationLink(theTarget, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removePlateAnnotationLink(const ::omero::model::PlateAnnotationLinkPtr& theTarget, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removePlateAnnotationLink(theTarget, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removePlateAnnotationLink(const ::omero::model::PlateAnnotationLinkPtr& theTarget, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removePlateAnnotationLink(theTarget, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removePlateAnnotationLink(const ::omero::model::PlateAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removePlateAnnotationLink(theTarget, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removePlateAnnotationLink(const ::omero::model::PlateAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removePlateAnnotationLink(theTarget, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removePlateAnnotationLink(const ::omero::model::PlateAnnotationLinkPtr& theTarget)
    {
        return begin_removePlateAnnotationLink(theTarget, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removePlateAnnotationLink(const ::omero::model::PlateAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx)
    {
        return begin_removePlateAnnotationLink(theTarget, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removePlateAnnotationLink(const ::omero::model::PlateAnnotationLinkPtr& theTarget, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removePlateAnnotationLink(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removePlateAnnotationLink(const ::omero::model::PlateAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removePlateAnnotationLink(theTarget, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removePlateAnnotationLink(const ::omero::model::PlateAnnotationLinkPtr& theTarget, const ::omero::model::Callback_Plate_removePlateAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removePlateAnnotationLink(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removePlateAnnotationLink(const ::omero::model::PlateAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_removePlateAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removePlateAnnotationLink(theTarget, &__ctx, __del, __cookie);
    }

    void end_removePlateAnnotationLink(const ::Ice::AsyncResultPtr&);
    
private:

    void removePlateAnnotationLink(const ::omero::model::PlateAnnotationLinkPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removePlateAnnotationLink(const ::omero::model::PlateAnnotationLinkPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeAllPlateAnnotationLinkSet(const ::omero::model::PlateAnnotationLinksSeq& targets)
    {
        removeAllPlateAnnotationLinkSet(targets, 0);
    }
    void removeAllPlateAnnotationLinkSet(const ::omero::model::PlateAnnotationLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        removeAllPlateAnnotationLinkSet(targets, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeAllPlateAnnotationLinkSet(const ::omero::model::PlateAnnotationLinksSeq& targets, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeAllPlateAnnotationLinkSet(targets, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeAllPlateAnnotationLinkSet(const ::omero::model::PlateAnnotationLinksSeq& targets, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeAllPlateAnnotationLinkSet(targets, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeAllPlateAnnotationLinkSet(const ::omero::model::PlateAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeAllPlateAnnotationLinkSet(targets, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeAllPlateAnnotationLinkSet(const ::omero::model::PlateAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeAllPlateAnnotationLinkSet(targets, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeAllPlateAnnotationLinkSet(const ::omero::model::PlateAnnotationLinksSeq& targets)
    {
        return begin_removeAllPlateAnnotationLinkSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllPlateAnnotationLinkSet(const ::omero::model::PlateAnnotationLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_removeAllPlateAnnotationLinkSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllPlateAnnotationLinkSet(const ::omero::model::PlateAnnotationLinksSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllPlateAnnotationLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllPlateAnnotationLinkSet(const ::omero::model::PlateAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllPlateAnnotationLinkSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllPlateAnnotationLinkSet(const ::omero::model::PlateAnnotationLinksSeq& targets, const ::omero::model::Callback_Plate_removeAllPlateAnnotationLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllPlateAnnotationLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllPlateAnnotationLinkSet(const ::omero::model::PlateAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_removeAllPlateAnnotationLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllPlateAnnotationLinkSet(targets, &__ctx, __del, __cookie);
    }

    void end_removeAllPlateAnnotationLinkSet(const ::Ice::AsyncResultPtr&);
    
private:

    void removeAllPlateAnnotationLinkSet(const ::omero::model::PlateAnnotationLinksSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeAllPlateAnnotationLinkSet(const ::omero::model::PlateAnnotationLinksSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void clearAnnotationLinks()
    {
        clearAnnotationLinks(0);
    }
    void clearAnnotationLinks(const ::Ice::Context& __ctx)
    {
        clearAnnotationLinks(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_clearAnnotationLinks(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_clearAnnotationLinks(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_clearAnnotationLinks(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_clearAnnotationLinks(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_clearAnnotationLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_clearAnnotationLinks(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_clearAnnotationLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_clearAnnotationLinks(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks()
    {
        return begin_clearAnnotationLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return begin_clearAnnotationLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::omero::model::Callback_Plate_clearAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_clearAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearAnnotationLinks(&__ctx, __del, __cookie);
    }

    void end_clearAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    void clearAnnotationLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reloadAnnotationLinks(const ::omero::model::PlatePtr& toCopy)
    {
        reloadAnnotationLinks(toCopy, 0);
    }
    void reloadAnnotationLinks(const ::omero::model::PlatePtr& toCopy, const ::Ice::Context& __ctx)
    {
        reloadAnnotationLinks(toCopy, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_reloadAnnotationLinks(const ::omero::model::PlatePtr& toCopy, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reloadAnnotationLinks(toCopy, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_reloadAnnotationLinks(const ::omero::model::PlatePtr& toCopy, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reloadAnnotationLinks(toCopy, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reloadAnnotationLinks(const ::omero::model::PlatePtr& toCopy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reloadAnnotationLinks(toCopy, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reloadAnnotationLinks(const ::omero::model::PlatePtr& toCopy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reloadAnnotationLinks(toCopy, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::PlatePtr& toCopy)
    {
        return begin_reloadAnnotationLinks(toCopy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::PlatePtr& toCopy, const ::Ice::Context& __ctx)
    {
        return begin_reloadAnnotationLinks(toCopy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::PlatePtr& toCopy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadAnnotationLinks(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::PlatePtr& toCopy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadAnnotationLinks(toCopy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::PlatePtr& toCopy, const ::omero::model::Callback_Plate_reloadAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadAnnotationLinks(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::PlatePtr& toCopy, const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_reloadAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadAnnotationLinks(toCopy, &__ctx, __del, __cookie);
    }

    void end_reloadAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    void reloadAnnotationLinks(const ::omero::model::PlatePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::PlatePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::sys::CountMap getAnnotationLinksCountPerOwner()
    {
        return getAnnotationLinksCountPerOwner(0);
    }
    ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx)
    {
        return getAnnotationLinksCountPerOwner(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getAnnotationLinksCountPerOwner(const ::IceInternal::Function<void (const ::omero::sys::CountMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAnnotationLinksCountPerOwner(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAnnotationLinksCountPerOwner(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAnnotationLinksCountPerOwner(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::sys::CountMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAnnotationLinksCountPerOwner(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAnnotationLinksCountPerOwner(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getAnnotationLinksCountPerOwner(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::sys::CountMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::sys::CountMap&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
                ::omero::sys::CountMap __ret;
                try
                {
                    __ret = __proxy->end_getAnnotationLinksCountPerOwner(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::sys::CountMap&)> _response;
        };
        return begin_getAnnotationLinksCountPerOwner(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner()
    {
        return begin_getAnnotationLinksCountPerOwner(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx)
    {
        return begin_getAnnotationLinksCountPerOwner(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAnnotationLinksCountPerOwner(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAnnotationLinksCountPerOwner(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::omero::model::Callback_Plate_getAnnotationLinksCountPerOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAnnotationLinksCountPerOwner(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_getAnnotationLinksCountPerOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAnnotationLinksCountPerOwner(&__ctx, __del, __cookie);
    }

    ::omero::sys::CountMap end_getAnnotationLinksCountPerOwner(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::PlateAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr& addition)
    {
        return linkAnnotation(addition, 0);
    }
    ::omero::model::PlateAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx)
    {
        return linkAnnotation(addition, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::IceInternal::Function<void (const ::omero::model::PlateAnnotationLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_linkAnnotation(addition, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_linkAnnotation(addition, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::PlateAnnotationLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_linkAnnotation(addition, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_linkAnnotation(addition, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::PlateAnnotationLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::PlateAnnotationLinkPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
                ::omero::model::PlateAnnotationLinkPtr __ret;
                try
                {
                    __ret = __proxy->end_linkAnnotation(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::PlateAnnotationLinkPtr&)> _response;
        };
        return begin_linkAnnotation(addition, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition)
    {
        return begin_linkAnnotation(addition, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx)
    {
        return begin_linkAnnotation(addition, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkAnnotation(addition, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkAnnotation(addition, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::omero::model::Callback_Plate_linkAnnotationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkAnnotation(addition, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_linkAnnotationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkAnnotation(addition, &__ctx, __del, __cookie);
    }

    ::omero::model::PlateAnnotationLinkPtr end_linkAnnotation(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::PlateAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addPlateAnnotationLinkToBoth(const ::omero::model::PlateAnnotationLinkPtr& link, bool bothSides)
    {
        addPlateAnnotationLinkToBoth(link, bothSides, 0);
    }
    void addPlateAnnotationLinkToBoth(const ::omero::model::PlateAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        addPlateAnnotationLinkToBoth(link, bothSides, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addPlateAnnotationLinkToBoth(const ::omero::model::PlateAnnotationLinkPtr& link, bool bothSides, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addPlateAnnotationLinkToBoth(link, bothSides, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addPlateAnnotationLinkToBoth(const ::omero::model::PlateAnnotationLinkPtr& link, bool bothSides, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addPlateAnnotationLinkToBoth(link, bothSides, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addPlateAnnotationLinkToBoth(const ::omero::model::PlateAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addPlateAnnotationLinkToBoth(link, bothSides, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addPlateAnnotationLinkToBoth(const ::omero::model::PlateAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addPlateAnnotationLinkToBoth(link, bothSides, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addPlateAnnotationLinkToBoth(const ::omero::model::PlateAnnotationLinkPtr& link, bool bothSides)
    {
        return begin_addPlateAnnotationLinkToBoth(link, bothSides, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addPlateAnnotationLinkToBoth(const ::omero::model::PlateAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        return begin_addPlateAnnotationLinkToBoth(link, bothSides, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addPlateAnnotationLinkToBoth(const ::omero::model::PlateAnnotationLinkPtr& link, bool bothSides, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPlateAnnotationLinkToBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addPlateAnnotationLinkToBoth(const ::omero::model::PlateAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPlateAnnotationLinkToBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addPlateAnnotationLinkToBoth(const ::omero::model::PlateAnnotationLinkPtr& link, bool bothSides, const ::omero::model::Callback_Plate_addPlateAnnotationLinkToBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPlateAnnotationLinkToBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addPlateAnnotationLinkToBoth(const ::omero::model::PlateAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_addPlateAnnotationLinkToBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPlateAnnotationLinkToBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    void end_addPlateAnnotationLinkToBoth(const ::Ice::AsyncResultPtr&);
    
private:

    void addPlateAnnotationLinkToBoth(const ::omero::model::PlateAnnotationLinkPtr&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addPlateAnnotationLinkToBoth(const ::omero::model::PlateAnnotationLinkPtr&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::PlateAnnotationLinksSeq findPlateAnnotationLink(const ::omero::model::AnnotationPtr& removal)
    {
        return findPlateAnnotationLink(removal, 0);
    }
    ::omero::model::PlateAnnotationLinksSeq findPlateAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx)
    {
        return findPlateAnnotationLink(removal, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_findPlateAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::IceInternal::Function<void (const ::omero::model::PlateAnnotationLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_findPlateAnnotationLink(removal, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_findPlateAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_findPlateAnnotationLink(removal, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_findPlateAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::PlateAnnotationLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_findPlateAnnotationLink(removal, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_findPlateAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_findPlateAnnotationLink(removal, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_findPlateAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::PlateAnnotationLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::PlateAnnotationLinksSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
                ::omero::model::PlateAnnotationLinksSeq __ret;
                try
                {
                    __ret = __proxy->end_findPlateAnnotationLink(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::PlateAnnotationLinksSeq&)> _response;
        };
        return begin_findPlateAnnotationLink(removal, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_findPlateAnnotationLink(const ::omero::model::AnnotationPtr& removal)
    {
        return begin_findPlateAnnotationLink(removal, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findPlateAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx)
    {
        return begin_findPlateAnnotationLink(removal, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findPlateAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findPlateAnnotationLink(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findPlateAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findPlateAnnotationLink(removal, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findPlateAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::omero::model::Callback_Plate_findPlateAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findPlateAnnotationLink(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findPlateAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_findPlateAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findPlateAnnotationLink(removal, &__ctx, __del, __cookie);
    }

    ::omero::model::PlateAnnotationLinksSeq end_findPlateAnnotationLink(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::PlateAnnotationLinksSeq findPlateAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_findPlateAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unlinkAnnotation(const ::omero::model::AnnotationPtr& removal)
    {
        unlinkAnnotation(removal, 0);
    }
    void unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx)
    {
        unlinkAnnotation(removal, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unlinkAnnotation(removal, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unlinkAnnotation(removal, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unlinkAnnotation(removal, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unlinkAnnotation(removal, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal)
    {
        return begin_unlinkAnnotation(removal, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx)
    {
        return begin_unlinkAnnotation(removal, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkAnnotation(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkAnnotation(removal, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::omero::model::Callback_Plate_unlinkAnnotationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkAnnotation(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_unlinkAnnotationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkAnnotation(removal, &__ctx, __del, __cookie);
    }

    void end_unlinkAnnotation(const ::Ice::AsyncResultPtr&);
    
private:

    void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removePlateAnnotationLinkFromBoth(const ::omero::model::PlateAnnotationLinkPtr& link, bool bothSides)
    {
        removePlateAnnotationLinkFromBoth(link, bothSides, 0);
    }
    void removePlateAnnotationLinkFromBoth(const ::omero::model::PlateAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        removePlateAnnotationLinkFromBoth(link, bothSides, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removePlateAnnotationLinkFromBoth(const ::omero::model::PlateAnnotationLinkPtr& link, bool bothSides, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removePlateAnnotationLinkFromBoth(link, bothSides, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removePlateAnnotationLinkFromBoth(const ::omero::model::PlateAnnotationLinkPtr& link, bool bothSides, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removePlateAnnotationLinkFromBoth(link, bothSides, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removePlateAnnotationLinkFromBoth(const ::omero::model::PlateAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removePlateAnnotationLinkFromBoth(link, bothSides, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removePlateAnnotationLinkFromBoth(const ::omero::model::PlateAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removePlateAnnotationLinkFromBoth(link, bothSides, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removePlateAnnotationLinkFromBoth(const ::omero::model::PlateAnnotationLinkPtr& link, bool bothSides)
    {
        return begin_removePlateAnnotationLinkFromBoth(link, bothSides, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removePlateAnnotationLinkFromBoth(const ::omero::model::PlateAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        return begin_removePlateAnnotationLinkFromBoth(link, bothSides, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removePlateAnnotationLinkFromBoth(const ::omero::model::PlateAnnotationLinkPtr& link, bool bothSides, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removePlateAnnotationLinkFromBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removePlateAnnotationLinkFromBoth(const ::omero::model::PlateAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removePlateAnnotationLinkFromBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removePlateAnnotationLinkFromBoth(const ::omero::model::PlateAnnotationLinkPtr& link, bool bothSides, const ::omero::model::Callback_Plate_removePlateAnnotationLinkFromBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removePlateAnnotationLinkFromBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removePlateAnnotationLinkFromBoth(const ::omero::model::PlateAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_removePlateAnnotationLinkFromBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removePlateAnnotationLinkFromBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    void end_removePlateAnnotationLinkFromBoth(const ::Ice::AsyncResultPtr&);
    
private:

    void removePlateAnnotationLinkFromBoth(const ::omero::model::PlateAnnotationLinkPtr&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removePlateAnnotationLinkFromBoth(const ::omero::model::PlateAnnotationLinkPtr&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::PlateLinkedAnnotationSeq linkedAnnotationList()
    {
        return linkedAnnotationList(0);
    }
    ::omero::model::PlateLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context& __ctx)
    {
        return linkedAnnotationList(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_linkedAnnotationList(const ::IceInternal::Function<void (const ::omero::model::PlateLinkedAnnotationSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_linkedAnnotationList(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_linkedAnnotationList(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_linkedAnnotationList(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_linkedAnnotationList(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::PlateLinkedAnnotationSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_linkedAnnotationList(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_linkedAnnotationList(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_linkedAnnotationList(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_linkedAnnotationList(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::PlateLinkedAnnotationSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::PlateLinkedAnnotationSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
                ::omero::model::PlateLinkedAnnotationSeq __ret;
                try
                {
                    __ret = __proxy->end_linkedAnnotationList(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::PlateLinkedAnnotationSeq&)> _response;
        };
        return begin_linkedAnnotationList(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_linkedAnnotationList()
    {
        return begin_linkedAnnotationList(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::Context& __ctx)
    {
        return begin_linkedAnnotationList(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedAnnotationList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedAnnotationList(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::omero::model::Callback_Plate_linkedAnnotationListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedAnnotationList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_linkedAnnotationListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedAnnotationList(&__ctx, __del, __cookie);
    }

    ::omero::model::PlateLinkedAnnotationSeq end_linkedAnnotationList(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::PlateLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getName()
    {
        return getName(0);
    }
    ::omero::RStringPtr getName(const ::Ice::Context& __ctx)
    {
        return getName(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getName(const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getName(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getName(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getName(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getName(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getName(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getName(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getName(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getName(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RStringPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
                ::omero::RStringPtr __ret;
                try
                {
                    __ret = __proxy->end_getName(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RStringPtr&)> _response;
        };
        return begin_getName(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getName()
    {
        return begin_getName(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& __ctx)
    {
        return begin_getName(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getName(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getName(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::omero::model::Callback_Plate_getNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getName(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_getNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getName(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getName(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getName(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setName(const ::omero::RStringPtr& theName)
    {
        setName(theName, 0);
    }
    void setName(const ::omero::RStringPtr& theName, const ::Ice::Context& __ctx)
    {
        setName(theName, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setName(const ::omero::RStringPtr& theName, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setName(theName, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setName(const ::omero::RStringPtr& theName, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setName(theName, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setName(const ::omero::RStringPtr& theName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setName(theName, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setName(const ::omero::RStringPtr& theName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setName(theName, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setName(const ::omero::RStringPtr& theName)
    {
        return begin_setName(theName, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setName(const ::omero::RStringPtr& theName, const ::Ice::Context& __ctx)
    {
        return begin_setName(theName, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setName(const ::omero::RStringPtr& theName, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setName(theName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setName(const ::omero::RStringPtr& theName, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setName(theName, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setName(const ::omero::RStringPtr& theName, const ::omero::model::Callback_Plate_setNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setName(theName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setName(const ::omero::RStringPtr& theName, const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_setNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setName(theName, &__ctx, __del, __cookie);
    }

    void end_setName(const ::Ice::AsyncResultPtr&);
    
private:

    void setName(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setName(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getDescription()
    {
        return getDescription(0);
    }
    ::omero::RStringPtr getDescription(const ::Ice::Context& __ctx)
    {
        return getDescription(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getDescription(const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getDescription(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getDescription(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getDescription(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getDescription(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getDescription(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getDescription(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getDescription(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getDescription(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RStringPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
                ::omero::RStringPtr __ret;
                try
                {
                    __ret = __proxy->end_getDescription(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RStringPtr&)> _response;
        };
        return begin_getDescription(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getDescription()
    {
        return begin_getDescription(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDescription(const ::Ice::Context& __ctx)
    {
        return begin_getDescription(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDescription(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDescription(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDescription(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDescription(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDescription(const ::omero::model::Callback_Plate_getDescriptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDescription(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDescription(const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_getDescriptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDescription(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getDescription(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getDescription(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getDescription(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setDescription(const ::omero::RStringPtr& theDescription)
    {
        setDescription(theDescription, 0);
    }
    void setDescription(const ::omero::RStringPtr& theDescription, const ::Ice::Context& __ctx)
    {
        setDescription(theDescription, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setDescription(const ::omero::RStringPtr& theDescription, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setDescription(theDescription, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setDescription(const ::omero::RStringPtr& theDescription, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setDescription(theDescription, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setDescription(const ::omero::RStringPtr& theDescription, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setDescription(theDescription, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setDescription(const ::omero::RStringPtr& theDescription, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setDescription(theDescription, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setDescription(const ::omero::RStringPtr& theDescription)
    {
        return begin_setDescription(theDescription, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setDescription(const ::omero::RStringPtr& theDescription, const ::Ice::Context& __ctx)
    {
        return begin_setDescription(theDescription, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setDescription(const ::omero::RStringPtr& theDescription, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDescription(theDescription, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDescription(const ::omero::RStringPtr& theDescription, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDescription(theDescription, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDescription(const ::omero::RStringPtr& theDescription, const ::omero::model::Callback_Plate_setDescriptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDescription(theDescription, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDescription(const ::omero::RStringPtr& theDescription, const ::Ice::Context& __ctx, const ::omero::model::Callback_Plate_setDescriptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDescription(theDescription, &__ctx, __del, __cookie);
    }

    void end_setDescription(const ::Ice::AsyncResultPtr&);
    
private:

    void setDescription(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setDescription(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Plate> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Plate*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Plate> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Plate*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Plate> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Plate*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Plate> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Plate*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Plate> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Plate*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Plate> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Plate*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Plate> ice_secure(bool __secure) const
    {
        return dynamic_cast<Plate*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Plate> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Plate*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Plate> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Plate*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Plate> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Plate*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Plate> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Plate*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Plate> ice_twoway() const
    {
        return dynamic_cast<Plate*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Plate> ice_oneway() const
    {
        return dynamic_cast<Plate*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Plate> ice_batchOneway() const
    {
        return dynamic_cast<Plate*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Plate> ice_datagram() const
    {
        return dynamic_cast<Plate*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Plate> ice_batchDatagram() const
    {
        return dynamic_cast<Plate*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Plate> ice_compress(bool __compress) const
    {
        return dynamic_cast<Plate*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Plate> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Plate*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Plate> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Plate*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Plate> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Plate*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

namespace IceDelegate
{

namespace omero
{

namespace model
{

class Plate : virtual public ::IceDelegate::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RIntPtr getDefaultSample(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setDefaultSample(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RStringPtr getColumnNamingConvention(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setColumnNamingConvention(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RStringPtr getRowNamingConvention(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setRowNamingConvention(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RDoublePtr getWellOriginX(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setWellOriginX(const ::omero::RDoublePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RDoublePtr getWellOriginY(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setWellOriginY(const ::omero::RDoublePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RIntPtr getRows(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setRows(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RIntPtr getColumns(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setColumns(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RStringPtr getStatus(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setStatus(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RStringPtr getExternalIdentifier(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setExternalIdentifier(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void unloadScreenLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int sizeOfScreenLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::PlateScreenLinksSeq copyScreenLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addScreenPlateLink(const ::omero::model::ScreenPlateLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addAllScreenPlateLinkSet(const ::omero::model::PlateScreenLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeScreenPlateLink(const ::omero::model::ScreenPlateLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeAllScreenPlateLinkSet(const ::omero::model::PlateScreenLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void clearScreenLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void reloadScreenLinks(const ::omero::model::PlatePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::sys::CountMap getScreenLinksCountPerOwner(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::ScreenPlateLinkPtr linkScreen(const ::omero::model::ScreenPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addScreenPlateLinkToBoth(const ::omero::model::ScreenPlateLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::PlateScreenLinksSeq findScreenPlateLink(const ::omero::model::ScreenPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void unlinkScreen(const ::omero::model::ScreenPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeScreenPlateLinkFromBoth(const ::omero::model::ScreenPlateLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::PlateLinkedScreenSeq linkedScreenList(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void unloadWells(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int sizeOfWells(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::PlateWellsSeq copyWells(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addWell(const ::omero::model::WellPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addAllWellSet(const ::omero::model::PlateWellsSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeWell(const ::omero::model::WellPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeAllWellSet(const ::omero::model::PlateWellsSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void clearWells(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void reloadWells(const ::omero::model::PlatePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void unloadPlateAcquisitions(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int sizeOfPlateAcquisitions(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::PlatePlateAcquisitionsSeq copyPlateAcquisitions(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addPlateAcquisition(const ::omero::model::PlateAcquisitionPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addAllPlateAcquisitionSet(const ::omero::model::PlatePlateAcquisitionsSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removePlateAcquisition(const ::omero::model::PlateAcquisitionPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeAllPlateAcquisitionSet(const ::omero::model::PlatePlateAcquisitionsSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void clearPlateAcquisitions(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void reloadPlateAcquisitions(const ::omero::model::PlatePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void unloadAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::PlateAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addPlateAnnotationLink(const ::omero::model::PlateAnnotationLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addAllPlateAnnotationLinkSet(const ::omero::model::PlateAnnotationLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removePlateAnnotationLink(const ::omero::model::PlateAnnotationLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeAllPlateAnnotationLinkSet(const ::omero::model::PlateAnnotationLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void clearAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void reloadAnnotationLinks(const ::omero::model::PlatePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::PlateAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addPlateAnnotationLinkToBoth(const ::omero::model::PlateAnnotationLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::PlateAnnotationLinksSeq findPlateAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removePlateAnnotationLinkFromBoth(const ::omero::model::PlateAnnotationLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::PlateLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RStringPtr getName(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setName(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RStringPtr getDescription(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setDescription(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

}

namespace IceDelegateM
{

namespace omero
{

namespace model
{

class Plate : virtual public ::IceDelegate::omero::model::Plate,
              virtual public ::IceDelegateM::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RIntPtr getDefaultSample(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setDefaultSample(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getColumnNamingConvention(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setColumnNamingConvention(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getRowNamingConvention(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setRowNamingConvention(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RDoublePtr getWellOriginX(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setWellOriginX(const ::omero::RDoublePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RDoublePtr getWellOriginY(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setWellOriginY(const ::omero::RDoublePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RIntPtr getRows(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setRows(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RIntPtr getColumns(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setColumns(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getStatus(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setStatus(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getExternalIdentifier(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setExternalIdentifier(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unloadScreenLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int sizeOfScreenLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::PlateScreenLinksSeq copyScreenLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addScreenPlateLink(const ::omero::model::ScreenPlateLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addAllScreenPlateLinkSet(const ::omero::model::PlateScreenLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeScreenPlateLink(const ::omero::model::ScreenPlateLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeAllScreenPlateLinkSet(const ::omero::model::PlateScreenLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void clearScreenLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void reloadScreenLinks(const ::omero::model::PlatePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::sys::CountMap getScreenLinksCountPerOwner(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::ScreenPlateLinkPtr linkScreen(const ::omero::model::ScreenPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addScreenPlateLinkToBoth(const ::omero::model::ScreenPlateLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::PlateScreenLinksSeq findScreenPlateLink(const ::omero::model::ScreenPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unlinkScreen(const ::omero::model::ScreenPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeScreenPlateLinkFromBoth(const ::omero::model::ScreenPlateLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::PlateLinkedScreenSeq linkedScreenList(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unloadWells(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int sizeOfWells(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::PlateWellsSeq copyWells(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addWell(const ::omero::model::WellPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addAllWellSet(const ::omero::model::PlateWellsSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeWell(const ::omero::model::WellPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeAllWellSet(const ::omero::model::PlateWellsSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void clearWells(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void reloadWells(const ::omero::model::PlatePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unloadPlateAcquisitions(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int sizeOfPlateAcquisitions(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::PlatePlateAcquisitionsSeq copyPlateAcquisitions(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addPlateAcquisition(const ::omero::model::PlateAcquisitionPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addAllPlateAcquisitionSet(const ::omero::model::PlatePlateAcquisitionsSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removePlateAcquisition(const ::omero::model::PlateAcquisitionPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeAllPlateAcquisitionSet(const ::omero::model::PlatePlateAcquisitionsSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void clearPlateAcquisitions(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void reloadPlateAcquisitions(const ::omero::model::PlatePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unloadAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::PlateAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addPlateAnnotationLink(const ::omero::model::PlateAnnotationLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addAllPlateAnnotationLinkSet(const ::omero::model::PlateAnnotationLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removePlateAnnotationLink(const ::omero::model::PlateAnnotationLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeAllPlateAnnotationLinkSet(const ::omero::model::PlateAnnotationLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void clearAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void reloadAnnotationLinks(const ::omero::model::PlatePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::PlateAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addPlateAnnotationLinkToBoth(const ::omero::model::PlateAnnotationLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::PlateAnnotationLinksSeq findPlateAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removePlateAnnotationLinkFromBoth(const ::omero::model::PlateAnnotationLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::PlateLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getName(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setName(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getDescription(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setDescription(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace IceDelegateD
{

namespace omero
{

namespace model
{

class Plate : virtual public ::IceDelegate::omero::model::Plate,
              virtual public ::IceDelegateD::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RIntPtr getDefaultSample(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setDefaultSample(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getColumnNamingConvention(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setColumnNamingConvention(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getRowNamingConvention(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setRowNamingConvention(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RDoublePtr getWellOriginX(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setWellOriginX(const ::omero::RDoublePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RDoublePtr getWellOriginY(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setWellOriginY(const ::omero::RDoublePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RIntPtr getRows(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setRows(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RIntPtr getColumns(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setColumns(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getStatus(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setStatus(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getExternalIdentifier(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setExternalIdentifier(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unloadScreenLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int sizeOfScreenLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::PlateScreenLinksSeq copyScreenLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addScreenPlateLink(const ::omero::model::ScreenPlateLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addAllScreenPlateLinkSet(const ::omero::model::PlateScreenLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeScreenPlateLink(const ::omero::model::ScreenPlateLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeAllScreenPlateLinkSet(const ::omero::model::PlateScreenLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void clearScreenLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void reloadScreenLinks(const ::omero::model::PlatePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::sys::CountMap getScreenLinksCountPerOwner(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::ScreenPlateLinkPtr linkScreen(const ::omero::model::ScreenPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addScreenPlateLinkToBoth(const ::omero::model::ScreenPlateLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::PlateScreenLinksSeq findScreenPlateLink(const ::omero::model::ScreenPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unlinkScreen(const ::omero::model::ScreenPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeScreenPlateLinkFromBoth(const ::omero::model::ScreenPlateLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::PlateLinkedScreenSeq linkedScreenList(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unloadWells(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int sizeOfWells(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::PlateWellsSeq copyWells(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addWell(const ::omero::model::WellPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addAllWellSet(const ::omero::model::PlateWellsSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeWell(const ::omero::model::WellPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeAllWellSet(const ::omero::model::PlateWellsSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void clearWells(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void reloadWells(const ::omero::model::PlatePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unloadPlateAcquisitions(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int sizeOfPlateAcquisitions(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::PlatePlateAcquisitionsSeq copyPlateAcquisitions(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addPlateAcquisition(const ::omero::model::PlateAcquisitionPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addAllPlateAcquisitionSet(const ::omero::model::PlatePlateAcquisitionsSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removePlateAcquisition(const ::omero::model::PlateAcquisitionPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeAllPlateAcquisitionSet(const ::omero::model::PlatePlateAcquisitionsSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void clearPlateAcquisitions(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void reloadPlateAcquisitions(const ::omero::model::PlatePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unloadAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::PlateAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addPlateAnnotationLink(const ::omero::model::PlateAnnotationLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addAllPlateAnnotationLinkSet(const ::omero::model::PlateAnnotationLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removePlateAnnotationLink(const ::omero::model::PlateAnnotationLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeAllPlateAnnotationLinkSet(const ::omero::model::PlateAnnotationLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void clearAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void reloadAnnotationLinks(const ::omero::model::PlatePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::PlateAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addPlateAnnotationLinkToBoth(const ::omero::model::PlateAnnotationLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::PlateAnnotationLinksSeq findPlateAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removePlateAnnotationLinkFromBoth(const ::omero::model::PlateAnnotationLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::PlateLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getName(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setName(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getDescription(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setDescription(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace omero
{

namespace model
{

class Plate : public ::omero::model::IObject
{
public:

    typedef PlatePrx ProxyType;
    typedef PlatePtr PointerType;

    Plate()
    {
    }

    Plate(const ::omero::RLongPtr& __ice_id, const ::omero::model::DetailsPtr& __ice_details, bool __ice_loaded, const ::omero::RIntPtr& __ice_version, const ::omero::RIntPtr& __ice_defaultSample, const ::omero::RStringPtr& __ice_columnNamingConvention, const ::omero::RStringPtr& __ice_rowNamingConvention, const ::omero::RDoublePtr& __ice_wellOriginX, const ::omero::RDoublePtr& __ice_wellOriginY, const ::omero::RIntPtr& __ice_rows, const ::omero::RIntPtr& __ice_columns, const ::omero::RStringPtr& __ice_status, const ::omero::RStringPtr& __ice_externalIdentifier, const ::omero::model::PlateScreenLinksSeq& __ice_screenLinksSeq, bool __ice_screenLinksLoaded, const ::omero::sys::CountMap& __ice_screenLinksCountPerOwner, const ::omero::model::PlateWellsSeq& __ice_wellsSeq, bool __ice_wellsLoaded, const ::omero::model::PlatePlateAcquisitionsSeq& __ice_plateAcquisitionsSeq, bool __ice_plateAcquisitionsLoaded, const ::omero::model::PlateAnnotationLinksSeq& __ice_annotationLinksSeq, bool __ice_annotationLinksLoaded, const ::omero::sys::CountMap& __ice_annotationLinksCountPerOwner, const ::omero::RStringPtr& __ice_name, const ::omero::RStringPtr& __ice_description) :
        ::omero::model::IObject(__ice_id, __ice_details, __ice_loaded)
        ,
        version(__ice_version),
        defaultSample(__ice_defaultSample),
        columnNamingConvention(__ice_columnNamingConvention),
        rowNamingConvention(__ice_rowNamingConvention),
        wellOriginX(__ice_wellOriginX),
        wellOriginY(__ice_wellOriginY),
        rows(__ice_rows),
        columns(__ice_columns),
        status(__ice_status),
        externalIdentifier(__ice_externalIdentifier),
        screenLinksSeq(__ice_screenLinksSeq),
        screenLinksLoaded(__ice_screenLinksLoaded),
        screenLinksCountPerOwner(__ice_screenLinksCountPerOwner),
        wellsSeq(__ice_wellsSeq),
        wellsLoaded(__ice_wellsLoaded),
        plateAcquisitionsSeq(__ice_plateAcquisitionsSeq),
        plateAcquisitionsLoaded(__ice_plateAcquisitionsLoaded),
        annotationLinksSeq(__ice_annotationLinksSeq),
        annotationLinksLoaded(__ice_annotationLinksLoaded),
        annotationLinksCountPerOwner(__ice_annotationLinksCountPerOwner),
        name(__ice_name),
        description(__ice_description)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    virtual ::omero::RIntPtr getVersion(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RIntPtr getDefaultSample(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getDefaultSample(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setDefaultSample(const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setDefaultSample(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getColumnNamingConvention(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getColumnNamingConvention(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setColumnNamingConvention(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setColumnNamingConvention(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getRowNamingConvention(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getRowNamingConvention(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setRowNamingConvention(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setRowNamingConvention(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RDoublePtr getWellOriginX(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getWellOriginX(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setWellOriginX(const ::omero::RDoublePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setWellOriginX(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RDoublePtr getWellOriginY(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getWellOriginY(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setWellOriginY(const ::omero::RDoublePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setWellOriginY(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RIntPtr getRows(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getRows(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setRows(const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setRows(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RIntPtr getColumns(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getColumns(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setColumns(const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setColumns(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getStatus(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getStatus(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setStatus(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setStatus(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getExternalIdentifier(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getExternalIdentifier(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setExternalIdentifier(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setExternalIdentifier(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unloadScreenLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unloadScreenLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int sizeOfScreenLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sizeOfScreenLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::PlateScreenLinksSeq copyScreenLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___copyScreenLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addScreenPlateLink(const ::omero::model::ScreenPlateLinkPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addScreenPlateLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addAllScreenPlateLinkSet(const ::omero::model::PlateScreenLinksSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addAllScreenPlateLinkSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeScreenPlateLink(const ::omero::model::ScreenPlateLinkPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeScreenPlateLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeAllScreenPlateLinkSet(const ::omero::model::PlateScreenLinksSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeAllScreenPlateLinkSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void clearScreenLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___clearScreenLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reloadScreenLinks(const ::omero::model::PlatePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reloadScreenLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::sys::CountMap getScreenLinksCountPerOwner(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getScreenLinksCountPerOwner(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::ScreenPlateLinkPtr linkScreen(const ::omero::model::ScreenPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___linkScreen(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addScreenPlateLinkToBoth(const ::omero::model::ScreenPlateLinkPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addScreenPlateLinkToBoth(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::PlateScreenLinksSeq findScreenPlateLink(const ::omero::model::ScreenPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___findScreenPlateLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unlinkScreen(const ::omero::model::ScreenPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unlinkScreen(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeScreenPlateLinkFromBoth(const ::omero::model::ScreenPlateLinkPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeScreenPlateLinkFromBoth(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::PlateLinkedScreenSeq linkedScreenList(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___linkedScreenList(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unloadWells(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unloadWells(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int sizeOfWells(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sizeOfWells(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::PlateWellsSeq copyWells(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___copyWells(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addWell(const ::omero::model::WellPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addWell(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addAllWellSet(const ::omero::model::PlateWellsSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addAllWellSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeWell(const ::omero::model::WellPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeWell(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeAllWellSet(const ::omero::model::PlateWellsSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeAllWellSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void clearWells(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___clearWells(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reloadWells(const ::omero::model::PlatePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reloadWells(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unloadPlateAcquisitions(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unloadPlateAcquisitions(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int sizeOfPlateAcquisitions(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sizeOfPlateAcquisitions(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::PlatePlateAcquisitionsSeq copyPlateAcquisitions(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___copyPlateAcquisitions(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addPlateAcquisition(const ::omero::model::PlateAcquisitionPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addPlateAcquisition(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addAllPlateAcquisitionSet(const ::omero::model::PlatePlateAcquisitionsSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addAllPlateAcquisitionSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removePlateAcquisition(const ::omero::model::PlateAcquisitionPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removePlateAcquisition(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeAllPlateAcquisitionSet(const ::omero::model::PlatePlateAcquisitionsSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeAllPlateAcquisitionSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void clearPlateAcquisitions(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___clearPlateAcquisitions(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reloadPlateAcquisitions(const ::omero::model::PlatePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reloadPlateAcquisitions(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unloadAnnotationLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unloadAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sizeOfAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::PlateAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___copyAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addPlateAnnotationLink(const ::omero::model::PlateAnnotationLinkPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addPlateAnnotationLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addAllPlateAnnotationLinkSet(const ::omero::model::PlateAnnotationLinksSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addAllPlateAnnotationLinkSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removePlateAnnotationLink(const ::omero::model::PlateAnnotationLinkPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removePlateAnnotationLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeAllPlateAnnotationLinkSet(const ::omero::model::PlateAnnotationLinksSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeAllPlateAnnotationLinkSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void clearAnnotationLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___clearAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reloadAnnotationLinks(const ::omero::model::PlatePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reloadAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getAnnotationLinksCountPerOwner(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::PlateAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___linkAnnotation(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addPlateAnnotationLinkToBoth(const ::omero::model::PlateAnnotationLinkPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addPlateAnnotationLinkToBoth(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::PlateAnnotationLinksSeq findPlateAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___findPlateAnnotationLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unlinkAnnotation(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removePlateAnnotationLinkFromBoth(const ::omero::model::PlateAnnotationLinkPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removePlateAnnotationLinkFromBoth(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::PlateLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___linkedAnnotationList(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getName(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getName(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setName(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setName(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getDescription(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getDescription(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setDescription(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setDescription(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::model::IObject::__writeImpl;
    using ::omero::model::IObject::__readImpl;
    #endif

    ::omero::RIntPtr version;

    ::omero::RIntPtr defaultSample;

    ::omero::RStringPtr columnNamingConvention;

    ::omero::RStringPtr rowNamingConvention;

    ::omero::RDoublePtr wellOriginX;

    ::omero::RDoublePtr wellOriginY;

    ::omero::RIntPtr rows;

    ::omero::RIntPtr columns;

    ::omero::RStringPtr status;

    ::omero::RStringPtr externalIdentifier;

    ::omero::model::PlateScreenLinksSeq screenLinksSeq;

    bool screenLinksLoaded;

    ::omero::sys::CountMap screenLinksCountPerOwner;

    ::omero::model::PlateWellsSeq wellsSeq;

    bool wellsLoaded;

    ::omero::model::PlatePlateAcquisitionsSeq plateAcquisitionsSeq;

    bool plateAcquisitionsLoaded;

    ::omero::model::PlateAnnotationLinksSeq annotationLinksSeq;

    bool annotationLinksLoaded;

    ::omero::sys::CountMap annotationLinksCountPerOwner;

    ::omero::RStringPtr name;

    ::omero::RStringPtr description;
};

inline bool operator==(const Plate& l, const Plate& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Plate& l, const Plate& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

}

namespace omero
{

namespace model
{

template<class T>
class CallbackNC_Plate_getVersion : public Callback_Plate_getVersion_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RIntPtr&);

    CallbackNC_Plate_getVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Plate_getVersionPtr
newCallback_Plate_getVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_getVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_getVersionPtr
newCallback_Plate_getVersion(T* instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_getVersion<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_getVersion : public Callback_Plate_getVersion_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RIntPtr&, const CT&);

    Callback_Plate_getVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Plate_getVersionPtr
newCallback_Plate_getVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_getVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_getVersionPtr
newCallback_Plate_getVersion(T* instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_getVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_setVersion : public Callback_Plate_setVersion_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Plate_setVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Plate_setVersionPtr
newCallback_Plate_setVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_setVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_setVersionPtr
newCallback_Plate_setVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_setVersion<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Plate_setVersionPtr
newCallback_Plate_setVersion(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_setVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_setVersionPtr
newCallback_Plate_setVersion(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_setVersion<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_setVersion : public Callback_Plate_setVersion_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Plate_setVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Plate_setVersionPtr
newCallback_Plate_setVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_setVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_setVersionPtr
newCallback_Plate_setVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_setVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_setVersionPtr
newCallback_Plate_setVersion(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_setVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_setVersionPtr
newCallback_Plate_setVersion(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_setVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_getDefaultSample : public Callback_Plate_getDefaultSample_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RIntPtr&);

    CallbackNC_Plate_getDefaultSample(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getDefaultSample(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Plate_getDefaultSamplePtr
newCallback_Plate_getDefaultSample(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_getDefaultSample<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_getDefaultSamplePtr
newCallback_Plate_getDefaultSample(T* instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_getDefaultSample<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_getDefaultSample : public Callback_Plate_getDefaultSample_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RIntPtr&, const CT&);

    Callback_Plate_getDefaultSample(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getDefaultSample(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Plate_getDefaultSamplePtr
newCallback_Plate_getDefaultSample(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_getDefaultSample<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_getDefaultSamplePtr
newCallback_Plate_getDefaultSample(T* instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_getDefaultSample<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_setDefaultSample : public Callback_Plate_setDefaultSample_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Plate_setDefaultSample(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Plate_setDefaultSamplePtr
newCallback_Plate_setDefaultSample(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_setDefaultSample<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_setDefaultSamplePtr
newCallback_Plate_setDefaultSample(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_setDefaultSample<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Plate_setDefaultSamplePtr
newCallback_Plate_setDefaultSample(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_setDefaultSample<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_setDefaultSamplePtr
newCallback_Plate_setDefaultSample(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_setDefaultSample<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_setDefaultSample : public Callback_Plate_setDefaultSample_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Plate_setDefaultSample(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Plate_setDefaultSamplePtr
newCallback_Plate_setDefaultSample(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_setDefaultSample<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_setDefaultSamplePtr
newCallback_Plate_setDefaultSample(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_setDefaultSample<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_setDefaultSamplePtr
newCallback_Plate_setDefaultSample(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_setDefaultSample<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_setDefaultSamplePtr
newCallback_Plate_setDefaultSample(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_setDefaultSample<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_getColumnNamingConvention : public Callback_Plate_getColumnNamingConvention_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_Plate_getColumnNamingConvention(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getColumnNamingConvention(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Plate_getColumnNamingConventionPtr
newCallback_Plate_getColumnNamingConvention(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_getColumnNamingConvention<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_getColumnNamingConventionPtr
newCallback_Plate_getColumnNamingConvention(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_getColumnNamingConvention<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_getColumnNamingConvention : public Callback_Plate_getColumnNamingConvention_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_Plate_getColumnNamingConvention(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getColumnNamingConvention(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Plate_getColumnNamingConventionPtr
newCallback_Plate_getColumnNamingConvention(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_getColumnNamingConvention<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_getColumnNamingConventionPtr
newCallback_Plate_getColumnNamingConvention(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_getColumnNamingConvention<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_setColumnNamingConvention : public Callback_Plate_setColumnNamingConvention_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Plate_setColumnNamingConvention(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Plate_setColumnNamingConventionPtr
newCallback_Plate_setColumnNamingConvention(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_setColumnNamingConvention<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_setColumnNamingConventionPtr
newCallback_Plate_setColumnNamingConvention(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_setColumnNamingConvention<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Plate_setColumnNamingConventionPtr
newCallback_Plate_setColumnNamingConvention(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_setColumnNamingConvention<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_setColumnNamingConventionPtr
newCallback_Plate_setColumnNamingConvention(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_setColumnNamingConvention<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_setColumnNamingConvention : public Callback_Plate_setColumnNamingConvention_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Plate_setColumnNamingConvention(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Plate_setColumnNamingConventionPtr
newCallback_Plate_setColumnNamingConvention(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_setColumnNamingConvention<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_setColumnNamingConventionPtr
newCallback_Plate_setColumnNamingConvention(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_setColumnNamingConvention<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_setColumnNamingConventionPtr
newCallback_Plate_setColumnNamingConvention(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_setColumnNamingConvention<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_setColumnNamingConventionPtr
newCallback_Plate_setColumnNamingConvention(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_setColumnNamingConvention<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_getRowNamingConvention : public Callback_Plate_getRowNamingConvention_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_Plate_getRowNamingConvention(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getRowNamingConvention(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Plate_getRowNamingConventionPtr
newCallback_Plate_getRowNamingConvention(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_getRowNamingConvention<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_getRowNamingConventionPtr
newCallback_Plate_getRowNamingConvention(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_getRowNamingConvention<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_getRowNamingConvention : public Callback_Plate_getRowNamingConvention_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_Plate_getRowNamingConvention(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getRowNamingConvention(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Plate_getRowNamingConventionPtr
newCallback_Plate_getRowNamingConvention(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_getRowNamingConvention<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_getRowNamingConventionPtr
newCallback_Plate_getRowNamingConvention(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_getRowNamingConvention<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_setRowNamingConvention : public Callback_Plate_setRowNamingConvention_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Plate_setRowNamingConvention(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Plate_setRowNamingConventionPtr
newCallback_Plate_setRowNamingConvention(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_setRowNamingConvention<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_setRowNamingConventionPtr
newCallback_Plate_setRowNamingConvention(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_setRowNamingConvention<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Plate_setRowNamingConventionPtr
newCallback_Plate_setRowNamingConvention(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_setRowNamingConvention<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_setRowNamingConventionPtr
newCallback_Plate_setRowNamingConvention(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_setRowNamingConvention<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_setRowNamingConvention : public Callback_Plate_setRowNamingConvention_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Plate_setRowNamingConvention(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Plate_setRowNamingConventionPtr
newCallback_Plate_setRowNamingConvention(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_setRowNamingConvention<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_setRowNamingConventionPtr
newCallback_Plate_setRowNamingConvention(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_setRowNamingConvention<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_setRowNamingConventionPtr
newCallback_Plate_setRowNamingConvention(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_setRowNamingConvention<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_setRowNamingConventionPtr
newCallback_Plate_setRowNamingConvention(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_setRowNamingConvention<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_getWellOriginX : public Callback_Plate_getWellOriginX_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RDoublePtr&);

    CallbackNC_Plate_getWellOriginX(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
        ::omero::RDoublePtr __ret;
        try
        {
            __ret = __proxy->end_getWellOriginX(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Plate_getWellOriginXPtr
newCallback_Plate_getWellOriginX(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RDoublePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_getWellOriginX<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_getWellOriginXPtr
newCallback_Plate_getWellOriginX(T* instance, void (T::*cb)(const ::omero::RDoublePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_getWellOriginX<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_getWellOriginX : public Callback_Plate_getWellOriginX_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RDoublePtr&, const CT&);

    Callback_Plate_getWellOriginX(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
        ::omero::RDoublePtr __ret;
        try
        {
            __ret = __proxy->end_getWellOriginX(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Plate_getWellOriginXPtr
newCallback_Plate_getWellOriginX(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RDoublePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_getWellOriginX<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_getWellOriginXPtr
newCallback_Plate_getWellOriginX(T* instance, void (T::*cb)(const ::omero::RDoublePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_getWellOriginX<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_setWellOriginX : public Callback_Plate_setWellOriginX_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Plate_setWellOriginX(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Plate_setWellOriginXPtr
newCallback_Plate_setWellOriginX(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_setWellOriginX<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_setWellOriginXPtr
newCallback_Plate_setWellOriginX(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_setWellOriginX<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Plate_setWellOriginXPtr
newCallback_Plate_setWellOriginX(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_setWellOriginX<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_setWellOriginXPtr
newCallback_Plate_setWellOriginX(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_setWellOriginX<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_setWellOriginX : public Callback_Plate_setWellOriginX_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Plate_setWellOriginX(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Plate_setWellOriginXPtr
newCallback_Plate_setWellOriginX(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_setWellOriginX<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_setWellOriginXPtr
newCallback_Plate_setWellOriginX(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_setWellOriginX<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_setWellOriginXPtr
newCallback_Plate_setWellOriginX(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_setWellOriginX<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_setWellOriginXPtr
newCallback_Plate_setWellOriginX(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_setWellOriginX<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_getWellOriginY : public Callback_Plate_getWellOriginY_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RDoublePtr&);

    CallbackNC_Plate_getWellOriginY(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
        ::omero::RDoublePtr __ret;
        try
        {
            __ret = __proxy->end_getWellOriginY(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Plate_getWellOriginYPtr
newCallback_Plate_getWellOriginY(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RDoublePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_getWellOriginY<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_getWellOriginYPtr
newCallback_Plate_getWellOriginY(T* instance, void (T::*cb)(const ::omero::RDoublePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_getWellOriginY<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_getWellOriginY : public Callback_Plate_getWellOriginY_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RDoublePtr&, const CT&);

    Callback_Plate_getWellOriginY(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
        ::omero::RDoublePtr __ret;
        try
        {
            __ret = __proxy->end_getWellOriginY(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Plate_getWellOriginYPtr
newCallback_Plate_getWellOriginY(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RDoublePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_getWellOriginY<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_getWellOriginYPtr
newCallback_Plate_getWellOriginY(T* instance, void (T::*cb)(const ::omero::RDoublePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_getWellOriginY<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_setWellOriginY : public Callback_Plate_setWellOriginY_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Plate_setWellOriginY(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Plate_setWellOriginYPtr
newCallback_Plate_setWellOriginY(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_setWellOriginY<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_setWellOriginYPtr
newCallback_Plate_setWellOriginY(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_setWellOriginY<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Plate_setWellOriginYPtr
newCallback_Plate_setWellOriginY(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_setWellOriginY<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_setWellOriginYPtr
newCallback_Plate_setWellOriginY(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_setWellOriginY<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_setWellOriginY : public Callback_Plate_setWellOriginY_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Plate_setWellOriginY(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Plate_setWellOriginYPtr
newCallback_Plate_setWellOriginY(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_setWellOriginY<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_setWellOriginYPtr
newCallback_Plate_setWellOriginY(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_setWellOriginY<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_setWellOriginYPtr
newCallback_Plate_setWellOriginY(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_setWellOriginY<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_setWellOriginYPtr
newCallback_Plate_setWellOriginY(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_setWellOriginY<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_getRows : public Callback_Plate_getRows_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RIntPtr&);

    CallbackNC_Plate_getRows(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getRows(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Plate_getRowsPtr
newCallback_Plate_getRows(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_getRows<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_getRowsPtr
newCallback_Plate_getRows(T* instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_getRows<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_getRows : public Callback_Plate_getRows_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RIntPtr&, const CT&);

    Callback_Plate_getRows(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getRows(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Plate_getRowsPtr
newCallback_Plate_getRows(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_getRows<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_getRowsPtr
newCallback_Plate_getRows(T* instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_getRows<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_setRows : public Callback_Plate_setRows_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Plate_setRows(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Plate_setRowsPtr
newCallback_Plate_setRows(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_setRows<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_setRowsPtr
newCallback_Plate_setRows(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_setRows<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Plate_setRowsPtr
newCallback_Plate_setRows(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_setRows<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_setRowsPtr
newCallback_Plate_setRows(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_setRows<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_setRows : public Callback_Plate_setRows_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Plate_setRows(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Plate_setRowsPtr
newCallback_Plate_setRows(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_setRows<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_setRowsPtr
newCallback_Plate_setRows(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_setRows<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_setRowsPtr
newCallback_Plate_setRows(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_setRows<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_setRowsPtr
newCallback_Plate_setRows(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_setRows<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_getColumns : public Callback_Plate_getColumns_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RIntPtr&);

    CallbackNC_Plate_getColumns(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getColumns(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Plate_getColumnsPtr
newCallback_Plate_getColumns(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_getColumns<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_getColumnsPtr
newCallback_Plate_getColumns(T* instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_getColumns<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_getColumns : public Callback_Plate_getColumns_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RIntPtr&, const CT&);

    Callback_Plate_getColumns(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getColumns(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Plate_getColumnsPtr
newCallback_Plate_getColumns(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_getColumns<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_getColumnsPtr
newCallback_Plate_getColumns(T* instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_getColumns<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_setColumns : public Callback_Plate_setColumns_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Plate_setColumns(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Plate_setColumnsPtr
newCallback_Plate_setColumns(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_setColumns<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_setColumnsPtr
newCallback_Plate_setColumns(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_setColumns<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Plate_setColumnsPtr
newCallback_Plate_setColumns(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_setColumns<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_setColumnsPtr
newCallback_Plate_setColumns(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_setColumns<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_setColumns : public Callback_Plate_setColumns_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Plate_setColumns(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Plate_setColumnsPtr
newCallback_Plate_setColumns(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_setColumns<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_setColumnsPtr
newCallback_Plate_setColumns(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_setColumns<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_setColumnsPtr
newCallback_Plate_setColumns(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_setColumns<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_setColumnsPtr
newCallback_Plate_setColumns(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_setColumns<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_getStatus : public Callback_Plate_getStatus_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_Plate_getStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getStatus(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Plate_getStatusPtr
newCallback_Plate_getStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_getStatus<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_getStatusPtr
newCallback_Plate_getStatus(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_getStatus<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_getStatus : public Callback_Plate_getStatus_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_Plate_getStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getStatus(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Plate_getStatusPtr
newCallback_Plate_getStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_getStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_getStatusPtr
newCallback_Plate_getStatus(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_getStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_setStatus : public Callback_Plate_setStatus_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Plate_setStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Plate_setStatusPtr
newCallback_Plate_setStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_setStatus<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_setStatusPtr
newCallback_Plate_setStatus(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_setStatus<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Plate_setStatusPtr
newCallback_Plate_setStatus(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_setStatus<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_setStatusPtr
newCallback_Plate_setStatus(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_setStatus<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_setStatus : public Callback_Plate_setStatus_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Plate_setStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Plate_setStatusPtr
newCallback_Plate_setStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_setStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_setStatusPtr
newCallback_Plate_setStatus(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_setStatus<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_setStatusPtr
newCallback_Plate_setStatus(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_setStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_setStatusPtr
newCallback_Plate_setStatus(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_setStatus<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_getExternalIdentifier : public Callback_Plate_getExternalIdentifier_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_Plate_getExternalIdentifier(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getExternalIdentifier(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Plate_getExternalIdentifierPtr
newCallback_Plate_getExternalIdentifier(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_getExternalIdentifier<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_getExternalIdentifierPtr
newCallback_Plate_getExternalIdentifier(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_getExternalIdentifier<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_getExternalIdentifier : public Callback_Plate_getExternalIdentifier_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_Plate_getExternalIdentifier(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getExternalIdentifier(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Plate_getExternalIdentifierPtr
newCallback_Plate_getExternalIdentifier(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_getExternalIdentifier<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_getExternalIdentifierPtr
newCallback_Plate_getExternalIdentifier(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_getExternalIdentifier<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_setExternalIdentifier : public Callback_Plate_setExternalIdentifier_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Plate_setExternalIdentifier(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Plate_setExternalIdentifierPtr
newCallback_Plate_setExternalIdentifier(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_setExternalIdentifier<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_setExternalIdentifierPtr
newCallback_Plate_setExternalIdentifier(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_setExternalIdentifier<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Plate_setExternalIdentifierPtr
newCallback_Plate_setExternalIdentifier(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_setExternalIdentifier<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_setExternalIdentifierPtr
newCallback_Plate_setExternalIdentifier(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_setExternalIdentifier<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_setExternalIdentifier : public Callback_Plate_setExternalIdentifier_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Plate_setExternalIdentifier(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Plate_setExternalIdentifierPtr
newCallback_Plate_setExternalIdentifier(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_setExternalIdentifier<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_setExternalIdentifierPtr
newCallback_Plate_setExternalIdentifier(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_setExternalIdentifier<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_setExternalIdentifierPtr
newCallback_Plate_setExternalIdentifier(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_setExternalIdentifier<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_setExternalIdentifierPtr
newCallback_Plate_setExternalIdentifier(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_setExternalIdentifier<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_unloadScreenLinks : public Callback_Plate_unloadScreenLinks_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Plate_unloadScreenLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Plate_unloadScreenLinksPtr
newCallback_Plate_unloadScreenLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_unloadScreenLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_unloadScreenLinksPtr
newCallback_Plate_unloadScreenLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_unloadScreenLinks<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Plate_unloadScreenLinksPtr
newCallback_Plate_unloadScreenLinks(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_unloadScreenLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_unloadScreenLinksPtr
newCallback_Plate_unloadScreenLinks(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_unloadScreenLinks<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_unloadScreenLinks : public Callback_Plate_unloadScreenLinks_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Plate_unloadScreenLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Plate_unloadScreenLinksPtr
newCallback_Plate_unloadScreenLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_unloadScreenLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_unloadScreenLinksPtr
newCallback_Plate_unloadScreenLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_unloadScreenLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_unloadScreenLinksPtr
newCallback_Plate_unloadScreenLinks(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_unloadScreenLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_unloadScreenLinksPtr
newCallback_Plate_unloadScreenLinks(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_unloadScreenLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_sizeOfScreenLinks : public Callback_Plate_sizeOfScreenLinks_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Plate_sizeOfScreenLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfScreenLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Plate_sizeOfScreenLinksPtr
newCallback_Plate_sizeOfScreenLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_sizeOfScreenLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_sizeOfScreenLinksPtr
newCallback_Plate_sizeOfScreenLinks(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_sizeOfScreenLinks<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_sizeOfScreenLinks : public Callback_Plate_sizeOfScreenLinks_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Plate_sizeOfScreenLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfScreenLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Plate_sizeOfScreenLinksPtr
newCallback_Plate_sizeOfScreenLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_sizeOfScreenLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_sizeOfScreenLinksPtr
newCallback_Plate_sizeOfScreenLinks(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_sizeOfScreenLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_copyScreenLinks : public Callback_Plate_copyScreenLinks_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::PlateScreenLinksSeq&);

    CallbackNC_Plate_copyScreenLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
        ::omero::model::PlateScreenLinksSeq __ret;
        try
        {
            __ret = __proxy->end_copyScreenLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Plate_copyScreenLinksPtr
newCallback_Plate_copyScreenLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PlateScreenLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_copyScreenLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_copyScreenLinksPtr
newCallback_Plate_copyScreenLinks(T* instance, void (T::*cb)(const ::omero::model::PlateScreenLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_copyScreenLinks<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_copyScreenLinks : public Callback_Plate_copyScreenLinks_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::PlateScreenLinksSeq&, const CT&);

    Callback_Plate_copyScreenLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
        ::omero::model::PlateScreenLinksSeq __ret;
        try
        {
            __ret = __proxy->end_copyScreenLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Plate_copyScreenLinksPtr
newCallback_Plate_copyScreenLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PlateScreenLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_copyScreenLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_copyScreenLinksPtr
newCallback_Plate_copyScreenLinks(T* instance, void (T::*cb)(const ::omero::model::PlateScreenLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_copyScreenLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_addScreenPlateLink : public Callback_Plate_addScreenPlateLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Plate_addScreenPlateLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Plate_addScreenPlateLinkPtr
newCallback_Plate_addScreenPlateLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_addScreenPlateLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_addScreenPlateLinkPtr
newCallback_Plate_addScreenPlateLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_addScreenPlateLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Plate_addScreenPlateLinkPtr
newCallback_Plate_addScreenPlateLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_addScreenPlateLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_addScreenPlateLinkPtr
newCallback_Plate_addScreenPlateLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_addScreenPlateLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_addScreenPlateLink : public Callback_Plate_addScreenPlateLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Plate_addScreenPlateLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Plate_addScreenPlateLinkPtr
newCallback_Plate_addScreenPlateLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_addScreenPlateLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_addScreenPlateLinkPtr
newCallback_Plate_addScreenPlateLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_addScreenPlateLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_addScreenPlateLinkPtr
newCallback_Plate_addScreenPlateLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_addScreenPlateLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_addScreenPlateLinkPtr
newCallback_Plate_addScreenPlateLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_addScreenPlateLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_addAllScreenPlateLinkSet : public Callback_Plate_addAllScreenPlateLinkSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Plate_addAllScreenPlateLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Plate_addAllScreenPlateLinkSetPtr
newCallback_Plate_addAllScreenPlateLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_addAllScreenPlateLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_addAllScreenPlateLinkSetPtr
newCallback_Plate_addAllScreenPlateLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_addAllScreenPlateLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Plate_addAllScreenPlateLinkSetPtr
newCallback_Plate_addAllScreenPlateLinkSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_addAllScreenPlateLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_addAllScreenPlateLinkSetPtr
newCallback_Plate_addAllScreenPlateLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_addAllScreenPlateLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_addAllScreenPlateLinkSet : public Callback_Plate_addAllScreenPlateLinkSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Plate_addAllScreenPlateLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Plate_addAllScreenPlateLinkSetPtr
newCallback_Plate_addAllScreenPlateLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_addAllScreenPlateLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_addAllScreenPlateLinkSetPtr
newCallback_Plate_addAllScreenPlateLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_addAllScreenPlateLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_addAllScreenPlateLinkSetPtr
newCallback_Plate_addAllScreenPlateLinkSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_addAllScreenPlateLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_addAllScreenPlateLinkSetPtr
newCallback_Plate_addAllScreenPlateLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_addAllScreenPlateLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_removeScreenPlateLink : public Callback_Plate_removeScreenPlateLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Plate_removeScreenPlateLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Plate_removeScreenPlateLinkPtr
newCallback_Plate_removeScreenPlateLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_removeScreenPlateLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_removeScreenPlateLinkPtr
newCallback_Plate_removeScreenPlateLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_removeScreenPlateLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Plate_removeScreenPlateLinkPtr
newCallback_Plate_removeScreenPlateLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_removeScreenPlateLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_removeScreenPlateLinkPtr
newCallback_Plate_removeScreenPlateLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_removeScreenPlateLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_removeScreenPlateLink : public Callback_Plate_removeScreenPlateLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Plate_removeScreenPlateLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Plate_removeScreenPlateLinkPtr
newCallback_Plate_removeScreenPlateLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_removeScreenPlateLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_removeScreenPlateLinkPtr
newCallback_Plate_removeScreenPlateLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_removeScreenPlateLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_removeScreenPlateLinkPtr
newCallback_Plate_removeScreenPlateLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_removeScreenPlateLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_removeScreenPlateLinkPtr
newCallback_Plate_removeScreenPlateLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_removeScreenPlateLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_removeAllScreenPlateLinkSet : public Callback_Plate_removeAllScreenPlateLinkSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Plate_removeAllScreenPlateLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Plate_removeAllScreenPlateLinkSetPtr
newCallback_Plate_removeAllScreenPlateLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_removeAllScreenPlateLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_removeAllScreenPlateLinkSetPtr
newCallback_Plate_removeAllScreenPlateLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_removeAllScreenPlateLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Plate_removeAllScreenPlateLinkSetPtr
newCallback_Plate_removeAllScreenPlateLinkSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_removeAllScreenPlateLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_removeAllScreenPlateLinkSetPtr
newCallback_Plate_removeAllScreenPlateLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_removeAllScreenPlateLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_removeAllScreenPlateLinkSet : public Callback_Plate_removeAllScreenPlateLinkSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Plate_removeAllScreenPlateLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Plate_removeAllScreenPlateLinkSetPtr
newCallback_Plate_removeAllScreenPlateLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_removeAllScreenPlateLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_removeAllScreenPlateLinkSetPtr
newCallback_Plate_removeAllScreenPlateLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_removeAllScreenPlateLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_removeAllScreenPlateLinkSetPtr
newCallback_Plate_removeAllScreenPlateLinkSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_removeAllScreenPlateLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_removeAllScreenPlateLinkSetPtr
newCallback_Plate_removeAllScreenPlateLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_removeAllScreenPlateLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_clearScreenLinks : public Callback_Plate_clearScreenLinks_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Plate_clearScreenLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Plate_clearScreenLinksPtr
newCallback_Plate_clearScreenLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_clearScreenLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_clearScreenLinksPtr
newCallback_Plate_clearScreenLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_clearScreenLinks<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Plate_clearScreenLinksPtr
newCallback_Plate_clearScreenLinks(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_clearScreenLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_clearScreenLinksPtr
newCallback_Plate_clearScreenLinks(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_clearScreenLinks<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_clearScreenLinks : public Callback_Plate_clearScreenLinks_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Plate_clearScreenLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Plate_clearScreenLinksPtr
newCallback_Plate_clearScreenLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_clearScreenLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_clearScreenLinksPtr
newCallback_Plate_clearScreenLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_clearScreenLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_clearScreenLinksPtr
newCallback_Plate_clearScreenLinks(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_clearScreenLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_clearScreenLinksPtr
newCallback_Plate_clearScreenLinks(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_clearScreenLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_reloadScreenLinks : public Callback_Plate_reloadScreenLinks_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Plate_reloadScreenLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Plate_reloadScreenLinksPtr
newCallback_Plate_reloadScreenLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_reloadScreenLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_reloadScreenLinksPtr
newCallback_Plate_reloadScreenLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_reloadScreenLinks<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Plate_reloadScreenLinksPtr
newCallback_Plate_reloadScreenLinks(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_reloadScreenLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_reloadScreenLinksPtr
newCallback_Plate_reloadScreenLinks(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_reloadScreenLinks<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_reloadScreenLinks : public Callback_Plate_reloadScreenLinks_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Plate_reloadScreenLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Plate_reloadScreenLinksPtr
newCallback_Plate_reloadScreenLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_reloadScreenLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_reloadScreenLinksPtr
newCallback_Plate_reloadScreenLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_reloadScreenLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_reloadScreenLinksPtr
newCallback_Plate_reloadScreenLinks(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_reloadScreenLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_reloadScreenLinksPtr
newCallback_Plate_reloadScreenLinks(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_reloadScreenLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_getScreenLinksCountPerOwner : public Callback_Plate_getScreenLinksCountPerOwner_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::sys::CountMap&);

    CallbackNC_Plate_getScreenLinksCountPerOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
        ::omero::sys::CountMap __ret;
        try
        {
            __ret = __proxy->end_getScreenLinksCountPerOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Plate_getScreenLinksCountPerOwnerPtr
newCallback_Plate_getScreenLinksCountPerOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::CountMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_getScreenLinksCountPerOwner<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_getScreenLinksCountPerOwnerPtr
newCallback_Plate_getScreenLinksCountPerOwner(T* instance, void (T::*cb)(const ::omero::sys::CountMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_getScreenLinksCountPerOwner<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_getScreenLinksCountPerOwner : public Callback_Plate_getScreenLinksCountPerOwner_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::sys::CountMap&, const CT&);

    Callback_Plate_getScreenLinksCountPerOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
        ::omero::sys::CountMap __ret;
        try
        {
            __ret = __proxy->end_getScreenLinksCountPerOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Plate_getScreenLinksCountPerOwnerPtr
newCallback_Plate_getScreenLinksCountPerOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::CountMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_getScreenLinksCountPerOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_getScreenLinksCountPerOwnerPtr
newCallback_Plate_getScreenLinksCountPerOwner(T* instance, void (T::*cb)(const ::omero::sys::CountMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_getScreenLinksCountPerOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_linkScreen : public Callback_Plate_linkScreen_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::ScreenPlateLinkPtr&);

    CallbackNC_Plate_linkScreen(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
        ::omero::model::ScreenPlateLinkPtr __ret;
        try
        {
            __ret = __proxy->end_linkScreen(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Plate_linkScreenPtr
newCallback_Plate_linkScreen(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ScreenPlateLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_linkScreen<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_linkScreenPtr
newCallback_Plate_linkScreen(T* instance, void (T::*cb)(const ::omero::model::ScreenPlateLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_linkScreen<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_linkScreen : public Callback_Plate_linkScreen_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::ScreenPlateLinkPtr&, const CT&);

    Callback_Plate_linkScreen(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
        ::omero::model::ScreenPlateLinkPtr __ret;
        try
        {
            __ret = __proxy->end_linkScreen(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Plate_linkScreenPtr
newCallback_Plate_linkScreen(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ScreenPlateLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_linkScreen<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_linkScreenPtr
newCallback_Plate_linkScreen(T* instance, void (T::*cb)(const ::omero::model::ScreenPlateLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_linkScreen<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_addScreenPlateLinkToBoth : public Callback_Plate_addScreenPlateLinkToBoth_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Plate_addScreenPlateLinkToBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Plate_addScreenPlateLinkToBothPtr
newCallback_Plate_addScreenPlateLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_addScreenPlateLinkToBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_addScreenPlateLinkToBothPtr
newCallback_Plate_addScreenPlateLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_addScreenPlateLinkToBoth<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Plate_addScreenPlateLinkToBothPtr
newCallback_Plate_addScreenPlateLinkToBoth(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_addScreenPlateLinkToBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_addScreenPlateLinkToBothPtr
newCallback_Plate_addScreenPlateLinkToBoth(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_addScreenPlateLinkToBoth<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_addScreenPlateLinkToBoth : public Callback_Plate_addScreenPlateLinkToBoth_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Plate_addScreenPlateLinkToBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Plate_addScreenPlateLinkToBothPtr
newCallback_Plate_addScreenPlateLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_addScreenPlateLinkToBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_addScreenPlateLinkToBothPtr
newCallback_Plate_addScreenPlateLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_addScreenPlateLinkToBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_addScreenPlateLinkToBothPtr
newCallback_Plate_addScreenPlateLinkToBoth(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_addScreenPlateLinkToBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_addScreenPlateLinkToBothPtr
newCallback_Plate_addScreenPlateLinkToBoth(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_addScreenPlateLinkToBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_findScreenPlateLink : public Callback_Plate_findScreenPlateLink_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::PlateScreenLinksSeq&);

    CallbackNC_Plate_findScreenPlateLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
        ::omero::model::PlateScreenLinksSeq __ret;
        try
        {
            __ret = __proxy->end_findScreenPlateLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Plate_findScreenPlateLinkPtr
newCallback_Plate_findScreenPlateLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PlateScreenLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_findScreenPlateLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_findScreenPlateLinkPtr
newCallback_Plate_findScreenPlateLink(T* instance, void (T::*cb)(const ::omero::model::PlateScreenLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_findScreenPlateLink<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_findScreenPlateLink : public Callback_Plate_findScreenPlateLink_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::PlateScreenLinksSeq&, const CT&);

    Callback_Plate_findScreenPlateLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
        ::omero::model::PlateScreenLinksSeq __ret;
        try
        {
            __ret = __proxy->end_findScreenPlateLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Plate_findScreenPlateLinkPtr
newCallback_Plate_findScreenPlateLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PlateScreenLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_findScreenPlateLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_findScreenPlateLinkPtr
newCallback_Plate_findScreenPlateLink(T* instance, void (T::*cb)(const ::omero::model::PlateScreenLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_findScreenPlateLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_unlinkScreen : public Callback_Plate_unlinkScreen_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Plate_unlinkScreen(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Plate_unlinkScreenPtr
newCallback_Plate_unlinkScreen(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_unlinkScreen<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_unlinkScreenPtr
newCallback_Plate_unlinkScreen(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_unlinkScreen<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Plate_unlinkScreenPtr
newCallback_Plate_unlinkScreen(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_unlinkScreen<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_unlinkScreenPtr
newCallback_Plate_unlinkScreen(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_unlinkScreen<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_unlinkScreen : public Callback_Plate_unlinkScreen_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Plate_unlinkScreen(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Plate_unlinkScreenPtr
newCallback_Plate_unlinkScreen(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_unlinkScreen<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_unlinkScreenPtr
newCallback_Plate_unlinkScreen(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_unlinkScreen<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_unlinkScreenPtr
newCallback_Plate_unlinkScreen(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_unlinkScreen<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_unlinkScreenPtr
newCallback_Plate_unlinkScreen(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_unlinkScreen<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_removeScreenPlateLinkFromBoth : public Callback_Plate_removeScreenPlateLinkFromBoth_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Plate_removeScreenPlateLinkFromBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Plate_removeScreenPlateLinkFromBothPtr
newCallback_Plate_removeScreenPlateLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_removeScreenPlateLinkFromBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_removeScreenPlateLinkFromBothPtr
newCallback_Plate_removeScreenPlateLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_removeScreenPlateLinkFromBoth<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Plate_removeScreenPlateLinkFromBothPtr
newCallback_Plate_removeScreenPlateLinkFromBoth(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_removeScreenPlateLinkFromBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_removeScreenPlateLinkFromBothPtr
newCallback_Plate_removeScreenPlateLinkFromBoth(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_removeScreenPlateLinkFromBoth<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_removeScreenPlateLinkFromBoth : public Callback_Plate_removeScreenPlateLinkFromBoth_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Plate_removeScreenPlateLinkFromBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Plate_removeScreenPlateLinkFromBothPtr
newCallback_Plate_removeScreenPlateLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_removeScreenPlateLinkFromBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_removeScreenPlateLinkFromBothPtr
newCallback_Plate_removeScreenPlateLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_removeScreenPlateLinkFromBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_removeScreenPlateLinkFromBothPtr
newCallback_Plate_removeScreenPlateLinkFromBoth(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_removeScreenPlateLinkFromBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_removeScreenPlateLinkFromBothPtr
newCallback_Plate_removeScreenPlateLinkFromBoth(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_removeScreenPlateLinkFromBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_linkedScreenList : public Callback_Plate_linkedScreenList_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::PlateLinkedScreenSeq&);

    CallbackNC_Plate_linkedScreenList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
        ::omero::model::PlateLinkedScreenSeq __ret;
        try
        {
            __ret = __proxy->end_linkedScreenList(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Plate_linkedScreenListPtr
newCallback_Plate_linkedScreenList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PlateLinkedScreenSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_linkedScreenList<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_linkedScreenListPtr
newCallback_Plate_linkedScreenList(T* instance, void (T::*cb)(const ::omero::model::PlateLinkedScreenSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_linkedScreenList<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_linkedScreenList : public Callback_Plate_linkedScreenList_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::PlateLinkedScreenSeq&, const CT&);

    Callback_Plate_linkedScreenList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
        ::omero::model::PlateLinkedScreenSeq __ret;
        try
        {
            __ret = __proxy->end_linkedScreenList(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Plate_linkedScreenListPtr
newCallback_Plate_linkedScreenList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PlateLinkedScreenSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_linkedScreenList<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_linkedScreenListPtr
newCallback_Plate_linkedScreenList(T* instance, void (T::*cb)(const ::omero::model::PlateLinkedScreenSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_linkedScreenList<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_unloadWells : public Callback_Plate_unloadWells_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Plate_unloadWells(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Plate_unloadWellsPtr
newCallback_Plate_unloadWells(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_unloadWells<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_unloadWellsPtr
newCallback_Plate_unloadWells(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_unloadWells<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Plate_unloadWellsPtr
newCallback_Plate_unloadWells(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_unloadWells<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_unloadWellsPtr
newCallback_Plate_unloadWells(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_unloadWells<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_unloadWells : public Callback_Plate_unloadWells_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Plate_unloadWells(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Plate_unloadWellsPtr
newCallback_Plate_unloadWells(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_unloadWells<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_unloadWellsPtr
newCallback_Plate_unloadWells(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_unloadWells<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_unloadWellsPtr
newCallback_Plate_unloadWells(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_unloadWells<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_unloadWellsPtr
newCallback_Plate_unloadWells(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_unloadWells<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_sizeOfWells : public Callback_Plate_sizeOfWells_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Plate_sizeOfWells(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfWells(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Plate_sizeOfWellsPtr
newCallback_Plate_sizeOfWells(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_sizeOfWells<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_sizeOfWellsPtr
newCallback_Plate_sizeOfWells(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_sizeOfWells<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_sizeOfWells : public Callback_Plate_sizeOfWells_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Plate_sizeOfWells(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfWells(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Plate_sizeOfWellsPtr
newCallback_Plate_sizeOfWells(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_sizeOfWells<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_sizeOfWellsPtr
newCallback_Plate_sizeOfWells(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_sizeOfWells<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_copyWells : public Callback_Plate_copyWells_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::PlateWellsSeq&);

    CallbackNC_Plate_copyWells(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
        ::omero::model::PlateWellsSeq __ret;
        try
        {
            __ret = __proxy->end_copyWells(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Plate_copyWellsPtr
newCallback_Plate_copyWells(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PlateWellsSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_copyWells<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_copyWellsPtr
newCallback_Plate_copyWells(T* instance, void (T::*cb)(const ::omero::model::PlateWellsSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_copyWells<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_copyWells : public Callback_Plate_copyWells_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::PlateWellsSeq&, const CT&);

    Callback_Plate_copyWells(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
        ::omero::model::PlateWellsSeq __ret;
        try
        {
            __ret = __proxy->end_copyWells(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Plate_copyWellsPtr
newCallback_Plate_copyWells(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PlateWellsSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_copyWells<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_copyWellsPtr
newCallback_Plate_copyWells(T* instance, void (T::*cb)(const ::omero::model::PlateWellsSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_copyWells<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_addWell : public Callback_Plate_addWell_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Plate_addWell(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Plate_addWellPtr
newCallback_Plate_addWell(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_addWell<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_addWellPtr
newCallback_Plate_addWell(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_addWell<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Plate_addWellPtr
newCallback_Plate_addWell(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_addWell<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_addWellPtr
newCallback_Plate_addWell(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_addWell<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_addWell : public Callback_Plate_addWell_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Plate_addWell(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Plate_addWellPtr
newCallback_Plate_addWell(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_addWell<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_addWellPtr
newCallback_Plate_addWell(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_addWell<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_addWellPtr
newCallback_Plate_addWell(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_addWell<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_addWellPtr
newCallback_Plate_addWell(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_addWell<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_addAllWellSet : public Callback_Plate_addAllWellSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Plate_addAllWellSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Plate_addAllWellSetPtr
newCallback_Plate_addAllWellSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_addAllWellSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_addAllWellSetPtr
newCallback_Plate_addAllWellSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_addAllWellSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Plate_addAllWellSetPtr
newCallback_Plate_addAllWellSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_addAllWellSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_addAllWellSetPtr
newCallback_Plate_addAllWellSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_addAllWellSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_addAllWellSet : public Callback_Plate_addAllWellSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Plate_addAllWellSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Plate_addAllWellSetPtr
newCallback_Plate_addAllWellSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_addAllWellSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_addAllWellSetPtr
newCallback_Plate_addAllWellSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_addAllWellSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_addAllWellSetPtr
newCallback_Plate_addAllWellSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_addAllWellSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_addAllWellSetPtr
newCallback_Plate_addAllWellSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_addAllWellSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_removeWell : public Callback_Plate_removeWell_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Plate_removeWell(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Plate_removeWellPtr
newCallback_Plate_removeWell(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_removeWell<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_removeWellPtr
newCallback_Plate_removeWell(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_removeWell<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Plate_removeWellPtr
newCallback_Plate_removeWell(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_removeWell<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_removeWellPtr
newCallback_Plate_removeWell(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_removeWell<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_removeWell : public Callback_Plate_removeWell_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Plate_removeWell(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Plate_removeWellPtr
newCallback_Plate_removeWell(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_removeWell<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_removeWellPtr
newCallback_Plate_removeWell(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_removeWell<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_removeWellPtr
newCallback_Plate_removeWell(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_removeWell<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_removeWellPtr
newCallback_Plate_removeWell(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_removeWell<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_removeAllWellSet : public Callback_Plate_removeAllWellSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Plate_removeAllWellSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Plate_removeAllWellSetPtr
newCallback_Plate_removeAllWellSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_removeAllWellSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_removeAllWellSetPtr
newCallback_Plate_removeAllWellSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_removeAllWellSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Plate_removeAllWellSetPtr
newCallback_Plate_removeAllWellSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_removeAllWellSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_removeAllWellSetPtr
newCallback_Plate_removeAllWellSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_removeAllWellSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_removeAllWellSet : public Callback_Plate_removeAllWellSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Plate_removeAllWellSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Plate_removeAllWellSetPtr
newCallback_Plate_removeAllWellSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_removeAllWellSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_removeAllWellSetPtr
newCallback_Plate_removeAllWellSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_removeAllWellSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_removeAllWellSetPtr
newCallback_Plate_removeAllWellSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_removeAllWellSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_removeAllWellSetPtr
newCallback_Plate_removeAllWellSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_removeAllWellSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_clearWells : public Callback_Plate_clearWells_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Plate_clearWells(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Plate_clearWellsPtr
newCallback_Plate_clearWells(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_clearWells<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_clearWellsPtr
newCallback_Plate_clearWells(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_clearWells<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Plate_clearWellsPtr
newCallback_Plate_clearWells(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_clearWells<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_clearWellsPtr
newCallback_Plate_clearWells(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_clearWells<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_clearWells : public Callback_Plate_clearWells_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Plate_clearWells(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Plate_clearWellsPtr
newCallback_Plate_clearWells(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_clearWells<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_clearWellsPtr
newCallback_Plate_clearWells(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_clearWells<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_clearWellsPtr
newCallback_Plate_clearWells(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_clearWells<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_clearWellsPtr
newCallback_Plate_clearWells(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_clearWells<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_reloadWells : public Callback_Plate_reloadWells_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Plate_reloadWells(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Plate_reloadWellsPtr
newCallback_Plate_reloadWells(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_reloadWells<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_reloadWellsPtr
newCallback_Plate_reloadWells(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_reloadWells<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Plate_reloadWellsPtr
newCallback_Plate_reloadWells(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_reloadWells<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_reloadWellsPtr
newCallback_Plate_reloadWells(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_reloadWells<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_reloadWells : public Callback_Plate_reloadWells_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Plate_reloadWells(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Plate_reloadWellsPtr
newCallback_Plate_reloadWells(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_reloadWells<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_reloadWellsPtr
newCallback_Plate_reloadWells(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_reloadWells<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_reloadWellsPtr
newCallback_Plate_reloadWells(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_reloadWells<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_reloadWellsPtr
newCallback_Plate_reloadWells(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_reloadWells<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_unloadPlateAcquisitions : public Callback_Plate_unloadPlateAcquisitions_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Plate_unloadPlateAcquisitions(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Plate_unloadPlateAcquisitionsPtr
newCallback_Plate_unloadPlateAcquisitions(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_unloadPlateAcquisitions<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_unloadPlateAcquisitionsPtr
newCallback_Plate_unloadPlateAcquisitions(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_unloadPlateAcquisitions<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Plate_unloadPlateAcquisitionsPtr
newCallback_Plate_unloadPlateAcquisitions(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_unloadPlateAcquisitions<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_unloadPlateAcquisitionsPtr
newCallback_Plate_unloadPlateAcquisitions(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_unloadPlateAcquisitions<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_unloadPlateAcquisitions : public Callback_Plate_unloadPlateAcquisitions_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Plate_unloadPlateAcquisitions(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Plate_unloadPlateAcquisitionsPtr
newCallback_Plate_unloadPlateAcquisitions(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_unloadPlateAcquisitions<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_unloadPlateAcquisitionsPtr
newCallback_Plate_unloadPlateAcquisitions(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_unloadPlateAcquisitions<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_unloadPlateAcquisitionsPtr
newCallback_Plate_unloadPlateAcquisitions(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_unloadPlateAcquisitions<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_unloadPlateAcquisitionsPtr
newCallback_Plate_unloadPlateAcquisitions(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_unloadPlateAcquisitions<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_sizeOfPlateAcquisitions : public Callback_Plate_sizeOfPlateAcquisitions_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Plate_sizeOfPlateAcquisitions(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfPlateAcquisitions(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Plate_sizeOfPlateAcquisitionsPtr
newCallback_Plate_sizeOfPlateAcquisitions(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_sizeOfPlateAcquisitions<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_sizeOfPlateAcquisitionsPtr
newCallback_Plate_sizeOfPlateAcquisitions(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_sizeOfPlateAcquisitions<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_sizeOfPlateAcquisitions : public Callback_Plate_sizeOfPlateAcquisitions_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Plate_sizeOfPlateAcquisitions(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfPlateAcquisitions(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Plate_sizeOfPlateAcquisitionsPtr
newCallback_Plate_sizeOfPlateAcquisitions(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_sizeOfPlateAcquisitions<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_sizeOfPlateAcquisitionsPtr
newCallback_Plate_sizeOfPlateAcquisitions(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_sizeOfPlateAcquisitions<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_copyPlateAcquisitions : public Callback_Plate_copyPlateAcquisitions_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::PlatePlateAcquisitionsSeq&);

    CallbackNC_Plate_copyPlateAcquisitions(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
        ::omero::model::PlatePlateAcquisitionsSeq __ret;
        try
        {
            __ret = __proxy->end_copyPlateAcquisitions(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Plate_copyPlateAcquisitionsPtr
newCallback_Plate_copyPlateAcquisitions(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PlatePlateAcquisitionsSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_copyPlateAcquisitions<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_copyPlateAcquisitionsPtr
newCallback_Plate_copyPlateAcquisitions(T* instance, void (T::*cb)(const ::omero::model::PlatePlateAcquisitionsSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_copyPlateAcquisitions<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_copyPlateAcquisitions : public Callback_Plate_copyPlateAcquisitions_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::PlatePlateAcquisitionsSeq&, const CT&);

    Callback_Plate_copyPlateAcquisitions(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
        ::omero::model::PlatePlateAcquisitionsSeq __ret;
        try
        {
            __ret = __proxy->end_copyPlateAcquisitions(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Plate_copyPlateAcquisitionsPtr
newCallback_Plate_copyPlateAcquisitions(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PlatePlateAcquisitionsSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_copyPlateAcquisitions<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_copyPlateAcquisitionsPtr
newCallback_Plate_copyPlateAcquisitions(T* instance, void (T::*cb)(const ::omero::model::PlatePlateAcquisitionsSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_copyPlateAcquisitions<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_addPlateAcquisition : public Callback_Plate_addPlateAcquisition_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Plate_addPlateAcquisition(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Plate_addPlateAcquisitionPtr
newCallback_Plate_addPlateAcquisition(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_addPlateAcquisition<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_addPlateAcquisitionPtr
newCallback_Plate_addPlateAcquisition(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_addPlateAcquisition<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Plate_addPlateAcquisitionPtr
newCallback_Plate_addPlateAcquisition(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_addPlateAcquisition<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_addPlateAcquisitionPtr
newCallback_Plate_addPlateAcquisition(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_addPlateAcquisition<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_addPlateAcquisition : public Callback_Plate_addPlateAcquisition_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Plate_addPlateAcquisition(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Plate_addPlateAcquisitionPtr
newCallback_Plate_addPlateAcquisition(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_addPlateAcquisition<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_addPlateAcquisitionPtr
newCallback_Plate_addPlateAcquisition(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_addPlateAcquisition<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_addPlateAcquisitionPtr
newCallback_Plate_addPlateAcquisition(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_addPlateAcquisition<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_addPlateAcquisitionPtr
newCallback_Plate_addPlateAcquisition(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_addPlateAcquisition<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_addAllPlateAcquisitionSet : public Callback_Plate_addAllPlateAcquisitionSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Plate_addAllPlateAcquisitionSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Plate_addAllPlateAcquisitionSetPtr
newCallback_Plate_addAllPlateAcquisitionSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_addAllPlateAcquisitionSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_addAllPlateAcquisitionSetPtr
newCallback_Plate_addAllPlateAcquisitionSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_addAllPlateAcquisitionSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Plate_addAllPlateAcquisitionSetPtr
newCallback_Plate_addAllPlateAcquisitionSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_addAllPlateAcquisitionSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_addAllPlateAcquisitionSetPtr
newCallback_Plate_addAllPlateAcquisitionSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_addAllPlateAcquisitionSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_addAllPlateAcquisitionSet : public Callback_Plate_addAllPlateAcquisitionSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Plate_addAllPlateAcquisitionSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Plate_addAllPlateAcquisitionSetPtr
newCallback_Plate_addAllPlateAcquisitionSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_addAllPlateAcquisitionSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_addAllPlateAcquisitionSetPtr
newCallback_Plate_addAllPlateAcquisitionSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_addAllPlateAcquisitionSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_addAllPlateAcquisitionSetPtr
newCallback_Plate_addAllPlateAcquisitionSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_addAllPlateAcquisitionSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_addAllPlateAcquisitionSetPtr
newCallback_Plate_addAllPlateAcquisitionSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_addAllPlateAcquisitionSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_removePlateAcquisition : public Callback_Plate_removePlateAcquisition_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Plate_removePlateAcquisition(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Plate_removePlateAcquisitionPtr
newCallback_Plate_removePlateAcquisition(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_removePlateAcquisition<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_removePlateAcquisitionPtr
newCallback_Plate_removePlateAcquisition(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_removePlateAcquisition<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Plate_removePlateAcquisitionPtr
newCallback_Plate_removePlateAcquisition(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_removePlateAcquisition<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_removePlateAcquisitionPtr
newCallback_Plate_removePlateAcquisition(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_removePlateAcquisition<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_removePlateAcquisition : public Callback_Plate_removePlateAcquisition_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Plate_removePlateAcquisition(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Plate_removePlateAcquisitionPtr
newCallback_Plate_removePlateAcquisition(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_removePlateAcquisition<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_removePlateAcquisitionPtr
newCallback_Plate_removePlateAcquisition(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_removePlateAcquisition<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_removePlateAcquisitionPtr
newCallback_Plate_removePlateAcquisition(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_removePlateAcquisition<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_removePlateAcquisitionPtr
newCallback_Plate_removePlateAcquisition(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_removePlateAcquisition<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_removeAllPlateAcquisitionSet : public Callback_Plate_removeAllPlateAcquisitionSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Plate_removeAllPlateAcquisitionSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Plate_removeAllPlateAcquisitionSetPtr
newCallback_Plate_removeAllPlateAcquisitionSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_removeAllPlateAcquisitionSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_removeAllPlateAcquisitionSetPtr
newCallback_Plate_removeAllPlateAcquisitionSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_removeAllPlateAcquisitionSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Plate_removeAllPlateAcquisitionSetPtr
newCallback_Plate_removeAllPlateAcquisitionSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_removeAllPlateAcquisitionSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_removeAllPlateAcquisitionSetPtr
newCallback_Plate_removeAllPlateAcquisitionSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_removeAllPlateAcquisitionSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_removeAllPlateAcquisitionSet : public Callback_Plate_removeAllPlateAcquisitionSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Plate_removeAllPlateAcquisitionSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Plate_removeAllPlateAcquisitionSetPtr
newCallback_Plate_removeAllPlateAcquisitionSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_removeAllPlateAcquisitionSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_removeAllPlateAcquisitionSetPtr
newCallback_Plate_removeAllPlateAcquisitionSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_removeAllPlateAcquisitionSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_removeAllPlateAcquisitionSetPtr
newCallback_Plate_removeAllPlateAcquisitionSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_removeAllPlateAcquisitionSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_removeAllPlateAcquisitionSetPtr
newCallback_Plate_removeAllPlateAcquisitionSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_removeAllPlateAcquisitionSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_clearPlateAcquisitions : public Callback_Plate_clearPlateAcquisitions_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Plate_clearPlateAcquisitions(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Plate_clearPlateAcquisitionsPtr
newCallback_Plate_clearPlateAcquisitions(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_clearPlateAcquisitions<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_clearPlateAcquisitionsPtr
newCallback_Plate_clearPlateAcquisitions(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_clearPlateAcquisitions<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Plate_clearPlateAcquisitionsPtr
newCallback_Plate_clearPlateAcquisitions(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_clearPlateAcquisitions<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_clearPlateAcquisitionsPtr
newCallback_Plate_clearPlateAcquisitions(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_clearPlateAcquisitions<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_clearPlateAcquisitions : public Callback_Plate_clearPlateAcquisitions_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Plate_clearPlateAcquisitions(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Plate_clearPlateAcquisitionsPtr
newCallback_Plate_clearPlateAcquisitions(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_clearPlateAcquisitions<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_clearPlateAcquisitionsPtr
newCallback_Plate_clearPlateAcquisitions(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_clearPlateAcquisitions<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_clearPlateAcquisitionsPtr
newCallback_Plate_clearPlateAcquisitions(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_clearPlateAcquisitions<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_clearPlateAcquisitionsPtr
newCallback_Plate_clearPlateAcquisitions(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_clearPlateAcquisitions<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_reloadPlateAcquisitions : public Callback_Plate_reloadPlateAcquisitions_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Plate_reloadPlateAcquisitions(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Plate_reloadPlateAcquisitionsPtr
newCallback_Plate_reloadPlateAcquisitions(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_reloadPlateAcquisitions<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_reloadPlateAcquisitionsPtr
newCallback_Plate_reloadPlateAcquisitions(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_reloadPlateAcquisitions<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Plate_reloadPlateAcquisitionsPtr
newCallback_Plate_reloadPlateAcquisitions(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_reloadPlateAcquisitions<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_reloadPlateAcquisitionsPtr
newCallback_Plate_reloadPlateAcquisitions(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_reloadPlateAcquisitions<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_reloadPlateAcquisitions : public Callback_Plate_reloadPlateAcquisitions_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Plate_reloadPlateAcquisitions(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Plate_reloadPlateAcquisitionsPtr
newCallback_Plate_reloadPlateAcquisitions(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_reloadPlateAcquisitions<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_reloadPlateAcquisitionsPtr
newCallback_Plate_reloadPlateAcquisitions(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_reloadPlateAcquisitions<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_reloadPlateAcquisitionsPtr
newCallback_Plate_reloadPlateAcquisitions(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_reloadPlateAcquisitions<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_reloadPlateAcquisitionsPtr
newCallback_Plate_reloadPlateAcquisitions(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_reloadPlateAcquisitions<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_unloadAnnotationLinks : public Callback_Plate_unloadAnnotationLinks_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Plate_unloadAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Plate_unloadAnnotationLinksPtr
newCallback_Plate_unloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_unloadAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_unloadAnnotationLinksPtr
newCallback_Plate_unloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_unloadAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Plate_unloadAnnotationLinksPtr
newCallback_Plate_unloadAnnotationLinks(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_unloadAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_unloadAnnotationLinksPtr
newCallback_Plate_unloadAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_unloadAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_unloadAnnotationLinks : public Callback_Plate_unloadAnnotationLinks_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Plate_unloadAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Plate_unloadAnnotationLinksPtr
newCallback_Plate_unloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_unloadAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_unloadAnnotationLinksPtr
newCallback_Plate_unloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_unloadAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_unloadAnnotationLinksPtr
newCallback_Plate_unloadAnnotationLinks(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_unloadAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_unloadAnnotationLinksPtr
newCallback_Plate_unloadAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_unloadAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_sizeOfAnnotationLinks : public Callback_Plate_sizeOfAnnotationLinks_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Plate_sizeOfAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfAnnotationLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Plate_sizeOfAnnotationLinksPtr
newCallback_Plate_sizeOfAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_sizeOfAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_sizeOfAnnotationLinksPtr
newCallback_Plate_sizeOfAnnotationLinks(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_sizeOfAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_sizeOfAnnotationLinks : public Callback_Plate_sizeOfAnnotationLinks_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Plate_sizeOfAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfAnnotationLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Plate_sizeOfAnnotationLinksPtr
newCallback_Plate_sizeOfAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_sizeOfAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_sizeOfAnnotationLinksPtr
newCallback_Plate_sizeOfAnnotationLinks(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_sizeOfAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_copyAnnotationLinks : public Callback_Plate_copyAnnotationLinks_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::PlateAnnotationLinksSeq&);

    CallbackNC_Plate_copyAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
        ::omero::model::PlateAnnotationLinksSeq __ret;
        try
        {
            __ret = __proxy->end_copyAnnotationLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Plate_copyAnnotationLinksPtr
newCallback_Plate_copyAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PlateAnnotationLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_copyAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_copyAnnotationLinksPtr
newCallback_Plate_copyAnnotationLinks(T* instance, void (T::*cb)(const ::omero::model::PlateAnnotationLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_copyAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_copyAnnotationLinks : public Callback_Plate_copyAnnotationLinks_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::PlateAnnotationLinksSeq&, const CT&);

    Callback_Plate_copyAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
        ::omero::model::PlateAnnotationLinksSeq __ret;
        try
        {
            __ret = __proxy->end_copyAnnotationLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Plate_copyAnnotationLinksPtr
newCallback_Plate_copyAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PlateAnnotationLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_copyAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_copyAnnotationLinksPtr
newCallback_Plate_copyAnnotationLinks(T* instance, void (T::*cb)(const ::omero::model::PlateAnnotationLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_copyAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_addPlateAnnotationLink : public Callback_Plate_addPlateAnnotationLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Plate_addPlateAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Plate_addPlateAnnotationLinkPtr
newCallback_Plate_addPlateAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_addPlateAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_addPlateAnnotationLinkPtr
newCallback_Plate_addPlateAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_addPlateAnnotationLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Plate_addPlateAnnotationLinkPtr
newCallback_Plate_addPlateAnnotationLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_addPlateAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_addPlateAnnotationLinkPtr
newCallback_Plate_addPlateAnnotationLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_addPlateAnnotationLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_addPlateAnnotationLink : public Callback_Plate_addPlateAnnotationLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Plate_addPlateAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Plate_addPlateAnnotationLinkPtr
newCallback_Plate_addPlateAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_addPlateAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_addPlateAnnotationLinkPtr
newCallback_Plate_addPlateAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_addPlateAnnotationLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_addPlateAnnotationLinkPtr
newCallback_Plate_addPlateAnnotationLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_addPlateAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_addPlateAnnotationLinkPtr
newCallback_Plate_addPlateAnnotationLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_addPlateAnnotationLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_addAllPlateAnnotationLinkSet : public Callback_Plate_addAllPlateAnnotationLinkSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Plate_addAllPlateAnnotationLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Plate_addAllPlateAnnotationLinkSetPtr
newCallback_Plate_addAllPlateAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_addAllPlateAnnotationLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_addAllPlateAnnotationLinkSetPtr
newCallback_Plate_addAllPlateAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_addAllPlateAnnotationLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Plate_addAllPlateAnnotationLinkSetPtr
newCallback_Plate_addAllPlateAnnotationLinkSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_addAllPlateAnnotationLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_addAllPlateAnnotationLinkSetPtr
newCallback_Plate_addAllPlateAnnotationLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_addAllPlateAnnotationLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_addAllPlateAnnotationLinkSet : public Callback_Plate_addAllPlateAnnotationLinkSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Plate_addAllPlateAnnotationLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Plate_addAllPlateAnnotationLinkSetPtr
newCallback_Plate_addAllPlateAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_addAllPlateAnnotationLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_addAllPlateAnnotationLinkSetPtr
newCallback_Plate_addAllPlateAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_addAllPlateAnnotationLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_addAllPlateAnnotationLinkSetPtr
newCallback_Plate_addAllPlateAnnotationLinkSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_addAllPlateAnnotationLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_addAllPlateAnnotationLinkSetPtr
newCallback_Plate_addAllPlateAnnotationLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_addAllPlateAnnotationLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_removePlateAnnotationLink : public Callback_Plate_removePlateAnnotationLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Plate_removePlateAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Plate_removePlateAnnotationLinkPtr
newCallback_Plate_removePlateAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_removePlateAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_removePlateAnnotationLinkPtr
newCallback_Plate_removePlateAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_removePlateAnnotationLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Plate_removePlateAnnotationLinkPtr
newCallback_Plate_removePlateAnnotationLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_removePlateAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_removePlateAnnotationLinkPtr
newCallback_Plate_removePlateAnnotationLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_removePlateAnnotationLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_removePlateAnnotationLink : public Callback_Plate_removePlateAnnotationLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Plate_removePlateAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Plate_removePlateAnnotationLinkPtr
newCallback_Plate_removePlateAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_removePlateAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_removePlateAnnotationLinkPtr
newCallback_Plate_removePlateAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_removePlateAnnotationLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_removePlateAnnotationLinkPtr
newCallback_Plate_removePlateAnnotationLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_removePlateAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_removePlateAnnotationLinkPtr
newCallback_Plate_removePlateAnnotationLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_removePlateAnnotationLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_removeAllPlateAnnotationLinkSet : public Callback_Plate_removeAllPlateAnnotationLinkSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Plate_removeAllPlateAnnotationLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Plate_removeAllPlateAnnotationLinkSetPtr
newCallback_Plate_removeAllPlateAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_removeAllPlateAnnotationLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_removeAllPlateAnnotationLinkSetPtr
newCallback_Plate_removeAllPlateAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_removeAllPlateAnnotationLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Plate_removeAllPlateAnnotationLinkSetPtr
newCallback_Plate_removeAllPlateAnnotationLinkSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_removeAllPlateAnnotationLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_removeAllPlateAnnotationLinkSetPtr
newCallback_Plate_removeAllPlateAnnotationLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_removeAllPlateAnnotationLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_removeAllPlateAnnotationLinkSet : public Callback_Plate_removeAllPlateAnnotationLinkSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Plate_removeAllPlateAnnotationLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Plate_removeAllPlateAnnotationLinkSetPtr
newCallback_Plate_removeAllPlateAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_removeAllPlateAnnotationLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_removeAllPlateAnnotationLinkSetPtr
newCallback_Plate_removeAllPlateAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_removeAllPlateAnnotationLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_removeAllPlateAnnotationLinkSetPtr
newCallback_Plate_removeAllPlateAnnotationLinkSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_removeAllPlateAnnotationLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_removeAllPlateAnnotationLinkSetPtr
newCallback_Plate_removeAllPlateAnnotationLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_removeAllPlateAnnotationLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_clearAnnotationLinks : public Callback_Plate_clearAnnotationLinks_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Plate_clearAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Plate_clearAnnotationLinksPtr
newCallback_Plate_clearAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_clearAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_clearAnnotationLinksPtr
newCallback_Plate_clearAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_clearAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Plate_clearAnnotationLinksPtr
newCallback_Plate_clearAnnotationLinks(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_clearAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_clearAnnotationLinksPtr
newCallback_Plate_clearAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_clearAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_clearAnnotationLinks : public Callback_Plate_clearAnnotationLinks_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Plate_clearAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Plate_clearAnnotationLinksPtr
newCallback_Plate_clearAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_clearAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_clearAnnotationLinksPtr
newCallback_Plate_clearAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_clearAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_clearAnnotationLinksPtr
newCallback_Plate_clearAnnotationLinks(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_clearAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_clearAnnotationLinksPtr
newCallback_Plate_clearAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_clearAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_reloadAnnotationLinks : public Callback_Plate_reloadAnnotationLinks_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Plate_reloadAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Plate_reloadAnnotationLinksPtr
newCallback_Plate_reloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_reloadAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_reloadAnnotationLinksPtr
newCallback_Plate_reloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_reloadAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Plate_reloadAnnotationLinksPtr
newCallback_Plate_reloadAnnotationLinks(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_reloadAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_reloadAnnotationLinksPtr
newCallback_Plate_reloadAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_reloadAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_reloadAnnotationLinks : public Callback_Plate_reloadAnnotationLinks_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Plate_reloadAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Plate_reloadAnnotationLinksPtr
newCallback_Plate_reloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_reloadAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_reloadAnnotationLinksPtr
newCallback_Plate_reloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_reloadAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_reloadAnnotationLinksPtr
newCallback_Plate_reloadAnnotationLinks(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_reloadAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_reloadAnnotationLinksPtr
newCallback_Plate_reloadAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_reloadAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_getAnnotationLinksCountPerOwner : public Callback_Plate_getAnnotationLinksCountPerOwner_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::sys::CountMap&);

    CallbackNC_Plate_getAnnotationLinksCountPerOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
        ::omero::sys::CountMap __ret;
        try
        {
            __ret = __proxy->end_getAnnotationLinksCountPerOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Plate_getAnnotationLinksCountPerOwnerPtr
newCallback_Plate_getAnnotationLinksCountPerOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::CountMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_getAnnotationLinksCountPerOwner<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_getAnnotationLinksCountPerOwnerPtr
newCallback_Plate_getAnnotationLinksCountPerOwner(T* instance, void (T::*cb)(const ::omero::sys::CountMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_getAnnotationLinksCountPerOwner<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_getAnnotationLinksCountPerOwner : public Callback_Plate_getAnnotationLinksCountPerOwner_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::sys::CountMap&, const CT&);

    Callback_Plate_getAnnotationLinksCountPerOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
        ::omero::sys::CountMap __ret;
        try
        {
            __ret = __proxy->end_getAnnotationLinksCountPerOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Plate_getAnnotationLinksCountPerOwnerPtr
newCallback_Plate_getAnnotationLinksCountPerOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::CountMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_getAnnotationLinksCountPerOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_getAnnotationLinksCountPerOwnerPtr
newCallback_Plate_getAnnotationLinksCountPerOwner(T* instance, void (T::*cb)(const ::omero::sys::CountMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_getAnnotationLinksCountPerOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_linkAnnotation : public Callback_Plate_linkAnnotation_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::PlateAnnotationLinkPtr&);

    CallbackNC_Plate_linkAnnotation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
        ::omero::model::PlateAnnotationLinkPtr __ret;
        try
        {
            __ret = __proxy->end_linkAnnotation(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Plate_linkAnnotationPtr
newCallback_Plate_linkAnnotation(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PlateAnnotationLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_linkAnnotation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_linkAnnotationPtr
newCallback_Plate_linkAnnotation(T* instance, void (T::*cb)(const ::omero::model::PlateAnnotationLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_linkAnnotation<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_linkAnnotation : public Callback_Plate_linkAnnotation_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::PlateAnnotationLinkPtr&, const CT&);

    Callback_Plate_linkAnnotation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
        ::omero::model::PlateAnnotationLinkPtr __ret;
        try
        {
            __ret = __proxy->end_linkAnnotation(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Plate_linkAnnotationPtr
newCallback_Plate_linkAnnotation(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PlateAnnotationLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_linkAnnotation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_linkAnnotationPtr
newCallback_Plate_linkAnnotation(T* instance, void (T::*cb)(const ::omero::model::PlateAnnotationLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_linkAnnotation<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_addPlateAnnotationLinkToBoth : public Callback_Plate_addPlateAnnotationLinkToBoth_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Plate_addPlateAnnotationLinkToBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Plate_addPlateAnnotationLinkToBothPtr
newCallback_Plate_addPlateAnnotationLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_addPlateAnnotationLinkToBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_addPlateAnnotationLinkToBothPtr
newCallback_Plate_addPlateAnnotationLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_addPlateAnnotationLinkToBoth<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Plate_addPlateAnnotationLinkToBothPtr
newCallback_Plate_addPlateAnnotationLinkToBoth(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_addPlateAnnotationLinkToBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_addPlateAnnotationLinkToBothPtr
newCallback_Plate_addPlateAnnotationLinkToBoth(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_addPlateAnnotationLinkToBoth<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_addPlateAnnotationLinkToBoth : public Callback_Plate_addPlateAnnotationLinkToBoth_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Plate_addPlateAnnotationLinkToBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Plate_addPlateAnnotationLinkToBothPtr
newCallback_Plate_addPlateAnnotationLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_addPlateAnnotationLinkToBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_addPlateAnnotationLinkToBothPtr
newCallback_Plate_addPlateAnnotationLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_addPlateAnnotationLinkToBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_addPlateAnnotationLinkToBothPtr
newCallback_Plate_addPlateAnnotationLinkToBoth(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_addPlateAnnotationLinkToBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_addPlateAnnotationLinkToBothPtr
newCallback_Plate_addPlateAnnotationLinkToBoth(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_addPlateAnnotationLinkToBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_findPlateAnnotationLink : public Callback_Plate_findPlateAnnotationLink_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::PlateAnnotationLinksSeq&);

    CallbackNC_Plate_findPlateAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
        ::omero::model::PlateAnnotationLinksSeq __ret;
        try
        {
            __ret = __proxy->end_findPlateAnnotationLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Plate_findPlateAnnotationLinkPtr
newCallback_Plate_findPlateAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PlateAnnotationLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_findPlateAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_findPlateAnnotationLinkPtr
newCallback_Plate_findPlateAnnotationLink(T* instance, void (T::*cb)(const ::omero::model::PlateAnnotationLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_findPlateAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_findPlateAnnotationLink : public Callback_Plate_findPlateAnnotationLink_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::PlateAnnotationLinksSeq&, const CT&);

    Callback_Plate_findPlateAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
        ::omero::model::PlateAnnotationLinksSeq __ret;
        try
        {
            __ret = __proxy->end_findPlateAnnotationLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Plate_findPlateAnnotationLinkPtr
newCallback_Plate_findPlateAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PlateAnnotationLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_findPlateAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_findPlateAnnotationLinkPtr
newCallback_Plate_findPlateAnnotationLink(T* instance, void (T::*cb)(const ::omero::model::PlateAnnotationLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_findPlateAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_unlinkAnnotation : public Callback_Plate_unlinkAnnotation_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Plate_unlinkAnnotation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Plate_unlinkAnnotationPtr
newCallback_Plate_unlinkAnnotation(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_unlinkAnnotation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_unlinkAnnotationPtr
newCallback_Plate_unlinkAnnotation(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_unlinkAnnotation<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Plate_unlinkAnnotationPtr
newCallback_Plate_unlinkAnnotation(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_unlinkAnnotation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_unlinkAnnotationPtr
newCallback_Plate_unlinkAnnotation(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_unlinkAnnotation<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_unlinkAnnotation : public Callback_Plate_unlinkAnnotation_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Plate_unlinkAnnotation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Plate_unlinkAnnotationPtr
newCallback_Plate_unlinkAnnotation(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_unlinkAnnotation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_unlinkAnnotationPtr
newCallback_Plate_unlinkAnnotation(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_unlinkAnnotation<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_unlinkAnnotationPtr
newCallback_Plate_unlinkAnnotation(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_unlinkAnnotation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_unlinkAnnotationPtr
newCallback_Plate_unlinkAnnotation(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_unlinkAnnotation<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_removePlateAnnotationLinkFromBoth : public Callback_Plate_removePlateAnnotationLinkFromBoth_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Plate_removePlateAnnotationLinkFromBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Plate_removePlateAnnotationLinkFromBothPtr
newCallback_Plate_removePlateAnnotationLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_removePlateAnnotationLinkFromBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_removePlateAnnotationLinkFromBothPtr
newCallback_Plate_removePlateAnnotationLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_removePlateAnnotationLinkFromBoth<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Plate_removePlateAnnotationLinkFromBothPtr
newCallback_Plate_removePlateAnnotationLinkFromBoth(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_removePlateAnnotationLinkFromBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_removePlateAnnotationLinkFromBothPtr
newCallback_Plate_removePlateAnnotationLinkFromBoth(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_removePlateAnnotationLinkFromBoth<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_removePlateAnnotationLinkFromBoth : public Callback_Plate_removePlateAnnotationLinkFromBoth_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Plate_removePlateAnnotationLinkFromBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Plate_removePlateAnnotationLinkFromBothPtr
newCallback_Plate_removePlateAnnotationLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_removePlateAnnotationLinkFromBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_removePlateAnnotationLinkFromBothPtr
newCallback_Plate_removePlateAnnotationLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_removePlateAnnotationLinkFromBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_removePlateAnnotationLinkFromBothPtr
newCallback_Plate_removePlateAnnotationLinkFromBoth(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_removePlateAnnotationLinkFromBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_removePlateAnnotationLinkFromBothPtr
newCallback_Plate_removePlateAnnotationLinkFromBoth(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_removePlateAnnotationLinkFromBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_linkedAnnotationList : public Callback_Plate_linkedAnnotationList_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::PlateLinkedAnnotationSeq&);

    CallbackNC_Plate_linkedAnnotationList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
        ::omero::model::PlateLinkedAnnotationSeq __ret;
        try
        {
            __ret = __proxy->end_linkedAnnotationList(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Plate_linkedAnnotationListPtr
newCallback_Plate_linkedAnnotationList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PlateLinkedAnnotationSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_linkedAnnotationList<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_linkedAnnotationListPtr
newCallback_Plate_linkedAnnotationList(T* instance, void (T::*cb)(const ::omero::model::PlateLinkedAnnotationSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_linkedAnnotationList<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_linkedAnnotationList : public Callback_Plate_linkedAnnotationList_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::PlateLinkedAnnotationSeq&, const CT&);

    Callback_Plate_linkedAnnotationList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
        ::omero::model::PlateLinkedAnnotationSeq __ret;
        try
        {
            __ret = __proxy->end_linkedAnnotationList(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Plate_linkedAnnotationListPtr
newCallback_Plate_linkedAnnotationList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PlateLinkedAnnotationSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_linkedAnnotationList<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_linkedAnnotationListPtr
newCallback_Plate_linkedAnnotationList(T* instance, void (T::*cb)(const ::omero::model::PlateLinkedAnnotationSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_linkedAnnotationList<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_getName : public Callback_Plate_getName_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_Plate_getName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getName(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Plate_getNamePtr
newCallback_Plate_getName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_getName<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_getNamePtr
newCallback_Plate_getName(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_getName<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_getName : public Callback_Plate_getName_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_Plate_getName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getName(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Plate_getNamePtr
newCallback_Plate_getName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_getName<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_getNamePtr
newCallback_Plate_getName(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_getName<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_setName : public Callback_Plate_setName_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Plate_setName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Plate_setNamePtr
newCallback_Plate_setName(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_setName<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_setNamePtr
newCallback_Plate_setName(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_setName<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Plate_setNamePtr
newCallback_Plate_setName(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_setName<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_setNamePtr
newCallback_Plate_setName(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_setName<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_setName : public Callback_Plate_setName_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Plate_setName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Plate_setNamePtr
newCallback_Plate_setName(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_setName<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_setNamePtr
newCallback_Plate_setName(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_setName<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_setNamePtr
newCallback_Plate_setName(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_setName<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_setNamePtr
newCallback_Plate_setName(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_setName<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_getDescription : public Callback_Plate_getDescription_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_Plate_getDescription(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getDescription(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Plate_getDescriptionPtr
newCallback_Plate_getDescription(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_getDescription<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_getDescriptionPtr
newCallback_Plate_getDescription(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_getDescription<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_getDescription : public Callback_Plate_getDescription_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_Plate_getDescription(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlatePrx __proxy = ::omero::model::PlatePrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getDescription(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Plate_getDescriptionPtr
newCallback_Plate_getDescription(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_getDescription<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_getDescriptionPtr
newCallback_Plate_getDescription(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_getDescription<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Plate_setDescription : public Callback_Plate_setDescription_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Plate_setDescription(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Plate_setDescriptionPtr
newCallback_Plate_setDescription(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_setDescription<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_setDescriptionPtr
newCallback_Plate_setDescription(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_setDescription<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Plate_setDescriptionPtr
newCallback_Plate_setDescription(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_setDescription<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Plate_setDescriptionPtr
newCallback_Plate_setDescription(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Plate_setDescription<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Plate_setDescription : public Callback_Plate_setDescription_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Plate_setDescription(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Plate_setDescriptionPtr
newCallback_Plate_setDescription(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_setDescription<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_setDescriptionPtr
newCallback_Plate_setDescription(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_setDescription<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_setDescriptionPtr
newCallback_Plate_setDescription(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_setDescription<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Plate_setDescriptionPtr
newCallback_Plate_setDescription(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Plate_setDescription<T, CT>(instance, 0, excb, sentcb);
}

}

}

#endif
