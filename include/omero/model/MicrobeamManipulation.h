// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `MicrobeamManipulation.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_MicrobeamManipulation_h__
#define __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_MicrobeamManipulation_h__

#include <Ice/LocalObjectF.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/StreamF.h>
#include <omero/model/IObject.h>
#include <omero/RTypes.h>
#include <omero/System.h>
#include <omero/Collections.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace omero
{

namespace model
{

class MicrobeamManipulationType;

class LightSettings;

class Experiment;

class Details;

class MicrobeamManipulation;

}

}

}

namespace omero
{

namespace model
{

class MicrobeamManipulationType;
bool operator==(const MicrobeamManipulationType&, const MicrobeamManipulationType&);
bool operator<(const MicrobeamManipulationType&, const MicrobeamManipulationType&);

class LightSettings;
bool operator==(const LightSettings&, const LightSettings&);
bool operator<(const LightSettings&, const LightSettings&);

class Experiment;
bool operator==(const Experiment&, const Experiment&);
bool operator<(const Experiment&, const Experiment&);

class Details;
bool operator==(const Details&, const Details&);
bool operator<(const Details&, const Details&);

class MicrobeamManipulation;
bool operator==(const MicrobeamManipulation&, const MicrobeamManipulation&);
bool operator<(const MicrobeamManipulation&, const MicrobeamManipulation&);

}

}

namespace IceInternal
{

::Ice::Object* upCast(::omero::model::MicrobeamManipulationType*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::MicrobeamManipulationType*);

::Ice::Object* upCast(::omero::model::LightSettings*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::LightSettings*);

::Ice::Object* upCast(::omero::model::Experiment*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Experiment*);

::Ice::Object* upCast(::omero::model::Details*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Details*);

::Ice::Object* upCast(::omero::model::MicrobeamManipulation*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::MicrobeamManipulation*);

}

namespace omero
{

namespace model
{

typedef ::IceInternal::Handle< ::omero::model::MicrobeamManipulationType> MicrobeamManipulationTypePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::MicrobeamManipulationType> MicrobeamManipulationTypePrx;

void __read(::IceInternal::BasicStream*, MicrobeamManipulationTypePrx&);
void __patch__MicrobeamManipulationTypePtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::LightSettings> LightSettingsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::LightSettings> LightSettingsPrx;

void __read(::IceInternal::BasicStream*, LightSettingsPrx&);
void __patch__LightSettingsPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::Experiment> ExperimentPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Experiment> ExperimentPrx;

void __read(::IceInternal::BasicStream*, ExperimentPrx&);
void __patch__ExperimentPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::Details> DetailsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Details> DetailsPrx;

void __read(::IceInternal::BasicStream*, DetailsPrx&);
void __patch__DetailsPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::MicrobeamManipulation> MicrobeamManipulationPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::MicrobeamManipulation> MicrobeamManipulationPrx;

void __read(::IceInternal::BasicStream*, MicrobeamManipulationPrx&);
void __patch__MicrobeamManipulationPtr(void*, ::Ice::ObjectPtr&);

}

}

namespace omero
{

namespace model
{

typedef ::std::vector< ::omero::model::LightSettingsPtr> MicrobeamManipulationLightSourceSettingsSeq;
void __writeMicrobeamManipulationLightSourceSettingsSeq(::IceInternal::BasicStream*, const ::omero::model::LightSettingsPtr*, const ::omero::model::LightSettingsPtr*);
void __readMicrobeamManipulationLightSourceSettingsSeq(::IceInternal::BasicStream*, MicrobeamManipulationLightSourceSettingsSeq&);

}

}

namespace omero
{

namespace model
{

class Callback_MicrobeamManipulation_getVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MicrobeamManipulation_getVersion_Base> Callback_MicrobeamManipulation_getVersionPtr;

class Callback_MicrobeamManipulation_setVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MicrobeamManipulation_setVersion_Base> Callback_MicrobeamManipulation_setVersionPtr;

class Callback_MicrobeamManipulation_getType_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MicrobeamManipulation_getType_Base> Callback_MicrobeamManipulation_getTypePtr;

class Callback_MicrobeamManipulation_setType_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MicrobeamManipulation_setType_Base> Callback_MicrobeamManipulation_setTypePtr;

class Callback_MicrobeamManipulation_unloadLightSourceSettings_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MicrobeamManipulation_unloadLightSourceSettings_Base> Callback_MicrobeamManipulation_unloadLightSourceSettingsPtr;

class Callback_MicrobeamManipulation_sizeOfLightSourceSettings_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MicrobeamManipulation_sizeOfLightSourceSettings_Base> Callback_MicrobeamManipulation_sizeOfLightSourceSettingsPtr;

class Callback_MicrobeamManipulation_copyLightSourceSettings_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MicrobeamManipulation_copyLightSourceSettings_Base> Callback_MicrobeamManipulation_copyLightSourceSettingsPtr;

class Callback_MicrobeamManipulation_addLightSettings_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MicrobeamManipulation_addLightSettings_Base> Callback_MicrobeamManipulation_addLightSettingsPtr;

class Callback_MicrobeamManipulation_addAllLightSettingsSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MicrobeamManipulation_addAllLightSettingsSet_Base> Callback_MicrobeamManipulation_addAllLightSettingsSetPtr;

class Callback_MicrobeamManipulation_removeLightSettings_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MicrobeamManipulation_removeLightSettings_Base> Callback_MicrobeamManipulation_removeLightSettingsPtr;

class Callback_MicrobeamManipulation_removeAllLightSettingsSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MicrobeamManipulation_removeAllLightSettingsSet_Base> Callback_MicrobeamManipulation_removeAllLightSettingsSetPtr;

class Callback_MicrobeamManipulation_clearLightSourceSettings_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MicrobeamManipulation_clearLightSourceSettings_Base> Callback_MicrobeamManipulation_clearLightSourceSettingsPtr;

class Callback_MicrobeamManipulation_reloadLightSourceSettings_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MicrobeamManipulation_reloadLightSourceSettings_Base> Callback_MicrobeamManipulation_reloadLightSourceSettingsPtr;

class Callback_MicrobeamManipulation_getExperiment_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MicrobeamManipulation_getExperiment_Base> Callback_MicrobeamManipulation_getExperimentPtr;

class Callback_MicrobeamManipulation_setExperiment_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MicrobeamManipulation_setExperiment_Base> Callback_MicrobeamManipulation_setExperimentPtr;

class Callback_MicrobeamManipulation_getDescription_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MicrobeamManipulation_getDescription_Base> Callback_MicrobeamManipulation_getDescriptionPtr;

class Callback_MicrobeamManipulation_setDescription_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MicrobeamManipulation_setDescription_Base> Callback_MicrobeamManipulation_setDescriptionPtr;

}

}

namespace IceProxy
{

namespace omero
{

namespace model
{

class MicrobeamManipulation : virtual public ::IceProxy::omero::model::IObject
{
public:

    ::omero::RIntPtr getVersion()
    {
        return getVersion(0);
    }
    ::omero::RIntPtr getVersion(const ::Ice::Context& __ctx)
    {
        return getVersion(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getVersion()
    {
        return begin_getVersion(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx)
    {
        return begin_getVersion(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::omero::model::Callback_MicrobeamManipulation_getVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx, const ::omero::model::Callback_MicrobeamManipulation_getVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(&__ctx, __del, __cookie);
    }

    ::omero::RIntPtr end_getVersion(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RIntPtr getVersion(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setVersion(const ::omero::RIntPtr& theVersion)
    {
        setVersion(theVersion, 0);
    }
    void setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx)
    {
        setVersion(theVersion, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion)
    {
        return begin_setVersion(theVersion, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx)
    {
        return begin_setVersion(theVersion, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::omero::model::Callback_MicrobeamManipulation_setVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::omero::model::Callback_MicrobeamManipulation_setVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, &__ctx, __del, __cookie);
    }

    void end_setVersion(const ::Ice::AsyncResultPtr&);
    
private:

    void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::MicrobeamManipulationTypePtr getType()
    {
        return getType(0);
    }
    ::omero::model::MicrobeamManipulationTypePtr getType(const ::Ice::Context& __ctx)
    {
        return getType(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getType()
    {
        return begin_getType(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getType(const ::Ice::Context& __ctx)
    {
        return begin_getType(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getType(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getType(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getType(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getType(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getType(const ::omero::model::Callback_MicrobeamManipulation_getTypePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getType(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getType(const ::Ice::Context& __ctx, const ::omero::model::Callback_MicrobeamManipulation_getTypePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getType(&__ctx, __del, __cookie);
    }

    ::omero::model::MicrobeamManipulationTypePtr end_getType(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::MicrobeamManipulationTypePtr getType(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getType(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setType(const ::omero::model::MicrobeamManipulationTypePtr& theType)
    {
        setType(theType, 0);
    }
    void setType(const ::omero::model::MicrobeamManipulationTypePtr& theType, const ::Ice::Context& __ctx)
    {
        setType(theType, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setType(const ::omero::model::MicrobeamManipulationTypePtr& theType)
    {
        return begin_setType(theType, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setType(const ::omero::model::MicrobeamManipulationTypePtr& theType, const ::Ice::Context& __ctx)
    {
        return begin_setType(theType, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setType(const ::omero::model::MicrobeamManipulationTypePtr& theType, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setType(theType, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setType(const ::omero::model::MicrobeamManipulationTypePtr& theType, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setType(theType, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setType(const ::omero::model::MicrobeamManipulationTypePtr& theType, const ::omero::model::Callback_MicrobeamManipulation_setTypePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setType(theType, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setType(const ::omero::model::MicrobeamManipulationTypePtr& theType, const ::Ice::Context& __ctx, const ::omero::model::Callback_MicrobeamManipulation_setTypePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setType(theType, &__ctx, __del, __cookie);
    }

    void end_setType(const ::Ice::AsyncResultPtr&);
    
private:

    void setType(const ::omero::model::MicrobeamManipulationTypePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setType(const ::omero::model::MicrobeamManipulationTypePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unloadLightSourceSettings()
    {
        unloadLightSourceSettings(0);
    }
    void unloadLightSourceSettings(const ::Ice::Context& __ctx)
    {
        unloadLightSourceSettings(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_unloadLightSourceSettings()
    {
        return begin_unloadLightSourceSettings(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadLightSourceSettings(const ::Ice::Context& __ctx)
    {
        return begin_unloadLightSourceSettings(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadLightSourceSettings(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadLightSourceSettings(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadLightSourceSettings(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadLightSourceSettings(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadLightSourceSettings(const ::omero::model::Callback_MicrobeamManipulation_unloadLightSourceSettingsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadLightSourceSettings(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadLightSourceSettings(const ::Ice::Context& __ctx, const ::omero::model::Callback_MicrobeamManipulation_unloadLightSourceSettingsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadLightSourceSettings(&__ctx, __del, __cookie);
    }

    void end_unloadLightSourceSettings(const ::Ice::AsyncResultPtr&);
    
private:

    void unloadLightSourceSettings(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unloadLightSourceSettings(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int sizeOfLightSourceSettings()
    {
        return sizeOfLightSourceSettings(0);
    }
    ::Ice::Int sizeOfLightSourceSettings(const ::Ice::Context& __ctx)
    {
        return sizeOfLightSourceSettings(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_sizeOfLightSourceSettings()
    {
        return begin_sizeOfLightSourceSettings(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfLightSourceSettings(const ::Ice::Context& __ctx)
    {
        return begin_sizeOfLightSourceSettings(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfLightSourceSettings(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfLightSourceSettings(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfLightSourceSettings(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfLightSourceSettings(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfLightSourceSettings(const ::omero::model::Callback_MicrobeamManipulation_sizeOfLightSourceSettingsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfLightSourceSettings(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfLightSourceSettings(const ::Ice::Context& __ctx, const ::omero::model::Callback_MicrobeamManipulation_sizeOfLightSourceSettingsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfLightSourceSettings(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_sizeOfLightSourceSettings(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int sizeOfLightSourceSettings(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sizeOfLightSourceSettings(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::MicrobeamManipulationLightSourceSettingsSeq copyLightSourceSettings()
    {
        return copyLightSourceSettings(0);
    }
    ::omero::model::MicrobeamManipulationLightSourceSettingsSeq copyLightSourceSettings(const ::Ice::Context& __ctx)
    {
        return copyLightSourceSettings(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_copyLightSourceSettings()
    {
        return begin_copyLightSourceSettings(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyLightSourceSettings(const ::Ice::Context& __ctx)
    {
        return begin_copyLightSourceSettings(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyLightSourceSettings(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyLightSourceSettings(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyLightSourceSettings(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyLightSourceSettings(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyLightSourceSettings(const ::omero::model::Callback_MicrobeamManipulation_copyLightSourceSettingsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyLightSourceSettings(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyLightSourceSettings(const ::Ice::Context& __ctx, const ::omero::model::Callback_MicrobeamManipulation_copyLightSourceSettingsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyLightSourceSettings(&__ctx, __del, __cookie);
    }

    ::omero::model::MicrobeamManipulationLightSourceSettingsSeq end_copyLightSourceSettings(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::MicrobeamManipulationLightSourceSettingsSeq copyLightSourceSettings(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_copyLightSourceSettings(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addLightSettings(const ::omero::model::LightSettingsPtr& target)
    {
        addLightSettings(target, 0);
    }
    void addLightSettings(const ::omero::model::LightSettingsPtr& target, const ::Ice::Context& __ctx)
    {
        addLightSettings(target, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addLightSettings(const ::omero::model::LightSettingsPtr& target)
    {
        return begin_addLightSettings(target, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addLightSettings(const ::omero::model::LightSettingsPtr& target, const ::Ice::Context& __ctx)
    {
        return begin_addLightSettings(target, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addLightSettings(const ::omero::model::LightSettingsPtr& target, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addLightSettings(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addLightSettings(const ::omero::model::LightSettingsPtr& target, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addLightSettings(target, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addLightSettings(const ::omero::model::LightSettingsPtr& target, const ::omero::model::Callback_MicrobeamManipulation_addLightSettingsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addLightSettings(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addLightSettings(const ::omero::model::LightSettingsPtr& target, const ::Ice::Context& __ctx, const ::omero::model::Callback_MicrobeamManipulation_addLightSettingsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addLightSettings(target, &__ctx, __del, __cookie);
    }

    void end_addLightSettings(const ::Ice::AsyncResultPtr&);
    
private:

    void addLightSettings(const ::omero::model::LightSettingsPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addLightSettings(const ::omero::model::LightSettingsPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addAllLightSettingsSet(const ::omero::model::MicrobeamManipulationLightSourceSettingsSeq& targets)
    {
        addAllLightSettingsSet(targets, 0);
    }
    void addAllLightSettingsSet(const ::omero::model::MicrobeamManipulationLightSourceSettingsSeq& targets, const ::Ice::Context& __ctx)
    {
        addAllLightSettingsSet(targets, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addAllLightSettingsSet(const ::omero::model::MicrobeamManipulationLightSourceSettingsSeq& targets)
    {
        return begin_addAllLightSettingsSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllLightSettingsSet(const ::omero::model::MicrobeamManipulationLightSourceSettingsSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_addAllLightSettingsSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllLightSettingsSet(const ::omero::model::MicrobeamManipulationLightSourceSettingsSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllLightSettingsSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllLightSettingsSet(const ::omero::model::MicrobeamManipulationLightSourceSettingsSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllLightSettingsSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllLightSettingsSet(const ::omero::model::MicrobeamManipulationLightSourceSettingsSeq& targets, const ::omero::model::Callback_MicrobeamManipulation_addAllLightSettingsSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllLightSettingsSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllLightSettingsSet(const ::omero::model::MicrobeamManipulationLightSourceSettingsSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_MicrobeamManipulation_addAllLightSettingsSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllLightSettingsSet(targets, &__ctx, __del, __cookie);
    }

    void end_addAllLightSettingsSet(const ::Ice::AsyncResultPtr&);
    
private:

    void addAllLightSettingsSet(const ::omero::model::MicrobeamManipulationLightSourceSettingsSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addAllLightSettingsSet(const ::omero::model::MicrobeamManipulationLightSourceSettingsSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeLightSettings(const ::omero::model::LightSettingsPtr& theTarget)
    {
        removeLightSettings(theTarget, 0);
    }
    void removeLightSettings(const ::omero::model::LightSettingsPtr& theTarget, const ::Ice::Context& __ctx)
    {
        removeLightSettings(theTarget, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removeLightSettings(const ::omero::model::LightSettingsPtr& theTarget)
    {
        return begin_removeLightSettings(theTarget, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeLightSettings(const ::omero::model::LightSettingsPtr& theTarget, const ::Ice::Context& __ctx)
    {
        return begin_removeLightSettings(theTarget, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeLightSettings(const ::omero::model::LightSettingsPtr& theTarget, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeLightSettings(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeLightSettings(const ::omero::model::LightSettingsPtr& theTarget, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeLightSettings(theTarget, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeLightSettings(const ::omero::model::LightSettingsPtr& theTarget, const ::omero::model::Callback_MicrobeamManipulation_removeLightSettingsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeLightSettings(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeLightSettings(const ::omero::model::LightSettingsPtr& theTarget, const ::Ice::Context& __ctx, const ::omero::model::Callback_MicrobeamManipulation_removeLightSettingsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeLightSettings(theTarget, &__ctx, __del, __cookie);
    }

    void end_removeLightSettings(const ::Ice::AsyncResultPtr&);
    
private:

    void removeLightSettings(const ::omero::model::LightSettingsPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeLightSettings(const ::omero::model::LightSettingsPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeAllLightSettingsSet(const ::omero::model::MicrobeamManipulationLightSourceSettingsSeq& targets)
    {
        removeAllLightSettingsSet(targets, 0);
    }
    void removeAllLightSettingsSet(const ::omero::model::MicrobeamManipulationLightSourceSettingsSeq& targets, const ::Ice::Context& __ctx)
    {
        removeAllLightSettingsSet(targets, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removeAllLightSettingsSet(const ::omero::model::MicrobeamManipulationLightSourceSettingsSeq& targets)
    {
        return begin_removeAllLightSettingsSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllLightSettingsSet(const ::omero::model::MicrobeamManipulationLightSourceSettingsSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_removeAllLightSettingsSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllLightSettingsSet(const ::omero::model::MicrobeamManipulationLightSourceSettingsSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllLightSettingsSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllLightSettingsSet(const ::omero::model::MicrobeamManipulationLightSourceSettingsSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllLightSettingsSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllLightSettingsSet(const ::omero::model::MicrobeamManipulationLightSourceSettingsSeq& targets, const ::omero::model::Callback_MicrobeamManipulation_removeAllLightSettingsSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllLightSettingsSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllLightSettingsSet(const ::omero::model::MicrobeamManipulationLightSourceSettingsSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_MicrobeamManipulation_removeAllLightSettingsSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllLightSettingsSet(targets, &__ctx, __del, __cookie);
    }

    void end_removeAllLightSettingsSet(const ::Ice::AsyncResultPtr&);
    
private:

    void removeAllLightSettingsSet(const ::omero::model::MicrobeamManipulationLightSourceSettingsSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeAllLightSettingsSet(const ::omero::model::MicrobeamManipulationLightSourceSettingsSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void clearLightSourceSettings()
    {
        clearLightSourceSettings(0);
    }
    void clearLightSourceSettings(const ::Ice::Context& __ctx)
    {
        clearLightSourceSettings(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_clearLightSourceSettings()
    {
        return begin_clearLightSourceSettings(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearLightSourceSettings(const ::Ice::Context& __ctx)
    {
        return begin_clearLightSourceSettings(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearLightSourceSettings(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearLightSourceSettings(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearLightSourceSettings(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearLightSourceSettings(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearLightSourceSettings(const ::omero::model::Callback_MicrobeamManipulation_clearLightSourceSettingsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearLightSourceSettings(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearLightSourceSettings(const ::Ice::Context& __ctx, const ::omero::model::Callback_MicrobeamManipulation_clearLightSourceSettingsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearLightSourceSettings(&__ctx, __del, __cookie);
    }

    void end_clearLightSourceSettings(const ::Ice::AsyncResultPtr&);
    
private:

    void clearLightSourceSettings(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_clearLightSourceSettings(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reloadLightSourceSettings(const ::omero::model::MicrobeamManipulationPtr& toCopy)
    {
        reloadLightSourceSettings(toCopy, 0);
    }
    void reloadLightSourceSettings(const ::omero::model::MicrobeamManipulationPtr& toCopy, const ::Ice::Context& __ctx)
    {
        reloadLightSourceSettings(toCopy, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_reloadLightSourceSettings(const ::omero::model::MicrobeamManipulationPtr& toCopy)
    {
        return begin_reloadLightSourceSettings(toCopy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadLightSourceSettings(const ::omero::model::MicrobeamManipulationPtr& toCopy, const ::Ice::Context& __ctx)
    {
        return begin_reloadLightSourceSettings(toCopy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadLightSourceSettings(const ::omero::model::MicrobeamManipulationPtr& toCopy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadLightSourceSettings(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadLightSourceSettings(const ::omero::model::MicrobeamManipulationPtr& toCopy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadLightSourceSettings(toCopy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadLightSourceSettings(const ::omero::model::MicrobeamManipulationPtr& toCopy, const ::omero::model::Callback_MicrobeamManipulation_reloadLightSourceSettingsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadLightSourceSettings(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadLightSourceSettings(const ::omero::model::MicrobeamManipulationPtr& toCopy, const ::Ice::Context& __ctx, const ::omero::model::Callback_MicrobeamManipulation_reloadLightSourceSettingsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadLightSourceSettings(toCopy, &__ctx, __del, __cookie);
    }

    void end_reloadLightSourceSettings(const ::Ice::AsyncResultPtr&);
    
private:

    void reloadLightSourceSettings(const ::omero::model::MicrobeamManipulationPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reloadLightSourceSettings(const ::omero::model::MicrobeamManipulationPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::ExperimentPtr getExperiment()
    {
        return getExperiment(0);
    }
    ::omero::model::ExperimentPtr getExperiment(const ::Ice::Context& __ctx)
    {
        return getExperiment(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getExperiment()
    {
        return begin_getExperiment(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getExperiment(const ::Ice::Context& __ctx)
    {
        return begin_getExperiment(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getExperiment(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getExperiment(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getExperiment(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getExperiment(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getExperiment(const ::omero::model::Callback_MicrobeamManipulation_getExperimentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getExperiment(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getExperiment(const ::Ice::Context& __ctx, const ::omero::model::Callback_MicrobeamManipulation_getExperimentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getExperiment(&__ctx, __del, __cookie);
    }

    ::omero::model::ExperimentPtr end_getExperiment(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::ExperimentPtr getExperiment(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getExperiment(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setExperiment(const ::omero::model::ExperimentPtr& theExperiment)
    {
        setExperiment(theExperiment, 0);
    }
    void setExperiment(const ::omero::model::ExperimentPtr& theExperiment, const ::Ice::Context& __ctx)
    {
        setExperiment(theExperiment, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setExperiment(const ::omero::model::ExperimentPtr& theExperiment)
    {
        return begin_setExperiment(theExperiment, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setExperiment(const ::omero::model::ExperimentPtr& theExperiment, const ::Ice::Context& __ctx)
    {
        return begin_setExperiment(theExperiment, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setExperiment(const ::omero::model::ExperimentPtr& theExperiment, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setExperiment(theExperiment, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setExperiment(const ::omero::model::ExperimentPtr& theExperiment, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setExperiment(theExperiment, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setExperiment(const ::omero::model::ExperimentPtr& theExperiment, const ::omero::model::Callback_MicrobeamManipulation_setExperimentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setExperiment(theExperiment, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setExperiment(const ::omero::model::ExperimentPtr& theExperiment, const ::Ice::Context& __ctx, const ::omero::model::Callback_MicrobeamManipulation_setExperimentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setExperiment(theExperiment, &__ctx, __del, __cookie);
    }

    void end_setExperiment(const ::Ice::AsyncResultPtr&);
    
private:

    void setExperiment(const ::omero::model::ExperimentPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setExperiment(const ::omero::model::ExperimentPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getDescription()
    {
        return getDescription(0);
    }
    ::omero::RStringPtr getDescription(const ::Ice::Context& __ctx)
    {
        return getDescription(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getDescription()
    {
        return begin_getDescription(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDescription(const ::Ice::Context& __ctx)
    {
        return begin_getDescription(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDescription(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDescription(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDescription(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDescription(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDescription(const ::omero::model::Callback_MicrobeamManipulation_getDescriptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDescription(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDescription(const ::Ice::Context& __ctx, const ::omero::model::Callback_MicrobeamManipulation_getDescriptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDescription(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getDescription(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getDescription(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getDescription(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setDescription(const ::omero::RStringPtr& theDescription)
    {
        setDescription(theDescription, 0);
    }
    void setDescription(const ::omero::RStringPtr& theDescription, const ::Ice::Context& __ctx)
    {
        setDescription(theDescription, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setDescription(const ::omero::RStringPtr& theDescription)
    {
        return begin_setDescription(theDescription, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setDescription(const ::omero::RStringPtr& theDescription, const ::Ice::Context& __ctx)
    {
        return begin_setDescription(theDescription, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setDescription(const ::omero::RStringPtr& theDescription, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDescription(theDescription, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDescription(const ::omero::RStringPtr& theDescription, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDescription(theDescription, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDescription(const ::omero::RStringPtr& theDescription, const ::omero::model::Callback_MicrobeamManipulation_setDescriptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDescription(theDescription, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDescription(const ::omero::RStringPtr& theDescription, const ::Ice::Context& __ctx, const ::omero::model::Callback_MicrobeamManipulation_setDescriptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDescription(theDescription, &__ctx, __del, __cookie);
    }

    void end_setDescription(const ::Ice::AsyncResultPtr&);
    
private:

    void setDescription(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setDescription(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<MicrobeamManipulation> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MicrobeamManipulation*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<MicrobeamManipulation*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MicrobeamManipulation> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MicrobeamManipulation*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<MicrobeamManipulation*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MicrobeamManipulation> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MicrobeamManipulation*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<MicrobeamManipulation*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MicrobeamManipulation> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MicrobeamManipulation*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<MicrobeamManipulation*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MicrobeamManipulation> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MicrobeamManipulation*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<MicrobeamManipulation*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MicrobeamManipulation> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MicrobeamManipulation*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<MicrobeamManipulation*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MicrobeamManipulation> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MicrobeamManipulation*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<MicrobeamManipulation*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MicrobeamManipulation> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MicrobeamManipulation*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<MicrobeamManipulation*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MicrobeamManipulation> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MicrobeamManipulation*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<MicrobeamManipulation*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MicrobeamManipulation> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MicrobeamManipulation*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<MicrobeamManipulation*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MicrobeamManipulation> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MicrobeamManipulation*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<MicrobeamManipulation*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MicrobeamManipulation> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MicrobeamManipulation*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<MicrobeamManipulation*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MicrobeamManipulation> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MicrobeamManipulation*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<MicrobeamManipulation*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MicrobeamManipulation> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MicrobeamManipulation*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<MicrobeamManipulation*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MicrobeamManipulation> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MicrobeamManipulation*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<MicrobeamManipulation*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MicrobeamManipulation> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MicrobeamManipulation*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<MicrobeamManipulation*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MicrobeamManipulation> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MicrobeamManipulation*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<MicrobeamManipulation*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MicrobeamManipulation> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MicrobeamManipulation*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<MicrobeamManipulation*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MicrobeamManipulation> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MicrobeamManipulation*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<MicrobeamManipulation*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

namespace IceDelegate
{

namespace omero
{

namespace model
{

class MicrobeamManipulation : virtual public ::IceDelegate::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*) = 0;

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::model::MicrobeamManipulationTypePtr getType(const ::Ice::Context*) = 0;

    virtual void setType(const ::omero::model::MicrobeamManipulationTypePtr&, const ::Ice::Context*) = 0;

    virtual void unloadLightSourceSettings(const ::Ice::Context*) = 0;

    virtual ::Ice::Int sizeOfLightSourceSettings(const ::Ice::Context*) = 0;

    virtual ::omero::model::MicrobeamManipulationLightSourceSettingsSeq copyLightSourceSettings(const ::Ice::Context*) = 0;

    virtual void addLightSettings(const ::omero::model::LightSettingsPtr&, const ::Ice::Context*) = 0;

    virtual void addAllLightSettingsSet(const ::omero::model::MicrobeamManipulationLightSourceSettingsSeq&, const ::Ice::Context*) = 0;

    virtual void removeLightSettings(const ::omero::model::LightSettingsPtr&, const ::Ice::Context*) = 0;

    virtual void removeAllLightSettingsSet(const ::omero::model::MicrobeamManipulationLightSourceSettingsSeq&, const ::Ice::Context*) = 0;

    virtual void clearLightSourceSettings(const ::Ice::Context*) = 0;

    virtual void reloadLightSourceSettings(const ::omero::model::MicrobeamManipulationPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::model::ExperimentPtr getExperiment(const ::Ice::Context*) = 0;

    virtual void setExperiment(const ::omero::model::ExperimentPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::RStringPtr getDescription(const ::Ice::Context*) = 0;

    virtual void setDescription(const ::omero::RStringPtr&, const ::Ice::Context*) = 0;
};

}

}

}

namespace IceDelegateM
{

namespace omero
{

namespace model
{

class MicrobeamManipulation : virtual public ::IceDelegate::omero::model::MicrobeamManipulation,
                              virtual public ::IceDelegateM::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::model::MicrobeamManipulationTypePtr getType(const ::Ice::Context*);

    virtual void setType(const ::omero::model::MicrobeamManipulationTypePtr&, const ::Ice::Context*);

    virtual void unloadLightSourceSettings(const ::Ice::Context*);

    virtual ::Ice::Int sizeOfLightSourceSettings(const ::Ice::Context*);

    virtual ::omero::model::MicrobeamManipulationLightSourceSettingsSeq copyLightSourceSettings(const ::Ice::Context*);

    virtual void addLightSettings(const ::omero::model::LightSettingsPtr&, const ::Ice::Context*);

    virtual void addAllLightSettingsSet(const ::omero::model::MicrobeamManipulationLightSourceSettingsSeq&, const ::Ice::Context*);

    virtual void removeLightSettings(const ::omero::model::LightSettingsPtr&, const ::Ice::Context*);

    virtual void removeAllLightSettingsSet(const ::omero::model::MicrobeamManipulationLightSourceSettingsSeq&, const ::Ice::Context*);

    virtual void clearLightSourceSettings(const ::Ice::Context*);

    virtual void reloadLightSourceSettings(const ::omero::model::MicrobeamManipulationPtr&, const ::Ice::Context*);

    virtual ::omero::model::ExperimentPtr getExperiment(const ::Ice::Context*);

    virtual void setExperiment(const ::omero::model::ExperimentPtr&, const ::Ice::Context*);

    virtual ::omero::RStringPtr getDescription(const ::Ice::Context*);

    virtual void setDescription(const ::omero::RStringPtr&, const ::Ice::Context*);
};

}

}

}

namespace IceDelegateD
{

namespace omero
{

namespace model
{

class MicrobeamManipulation : virtual public ::IceDelegate::omero::model::MicrobeamManipulation,
                              virtual public ::IceDelegateD::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::model::MicrobeamManipulationTypePtr getType(const ::Ice::Context*);

    virtual void setType(const ::omero::model::MicrobeamManipulationTypePtr&, const ::Ice::Context*);

    virtual void unloadLightSourceSettings(const ::Ice::Context*);

    virtual ::Ice::Int sizeOfLightSourceSettings(const ::Ice::Context*);

    virtual ::omero::model::MicrobeamManipulationLightSourceSettingsSeq copyLightSourceSettings(const ::Ice::Context*);

    virtual void addLightSettings(const ::omero::model::LightSettingsPtr&, const ::Ice::Context*);

    virtual void addAllLightSettingsSet(const ::omero::model::MicrobeamManipulationLightSourceSettingsSeq&, const ::Ice::Context*);

    virtual void removeLightSettings(const ::omero::model::LightSettingsPtr&, const ::Ice::Context*);

    virtual void removeAllLightSettingsSet(const ::omero::model::MicrobeamManipulationLightSourceSettingsSeq&, const ::Ice::Context*);

    virtual void clearLightSourceSettings(const ::Ice::Context*);

    virtual void reloadLightSourceSettings(const ::omero::model::MicrobeamManipulationPtr&, const ::Ice::Context*);

    virtual ::omero::model::ExperimentPtr getExperiment(const ::Ice::Context*);

    virtual void setExperiment(const ::omero::model::ExperimentPtr&, const ::Ice::Context*);

    virtual ::omero::RStringPtr getDescription(const ::Ice::Context*);

    virtual void setDescription(const ::omero::RStringPtr&, const ::Ice::Context*);
};

}

}

}

namespace omero
{

namespace model
{

class MicrobeamManipulation : public ::omero::model::IObject
{
public:

    typedef MicrobeamManipulationPrx ProxyType;
    typedef MicrobeamManipulationPtr PointerType;
    
    MicrobeamManipulation() {}
    MicrobeamManipulation(const ::omero::RLongPtr&, const ::omero::model::DetailsPtr&, bool, const ::omero::RIntPtr&, const ::omero::model::MicrobeamManipulationTypePtr&, const ::omero::model::MicrobeamManipulationLightSourceSettingsSeq&, bool, const ::omero::model::ExperimentPtr&, const ::omero::RStringPtr&);
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    virtual ::omero::RIntPtr getVersion(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::MicrobeamManipulationTypePtr getType(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getType(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setType(const ::omero::model::MicrobeamManipulationTypePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setType(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unloadLightSourceSettings(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unloadLightSourceSettings(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int sizeOfLightSourceSettings(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sizeOfLightSourceSettings(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::MicrobeamManipulationLightSourceSettingsSeq copyLightSourceSettings(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___copyLightSourceSettings(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addLightSettings(const ::omero::model::LightSettingsPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addLightSettings(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addAllLightSettingsSet(const ::omero::model::MicrobeamManipulationLightSourceSettingsSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addAllLightSettingsSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeLightSettings(const ::omero::model::LightSettingsPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeLightSettings(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeAllLightSettingsSet(const ::omero::model::MicrobeamManipulationLightSourceSettingsSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeAllLightSettingsSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void clearLightSourceSettings(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___clearLightSourceSettings(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reloadLightSourceSettings(const ::omero::model::MicrobeamManipulationPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reloadLightSourceSettings(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::ExperimentPtr getExperiment(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getExperiment(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setExperiment(const ::omero::model::ExperimentPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setExperiment(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getDescription(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getDescription(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setDescription(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setDescription(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif

protected:

    ::omero::RIntPtr version;

    ::omero::model::MicrobeamManipulationTypePtr type;

    ::omero::model::MicrobeamManipulationLightSourceSettingsSeq lightSourceSettingsSeq;

    bool lightSourceSettingsLoaded;

    ::omero::model::ExperimentPtr experiment;

    ::omero::RStringPtr description;
};

inline bool operator==(const MicrobeamManipulation& l, const MicrobeamManipulation& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const MicrobeamManipulation& l, const MicrobeamManipulation& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

}

namespace omero
{

namespace model
{

template<class T>
class CallbackNC_MicrobeamManipulation_getVersion : public Callback_MicrobeamManipulation_getVersion_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RIntPtr&);

    CallbackNC_MicrobeamManipulation_getVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::MicrobeamManipulationPrx __proxy = ::omero::model::MicrobeamManipulationPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_MicrobeamManipulation_getVersionPtr
newCallback_MicrobeamManipulation_getVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MicrobeamManipulation_getVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MicrobeamManipulation_getVersionPtr
newCallback_MicrobeamManipulation_getVersion(T* instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MicrobeamManipulation_getVersion<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_MicrobeamManipulation_getVersion : public Callback_MicrobeamManipulation_getVersion_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RIntPtr&, const CT&);

    Callback_MicrobeamManipulation_getVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::MicrobeamManipulationPrx __proxy = ::omero::model::MicrobeamManipulationPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_MicrobeamManipulation_getVersionPtr
newCallback_MicrobeamManipulation_getVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MicrobeamManipulation_getVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MicrobeamManipulation_getVersionPtr
newCallback_MicrobeamManipulation_getVersion(T* instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MicrobeamManipulation_getVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_MicrobeamManipulation_setVersion : public Callback_MicrobeamManipulation_setVersion_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_MicrobeamManipulation_setVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_MicrobeamManipulation_setVersionPtr
newCallback_MicrobeamManipulation_setVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MicrobeamManipulation_setVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MicrobeamManipulation_setVersionPtr
newCallback_MicrobeamManipulation_setVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MicrobeamManipulation_setVersion<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_MicrobeamManipulation_setVersionPtr
newCallback_MicrobeamManipulation_setVersion(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MicrobeamManipulation_setVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MicrobeamManipulation_setVersionPtr
newCallback_MicrobeamManipulation_setVersion(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MicrobeamManipulation_setVersion<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_MicrobeamManipulation_setVersion : public Callback_MicrobeamManipulation_setVersion_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_MicrobeamManipulation_setVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_MicrobeamManipulation_setVersionPtr
newCallback_MicrobeamManipulation_setVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MicrobeamManipulation_setVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MicrobeamManipulation_setVersionPtr
newCallback_MicrobeamManipulation_setVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MicrobeamManipulation_setVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_MicrobeamManipulation_setVersionPtr
newCallback_MicrobeamManipulation_setVersion(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MicrobeamManipulation_setVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MicrobeamManipulation_setVersionPtr
newCallback_MicrobeamManipulation_setVersion(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MicrobeamManipulation_setVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_MicrobeamManipulation_getType : public Callback_MicrobeamManipulation_getType_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::MicrobeamManipulationTypePtr&);

    CallbackNC_MicrobeamManipulation_getType(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::MicrobeamManipulationPrx __proxy = ::omero::model::MicrobeamManipulationPrx::uncheckedCast(__result->getProxy());
        ::omero::model::MicrobeamManipulationTypePtr __ret;
        try
        {
            __ret = __proxy->end_getType(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_MicrobeamManipulation_getTypePtr
newCallback_MicrobeamManipulation_getType(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::MicrobeamManipulationTypePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MicrobeamManipulation_getType<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MicrobeamManipulation_getTypePtr
newCallback_MicrobeamManipulation_getType(T* instance, void (T::*cb)(const ::omero::model::MicrobeamManipulationTypePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MicrobeamManipulation_getType<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_MicrobeamManipulation_getType : public Callback_MicrobeamManipulation_getType_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::MicrobeamManipulationTypePtr&, const CT&);

    Callback_MicrobeamManipulation_getType(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::MicrobeamManipulationPrx __proxy = ::omero::model::MicrobeamManipulationPrx::uncheckedCast(__result->getProxy());
        ::omero::model::MicrobeamManipulationTypePtr __ret;
        try
        {
            __ret = __proxy->end_getType(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_MicrobeamManipulation_getTypePtr
newCallback_MicrobeamManipulation_getType(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::MicrobeamManipulationTypePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MicrobeamManipulation_getType<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MicrobeamManipulation_getTypePtr
newCallback_MicrobeamManipulation_getType(T* instance, void (T::*cb)(const ::omero::model::MicrobeamManipulationTypePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MicrobeamManipulation_getType<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_MicrobeamManipulation_setType : public Callback_MicrobeamManipulation_setType_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_MicrobeamManipulation_setType(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_MicrobeamManipulation_setTypePtr
newCallback_MicrobeamManipulation_setType(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MicrobeamManipulation_setType<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MicrobeamManipulation_setTypePtr
newCallback_MicrobeamManipulation_setType(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MicrobeamManipulation_setType<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_MicrobeamManipulation_setTypePtr
newCallback_MicrobeamManipulation_setType(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MicrobeamManipulation_setType<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MicrobeamManipulation_setTypePtr
newCallback_MicrobeamManipulation_setType(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MicrobeamManipulation_setType<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_MicrobeamManipulation_setType : public Callback_MicrobeamManipulation_setType_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_MicrobeamManipulation_setType(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_MicrobeamManipulation_setTypePtr
newCallback_MicrobeamManipulation_setType(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MicrobeamManipulation_setType<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MicrobeamManipulation_setTypePtr
newCallback_MicrobeamManipulation_setType(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MicrobeamManipulation_setType<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_MicrobeamManipulation_setTypePtr
newCallback_MicrobeamManipulation_setType(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MicrobeamManipulation_setType<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MicrobeamManipulation_setTypePtr
newCallback_MicrobeamManipulation_setType(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MicrobeamManipulation_setType<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_MicrobeamManipulation_unloadLightSourceSettings : public Callback_MicrobeamManipulation_unloadLightSourceSettings_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_MicrobeamManipulation_unloadLightSourceSettings(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_MicrobeamManipulation_unloadLightSourceSettingsPtr
newCallback_MicrobeamManipulation_unloadLightSourceSettings(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MicrobeamManipulation_unloadLightSourceSettings<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MicrobeamManipulation_unloadLightSourceSettingsPtr
newCallback_MicrobeamManipulation_unloadLightSourceSettings(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MicrobeamManipulation_unloadLightSourceSettings<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_MicrobeamManipulation_unloadLightSourceSettingsPtr
newCallback_MicrobeamManipulation_unloadLightSourceSettings(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MicrobeamManipulation_unloadLightSourceSettings<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MicrobeamManipulation_unloadLightSourceSettingsPtr
newCallback_MicrobeamManipulation_unloadLightSourceSettings(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MicrobeamManipulation_unloadLightSourceSettings<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_MicrobeamManipulation_unloadLightSourceSettings : public Callback_MicrobeamManipulation_unloadLightSourceSettings_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_MicrobeamManipulation_unloadLightSourceSettings(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_MicrobeamManipulation_unloadLightSourceSettingsPtr
newCallback_MicrobeamManipulation_unloadLightSourceSettings(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MicrobeamManipulation_unloadLightSourceSettings<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MicrobeamManipulation_unloadLightSourceSettingsPtr
newCallback_MicrobeamManipulation_unloadLightSourceSettings(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MicrobeamManipulation_unloadLightSourceSettings<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_MicrobeamManipulation_unloadLightSourceSettingsPtr
newCallback_MicrobeamManipulation_unloadLightSourceSettings(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MicrobeamManipulation_unloadLightSourceSettings<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MicrobeamManipulation_unloadLightSourceSettingsPtr
newCallback_MicrobeamManipulation_unloadLightSourceSettings(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MicrobeamManipulation_unloadLightSourceSettings<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_MicrobeamManipulation_sizeOfLightSourceSettings : public Callback_MicrobeamManipulation_sizeOfLightSourceSettings_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_MicrobeamManipulation_sizeOfLightSourceSettings(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::MicrobeamManipulationPrx __proxy = ::omero::model::MicrobeamManipulationPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfLightSourceSettings(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_MicrobeamManipulation_sizeOfLightSourceSettingsPtr
newCallback_MicrobeamManipulation_sizeOfLightSourceSettings(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MicrobeamManipulation_sizeOfLightSourceSettings<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MicrobeamManipulation_sizeOfLightSourceSettingsPtr
newCallback_MicrobeamManipulation_sizeOfLightSourceSettings(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MicrobeamManipulation_sizeOfLightSourceSettings<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_MicrobeamManipulation_sizeOfLightSourceSettings : public Callback_MicrobeamManipulation_sizeOfLightSourceSettings_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_MicrobeamManipulation_sizeOfLightSourceSettings(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::MicrobeamManipulationPrx __proxy = ::omero::model::MicrobeamManipulationPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfLightSourceSettings(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_MicrobeamManipulation_sizeOfLightSourceSettingsPtr
newCallback_MicrobeamManipulation_sizeOfLightSourceSettings(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MicrobeamManipulation_sizeOfLightSourceSettings<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MicrobeamManipulation_sizeOfLightSourceSettingsPtr
newCallback_MicrobeamManipulation_sizeOfLightSourceSettings(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MicrobeamManipulation_sizeOfLightSourceSettings<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_MicrobeamManipulation_copyLightSourceSettings : public Callback_MicrobeamManipulation_copyLightSourceSettings_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::MicrobeamManipulationLightSourceSettingsSeq&);

    CallbackNC_MicrobeamManipulation_copyLightSourceSettings(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::MicrobeamManipulationPrx __proxy = ::omero::model::MicrobeamManipulationPrx::uncheckedCast(__result->getProxy());
        ::omero::model::MicrobeamManipulationLightSourceSettingsSeq __ret;
        try
        {
            __ret = __proxy->end_copyLightSourceSettings(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_MicrobeamManipulation_copyLightSourceSettingsPtr
newCallback_MicrobeamManipulation_copyLightSourceSettings(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::MicrobeamManipulationLightSourceSettingsSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MicrobeamManipulation_copyLightSourceSettings<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MicrobeamManipulation_copyLightSourceSettingsPtr
newCallback_MicrobeamManipulation_copyLightSourceSettings(T* instance, void (T::*cb)(const ::omero::model::MicrobeamManipulationLightSourceSettingsSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MicrobeamManipulation_copyLightSourceSettings<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_MicrobeamManipulation_copyLightSourceSettings : public Callback_MicrobeamManipulation_copyLightSourceSettings_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::MicrobeamManipulationLightSourceSettingsSeq&, const CT&);

    Callback_MicrobeamManipulation_copyLightSourceSettings(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::MicrobeamManipulationPrx __proxy = ::omero::model::MicrobeamManipulationPrx::uncheckedCast(__result->getProxy());
        ::omero::model::MicrobeamManipulationLightSourceSettingsSeq __ret;
        try
        {
            __ret = __proxy->end_copyLightSourceSettings(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_MicrobeamManipulation_copyLightSourceSettingsPtr
newCallback_MicrobeamManipulation_copyLightSourceSettings(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::MicrobeamManipulationLightSourceSettingsSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MicrobeamManipulation_copyLightSourceSettings<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MicrobeamManipulation_copyLightSourceSettingsPtr
newCallback_MicrobeamManipulation_copyLightSourceSettings(T* instance, void (T::*cb)(const ::omero::model::MicrobeamManipulationLightSourceSettingsSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MicrobeamManipulation_copyLightSourceSettings<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_MicrobeamManipulation_addLightSettings : public Callback_MicrobeamManipulation_addLightSettings_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_MicrobeamManipulation_addLightSettings(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_MicrobeamManipulation_addLightSettingsPtr
newCallback_MicrobeamManipulation_addLightSettings(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MicrobeamManipulation_addLightSettings<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MicrobeamManipulation_addLightSettingsPtr
newCallback_MicrobeamManipulation_addLightSettings(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MicrobeamManipulation_addLightSettings<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_MicrobeamManipulation_addLightSettingsPtr
newCallback_MicrobeamManipulation_addLightSettings(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MicrobeamManipulation_addLightSettings<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MicrobeamManipulation_addLightSettingsPtr
newCallback_MicrobeamManipulation_addLightSettings(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MicrobeamManipulation_addLightSettings<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_MicrobeamManipulation_addLightSettings : public Callback_MicrobeamManipulation_addLightSettings_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_MicrobeamManipulation_addLightSettings(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_MicrobeamManipulation_addLightSettingsPtr
newCallback_MicrobeamManipulation_addLightSettings(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MicrobeamManipulation_addLightSettings<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MicrobeamManipulation_addLightSettingsPtr
newCallback_MicrobeamManipulation_addLightSettings(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MicrobeamManipulation_addLightSettings<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_MicrobeamManipulation_addLightSettingsPtr
newCallback_MicrobeamManipulation_addLightSettings(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MicrobeamManipulation_addLightSettings<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MicrobeamManipulation_addLightSettingsPtr
newCallback_MicrobeamManipulation_addLightSettings(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MicrobeamManipulation_addLightSettings<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_MicrobeamManipulation_addAllLightSettingsSet : public Callback_MicrobeamManipulation_addAllLightSettingsSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_MicrobeamManipulation_addAllLightSettingsSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_MicrobeamManipulation_addAllLightSettingsSetPtr
newCallback_MicrobeamManipulation_addAllLightSettingsSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MicrobeamManipulation_addAllLightSettingsSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MicrobeamManipulation_addAllLightSettingsSetPtr
newCallback_MicrobeamManipulation_addAllLightSettingsSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MicrobeamManipulation_addAllLightSettingsSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_MicrobeamManipulation_addAllLightSettingsSetPtr
newCallback_MicrobeamManipulation_addAllLightSettingsSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MicrobeamManipulation_addAllLightSettingsSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MicrobeamManipulation_addAllLightSettingsSetPtr
newCallback_MicrobeamManipulation_addAllLightSettingsSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MicrobeamManipulation_addAllLightSettingsSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_MicrobeamManipulation_addAllLightSettingsSet : public Callback_MicrobeamManipulation_addAllLightSettingsSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_MicrobeamManipulation_addAllLightSettingsSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_MicrobeamManipulation_addAllLightSettingsSetPtr
newCallback_MicrobeamManipulation_addAllLightSettingsSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MicrobeamManipulation_addAllLightSettingsSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MicrobeamManipulation_addAllLightSettingsSetPtr
newCallback_MicrobeamManipulation_addAllLightSettingsSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MicrobeamManipulation_addAllLightSettingsSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_MicrobeamManipulation_addAllLightSettingsSetPtr
newCallback_MicrobeamManipulation_addAllLightSettingsSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MicrobeamManipulation_addAllLightSettingsSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MicrobeamManipulation_addAllLightSettingsSetPtr
newCallback_MicrobeamManipulation_addAllLightSettingsSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MicrobeamManipulation_addAllLightSettingsSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_MicrobeamManipulation_removeLightSettings : public Callback_MicrobeamManipulation_removeLightSettings_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_MicrobeamManipulation_removeLightSettings(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_MicrobeamManipulation_removeLightSettingsPtr
newCallback_MicrobeamManipulation_removeLightSettings(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MicrobeamManipulation_removeLightSettings<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MicrobeamManipulation_removeLightSettingsPtr
newCallback_MicrobeamManipulation_removeLightSettings(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MicrobeamManipulation_removeLightSettings<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_MicrobeamManipulation_removeLightSettingsPtr
newCallback_MicrobeamManipulation_removeLightSettings(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MicrobeamManipulation_removeLightSettings<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MicrobeamManipulation_removeLightSettingsPtr
newCallback_MicrobeamManipulation_removeLightSettings(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MicrobeamManipulation_removeLightSettings<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_MicrobeamManipulation_removeLightSettings : public Callback_MicrobeamManipulation_removeLightSettings_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_MicrobeamManipulation_removeLightSettings(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_MicrobeamManipulation_removeLightSettingsPtr
newCallback_MicrobeamManipulation_removeLightSettings(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MicrobeamManipulation_removeLightSettings<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MicrobeamManipulation_removeLightSettingsPtr
newCallback_MicrobeamManipulation_removeLightSettings(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MicrobeamManipulation_removeLightSettings<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_MicrobeamManipulation_removeLightSettingsPtr
newCallback_MicrobeamManipulation_removeLightSettings(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MicrobeamManipulation_removeLightSettings<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MicrobeamManipulation_removeLightSettingsPtr
newCallback_MicrobeamManipulation_removeLightSettings(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MicrobeamManipulation_removeLightSettings<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_MicrobeamManipulation_removeAllLightSettingsSet : public Callback_MicrobeamManipulation_removeAllLightSettingsSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_MicrobeamManipulation_removeAllLightSettingsSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_MicrobeamManipulation_removeAllLightSettingsSetPtr
newCallback_MicrobeamManipulation_removeAllLightSettingsSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MicrobeamManipulation_removeAllLightSettingsSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MicrobeamManipulation_removeAllLightSettingsSetPtr
newCallback_MicrobeamManipulation_removeAllLightSettingsSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MicrobeamManipulation_removeAllLightSettingsSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_MicrobeamManipulation_removeAllLightSettingsSetPtr
newCallback_MicrobeamManipulation_removeAllLightSettingsSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MicrobeamManipulation_removeAllLightSettingsSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MicrobeamManipulation_removeAllLightSettingsSetPtr
newCallback_MicrobeamManipulation_removeAllLightSettingsSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MicrobeamManipulation_removeAllLightSettingsSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_MicrobeamManipulation_removeAllLightSettingsSet : public Callback_MicrobeamManipulation_removeAllLightSettingsSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_MicrobeamManipulation_removeAllLightSettingsSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_MicrobeamManipulation_removeAllLightSettingsSetPtr
newCallback_MicrobeamManipulation_removeAllLightSettingsSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MicrobeamManipulation_removeAllLightSettingsSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MicrobeamManipulation_removeAllLightSettingsSetPtr
newCallback_MicrobeamManipulation_removeAllLightSettingsSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MicrobeamManipulation_removeAllLightSettingsSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_MicrobeamManipulation_removeAllLightSettingsSetPtr
newCallback_MicrobeamManipulation_removeAllLightSettingsSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MicrobeamManipulation_removeAllLightSettingsSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MicrobeamManipulation_removeAllLightSettingsSetPtr
newCallback_MicrobeamManipulation_removeAllLightSettingsSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MicrobeamManipulation_removeAllLightSettingsSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_MicrobeamManipulation_clearLightSourceSettings : public Callback_MicrobeamManipulation_clearLightSourceSettings_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_MicrobeamManipulation_clearLightSourceSettings(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_MicrobeamManipulation_clearLightSourceSettingsPtr
newCallback_MicrobeamManipulation_clearLightSourceSettings(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MicrobeamManipulation_clearLightSourceSettings<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MicrobeamManipulation_clearLightSourceSettingsPtr
newCallback_MicrobeamManipulation_clearLightSourceSettings(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MicrobeamManipulation_clearLightSourceSettings<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_MicrobeamManipulation_clearLightSourceSettingsPtr
newCallback_MicrobeamManipulation_clearLightSourceSettings(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MicrobeamManipulation_clearLightSourceSettings<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MicrobeamManipulation_clearLightSourceSettingsPtr
newCallback_MicrobeamManipulation_clearLightSourceSettings(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MicrobeamManipulation_clearLightSourceSettings<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_MicrobeamManipulation_clearLightSourceSettings : public Callback_MicrobeamManipulation_clearLightSourceSettings_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_MicrobeamManipulation_clearLightSourceSettings(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_MicrobeamManipulation_clearLightSourceSettingsPtr
newCallback_MicrobeamManipulation_clearLightSourceSettings(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MicrobeamManipulation_clearLightSourceSettings<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MicrobeamManipulation_clearLightSourceSettingsPtr
newCallback_MicrobeamManipulation_clearLightSourceSettings(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MicrobeamManipulation_clearLightSourceSettings<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_MicrobeamManipulation_clearLightSourceSettingsPtr
newCallback_MicrobeamManipulation_clearLightSourceSettings(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MicrobeamManipulation_clearLightSourceSettings<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MicrobeamManipulation_clearLightSourceSettingsPtr
newCallback_MicrobeamManipulation_clearLightSourceSettings(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MicrobeamManipulation_clearLightSourceSettings<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_MicrobeamManipulation_reloadLightSourceSettings : public Callback_MicrobeamManipulation_reloadLightSourceSettings_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_MicrobeamManipulation_reloadLightSourceSettings(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_MicrobeamManipulation_reloadLightSourceSettingsPtr
newCallback_MicrobeamManipulation_reloadLightSourceSettings(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MicrobeamManipulation_reloadLightSourceSettings<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MicrobeamManipulation_reloadLightSourceSettingsPtr
newCallback_MicrobeamManipulation_reloadLightSourceSettings(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MicrobeamManipulation_reloadLightSourceSettings<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_MicrobeamManipulation_reloadLightSourceSettingsPtr
newCallback_MicrobeamManipulation_reloadLightSourceSettings(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MicrobeamManipulation_reloadLightSourceSettings<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MicrobeamManipulation_reloadLightSourceSettingsPtr
newCallback_MicrobeamManipulation_reloadLightSourceSettings(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MicrobeamManipulation_reloadLightSourceSettings<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_MicrobeamManipulation_reloadLightSourceSettings : public Callback_MicrobeamManipulation_reloadLightSourceSettings_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_MicrobeamManipulation_reloadLightSourceSettings(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_MicrobeamManipulation_reloadLightSourceSettingsPtr
newCallback_MicrobeamManipulation_reloadLightSourceSettings(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MicrobeamManipulation_reloadLightSourceSettings<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MicrobeamManipulation_reloadLightSourceSettingsPtr
newCallback_MicrobeamManipulation_reloadLightSourceSettings(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MicrobeamManipulation_reloadLightSourceSettings<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_MicrobeamManipulation_reloadLightSourceSettingsPtr
newCallback_MicrobeamManipulation_reloadLightSourceSettings(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MicrobeamManipulation_reloadLightSourceSettings<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MicrobeamManipulation_reloadLightSourceSettingsPtr
newCallback_MicrobeamManipulation_reloadLightSourceSettings(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MicrobeamManipulation_reloadLightSourceSettings<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_MicrobeamManipulation_getExperiment : public Callback_MicrobeamManipulation_getExperiment_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::ExperimentPtr&);

    CallbackNC_MicrobeamManipulation_getExperiment(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::MicrobeamManipulationPrx __proxy = ::omero::model::MicrobeamManipulationPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ExperimentPtr __ret;
        try
        {
            __ret = __proxy->end_getExperiment(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_MicrobeamManipulation_getExperimentPtr
newCallback_MicrobeamManipulation_getExperiment(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ExperimentPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MicrobeamManipulation_getExperiment<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MicrobeamManipulation_getExperimentPtr
newCallback_MicrobeamManipulation_getExperiment(T* instance, void (T::*cb)(const ::omero::model::ExperimentPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MicrobeamManipulation_getExperiment<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_MicrobeamManipulation_getExperiment : public Callback_MicrobeamManipulation_getExperiment_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::ExperimentPtr&, const CT&);

    Callback_MicrobeamManipulation_getExperiment(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::MicrobeamManipulationPrx __proxy = ::omero::model::MicrobeamManipulationPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ExperimentPtr __ret;
        try
        {
            __ret = __proxy->end_getExperiment(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_MicrobeamManipulation_getExperimentPtr
newCallback_MicrobeamManipulation_getExperiment(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ExperimentPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MicrobeamManipulation_getExperiment<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MicrobeamManipulation_getExperimentPtr
newCallback_MicrobeamManipulation_getExperiment(T* instance, void (T::*cb)(const ::omero::model::ExperimentPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MicrobeamManipulation_getExperiment<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_MicrobeamManipulation_setExperiment : public Callback_MicrobeamManipulation_setExperiment_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_MicrobeamManipulation_setExperiment(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_MicrobeamManipulation_setExperimentPtr
newCallback_MicrobeamManipulation_setExperiment(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MicrobeamManipulation_setExperiment<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MicrobeamManipulation_setExperimentPtr
newCallback_MicrobeamManipulation_setExperiment(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MicrobeamManipulation_setExperiment<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_MicrobeamManipulation_setExperimentPtr
newCallback_MicrobeamManipulation_setExperiment(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MicrobeamManipulation_setExperiment<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MicrobeamManipulation_setExperimentPtr
newCallback_MicrobeamManipulation_setExperiment(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MicrobeamManipulation_setExperiment<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_MicrobeamManipulation_setExperiment : public Callback_MicrobeamManipulation_setExperiment_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_MicrobeamManipulation_setExperiment(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_MicrobeamManipulation_setExperimentPtr
newCallback_MicrobeamManipulation_setExperiment(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MicrobeamManipulation_setExperiment<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MicrobeamManipulation_setExperimentPtr
newCallback_MicrobeamManipulation_setExperiment(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MicrobeamManipulation_setExperiment<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_MicrobeamManipulation_setExperimentPtr
newCallback_MicrobeamManipulation_setExperiment(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MicrobeamManipulation_setExperiment<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MicrobeamManipulation_setExperimentPtr
newCallback_MicrobeamManipulation_setExperiment(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MicrobeamManipulation_setExperiment<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_MicrobeamManipulation_getDescription : public Callback_MicrobeamManipulation_getDescription_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_MicrobeamManipulation_getDescription(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::MicrobeamManipulationPrx __proxy = ::omero::model::MicrobeamManipulationPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getDescription(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_MicrobeamManipulation_getDescriptionPtr
newCallback_MicrobeamManipulation_getDescription(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MicrobeamManipulation_getDescription<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MicrobeamManipulation_getDescriptionPtr
newCallback_MicrobeamManipulation_getDescription(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MicrobeamManipulation_getDescription<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_MicrobeamManipulation_getDescription : public Callback_MicrobeamManipulation_getDescription_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_MicrobeamManipulation_getDescription(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::MicrobeamManipulationPrx __proxy = ::omero::model::MicrobeamManipulationPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getDescription(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_MicrobeamManipulation_getDescriptionPtr
newCallback_MicrobeamManipulation_getDescription(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MicrobeamManipulation_getDescription<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MicrobeamManipulation_getDescriptionPtr
newCallback_MicrobeamManipulation_getDescription(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MicrobeamManipulation_getDescription<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_MicrobeamManipulation_setDescription : public Callback_MicrobeamManipulation_setDescription_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_MicrobeamManipulation_setDescription(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_MicrobeamManipulation_setDescriptionPtr
newCallback_MicrobeamManipulation_setDescription(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MicrobeamManipulation_setDescription<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MicrobeamManipulation_setDescriptionPtr
newCallback_MicrobeamManipulation_setDescription(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MicrobeamManipulation_setDescription<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_MicrobeamManipulation_setDescriptionPtr
newCallback_MicrobeamManipulation_setDescription(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MicrobeamManipulation_setDescription<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MicrobeamManipulation_setDescriptionPtr
newCallback_MicrobeamManipulation_setDescription(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MicrobeamManipulation_setDescription<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_MicrobeamManipulation_setDescription : public Callback_MicrobeamManipulation_setDescription_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_MicrobeamManipulation_setDescription(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_MicrobeamManipulation_setDescriptionPtr
newCallback_MicrobeamManipulation_setDescription(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MicrobeamManipulation_setDescription<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MicrobeamManipulation_setDescriptionPtr
newCallback_MicrobeamManipulation_setDescription(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MicrobeamManipulation_setDescription<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_MicrobeamManipulation_setDescriptionPtr
newCallback_MicrobeamManipulation_setDescription(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MicrobeamManipulation_setDescription<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MicrobeamManipulation_setDescriptionPtr
newCallback_MicrobeamManipulation_setDescription(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MicrobeamManipulation_setDescription<T, CT>(instance, 0, excb, sentcb);
}

}

}

#endif
