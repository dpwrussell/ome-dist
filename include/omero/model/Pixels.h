// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `Pixels.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_Pixels_h__
#define __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_Pixels_h__

#include <Ice/LocalObjectF.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/StreamF.h>
#include <omero/model/IObject.h>
#include <omero/RTypes.h>
#include <omero/System.h>
#include <omero/Collections.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace omero
{

namespace model
{

class Image;

class Pixels;

class PixelsType;

class DimensionOrder;

class PlaneInfo;

class PixelsOriginalFileMap;

class OriginalFile;

class Channel;

class RenderingDef;

class Thumbnail;

class PixelsAnnotationLink;

class Annotation;

class Details;

}

}

}

namespace omero
{

namespace model
{

class Image;
bool operator==(const Image&, const Image&);
bool operator<(const Image&, const Image&);

class Pixels;
bool operator==(const Pixels&, const Pixels&);
bool operator<(const Pixels&, const Pixels&);

class PixelsType;
bool operator==(const PixelsType&, const PixelsType&);
bool operator<(const PixelsType&, const PixelsType&);

class DimensionOrder;
bool operator==(const DimensionOrder&, const DimensionOrder&);
bool operator<(const DimensionOrder&, const DimensionOrder&);

class PlaneInfo;
bool operator==(const PlaneInfo&, const PlaneInfo&);
bool operator<(const PlaneInfo&, const PlaneInfo&);

class PixelsOriginalFileMap;
bool operator==(const PixelsOriginalFileMap&, const PixelsOriginalFileMap&);
bool operator<(const PixelsOriginalFileMap&, const PixelsOriginalFileMap&);

class OriginalFile;
bool operator==(const OriginalFile&, const OriginalFile&);
bool operator<(const OriginalFile&, const OriginalFile&);

class Channel;
bool operator==(const Channel&, const Channel&);
bool operator<(const Channel&, const Channel&);

class RenderingDef;
bool operator==(const RenderingDef&, const RenderingDef&);
bool operator<(const RenderingDef&, const RenderingDef&);

class Thumbnail;
bool operator==(const Thumbnail&, const Thumbnail&);
bool operator<(const Thumbnail&, const Thumbnail&);

class PixelsAnnotationLink;
bool operator==(const PixelsAnnotationLink&, const PixelsAnnotationLink&);
bool operator<(const PixelsAnnotationLink&, const PixelsAnnotationLink&);

class Annotation;
bool operator==(const Annotation&, const Annotation&);
bool operator<(const Annotation&, const Annotation&);

class Details;
bool operator==(const Details&, const Details&);
bool operator<(const Details&, const Details&);

}

}

namespace IceInternal
{

::Ice::Object* upCast(::omero::model::Image*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Image*);

::Ice::Object* upCast(::omero::model::Pixels*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Pixels*);

::Ice::Object* upCast(::omero::model::PixelsType*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::PixelsType*);

::Ice::Object* upCast(::omero::model::DimensionOrder*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::DimensionOrder*);

::Ice::Object* upCast(::omero::model::PlaneInfo*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::PlaneInfo*);

::Ice::Object* upCast(::omero::model::PixelsOriginalFileMap*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::PixelsOriginalFileMap*);

::Ice::Object* upCast(::omero::model::OriginalFile*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::OriginalFile*);

::Ice::Object* upCast(::omero::model::Channel*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Channel*);

::Ice::Object* upCast(::omero::model::RenderingDef*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::RenderingDef*);

::Ice::Object* upCast(::omero::model::Thumbnail*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Thumbnail*);

::Ice::Object* upCast(::omero::model::PixelsAnnotationLink*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::PixelsAnnotationLink*);

::Ice::Object* upCast(::omero::model::Annotation*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Annotation*);

::Ice::Object* upCast(::omero::model::Details*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Details*);

}

namespace omero
{

namespace model
{

typedef ::IceInternal::Handle< ::omero::model::Image> ImagePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Image> ImagePrx;

void __read(::IceInternal::BasicStream*, ImagePrx&);
void __patch__ImagePtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::Pixels> PixelsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Pixels> PixelsPrx;

void __read(::IceInternal::BasicStream*, PixelsPrx&);
void __patch__PixelsPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::PixelsType> PixelsTypePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::PixelsType> PixelsTypePrx;

void __read(::IceInternal::BasicStream*, PixelsTypePrx&);
void __patch__PixelsTypePtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::DimensionOrder> DimensionOrderPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::DimensionOrder> DimensionOrderPrx;

void __read(::IceInternal::BasicStream*, DimensionOrderPrx&);
void __patch__DimensionOrderPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::PlaneInfo> PlaneInfoPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::PlaneInfo> PlaneInfoPrx;

void __read(::IceInternal::BasicStream*, PlaneInfoPrx&);
void __patch__PlaneInfoPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::PixelsOriginalFileMap> PixelsOriginalFileMapPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::PixelsOriginalFileMap> PixelsOriginalFileMapPrx;

void __read(::IceInternal::BasicStream*, PixelsOriginalFileMapPrx&);
void __patch__PixelsOriginalFileMapPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::OriginalFile> OriginalFilePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::OriginalFile> OriginalFilePrx;

void __read(::IceInternal::BasicStream*, OriginalFilePrx&);
void __patch__OriginalFilePtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::Channel> ChannelPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Channel> ChannelPrx;

void __read(::IceInternal::BasicStream*, ChannelPrx&);
void __patch__ChannelPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::RenderingDef> RenderingDefPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::RenderingDef> RenderingDefPrx;

void __read(::IceInternal::BasicStream*, RenderingDefPrx&);
void __patch__RenderingDefPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::Thumbnail> ThumbnailPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Thumbnail> ThumbnailPrx;

void __read(::IceInternal::BasicStream*, ThumbnailPrx&);
void __patch__ThumbnailPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::PixelsAnnotationLink> PixelsAnnotationLinkPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::PixelsAnnotationLink> PixelsAnnotationLinkPrx;

void __read(::IceInternal::BasicStream*, PixelsAnnotationLinkPrx&);
void __patch__PixelsAnnotationLinkPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::Annotation> AnnotationPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Annotation> AnnotationPrx;

void __read(::IceInternal::BasicStream*, AnnotationPrx&);
void __patch__AnnotationPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::Details> DetailsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Details> DetailsPrx;

void __read(::IceInternal::BasicStream*, DetailsPrx&);
void __patch__DetailsPtr(void*, ::Ice::ObjectPtr&);

}

}

namespace omero
{

namespace model
{

typedef ::std::vector< ::omero::model::PlaneInfoPtr> PixelsPlaneInfoSeq;
void __writePixelsPlaneInfoSeq(::IceInternal::BasicStream*, const ::omero::model::PlaneInfoPtr*, const ::omero::model::PlaneInfoPtr*);
void __readPixelsPlaneInfoSeq(::IceInternal::BasicStream*, PixelsPlaneInfoSeq&);

typedef ::std::vector< ::omero::model::PixelsOriginalFileMapPtr> PixelsPixelsFileMapsSeq;
void __writePixelsPixelsFileMapsSeq(::IceInternal::BasicStream*, const ::omero::model::PixelsOriginalFileMapPtr*, const ::omero::model::PixelsOriginalFileMapPtr*);
void __readPixelsPixelsFileMapsSeq(::IceInternal::BasicStream*, PixelsPixelsFileMapsSeq&);

typedef ::std::vector< ::omero::model::OriginalFilePtr> PixelsLinkedOriginalFileSeq;
void __writePixelsLinkedOriginalFileSeq(::IceInternal::BasicStream*, const ::omero::model::OriginalFilePtr*, const ::omero::model::OriginalFilePtr*);
void __readPixelsLinkedOriginalFileSeq(::IceInternal::BasicStream*, PixelsLinkedOriginalFileSeq&);

typedef ::std::vector< ::omero::model::ChannelPtr> PixelsChannelsSeq;
void __writePixelsChannelsSeq(::IceInternal::BasicStream*, const ::omero::model::ChannelPtr*, const ::omero::model::ChannelPtr*);
void __readPixelsChannelsSeq(::IceInternal::BasicStream*, PixelsChannelsSeq&);

typedef ::std::vector< ::omero::model::RenderingDefPtr> PixelsSettingsSeq;
void __writePixelsSettingsSeq(::IceInternal::BasicStream*, const ::omero::model::RenderingDefPtr*, const ::omero::model::RenderingDefPtr*);
void __readPixelsSettingsSeq(::IceInternal::BasicStream*, PixelsSettingsSeq&);

typedef ::std::vector< ::omero::model::ThumbnailPtr> PixelsThumbnailsSeq;
void __writePixelsThumbnailsSeq(::IceInternal::BasicStream*, const ::omero::model::ThumbnailPtr*, const ::omero::model::ThumbnailPtr*);
void __readPixelsThumbnailsSeq(::IceInternal::BasicStream*, PixelsThumbnailsSeq&);

typedef ::std::vector< ::omero::model::PixelsAnnotationLinkPtr> PixelsAnnotationLinksSeq;
void __writePixelsAnnotationLinksSeq(::IceInternal::BasicStream*, const ::omero::model::PixelsAnnotationLinkPtr*, const ::omero::model::PixelsAnnotationLinkPtr*);
void __readPixelsAnnotationLinksSeq(::IceInternal::BasicStream*, PixelsAnnotationLinksSeq&);

typedef ::std::vector< ::omero::model::AnnotationPtr> PixelsLinkedAnnotationSeq;
void __writePixelsLinkedAnnotationSeq(::IceInternal::BasicStream*, const ::omero::model::AnnotationPtr*, const ::omero::model::AnnotationPtr*);
void __readPixelsLinkedAnnotationSeq(::IceInternal::BasicStream*, PixelsLinkedAnnotationSeq&);

}

}

namespace omero
{

namespace model
{

class Callback_Pixels_getVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_getVersion_Base> Callback_Pixels_getVersionPtr;

class Callback_Pixels_setVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_setVersion_Base> Callback_Pixels_setVersionPtr;

class Callback_Pixels_getImage_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_getImage_Base> Callback_Pixels_getImagePtr;

class Callback_Pixels_setImage_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_setImage_Base> Callback_Pixels_setImagePtr;

class Callback_Pixels_getRelatedTo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_getRelatedTo_Base> Callback_Pixels_getRelatedToPtr;

class Callback_Pixels_setRelatedTo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_setRelatedTo_Base> Callback_Pixels_setRelatedToPtr;

class Callback_Pixels_getPixelsType_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_getPixelsType_Base> Callback_Pixels_getPixelsTypePtr;

class Callback_Pixels_setPixelsType_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_setPixelsType_Base> Callback_Pixels_setPixelsTypePtr;

class Callback_Pixels_getSignificantBits_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_getSignificantBits_Base> Callback_Pixels_getSignificantBitsPtr;

class Callback_Pixels_setSignificantBits_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_setSignificantBits_Base> Callback_Pixels_setSignificantBitsPtr;

class Callback_Pixels_getSizeX_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_getSizeX_Base> Callback_Pixels_getSizeXPtr;

class Callback_Pixels_setSizeX_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_setSizeX_Base> Callback_Pixels_setSizeXPtr;

class Callback_Pixels_getSizeY_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_getSizeY_Base> Callback_Pixels_getSizeYPtr;

class Callback_Pixels_setSizeY_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_setSizeY_Base> Callback_Pixels_setSizeYPtr;

class Callback_Pixels_getSizeZ_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_getSizeZ_Base> Callback_Pixels_getSizeZPtr;

class Callback_Pixels_setSizeZ_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_setSizeZ_Base> Callback_Pixels_setSizeZPtr;

class Callback_Pixels_getSizeC_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_getSizeC_Base> Callback_Pixels_getSizeCPtr;

class Callback_Pixels_setSizeC_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_setSizeC_Base> Callback_Pixels_setSizeCPtr;

class Callback_Pixels_getSizeT_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_getSizeT_Base> Callback_Pixels_getSizeTPtr;

class Callback_Pixels_setSizeT_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_setSizeT_Base> Callback_Pixels_setSizeTPtr;

class Callback_Pixels_getSha1_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_getSha1_Base> Callback_Pixels_getSha1Ptr;

class Callback_Pixels_setSha1_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_setSha1_Base> Callback_Pixels_setSha1Ptr;

class Callback_Pixels_getDimensionOrder_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_getDimensionOrder_Base> Callback_Pixels_getDimensionOrderPtr;

class Callback_Pixels_setDimensionOrder_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_setDimensionOrder_Base> Callback_Pixels_setDimensionOrderPtr;

class Callback_Pixels_getPhysicalSizeX_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_getPhysicalSizeX_Base> Callback_Pixels_getPhysicalSizeXPtr;

class Callback_Pixels_setPhysicalSizeX_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_setPhysicalSizeX_Base> Callback_Pixels_setPhysicalSizeXPtr;

class Callback_Pixels_getPhysicalSizeY_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_getPhysicalSizeY_Base> Callback_Pixels_getPhysicalSizeYPtr;

class Callback_Pixels_setPhysicalSizeY_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_setPhysicalSizeY_Base> Callback_Pixels_setPhysicalSizeYPtr;

class Callback_Pixels_getPhysicalSizeZ_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_getPhysicalSizeZ_Base> Callback_Pixels_getPhysicalSizeZPtr;

class Callback_Pixels_setPhysicalSizeZ_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_setPhysicalSizeZ_Base> Callback_Pixels_setPhysicalSizeZPtr;

class Callback_Pixels_getWaveStart_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_getWaveStart_Base> Callback_Pixels_getWaveStartPtr;

class Callback_Pixels_setWaveStart_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_setWaveStart_Base> Callback_Pixels_setWaveStartPtr;

class Callback_Pixels_getWaveIncrement_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_getWaveIncrement_Base> Callback_Pixels_getWaveIncrementPtr;

class Callback_Pixels_setWaveIncrement_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_setWaveIncrement_Base> Callback_Pixels_setWaveIncrementPtr;

class Callback_Pixels_getTimeIncrement_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_getTimeIncrement_Base> Callback_Pixels_getTimeIncrementPtr;

class Callback_Pixels_setTimeIncrement_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_setTimeIncrement_Base> Callback_Pixels_setTimeIncrementPtr;

class Callback_Pixels_getMethodology_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_getMethodology_Base> Callback_Pixels_getMethodologyPtr;

class Callback_Pixels_setMethodology_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_setMethodology_Base> Callback_Pixels_setMethodologyPtr;

class Callback_Pixels_unloadPlaneInfo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_unloadPlaneInfo_Base> Callback_Pixels_unloadPlaneInfoPtr;

class Callback_Pixels_sizeOfPlaneInfo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_sizeOfPlaneInfo_Base> Callback_Pixels_sizeOfPlaneInfoPtr;

class Callback_Pixels_copyPlaneInfo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_copyPlaneInfo_Base> Callback_Pixels_copyPlaneInfoPtr;

class Callback_Pixels_addPlaneInfo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_addPlaneInfo_Base> Callback_Pixels_addPlaneInfoPtr;

class Callback_Pixels_addAllPlaneInfoSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_addAllPlaneInfoSet_Base> Callback_Pixels_addAllPlaneInfoSetPtr;

class Callback_Pixels_removePlaneInfo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_removePlaneInfo_Base> Callback_Pixels_removePlaneInfoPtr;

class Callback_Pixels_removeAllPlaneInfoSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_removeAllPlaneInfoSet_Base> Callback_Pixels_removeAllPlaneInfoSetPtr;

class Callback_Pixels_clearPlaneInfo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_clearPlaneInfo_Base> Callback_Pixels_clearPlaneInfoPtr;

class Callback_Pixels_reloadPlaneInfo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_reloadPlaneInfo_Base> Callback_Pixels_reloadPlaneInfoPtr;

class Callback_Pixels_unloadPixelsFileMaps_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_unloadPixelsFileMaps_Base> Callback_Pixels_unloadPixelsFileMapsPtr;

class Callback_Pixels_sizeOfPixelsFileMaps_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_sizeOfPixelsFileMaps_Base> Callback_Pixels_sizeOfPixelsFileMapsPtr;

class Callback_Pixels_copyPixelsFileMaps_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_copyPixelsFileMaps_Base> Callback_Pixels_copyPixelsFileMapsPtr;

class Callback_Pixels_addPixelsOriginalFileMap_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_addPixelsOriginalFileMap_Base> Callback_Pixels_addPixelsOriginalFileMapPtr;

class Callback_Pixels_addAllPixelsOriginalFileMapSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_addAllPixelsOriginalFileMapSet_Base> Callback_Pixels_addAllPixelsOriginalFileMapSetPtr;

class Callback_Pixels_removePixelsOriginalFileMap_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_removePixelsOriginalFileMap_Base> Callback_Pixels_removePixelsOriginalFileMapPtr;

class Callback_Pixels_removeAllPixelsOriginalFileMapSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_removeAllPixelsOriginalFileMapSet_Base> Callback_Pixels_removeAllPixelsOriginalFileMapSetPtr;

class Callback_Pixels_clearPixelsFileMaps_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_clearPixelsFileMaps_Base> Callback_Pixels_clearPixelsFileMapsPtr;

class Callback_Pixels_reloadPixelsFileMaps_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_reloadPixelsFileMaps_Base> Callback_Pixels_reloadPixelsFileMapsPtr;

class Callback_Pixels_getPixelsFileMapsCountPerOwner_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_getPixelsFileMapsCountPerOwner_Base> Callback_Pixels_getPixelsFileMapsCountPerOwnerPtr;

class Callback_Pixels_linkOriginalFile_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_linkOriginalFile_Base> Callback_Pixels_linkOriginalFilePtr;

class Callback_Pixels_addPixelsOriginalFileMapToBoth_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_addPixelsOriginalFileMapToBoth_Base> Callback_Pixels_addPixelsOriginalFileMapToBothPtr;

class Callback_Pixels_findPixelsOriginalFileMap_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_findPixelsOriginalFileMap_Base> Callback_Pixels_findPixelsOriginalFileMapPtr;

class Callback_Pixels_unlinkOriginalFile_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_unlinkOriginalFile_Base> Callback_Pixels_unlinkOriginalFilePtr;

class Callback_Pixels_removePixelsOriginalFileMapFromBoth_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_removePixelsOriginalFileMapFromBoth_Base> Callback_Pixels_removePixelsOriginalFileMapFromBothPtr;

class Callback_Pixels_linkedOriginalFileList_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_linkedOriginalFileList_Base> Callback_Pixels_linkedOriginalFileListPtr;

class Callback_Pixels_unloadChannels_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_unloadChannels_Base> Callback_Pixels_unloadChannelsPtr;

class Callback_Pixels_sizeOfChannels_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_sizeOfChannels_Base> Callback_Pixels_sizeOfChannelsPtr;

class Callback_Pixels_copyChannels_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_copyChannels_Base> Callback_Pixels_copyChannelsPtr;

class Callback_Pixels_addChannel_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_addChannel_Base> Callback_Pixels_addChannelPtr;

class Callback_Pixels_addAllChannelSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_addAllChannelSet_Base> Callback_Pixels_addAllChannelSetPtr;

class Callback_Pixels_removeChannel_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_removeChannel_Base> Callback_Pixels_removeChannelPtr;

class Callback_Pixels_removeAllChannelSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_removeAllChannelSet_Base> Callback_Pixels_removeAllChannelSetPtr;

class Callback_Pixels_clearChannels_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_clearChannels_Base> Callback_Pixels_clearChannelsPtr;

class Callback_Pixels_reloadChannels_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_reloadChannels_Base> Callback_Pixels_reloadChannelsPtr;

class Callback_Pixels_getChannel_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_getChannel_Base> Callback_Pixels_getChannelPtr;

class Callback_Pixels_setChannel_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_setChannel_Base> Callback_Pixels_setChannelPtr;

class Callback_Pixels_getPrimaryChannel_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_getPrimaryChannel_Base> Callback_Pixels_getPrimaryChannelPtr;

class Callback_Pixels_setPrimaryChannel_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_setPrimaryChannel_Base> Callback_Pixels_setPrimaryChannelPtr;

class Callback_Pixels_unloadSettings_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_unloadSettings_Base> Callback_Pixels_unloadSettingsPtr;

class Callback_Pixels_sizeOfSettings_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_sizeOfSettings_Base> Callback_Pixels_sizeOfSettingsPtr;

class Callback_Pixels_copySettings_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_copySettings_Base> Callback_Pixels_copySettingsPtr;

class Callback_Pixels_addRenderingDef_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_addRenderingDef_Base> Callback_Pixels_addRenderingDefPtr;

class Callback_Pixels_addAllRenderingDefSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_addAllRenderingDefSet_Base> Callback_Pixels_addAllRenderingDefSetPtr;

class Callback_Pixels_removeRenderingDef_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_removeRenderingDef_Base> Callback_Pixels_removeRenderingDefPtr;

class Callback_Pixels_removeAllRenderingDefSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_removeAllRenderingDefSet_Base> Callback_Pixels_removeAllRenderingDefSetPtr;

class Callback_Pixels_clearSettings_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_clearSettings_Base> Callback_Pixels_clearSettingsPtr;

class Callback_Pixels_reloadSettings_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_reloadSettings_Base> Callback_Pixels_reloadSettingsPtr;

class Callback_Pixels_unloadThumbnails_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_unloadThumbnails_Base> Callback_Pixels_unloadThumbnailsPtr;

class Callback_Pixels_sizeOfThumbnails_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_sizeOfThumbnails_Base> Callback_Pixels_sizeOfThumbnailsPtr;

class Callback_Pixels_copyThumbnails_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_copyThumbnails_Base> Callback_Pixels_copyThumbnailsPtr;

class Callback_Pixels_addThumbnail_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_addThumbnail_Base> Callback_Pixels_addThumbnailPtr;

class Callback_Pixels_addAllThumbnailSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_addAllThumbnailSet_Base> Callback_Pixels_addAllThumbnailSetPtr;

class Callback_Pixels_removeThumbnail_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_removeThumbnail_Base> Callback_Pixels_removeThumbnailPtr;

class Callback_Pixels_removeAllThumbnailSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_removeAllThumbnailSet_Base> Callback_Pixels_removeAllThumbnailSetPtr;

class Callback_Pixels_clearThumbnails_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_clearThumbnails_Base> Callback_Pixels_clearThumbnailsPtr;

class Callback_Pixels_reloadThumbnails_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_reloadThumbnails_Base> Callback_Pixels_reloadThumbnailsPtr;

class Callback_Pixels_unloadAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_unloadAnnotationLinks_Base> Callback_Pixels_unloadAnnotationLinksPtr;

class Callback_Pixels_sizeOfAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_sizeOfAnnotationLinks_Base> Callback_Pixels_sizeOfAnnotationLinksPtr;

class Callback_Pixels_copyAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_copyAnnotationLinks_Base> Callback_Pixels_copyAnnotationLinksPtr;

class Callback_Pixels_addPixelsAnnotationLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_addPixelsAnnotationLink_Base> Callback_Pixels_addPixelsAnnotationLinkPtr;

class Callback_Pixels_addAllPixelsAnnotationLinkSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_addAllPixelsAnnotationLinkSet_Base> Callback_Pixels_addAllPixelsAnnotationLinkSetPtr;

class Callback_Pixels_removePixelsAnnotationLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_removePixelsAnnotationLink_Base> Callback_Pixels_removePixelsAnnotationLinkPtr;

class Callback_Pixels_removeAllPixelsAnnotationLinkSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_removeAllPixelsAnnotationLinkSet_Base> Callback_Pixels_removeAllPixelsAnnotationLinkSetPtr;

class Callback_Pixels_clearAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_clearAnnotationLinks_Base> Callback_Pixels_clearAnnotationLinksPtr;

class Callback_Pixels_reloadAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_reloadAnnotationLinks_Base> Callback_Pixels_reloadAnnotationLinksPtr;

class Callback_Pixels_getAnnotationLinksCountPerOwner_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_getAnnotationLinksCountPerOwner_Base> Callback_Pixels_getAnnotationLinksCountPerOwnerPtr;

class Callback_Pixels_linkAnnotation_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_linkAnnotation_Base> Callback_Pixels_linkAnnotationPtr;

class Callback_Pixels_addPixelsAnnotationLinkToBoth_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_addPixelsAnnotationLinkToBoth_Base> Callback_Pixels_addPixelsAnnotationLinkToBothPtr;

class Callback_Pixels_findPixelsAnnotationLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_findPixelsAnnotationLink_Base> Callback_Pixels_findPixelsAnnotationLinkPtr;

class Callback_Pixels_unlinkAnnotation_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_unlinkAnnotation_Base> Callback_Pixels_unlinkAnnotationPtr;

class Callback_Pixels_removePixelsAnnotationLinkFromBoth_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_removePixelsAnnotationLinkFromBoth_Base> Callback_Pixels_removePixelsAnnotationLinkFromBothPtr;

class Callback_Pixels_linkedAnnotationList_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pixels_linkedAnnotationList_Base> Callback_Pixels_linkedAnnotationListPtr;

}

}

namespace IceProxy
{

namespace omero
{

namespace model
{

class Pixels : virtual public ::IceProxy::omero::model::IObject
{
public:

    ::omero::RIntPtr getVersion()
    {
        return getVersion(0);
    }
    ::omero::RIntPtr getVersion(const ::Ice::Context& __ctx)
    {
        return getVersion(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getVersion()
    {
        return begin_getVersion(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx)
    {
        return begin_getVersion(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::omero::model::Callback_Pixels_getVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_getVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(&__ctx, __del, __cookie);
    }

    ::omero::RIntPtr end_getVersion(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RIntPtr getVersion(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setVersion(const ::omero::RIntPtr& theVersion)
    {
        setVersion(theVersion, 0);
    }
    void setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx)
    {
        setVersion(theVersion, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion)
    {
        return begin_setVersion(theVersion, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx)
    {
        return begin_setVersion(theVersion, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::omero::model::Callback_Pixels_setVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_setVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, &__ctx, __del, __cookie);
    }

    void end_setVersion(const ::Ice::AsyncResultPtr&);
    
private:

    void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::ImagePtr getImage()
    {
        return getImage(0);
    }
    ::omero::model::ImagePtr getImage(const ::Ice::Context& __ctx)
    {
        return getImage(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getImage()
    {
        return begin_getImage(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getImage(const ::Ice::Context& __ctx)
    {
        return begin_getImage(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getImage(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getImage(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getImage(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getImage(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getImage(const ::omero::model::Callback_Pixels_getImagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getImage(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getImage(const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_getImagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getImage(&__ctx, __del, __cookie);
    }

    ::omero::model::ImagePtr end_getImage(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::ImagePtr getImage(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getImage(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setImage(const ::omero::model::ImagePtr& theImage)
    {
        setImage(theImage, 0);
    }
    void setImage(const ::omero::model::ImagePtr& theImage, const ::Ice::Context& __ctx)
    {
        setImage(theImage, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setImage(const ::omero::model::ImagePtr& theImage)
    {
        return begin_setImage(theImage, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setImage(const ::omero::model::ImagePtr& theImage, const ::Ice::Context& __ctx)
    {
        return begin_setImage(theImage, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setImage(const ::omero::model::ImagePtr& theImage, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setImage(theImage, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setImage(const ::omero::model::ImagePtr& theImage, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setImage(theImage, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setImage(const ::omero::model::ImagePtr& theImage, const ::omero::model::Callback_Pixels_setImagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setImage(theImage, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setImage(const ::omero::model::ImagePtr& theImage, const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_setImagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setImage(theImage, &__ctx, __del, __cookie);
    }

    void end_setImage(const ::Ice::AsyncResultPtr&);
    
private:

    void setImage(const ::omero::model::ImagePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setImage(const ::omero::model::ImagePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::PixelsPtr getRelatedTo()
    {
        return getRelatedTo(0);
    }
    ::omero::model::PixelsPtr getRelatedTo(const ::Ice::Context& __ctx)
    {
        return getRelatedTo(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getRelatedTo()
    {
        return begin_getRelatedTo(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRelatedTo(const ::Ice::Context& __ctx)
    {
        return begin_getRelatedTo(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRelatedTo(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRelatedTo(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRelatedTo(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRelatedTo(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRelatedTo(const ::omero::model::Callback_Pixels_getRelatedToPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRelatedTo(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRelatedTo(const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_getRelatedToPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRelatedTo(&__ctx, __del, __cookie);
    }

    ::omero::model::PixelsPtr end_getRelatedTo(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::PixelsPtr getRelatedTo(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getRelatedTo(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setRelatedTo(const ::omero::model::PixelsPtr& theRelatedTo)
    {
        setRelatedTo(theRelatedTo, 0);
    }
    void setRelatedTo(const ::omero::model::PixelsPtr& theRelatedTo, const ::Ice::Context& __ctx)
    {
        setRelatedTo(theRelatedTo, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setRelatedTo(const ::omero::model::PixelsPtr& theRelatedTo)
    {
        return begin_setRelatedTo(theRelatedTo, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setRelatedTo(const ::omero::model::PixelsPtr& theRelatedTo, const ::Ice::Context& __ctx)
    {
        return begin_setRelatedTo(theRelatedTo, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setRelatedTo(const ::omero::model::PixelsPtr& theRelatedTo, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setRelatedTo(theRelatedTo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setRelatedTo(const ::omero::model::PixelsPtr& theRelatedTo, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setRelatedTo(theRelatedTo, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setRelatedTo(const ::omero::model::PixelsPtr& theRelatedTo, const ::omero::model::Callback_Pixels_setRelatedToPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setRelatedTo(theRelatedTo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setRelatedTo(const ::omero::model::PixelsPtr& theRelatedTo, const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_setRelatedToPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setRelatedTo(theRelatedTo, &__ctx, __del, __cookie);
    }

    void end_setRelatedTo(const ::Ice::AsyncResultPtr&);
    
private:

    void setRelatedTo(const ::omero::model::PixelsPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setRelatedTo(const ::omero::model::PixelsPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::PixelsTypePtr getPixelsType()
    {
        return getPixelsType(0);
    }
    ::omero::model::PixelsTypePtr getPixelsType(const ::Ice::Context& __ctx)
    {
        return getPixelsType(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getPixelsType()
    {
        return begin_getPixelsType(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPixelsType(const ::Ice::Context& __ctx)
    {
        return begin_getPixelsType(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPixelsType(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPixelsType(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPixelsType(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPixelsType(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPixelsType(const ::omero::model::Callback_Pixels_getPixelsTypePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPixelsType(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPixelsType(const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_getPixelsTypePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPixelsType(&__ctx, __del, __cookie);
    }

    ::omero::model::PixelsTypePtr end_getPixelsType(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::PixelsTypePtr getPixelsType(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getPixelsType(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setPixelsType(const ::omero::model::PixelsTypePtr& thePixelsType)
    {
        setPixelsType(thePixelsType, 0);
    }
    void setPixelsType(const ::omero::model::PixelsTypePtr& thePixelsType, const ::Ice::Context& __ctx)
    {
        setPixelsType(thePixelsType, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setPixelsType(const ::omero::model::PixelsTypePtr& thePixelsType)
    {
        return begin_setPixelsType(thePixelsType, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPixelsType(const ::omero::model::PixelsTypePtr& thePixelsType, const ::Ice::Context& __ctx)
    {
        return begin_setPixelsType(thePixelsType, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPixelsType(const ::omero::model::PixelsTypePtr& thePixelsType, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPixelsType(thePixelsType, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPixelsType(const ::omero::model::PixelsTypePtr& thePixelsType, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPixelsType(thePixelsType, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPixelsType(const ::omero::model::PixelsTypePtr& thePixelsType, const ::omero::model::Callback_Pixels_setPixelsTypePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPixelsType(thePixelsType, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPixelsType(const ::omero::model::PixelsTypePtr& thePixelsType, const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_setPixelsTypePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPixelsType(thePixelsType, &__ctx, __del, __cookie);
    }

    void end_setPixelsType(const ::Ice::AsyncResultPtr&);
    
private:

    void setPixelsType(const ::omero::model::PixelsTypePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setPixelsType(const ::omero::model::PixelsTypePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RIntPtr getSignificantBits()
    {
        return getSignificantBits(0);
    }
    ::omero::RIntPtr getSignificantBits(const ::Ice::Context& __ctx)
    {
        return getSignificantBits(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getSignificantBits()
    {
        return begin_getSignificantBits(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSignificantBits(const ::Ice::Context& __ctx)
    {
        return begin_getSignificantBits(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSignificantBits(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSignificantBits(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSignificantBits(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSignificantBits(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSignificantBits(const ::omero::model::Callback_Pixels_getSignificantBitsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSignificantBits(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSignificantBits(const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_getSignificantBitsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSignificantBits(&__ctx, __del, __cookie);
    }

    ::omero::RIntPtr end_getSignificantBits(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RIntPtr getSignificantBits(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getSignificantBits(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setSignificantBits(const ::omero::RIntPtr& theSignificantBits)
    {
        setSignificantBits(theSignificantBits, 0);
    }
    void setSignificantBits(const ::omero::RIntPtr& theSignificantBits, const ::Ice::Context& __ctx)
    {
        setSignificantBits(theSignificantBits, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setSignificantBits(const ::omero::RIntPtr& theSignificantBits)
    {
        return begin_setSignificantBits(theSignificantBits, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setSignificantBits(const ::omero::RIntPtr& theSignificantBits, const ::Ice::Context& __ctx)
    {
        return begin_setSignificantBits(theSignificantBits, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setSignificantBits(const ::omero::RIntPtr& theSignificantBits, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSignificantBits(theSignificantBits, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSignificantBits(const ::omero::RIntPtr& theSignificantBits, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSignificantBits(theSignificantBits, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSignificantBits(const ::omero::RIntPtr& theSignificantBits, const ::omero::model::Callback_Pixels_setSignificantBitsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSignificantBits(theSignificantBits, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSignificantBits(const ::omero::RIntPtr& theSignificantBits, const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_setSignificantBitsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSignificantBits(theSignificantBits, &__ctx, __del, __cookie);
    }

    void end_setSignificantBits(const ::Ice::AsyncResultPtr&);
    
private:

    void setSignificantBits(const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setSignificantBits(const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RIntPtr getSizeX()
    {
        return getSizeX(0);
    }
    ::omero::RIntPtr getSizeX(const ::Ice::Context& __ctx)
    {
        return getSizeX(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getSizeX()
    {
        return begin_getSizeX(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSizeX(const ::Ice::Context& __ctx)
    {
        return begin_getSizeX(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSizeX(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSizeX(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSizeX(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSizeX(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSizeX(const ::omero::model::Callback_Pixels_getSizeXPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSizeX(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSizeX(const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_getSizeXPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSizeX(&__ctx, __del, __cookie);
    }

    ::omero::RIntPtr end_getSizeX(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RIntPtr getSizeX(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getSizeX(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setSizeX(const ::omero::RIntPtr& theSizeX)
    {
        setSizeX(theSizeX, 0);
    }
    void setSizeX(const ::omero::RIntPtr& theSizeX, const ::Ice::Context& __ctx)
    {
        setSizeX(theSizeX, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setSizeX(const ::omero::RIntPtr& theSizeX)
    {
        return begin_setSizeX(theSizeX, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setSizeX(const ::omero::RIntPtr& theSizeX, const ::Ice::Context& __ctx)
    {
        return begin_setSizeX(theSizeX, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setSizeX(const ::omero::RIntPtr& theSizeX, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSizeX(theSizeX, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSizeX(const ::omero::RIntPtr& theSizeX, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSizeX(theSizeX, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSizeX(const ::omero::RIntPtr& theSizeX, const ::omero::model::Callback_Pixels_setSizeXPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSizeX(theSizeX, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSizeX(const ::omero::RIntPtr& theSizeX, const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_setSizeXPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSizeX(theSizeX, &__ctx, __del, __cookie);
    }

    void end_setSizeX(const ::Ice::AsyncResultPtr&);
    
private:

    void setSizeX(const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setSizeX(const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RIntPtr getSizeY()
    {
        return getSizeY(0);
    }
    ::omero::RIntPtr getSizeY(const ::Ice::Context& __ctx)
    {
        return getSizeY(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getSizeY()
    {
        return begin_getSizeY(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSizeY(const ::Ice::Context& __ctx)
    {
        return begin_getSizeY(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSizeY(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSizeY(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSizeY(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSizeY(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSizeY(const ::omero::model::Callback_Pixels_getSizeYPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSizeY(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSizeY(const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_getSizeYPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSizeY(&__ctx, __del, __cookie);
    }

    ::omero::RIntPtr end_getSizeY(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RIntPtr getSizeY(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getSizeY(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setSizeY(const ::omero::RIntPtr& theSizeY)
    {
        setSizeY(theSizeY, 0);
    }
    void setSizeY(const ::omero::RIntPtr& theSizeY, const ::Ice::Context& __ctx)
    {
        setSizeY(theSizeY, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setSizeY(const ::omero::RIntPtr& theSizeY)
    {
        return begin_setSizeY(theSizeY, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setSizeY(const ::omero::RIntPtr& theSizeY, const ::Ice::Context& __ctx)
    {
        return begin_setSizeY(theSizeY, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setSizeY(const ::omero::RIntPtr& theSizeY, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSizeY(theSizeY, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSizeY(const ::omero::RIntPtr& theSizeY, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSizeY(theSizeY, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSizeY(const ::omero::RIntPtr& theSizeY, const ::omero::model::Callback_Pixels_setSizeYPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSizeY(theSizeY, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSizeY(const ::omero::RIntPtr& theSizeY, const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_setSizeYPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSizeY(theSizeY, &__ctx, __del, __cookie);
    }

    void end_setSizeY(const ::Ice::AsyncResultPtr&);
    
private:

    void setSizeY(const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setSizeY(const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RIntPtr getSizeZ()
    {
        return getSizeZ(0);
    }
    ::omero::RIntPtr getSizeZ(const ::Ice::Context& __ctx)
    {
        return getSizeZ(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getSizeZ()
    {
        return begin_getSizeZ(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSizeZ(const ::Ice::Context& __ctx)
    {
        return begin_getSizeZ(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSizeZ(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSizeZ(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSizeZ(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSizeZ(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSizeZ(const ::omero::model::Callback_Pixels_getSizeZPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSizeZ(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSizeZ(const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_getSizeZPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSizeZ(&__ctx, __del, __cookie);
    }

    ::omero::RIntPtr end_getSizeZ(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RIntPtr getSizeZ(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getSizeZ(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setSizeZ(const ::omero::RIntPtr& theSizeZ)
    {
        setSizeZ(theSizeZ, 0);
    }
    void setSizeZ(const ::omero::RIntPtr& theSizeZ, const ::Ice::Context& __ctx)
    {
        setSizeZ(theSizeZ, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setSizeZ(const ::omero::RIntPtr& theSizeZ)
    {
        return begin_setSizeZ(theSizeZ, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setSizeZ(const ::omero::RIntPtr& theSizeZ, const ::Ice::Context& __ctx)
    {
        return begin_setSizeZ(theSizeZ, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setSizeZ(const ::omero::RIntPtr& theSizeZ, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSizeZ(theSizeZ, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSizeZ(const ::omero::RIntPtr& theSizeZ, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSizeZ(theSizeZ, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSizeZ(const ::omero::RIntPtr& theSizeZ, const ::omero::model::Callback_Pixels_setSizeZPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSizeZ(theSizeZ, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSizeZ(const ::omero::RIntPtr& theSizeZ, const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_setSizeZPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSizeZ(theSizeZ, &__ctx, __del, __cookie);
    }

    void end_setSizeZ(const ::Ice::AsyncResultPtr&);
    
private:

    void setSizeZ(const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setSizeZ(const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RIntPtr getSizeC()
    {
        return getSizeC(0);
    }
    ::omero::RIntPtr getSizeC(const ::Ice::Context& __ctx)
    {
        return getSizeC(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getSizeC()
    {
        return begin_getSizeC(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSizeC(const ::Ice::Context& __ctx)
    {
        return begin_getSizeC(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSizeC(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSizeC(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSizeC(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSizeC(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSizeC(const ::omero::model::Callback_Pixels_getSizeCPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSizeC(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSizeC(const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_getSizeCPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSizeC(&__ctx, __del, __cookie);
    }

    ::omero::RIntPtr end_getSizeC(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RIntPtr getSizeC(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getSizeC(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setSizeC(const ::omero::RIntPtr& theSizeC)
    {
        setSizeC(theSizeC, 0);
    }
    void setSizeC(const ::omero::RIntPtr& theSizeC, const ::Ice::Context& __ctx)
    {
        setSizeC(theSizeC, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setSizeC(const ::omero::RIntPtr& theSizeC)
    {
        return begin_setSizeC(theSizeC, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setSizeC(const ::omero::RIntPtr& theSizeC, const ::Ice::Context& __ctx)
    {
        return begin_setSizeC(theSizeC, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setSizeC(const ::omero::RIntPtr& theSizeC, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSizeC(theSizeC, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSizeC(const ::omero::RIntPtr& theSizeC, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSizeC(theSizeC, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSizeC(const ::omero::RIntPtr& theSizeC, const ::omero::model::Callback_Pixels_setSizeCPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSizeC(theSizeC, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSizeC(const ::omero::RIntPtr& theSizeC, const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_setSizeCPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSizeC(theSizeC, &__ctx, __del, __cookie);
    }

    void end_setSizeC(const ::Ice::AsyncResultPtr&);
    
private:

    void setSizeC(const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setSizeC(const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RIntPtr getSizeT()
    {
        return getSizeT(0);
    }
    ::omero::RIntPtr getSizeT(const ::Ice::Context& __ctx)
    {
        return getSizeT(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getSizeT()
    {
        return begin_getSizeT(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSizeT(const ::Ice::Context& __ctx)
    {
        return begin_getSizeT(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSizeT(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSizeT(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSizeT(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSizeT(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSizeT(const ::omero::model::Callback_Pixels_getSizeTPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSizeT(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSizeT(const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_getSizeTPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSizeT(&__ctx, __del, __cookie);
    }

    ::omero::RIntPtr end_getSizeT(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RIntPtr getSizeT(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getSizeT(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setSizeT(const ::omero::RIntPtr& theSizeT)
    {
        setSizeT(theSizeT, 0);
    }
    void setSizeT(const ::omero::RIntPtr& theSizeT, const ::Ice::Context& __ctx)
    {
        setSizeT(theSizeT, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setSizeT(const ::omero::RIntPtr& theSizeT)
    {
        return begin_setSizeT(theSizeT, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setSizeT(const ::omero::RIntPtr& theSizeT, const ::Ice::Context& __ctx)
    {
        return begin_setSizeT(theSizeT, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setSizeT(const ::omero::RIntPtr& theSizeT, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSizeT(theSizeT, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSizeT(const ::omero::RIntPtr& theSizeT, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSizeT(theSizeT, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSizeT(const ::omero::RIntPtr& theSizeT, const ::omero::model::Callback_Pixels_setSizeTPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSizeT(theSizeT, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSizeT(const ::omero::RIntPtr& theSizeT, const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_setSizeTPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSizeT(theSizeT, &__ctx, __del, __cookie);
    }

    void end_setSizeT(const ::Ice::AsyncResultPtr&);
    
private:

    void setSizeT(const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setSizeT(const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getSha1()
    {
        return getSha1(0);
    }
    ::omero::RStringPtr getSha1(const ::Ice::Context& __ctx)
    {
        return getSha1(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getSha1()
    {
        return begin_getSha1(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSha1(const ::Ice::Context& __ctx)
    {
        return begin_getSha1(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSha1(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSha1(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSha1(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSha1(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSha1(const ::omero::model::Callback_Pixels_getSha1Ptr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSha1(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSha1(const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_getSha1Ptr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSha1(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getSha1(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getSha1(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getSha1(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setSha1(const ::omero::RStringPtr& theSha1)
    {
        setSha1(theSha1, 0);
    }
    void setSha1(const ::omero::RStringPtr& theSha1, const ::Ice::Context& __ctx)
    {
        setSha1(theSha1, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setSha1(const ::omero::RStringPtr& theSha1)
    {
        return begin_setSha1(theSha1, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setSha1(const ::omero::RStringPtr& theSha1, const ::Ice::Context& __ctx)
    {
        return begin_setSha1(theSha1, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setSha1(const ::omero::RStringPtr& theSha1, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSha1(theSha1, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSha1(const ::omero::RStringPtr& theSha1, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSha1(theSha1, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSha1(const ::omero::RStringPtr& theSha1, const ::omero::model::Callback_Pixels_setSha1Ptr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSha1(theSha1, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSha1(const ::omero::RStringPtr& theSha1, const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_setSha1Ptr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSha1(theSha1, &__ctx, __del, __cookie);
    }

    void end_setSha1(const ::Ice::AsyncResultPtr&);
    
private:

    void setSha1(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setSha1(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::DimensionOrderPtr getDimensionOrder()
    {
        return getDimensionOrder(0);
    }
    ::omero::model::DimensionOrderPtr getDimensionOrder(const ::Ice::Context& __ctx)
    {
        return getDimensionOrder(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getDimensionOrder()
    {
        return begin_getDimensionOrder(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDimensionOrder(const ::Ice::Context& __ctx)
    {
        return begin_getDimensionOrder(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDimensionOrder(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDimensionOrder(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDimensionOrder(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDimensionOrder(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDimensionOrder(const ::omero::model::Callback_Pixels_getDimensionOrderPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDimensionOrder(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDimensionOrder(const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_getDimensionOrderPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDimensionOrder(&__ctx, __del, __cookie);
    }

    ::omero::model::DimensionOrderPtr end_getDimensionOrder(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::DimensionOrderPtr getDimensionOrder(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getDimensionOrder(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setDimensionOrder(const ::omero::model::DimensionOrderPtr& theDimensionOrder)
    {
        setDimensionOrder(theDimensionOrder, 0);
    }
    void setDimensionOrder(const ::omero::model::DimensionOrderPtr& theDimensionOrder, const ::Ice::Context& __ctx)
    {
        setDimensionOrder(theDimensionOrder, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setDimensionOrder(const ::omero::model::DimensionOrderPtr& theDimensionOrder)
    {
        return begin_setDimensionOrder(theDimensionOrder, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setDimensionOrder(const ::omero::model::DimensionOrderPtr& theDimensionOrder, const ::Ice::Context& __ctx)
    {
        return begin_setDimensionOrder(theDimensionOrder, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setDimensionOrder(const ::omero::model::DimensionOrderPtr& theDimensionOrder, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDimensionOrder(theDimensionOrder, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDimensionOrder(const ::omero::model::DimensionOrderPtr& theDimensionOrder, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDimensionOrder(theDimensionOrder, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDimensionOrder(const ::omero::model::DimensionOrderPtr& theDimensionOrder, const ::omero::model::Callback_Pixels_setDimensionOrderPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDimensionOrder(theDimensionOrder, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDimensionOrder(const ::omero::model::DimensionOrderPtr& theDimensionOrder, const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_setDimensionOrderPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDimensionOrder(theDimensionOrder, &__ctx, __del, __cookie);
    }

    void end_setDimensionOrder(const ::Ice::AsyncResultPtr&);
    
private:

    void setDimensionOrder(const ::omero::model::DimensionOrderPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setDimensionOrder(const ::omero::model::DimensionOrderPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RDoublePtr getPhysicalSizeX()
    {
        return getPhysicalSizeX(0);
    }
    ::omero::RDoublePtr getPhysicalSizeX(const ::Ice::Context& __ctx)
    {
        return getPhysicalSizeX(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getPhysicalSizeX()
    {
        return begin_getPhysicalSizeX(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPhysicalSizeX(const ::Ice::Context& __ctx)
    {
        return begin_getPhysicalSizeX(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPhysicalSizeX(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPhysicalSizeX(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPhysicalSizeX(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPhysicalSizeX(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPhysicalSizeX(const ::omero::model::Callback_Pixels_getPhysicalSizeXPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPhysicalSizeX(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPhysicalSizeX(const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_getPhysicalSizeXPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPhysicalSizeX(&__ctx, __del, __cookie);
    }

    ::omero::RDoublePtr end_getPhysicalSizeX(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RDoublePtr getPhysicalSizeX(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getPhysicalSizeX(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setPhysicalSizeX(const ::omero::RDoublePtr& thePhysicalSizeX)
    {
        setPhysicalSizeX(thePhysicalSizeX, 0);
    }
    void setPhysicalSizeX(const ::omero::RDoublePtr& thePhysicalSizeX, const ::Ice::Context& __ctx)
    {
        setPhysicalSizeX(thePhysicalSizeX, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setPhysicalSizeX(const ::omero::RDoublePtr& thePhysicalSizeX)
    {
        return begin_setPhysicalSizeX(thePhysicalSizeX, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPhysicalSizeX(const ::omero::RDoublePtr& thePhysicalSizeX, const ::Ice::Context& __ctx)
    {
        return begin_setPhysicalSizeX(thePhysicalSizeX, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPhysicalSizeX(const ::omero::RDoublePtr& thePhysicalSizeX, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPhysicalSizeX(thePhysicalSizeX, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPhysicalSizeX(const ::omero::RDoublePtr& thePhysicalSizeX, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPhysicalSizeX(thePhysicalSizeX, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPhysicalSizeX(const ::omero::RDoublePtr& thePhysicalSizeX, const ::omero::model::Callback_Pixels_setPhysicalSizeXPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPhysicalSizeX(thePhysicalSizeX, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPhysicalSizeX(const ::omero::RDoublePtr& thePhysicalSizeX, const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_setPhysicalSizeXPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPhysicalSizeX(thePhysicalSizeX, &__ctx, __del, __cookie);
    }

    void end_setPhysicalSizeX(const ::Ice::AsyncResultPtr&);
    
private:

    void setPhysicalSizeX(const ::omero::RDoublePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setPhysicalSizeX(const ::omero::RDoublePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RDoublePtr getPhysicalSizeY()
    {
        return getPhysicalSizeY(0);
    }
    ::omero::RDoublePtr getPhysicalSizeY(const ::Ice::Context& __ctx)
    {
        return getPhysicalSizeY(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getPhysicalSizeY()
    {
        return begin_getPhysicalSizeY(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPhysicalSizeY(const ::Ice::Context& __ctx)
    {
        return begin_getPhysicalSizeY(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPhysicalSizeY(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPhysicalSizeY(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPhysicalSizeY(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPhysicalSizeY(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPhysicalSizeY(const ::omero::model::Callback_Pixels_getPhysicalSizeYPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPhysicalSizeY(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPhysicalSizeY(const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_getPhysicalSizeYPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPhysicalSizeY(&__ctx, __del, __cookie);
    }

    ::omero::RDoublePtr end_getPhysicalSizeY(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RDoublePtr getPhysicalSizeY(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getPhysicalSizeY(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setPhysicalSizeY(const ::omero::RDoublePtr& thePhysicalSizeY)
    {
        setPhysicalSizeY(thePhysicalSizeY, 0);
    }
    void setPhysicalSizeY(const ::omero::RDoublePtr& thePhysicalSizeY, const ::Ice::Context& __ctx)
    {
        setPhysicalSizeY(thePhysicalSizeY, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setPhysicalSizeY(const ::omero::RDoublePtr& thePhysicalSizeY)
    {
        return begin_setPhysicalSizeY(thePhysicalSizeY, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPhysicalSizeY(const ::omero::RDoublePtr& thePhysicalSizeY, const ::Ice::Context& __ctx)
    {
        return begin_setPhysicalSizeY(thePhysicalSizeY, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPhysicalSizeY(const ::omero::RDoublePtr& thePhysicalSizeY, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPhysicalSizeY(thePhysicalSizeY, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPhysicalSizeY(const ::omero::RDoublePtr& thePhysicalSizeY, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPhysicalSizeY(thePhysicalSizeY, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPhysicalSizeY(const ::omero::RDoublePtr& thePhysicalSizeY, const ::omero::model::Callback_Pixels_setPhysicalSizeYPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPhysicalSizeY(thePhysicalSizeY, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPhysicalSizeY(const ::omero::RDoublePtr& thePhysicalSizeY, const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_setPhysicalSizeYPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPhysicalSizeY(thePhysicalSizeY, &__ctx, __del, __cookie);
    }

    void end_setPhysicalSizeY(const ::Ice::AsyncResultPtr&);
    
private:

    void setPhysicalSizeY(const ::omero::RDoublePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setPhysicalSizeY(const ::omero::RDoublePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RDoublePtr getPhysicalSizeZ()
    {
        return getPhysicalSizeZ(0);
    }
    ::omero::RDoublePtr getPhysicalSizeZ(const ::Ice::Context& __ctx)
    {
        return getPhysicalSizeZ(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getPhysicalSizeZ()
    {
        return begin_getPhysicalSizeZ(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPhysicalSizeZ(const ::Ice::Context& __ctx)
    {
        return begin_getPhysicalSizeZ(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPhysicalSizeZ(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPhysicalSizeZ(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPhysicalSizeZ(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPhysicalSizeZ(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPhysicalSizeZ(const ::omero::model::Callback_Pixels_getPhysicalSizeZPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPhysicalSizeZ(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPhysicalSizeZ(const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_getPhysicalSizeZPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPhysicalSizeZ(&__ctx, __del, __cookie);
    }

    ::omero::RDoublePtr end_getPhysicalSizeZ(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RDoublePtr getPhysicalSizeZ(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getPhysicalSizeZ(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setPhysicalSizeZ(const ::omero::RDoublePtr& thePhysicalSizeZ)
    {
        setPhysicalSizeZ(thePhysicalSizeZ, 0);
    }
    void setPhysicalSizeZ(const ::omero::RDoublePtr& thePhysicalSizeZ, const ::Ice::Context& __ctx)
    {
        setPhysicalSizeZ(thePhysicalSizeZ, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setPhysicalSizeZ(const ::omero::RDoublePtr& thePhysicalSizeZ)
    {
        return begin_setPhysicalSizeZ(thePhysicalSizeZ, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPhysicalSizeZ(const ::omero::RDoublePtr& thePhysicalSizeZ, const ::Ice::Context& __ctx)
    {
        return begin_setPhysicalSizeZ(thePhysicalSizeZ, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPhysicalSizeZ(const ::omero::RDoublePtr& thePhysicalSizeZ, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPhysicalSizeZ(thePhysicalSizeZ, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPhysicalSizeZ(const ::omero::RDoublePtr& thePhysicalSizeZ, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPhysicalSizeZ(thePhysicalSizeZ, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPhysicalSizeZ(const ::omero::RDoublePtr& thePhysicalSizeZ, const ::omero::model::Callback_Pixels_setPhysicalSizeZPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPhysicalSizeZ(thePhysicalSizeZ, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPhysicalSizeZ(const ::omero::RDoublePtr& thePhysicalSizeZ, const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_setPhysicalSizeZPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPhysicalSizeZ(thePhysicalSizeZ, &__ctx, __del, __cookie);
    }

    void end_setPhysicalSizeZ(const ::Ice::AsyncResultPtr&);
    
private:

    void setPhysicalSizeZ(const ::omero::RDoublePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setPhysicalSizeZ(const ::omero::RDoublePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RIntPtr getWaveStart()
    {
        return getWaveStart(0);
    }
    ::omero::RIntPtr getWaveStart(const ::Ice::Context& __ctx)
    {
        return getWaveStart(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getWaveStart()
    {
        return begin_getWaveStart(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getWaveStart(const ::Ice::Context& __ctx)
    {
        return begin_getWaveStart(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getWaveStart(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getWaveStart(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getWaveStart(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getWaveStart(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getWaveStart(const ::omero::model::Callback_Pixels_getWaveStartPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getWaveStart(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getWaveStart(const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_getWaveStartPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getWaveStart(&__ctx, __del, __cookie);
    }

    ::omero::RIntPtr end_getWaveStart(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RIntPtr getWaveStart(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getWaveStart(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setWaveStart(const ::omero::RIntPtr& theWaveStart)
    {
        setWaveStart(theWaveStart, 0);
    }
    void setWaveStart(const ::omero::RIntPtr& theWaveStart, const ::Ice::Context& __ctx)
    {
        setWaveStart(theWaveStart, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setWaveStart(const ::omero::RIntPtr& theWaveStart)
    {
        return begin_setWaveStart(theWaveStart, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setWaveStart(const ::omero::RIntPtr& theWaveStart, const ::Ice::Context& __ctx)
    {
        return begin_setWaveStart(theWaveStart, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setWaveStart(const ::omero::RIntPtr& theWaveStart, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setWaveStart(theWaveStart, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setWaveStart(const ::omero::RIntPtr& theWaveStart, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setWaveStart(theWaveStart, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setWaveStart(const ::omero::RIntPtr& theWaveStart, const ::omero::model::Callback_Pixels_setWaveStartPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setWaveStart(theWaveStart, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setWaveStart(const ::omero::RIntPtr& theWaveStart, const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_setWaveStartPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setWaveStart(theWaveStart, &__ctx, __del, __cookie);
    }

    void end_setWaveStart(const ::Ice::AsyncResultPtr&);
    
private:

    void setWaveStart(const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setWaveStart(const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RIntPtr getWaveIncrement()
    {
        return getWaveIncrement(0);
    }
    ::omero::RIntPtr getWaveIncrement(const ::Ice::Context& __ctx)
    {
        return getWaveIncrement(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getWaveIncrement()
    {
        return begin_getWaveIncrement(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getWaveIncrement(const ::Ice::Context& __ctx)
    {
        return begin_getWaveIncrement(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getWaveIncrement(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getWaveIncrement(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getWaveIncrement(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getWaveIncrement(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getWaveIncrement(const ::omero::model::Callback_Pixels_getWaveIncrementPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getWaveIncrement(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getWaveIncrement(const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_getWaveIncrementPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getWaveIncrement(&__ctx, __del, __cookie);
    }

    ::omero::RIntPtr end_getWaveIncrement(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RIntPtr getWaveIncrement(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getWaveIncrement(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setWaveIncrement(const ::omero::RIntPtr& theWaveIncrement)
    {
        setWaveIncrement(theWaveIncrement, 0);
    }
    void setWaveIncrement(const ::omero::RIntPtr& theWaveIncrement, const ::Ice::Context& __ctx)
    {
        setWaveIncrement(theWaveIncrement, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setWaveIncrement(const ::omero::RIntPtr& theWaveIncrement)
    {
        return begin_setWaveIncrement(theWaveIncrement, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setWaveIncrement(const ::omero::RIntPtr& theWaveIncrement, const ::Ice::Context& __ctx)
    {
        return begin_setWaveIncrement(theWaveIncrement, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setWaveIncrement(const ::omero::RIntPtr& theWaveIncrement, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setWaveIncrement(theWaveIncrement, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setWaveIncrement(const ::omero::RIntPtr& theWaveIncrement, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setWaveIncrement(theWaveIncrement, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setWaveIncrement(const ::omero::RIntPtr& theWaveIncrement, const ::omero::model::Callback_Pixels_setWaveIncrementPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setWaveIncrement(theWaveIncrement, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setWaveIncrement(const ::omero::RIntPtr& theWaveIncrement, const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_setWaveIncrementPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setWaveIncrement(theWaveIncrement, &__ctx, __del, __cookie);
    }

    void end_setWaveIncrement(const ::Ice::AsyncResultPtr&);
    
private:

    void setWaveIncrement(const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setWaveIncrement(const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RDoublePtr getTimeIncrement()
    {
        return getTimeIncrement(0);
    }
    ::omero::RDoublePtr getTimeIncrement(const ::Ice::Context& __ctx)
    {
        return getTimeIncrement(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getTimeIncrement()
    {
        return begin_getTimeIncrement(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getTimeIncrement(const ::Ice::Context& __ctx)
    {
        return begin_getTimeIncrement(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getTimeIncrement(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTimeIncrement(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTimeIncrement(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTimeIncrement(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTimeIncrement(const ::omero::model::Callback_Pixels_getTimeIncrementPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTimeIncrement(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTimeIncrement(const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_getTimeIncrementPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTimeIncrement(&__ctx, __del, __cookie);
    }

    ::omero::RDoublePtr end_getTimeIncrement(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RDoublePtr getTimeIncrement(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getTimeIncrement(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setTimeIncrement(const ::omero::RDoublePtr& theTimeIncrement)
    {
        setTimeIncrement(theTimeIncrement, 0);
    }
    void setTimeIncrement(const ::omero::RDoublePtr& theTimeIncrement, const ::Ice::Context& __ctx)
    {
        setTimeIncrement(theTimeIncrement, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setTimeIncrement(const ::omero::RDoublePtr& theTimeIncrement)
    {
        return begin_setTimeIncrement(theTimeIncrement, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setTimeIncrement(const ::omero::RDoublePtr& theTimeIncrement, const ::Ice::Context& __ctx)
    {
        return begin_setTimeIncrement(theTimeIncrement, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setTimeIncrement(const ::omero::RDoublePtr& theTimeIncrement, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTimeIncrement(theTimeIncrement, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setTimeIncrement(const ::omero::RDoublePtr& theTimeIncrement, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTimeIncrement(theTimeIncrement, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setTimeIncrement(const ::omero::RDoublePtr& theTimeIncrement, const ::omero::model::Callback_Pixels_setTimeIncrementPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTimeIncrement(theTimeIncrement, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setTimeIncrement(const ::omero::RDoublePtr& theTimeIncrement, const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_setTimeIncrementPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTimeIncrement(theTimeIncrement, &__ctx, __del, __cookie);
    }

    void end_setTimeIncrement(const ::Ice::AsyncResultPtr&);
    
private:

    void setTimeIncrement(const ::omero::RDoublePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setTimeIncrement(const ::omero::RDoublePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getMethodology()
    {
        return getMethodology(0);
    }
    ::omero::RStringPtr getMethodology(const ::Ice::Context& __ctx)
    {
        return getMethodology(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getMethodology()
    {
        return begin_getMethodology(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getMethodology(const ::Ice::Context& __ctx)
    {
        return begin_getMethodology(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getMethodology(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMethodology(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMethodology(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMethodology(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMethodology(const ::omero::model::Callback_Pixels_getMethodologyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMethodology(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMethodology(const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_getMethodologyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMethodology(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getMethodology(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getMethodology(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getMethodology(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setMethodology(const ::omero::RStringPtr& theMethodology)
    {
        setMethodology(theMethodology, 0);
    }
    void setMethodology(const ::omero::RStringPtr& theMethodology, const ::Ice::Context& __ctx)
    {
        setMethodology(theMethodology, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setMethodology(const ::omero::RStringPtr& theMethodology)
    {
        return begin_setMethodology(theMethodology, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setMethodology(const ::omero::RStringPtr& theMethodology, const ::Ice::Context& __ctx)
    {
        return begin_setMethodology(theMethodology, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setMethodology(const ::omero::RStringPtr& theMethodology, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setMethodology(theMethodology, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setMethodology(const ::omero::RStringPtr& theMethodology, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setMethodology(theMethodology, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setMethodology(const ::omero::RStringPtr& theMethodology, const ::omero::model::Callback_Pixels_setMethodologyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setMethodology(theMethodology, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setMethodology(const ::omero::RStringPtr& theMethodology, const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_setMethodologyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setMethodology(theMethodology, &__ctx, __del, __cookie);
    }

    void end_setMethodology(const ::Ice::AsyncResultPtr&);
    
private:

    void setMethodology(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setMethodology(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unloadPlaneInfo()
    {
        unloadPlaneInfo(0);
    }
    void unloadPlaneInfo(const ::Ice::Context& __ctx)
    {
        unloadPlaneInfo(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_unloadPlaneInfo()
    {
        return begin_unloadPlaneInfo(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadPlaneInfo(const ::Ice::Context& __ctx)
    {
        return begin_unloadPlaneInfo(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadPlaneInfo(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadPlaneInfo(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadPlaneInfo(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadPlaneInfo(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadPlaneInfo(const ::omero::model::Callback_Pixels_unloadPlaneInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadPlaneInfo(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadPlaneInfo(const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_unloadPlaneInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadPlaneInfo(&__ctx, __del, __cookie);
    }

    void end_unloadPlaneInfo(const ::Ice::AsyncResultPtr&);
    
private:

    void unloadPlaneInfo(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unloadPlaneInfo(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int sizeOfPlaneInfo()
    {
        return sizeOfPlaneInfo(0);
    }
    ::Ice::Int sizeOfPlaneInfo(const ::Ice::Context& __ctx)
    {
        return sizeOfPlaneInfo(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_sizeOfPlaneInfo()
    {
        return begin_sizeOfPlaneInfo(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfPlaneInfo(const ::Ice::Context& __ctx)
    {
        return begin_sizeOfPlaneInfo(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfPlaneInfo(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfPlaneInfo(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfPlaneInfo(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfPlaneInfo(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfPlaneInfo(const ::omero::model::Callback_Pixels_sizeOfPlaneInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfPlaneInfo(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfPlaneInfo(const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_sizeOfPlaneInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfPlaneInfo(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_sizeOfPlaneInfo(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int sizeOfPlaneInfo(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sizeOfPlaneInfo(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::PixelsPlaneInfoSeq copyPlaneInfo()
    {
        return copyPlaneInfo(0);
    }
    ::omero::model::PixelsPlaneInfoSeq copyPlaneInfo(const ::Ice::Context& __ctx)
    {
        return copyPlaneInfo(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_copyPlaneInfo()
    {
        return begin_copyPlaneInfo(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyPlaneInfo(const ::Ice::Context& __ctx)
    {
        return begin_copyPlaneInfo(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyPlaneInfo(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyPlaneInfo(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyPlaneInfo(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyPlaneInfo(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyPlaneInfo(const ::omero::model::Callback_Pixels_copyPlaneInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyPlaneInfo(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyPlaneInfo(const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_copyPlaneInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyPlaneInfo(&__ctx, __del, __cookie);
    }

    ::omero::model::PixelsPlaneInfoSeq end_copyPlaneInfo(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::PixelsPlaneInfoSeq copyPlaneInfo(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_copyPlaneInfo(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addPlaneInfo(const ::omero::model::PlaneInfoPtr& target)
    {
        addPlaneInfo(target, 0);
    }
    void addPlaneInfo(const ::omero::model::PlaneInfoPtr& target, const ::Ice::Context& __ctx)
    {
        addPlaneInfo(target, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addPlaneInfo(const ::omero::model::PlaneInfoPtr& target)
    {
        return begin_addPlaneInfo(target, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addPlaneInfo(const ::omero::model::PlaneInfoPtr& target, const ::Ice::Context& __ctx)
    {
        return begin_addPlaneInfo(target, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addPlaneInfo(const ::omero::model::PlaneInfoPtr& target, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPlaneInfo(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addPlaneInfo(const ::omero::model::PlaneInfoPtr& target, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPlaneInfo(target, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addPlaneInfo(const ::omero::model::PlaneInfoPtr& target, const ::omero::model::Callback_Pixels_addPlaneInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPlaneInfo(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addPlaneInfo(const ::omero::model::PlaneInfoPtr& target, const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_addPlaneInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPlaneInfo(target, &__ctx, __del, __cookie);
    }

    void end_addPlaneInfo(const ::Ice::AsyncResultPtr&);
    
private:

    void addPlaneInfo(const ::omero::model::PlaneInfoPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addPlaneInfo(const ::omero::model::PlaneInfoPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addAllPlaneInfoSet(const ::omero::model::PixelsPlaneInfoSeq& targets)
    {
        addAllPlaneInfoSet(targets, 0);
    }
    void addAllPlaneInfoSet(const ::omero::model::PixelsPlaneInfoSeq& targets, const ::Ice::Context& __ctx)
    {
        addAllPlaneInfoSet(targets, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addAllPlaneInfoSet(const ::omero::model::PixelsPlaneInfoSeq& targets)
    {
        return begin_addAllPlaneInfoSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllPlaneInfoSet(const ::omero::model::PixelsPlaneInfoSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_addAllPlaneInfoSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllPlaneInfoSet(const ::omero::model::PixelsPlaneInfoSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllPlaneInfoSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllPlaneInfoSet(const ::omero::model::PixelsPlaneInfoSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllPlaneInfoSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllPlaneInfoSet(const ::omero::model::PixelsPlaneInfoSeq& targets, const ::omero::model::Callback_Pixels_addAllPlaneInfoSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllPlaneInfoSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllPlaneInfoSet(const ::omero::model::PixelsPlaneInfoSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_addAllPlaneInfoSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllPlaneInfoSet(targets, &__ctx, __del, __cookie);
    }

    void end_addAllPlaneInfoSet(const ::Ice::AsyncResultPtr&);
    
private:

    void addAllPlaneInfoSet(const ::omero::model::PixelsPlaneInfoSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addAllPlaneInfoSet(const ::omero::model::PixelsPlaneInfoSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removePlaneInfo(const ::omero::model::PlaneInfoPtr& theTarget)
    {
        removePlaneInfo(theTarget, 0);
    }
    void removePlaneInfo(const ::omero::model::PlaneInfoPtr& theTarget, const ::Ice::Context& __ctx)
    {
        removePlaneInfo(theTarget, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removePlaneInfo(const ::omero::model::PlaneInfoPtr& theTarget)
    {
        return begin_removePlaneInfo(theTarget, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removePlaneInfo(const ::omero::model::PlaneInfoPtr& theTarget, const ::Ice::Context& __ctx)
    {
        return begin_removePlaneInfo(theTarget, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removePlaneInfo(const ::omero::model::PlaneInfoPtr& theTarget, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removePlaneInfo(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removePlaneInfo(const ::omero::model::PlaneInfoPtr& theTarget, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removePlaneInfo(theTarget, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removePlaneInfo(const ::omero::model::PlaneInfoPtr& theTarget, const ::omero::model::Callback_Pixels_removePlaneInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removePlaneInfo(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removePlaneInfo(const ::omero::model::PlaneInfoPtr& theTarget, const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_removePlaneInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removePlaneInfo(theTarget, &__ctx, __del, __cookie);
    }

    void end_removePlaneInfo(const ::Ice::AsyncResultPtr&);
    
private:

    void removePlaneInfo(const ::omero::model::PlaneInfoPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removePlaneInfo(const ::omero::model::PlaneInfoPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeAllPlaneInfoSet(const ::omero::model::PixelsPlaneInfoSeq& targets)
    {
        removeAllPlaneInfoSet(targets, 0);
    }
    void removeAllPlaneInfoSet(const ::omero::model::PixelsPlaneInfoSeq& targets, const ::Ice::Context& __ctx)
    {
        removeAllPlaneInfoSet(targets, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removeAllPlaneInfoSet(const ::omero::model::PixelsPlaneInfoSeq& targets)
    {
        return begin_removeAllPlaneInfoSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllPlaneInfoSet(const ::omero::model::PixelsPlaneInfoSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_removeAllPlaneInfoSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllPlaneInfoSet(const ::omero::model::PixelsPlaneInfoSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllPlaneInfoSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllPlaneInfoSet(const ::omero::model::PixelsPlaneInfoSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllPlaneInfoSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllPlaneInfoSet(const ::omero::model::PixelsPlaneInfoSeq& targets, const ::omero::model::Callback_Pixels_removeAllPlaneInfoSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllPlaneInfoSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllPlaneInfoSet(const ::omero::model::PixelsPlaneInfoSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_removeAllPlaneInfoSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllPlaneInfoSet(targets, &__ctx, __del, __cookie);
    }

    void end_removeAllPlaneInfoSet(const ::Ice::AsyncResultPtr&);
    
private:

    void removeAllPlaneInfoSet(const ::omero::model::PixelsPlaneInfoSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeAllPlaneInfoSet(const ::omero::model::PixelsPlaneInfoSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void clearPlaneInfo()
    {
        clearPlaneInfo(0);
    }
    void clearPlaneInfo(const ::Ice::Context& __ctx)
    {
        clearPlaneInfo(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_clearPlaneInfo()
    {
        return begin_clearPlaneInfo(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearPlaneInfo(const ::Ice::Context& __ctx)
    {
        return begin_clearPlaneInfo(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearPlaneInfo(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearPlaneInfo(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearPlaneInfo(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearPlaneInfo(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearPlaneInfo(const ::omero::model::Callback_Pixels_clearPlaneInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearPlaneInfo(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearPlaneInfo(const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_clearPlaneInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearPlaneInfo(&__ctx, __del, __cookie);
    }

    void end_clearPlaneInfo(const ::Ice::AsyncResultPtr&);
    
private:

    void clearPlaneInfo(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_clearPlaneInfo(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reloadPlaneInfo(const ::omero::model::PixelsPtr& toCopy)
    {
        reloadPlaneInfo(toCopy, 0);
    }
    void reloadPlaneInfo(const ::omero::model::PixelsPtr& toCopy, const ::Ice::Context& __ctx)
    {
        reloadPlaneInfo(toCopy, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_reloadPlaneInfo(const ::omero::model::PixelsPtr& toCopy)
    {
        return begin_reloadPlaneInfo(toCopy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadPlaneInfo(const ::omero::model::PixelsPtr& toCopy, const ::Ice::Context& __ctx)
    {
        return begin_reloadPlaneInfo(toCopy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadPlaneInfo(const ::omero::model::PixelsPtr& toCopy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadPlaneInfo(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadPlaneInfo(const ::omero::model::PixelsPtr& toCopy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadPlaneInfo(toCopy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadPlaneInfo(const ::omero::model::PixelsPtr& toCopy, const ::omero::model::Callback_Pixels_reloadPlaneInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadPlaneInfo(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadPlaneInfo(const ::omero::model::PixelsPtr& toCopy, const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_reloadPlaneInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadPlaneInfo(toCopy, &__ctx, __del, __cookie);
    }

    void end_reloadPlaneInfo(const ::Ice::AsyncResultPtr&);
    
private:

    void reloadPlaneInfo(const ::omero::model::PixelsPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reloadPlaneInfo(const ::omero::model::PixelsPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unloadPixelsFileMaps()
    {
        unloadPixelsFileMaps(0);
    }
    void unloadPixelsFileMaps(const ::Ice::Context& __ctx)
    {
        unloadPixelsFileMaps(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_unloadPixelsFileMaps()
    {
        return begin_unloadPixelsFileMaps(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadPixelsFileMaps(const ::Ice::Context& __ctx)
    {
        return begin_unloadPixelsFileMaps(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadPixelsFileMaps(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadPixelsFileMaps(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadPixelsFileMaps(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadPixelsFileMaps(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadPixelsFileMaps(const ::omero::model::Callback_Pixels_unloadPixelsFileMapsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadPixelsFileMaps(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadPixelsFileMaps(const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_unloadPixelsFileMapsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadPixelsFileMaps(&__ctx, __del, __cookie);
    }

    void end_unloadPixelsFileMaps(const ::Ice::AsyncResultPtr&);
    
private:

    void unloadPixelsFileMaps(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unloadPixelsFileMaps(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int sizeOfPixelsFileMaps()
    {
        return sizeOfPixelsFileMaps(0);
    }
    ::Ice::Int sizeOfPixelsFileMaps(const ::Ice::Context& __ctx)
    {
        return sizeOfPixelsFileMaps(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_sizeOfPixelsFileMaps()
    {
        return begin_sizeOfPixelsFileMaps(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfPixelsFileMaps(const ::Ice::Context& __ctx)
    {
        return begin_sizeOfPixelsFileMaps(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfPixelsFileMaps(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfPixelsFileMaps(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfPixelsFileMaps(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfPixelsFileMaps(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfPixelsFileMaps(const ::omero::model::Callback_Pixels_sizeOfPixelsFileMapsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfPixelsFileMaps(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfPixelsFileMaps(const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_sizeOfPixelsFileMapsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfPixelsFileMaps(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_sizeOfPixelsFileMaps(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int sizeOfPixelsFileMaps(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sizeOfPixelsFileMaps(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::PixelsPixelsFileMapsSeq copyPixelsFileMaps()
    {
        return copyPixelsFileMaps(0);
    }
    ::omero::model::PixelsPixelsFileMapsSeq copyPixelsFileMaps(const ::Ice::Context& __ctx)
    {
        return copyPixelsFileMaps(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_copyPixelsFileMaps()
    {
        return begin_copyPixelsFileMaps(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyPixelsFileMaps(const ::Ice::Context& __ctx)
    {
        return begin_copyPixelsFileMaps(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyPixelsFileMaps(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyPixelsFileMaps(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyPixelsFileMaps(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyPixelsFileMaps(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyPixelsFileMaps(const ::omero::model::Callback_Pixels_copyPixelsFileMapsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyPixelsFileMaps(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyPixelsFileMaps(const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_copyPixelsFileMapsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyPixelsFileMaps(&__ctx, __del, __cookie);
    }

    ::omero::model::PixelsPixelsFileMapsSeq end_copyPixelsFileMaps(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::PixelsPixelsFileMapsSeq copyPixelsFileMaps(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_copyPixelsFileMaps(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addPixelsOriginalFileMap(const ::omero::model::PixelsOriginalFileMapPtr& target)
    {
        addPixelsOriginalFileMap(target, 0);
    }
    void addPixelsOriginalFileMap(const ::omero::model::PixelsOriginalFileMapPtr& target, const ::Ice::Context& __ctx)
    {
        addPixelsOriginalFileMap(target, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addPixelsOriginalFileMap(const ::omero::model::PixelsOriginalFileMapPtr& target)
    {
        return begin_addPixelsOriginalFileMap(target, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addPixelsOriginalFileMap(const ::omero::model::PixelsOriginalFileMapPtr& target, const ::Ice::Context& __ctx)
    {
        return begin_addPixelsOriginalFileMap(target, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addPixelsOriginalFileMap(const ::omero::model::PixelsOriginalFileMapPtr& target, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPixelsOriginalFileMap(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addPixelsOriginalFileMap(const ::omero::model::PixelsOriginalFileMapPtr& target, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPixelsOriginalFileMap(target, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addPixelsOriginalFileMap(const ::omero::model::PixelsOriginalFileMapPtr& target, const ::omero::model::Callback_Pixels_addPixelsOriginalFileMapPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPixelsOriginalFileMap(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addPixelsOriginalFileMap(const ::omero::model::PixelsOriginalFileMapPtr& target, const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_addPixelsOriginalFileMapPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPixelsOriginalFileMap(target, &__ctx, __del, __cookie);
    }

    void end_addPixelsOriginalFileMap(const ::Ice::AsyncResultPtr&);
    
private:

    void addPixelsOriginalFileMap(const ::omero::model::PixelsOriginalFileMapPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addPixelsOriginalFileMap(const ::omero::model::PixelsOriginalFileMapPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addAllPixelsOriginalFileMapSet(const ::omero::model::PixelsPixelsFileMapsSeq& targets)
    {
        addAllPixelsOriginalFileMapSet(targets, 0);
    }
    void addAllPixelsOriginalFileMapSet(const ::omero::model::PixelsPixelsFileMapsSeq& targets, const ::Ice::Context& __ctx)
    {
        addAllPixelsOriginalFileMapSet(targets, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addAllPixelsOriginalFileMapSet(const ::omero::model::PixelsPixelsFileMapsSeq& targets)
    {
        return begin_addAllPixelsOriginalFileMapSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllPixelsOriginalFileMapSet(const ::omero::model::PixelsPixelsFileMapsSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_addAllPixelsOriginalFileMapSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllPixelsOriginalFileMapSet(const ::omero::model::PixelsPixelsFileMapsSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllPixelsOriginalFileMapSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllPixelsOriginalFileMapSet(const ::omero::model::PixelsPixelsFileMapsSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllPixelsOriginalFileMapSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllPixelsOriginalFileMapSet(const ::omero::model::PixelsPixelsFileMapsSeq& targets, const ::omero::model::Callback_Pixels_addAllPixelsOriginalFileMapSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllPixelsOriginalFileMapSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllPixelsOriginalFileMapSet(const ::omero::model::PixelsPixelsFileMapsSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_addAllPixelsOriginalFileMapSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllPixelsOriginalFileMapSet(targets, &__ctx, __del, __cookie);
    }

    void end_addAllPixelsOriginalFileMapSet(const ::Ice::AsyncResultPtr&);
    
private:

    void addAllPixelsOriginalFileMapSet(const ::omero::model::PixelsPixelsFileMapsSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addAllPixelsOriginalFileMapSet(const ::omero::model::PixelsPixelsFileMapsSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removePixelsOriginalFileMap(const ::omero::model::PixelsOriginalFileMapPtr& theTarget)
    {
        removePixelsOriginalFileMap(theTarget, 0);
    }
    void removePixelsOriginalFileMap(const ::omero::model::PixelsOriginalFileMapPtr& theTarget, const ::Ice::Context& __ctx)
    {
        removePixelsOriginalFileMap(theTarget, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removePixelsOriginalFileMap(const ::omero::model::PixelsOriginalFileMapPtr& theTarget)
    {
        return begin_removePixelsOriginalFileMap(theTarget, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removePixelsOriginalFileMap(const ::omero::model::PixelsOriginalFileMapPtr& theTarget, const ::Ice::Context& __ctx)
    {
        return begin_removePixelsOriginalFileMap(theTarget, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removePixelsOriginalFileMap(const ::omero::model::PixelsOriginalFileMapPtr& theTarget, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removePixelsOriginalFileMap(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removePixelsOriginalFileMap(const ::omero::model::PixelsOriginalFileMapPtr& theTarget, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removePixelsOriginalFileMap(theTarget, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removePixelsOriginalFileMap(const ::omero::model::PixelsOriginalFileMapPtr& theTarget, const ::omero::model::Callback_Pixels_removePixelsOriginalFileMapPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removePixelsOriginalFileMap(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removePixelsOriginalFileMap(const ::omero::model::PixelsOriginalFileMapPtr& theTarget, const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_removePixelsOriginalFileMapPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removePixelsOriginalFileMap(theTarget, &__ctx, __del, __cookie);
    }

    void end_removePixelsOriginalFileMap(const ::Ice::AsyncResultPtr&);
    
private:

    void removePixelsOriginalFileMap(const ::omero::model::PixelsOriginalFileMapPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removePixelsOriginalFileMap(const ::omero::model::PixelsOriginalFileMapPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeAllPixelsOriginalFileMapSet(const ::omero::model::PixelsPixelsFileMapsSeq& targets)
    {
        removeAllPixelsOriginalFileMapSet(targets, 0);
    }
    void removeAllPixelsOriginalFileMapSet(const ::omero::model::PixelsPixelsFileMapsSeq& targets, const ::Ice::Context& __ctx)
    {
        removeAllPixelsOriginalFileMapSet(targets, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removeAllPixelsOriginalFileMapSet(const ::omero::model::PixelsPixelsFileMapsSeq& targets)
    {
        return begin_removeAllPixelsOriginalFileMapSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllPixelsOriginalFileMapSet(const ::omero::model::PixelsPixelsFileMapsSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_removeAllPixelsOriginalFileMapSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllPixelsOriginalFileMapSet(const ::omero::model::PixelsPixelsFileMapsSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllPixelsOriginalFileMapSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllPixelsOriginalFileMapSet(const ::omero::model::PixelsPixelsFileMapsSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllPixelsOriginalFileMapSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllPixelsOriginalFileMapSet(const ::omero::model::PixelsPixelsFileMapsSeq& targets, const ::omero::model::Callback_Pixels_removeAllPixelsOriginalFileMapSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllPixelsOriginalFileMapSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllPixelsOriginalFileMapSet(const ::omero::model::PixelsPixelsFileMapsSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_removeAllPixelsOriginalFileMapSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllPixelsOriginalFileMapSet(targets, &__ctx, __del, __cookie);
    }

    void end_removeAllPixelsOriginalFileMapSet(const ::Ice::AsyncResultPtr&);
    
private:

    void removeAllPixelsOriginalFileMapSet(const ::omero::model::PixelsPixelsFileMapsSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeAllPixelsOriginalFileMapSet(const ::omero::model::PixelsPixelsFileMapsSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void clearPixelsFileMaps()
    {
        clearPixelsFileMaps(0);
    }
    void clearPixelsFileMaps(const ::Ice::Context& __ctx)
    {
        clearPixelsFileMaps(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_clearPixelsFileMaps()
    {
        return begin_clearPixelsFileMaps(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearPixelsFileMaps(const ::Ice::Context& __ctx)
    {
        return begin_clearPixelsFileMaps(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearPixelsFileMaps(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearPixelsFileMaps(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearPixelsFileMaps(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearPixelsFileMaps(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearPixelsFileMaps(const ::omero::model::Callback_Pixels_clearPixelsFileMapsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearPixelsFileMaps(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearPixelsFileMaps(const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_clearPixelsFileMapsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearPixelsFileMaps(&__ctx, __del, __cookie);
    }

    void end_clearPixelsFileMaps(const ::Ice::AsyncResultPtr&);
    
private:

    void clearPixelsFileMaps(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_clearPixelsFileMaps(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reloadPixelsFileMaps(const ::omero::model::PixelsPtr& toCopy)
    {
        reloadPixelsFileMaps(toCopy, 0);
    }
    void reloadPixelsFileMaps(const ::omero::model::PixelsPtr& toCopy, const ::Ice::Context& __ctx)
    {
        reloadPixelsFileMaps(toCopy, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_reloadPixelsFileMaps(const ::omero::model::PixelsPtr& toCopy)
    {
        return begin_reloadPixelsFileMaps(toCopy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadPixelsFileMaps(const ::omero::model::PixelsPtr& toCopy, const ::Ice::Context& __ctx)
    {
        return begin_reloadPixelsFileMaps(toCopy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadPixelsFileMaps(const ::omero::model::PixelsPtr& toCopy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadPixelsFileMaps(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadPixelsFileMaps(const ::omero::model::PixelsPtr& toCopy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadPixelsFileMaps(toCopy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadPixelsFileMaps(const ::omero::model::PixelsPtr& toCopy, const ::omero::model::Callback_Pixels_reloadPixelsFileMapsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadPixelsFileMaps(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadPixelsFileMaps(const ::omero::model::PixelsPtr& toCopy, const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_reloadPixelsFileMapsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadPixelsFileMaps(toCopy, &__ctx, __del, __cookie);
    }

    void end_reloadPixelsFileMaps(const ::Ice::AsyncResultPtr&);
    
private:

    void reloadPixelsFileMaps(const ::omero::model::PixelsPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reloadPixelsFileMaps(const ::omero::model::PixelsPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::sys::CountMap getPixelsFileMapsCountPerOwner()
    {
        return getPixelsFileMapsCountPerOwner(0);
    }
    ::omero::sys::CountMap getPixelsFileMapsCountPerOwner(const ::Ice::Context& __ctx)
    {
        return getPixelsFileMapsCountPerOwner(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getPixelsFileMapsCountPerOwner()
    {
        return begin_getPixelsFileMapsCountPerOwner(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPixelsFileMapsCountPerOwner(const ::Ice::Context& __ctx)
    {
        return begin_getPixelsFileMapsCountPerOwner(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPixelsFileMapsCountPerOwner(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPixelsFileMapsCountPerOwner(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPixelsFileMapsCountPerOwner(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPixelsFileMapsCountPerOwner(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPixelsFileMapsCountPerOwner(const ::omero::model::Callback_Pixels_getPixelsFileMapsCountPerOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPixelsFileMapsCountPerOwner(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPixelsFileMapsCountPerOwner(const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_getPixelsFileMapsCountPerOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPixelsFileMapsCountPerOwner(&__ctx, __del, __cookie);
    }

    ::omero::sys::CountMap end_getPixelsFileMapsCountPerOwner(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::sys::CountMap getPixelsFileMapsCountPerOwner(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getPixelsFileMapsCountPerOwner(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::PixelsOriginalFileMapPtr linkOriginalFile(const ::omero::model::OriginalFilePtr& addition)
    {
        return linkOriginalFile(addition, 0);
    }
    ::omero::model::PixelsOriginalFileMapPtr linkOriginalFile(const ::omero::model::OriginalFilePtr& addition, const ::Ice::Context& __ctx)
    {
        return linkOriginalFile(addition, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_linkOriginalFile(const ::omero::model::OriginalFilePtr& addition)
    {
        return begin_linkOriginalFile(addition, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkOriginalFile(const ::omero::model::OriginalFilePtr& addition, const ::Ice::Context& __ctx)
    {
        return begin_linkOriginalFile(addition, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkOriginalFile(const ::omero::model::OriginalFilePtr& addition, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkOriginalFile(addition, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkOriginalFile(const ::omero::model::OriginalFilePtr& addition, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkOriginalFile(addition, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkOriginalFile(const ::omero::model::OriginalFilePtr& addition, const ::omero::model::Callback_Pixels_linkOriginalFilePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkOriginalFile(addition, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkOriginalFile(const ::omero::model::OriginalFilePtr& addition, const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_linkOriginalFilePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkOriginalFile(addition, &__ctx, __del, __cookie);
    }

    ::omero::model::PixelsOriginalFileMapPtr end_linkOriginalFile(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::PixelsOriginalFileMapPtr linkOriginalFile(const ::omero::model::OriginalFilePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_linkOriginalFile(const ::omero::model::OriginalFilePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addPixelsOriginalFileMapToBoth(const ::omero::model::PixelsOriginalFileMapPtr& link, bool bothSides)
    {
        addPixelsOriginalFileMapToBoth(link, bothSides, 0);
    }
    void addPixelsOriginalFileMapToBoth(const ::omero::model::PixelsOriginalFileMapPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        addPixelsOriginalFileMapToBoth(link, bothSides, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addPixelsOriginalFileMapToBoth(const ::omero::model::PixelsOriginalFileMapPtr& link, bool bothSides)
    {
        return begin_addPixelsOriginalFileMapToBoth(link, bothSides, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addPixelsOriginalFileMapToBoth(const ::omero::model::PixelsOriginalFileMapPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        return begin_addPixelsOriginalFileMapToBoth(link, bothSides, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addPixelsOriginalFileMapToBoth(const ::omero::model::PixelsOriginalFileMapPtr& link, bool bothSides, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPixelsOriginalFileMapToBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addPixelsOriginalFileMapToBoth(const ::omero::model::PixelsOriginalFileMapPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPixelsOriginalFileMapToBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addPixelsOriginalFileMapToBoth(const ::omero::model::PixelsOriginalFileMapPtr& link, bool bothSides, const ::omero::model::Callback_Pixels_addPixelsOriginalFileMapToBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPixelsOriginalFileMapToBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addPixelsOriginalFileMapToBoth(const ::omero::model::PixelsOriginalFileMapPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_addPixelsOriginalFileMapToBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPixelsOriginalFileMapToBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    void end_addPixelsOriginalFileMapToBoth(const ::Ice::AsyncResultPtr&);
    
private:

    void addPixelsOriginalFileMapToBoth(const ::omero::model::PixelsOriginalFileMapPtr&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addPixelsOriginalFileMapToBoth(const ::omero::model::PixelsOriginalFileMapPtr&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::PixelsPixelsFileMapsSeq findPixelsOriginalFileMap(const ::omero::model::OriginalFilePtr& removal)
    {
        return findPixelsOriginalFileMap(removal, 0);
    }
    ::omero::model::PixelsPixelsFileMapsSeq findPixelsOriginalFileMap(const ::omero::model::OriginalFilePtr& removal, const ::Ice::Context& __ctx)
    {
        return findPixelsOriginalFileMap(removal, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_findPixelsOriginalFileMap(const ::omero::model::OriginalFilePtr& removal)
    {
        return begin_findPixelsOriginalFileMap(removal, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findPixelsOriginalFileMap(const ::omero::model::OriginalFilePtr& removal, const ::Ice::Context& __ctx)
    {
        return begin_findPixelsOriginalFileMap(removal, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findPixelsOriginalFileMap(const ::omero::model::OriginalFilePtr& removal, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findPixelsOriginalFileMap(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findPixelsOriginalFileMap(const ::omero::model::OriginalFilePtr& removal, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findPixelsOriginalFileMap(removal, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findPixelsOriginalFileMap(const ::omero::model::OriginalFilePtr& removal, const ::omero::model::Callback_Pixels_findPixelsOriginalFileMapPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findPixelsOriginalFileMap(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findPixelsOriginalFileMap(const ::omero::model::OriginalFilePtr& removal, const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_findPixelsOriginalFileMapPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findPixelsOriginalFileMap(removal, &__ctx, __del, __cookie);
    }

    ::omero::model::PixelsPixelsFileMapsSeq end_findPixelsOriginalFileMap(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::PixelsPixelsFileMapsSeq findPixelsOriginalFileMap(const ::omero::model::OriginalFilePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_findPixelsOriginalFileMap(const ::omero::model::OriginalFilePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unlinkOriginalFile(const ::omero::model::OriginalFilePtr& removal)
    {
        unlinkOriginalFile(removal, 0);
    }
    void unlinkOriginalFile(const ::omero::model::OriginalFilePtr& removal, const ::Ice::Context& __ctx)
    {
        unlinkOriginalFile(removal, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_unlinkOriginalFile(const ::omero::model::OriginalFilePtr& removal)
    {
        return begin_unlinkOriginalFile(removal, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unlinkOriginalFile(const ::omero::model::OriginalFilePtr& removal, const ::Ice::Context& __ctx)
    {
        return begin_unlinkOriginalFile(removal, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unlinkOriginalFile(const ::omero::model::OriginalFilePtr& removal, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkOriginalFile(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkOriginalFile(const ::omero::model::OriginalFilePtr& removal, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkOriginalFile(removal, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkOriginalFile(const ::omero::model::OriginalFilePtr& removal, const ::omero::model::Callback_Pixels_unlinkOriginalFilePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkOriginalFile(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkOriginalFile(const ::omero::model::OriginalFilePtr& removal, const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_unlinkOriginalFilePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkOriginalFile(removal, &__ctx, __del, __cookie);
    }

    void end_unlinkOriginalFile(const ::Ice::AsyncResultPtr&);
    
private:

    void unlinkOriginalFile(const ::omero::model::OriginalFilePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unlinkOriginalFile(const ::omero::model::OriginalFilePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removePixelsOriginalFileMapFromBoth(const ::omero::model::PixelsOriginalFileMapPtr& link, bool bothSides)
    {
        removePixelsOriginalFileMapFromBoth(link, bothSides, 0);
    }
    void removePixelsOriginalFileMapFromBoth(const ::omero::model::PixelsOriginalFileMapPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        removePixelsOriginalFileMapFromBoth(link, bothSides, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removePixelsOriginalFileMapFromBoth(const ::omero::model::PixelsOriginalFileMapPtr& link, bool bothSides)
    {
        return begin_removePixelsOriginalFileMapFromBoth(link, bothSides, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removePixelsOriginalFileMapFromBoth(const ::omero::model::PixelsOriginalFileMapPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        return begin_removePixelsOriginalFileMapFromBoth(link, bothSides, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removePixelsOriginalFileMapFromBoth(const ::omero::model::PixelsOriginalFileMapPtr& link, bool bothSides, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removePixelsOriginalFileMapFromBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removePixelsOriginalFileMapFromBoth(const ::omero::model::PixelsOriginalFileMapPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removePixelsOriginalFileMapFromBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removePixelsOriginalFileMapFromBoth(const ::omero::model::PixelsOriginalFileMapPtr& link, bool bothSides, const ::omero::model::Callback_Pixels_removePixelsOriginalFileMapFromBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removePixelsOriginalFileMapFromBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removePixelsOriginalFileMapFromBoth(const ::omero::model::PixelsOriginalFileMapPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_removePixelsOriginalFileMapFromBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removePixelsOriginalFileMapFromBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    void end_removePixelsOriginalFileMapFromBoth(const ::Ice::AsyncResultPtr&);
    
private:

    void removePixelsOriginalFileMapFromBoth(const ::omero::model::PixelsOriginalFileMapPtr&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removePixelsOriginalFileMapFromBoth(const ::omero::model::PixelsOriginalFileMapPtr&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::PixelsLinkedOriginalFileSeq linkedOriginalFileList()
    {
        return linkedOriginalFileList(0);
    }
    ::omero::model::PixelsLinkedOriginalFileSeq linkedOriginalFileList(const ::Ice::Context& __ctx)
    {
        return linkedOriginalFileList(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_linkedOriginalFileList()
    {
        return begin_linkedOriginalFileList(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkedOriginalFileList(const ::Ice::Context& __ctx)
    {
        return begin_linkedOriginalFileList(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkedOriginalFileList(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedOriginalFileList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedOriginalFileList(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedOriginalFileList(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedOriginalFileList(const ::omero::model::Callback_Pixels_linkedOriginalFileListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedOriginalFileList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedOriginalFileList(const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_linkedOriginalFileListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedOriginalFileList(&__ctx, __del, __cookie);
    }

    ::omero::model::PixelsLinkedOriginalFileSeq end_linkedOriginalFileList(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::PixelsLinkedOriginalFileSeq linkedOriginalFileList(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_linkedOriginalFileList(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unloadChannels()
    {
        unloadChannels(0);
    }
    void unloadChannels(const ::Ice::Context& __ctx)
    {
        unloadChannels(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_unloadChannels()
    {
        return begin_unloadChannels(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadChannels(const ::Ice::Context& __ctx)
    {
        return begin_unloadChannels(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadChannels(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadChannels(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadChannels(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadChannels(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadChannels(const ::omero::model::Callback_Pixels_unloadChannelsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadChannels(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadChannels(const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_unloadChannelsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadChannels(&__ctx, __del, __cookie);
    }

    void end_unloadChannels(const ::Ice::AsyncResultPtr&);
    
private:

    void unloadChannels(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unloadChannels(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int sizeOfChannels()
    {
        return sizeOfChannels(0);
    }
    ::Ice::Int sizeOfChannels(const ::Ice::Context& __ctx)
    {
        return sizeOfChannels(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_sizeOfChannels()
    {
        return begin_sizeOfChannels(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfChannels(const ::Ice::Context& __ctx)
    {
        return begin_sizeOfChannels(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfChannels(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfChannels(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfChannels(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfChannels(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfChannels(const ::omero::model::Callback_Pixels_sizeOfChannelsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfChannels(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfChannels(const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_sizeOfChannelsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfChannels(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_sizeOfChannels(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int sizeOfChannels(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sizeOfChannels(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::PixelsChannelsSeq copyChannels()
    {
        return copyChannels(0);
    }
    ::omero::model::PixelsChannelsSeq copyChannels(const ::Ice::Context& __ctx)
    {
        return copyChannels(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_copyChannels()
    {
        return begin_copyChannels(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyChannels(const ::Ice::Context& __ctx)
    {
        return begin_copyChannels(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyChannels(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyChannels(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyChannels(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyChannels(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyChannels(const ::omero::model::Callback_Pixels_copyChannelsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyChannels(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyChannels(const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_copyChannelsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyChannels(&__ctx, __del, __cookie);
    }

    ::omero::model::PixelsChannelsSeq end_copyChannels(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::PixelsChannelsSeq copyChannels(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_copyChannels(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addChannel(const ::omero::model::ChannelPtr& target)
    {
        addChannel(target, 0);
    }
    void addChannel(const ::omero::model::ChannelPtr& target, const ::Ice::Context& __ctx)
    {
        addChannel(target, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addChannel(const ::omero::model::ChannelPtr& target)
    {
        return begin_addChannel(target, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addChannel(const ::omero::model::ChannelPtr& target, const ::Ice::Context& __ctx)
    {
        return begin_addChannel(target, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addChannel(const ::omero::model::ChannelPtr& target, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addChannel(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addChannel(const ::omero::model::ChannelPtr& target, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addChannel(target, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addChannel(const ::omero::model::ChannelPtr& target, const ::omero::model::Callback_Pixels_addChannelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addChannel(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addChannel(const ::omero::model::ChannelPtr& target, const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_addChannelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addChannel(target, &__ctx, __del, __cookie);
    }

    void end_addChannel(const ::Ice::AsyncResultPtr&);
    
private:

    void addChannel(const ::omero::model::ChannelPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addChannel(const ::omero::model::ChannelPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addAllChannelSet(const ::omero::model::PixelsChannelsSeq& targets)
    {
        addAllChannelSet(targets, 0);
    }
    void addAllChannelSet(const ::omero::model::PixelsChannelsSeq& targets, const ::Ice::Context& __ctx)
    {
        addAllChannelSet(targets, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addAllChannelSet(const ::omero::model::PixelsChannelsSeq& targets)
    {
        return begin_addAllChannelSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllChannelSet(const ::omero::model::PixelsChannelsSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_addAllChannelSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllChannelSet(const ::omero::model::PixelsChannelsSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllChannelSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllChannelSet(const ::omero::model::PixelsChannelsSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllChannelSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllChannelSet(const ::omero::model::PixelsChannelsSeq& targets, const ::omero::model::Callback_Pixels_addAllChannelSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllChannelSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllChannelSet(const ::omero::model::PixelsChannelsSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_addAllChannelSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllChannelSet(targets, &__ctx, __del, __cookie);
    }

    void end_addAllChannelSet(const ::Ice::AsyncResultPtr&);
    
private:

    void addAllChannelSet(const ::omero::model::PixelsChannelsSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addAllChannelSet(const ::omero::model::PixelsChannelsSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeChannel(const ::omero::model::ChannelPtr& theTarget)
    {
        removeChannel(theTarget, 0);
    }
    void removeChannel(const ::omero::model::ChannelPtr& theTarget, const ::Ice::Context& __ctx)
    {
        removeChannel(theTarget, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removeChannel(const ::omero::model::ChannelPtr& theTarget)
    {
        return begin_removeChannel(theTarget, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeChannel(const ::omero::model::ChannelPtr& theTarget, const ::Ice::Context& __ctx)
    {
        return begin_removeChannel(theTarget, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeChannel(const ::omero::model::ChannelPtr& theTarget, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeChannel(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeChannel(const ::omero::model::ChannelPtr& theTarget, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeChannel(theTarget, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeChannel(const ::omero::model::ChannelPtr& theTarget, const ::omero::model::Callback_Pixels_removeChannelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeChannel(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeChannel(const ::omero::model::ChannelPtr& theTarget, const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_removeChannelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeChannel(theTarget, &__ctx, __del, __cookie);
    }

    void end_removeChannel(const ::Ice::AsyncResultPtr&);
    
private:

    void removeChannel(const ::omero::model::ChannelPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeChannel(const ::omero::model::ChannelPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeAllChannelSet(const ::omero::model::PixelsChannelsSeq& targets)
    {
        removeAllChannelSet(targets, 0);
    }
    void removeAllChannelSet(const ::omero::model::PixelsChannelsSeq& targets, const ::Ice::Context& __ctx)
    {
        removeAllChannelSet(targets, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removeAllChannelSet(const ::omero::model::PixelsChannelsSeq& targets)
    {
        return begin_removeAllChannelSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllChannelSet(const ::omero::model::PixelsChannelsSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_removeAllChannelSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllChannelSet(const ::omero::model::PixelsChannelsSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllChannelSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllChannelSet(const ::omero::model::PixelsChannelsSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllChannelSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllChannelSet(const ::omero::model::PixelsChannelsSeq& targets, const ::omero::model::Callback_Pixels_removeAllChannelSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllChannelSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllChannelSet(const ::omero::model::PixelsChannelsSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_removeAllChannelSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllChannelSet(targets, &__ctx, __del, __cookie);
    }

    void end_removeAllChannelSet(const ::Ice::AsyncResultPtr&);
    
private:

    void removeAllChannelSet(const ::omero::model::PixelsChannelsSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeAllChannelSet(const ::omero::model::PixelsChannelsSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void clearChannels()
    {
        clearChannels(0);
    }
    void clearChannels(const ::Ice::Context& __ctx)
    {
        clearChannels(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_clearChannels()
    {
        return begin_clearChannels(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearChannels(const ::Ice::Context& __ctx)
    {
        return begin_clearChannels(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearChannels(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearChannels(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearChannels(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearChannels(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearChannels(const ::omero::model::Callback_Pixels_clearChannelsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearChannels(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearChannels(const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_clearChannelsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearChannels(&__ctx, __del, __cookie);
    }

    void end_clearChannels(const ::Ice::AsyncResultPtr&);
    
private:

    void clearChannels(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_clearChannels(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reloadChannels(const ::omero::model::PixelsPtr& toCopy)
    {
        reloadChannels(toCopy, 0);
    }
    void reloadChannels(const ::omero::model::PixelsPtr& toCopy, const ::Ice::Context& __ctx)
    {
        reloadChannels(toCopy, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_reloadChannels(const ::omero::model::PixelsPtr& toCopy)
    {
        return begin_reloadChannels(toCopy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadChannels(const ::omero::model::PixelsPtr& toCopy, const ::Ice::Context& __ctx)
    {
        return begin_reloadChannels(toCopy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadChannels(const ::omero::model::PixelsPtr& toCopy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadChannels(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadChannels(const ::omero::model::PixelsPtr& toCopy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadChannels(toCopy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadChannels(const ::omero::model::PixelsPtr& toCopy, const ::omero::model::Callback_Pixels_reloadChannelsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadChannels(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadChannels(const ::omero::model::PixelsPtr& toCopy, const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_reloadChannelsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadChannels(toCopy, &__ctx, __del, __cookie);
    }

    void end_reloadChannels(const ::Ice::AsyncResultPtr&);
    
private:

    void reloadChannels(const ::omero::model::PixelsPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reloadChannels(const ::omero::model::PixelsPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::ChannelPtr getChannel(::Ice::Int index)
    {
        return getChannel(index, 0);
    }
    ::omero::model::ChannelPtr getChannel(::Ice::Int index, const ::Ice::Context& __ctx)
    {
        return getChannel(index, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_getChannel(::Ice::Int index)
    {
        return begin_getChannel(index, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getChannel(::Ice::Int index, const ::Ice::Context& __ctx)
    {
        return begin_getChannel(index, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getChannel(::Ice::Int index, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getChannel(index, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getChannel(::Ice::Int index, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getChannel(index, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getChannel(::Ice::Int index, const ::omero::model::Callback_Pixels_getChannelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getChannel(index, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getChannel(::Ice::Int index, const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_getChannelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getChannel(index, &__ctx, __del, __cookie);
    }

    ::omero::model::ChannelPtr end_getChannel(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::ChannelPtr getChannel(::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getChannel(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::ChannelPtr setChannel(::Ice::Int index, const ::omero::model::ChannelPtr& theElement)
    {
        return setChannel(index, theElement, 0);
    }
    ::omero::model::ChannelPtr setChannel(::Ice::Int index, const ::omero::model::ChannelPtr& theElement, const ::Ice::Context& __ctx)
    {
        return setChannel(index, theElement, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setChannel(::Ice::Int index, const ::omero::model::ChannelPtr& theElement)
    {
        return begin_setChannel(index, theElement, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setChannel(::Ice::Int index, const ::omero::model::ChannelPtr& theElement, const ::Ice::Context& __ctx)
    {
        return begin_setChannel(index, theElement, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setChannel(::Ice::Int index, const ::omero::model::ChannelPtr& theElement, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setChannel(index, theElement, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setChannel(::Ice::Int index, const ::omero::model::ChannelPtr& theElement, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setChannel(index, theElement, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setChannel(::Ice::Int index, const ::omero::model::ChannelPtr& theElement, const ::omero::model::Callback_Pixels_setChannelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setChannel(index, theElement, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setChannel(::Ice::Int index, const ::omero::model::ChannelPtr& theElement, const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_setChannelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setChannel(index, theElement, &__ctx, __del, __cookie);
    }

    ::omero::model::ChannelPtr end_setChannel(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::ChannelPtr setChannel(::Ice::Int, const ::omero::model::ChannelPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setChannel(::Ice::Int, const ::omero::model::ChannelPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::ChannelPtr getPrimaryChannel()
    {
        return getPrimaryChannel(0);
    }
    ::omero::model::ChannelPtr getPrimaryChannel(const ::Ice::Context& __ctx)
    {
        return getPrimaryChannel(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getPrimaryChannel()
    {
        return begin_getPrimaryChannel(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPrimaryChannel(const ::Ice::Context& __ctx)
    {
        return begin_getPrimaryChannel(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPrimaryChannel(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPrimaryChannel(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPrimaryChannel(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPrimaryChannel(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPrimaryChannel(const ::omero::model::Callback_Pixels_getPrimaryChannelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPrimaryChannel(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPrimaryChannel(const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_getPrimaryChannelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPrimaryChannel(&__ctx, __del, __cookie);
    }

    ::omero::model::ChannelPtr end_getPrimaryChannel(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::ChannelPtr getPrimaryChannel(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getPrimaryChannel(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::ChannelPtr setPrimaryChannel(const ::omero::model::ChannelPtr& theElement)
    {
        return setPrimaryChannel(theElement, 0);
    }
    ::omero::model::ChannelPtr setPrimaryChannel(const ::omero::model::ChannelPtr& theElement, const ::Ice::Context& __ctx)
    {
        return setPrimaryChannel(theElement, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setPrimaryChannel(const ::omero::model::ChannelPtr& theElement)
    {
        return begin_setPrimaryChannel(theElement, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPrimaryChannel(const ::omero::model::ChannelPtr& theElement, const ::Ice::Context& __ctx)
    {
        return begin_setPrimaryChannel(theElement, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPrimaryChannel(const ::omero::model::ChannelPtr& theElement, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPrimaryChannel(theElement, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPrimaryChannel(const ::omero::model::ChannelPtr& theElement, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPrimaryChannel(theElement, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPrimaryChannel(const ::omero::model::ChannelPtr& theElement, const ::omero::model::Callback_Pixels_setPrimaryChannelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPrimaryChannel(theElement, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPrimaryChannel(const ::omero::model::ChannelPtr& theElement, const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_setPrimaryChannelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPrimaryChannel(theElement, &__ctx, __del, __cookie);
    }

    ::omero::model::ChannelPtr end_setPrimaryChannel(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::ChannelPtr setPrimaryChannel(const ::omero::model::ChannelPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setPrimaryChannel(const ::omero::model::ChannelPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unloadSettings()
    {
        unloadSettings(0);
    }
    void unloadSettings(const ::Ice::Context& __ctx)
    {
        unloadSettings(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_unloadSettings()
    {
        return begin_unloadSettings(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadSettings(const ::Ice::Context& __ctx)
    {
        return begin_unloadSettings(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadSettings(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadSettings(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadSettings(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadSettings(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadSettings(const ::omero::model::Callback_Pixels_unloadSettingsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadSettings(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadSettings(const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_unloadSettingsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadSettings(&__ctx, __del, __cookie);
    }

    void end_unloadSettings(const ::Ice::AsyncResultPtr&);
    
private:

    void unloadSettings(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unloadSettings(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int sizeOfSettings()
    {
        return sizeOfSettings(0);
    }
    ::Ice::Int sizeOfSettings(const ::Ice::Context& __ctx)
    {
        return sizeOfSettings(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_sizeOfSettings()
    {
        return begin_sizeOfSettings(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfSettings(const ::Ice::Context& __ctx)
    {
        return begin_sizeOfSettings(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfSettings(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfSettings(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfSettings(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfSettings(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfSettings(const ::omero::model::Callback_Pixels_sizeOfSettingsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfSettings(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfSettings(const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_sizeOfSettingsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfSettings(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_sizeOfSettings(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int sizeOfSettings(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sizeOfSettings(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::PixelsSettingsSeq copySettings()
    {
        return copySettings(0);
    }
    ::omero::model::PixelsSettingsSeq copySettings(const ::Ice::Context& __ctx)
    {
        return copySettings(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_copySettings()
    {
        return begin_copySettings(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copySettings(const ::Ice::Context& __ctx)
    {
        return begin_copySettings(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copySettings(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copySettings(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copySettings(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copySettings(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copySettings(const ::omero::model::Callback_Pixels_copySettingsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copySettings(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copySettings(const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_copySettingsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copySettings(&__ctx, __del, __cookie);
    }

    ::omero::model::PixelsSettingsSeq end_copySettings(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::PixelsSettingsSeq copySettings(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_copySettings(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addRenderingDef(const ::omero::model::RenderingDefPtr& target)
    {
        addRenderingDef(target, 0);
    }
    void addRenderingDef(const ::omero::model::RenderingDefPtr& target, const ::Ice::Context& __ctx)
    {
        addRenderingDef(target, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addRenderingDef(const ::omero::model::RenderingDefPtr& target)
    {
        return begin_addRenderingDef(target, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addRenderingDef(const ::omero::model::RenderingDefPtr& target, const ::Ice::Context& __ctx)
    {
        return begin_addRenderingDef(target, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addRenderingDef(const ::omero::model::RenderingDefPtr& target, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addRenderingDef(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addRenderingDef(const ::omero::model::RenderingDefPtr& target, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addRenderingDef(target, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addRenderingDef(const ::omero::model::RenderingDefPtr& target, const ::omero::model::Callback_Pixels_addRenderingDefPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addRenderingDef(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addRenderingDef(const ::omero::model::RenderingDefPtr& target, const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_addRenderingDefPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addRenderingDef(target, &__ctx, __del, __cookie);
    }

    void end_addRenderingDef(const ::Ice::AsyncResultPtr&);
    
private:

    void addRenderingDef(const ::omero::model::RenderingDefPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addRenderingDef(const ::omero::model::RenderingDefPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addAllRenderingDefSet(const ::omero::model::PixelsSettingsSeq& targets)
    {
        addAllRenderingDefSet(targets, 0);
    }
    void addAllRenderingDefSet(const ::omero::model::PixelsSettingsSeq& targets, const ::Ice::Context& __ctx)
    {
        addAllRenderingDefSet(targets, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addAllRenderingDefSet(const ::omero::model::PixelsSettingsSeq& targets)
    {
        return begin_addAllRenderingDefSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllRenderingDefSet(const ::omero::model::PixelsSettingsSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_addAllRenderingDefSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllRenderingDefSet(const ::omero::model::PixelsSettingsSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllRenderingDefSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllRenderingDefSet(const ::omero::model::PixelsSettingsSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllRenderingDefSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllRenderingDefSet(const ::omero::model::PixelsSettingsSeq& targets, const ::omero::model::Callback_Pixels_addAllRenderingDefSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllRenderingDefSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllRenderingDefSet(const ::omero::model::PixelsSettingsSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_addAllRenderingDefSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllRenderingDefSet(targets, &__ctx, __del, __cookie);
    }

    void end_addAllRenderingDefSet(const ::Ice::AsyncResultPtr&);
    
private:

    void addAllRenderingDefSet(const ::omero::model::PixelsSettingsSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addAllRenderingDefSet(const ::omero::model::PixelsSettingsSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeRenderingDef(const ::omero::model::RenderingDefPtr& theTarget)
    {
        removeRenderingDef(theTarget, 0);
    }
    void removeRenderingDef(const ::omero::model::RenderingDefPtr& theTarget, const ::Ice::Context& __ctx)
    {
        removeRenderingDef(theTarget, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removeRenderingDef(const ::omero::model::RenderingDefPtr& theTarget)
    {
        return begin_removeRenderingDef(theTarget, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeRenderingDef(const ::omero::model::RenderingDefPtr& theTarget, const ::Ice::Context& __ctx)
    {
        return begin_removeRenderingDef(theTarget, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeRenderingDef(const ::omero::model::RenderingDefPtr& theTarget, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeRenderingDef(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeRenderingDef(const ::omero::model::RenderingDefPtr& theTarget, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeRenderingDef(theTarget, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeRenderingDef(const ::omero::model::RenderingDefPtr& theTarget, const ::omero::model::Callback_Pixels_removeRenderingDefPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeRenderingDef(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeRenderingDef(const ::omero::model::RenderingDefPtr& theTarget, const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_removeRenderingDefPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeRenderingDef(theTarget, &__ctx, __del, __cookie);
    }

    void end_removeRenderingDef(const ::Ice::AsyncResultPtr&);
    
private:

    void removeRenderingDef(const ::omero::model::RenderingDefPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeRenderingDef(const ::omero::model::RenderingDefPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeAllRenderingDefSet(const ::omero::model::PixelsSettingsSeq& targets)
    {
        removeAllRenderingDefSet(targets, 0);
    }
    void removeAllRenderingDefSet(const ::omero::model::PixelsSettingsSeq& targets, const ::Ice::Context& __ctx)
    {
        removeAllRenderingDefSet(targets, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removeAllRenderingDefSet(const ::omero::model::PixelsSettingsSeq& targets)
    {
        return begin_removeAllRenderingDefSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllRenderingDefSet(const ::omero::model::PixelsSettingsSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_removeAllRenderingDefSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllRenderingDefSet(const ::omero::model::PixelsSettingsSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllRenderingDefSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllRenderingDefSet(const ::omero::model::PixelsSettingsSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllRenderingDefSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllRenderingDefSet(const ::omero::model::PixelsSettingsSeq& targets, const ::omero::model::Callback_Pixels_removeAllRenderingDefSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllRenderingDefSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllRenderingDefSet(const ::omero::model::PixelsSettingsSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_removeAllRenderingDefSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllRenderingDefSet(targets, &__ctx, __del, __cookie);
    }

    void end_removeAllRenderingDefSet(const ::Ice::AsyncResultPtr&);
    
private:

    void removeAllRenderingDefSet(const ::omero::model::PixelsSettingsSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeAllRenderingDefSet(const ::omero::model::PixelsSettingsSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void clearSettings()
    {
        clearSettings(0);
    }
    void clearSettings(const ::Ice::Context& __ctx)
    {
        clearSettings(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_clearSettings()
    {
        return begin_clearSettings(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearSettings(const ::Ice::Context& __ctx)
    {
        return begin_clearSettings(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearSettings(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearSettings(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearSettings(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearSettings(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearSettings(const ::omero::model::Callback_Pixels_clearSettingsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearSettings(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearSettings(const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_clearSettingsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearSettings(&__ctx, __del, __cookie);
    }

    void end_clearSettings(const ::Ice::AsyncResultPtr&);
    
private:

    void clearSettings(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_clearSettings(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reloadSettings(const ::omero::model::PixelsPtr& toCopy)
    {
        reloadSettings(toCopy, 0);
    }
    void reloadSettings(const ::omero::model::PixelsPtr& toCopy, const ::Ice::Context& __ctx)
    {
        reloadSettings(toCopy, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_reloadSettings(const ::omero::model::PixelsPtr& toCopy)
    {
        return begin_reloadSettings(toCopy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadSettings(const ::omero::model::PixelsPtr& toCopy, const ::Ice::Context& __ctx)
    {
        return begin_reloadSettings(toCopy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadSettings(const ::omero::model::PixelsPtr& toCopy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadSettings(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadSettings(const ::omero::model::PixelsPtr& toCopy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadSettings(toCopy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadSettings(const ::omero::model::PixelsPtr& toCopy, const ::omero::model::Callback_Pixels_reloadSettingsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadSettings(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadSettings(const ::omero::model::PixelsPtr& toCopy, const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_reloadSettingsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadSettings(toCopy, &__ctx, __del, __cookie);
    }

    void end_reloadSettings(const ::Ice::AsyncResultPtr&);
    
private:

    void reloadSettings(const ::omero::model::PixelsPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reloadSettings(const ::omero::model::PixelsPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unloadThumbnails()
    {
        unloadThumbnails(0);
    }
    void unloadThumbnails(const ::Ice::Context& __ctx)
    {
        unloadThumbnails(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_unloadThumbnails()
    {
        return begin_unloadThumbnails(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadThumbnails(const ::Ice::Context& __ctx)
    {
        return begin_unloadThumbnails(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadThumbnails(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadThumbnails(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadThumbnails(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadThumbnails(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadThumbnails(const ::omero::model::Callback_Pixels_unloadThumbnailsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadThumbnails(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadThumbnails(const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_unloadThumbnailsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadThumbnails(&__ctx, __del, __cookie);
    }

    void end_unloadThumbnails(const ::Ice::AsyncResultPtr&);
    
private:

    void unloadThumbnails(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unloadThumbnails(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int sizeOfThumbnails()
    {
        return sizeOfThumbnails(0);
    }
    ::Ice::Int sizeOfThumbnails(const ::Ice::Context& __ctx)
    {
        return sizeOfThumbnails(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_sizeOfThumbnails()
    {
        return begin_sizeOfThumbnails(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfThumbnails(const ::Ice::Context& __ctx)
    {
        return begin_sizeOfThumbnails(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfThumbnails(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfThumbnails(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfThumbnails(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfThumbnails(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfThumbnails(const ::omero::model::Callback_Pixels_sizeOfThumbnailsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfThumbnails(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfThumbnails(const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_sizeOfThumbnailsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfThumbnails(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_sizeOfThumbnails(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int sizeOfThumbnails(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sizeOfThumbnails(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::PixelsThumbnailsSeq copyThumbnails()
    {
        return copyThumbnails(0);
    }
    ::omero::model::PixelsThumbnailsSeq copyThumbnails(const ::Ice::Context& __ctx)
    {
        return copyThumbnails(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_copyThumbnails()
    {
        return begin_copyThumbnails(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyThumbnails(const ::Ice::Context& __ctx)
    {
        return begin_copyThumbnails(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyThumbnails(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyThumbnails(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyThumbnails(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyThumbnails(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyThumbnails(const ::omero::model::Callback_Pixels_copyThumbnailsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyThumbnails(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyThumbnails(const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_copyThumbnailsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyThumbnails(&__ctx, __del, __cookie);
    }

    ::omero::model::PixelsThumbnailsSeq end_copyThumbnails(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::PixelsThumbnailsSeq copyThumbnails(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_copyThumbnails(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addThumbnail(const ::omero::model::ThumbnailPtr& target)
    {
        addThumbnail(target, 0);
    }
    void addThumbnail(const ::omero::model::ThumbnailPtr& target, const ::Ice::Context& __ctx)
    {
        addThumbnail(target, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addThumbnail(const ::omero::model::ThumbnailPtr& target)
    {
        return begin_addThumbnail(target, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addThumbnail(const ::omero::model::ThumbnailPtr& target, const ::Ice::Context& __ctx)
    {
        return begin_addThumbnail(target, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addThumbnail(const ::omero::model::ThumbnailPtr& target, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addThumbnail(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addThumbnail(const ::omero::model::ThumbnailPtr& target, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addThumbnail(target, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addThumbnail(const ::omero::model::ThumbnailPtr& target, const ::omero::model::Callback_Pixels_addThumbnailPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addThumbnail(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addThumbnail(const ::omero::model::ThumbnailPtr& target, const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_addThumbnailPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addThumbnail(target, &__ctx, __del, __cookie);
    }

    void end_addThumbnail(const ::Ice::AsyncResultPtr&);
    
private:

    void addThumbnail(const ::omero::model::ThumbnailPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addThumbnail(const ::omero::model::ThumbnailPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addAllThumbnailSet(const ::omero::model::PixelsThumbnailsSeq& targets)
    {
        addAllThumbnailSet(targets, 0);
    }
    void addAllThumbnailSet(const ::omero::model::PixelsThumbnailsSeq& targets, const ::Ice::Context& __ctx)
    {
        addAllThumbnailSet(targets, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addAllThumbnailSet(const ::omero::model::PixelsThumbnailsSeq& targets)
    {
        return begin_addAllThumbnailSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllThumbnailSet(const ::omero::model::PixelsThumbnailsSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_addAllThumbnailSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllThumbnailSet(const ::omero::model::PixelsThumbnailsSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllThumbnailSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllThumbnailSet(const ::omero::model::PixelsThumbnailsSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllThumbnailSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllThumbnailSet(const ::omero::model::PixelsThumbnailsSeq& targets, const ::omero::model::Callback_Pixels_addAllThumbnailSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllThumbnailSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllThumbnailSet(const ::omero::model::PixelsThumbnailsSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_addAllThumbnailSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllThumbnailSet(targets, &__ctx, __del, __cookie);
    }

    void end_addAllThumbnailSet(const ::Ice::AsyncResultPtr&);
    
private:

    void addAllThumbnailSet(const ::omero::model::PixelsThumbnailsSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addAllThumbnailSet(const ::omero::model::PixelsThumbnailsSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeThumbnail(const ::omero::model::ThumbnailPtr& theTarget)
    {
        removeThumbnail(theTarget, 0);
    }
    void removeThumbnail(const ::omero::model::ThumbnailPtr& theTarget, const ::Ice::Context& __ctx)
    {
        removeThumbnail(theTarget, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removeThumbnail(const ::omero::model::ThumbnailPtr& theTarget)
    {
        return begin_removeThumbnail(theTarget, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeThumbnail(const ::omero::model::ThumbnailPtr& theTarget, const ::Ice::Context& __ctx)
    {
        return begin_removeThumbnail(theTarget, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeThumbnail(const ::omero::model::ThumbnailPtr& theTarget, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeThumbnail(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeThumbnail(const ::omero::model::ThumbnailPtr& theTarget, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeThumbnail(theTarget, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeThumbnail(const ::omero::model::ThumbnailPtr& theTarget, const ::omero::model::Callback_Pixels_removeThumbnailPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeThumbnail(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeThumbnail(const ::omero::model::ThumbnailPtr& theTarget, const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_removeThumbnailPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeThumbnail(theTarget, &__ctx, __del, __cookie);
    }

    void end_removeThumbnail(const ::Ice::AsyncResultPtr&);
    
private:

    void removeThumbnail(const ::omero::model::ThumbnailPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeThumbnail(const ::omero::model::ThumbnailPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeAllThumbnailSet(const ::omero::model::PixelsThumbnailsSeq& targets)
    {
        removeAllThumbnailSet(targets, 0);
    }
    void removeAllThumbnailSet(const ::omero::model::PixelsThumbnailsSeq& targets, const ::Ice::Context& __ctx)
    {
        removeAllThumbnailSet(targets, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removeAllThumbnailSet(const ::omero::model::PixelsThumbnailsSeq& targets)
    {
        return begin_removeAllThumbnailSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllThumbnailSet(const ::omero::model::PixelsThumbnailsSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_removeAllThumbnailSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllThumbnailSet(const ::omero::model::PixelsThumbnailsSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllThumbnailSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllThumbnailSet(const ::omero::model::PixelsThumbnailsSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllThumbnailSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllThumbnailSet(const ::omero::model::PixelsThumbnailsSeq& targets, const ::omero::model::Callback_Pixels_removeAllThumbnailSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllThumbnailSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllThumbnailSet(const ::omero::model::PixelsThumbnailsSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_removeAllThumbnailSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllThumbnailSet(targets, &__ctx, __del, __cookie);
    }

    void end_removeAllThumbnailSet(const ::Ice::AsyncResultPtr&);
    
private:

    void removeAllThumbnailSet(const ::omero::model::PixelsThumbnailsSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeAllThumbnailSet(const ::omero::model::PixelsThumbnailsSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void clearThumbnails()
    {
        clearThumbnails(0);
    }
    void clearThumbnails(const ::Ice::Context& __ctx)
    {
        clearThumbnails(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_clearThumbnails()
    {
        return begin_clearThumbnails(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearThumbnails(const ::Ice::Context& __ctx)
    {
        return begin_clearThumbnails(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearThumbnails(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearThumbnails(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearThumbnails(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearThumbnails(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearThumbnails(const ::omero::model::Callback_Pixels_clearThumbnailsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearThumbnails(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearThumbnails(const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_clearThumbnailsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearThumbnails(&__ctx, __del, __cookie);
    }

    void end_clearThumbnails(const ::Ice::AsyncResultPtr&);
    
private:

    void clearThumbnails(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_clearThumbnails(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reloadThumbnails(const ::omero::model::PixelsPtr& toCopy)
    {
        reloadThumbnails(toCopy, 0);
    }
    void reloadThumbnails(const ::omero::model::PixelsPtr& toCopy, const ::Ice::Context& __ctx)
    {
        reloadThumbnails(toCopy, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_reloadThumbnails(const ::omero::model::PixelsPtr& toCopy)
    {
        return begin_reloadThumbnails(toCopy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadThumbnails(const ::omero::model::PixelsPtr& toCopy, const ::Ice::Context& __ctx)
    {
        return begin_reloadThumbnails(toCopy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadThumbnails(const ::omero::model::PixelsPtr& toCopy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadThumbnails(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadThumbnails(const ::omero::model::PixelsPtr& toCopy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadThumbnails(toCopy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadThumbnails(const ::omero::model::PixelsPtr& toCopy, const ::omero::model::Callback_Pixels_reloadThumbnailsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadThumbnails(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadThumbnails(const ::omero::model::PixelsPtr& toCopy, const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_reloadThumbnailsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadThumbnails(toCopy, &__ctx, __del, __cookie);
    }

    void end_reloadThumbnails(const ::Ice::AsyncResultPtr&);
    
private:

    void reloadThumbnails(const ::omero::model::PixelsPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reloadThumbnails(const ::omero::model::PixelsPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unloadAnnotationLinks()
    {
        unloadAnnotationLinks(0);
    }
    void unloadAnnotationLinks(const ::Ice::Context& __ctx)
    {
        unloadAnnotationLinks(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks()
    {
        return begin_unloadAnnotationLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return begin_unloadAnnotationLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::omero::model::Callback_Pixels_unloadAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_unloadAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadAnnotationLinks(&__ctx, __del, __cookie);
    }

    void end_unloadAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    void unloadAnnotationLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int sizeOfAnnotationLinks()
    {
        return sizeOfAnnotationLinks(0);
    }
    ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return sizeOfAnnotationLinks(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks()
    {
        return begin_sizeOfAnnotationLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return begin_sizeOfAnnotationLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::omero::model::Callback_Pixels_sizeOfAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_sizeOfAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_sizeOfAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::PixelsAnnotationLinksSeq copyAnnotationLinks()
    {
        return copyAnnotationLinks(0);
    }
    ::omero::model::PixelsAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return copyAnnotationLinks(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks()
    {
        return begin_copyAnnotationLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return begin_copyAnnotationLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::omero::model::Callback_Pixels_copyAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_copyAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::omero::model::PixelsAnnotationLinksSeq end_copyAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::PixelsAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addPixelsAnnotationLink(const ::omero::model::PixelsAnnotationLinkPtr& target)
    {
        addPixelsAnnotationLink(target, 0);
    }
    void addPixelsAnnotationLink(const ::omero::model::PixelsAnnotationLinkPtr& target, const ::Ice::Context& __ctx)
    {
        addPixelsAnnotationLink(target, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addPixelsAnnotationLink(const ::omero::model::PixelsAnnotationLinkPtr& target)
    {
        return begin_addPixelsAnnotationLink(target, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addPixelsAnnotationLink(const ::omero::model::PixelsAnnotationLinkPtr& target, const ::Ice::Context& __ctx)
    {
        return begin_addPixelsAnnotationLink(target, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addPixelsAnnotationLink(const ::omero::model::PixelsAnnotationLinkPtr& target, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPixelsAnnotationLink(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addPixelsAnnotationLink(const ::omero::model::PixelsAnnotationLinkPtr& target, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPixelsAnnotationLink(target, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addPixelsAnnotationLink(const ::omero::model::PixelsAnnotationLinkPtr& target, const ::omero::model::Callback_Pixels_addPixelsAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPixelsAnnotationLink(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addPixelsAnnotationLink(const ::omero::model::PixelsAnnotationLinkPtr& target, const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_addPixelsAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPixelsAnnotationLink(target, &__ctx, __del, __cookie);
    }

    void end_addPixelsAnnotationLink(const ::Ice::AsyncResultPtr&);
    
private:

    void addPixelsAnnotationLink(const ::omero::model::PixelsAnnotationLinkPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addPixelsAnnotationLink(const ::omero::model::PixelsAnnotationLinkPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addAllPixelsAnnotationLinkSet(const ::omero::model::PixelsAnnotationLinksSeq& targets)
    {
        addAllPixelsAnnotationLinkSet(targets, 0);
    }
    void addAllPixelsAnnotationLinkSet(const ::omero::model::PixelsAnnotationLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        addAllPixelsAnnotationLinkSet(targets, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addAllPixelsAnnotationLinkSet(const ::omero::model::PixelsAnnotationLinksSeq& targets)
    {
        return begin_addAllPixelsAnnotationLinkSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllPixelsAnnotationLinkSet(const ::omero::model::PixelsAnnotationLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_addAllPixelsAnnotationLinkSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllPixelsAnnotationLinkSet(const ::omero::model::PixelsAnnotationLinksSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllPixelsAnnotationLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllPixelsAnnotationLinkSet(const ::omero::model::PixelsAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllPixelsAnnotationLinkSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllPixelsAnnotationLinkSet(const ::omero::model::PixelsAnnotationLinksSeq& targets, const ::omero::model::Callback_Pixels_addAllPixelsAnnotationLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllPixelsAnnotationLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllPixelsAnnotationLinkSet(const ::omero::model::PixelsAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_addAllPixelsAnnotationLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllPixelsAnnotationLinkSet(targets, &__ctx, __del, __cookie);
    }

    void end_addAllPixelsAnnotationLinkSet(const ::Ice::AsyncResultPtr&);
    
private:

    void addAllPixelsAnnotationLinkSet(const ::omero::model::PixelsAnnotationLinksSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addAllPixelsAnnotationLinkSet(const ::omero::model::PixelsAnnotationLinksSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removePixelsAnnotationLink(const ::omero::model::PixelsAnnotationLinkPtr& theTarget)
    {
        removePixelsAnnotationLink(theTarget, 0);
    }
    void removePixelsAnnotationLink(const ::omero::model::PixelsAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx)
    {
        removePixelsAnnotationLink(theTarget, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removePixelsAnnotationLink(const ::omero::model::PixelsAnnotationLinkPtr& theTarget)
    {
        return begin_removePixelsAnnotationLink(theTarget, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removePixelsAnnotationLink(const ::omero::model::PixelsAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx)
    {
        return begin_removePixelsAnnotationLink(theTarget, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removePixelsAnnotationLink(const ::omero::model::PixelsAnnotationLinkPtr& theTarget, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removePixelsAnnotationLink(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removePixelsAnnotationLink(const ::omero::model::PixelsAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removePixelsAnnotationLink(theTarget, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removePixelsAnnotationLink(const ::omero::model::PixelsAnnotationLinkPtr& theTarget, const ::omero::model::Callback_Pixels_removePixelsAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removePixelsAnnotationLink(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removePixelsAnnotationLink(const ::omero::model::PixelsAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_removePixelsAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removePixelsAnnotationLink(theTarget, &__ctx, __del, __cookie);
    }

    void end_removePixelsAnnotationLink(const ::Ice::AsyncResultPtr&);
    
private:

    void removePixelsAnnotationLink(const ::omero::model::PixelsAnnotationLinkPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removePixelsAnnotationLink(const ::omero::model::PixelsAnnotationLinkPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeAllPixelsAnnotationLinkSet(const ::omero::model::PixelsAnnotationLinksSeq& targets)
    {
        removeAllPixelsAnnotationLinkSet(targets, 0);
    }
    void removeAllPixelsAnnotationLinkSet(const ::omero::model::PixelsAnnotationLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        removeAllPixelsAnnotationLinkSet(targets, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removeAllPixelsAnnotationLinkSet(const ::omero::model::PixelsAnnotationLinksSeq& targets)
    {
        return begin_removeAllPixelsAnnotationLinkSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllPixelsAnnotationLinkSet(const ::omero::model::PixelsAnnotationLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_removeAllPixelsAnnotationLinkSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllPixelsAnnotationLinkSet(const ::omero::model::PixelsAnnotationLinksSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllPixelsAnnotationLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllPixelsAnnotationLinkSet(const ::omero::model::PixelsAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllPixelsAnnotationLinkSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllPixelsAnnotationLinkSet(const ::omero::model::PixelsAnnotationLinksSeq& targets, const ::omero::model::Callback_Pixels_removeAllPixelsAnnotationLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllPixelsAnnotationLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllPixelsAnnotationLinkSet(const ::omero::model::PixelsAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_removeAllPixelsAnnotationLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllPixelsAnnotationLinkSet(targets, &__ctx, __del, __cookie);
    }

    void end_removeAllPixelsAnnotationLinkSet(const ::Ice::AsyncResultPtr&);
    
private:

    void removeAllPixelsAnnotationLinkSet(const ::omero::model::PixelsAnnotationLinksSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeAllPixelsAnnotationLinkSet(const ::omero::model::PixelsAnnotationLinksSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void clearAnnotationLinks()
    {
        clearAnnotationLinks(0);
    }
    void clearAnnotationLinks(const ::Ice::Context& __ctx)
    {
        clearAnnotationLinks(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks()
    {
        return begin_clearAnnotationLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return begin_clearAnnotationLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::omero::model::Callback_Pixels_clearAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_clearAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearAnnotationLinks(&__ctx, __del, __cookie);
    }

    void end_clearAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    void clearAnnotationLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reloadAnnotationLinks(const ::omero::model::PixelsPtr& toCopy)
    {
        reloadAnnotationLinks(toCopy, 0);
    }
    void reloadAnnotationLinks(const ::omero::model::PixelsPtr& toCopy, const ::Ice::Context& __ctx)
    {
        reloadAnnotationLinks(toCopy, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::PixelsPtr& toCopy)
    {
        return begin_reloadAnnotationLinks(toCopy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::PixelsPtr& toCopy, const ::Ice::Context& __ctx)
    {
        return begin_reloadAnnotationLinks(toCopy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::PixelsPtr& toCopy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadAnnotationLinks(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::PixelsPtr& toCopy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadAnnotationLinks(toCopy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::PixelsPtr& toCopy, const ::omero::model::Callback_Pixels_reloadAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadAnnotationLinks(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::PixelsPtr& toCopy, const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_reloadAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadAnnotationLinks(toCopy, &__ctx, __del, __cookie);
    }

    void end_reloadAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    void reloadAnnotationLinks(const ::omero::model::PixelsPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::PixelsPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::sys::CountMap getAnnotationLinksCountPerOwner()
    {
        return getAnnotationLinksCountPerOwner(0);
    }
    ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx)
    {
        return getAnnotationLinksCountPerOwner(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner()
    {
        return begin_getAnnotationLinksCountPerOwner(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx)
    {
        return begin_getAnnotationLinksCountPerOwner(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAnnotationLinksCountPerOwner(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAnnotationLinksCountPerOwner(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::omero::model::Callback_Pixels_getAnnotationLinksCountPerOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAnnotationLinksCountPerOwner(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_getAnnotationLinksCountPerOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAnnotationLinksCountPerOwner(&__ctx, __del, __cookie);
    }

    ::omero::sys::CountMap end_getAnnotationLinksCountPerOwner(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::PixelsAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr& addition)
    {
        return linkAnnotation(addition, 0);
    }
    ::omero::model::PixelsAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx)
    {
        return linkAnnotation(addition, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition)
    {
        return begin_linkAnnotation(addition, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx)
    {
        return begin_linkAnnotation(addition, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkAnnotation(addition, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkAnnotation(addition, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::omero::model::Callback_Pixels_linkAnnotationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkAnnotation(addition, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_linkAnnotationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkAnnotation(addition, &__ctx, __del, __cookie);
    }

    ::omero::model::PixelsAnnotationLinkPtr end_linkAnnotation(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::PixelsAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addPixelsAnnotationLinkToBoth(const ::omero::model::PixelsAnnotationLinkPtr& link, bool bothSides)
    {
        addPixelsAnnotationLinkToBoth(link, bothSides, 0);
    }
    void addPixelsAnnotationLinkToBoth(const ::omero::model::PixelsAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        addPixelsAnnotationLinkToBoth(link, bothSides, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addPixelsAnnotationLinkToBoth(const ::omero::model::PixelsAnnotationLinkPtr& link, bool bothSides)
    {
        return begin_addPixelsAnnotationLinkToBoth(link, bothSides, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addPixelsAnnotationLinkToBoth(const ::omero::model::PixelsAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        return begin_addPixelsAnnotationLinkToBoth(link, bothSides, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addPixelsAnnotationLinkToBoth(const ::omero::model::PixelsAnnotationLinkPtr& link, bool bothSides, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPixelsAnnotationLinkToBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addPixelsAnnotationLinkToBoth(const ::omero::model::PixelsAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPixelsAnnotationLinkToBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addPixelsAnnotationLinkToBoth(const ::omero::model::PixelsAnnotationLinkPtr& link, bool bothSides, const ::omero::model::Callback_Pixels_addPixelsAnnotationLinkToBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPixelsAnnotationLinkToBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addPixelsAnnotationLinkToBoth(const ::omero::model::PixelsAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_addPixelsAnnotationLinkToBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPixelsAnnotationLinkToBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    void end_addPixelsAnnotationLinkToBoth(const ::Ice::AsyncResultPtr&);
    
private:

    void addPixelsAnnotationLinkToBoth(const ::omero::model::PixelsAnnotationLinkPtr&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addPixelsAnnotationLinkToBoth(const ::omero::model::PixelsAnnotationLinkPtr&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::PixelsAnnotationLinksSeq findPixelsAnnotationLink(const ::omero::model::AnnotationPtr& removal)
    {
        return findPixelsAnnotationLink(removal, 0);
    }
    ::omero::model::PixelsAnnotationLinksSeq findPixelsAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx)
    {
        return findPixelsAnnotationLink(removal, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_findPixelsAnnotationLink(const ::omero::model::AnnotationPtr& removal)
    {
        return begin_findPixelsAnnotationLink(removal, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findPixelsAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx)
    {
        return begin_findPixelsAnnotationLink(removal, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findPixelsAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findPixelsAnnotationLink(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findPixelsAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findPixelsAnnotationLink(removal, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findPixelsAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::omero::model::Callback_Pixels_findPixelsAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findPixelsAnnotationLink(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findPixelsAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_findPixelsAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findPixelsAnnotationLink(removal, &__ctx, __del, __cookie);
    }

    ::omero::model::PixelsAnnotationLinksSeq end_findPixelsAnnotationLink(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::PixelsAnnotationLinksSeq findPixelsAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_findPixelsAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unlinkAnnotation(const ::omero::model::AnnotationPtr& removal)
    {
        unlinkAnnotation(removal, 0);
    }
    void unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx)
    {
        unlinkAnnotation(removal, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal)
    {
        return begin_unlinkAnnotation(removal, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx)
    {
        return begin_unlinkAnnotation(removal, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkAnnotation(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkAnnotation(removal, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::omero::model::Callback_Pixels_unlinkAnnotationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkAnnotation(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_unlinkAnnotationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkAnnotation(removal, &__ctx, __del, __cookie);
    }

    void end_unlinkAnnotation(const ::Ice::AsyncResultPtr&);
    
private:

    void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removePixelsAnnotationLinkFromBoth(const ::omero::model::PixelsAnnotationLinkPtr& link, bool bothSides)
    {
        removePixelsAnnotationLinkFromBoth(link, bothSides, 0);
    }
    void removePixelsAnnotationLinkFromBoth(const ::omero::model::PixelsAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        removePixelsAnnotationLinkFromBoth(link, bothSides, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removePixelsAnnotationLinkFromBoth(const ::omero::model::PixelsAnnotationLinkPtr& link, bool bothSides)
    {
        return begin_removePixelsAnnotationLinkFromBoth(link, bothSides, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removePixelsAnnotationLinkFromBoth(const ::omero::model::PixelsAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        return begin_removePixelsAnnotationLinkFromBoth(link, bothSides, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removePixelsAnnotationLinkFromBoth(const ::omero::model::PixelsAnnotationLinkPtr& link, bool bothSides, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removePixelsAnnotationLinkFromBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removePixelsAnnotationLinkFromBoth(const ::omero::model::PixelsAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removePixelsAnnotationLinkFromBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removePixelsAnnotationLinkFromBoth(const ::omero::model::PixelsAnnotationLinkPtr& link, bool bothSides, const ::omero::model::Callback_Pixels_removePixelsAnnotationLinkFromBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removePixelsAnnotationLinkFromBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removePixelsAnnotationLinkFromBoth(const ::omero::model::PixelsAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_removePixelsAnnotationLinkFromBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removePixelsAnnotationLinkFromBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    void end_removePixelsAnnotationLinkFromBoth(const ::Ice::AsyncResultPtr&);
    
private:

    void removePixelsAnnotationLinkFromBoth(const ::omero::model::PixelsAnnotationLinkPtr&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removePixelsAnnotationLinkFromBoth(const ::omero::model::PixelsAnnotationLinkPtr&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::PixelsLinkedAnnotationSeq linkedAnnotationList()
    {
        return linkedAnnotationList(0);
    }
    ::omero::model::PixelsLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context& __ctx)
    {
        return linkedAnnotationList(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList()
    {
        return begin_linkedAnnotationList(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::Context& __ctx)
    {
        return begin_linkedAnnotationList(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedAnnotationList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedAnnotationList(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::omero::model::Callback_Pixels_linkedAnnotationListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedAnnotationList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::Context& __ctx, const ::omero::model::Callback_Pixels_linkedAnnotationListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedAnnotationList(&__ctx, __del, __cookie);
    }

    ::omero::model::PixelsLinkedAnnotationSeq end_linkedAnnotationList(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::PixelsLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Pixels> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Pixels*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<Pixels*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Pixels> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Pixels*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<Pixels*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Pixels> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Pixels*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<Pixels*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Pixels> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Pixels*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<Pixels*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Pixels> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Pixels*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<Pixels*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Pixels> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Pixels*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<Pixels*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Pixels> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Pixels*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<Pixels*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Pixels> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Pixels*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<Pixels*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Pixels> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Pixels*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<Pixels*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Pixels> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Pixels*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<Pixels*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Pixels> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Pixels*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<Pixels*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Pixels> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Pixels*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<Pixels*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Pixels> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Pixels*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<Pixels*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Pixels> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Pixels*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<Pixels*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Pixels> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Pixels*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<Pixels*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Pixels> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Pixels*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<Pixels*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Pixels> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Pixels*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<Pixels*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Pixels> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Pixels*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<Pixels*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Pixels> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Pixels*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<Pixels*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

namespace IceDelegate
{

namespace omero
{

namespace model
{

class Pixels : virtual public ::IceDelegate::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*) = 0;

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::model::ImagePtr getImage(const ::Ice::Context*) = 0;

    virtual void setImage(const ::omero::model::ImagePtr&, const ::Ice::Context*) = 0;

    virtual ::omero::model::PixelsPtr getRelatedTo(const ::Ice::Context*) = 0;

    virtual void setRelatedTo(const ::omero::model::PixelsPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::model::PixelsTypePtr getPixelsType(const ::Ice::Context*) = 0;

    virtual void setPixelsType(const ::omero::model::PixelsTypePtr&, const ::Ice::Context*) = 0;

    virtual ::omero::RIntPtr getSignificantBits(const ::Ice::Context*) = 0;

    virtual void setSignificantBits(const ::omero::RIntPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::RIntPtr getSizeX(const ::Ice::Context*) = 0;

    virtual void setSizeX(const ::omero::RIntPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::RIntPtr getSizeY(const ::Ice::Context*) = 0;

    virtual void setSizeY(const ::omero::RIntPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::RIntPtr getSizeZ(const ::Ice::Context*) = 0;

    virtual void setSizeZ(const ::omero::RIntPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::RIntPtr getSizeC(const ::Ice::Context*) = 0;

    virtual void setSizeC(const ::omero::RIntPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::RIntPtr getSizeT(const ::Ice::Context*) = 0;

    virtual void setSizeT(const ::omero::RIntPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::RStringPtr getSha1(const ::Ice::Context*) = 0;

    virtual void setSha1(const ::omero::RStringPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::model::DimensionOrderPtr getDimensionOrder(const ::Ice::Context*) = 0;

    virtual void setDimensionOrder(const ::omero::model::DimensionOrderPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::RDoublePtr getPhysicalSizeX(const ::Ice::Context*) = 0;

    virtual void setPhysicalSizeX(const ::omero::RDoublePtr&, const ::Ice::Context*) = 0;

    virtual ::omero::RDoublePtr getPhysicalSizeY(const ::Ice::Context*) = 0;

    virtual void setPhysicalSizeY(const ::omero::RDoublePtr&, const ::Ice::Context*) = 0;

    virtual ::omero::RDoublePtr getPhysicalSizeZ(const ::Ice::Context*) = 0;

    virtual void setPhysicalSizeZ(const ::omero::RDoublePtr&, const ::Ice::Context*) = 0;

    virtual ::omero::RIntPtr getWaveStart(const ::Ice::Context*) = 0;

    virtual void setWaveStart(const ::omero::RIntPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::RIntPtr getWaveIncrement(const ::Ice::Context*) = 0;

    virtual void setWaveIncrement(const ::omero::RIntPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::RDoublePtr getTimeIncrement(const ::Ice::Context*) = 0;

    virtual void setTimeIncrement(const ::omero::RDoublePtr&, const ::Ice::Context*) = 0;

    virtual ::omero::RStringPtr getMethodology(const ::Ice::Context*) = 0;

    virtual void setMethodology(const ::omero::RStringPtr&, const ::Ice::Context*) = 0;

    virtual void unloadPlaneInfo(const ::Ice::Context*) = 0;

    virtual ::Ice::Int sizeOfPlaneInfo(const ::Ice::Context*) = 0;

    virtual ::omero::model::PixelsPlaneInfoSeq copyPlaneInfo(const ::Ice::Context*) = 0;

    virtual void addPlaneInfo(const ::omero::model::PlaneInfoPtr&, const ::Ice::Context*) = 0;

    virtual void addAllPlaneInfoSet(const ::omero::model::PixelsPlaneInfoSeq&, const ::Ice::Context*) = 0;

    virtual void removePlaneInfo(const ::omero::model::PlaneInfoPtr&, const ::Ice::Context*) = 0;

    virtual void removeAllPlaneInfoSet(const ::omero::model::PixelsPlaneInfoSeq&, const ::Ice::Context*) = 0;

    virtual void clearPlaneInfo(const ::Ice::Context*) = 0;

    virtual void reloadPlaneInfo(const ::omero::model::PixelsPtr&, const ::Ice::Context*) = 0;

    virtual void unloadPixelsFileMaps(const ::Ice::Context*) = 0;

    virtual ::Ice::Int sizeOfPixelsFileMaps(const ::Ice::Context*) = 0;

    virtual ::omero::model::PixelsPixelsFileMapsSeq copyPixelsFileMaps(const ::Ice::Context*) = 0;

    virtual void addPixelsOriginalFileMap(const ::omero::model::PixelsOriginalFileMapPtr&, const ::Ice::Context*) = 0;

    virtual void addAllPixelsOriginalFileMapSet(const ::omero::model::PixelsPixelsFileMapsSeq&, const ::Ice::Context*) = 0;

    virtual void removePixelsOriginalFileMap(const ::omero::model::PixelsOriginalFileMapPtr&, const ::Ice::Context*) = 0;

    virtual void removeAllPixelsOriginalFileMapSet(const ::omero::model::PixelsPixelsFileMapsSeq&, const ::Ice::Context*) = 0;

    virtual void clearPixelsFileMaps(const ::Ice::Context*) = 0;

    virtual void reloadPixelsFileMaps(const ::omero::model::PixelsPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::sys::CountMap getPixelsFileMapsCountPerOwner(const ::Ice::Context*) = 0;

    virtual ::omero::model::PixelsOriginalFileMapPtr linkOriginalFile(const ::omero::model::OriginalFilePtr&, const ::Ice::Context*) = 0;

    virtual void addPixelsOriginalFileMapToBoth(const ::omero::model::PixelsOriginalFileMapPtr&, bool, const ::Ice::Context*) = 0;

    virtual ::omero::model::PixelsPixelsFileMapsSeq findPixelsOriginalFileMap(const ::omero::model::OriginalFilePtr&, const ::Ice::Context*) = 0;

    virtual void unlinkOriginalFile(const ::omero::model::OriginalFilePtr&, const ::Ice::Context*) = 0;

    virtual void removePixelsOriginalFileMapFromBoth(const ::omero::model::PixelsOriginalFileMapPtr&, bool, const ::Ice::Context*) = 0;

    virtual ::omero::model::PixelsLinkedOriginalFileSeq linkedOriginalFileList(const ::Ice::Context*) = 0;

    virtual void unloadChannels(const ::Ice::Context*) = 0;

    virtual ::Ice::Int sizeOfChannels(const ::Ice::Context*) = 0;

    virtual ::omero::model::PixelsChannelsSeq copyChannels(const ::Ice::Context*) = 0;

    virtual void addChannel(const ::omero::model::ChannelPtr&, const ::Ice::Context*) = 0;

    virtual void addAllChannelSet(const ::omero::model::PixelsChannelsSeq&, const ::Ice::Context*) = 0;

    virtual void removeChannel(const ::omero::model::ChannelPtr&, const ::Ice::Context*) = 0;

    virtual void removeAllChannelSet(const ::omero::model::PixelsChannelsSeq&, const ::Ice::Context*) = 0;

    virtual void clearChannels(const ::Ice::Context*) = 0;

    virtual void reloadChannels(const ::omero::model::PixelsPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::model::ChannelPtr getChannel(::Ice::Int, const ::Ice::Context*) = 0;

    virtual ::omero::model::ChannelPtr setChannel(::Ice::Int, const ::omero::model::ChannelPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::model::ChannelPtr getPrimaryChannel(const ::Ice::Context*) = 0;

    virtual ::omero::model::ChannelPtr setPrimaryChannel(const ::omero::model::ChannelPtr&, const ::Ice::Context*) = 0;

    virtual void unloadSettings(const ::Ice::Context*) = 0;

    virtual ::Ice::Int sizeOfSettings(const ::Ice::Context*) = 0;

    virtual ::omero::model::PixelsSettingsSeq copySettings(const ::Ice::Context*) = 0;

    virtual void addRenderingDef(const ::omero::model::RenderingDefPtr&, const ::Ice::Context*) = 0;

    virtual void addAllRenderingDefSet(const ::omero::model::PixelsSettingsSeq&, const ::Ice::Context*) = 0;

    virtual void removeRenderingDef(const ::omero::model::RenderingDefPtr&, const ::Ice::Context*) = 0;

    virtual void removeAllRenderingDefSet(const ::omero::model::PixelsSettingsSeq&, const ::Ice::Context*) = 0;

    virtual void clearSettings(const ::Ice::Context*) = 0;

    virtual void reloadSettings(const ::omero::model::PixelsPtr&, const ::Ice::Context*) = 0;

    virtual void unloadThumbnails(const ::Ice::Context*) = 0;

    virtual ::Ice::Int sizeOfThumbnails(const ::Ice::Context*) = 0;

    virtual ::omero::model::PixelsThumbnailsSeq copyThumbnails(const ::Ice::Context*) = 0;

    virtual void addThumbnail(const ::omero::model::ThumbnailPtr&, const ::Ice::Context*) = 0;

    virtual void addAllThumbnailSet(const ::omero::model::PixelsThumbnailsSeq&, const ::Ice::Context*) = 0;

    virtual void removeThumbnail(const ::omero::model::ThumbnailPtr&, const ::Ice::Context*) = 0;

    virtual void removeAllThumbnailSet(const ::omero::model::PixelsThumbnailsSeq&, const ::Ice::Context*) = 0;

    virtual void clearThumbnails(const ::Ice::Context*) = 0;

    virtual void reloadThumbnails(const ::omero::model::PixelsPtr&, const ::Ice::Context*) = 0;

    virtual void unloadAnnotationLinks(const ::Ice::Context*) = 0;

    virtual ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context*) = 0;

    virtual ::omero::model::PixelsAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context*) = 0;

    virtual void addPixelsAnnotationLink(const ::omero::model::PixelsAnnotationLinkPtr&, const ::Ice::Context*) = 0;

    virtual void addAllPixelsAnnotationLinkSet(const ::omero::model::PixelsAnnotationLinksSeq&, const ::Ice::Context*) = 0;

    virtual void removePixelsAnnotationLink(const ::omero::model::PixelsAnnotationLinkPtr&, const ::Ice::Context*) = 0;

    virtual void removeAllPixelsAnnotationLinkSet(const ::omero::model::PixelsAnnotationLinksSeq&, const ::Ice::Context*) = 0;

    virtual void clearAnnotationLinks(const ::Ice::Context*) = 0;

    virtual void reloadAnnotationLinks(const ::omero::model::PixelsPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context*) = 0;

    virtual ::omero::model::PixelsAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*) = 0;

    virtual void addPixelsAnnotationLinkToBoth(const ::omero::model::PixelsAnnotationLinkPtr&, bool, const ::Ice::Context*) = 0;

    virtual ::omero::model::PixelsAnnotationLinksSeq findPixelsAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*) = 0;

    virtual void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*) = 0;

    virtual void removePixelsAnnotationLinkFromBoth(const ::omero::model::PixelsAnnotationLinkPtr&, bool, const ::Ice::Context*) = 0;

    virtual ::omero::model::PixelsLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context*) = 0;
};

}

}

}

namespace IceDelegateM
{

namespace omero
{

namespace model
{

class Pixels : virtual public ::IceDelegate::omero::model::Pixels,
               virtual public ::IceDelegateM::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::model::ImagePtr getImage(const ::Ice::Context*);

    virtual void setImage(const ::omero::model::ImagePtr&, const ::Ice::Context*);

    virtual ::omero::model::PixelsPtr getRelatedTo(const ::Ice::Context*);

    virtual void setRelatedTo(const ::omero::model::PixelsPtr&, const ::Ice::Context*);

    virtual ::omero::model::PixelsTypePtr getPixelsType(const ::Ice::Context*);

    virtual void setPixelsType(const ::omero::model::PixelsTypePtr&, const ::Ice::Context*);

    virtual ::omero::RIntPtr getSignificantBits(const ::Ice::Context*);

    virtual void setSignificantBits(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::RIntPtr getSizeX(const ::Ice::Context*);

    virtual void setSizeX(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::RIntPtr getSizeY(const ::Ice::Context*);

    virtual void setSizeY(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::RIntPtr getSizeZ(const ::Ice::Context*);

    virtual void setSizeZ(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::RIntPtr getSizeC(const ::Ice::Context*);

    virtual void setSizeC(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::RIntPtr getSizeT(const ::Ice::Context*);

    virtual void setSizeT(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::RStringPtr getSha1(const ::Ice::Context*);

    virtual void setSha1(const ::omero::RStringPtr&, const ::Ice::Context*);

    virtual ::omero::model::DimensionOrderPtr getDimensionOrder(const ::Ice::Context*);

    virtual void setDimensionOrder(const ::omero::model::DimensionOrderPtr&, const ::Ice::Context*);

    virtual ::omero::RDoublePtr getPhysicalSizeX(const ::Ice::Context*);

    virtual void setPhysicalSizeX(const ::omero::RDoublePtr&, const ::Ice::Context*);

    virtual ::omero::RDoublePtr getPhysicalSizeY(const ::Ice::Context*);

    virtual void setPhysicalSizeY(const ::omero::RDoublePtr&, const ::Ice::Context*);

    virtual ::omero::RDoublePtr getPhysicalSizeZ(const ::Ice::Context*);

    virtual void setPhysicalSizeZ(const ::omero::RDoublePtr&, const ::Ice::Context*);

    virtual ::omero::RIntPtr getWaveStart(const ::Ice::Context*);

    virtual void setWaveStart(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::RIntPtr getWaveIncrement(const ::Ice::Context*);

    virtual void setWaveIncrement(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::RDoublePtr getTimeIncrement(const ::Ice::Context*);

    virtual void setTimeIncrement(const ::omero::RDoublePtr&, const ::Ice::Context*);

    virtual ::omero::RStringPtr getMethodology(const ::Ice::Context*);

    virtual void setMethodology(const ::omero::RStringPtr&, const ::Ice::Context*);

    virtual void unloadPlaneInfo(const ::Ice::Context*);

    virtual ::Ice::Int sizeOfPlaneInfo(const ::Ice::Context*);

    virtual ::omero::model::PixelsPlaneInfoSeq copyPlaneInfo(const ::Ice::Context*);

    virtual void addPlaneInfo(const ::omero::model::PlaneInfoPtr&, const ::Ice::Context*);

    virtual void addAllPlaneInfoSet(const ::omero::model::PixelsPlaneInfoSeq&, const ::Ice::Context*);

    virtual void removePlaneInfo(const ::omero::model::PlaneInfoPtr&, const ::Ice::Context*);

    virtual void removeAllPlaneInfoSet(const ::omero::model::PixelsPlaneInfoSeq&, const ::Ice::Context*);

    virtual void clearPlaneInfo(const ::Ice::Context*);

    virtual void reloadPlaneInfo(const ::omero::model::PixelsPtr&, const ::Ice::Context*);

    virtual void unloadPixelsFileMaps(const ::Ice::Context*);

    virtual ::Ice::Int sizeOfPixelsFileMaps(const ::Ice::Context*);

    virtual ::omero::model::PixelsPixelsFileMapsSeq copyPixelsFileMaps(const ::Ice::Context*);

    virtual void addPixelsOriginalFileMap(const ::omero::model::PixelsOriginalFileMapPtr&, const ::Ice::Context*);

    virtual void addAllPixelsOriginalFileMapSet(const ::omero::model::PixelsPixelsFileMapsSeq&, const ::Ice::Context*);

    virtual void removePixelsOriginalFileMap(const ::omero::model::PixelsOriginalFileMapPtr&, const ::Ice::Context*);

    virtual void removeAllPixelsOriginalFileMapSet(const ::omero::model::PixelsPixelsFileMapsSeq&, const ::Ice::Context*);

    virtual void clearPixelsFileMaps(const ::Ice::Context*);

    virtual void reloadPixelsFileMaps(const ::omero::model::PixelsPtr&, const ::Ice::Context*);

    virtual ::omero::sys::CountMap getPixelsFileMapsCountPerOwner(const ::Ice::Context*);

    virtual ::omero::model::PixelsOriginalFileMapPtr linkOriginalFile(const ::omero::model::OriginalFilePtr&, const ::Ice::Context*);

    virtual void addPixelsOriginalFileMapToBoth(const ::omero::model::PixelsOriginalFileMapPtr&, bool, const ::Ice::Context*);

    virtual ::omero::model::PixelsPixelsFileMapsSeq findPixelsOriginalFileMap(const ::omero::model::OriginalFilePtr&, const ::Ice::Context*);

    virtual void unlinkOriginalFile(const ::omero::model::OriginalFilePtr&, const ::Ice::Context*);

    virtual void removePixelsOriginalFileMapFromBoth(const ::omero::model::PixelsOriginalFileMapPtr&, bool, const ::Ice::Context*);

    virtual ::omero::model::PixelsLinkedOriginalFileSeq linkedOriginalFileList(const ::Ice::Context*);

    virtual void unloadChannels(const ::Ice::Context*);

    virtual ::Ice::Int sizeOfChannels(const ::Ice::Context*);

    virtual ::omero::model::PixelsChannelsSeq copyChannels(const ::Ice::Context*);

    virtual void addChannel(const ::omero::model::ChannelPtr&, const ::Ice::Context*);

    virtual void addAllChannelSet(const ::omero::model::PixelsChannelsSeq&, const ::Ice::Context*);

    virtual void removeChannel(const ::omero::model::ChannelPtr&, const ::Ice::Context*);

    virtual void removeAllChannelSet(const ::omero::model::PixelsChannelsSeq&, const ::Ice::Context*);

    virtual void clearChannels(const ::Ice::Context*);

    virtual void reloadChannels(const ::omero::model::PixelsPtr&, const ::Ice::Context*);

    virtual ::omero::model::ChannelPtr getChannel(::Ice::Int, const ::Ice::Context*);

    virtual ::omero::model::ChannelPtr setChannel(::Ice::Int, const ::omero::model::ChannelPtr&, const ::Ice::Context*);

    virtual ::omero::model::ChannelPtr getPrimaryChannel(const ::Ice::Context*);

    virtual ::omero::model::ChannelPtr setPrimaryChannel(const ::omero::model::ChannelPtr&, const ::Ice::Context*);

    virtual void unloadSettings(const ::Ice::Context*);

    virtual ::Ice::Int sizeOfSettings(const ::Ice::Context*);

    virtual ::omero::model::PixelsSettingsSeq copySettings(const ::Ice::Context*);

    virtual void addRenderingDef(const ::omero::model::RenderingDefPtr&, const ::Ice::Context*);

    virtual void addAllRenderingDefSet(const ::omero::model::PixelsSettingsSeq&, const ::Ice::Context*);

    virtual void removeRenderingDef(const ::omero::model::RenderingDefPtr&, const ::Ice::Context*);

    virtual void removeAllRenderingDefSet(const ::omero::model::PixelsSettingsSeq&, const ::Ice::Context*);

    virtual void clearSettings(const ::Ice::Context*);

    virtual void reloadSettings(const ::omero::model::PixelsPtr&, const ::Ice::Context*);

    virtual void unloadThumbnails(const ::Ice::Context*);

    virtual ::Ice::Int sizeOfThumbnails(const ::Ice::Context*);

    virtual ::omero::model::PixelsThumbnailsSeq copyThumbnails(const ::Ice::Context*);

    virtual void addThumbnail(const ::omero::model::ThumbnailPtr&, const ::Ice::Context*);

    virtual void addAllThumbnailSet(const ::omero::model::PixelsThumbnailsSeq&, const ::Ice::Context*);

    virtual void removeThumbnail(const ::omero::model::ThumbnailPtr&, const ::Ice::Context*);

    virtual void removeAllThumbnailSet(const ::omero::model::PixelsThumbnailsSeq&, const ::Ice::Context*);

    virtual void clearThumbnails(const ::Ice::Context*);

    virtual void reloadThumbnails(const ::omero::model::PixelsPtr&, const ::Ice::Context*);

    virtual void unloadAnnotationLinks(const ::Ice::Context*);

    virtual ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context*);

    virtual ::omero::model::PixelsAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context*);

    virtual void addPixelsAnnotationLink(const ::omero::model::PixelsAnnotationLinkPtr&, const ::Ice::Context*);

    virtual void addAllPixelsAnnotationLinkSet(const ::omero::model::PixelsAnnotationLinksSeq&, const ::Ice::Context*);

    virtual void removePixelsAnnotationLink(const ::omero::model::PixelsAnnotationLinkPtr&, const ::Ice::Context*);

    virtual void removeAllPixelsAnnotationLinkSet(const ::omero::model::PixelsAnnotationLinksSeq&, const ::Ice::Context*);

    virtual void clearAnnotationLinks(const ::Ice::Context*);

    virtual void reloadAnnotationLinks(const ::omero::model::PixelsPtr&, const ::Ice::Context*);

    virtual ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context*);

    virtual ::omero::model::PixelsAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);

    virtual void addPixelsAnnotationLinkToBoth(const ::omero::model::PixelsAnnotationLinkPtr&, bool, const ::Ice::Context*);

    virtual ::omero::model::PixelsAnnotationLinksSeq findPixelsAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);

    virtual void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);

    virtual void removePixelsAnnotationLinkFromBoth(const ::omero::model::PixelsAnnotationLinkPtr&, bool, const ::Ice::Context*);

    virtual ::omero::model::PixelsLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context*);
};

}

}

}

namespace IceDelegateD
{

namespace omero
{

namespace model
{

class Pixels : virtual public ::IceDelegate::omero::model::Pixels,
               virtual public ::IceDelegateD::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::model::ImagePtr getImage(const ::Ice::Context*);

    virtual void setImage(const ::omero::model::ImagePtr&, const ::Ice::Context*);

    virtual ::omero::model::PixelsPtr getRelatedTo(const ::Ice::Context*);

    virtual void setRelatedTo(const ::omero::model::PixelsPtr&, const ::Ice::Context*);

    virtual ::omero::model::PixelsTypePtr getPixelsType(const ::Ice::Context*);

    virtual void setPixelsType(const ::omero::model::PixelsTypePtr&, const ::Ice::Context*);

    virtual ::omero::RIntPtr getSignificantBits(const ::Ice::Context*);

    virtual void setSignificantBits(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::RIntPtr getSizeX(const ::Ice::Context*);

    virtual void setSizeX(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::RIntPtr getSizeY(const ::Ice::Context*);

    virtual void setSizeY(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::RIntPtr getSizeZ(const ::Ice::Context*);

    virtual void setSizeZ(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::RIntPtr getSizeC(const ::Ice::Context*);

    virtual void setSizeC(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::RIntPtr getSizeT(const ::Ice::Context*);

    virtual void setSizeT(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::RStringPtr getSha1(const ::Ice::Context*);

    virtual void setSha1(const ::omero::RStringPtr&, const ::Ice::Context*);

    virtual ::omero::model::DimensionOrderPtr getDimensionOrder(const ::Ice::Context*);

    virtual void setDimensionOrder(const ::omero::model::DimensionOrderPtr&, const ::Ice::Context*);

    virtual ::omero::RDoublePtr getPhysicalSizeX(const ::Ice::Context*);

    virtual void setPhysicalSizeX(const ::omero::RDoublePtr&, const ::Ice::Context*);

    virtual ::omero::RDoublePtr getPhysicalSizeY(const ::Ice::Context*);

    virtual void setPhysicalSizeY(const ::omero::RDoublePtr&, const ::Ice::Context*);

    virtual ::omero::RDoublePtr getPhysicalSizeZ(const ::Ice::Context*);

    virtual void setPhysicalSizeZ(const ::omero::RDoublePtr&, const ::Ice::Context*);

    virtual ::omero::RIntPtr getWaveStart(const ::Ice::Context*);

    virtual void setWaveStart(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::RIntPtr getWaveIncrement(const ::Ice::Context*);

    virtual void setWaveIncrement(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::RDoublePtr getTimeIncrement(const ::Ice::Context*);

    virtual void setTimeIncrement(const ::omero::RDoublePtr&, const ::Ice::Context*);

    virtual ::omero::RStringPtr getMethodology(const ::Ice::Context*);

    virtual void setMethodology(const ::omero::RStringPtr&, const ::Ice::Context*);

    virtual void unloadPlaneInfo(const ::Ice::Context*);

    virtual ::Ice::Int sizeOfPlaneInfo(const ::Ice::Context*);

    virtual ::omero::model::PixelsPlaneInfoSeq copyPlaneInfo(const ::Ice::Context*);

    virtual void addPlaneInfo(const ::omero::model::PlaneInfoPtr&, const ::Ice::Context*);

    virtual void addAllPlaneInfoSet(const ::omero::model::PixelsPlaneInfoSeq&, const ::Ice::Context*);

    virtual void removePlaneInfo(const ::omero::model::PlaneInfoPtr&, const ::Ice::Context*);

    virtual void removeAllPlaneInfoSet(const ::omero::model::PixelsPlaneInfoSeq&, const ::Ice::Context*);

    virtual void clearPlaneInfo(const ::Ice::Context*);

    virtual void reloadPlaneInfo(const ::omero::model::PixelsPtr&, const ::Ice::Context*);

    virtual void unloadPixelsFileMaps(const ::Ice::Context*);

    virtual ::Ice::Int sizeOfPixelsFileMaps(const ::Ice::Context*);

    virtual ::omero::model::PixelsPixelsFileMapsSeq copyPixelsFileMaps(const ::Ice::Context*);

    virtual void addPixelsOriginalFileMap(const ::omero::model::PixelsOriginalFileMapPtr&, const ::Ice::Context*);

    virtual void addAllPixelsOriginalFileMapSet(const ::omero::model::PixelsPixelsFileMapsSeq&, const ::Ice::Context*);

    virtual void removePixelsOriginalFileMap(const ::omero::model::PixelsOriginalFileMapPtr&, const ::Ice::Context*);

    virtual void removeAllPixelsOriginalFileMapSet(const ::omero::model::PixelsPixelsFileMapsSeq&, const ::Ice::Context*);

    virtual void clearPixelsFileMaps(const ::Ice::Context*);

    virtual void reloadPixelsFileMaps(const ::omero::model::PixelsPtr&, const ::Ice::Context*);

    virtual ::omero::sys::CountMap getPixelsFileMapsCountPerOwner(const ::Ice::Context*);

    virtual ::omero::model::PixelsOriginalFileMapPtr linkOriginalFile(const ::omero::model::OriginalFilePtr&, const ::Ice::Context*);

    virtual void addPixelsOriginalFileMapToBoth(const ::omero::model::PixelsOriginalFileMapPtr&, bool, const ::Ice::Context*);

    virtual ::omero::model::PixelsPixelsFileMapsSeq findPixelsOriginalFileMap(const ::omero::model::OriginalFilePtr&, const ::Ice::Context*);

    virtual void unlinkOriginalFile(const ::omero::model::OriginalFilePtr&, const ::Ice::Context*);

    virtual void removePixelsOriginalFileMapFromBoth(const ::omero::model::PixelsOriginalFileMapPtr&, bool, const ::Ice::Context*);

    virtual ::omero::model::PixelsLinkedOriginalFileSeq linkedOriginalFileList(const ::Ice::Context*);

    virtual void unloadChannels(const ::Ice::Context*);

    virtual ::Ice::Int sizeOfChannels(const ::Ice::Context*);

    virtual ::omero::model::PixelsChannelsSeq copyChannels(const ::Ice::Context*);

    virtual void addChannel(const ::omero::model::ChannelPtr&, const ::Ice::Context*);

    virtual void addAllChannelSet(const ::omero::model::PixelsChannelsSeq&, const ::Ice::Context*);

    virtual void removeChannel(const ::omero::model::ChannelPtr&, const ::Ice::Context*);

    virtual void removeAllChannelSet(const ::omero::model::PixelsChannelsSeq&, const ::Ice::Context*);

    virtual void clearChannels(const ::Ice::Context*);

    virtual void reloadChannels(const ::omero::model::PixelsPtr&, const ::Ice::Context*);

    virtual ::omero::model::ChannelPtr getChannel(::Ice::Int, const ::Ice::Context*);

    virtual ::omero::model::ChannelPtr setChannel(::Ice::Int, const ::omero::model::ChannelPtr&, const ::Ice::Context*);

    virtual ::omero::model::ChannelPtr getPrimaryChannel(const ::Ice::Context*);

    virtual ::omero::model::ChannelPtr setPrimaryChannel(const ::omero::model::ChannelPtr&, const ::Ice::Context*);

    virtual void unloadSettings(const ::Ice::Context*);

    virtual ::Ice::Int sizeOfSettings(const ::Ice::Context*);

    virtual ::omero::model::PixelsSettingsSeq copySettings(const ::Ice::Context*);

    virtual void addRenderingDef(const ::omero::model::RenderingDefPtr&, const ::Ice::Context*);

    virtual void addAllRenderingDefSet(const ::omero::model::PixelsSettingsSeq&, const ::Ice::Context*);

    virtual void removeRenderingDef(const ::omero::model::RenderingDefPtr&, const ::Ice::Context*);

    virtual void removeAllRenderingDefSet(const ::omero::model::PixelsSettingsSeq&, const ::Ice::Context*);

    virtual void clearSettings(const ::Ice::Context*);

    virtual void reloadSettings(const ::omero::model::PixelsPtr&, const ::Ice::Context*);

    virtual void unloadThumbnails(const ::Ice::Context*);

    virtual ::Ice::Int sizeOfThumbnails(const ::Ice::Context*);

    virtual ::omero::model::PixelsThumbnailsSeq copyThumbnails(const ::Ice::Context*);

    virtual void addThumbnail(const ::omero::model::ThumbnailPtr&, const ::Ice::Context*);

    virtual void addAllThumbnailSet(const ::omero::model::PixelsThumbnailsSeq&, const ::Ice::Context*);

    virtual void removeThumbnail(const ::omero::model::ThumbnailPtr&, const ::Ice::Context*);

    virtual void removeAllThumbnailSet(const ::omero::model::PixelsThumbnailsSeq&, const ::Ice::Context*);

    virtual void clearThumbnails(const ::Ice::Context*);

    virtual void reloadThumbnails(const ::omero::model::PixelsPtr&, const ::Ice::Context*);

    virtual void unloadAnnotationLinks(const ::Ice::Context*);

    virtual ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context*);

    virtual ::omero::model::PixelsAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context*);

    virtual void addPixelsAnnotationLink(const ::omero::model::PixelsAnnotationLinkPtr&, const ::Ice::Context*);

    virtual void addAllPixelsAnnotationLinkSet(const ::omero::model::PixelsAnnotationLinksSeq&, const ::Ice::Context*);

    virtual void removePixelsAnnotationLink(const ::omero::model::PixelsAnnotationLinkPtr&, const ::Ice::Context*);

    virtual void removeAllPixelsAnnotationLinkSet(const ::omero::model::PixelsAnnotationLinksSeq&, const ::Ice::Context*);

    virtual void clearAnnotationLinks(const ::Ice::Context*);

    virtual void reloadAnnotationLinks(const ::omero::model::PixelsPtr&, const ::Ice::Context*);

    virtual ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context*);

    virtual ::omero::model::PixelsAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);

    virtual void addPixelsAnnotationLinkToBoth(const ::omero::model::PixelsAnnotationLinkPtr&, bool, const ::Ice::Context*);

    virtual ::omero::model::PixelsAnnotationLinksSeq findPixelsAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);

    virtual void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);

    virtual void removePixelsAnnotationLinkFromBoth(const ::omero::model::PixelsAnnotationLinkPtr&, bool, const ::Ice::Context*);

    virtual ::omero::model::PixelsLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context*);
};

}

}

}

namespace omero
{

namespace model
{

class Pixels : public ::omero::model::IObject
{
public:

    typedef PixelsPrx ProxyType;
    typedef PixelsPtr PointerType;
    
    Pixels() {}
    Pixels(const ::omero::RLongPtr&, const ::omero::model::DetailsPtr&, bool, const ::omero::RIntPtr&, const ::omero::model::ImagePtr&, const ::omero::model::PixelsPtr&, const ::omero::model::PixelsTypePtr&, const ::omero::RIntPtr&, const ::omero::RIntPtr&, const ::omero::RIntPtr&, const ::omero::RIntPtr&, const ::omero::RIntPtr&, const ::omero::RIntPtr&, const ::omero::RStringPtr&, const ::omero::model::DimensionOrderPtr&, const ::omero::RDoublePtr&, const ::omero::RDoublePtr&, const ::omero::RDoublePtr&, const ::omero::RIntPtr&, const ::omero::RIntPtr&, const ::omero::RDoublePtr&, const ::omero::RStringPtr&, const ::omero::model::PixelsPlaneInfoSeq&, bool, const ::omero::model::PixelsPixelsFileMapsSeq&, bool, const ::omero::sys::CountMap&, const ::omero::model::PixelsChannelsSeq&, bool, const ::omero::model::PixelsSettingsSeq&, bool, const ::omero::model::PixelsThumbnailsSeq&, bool, const ::omero::model::PixelsAnnotationLinksSeq&, bool, const ::omero::sys::CountMap&);
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    virtual ::omero::RIntPtr getVersion(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::ImagePtr getImage(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getImage(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setImage(const ::omero::model::ImagePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setImage(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::PixelsPtr getRelatedTo(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getRelatedTo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setRelatedTo(const ::omero::model::PixelsPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setRelatedTo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::PixelsTypePtr getPixelsType(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getPixelsType(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setPixelsType(const ::omero::model::PixelsTypePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setPixelsType(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RIntPtr getSignificantBits(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getSignificantBits(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setSignificantBits(const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setSignificantBits(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RIntPtr getSizeX(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getSizeX(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setSizeX(const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setSizeX(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RIntPtr getSizeY(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getSizeY(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setSizeY(const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setSizeY(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RIntPtr getSizeZ(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getSizeZ(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setSizeZ(const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setSizeZ(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RIntPtr getSizeC(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getSizeC(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setSizeC(const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setSizeC(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RIntPtr getSizeT(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getSizeT(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setSizeT(const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setSizeT(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getSha1(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getSha1(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setSha1(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setSha1(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::DimensionOrderPtr getDimensionOrder(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getDimensionOrder(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setDimensionOrder(const ::omero::model::DimensionOrderPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setDimensionOrder(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RDoublePtr getPhysicalSizeX(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getPhysicalSizeX(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setPhysicalSizeX(const ::omero::RDoublePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setPhysicalSizeX(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RDoublePtr getPhysicalSizeY(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getPhysicalSizeY(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setPhysicalSizeY(const ::omero::RDoublePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setPhysicalSizeY(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RDoublePtr getPhysicalSizeZ(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getPhysicalSizeZ(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setPhysicalSizeZ(const ::omero::RDoublePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setPhysicalSizeZ(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RIntPtr getWaveStart(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getWaveStart(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setWaveStart(const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setWaveStart(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RIntPtr getWaveIncrement(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getWaveIncrement(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setWaveIncrement(const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setWaveIncrement(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RDoublePtr getTimeIncrement(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getTimeIncrement(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setTimeIncrement(const ::omero::RDoublePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setTimeIncrement(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getMethodology(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getMethodology(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setMethodology(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setMethodology(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unloadPlaneInfo(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unloadPlaneInfo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int sizeOfPlaneInfo(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sizeOfPlaneInfo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::PixelsPlaneInfoSeq copyPlaneInfo(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___copyPlaneInfo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addPlaneInfo(const ::omero::model::PlaneInfoPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addPlaneInfo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addAllPlaneInfoSet(const ::omero::model::PixelsPlaneInfoSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addAllPlaneInfoSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removePlaneInfo(const ::omero::model::PlaneInfoPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removePlaneInfo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeAllPlaneInfoSet(const ::omero::model::PixelsPlaneInfoSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeAllPlaneInfoSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void clearPlaneInfo(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___clearPlaneInfo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reloadPlaneInfo(const ::omero::model::PixelsPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reloadPlaneInfo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unloadPixelsFileMaps(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unloadPixelsFileMaps(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int sizeOfPixelsFileMaps(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sizeOfPixelsFileMaps(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::PixelsPixelsFileMapsSeq copyPixelsFileMaps(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___copyPixelsFileMaps(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addPixelsOriginalFileMap(const ::omero::model::PixelsOriginalFileMapPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addPixelsOriginalFileMap(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addAllPixelsOriginalFileMapSet(const ::omero::model::PixelsPixelsFileMapsSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addAllPixelsOriginalFileMapSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removePixelsOriginalFileMap(const ::omero::model::PixelsOriginalFileMapPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removePixelsOriginalFileMap(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeAllPixelsOriginalFileMapSet(const ::omero::model::PixelsPixelsFileMapsSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeAllPixelsOriginalFileMapSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void clearPixelsFileMaps(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___clearPixelsFileMaps(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reloadPixelsFileMaps(const ::omero::model::PixelsPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reloadPixelsFileMaps(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::sys::CountMap getPixelsFileMapsCountPerOwner(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getPixelsFileMapsCountPerOwner(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::PixelsOriginalFileMapPtr linkOriginalFile(const ::omero::model::OriginalFilePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___linkOriginalFile(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addPixelsOriginalFileMapToBoth(const ::omero::model::PixelsOriginalFileMapPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addPixelsOriginalFileMapToBoth(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::PixelsPixelsFileMapsSeq findPixelsOriginalFileMap(const ::omero::model::OriginalFilePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___findPixelsOriginalFileMap(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unlinkOriginalFile(const ::omero::model::OriginalFilePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unlinkOriginalFile(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removePixelsOriginalFileMapFromBoth(const ::omero::model::PixelsOriginalFileMapPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removePixelsOriginalFileMapFromBoth(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::PixelsLinkedOriginalFileSeq linkedOriginalFileList(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___linkedOriginalFileList(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unloadChannels(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unloadChannels(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int sizeOfChannels(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sizeOfChannels(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::PixelsChannelsSeq copyChannels(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___copyChannels(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addChannel(const ::omero::model::ChannelPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addChannel(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addAllChannelSet(const ::omero::model::PixelsChannelsSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addAllChannelSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeChannel(const ::omero::model::ChannelPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeChannel(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeAllChannelSet(const ::omero::model::PixelsChannelsSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeAllChannelSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void clearChannels(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___clearChannels(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reloadChannels(const ::omero::model::PixelsPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reloadChannels(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::ChannelPtr getChannel(::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getChannel(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::ChannelPtr setChannel(::Ice::Int, const ::omero::model::ChannelPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setChannel(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::ChannelPtr getPrimaryChannel(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getPrimaryChannel(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::ChannelPtr setPrimaryChannel(const ::omero::model::ChannelPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setPrimaryChannel(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unloadSettings(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unloadSettings(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int sizeOfSettings(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sizeOfSettings(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::PixelsSettingsSeq copySettings(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___copySettings(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addRenderingDef(const ::omero::model::RenderingDefPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addRenderingDef(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addAllRenderingDefSet(const ::omero::model::PixelsSettingsSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addAllRenderingDefSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeRenderingDef(const ::omero::model::RenderingDefPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeRenderingDef(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeAllRenderingDefSet(const ::omero::model::PixelsSettingsSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeAllRenderingDefSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void clearSettings(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___clearSettings(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reloadSettings(const ::omero::model::PixelsPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reloadSettings(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unloadThumbnails(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unloadThumbnails(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int sizeOfThumbnails(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sizeOfThumbnails(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::PixelsThumbnailsSeq copyThumbnails(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___copyThumbnails(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addThumbnail(const ::omero::model::ThumbnailPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addThumbnail(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addAllThumbnailSet(const ::omero::model::PixelsThumbnailsSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addAllThumbnailSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeThumbnail(const ::omero::model::ThumbnailPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeThumbnail(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeAllThumbnailSet(const ::omero::model::PixelsThumbnailsSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeAllThumbnailSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void clearThumbnails(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___clearThumbnails(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reloadThumbnails(const ::omero::model::PixelsPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reloadThumbnails(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unloadAnnotationLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unloadAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sizeOfAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::PixelsAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___copyAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addPixelsAnnotationLink(const ::omero::model::PixelsAnnotationLinkPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addPixelsAnnotationLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addAllPixelsAnnotationLinkSet(const ::omero::model::PixelsAnnotationLinksSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addAllPixelsAnnotationLinkSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removePixelsAnnotationLink(const ::omero::model::PixelsAnnotationLinkPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removePixelsAnnotationLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeAllPixelsAnnotationLinkSet(const ::omero::model::PixelsAnnotationLinksSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeAllPixelsAnnotationLinkSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void clearAnnotationLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___clearAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reloadAnnotationLinks(const ::omero::model::PixelsPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reloadAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getAnnotationLinksCountPerOwner(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::PixelsAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___linkAnnotation(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addPixelsAnnotationLinkToBoth(const ::omero::model::PixelsAnnotationLinkPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addPixelsAnnotationLinkToBoth(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::PixelsAnnotationLinksSeq findPixelsAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___findPixelsAnnotationLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unlinkAnnotation(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removePixelsAnnotationLinkFromBoth(const ::omero::model::PixelsAnnotationLinkPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removePixelsAnnotationLinkFromBoth(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::PixelsLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___linkedAnnotationList(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif

protected:

    ::omero::RIntPtr version;

    ::omero::model::ImagePtr image;

    ::omero::model::PixelsPtr relatedTo;

    ::omero::model::PixelsTypePtr pixelsType;

    ::omero::RIntPtr significantBits;

    ::omero::RIntPtr sizeX;

    ::omero::RIntPtr sizeY;

    ::omero::RIntPtr sizeZ;

    ::omero::RIntPtr sizeC;

    ::omero::RIntPtr sizeT;

    ::omero::RStringPtr sha1;

    ::omero::model::DimensionOrderPtr dimensionOrder;

    ::omero::RDoublePtr physicalSizeX;

    ::omero::RDoublePtr physicalSizeY;

    ::omero::RDoublePtr physicalSizeZ;

    ::omero::RIntPtr waveStart;

    ::omero::RIntPtr waveIncrement;

    ::omero::RDoublePtr timeIncrement;

    ::omero::RStringPtr methodology;

    ::omero::model::PixelsPlaneInfoSeq planeInfoSeq;

    bool planeInfoLoaded;

    ::omero::model::PixelsPixelsFileMapsSeq pixelsFileMapsSeq;

    bool pixelsFileMapsLoaded;

    ::omero::sys::CountMap pixelsFileMapsCountPerOwner;

    ::omero::model::PixelsChannelsSeq channelsSeq;

    bool channelsLoaded;

    ::omero::model::PixelsSettingsSeq settingsSeq;

    bool settingsLoaded;

    ::omero::model::PixelsThumbnailsSeq thumbnailsSeq;

    bool thumbnailsLoaded;

    ::omero::model::PixelsAnnotationLinksSeq annotationLinksSeq;

    bool annotationLinksLoaded;

    ::omero::sys::CountMap annotationLinksCountPerOwner;
};

inline bool operator==(const Pixels& l, const Pixels& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Pixels& l, const Pixels& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

}

namespace omero
{

namespace model
{

template<class T>
class CallbackNC_Pixels_getVersion : public Callback_Pixels_getVersion_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RIntPtr&);

    CallbackNC_Pixels_getVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Pixels_getVersionPtr
newCallback_Pixels_getVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_getVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_getVersionPtr
newCallback_Pixels_getVersion(T* instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_getVersion<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_getVersion : public Callback_Pixels_getVersion_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RIntPtr&, const CT&);

    Callback_Pixels_getVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Pixels_getVersionPtr
newCallback_Pixels_getVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_getVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_getVersionPtr
newCallback_Pixels_getVersion(T* instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_getVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_setVersion : public Callback_Pixels_setVersion_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_setVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_setVersionPtr
newCallback_Pixels_setVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_setVersionPtr
newCallback_Pixels_setVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setVersion<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_setVersionPtr
newCallback_Pixels_setVersion(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_setVersionPtr
newCallback_Pixels_setVersion(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setVersion<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_setVersion : public Callback_Pixels_setVersion_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_setVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_setVersionPtr
newCallback_Pixels_setVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_setVersionPtr
newCallback_Pixels_setVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_setVersionPtr
newCallback_Pixels_setVersion(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_setVersionPtr
newCallback_Pixels_setVersion(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_getImage : public Callback_Pixels_getImage_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::ImagePtr&);

    CallbackNC_Pixels_getImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ImagePtr __ret;
        try
        {
            __ret = __proxy->end_getImage(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Pixels_getImagePtr
newCallback_Pixels_getImage(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ImagePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_getImage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_getImagePtr
newCallback_Pixels_getImage(T* instance, void (T::*cb)(const ::omero::model::ImagePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_getImage<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_getImage : public Callback_Pixels_getImage_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::ImagePtr&, const CT&);

    Callback_Pixels_getImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ImagePtr __ret;
        try
        {
            __ret = __proxy->end_getImage(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Pixels_getImagePtr
newCallback_Pixels_getImage(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ImagePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_getImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_getImagePtr
newCallback_Pixels_getImage(T* instance, void (T::*cb)(const ::omero::model::ImagePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_getImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_setImage : public Callback_Pixels_setImage_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_setImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_setImagePtr
newCallback_Pixels_setImage(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setImage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_setImagePtr
newCallback_Pixels_setImage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setImage<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_setImagePtr
newCallback_Pixels_setImage(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setImage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_setImagePtr
newCallback_Pixels_setImage(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setImage<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_setImage : public Callback_Pixels_setImage_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_setImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_setImagePtr
newCallback_Pixels_setImage(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_setImagePtr
newCallback_Pixels_setImage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setImage<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_setImagePtr
newCallback_Pixels_setImage(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_setImagePtr
newCallback_Pixels_setImage(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setImage<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_getRelatedTo : public Callback_Pixels_getRelatedTo_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::PixelsPtr&);

    CallbackNC_Pixels_getRelatedTo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::PixelsPtr __ret;
        try
        {
            __ret = __proxy->end_getRelatedTo(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Pixels_getRelatedToPtr
newCallback_Pixels_getRelatedTo(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PixelsPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_getRelatedTo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_getRelatedToPtr
newCallback_Pixels_getRelatedTo(T* instance, void (T::*cb)(const ::omero::model::PixelsPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_getRelatedTo<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_getRelatedTo : public Callback_Pixels_getRelatedTo_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::PixelsPtr&, const CT&);

    Callback_Pixels_getRelatedTo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::PixelsPtr __ret;
        try
        {
            __ret = __proxy->end_getRelatedTo(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Pixels_getRelatedToPtr
newCallback_Pixels_getRelatedTo(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PixelsPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_getRelatedTo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_getRelatedToPtr
newCallback_Pixels_getRelatedTo(T* instance, void (T::*cb)(const ::omero::model::PixelsPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_getRelatedTo<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_setRelatedTo : public Callback_Pixels_setRelatedTo_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_setRelatedTo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_setRelatedToPtr
newCallback_Pixels_setRelatedTo(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setRelatedTo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_setRelatedToPtr
newCallback_Pixels_setRelatedTo(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setRelatedTo<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_setRelatedToPtr
newCallback_Pixels_setRelatedTo(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setRelatedTo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_setRelatedToPtr
newCallback_Pixels_setRelatedTo(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setRelatedTo<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_setRelatedTo : public Callback_Pixels_setRelatedTo_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_setRelatedTo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_setRelatedToPtr
newCallback_Pixels_setRelatedTo(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setRelatedTo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_setRelatedToPtr
newCallback_Pixels_setRelatedTo(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setRelatedTo<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_setRelatedToPtr
newCallback_Pixels_setRelatedTo(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setRelatedTo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_setRelatedToPtr
newCallback_Pixels_setRelatedTo(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setRelatedTo<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_getPixelsType : public Callback_Pixels_getPixelsType_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::PixelsTypePtr&);

    CallbackNC_Pixels_getPixelsType(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::PixelsTypePtr __ret;
        try
        {
            __ret = __proxy->end_getPixelsType(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Pixels_getPixelsTypePtr
newCallback_Pixels_getPixelsType(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PixelsTypePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_getPixelsType<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_getPixelsTypePtr
newCallback_Pixels_getPixelsType(T* instance, void (T::*cb)(const ::omero::model::PixelsTypePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_getPixelsType<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_getPixelsType : public Callback_Pixels_getPixelsType_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::PixelsTypePtr&, const CT&);

    Callback_Pixels_getPixelsType(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::PixelsTypePtr __ret;
        try
        {
            __ret = __proxy->end_getPixelsType(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Pixels_getPixelsTypePtr
newCallback_Pixels_getPixelsType(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PixelsTypePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_getPixelsType<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_getPixelsTypePtr
newCallback_Pixels_getPixelsType(T* instance, void (T::*cb)(const ::omero::model::PixelsTypePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_getPixelsType<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_setPixelsType : public Callback_Pixels_setPixelsType_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_setPixelsType(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_setPixelsTypePtr
newCallback_Pixels_setPixelsType(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setPixelsType<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_setPixelsTypePtr
newCallback_Pixels_setPixelsType(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setPixelsType<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_setPixelsTypePtr
newCallback_Pixels_setPixelsType(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setPixelsType<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_setPixelsTypePtr
newCallback_Pixels_setPixelsType(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setPixelsType<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_setPixelsType : public Callback_Pixels_setPixelsType_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_setPixelsType(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_setPixelsTypePtr
newCallback_Pixels_setPixelsType(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setPixelsType<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_setPixelsTypePtr
newCallback_Pixels_setPixelsType(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setPixelsType<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_setPixelsTypePtr
newCallback_Pixels_setPixelsType(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setPixelsType<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_setPixelsTypePtr
newCallback_Pixels_setPixelsType(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setPixelsType<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_getSignificantBits : public Callback_Pixels_getSignificantBits_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RIntPtr&);

    CallbackNC_Pixels_getSignificantBits(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getSignificantBits(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Pixels_getSignificantBitsPtr
newCallback_Pixels_getSignificantBits(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_getSignificantBits<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_getSignificantBitsPtr
newCallback_Pixels_getSignificantBits(T* instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_getSignificantBits<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_getSignificantBits : public Callback_Pixels_getSignificantBits_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RIntPtr&, const CT&);

    Callback_Pixels_getSignificantBits(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getSignificantBits(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Pixels_getSignificantBitsPtr
newCallback_Pixels_getSignificantBits(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_getSignificantBits<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_getSignificantBitsPtr
newCallback_Pixels_getSignificantBits(T* instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_getSignificantBits<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_setSignificantBits : public Callback_Pixels_setSignificantBits_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_setSignificantBits(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_setSignificantBitsPtr
newCallback_Pixels_setSignificantBits(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setSignificantBits<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_setSignificantBitsPtr
newCallback_Pixels_setSignificantBits(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setSignificantBits<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_setSignificantBitsPtr
newCallback_Pixels_setSignificantBits(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setSignificantBits<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_setSignificantBitsPtr
newCallback_Pixels_setSignificantBits(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setSignificantBits<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_setSignificantBits : public Callback_Pixels_setSignificantBits_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_setSignificantBits(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_setSignificantBitsPtr
newCallback_Pixels_setSignificantBits(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setSignificantBits<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_setSignificantBitsPtr
newCallback_Pixels_setSignificantBits(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setSignificantBits<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_setSignificantBitsPtr
newCallback_Pixels_setSignificantBits(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setSignificantBits<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_setSignificantBitsPtr
newCallback_Pixels_setSignificantBits(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setSignificantBits<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_getSizeX : public Callback_Pixels_getSizeX_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RIntPtr&);

    CallbackNC_Pixels_getSizeX(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getSizeX(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Pixels_getSizeXPtr
newCallback_Pixels_getSizeX(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_getSizeX<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_getSizeXPtr
newCallback_Pixels_getSizeX(T* instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_getSizeX<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_getSizeX : public Callback_Pixels_getSizeX_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RIntPtr&, const CT&);

    Callback_Pixels_getSizeX(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getSizeX(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Pixels_getSizeXPtr
newCallback_Pixels_getSizeX(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_getSizeX<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_getSizeXPtr
newCallback_Pixels_getSizeX(T* instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_getSizeX<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_setSizeX : public Callback_Pixels_setSizeX_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_setSizeX(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_setSizeXPtr
newCallback_Pixels_setSizeX(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setSizeX<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_setSizeXPtr
newCallback_Pixels_setSizeX(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setSizeX<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_setSizeXPtr
newCallback_Pixels_setSizeX(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setSizeX<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_setSizeXPtr
newCallback_Pixels_setSizeX(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setSizeX<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_setSizeX : public Callback_Pixels_setSizeX_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_setSizeX(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_setSizeXPtr
newCallback_Pixels_setSizeX(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setSizeX<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_setSizeXPtr
newCallback_Pixels_setSizeX(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setSizeX<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_setSizeXPtr
newCallback_Pixels_setSizeX(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setSizeX<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_setSizeXPtr
newCallback_Pixels_setSizeX(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setSizeX<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_getSizeY : public Callback_Pixels_getSizeY_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RIntPtr&);

    CallbackNC_Pixels_getSizeY(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getSizeY(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Pixels_getSizeYPtr
newCallback_Pixels_getSizeY(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_getSizeY<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_getSizeYPtr
newCallback_Pixels_getSizeY(T* instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_getSizeY<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_getSizeY : public Callback_Pixels_getSizeY_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RIntPtr&, const CT&);

    Callback_Pixels_getSizeY(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getSizeY(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Pixels_getSizeYPtr
newCallback_Pixels_getSizeY(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_getSizeY<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_getSizeYPtr
newCallback_Pixels_getSizeY(T* instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_getSizeY<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_setSizeY : public Callback_Pixels_setSizeY_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_setSizeY(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_setSizeYPtr
newCallback_Pixels_setSizeY(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setSizeY<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_setSizeYPtr
newCallback_Pixels_setSizeY(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setSizeY<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_setSizeYPtr
newCallback_Pixels_setSizeY(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setSizeY<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_setSizeYPtr
newCallback_Pixels_setSizeY(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setSizeY<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_setSizeY : public Callback_Pixels_setSizeY_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_setSizeY(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_setSizeYPtr
newCallback_Pixels_setSizeY(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setSizeY<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_setSizeYPtr
newCallback_Pixels_setSizeY(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setSizeY<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_setSizeYPtr
newCallback_Pixels_setSizeY(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setSizeY<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_setSizeYPtr
newCallback_Pixels_setSizeY(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setSizeY<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_getSizeZ : public Callback_Pixels_getSizeZ_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RIntPtr&);

    CallbackNC_Pixels_getSizeZ(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getSizeZ(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Pixels_getSizeZPtr
newCallback_Pixels_getSizeZ(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_getSizeZ<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_getSizeZPtr
newCallback_Pixels_getSizeZ(T* instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_getSizeZ<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_getSizeZ : public Callback_Pixels_getSizeZ_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RIntPtr&, const CT&);

    Callback_Pixels_getSizeZ(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getSizeZ(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Pixels_getSizeZPtr
newCallback_Pixels_getSizeZ(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_getSizeZ<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_getSizeZPtr
newCallback_Pixels_getSizeZ(T* instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_getSizeZ<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_setSizeZ : public Callback_Pixels_setSizeZ_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_setSizeZ(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_setSizeZPtr
newCallback_Pixels_setSizeZ(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setSizeZ<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_setSizeZPtr
newCallback_Pixels_setSizeZ(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setSizeZ<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_setSizeZPtr
newCallback_Pixels_setSizeZ(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setSizeZ<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_setSizeZPtr
newCallback_Pixels_setSizeZ(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setSizeZ<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_setSizeZ : public Callback_Pixels_setSizeZ_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_setSizeZ(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_setSizeZPtr
newCallback_Pixels_setSizeZ(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setSizeZ<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_setSizeZPtr
newCallback_Pixels_setSizeZ(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setSizeZ<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_setSizeZPtr
newCallback_Pixels_setSizeZ(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setSizeZ<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_setSizeZPtr
newCallback_Pixels_setSizeZ(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setSizeZ<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_getSizeC : public Callback_Pixels_getSizeC_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RIntPtr&);

    CallbackNC_Pixels_getSizeC(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getSizeC(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Pixels_getSizeCPtr
newCallback_Pixels_getSizeC(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_getSizeC<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_getSizeCPtr
newCallback_Pixels_getSizeC(T* instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_getSizeC<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_getSizeC : public Callback_Pixels_getSizeC_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RIntPtr&, const CT&);

    Callback_Pixels_getSizeC(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getSizeC(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Pixels_getSizeCPtr
newCallback_Pixels_getSizeC(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_getSizeC<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_getSizeCPtr
newCallback_Pixels_getSizeC(T* instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_getSizeC<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_setSizeC : public Callback_Pixels_setSizeC_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_setSizeC(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_setSizeCPtr
newCallback_Pixels_setSizeC(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setSizeC<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_setSizeCPtr
newCallback_Pixels_setSizeC(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setSizeC<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_setSizeCPtr
newCallback_Pixels_setSizeC(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setSizeC<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_setSizeCPtr
newCallback_Pixels_setSizeC(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setSizeC<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_setSizeC : public Callback_Pixels_setSizeC_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_setSizeC(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_setSizeCPtr
newCallback_Pixels_setSizeC(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setSizeC<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_setSizeCPtr
newCallback_Pixels_setSizeC(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setSizeC<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_setSizeCPtr
newCallback_Pixels_setSizeC(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setSizeC<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_setSizeCPtr
newCallback_Pixels_setSizeC(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setSizeC<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_getSizeT : public Callback_Pixels_getSizeT_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RIntPtr&);

    CallbackNC_Pixels_getSizeT(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getSizeT(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Pixels_getSizeTPtr
newCallback_Pixels_getSizeT(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_getSizeT<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_getSizeTPtr
newCallback_Pixels_getSizeT(T* instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_getSizeT<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_getSizeT : public Callback_Pixels_getSizeT_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RIntPtr&, const CT&);

    Callback_Pixels_getSizeT(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getSizeT(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Pixels_getSizeTPtr
newCallback_Pixels_getSizeT(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_getSizeT<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_getSizeTPtr
newCallback_Pixels_getSizeT(T* instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_getSizeT<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_setSizeT : public Callback_Pixels_setSizeT_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_setSizeT(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_setSizeTPtr
newCallback_Pixels_setSizeT(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setSizeT<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_setSizeTPtr
newCallback_Pixels_setSizeT(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setSizeT<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_setSizeTPtr
newCallback_Pixels_setSizeT(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setSizeT<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_setSizeTPtr
newCallback_Pixels_setSizeT(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setSizeT<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_setSizeT : public Callback_Pixels_setSizeT_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_setSizeT(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_setSizeTPtr
newCallback_Pixels_setSizeT(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setSizeT<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_setSizeTPtr
newCallback_Pixels_setSizeT(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setSizeT<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_setSizeTPtr
newCallback_Pixels_setSizeT(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setSizeT<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_setSizeTPtr
newCallback_Pixels_setSizeT(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setSizeT<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_getSha1 : public Callback_Pixels_getSha1_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_Pixels_getSha1(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getSha1(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Pixels_getSha1Ptr
newCallback_Pixels_getSha1(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_getSha1<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_getSha1Ptr
newCallback_Pixels_getSha1(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_getSha1<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_getSha1 : public Callback_Pixels_getSha1_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_Pixels_getSha1(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getSha1(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Pixels_getSha1Ptr
newCallback_Pixels_getSha1(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_getSha1<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_getSha1Ptr
newCallback_Pixels_getSha1(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_getSha1<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_setSha1 : public Callback_Pixels_setSha1_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_setSha1(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_setSha1Ptr
newCallback_Pixels_setSha1(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setSha1<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_setSha1Ptr
newCallback_Pixels_setSha1(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setSha1<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_setSha1Ptr
newCallback_Pixels_setSha1(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setSha1<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_setSha1Ptr
newCallback_Pixels_setSha1(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setSha1<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_setSha1 : public Callback_Pixels_setSha1_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_setSha1(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_setSha1Ptr
newCallback_Pixels_setSha1(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setSha1<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_setSha1Ptr
newCallback_Pixels_setSha1(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setSha1<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_setSha1Ptr
newCallback_Pixels_setSha1(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setSha1<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_setSha1Ptr
newCallback_Pixels_setSha1(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setSha1<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_getDimensionOrder : public Callback_Pixels_getDimensionOrder_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::DimensionOrderPtr&);

    CallbackNC_Pixels_getDimensionOrder(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::DimensionOrderPtr __ret;
        try
        {
            __ret = __proxy->end_getDimensionOrder(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Pixels_getDimensionOrderPtr
newCallback_Pixels_getDimensionOrder(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::DimensionOrderPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_getDimensionOrder<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_getDimensionOrderPtr
newCallback_Pixels_getDimensionOrder(T* instance, void (T::*cb)(const ::omero::model::DimensionOrderPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_getDimensionOrder<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_getDimensionOrder : public Callback_Pixels_getDimensionOrder_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::DimensionOrderPtr&, const CT&);

    Callback_Pixels_getDimensionOrder(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::DimensionOrderPtr __ret;
        try
        {
            __ret = __proxy->end_getDimensionOrder(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Pixels_getDimensionOrderPtr
newCallback_Pixels_getDimensionOrder(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::DimensionOrderPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_getDimensionOrder<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_getDimensionOrderPtr
newCallback_Pixels_getDimensionOrder(T* instance, void (T::*cb)(const ::omero::model::DimensionOrderPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_getDimensionOrder<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_setDimensionOrder : public Callback_Pixels_setDimensionOrder_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_setDimensionOrder(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_setDimensionOrderPtr
newCallback_Pixels_setDimensionOrder(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setDimensionOrder<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_setDimensionOrderPtr
newCallback_Pixels_setDimensionOrder(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setDimensionOrder<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_setDimensionOrderPtr
newCallback_Pixels_setDimensionOrder(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setDimensionOrder<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_setDimensionOrderPtr
newCallback_Pixels_setDimensionOrder(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setDimensionOrder<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_setDimensionOrder : public Callback_Pixels_setDimensionOrder_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_setDimensionOrder(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_setDimensionOrderPtr
newCallback_Pixels_setDimensionOrder(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setDimensionOrder<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_setDimensionOrderPtr
newCallback_Pixels_setDimensionOrder(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setDimensionOrder<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_setDimensionOrderPtr
newCallback_Pixels_setDimensionOrder(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setDimensionOrder<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_setDimensionOrderPtr
newCallback_Pixels_setDimensionOrder(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setDimensionOrder<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_getPhysicalSizeX : public Callback_Pixels_getPhysicalSizeX_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RDoublePtr&);

    CallbackNC_Pixels_getPhysicalSizeX(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::RDoublePtr __ret;
        try
        {
            __ret = __proxy->end_getPhysicalSizeX(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Pixels_getPhysicalSizeXPtr
newCallback_Pixels_getPhysicalSizeX(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RDoublePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_getPhysicalSizeX<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_getPhysicalSizeXPtr
newCallback_Pixels_getPhysicalSizeX(T* instance, void (T::*cb)(const ::omero::RDoublePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_getPhysicalSizeX<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_getPhysicalSizeX : public Callback_Pixels_getPhysicalSizeX_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RDoublePtr&, const CT&);

    Callback_Pixels_getPhysicalSizeX(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::RDoublePtr __ret;
        try
        {
            __ret = __proxy->end_getPhysicalSizeX(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Pixels_getPhysicalSizeXPtr
newCallback_Pixels_getPhysicalSizeX(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RDoublePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_getPhysicalSizeX<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_getPhysicalSizeXPtr
newCallback_Pixels_getPhysicalSizeX(T* instance, void (T::*cb)(const ::omero::RDoublePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_getPhysicalSizeX<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_setPhysicalSizeX : public Callback_Pixels_setPhysicalSizeX_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_setPhysicalSizeX(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_setPhysicalSizeXPtr
newCallback_Pixels_setPhysicalSizeX(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setPhysicalSizeX<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_setPhysicalSizeXPtr
newCallback_Pixels_setPhysicalSizeX(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setPhysicalSizeX<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_setPhysicalSizeXPtr
newCallback_Pixels_setPhysicalSizeX(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setPhysicalSizeX<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_setPhysicalSizeXPtr
newCallback_Pixels_setPhysicalSizeX(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setPhysicalSizeX<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_setPhysicalSizeX : public Callback_Pixels_setPhysicalSizeX_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_setPhysicalSizeX(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_setPhysicalSizeXPtr
newCallback_Pixels_setPhysicalSizeX(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setPhysicalSizeX<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_setPhysicalSizeXPtr
newCallback_Pixels_setPhysicalSizeX(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setPhysicalSizeX<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_setPhysicalSizeXPtr
newCallback_Pixels_setPhysicalSizeX(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setPhysicalSizeX<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_setPhysicalSizeXPtr
newCallback_Pixels_setPhysicalSizeX(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setPhysicalSizeX<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_getPhysicalSizeY : public Callback_Pixels_getPhysicalSizeY_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RDoublePtr&);

    CallbackNC_Pixels_getPhysicalSizeY(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::RDoublePtr __ret;
        try
        {
            __ret = __proxy->end_getPhysicalSizeY(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Pixels_getPhysicalSizeYPtr
newCallback_Pixels_getPhysicalSizeY(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RDoublePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_getPhysicalSizeY<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_getPhysicalSizeYPtr
newCallback_Pixels_getPhysicalSizeY(T* instance, void (T::*cb)(const ::omero::RDoublePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_getPhysicalSizeY<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_getPhysicalSizeY : public Callback_Pixels_getPhysicalSizeY_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RDoublePtr&, const CT&);

    Callback_Pixels_getPhysicalSizeY(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::RDoublePtr __ret;
        try
        {
            __ret = __proxy->end_getPhysicalSizeY(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Pixels_getPhysicalSizeYPtr
newCallback_Pixels_getPhysicalSizeY(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RDoublePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_getPhysicalSizeY<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_getPhysicalSizeYPtr
newCallback_Pixels_getPhysicalSizeY(T* instance, void (T::*cb)(const ::omero::RDoublePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_getPhysicalSizeY<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_setPhysicalSizeY : public Callback_Pixels_setPhysicalSizeY_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_setPhysicalSizeY(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_setPhysicalSizeYPtr
newCallback_Pixels_setPhysicalSizeY(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setPhysicalSizeY<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_setPhysicalSizeYPtr
newCallback_Pixels_setPhysicalSizeY(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setPhysicalSizeY<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_setPhysicalSizeYPtr
newCallback_Pixels_setPhysicalSizeY(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setPhysicalSizeY<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_setPhysicalSizeYPtr
newCallback_Pixels_setPhysicalSizeY(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setPhysicalSizeY<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_setPhysicalSizeY : public Callback_Pixels_setPhysicalSizeY_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_setPhysicalSizeY(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_setPhysicalSizeYPtr
newCallback_Pixels_setPhysicalSizeY(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setPhysicalSizeY<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_setPhysicalSizeYPtr
newCallback_Pixels_setPhysicalSizeY(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setPhysicalSizeY<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_setPhysicalSizeYPtr
newCallback_Pixels_setPhysicalSizeY(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setPhysicalSizeY<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_setPhysicalSizeYPtr
newCallback_Pixels_setPhysicalSizeY(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setPhysicalSizeY<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_getPhysicalSizeZ : public Callback_Pixels_getPhysicalSizeZ_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RDoublePtr&);

    CallbackNC_Pixels_getPhysicalSizeZ(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::RDoublePtr __ret;
        try
        {
            __ret = __proxy->end_getPhysicalSizeZ(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Pixels_getPhysicalSizeZPtr
newCallback_Pixels_getPhysicalSizeZ(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RDoublePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_getPhysicalSizeZ<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_getPhysicalSizeZPtr
newCallback_Pixels_getPhysicalSizeZ(T* instance, void (T::*cb)(const ::omero::RDoublePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_getPhysicalSizeZ<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_getPhysicalSizeZ : public Callback_Pixels_getPhysicalSizeZ_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RDoublePtr&, const CT&);

    Callback_Pixels_getPhysicalSizeZ(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::RDoublePtr __ret;
        try
        {
            __ret = __proxy->end_getPhysicalSizeZ(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Pixels_getPhysicalSizeZPtr
newCallback_Pixels_getPhysicalSizeZ(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RDoublePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_getPhysicalSizeZ<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_getPhysicalSizeZPtr
newCallback_Pixels_getPhysicalSizeZ(T* instance, void (T::*cb)(const ::omero::RDoublePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_getPhysicalSizeZ<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_setPhysicalSizeZ : public Callback_Pixels_setPhysicalSizeZ_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_setPhysicalSizeZ(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_setPhysicalSizeZPtr
newCallback_Pixels_setPhysicalSizeZ(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setPhysicalSizeZ<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_setPhysicalSizeZPtr
newCallback_Pixels_setPhysicalSizeZ(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setPhysicalSizeZ<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_setPhysicalSizeZPtr
newCallback_Pixels_setPhysicalSizeZ(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setPhysicalSizeZ<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_setPhysicalSizeZPtr
newCallback_Pixels_setPhysicalSizeZ(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setPhysicalSizeZ<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_setPhysicalSizeZ : public Callback_Pixels_setPhysicalSizeZ_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_setPhysicalSizeZ(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_setPhysicalSizeZPtr
newCallback_Pixels_setPhysicalSizeZ(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setPhysicalSizeZ<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_setPhysicalSizeZPtr
newCallback_Pixels_setPhysicalSizeZ(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setPhysicalSizeZ<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_setPhysicalSizeZPtr
newCallback_Pixels_setPhysicalSizeZ(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setPhysicalSizeZ<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_setPhysicalSizeZPtr
newCallback_Pixels_setPhysicalSizeZ(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setPhysicalSizeZ<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_getWaveStart : public Callback_Pixels_getWaveStart_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RIntPtr&);

    CallbackNC_Pixels_getWaveStart(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getWaveStart(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Pixels_getWaveStartPtr
newCallback_Pixels_getWaveStart(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_getWaveStart<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_getWaveStartPtr
newCallback_Pixels_getWaveStart(T* instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_getWaveStart<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_getWaveStart : public Callback_Pixels_getWaveStart_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RIntPtr&, const CT&);

    Callback_Pixels_getWaveStart(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getWaveStart(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Pixels_getWaveStartPtr
newCallback_Pixels_getWaveStart(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_getWaveStart<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_getWaveStartPtr
newCallback_Pixels_getWaveStart(T* instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_getWaveStart<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_setWaveStart : public Callback_Pixels_setWaveStart_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_setWaveStart(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_setWaveStartPtr
newCallback_Pixels_setWaveStart(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setWaveStart<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_setWaveStartPtr
newCallback_Pixels_setWaveStart(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setWaveStart<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_setWaveStartPtr
newCallback_Pixels_setWaveStart(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setWaveStart<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_setWaveStartPtr
newCallback_Pixels_setWaveStart(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setWaveStart<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_setWaveStart : public Callback_Pixels_setWaveStart_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_setWaveStart(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_setWaveStartPtr
newCallback_Pixels_setWaveStart(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setWaveStart<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_setWaveStartPtr
newCallback_Pixels_setWaveStart(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setWaveStart<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_setWaveStartPtr
newCallback_Pixels_setWaveStart(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setWaveStart<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_setWaveStartPtr
newCallback_Pixels_setWaveStart(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setWaveStart<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_getWaveIncrement : public Callback_Pixels_getWaveIncrement_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RIntPtr&);

    CallbackNC_Pixels_getWaveIncrement(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getWaveIncrement(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Pixels_getWaveIncrementPtr
newCallback_Pixels_getWaveIncrement(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_getWaveIncrement<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_getWaveIncrementPtr
newCallback_Pixels_getWaveIncrement(T* instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_getWaveIncrement<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_getWaveIncrement : public Callback_Pixels_getWaveIncrement_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RIntPtr&, const CT&);

    Callback_Pixels_getWaveIncrement(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getWaveIncrement(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Pixels_getWaveIncrementPtr
newCallback_Pixels_getWaveIncrement(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_getWaveIncrement<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_getWaveIncrementPtr
newCallback_Pixels_getWaveIncrement(T* instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_getWaveIncrement<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_setWaveIncrement : public Callback_Pixels_setWaveIncrement_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_setWaveIncrement(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_setWaveIncrementPtr
newCallback_Pixels_setWaveIncrement(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setWaveIncrement<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_setWaveIncrementPtr
newCallback_Pixels_setWaveIncrement(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setWaveIncrement<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_setWaveIncrementPtr
newCallback_Pixels_setWaveIncrement(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setWaveIncrement<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_setWaveIncrementPtr
newCallback_Pixels_setWaveIncrement(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setWaveIncrement<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_setWaveIncrement : public Callback_Pixels_setWaveIncrement_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_setWaveIncrement(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_setWaveIncrementPtr
newCallback_Pixels_setWaveIncrement(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setWaveIncrement<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_setWaveIncrementPtr
newCallback_Pixels_setWaveIncrement(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setWaveIncrement<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_setWaveIncrementPtr
newCallback_Pixels_setWaveIncrement(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setWaveIncrement<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_setWaveIncrementPtr
newCallback_Pixels_setWaveIncrement(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setWaveIncrement<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_getTimeIncrement : public Callback_Pixels_getTimeIncrement_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RDoublePtr&);

    CallbackNC_Pixels_getTimeIncrement(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::RDoublePtr __ret;
        try
        {
            __ret = __proxy->end_getTimeIncrement(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Pixels_getTimeIncrementPtr
newCallback_Pixels_getTimeIncrement(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RDoublePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_getTimeIncrement<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_getTimeIncrementPtr
newCallback_Pixels_getTimeIncrement(T* instance, void (T::*cb)(const ::omero::RDoublePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_getTimeIncrement<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_getTimeIncrement : public Callback_Pixels_getTimeIncrement_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RDoublePtr&, const CT&);

    Callback_Pixels_getTimeIncrement(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::RDoublePtr __ret;
        try
        {
            __ret = __proxy->end_getTimeIncrement(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Pixels_getTimeIncrementPtr
newCallback_Pixels_getTimeIncrement(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RDoublePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_getTimeIncrement<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_getTimeIncrementPtr
newCallback_Pixels_getTimeIncrement(T* instance, void (T::*cb)(const ::omero::RDoublePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_getTimeIncrement<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_setTimeIncrement : public Callback_Pixels_setTimeIncrement_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_setTimeIncrement(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_setTimeIncrementPtr
newCallback_Pixels_setTimeIncrement(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setTimeIncrement<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_setTimeIncrementPtr
newCallback_Pixels_setTimeIncrement(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setTimeIncrement<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_setTimeIncrementPtr
newCallback_Pixels_setTimeIncrement(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setTimeIncrement<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_setTimeIncrementPtr
newCallback_Pixels_setTimeIncrement(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setTimeIncrement<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_setTimeIncrement : public Callback_Pixels_setTimeIncrement_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_setTimeIncrement(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_setTimeIncrementPtr
newCallback_Pixels_setTimeIncrement(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setTimeIncrement<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_setTimeIncrementPtr
newCallback_Pixels_setTimeIncrement(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setTimeIncrement<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_setTimeIncrementPtr
newCallback_Pixels_setTimeIncrement(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setTimeIncrement<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_setTimeIncrementPtr
newCallback_Pixels_setTimeIncrement(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setTimeIncrement<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_getMethodology : public Callback_Pixels_getMethodology_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_Pixels_getMethodology(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getMethodology(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Pixels_getMethodologyPtr
newCallback_Pixels_getMethodology(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_getMethodology<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_getMethodologyPtr
newCallback_Pixels_getMethodology(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_getMethodology<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_getMethodology : public Callback_Pixels_getMethodology_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_Pixels_getMethodology(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getMethodology(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Pixels_getMethodologyPtr
newCallback_Pixels_getMethodology(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_getMethodology<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_getMethodologyPtr
newCallback_Pixels_getMethodology(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_getMethodology<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_setMethodology : public Callback_Pixels_setMethodology_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_setMethodology(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_setMethodologyPtr
newCallback_Pixels_setMethodology(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setMethodology<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_setMethodologyPtr
newCallback_Pixels_setMethodology(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setMethodology<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_setMethodologyPtr
newCallback_Pixels_setMethodology(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setMethodology<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_setMethodologyPtr
newCallback_Pixels_setMethodology(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setMethodology<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_setMethodology : public Callback_Pixels_setMethodology_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_setMethodology(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_setMethodologyPtr
newCallback_Pixels_setMethodology(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setMethodology<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_setMethodologyPtr
newCallback_Pixels_setMethodology(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setMethodology<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_setMethodologyPtr
newCallback_Pixels_setMethodology(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setMethodology<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_setMethodologyPtr
newCallback_Pixels_setMethodology(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setMethodology<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_unloadPlaneInfo : public Callback_Pixels_unloadPlaneInfo_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_unloadPlaneInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_unloadPlaneInfoPtr
newCallback_Pixels_unloadPlaneInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_unloadPlaneInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_unloadPlaneInfoPtr
newCallback_Pixels_unloadPlaneInfo(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_unloadPlaneInfo<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_unloadPlaneInfoPtr
newCallback_Pixels_unloadPlaneInfo(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_unloadPlaneInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_unloadPlaneInfoPtr
newCallback_Pixels_unloadPlaneInfo(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_unloadPlaneInfo<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_unloadPlaneInfo : public Callback_Pixels_unloadPlaneInfo_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_unloadPlaneInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_unloadPlaneInfoPtr
newCallback_Pixels_unloadPlaneInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_unloadPlaneInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_unloadPlaneInfoPtr
newCallback_Pixels_unloadPlaneInfo(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_unloadPlaneInfo<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_unloadPlaneInfoPtr
newCallback_Pixels_unloadPlaneInfo(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_unloadPlaneInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_unloadPlaneInfoPtr
newCallback_Pixels_unloadPlaneInfo(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_unloadPlaneInfo<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_sizeOfPlaneInfo : public Callback_Pixels_sizeOfPlaneInfo_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Pixels_sizeOfPlaneInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfPlaneInfo(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Pixels_sizeOfPlaneInfoPtr
newCallback_Pixels_sizeOfPlaneInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_sizeOfPlaneInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_sizeOfPlaneInfoPtr
newCallback_Pixels_sizeOfPlaneInfo(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_sizeOfPlaneInfo<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_sizeOfPlaneInfo : public Callback_Pixels_sizeOfPlaneInfo_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Pixels_sizeOfPlaneInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfPlaneInfo(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Pixels_sizeOfPlaneInfoPtr
newCallback_Pixels_sizeOfPlaneInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_sizeOfPlaneInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_sizeOfPlaneInfoPtr
newCallback_Pixels_sizeOfPlaneInfo(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_sizeOfPlaneInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_copyPlaneInfo : public Callback_Pixels_copyPlaneInfo_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::PixelsPlaneInfoSeq&);

    CallbackNC_Pixels_copyPlaneInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::PixelsPlaneInfoSeq __ret;
        try
        {
            __ret = __proxy->end_copyPlaneInfo(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Pixels_copyPlaneInfoPtr
newCallback_Pixels_copyPlaneInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PixelsPlaneInfoSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_copyPlaneInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_copyPlaneInfoPtr
newCallback_Pixels_copyPlaneInfo(T* instance, void (T::*cb)(const ::omero::model::PixelsPlaneInfoSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_copyPlaneInfo<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_copyPlaneInfo : public Callback_Pixels_copyPlaneInfo_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::PixelsPlaneInfoSeq&, const CT&);

    Callback_Pixels_copyPlaneInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::PixelsPlaneInfoSeq __ret;
        try
        {
            __ret = __proxy->end_copyPlaneInfo(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Pixels_copyPlaneInfoPtr
newCallback_Pixels_copyPlaneInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PixelsPlaneInfoSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_copyPlaneInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_copyPlaneInfoPtr
newCallback_Pixels_copyPlaneInfo(T* instance, void (T::*cb)(const ::omero::model::PixelsPlaneInfoSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_copyPlaneInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_addPlaneInfo : public Callback_Pixels_addPlaneInfo_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_addPlaneInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_addPlaneInfoPtr
newCallback_Pixels_addPlaneInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_addPlaneInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_addPlaneInfoPtr
newCallback_Pixels_addPlaneInfo(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_addPlaneInfo<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_addPlaneInfoPtr
newCallback_Pixels_addPlaneInfo(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_addPlaneInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_addPlaneInfoPtr
newCallback_Pixels_addPlaneInfo(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_addPlaneInfo<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_addPlaneInfo : public Callback_Pixels_addPlaneInfo_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_addPlaneInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_addPlaneInfoPtr
newCallback_Pixels_addPlaneInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_addPlaneInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_addPlaneInfoPtr
newCallback_Pixels_addPlaneInfo(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_addPlaneInfo<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_addPlaneInfoPtr
newCallback_Pixels_addPlaneInfo(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_addPlaneInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_addPlaneInfoPtr
newCallback_Pixels_addPlaneInfo(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_addPlaneInfo<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_addAllPlaneInfoSet : public Callback_Pixels_addAllPlaneInfoSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_addAllPlaneInfoSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_addAllPlaneInfoSetPtr
newCallback_Pixels_addAllPlaneInfoSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_addAllPlaneInfoSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_addAllPlaneInfoSetPtr
newCallback_Pixels_addAllPlaneInfoSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_addAllPlaneInfoSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_addAllPlaneInfoSetPtr
newCallback_Pixels_addAllPlaneInfoSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_addAllPlaneInfoSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_addAllPlaneInfoSetPtr
newCallback_Pixels_addAllPlaneInfoSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_addAllPlaneInfoSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_addAllPlaneInfoSet : public Callback_Pixels_addAllPlaneInfoSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_addAllPlaneInfoSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_addAllPlaneInfoSetPtr
newCallback_Pixels_addAllPlaneInfoSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_addAllPlaneInfoSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_addAllPlaneInfoSetPtr
newCallback_Pixels_addAllPlaneInfoSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_addAllPlaneInfoSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_addAllPlaneInfoSetPtr
newCallback_Pixels_addAllPlaneInfoSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_addAllPlaneInfoSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_addAllPlaneInfoSetPtr
newCallback_Pixels_addAllPlaneInfoSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_addAllPlaneInfoSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_removePlaneInfo : public Callback_Pixels_removePlaneInfo_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_removePlaneInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_removePlaneInfoPtr
newCallback_Pixels_removePlaneInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_removePlaneInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_removePlaneInfoPtr
newCallback_Pixels_removePlaneInfo(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_removePlaneInfo<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_removePlaneInfoPtr
newCallback_Pixels_removePlaneInfo(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_removePlaneInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_removePlaneInfoPtr
newCallback_Pixels_removePlaneInfo(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_removePlaneInfo<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_removePlaneInfo : public Callback_Pixels_removePlaneInfo_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_removePlaneInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_removePlaneInfoPtr
newCallback_Pixels_removePlaneInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_removePlaneInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_removePlaneInfoPtr
newCallback_Pixels_removePlaneInfo(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_removePlaneInfo<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_removePlaneInfoPtr
newCallback_Pixels_removePlaneInfo(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_removePlaneInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_removePlaneInfoPtr
newCallback_Pixels_removePlaneInfo(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_removePlaneInfo<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_removeAllPlaneInfoSet : public Callback_Pixels_removeAllPlaneInfoSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_removeAllPlaneInfoSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_removeAllPlaneInfoSetPtr
newCallback_Pixels_removeAllPlaneInfoSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_removeAllPlaneInfoSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_removeAllPlaneInfoSetPtr
newCallback_Pixels_removeAllPlaneInfoSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_removeAllPlaneInfoSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_removeAllPlaneInfoSetPtr
newCallback_Pixels_removeAllPlaneInfoSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_removeAllPlaneInfoSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_removeAllPlaneInfoSetPtr
newCallback_Pixels_removeAllPlaneInfoSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_removeAllPlaneInfoSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_removeAllPlaneInfoSet : public Callback_Pixels_removeAllPlaneInfoSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_removeAllPlaneInfoSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_removeAllPlaneInfoSetPtr
newCallback_Pixels_removeAllPlaneInfoSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_removeAllPlaneInfoSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_removeAllPlaneInfoSetPtr
newCallback_Pixels_removeAllPlaneInfoSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_removeAllPlaneInfoSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_removeAllPlaneInfoSetPtr
newCallback_Pixels_removeAllPlaneInfoSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_removeAllPlaneInfoSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_removeAllPlaneInfoSetPtr
newCallback_Pixels_removeAllPlaneInfoSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_removeAllPlaneInfoSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_clearPlaneInfo : public Callback_Pixels_clearPlaneInfo_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_clearPlaneInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_clearPlaneInfoPtr
newCallback_Pixels_clearPlaneInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_clearPlaneInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_clearPlaneInfoPtr
newCallback_Pixels_clearPlaneInfo(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_clearPlaneInfo<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_clearPlaneInfoPtr
newCallback_Pixels_clearPlaneInfo(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_clearPlaneInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_clearPlaneInfoPtr
newCallback_Pixels_clearPlaneInfo(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_clearPlaneInfo<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_clearPlaneInfo : public Callback_Pixels_clearPlaneInfo_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_clearPlaneInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_clearPlaneInfoPtr
newCallback_Pixels_clearPlaneInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_clearPlaneInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_clearPlaneInfoPtr
newCallback_Pixels_clearPlaneInfo(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_clearPlaneInfo<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_clearPlaneInfoPtr
newCallback_Pixels_clearPlaneInfo(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_clearPlaneInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_clearPlaneInfoPtr
newCallback_Pixels_clearPlaneInfo(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_clearPlaneInfo<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_reloadPlaneInfo : public Callback_Pixels_reloadPlaneInfo_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_reloadPlaneInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_reloadPlaneInfoPtr
newCallback_Pixels_reloadPlaneInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_reloadPlaneInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_reloadPlaneInfoPtr
newCallback_Pixels_reloadPlaneInfo(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_reloadPlaneInfo<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_reloadPlaneInfoPtr
newCallback_Pixels_reloadPlaneInfo(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_reloadPlaneInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_reloadPlaneInfoPtr
newCallback_Pixels_reloadPlaneInfo(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_reloadPlaneInfo<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_reloadPlaneInfo : public Callback_Pixels_reloadPlaneInfo_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_reloadPlaneInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_reloadPlaneInfoPtr
newCallback_Pixels_reloadPlaneInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_reloadPlaneInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_reloadPlaneInfoPtr
newCallback_Pixels_reloadPlaneInfo(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_reloadPlaneInfo<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_reloadPlaneInfoPtr
newCallback_Pixels_reloadPlaneInfo(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_reloadPlaneInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_reloadPlaneInfoPtr
newCallback_Pixels_reloadPlaneInfo(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_reloadPlaneInfo<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_unloadPixelsFileMaps : public Callback_Pixels_unloadPixelsFileMaps_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_unloadPixelsFileMaps(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_unloadPixelsFileMapsPtr
newCallback_Pixels_unloadPixelsFileMaps(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_unloadPixelsFileMaps<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_unloadPixelsFileMapsPtr
newCallback_Pixels_unloadPixelsFileMaps(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_unloadPixelsFileMaps<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_unloadPixelsFileMapsPtr
newCallback_Pixels_unloadPixelsFileMaps(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_unloadPixelsFileMaps<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_unloadPixelsFileMapsPtr
newCallback_Pixels_unloadPixelsFileMaps(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_unloadPixelsFileMaps<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_unloadPixelsFileMaps : public Callback_Pixels_unloadPixelsFileMaps_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_unloadPixelsFileMaps(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_unloadPixelsFileMapsPtr
newCallback_Pixels_unloadPixelsFileMaps(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_unloadPixelsFileMaps<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_unloadPixelsFileMapsPtr
newCallback_Pixels_unloadPixelsFileMaps(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_unloadPixelsFileMaps<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_unloadPixelsFileMapsPtr
newCallback_Pixels_unloadPixelsFileMaps(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_unloadPixelsFileMaps<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_unloadPixelsFileMapsPtr
newCallback_Pixels_unloadPixelsFileMaps(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_unloadPixelsFileMaps<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_sizeOfPixelsFileMaps : public Callback_Pixels_sizeOfPixelsFileMaps_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Pixels_sizeOfPixelsFileMaps(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfPixelsFileMaps(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Pixels_sizeOfPixelsFileMapsPtr
newCallback_Pixels_sizeOfPixelsFileMaps(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_sizeOfPixelsFileMaps<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_sizeOfPixelsFileMapsPtr
newCallback_Pixels_sizeOfPixelsFileMaps(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_sizeOfPixelsFileMaps<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_sizeOfPixelsFileMaps : public Callback_Pixels_sizeOfPixelsFileMaps_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Pixels_sizeOfPixelsFileMaps(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfPixelsFileMaps(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Pixels_sizeOfPixelsFileMapsPtr
newCallback_Pixels_sizeOfPixelsFileMaps(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_sizeOfPixelsFileMaps<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_sizeOfPixelsFileMapsPtr
newCallback_Pixels_sizeOfPixelsFileMaps(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_sizeOfPixelsFileMaps<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_copyPixelsFileMaps : public Callback_Pixels_copyPixelsFileMaps_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::PixelsPixelsFileMapsSeq&);

    CallbackNC_Pixels_copyPixelsFileMaps(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::PixelsPixelsFileMapsSeq __ret;
        try
        {
            __ret = __proxy->end_copyPixelsFileMaps(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Pixels_copyPixelsFileMapsPtr
newCallback_Pixels_copyPixelsFileMaps(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PixelsPixelsFileMapsSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_copyPixelsFileMaps<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_copyPixelsFileMapsPtr
newCallback_Pixels_copyPixelsFileMaps(T* instance, void (T::*cb)(const ::omero::model::PixelsPixelsFileMapsSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_copyPixelsFileMaps<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_copyPixelsFileMaps : public Callback_Pixels_copyPixelsFileMaps_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::PixelsPixelsFileMapsSeq&, const CT&);

    Callback_Pixels_copyPixelsFileMaps(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::PixelsPixelsFileMapsSeq __ret;
        try
        {
            __ret = __proxy->end_copyPixelsFileMaps(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Pixels_copyPixelsFileMapsPtr
newCallback_Pixels_copyPixelsFileMaps(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PixelsPixelsFileMapsSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_copyPixelsFileMaps<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_copyPixelsFileMapsPtr
newCallback_Pixels_copyPixelsFileMaps(T* instance, void (T::*cb)(const ::omero::model::PixelsPixelsFileMapsSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_copyPixelsFileMaps<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_addPixelsOriginalFileMap : public Callback_Pixels_addPixelsOriginalFileMap_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_addPixelsOriginalFileMap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_addPixelsOriginalFileMapPtr
newCallback_Pixels_addPixelsOriginalFileMap(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_addPixelsOriginalFileMap<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_addPixelsOriginalFileMapPtr
newCallback_Pixels_addPixelsOriginalFileMap(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_addPixelsOriginalFileMap<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_addPixelsOriginalFileMapPtr
newCallback_Pixels_addPixelsOriginalFileMap(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_addPixelsOriginalFileMap<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_addPixelsOriginalFileMapPtr
newCallback_Pixels_addPixelsOriginalFileMap(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_addPixelsOriginalFileMap<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_addPixelsOriginalFileMap : public Callback_Pixels_addPixelsOriginalFileMap_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_addPixelsOriginalFileMap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_addPixelsOriginalFileMapPtr
newCallback_Pixels_addPixelsOriginalFileMap(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_addPixelsOriginalFileMap<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_addPixelsOriginalFileMapPtr
newCallback_Pixels_addPixelsOriginalFileMap(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_addPixelsOriginalFileMap<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_addPixelsOriginalFileMapPtr
newCallback_Pixels_addPixelsOriginalFileMap(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_addPixelsOriginalFileMap<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_addPixelsOriginalFileMapPtr
newCallback_Pixels_addPixelsOriginalFileMap(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_addPixelsOriginalFileMap<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_addAllPixelsOriginalFileMapSet : public Callback_Pixels_addAllPixelsOriginalFileMapSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_addAllPixelsOriginalFileMapSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_addAllPixelsOriginalFileMapSetPtr
newCallback_Pixels_addAllPixelsOriginalFileMapSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_addAllPixelsOriginalFileMapSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_addAllPixelsOriginalFileMapSetPtr
newCallback_Pixels_addAllPixelsOriginalFileMapSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_addAllPixelsOriginalFileMapSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_addAllPixelsOriginalFileMapSetPtr
newCallback_Pixels_addAllPixelsOriginalFileMapSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_addAllPixelsOriginalFileMapSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_addAllPixelsOriginalFileMapSetPtr
newCallback_Pixels_addAllPixelsOriginalFileMapSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_addAllPixelsOriginalFileMapSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_addAllPixelsOriginalFileMapSet : public Callback_Pixels_addAllPixelsOriginalFileMapSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_addAllPixelsOriginalFileMapSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_addAllPixelsOriginalFileMapSetPtr
newCallback_Pixels_addAllPixelsOriginalFileMapSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_addAllPixelsOriginalFileMapSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_addAllPixelsOriginalFileMapSetPtr
newCallback_Pixels_addAllPixelsOriginalFileMapSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_addAllPixelsOriginalFileMapSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_addAllPixelsOriginalFileMapSetPtr
newCallback_Pixels_addAllPixelsOriginalFileMapSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_addAllPixelsOriginalFileMapSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_addAllPixelsOriginalFileMapSetPtr
newCallback_Pixels_addAllPixelsOriginalFileMapSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_addAllPixelsOriginalFileMapSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_removePixelsOriginalFileMap : public Callback_Pixels_removePixelsOriginalFileMap_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_removePixelsOriginalFileMap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_removePixelsOriginalFileMapPtr
newCallback_Pixels_removePixelsOriginalFileMap(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_removePixelsOriginalFileMap<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_removePixelsOriginalFileMapPtr
newCallback_Pixels_removePixelsOriginalFileMap(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_removePixelsOriginalFileMap<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_removePixelsOriginalFileMapPtr
newCallback_Pixels_removePixelsOriginalFileMap(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_removePixelsOriginalFileMap<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_removePixelsOriginalFileMapPtr
newCallback_Pixels_removePixelsOriginalFileMap(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_removePixelsOriginalFileMap<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_removePixelsOriginalFileMap : public Callback_Pixels_removePixelsOriginalFileMap_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_removePixelsOriginalFileMap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_removePixelsOriginalFileMapPtr
newCallback_Pixels_removePixelsOriginalFileMap(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_removePixelsOriginalFileMap<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_removePixelsOriginalFileMapPtr
newCallback_Pixels_removePixelsOriginalFileMap(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_removePixelsOriginalFileMap<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_removePixelsOriginalFileMapPtr
newCallback_Pixels_removePixelsOriginalFileMap(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_removePixelsOriginalFileMap<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_removePixelsOriginalFileMapPtr
newCallback_Pixels_removePixelsOriginalFileMap(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_removePixelsOriginalFileMap<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_removeAllPixelsOriginalFileMapSet : public Callback_Pixels_removeAllPixelsOriginalFileMapSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_removeAllPixelsOriginalFileMapSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_removeAllPixelsOriginalFileMapSetPtr
newCallback_Pixels_removeAllPixelsOriginalFileMapSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_removeAllPixelsOriginalFileMapSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_removeAllPixelsOriginalFileMapSetPtr
newCallback_Pixels_removeAllPixelsOriginalFileMapSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_removeAllPixelsOriginalFileMapSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_removeAllPixelsOriginalFileMapSetPtr
newCallback_Pixels_removeAllPixelsOriginalFileMapSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_removeAllPixelsOriginalFileMapSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_removeAllPixelsOriginalFileMapSetPtr
newCallback_Pixels_removeAllPixelsOriginalFileMapSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_removeAllPixelsOriginalFileMapSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_removeAllPixelsOriginalFileMapSet : public Callback_Pixels_removeAllPixelsOriginalFileMapSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_removeAllPixelsOriginalFileMapSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_removeAllPixelsOriginalFileMapSetPtr
newCallback_Pixels_removeAllPixelsOriginalFileMapSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_removeAllPixelsOriginalFileMapSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_removeAllPixelsOriginalFileMapSetPtr
newCallback_Pixels_removeAllPixelsOriginalFileMapSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_removeAllPixelsOriginalFileMapSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_removeAllPixelsOriginalFileMapSetPtr
newCallback_Pixels_removeAllPixelsOriginalFileMapSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_removeAllPixelsOriginalFileMapSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_removeAllPixelsOriginalFileMapSetPtr
newCallback_Pixels_removeAllPixelsOriginalFileMapSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_removeAllPixelsOriginalFileMapSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_clearPixelsFileMaps : public Callback_Pixels_clearPixelsFileMaps_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_clearPixelsFileMaps(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_clearPixelsFileMapsPtr
newCallback_Pixels_clearPixelsFileMaps(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_clearPixelsFileMaps<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_clearPixelsFileMapsPtr
newCallback_Pixels_clearPixelsFileMaps(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_clearPixelsFileMaps<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_clearPixelsFileMapsPtr
newCallback_Pixels_clearPixelsFileMaps(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_clearPixelsFileMaps<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_clearPixelsFileMapsPtr
newCallback_Pixels_clearPixelsFileMaps(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_clearPixelsFileMaps<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_clearPixelsFileMaps : public Callback_Pixels_clearPixelsFileMaps_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_clearPixelsFileMaps(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_clearPixelsFileMapsPtr
newCallback_Pixels_clearPixelsFileMaps(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_clearPixelsFileMaps<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_clearPixelsFileMapsPtr
newCallback_Pixels_clearPixelsFileMaps(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_clearPixelsFileMaps<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_clearPixelsFileMapsPtr
newCallback_Pixels_clearPixelsFileMaps(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_clearPixelsFileMaps<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_clearPixelsFileMapsPtr
newCallback_Pixels_clearPixelsFileMaps(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_clearPixelsFileMaps<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_reloadPixelsFileMaps : public Callback_Pixels_reloadPixelsFileMaps_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_reloadPixelsFileMaps(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_reloadPixelsFileMapsPtr
newCallback_Pixels_reloadPixelsFileMaps(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_reloadPixelsFileMaps<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_reloadPixelsFileMapsPtr
newCallback_Pixels_reloadPixelsFileMaps(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_reloadPixelsFileMaps<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_reloadPixelsFileMapsPtr
newCallback_Pixels_reloadPixelsFileMaps(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_reloadPixelsFileMaps<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_reloadPixelsFileMapsPtr
newCallback_Pixels_reloadPixelsFileMaps(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_reloadPixelsFileMaps<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_reloadPixelsFileMaps : public Callback_Pixels_reloadPixelsFileMaps_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_reloadPixelsFileMaps(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_reloadPixelsFileMapsPtr
newCallback_Pixels_reloadPixelsFileMaps(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_reloadPixelsFileMaps<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_reloadPixelsFileMapsPtr
newCallback_Pixels_reloadPixelsFileMaps(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_reloadPixelsFileMaps<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_reloadPixelsFileMapsPtr
newCallback_Pixels_reloadPixelsFileMaps(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_reloadPixelsFileMaps<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_reloadPixelsFileMapsPtr
newCallback_Pixels_reloadPixelsFileMaps(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_reloadPixelsFileMaps<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_getPixelsFileMapsCountPerOwner : public Callback_Pixels_getPixelsFileMapsCountPerOwner_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::sys::CountMap&);

    CallbackNC_Pixels_getPixelsFileMapsCountPerOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::sys::CountMap __ret;
        try
        {
            __ret = __proxy->end_getPixelsFileMapsCountPerOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Pixels_getPixelsFileMapsCountPerOwnerPtr
newCallback_Pixels_getPixelsFileMapsCountPerOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::CountMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_getPixelsFileMapsCountPerOwner<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_getPixelsFileMapsCountPerOwnerPtr
newCallback_Pixels_getPixelsFileMapsCountPerOwner(T* instance, void (T::*cb)(const ::omero::sys::CountMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_getPixelsFileMapsCountPerOwner<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_getPixelsFileMapsCountPerOwner : public Callback_Pixels_getPixelsFileMapsCountPerOwner_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::sys::CountMap&, const CT&);

    Callback_Pixels_getPixelsFileMapsCountPerOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::sys::CountMap __ret;
        try
        {
            __ret = __proxy->end_getPixelsFileMapsCountPerOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Pixels_getPixelsFileMapsCountPerOwnerPtr
newCallback_Pixels_getPixelsFileMapsCountPerOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::CountMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_getPixelsFileMapsCountPerOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_getPixelsFileMapsCountPerOwnerPtr
newCallback_Pixels_getPixelsFileMapsCountPerOwner(T* instance, void (T::*cb)(const ::omero::sys::CountMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_getPixelsFileMapsCountPerOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_linkOriginalFile : public Callback_Pixels_linkOriginalFile_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::PixelsOriginalFileMapPtr&);

    CallbackNC_Pixels_linkOriginalFile(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::PixelsOriginalFileMapPtr __ret;
        try
        {
            __ret = __proxy->end_linkOriginalFile(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Pixels_linkOriginalFilePtr
newCallback_Pixels_linkOriginalFile(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PixelsOriginalFileMapPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_linkOriginalFile<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_linkOriginalFilePtr
newCallback_Pixels_linkOriginalFile(T* instance, void (T::*cb)(const ::omero::model::PixelsOriginalFileMapPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_linkOriginalFile<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_linkOriginalFile : public Callback_Pixels_linkOriginalFile_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::PixelsOriginalFileMapPtr&, const CT&);

    Callback_Pixels_linkOriginalFile(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::PixelsOriginalFileMapPtr __ret;
        try
        {
            __ret = __proxy->end_linkOriginalFile(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Pixels_linkOriginalFilePtr
newCallback_Pixels_linkOriginalFile(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PixelsOriginalFileMapPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_linkOriginalFile<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_linkOriginalFilePtr
newCallback_Pixels_linkOriginalFile(T* instance, void (T::*cb)(const ::omero::model::PixelsOriginalFileMapPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_linkOriginalFile<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_addPixelsOriginalFileMapToBoth : public Callback_Pixels_addPixelsOriginalFileMapToBoth_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_addPixelsOriginalFileMapToBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_addPixelsOriginalFileMapToBothPtr
newCallback_Pixels_addPixelsOriginalFileMapToBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_addPixelsOriginalFileMapToBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_addPixelsOriginalFileMapToBothPtr
newCallback_Pixels_addPixelsOriginalFileMapToBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_addPixelsOriginalFileMapToBoth<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_addPixelsOriginalFileMapToBothPtr
newCallback_Pixels_addPixelsOriginalFileMapToBoth(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_addPixelsOriginalFileMapToBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_addPixelsOriginalFileMapToBothPtr
newCallback_Pixels_addPixelsOriginalFileMapToBoth(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_addPixelsOriginalFileMapToBoth<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_addPixelsOriginalFileMapToBoth : public Callback_Pixels_addPixelsOriginalFileMapToBoth_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_addPixelsOriginalFileMapToBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_addPixelsOriginalFileMapToBothPtr
newCallback_Pixels_addPixelsOriginalFileMapToBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_addPixelsOriginalFileMapToBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_addPixelsOriginalFileMapToBothPtr
newCallback_Pixels_addPixelsOriginalFileMapToBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_addPixelsOriginalFileMapToBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_addPixelsOriginalFileMapToBothPtr
newCallback_Pixels_addPixelsOriginalFileMapToBoth(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_addPixelsOriginalFileMapToBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_addPixelsOriginalFileMapToBothPtr
newCallback_Pixels_addPixelsOriginalFileMapToBoth(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_addPixelsOriginalFileMapToBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_findPixelsOriginalFileMap : public Callback_Pixels_findPixelsOriginalFileMap_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::PixelsPixelsFileMapsSeq&);

    CallbackNC_Pixels_findPixelsOriginalFileMap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::PixelsPixelsFileMapsSeq __ret;
        try
        {
            __ret = __proxy->end_findPixelsOriginalFileMap(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Pixels_findPixelsOriginalFileMapPtr
newCallback_Pixels_findPixelsOriginalFileMap(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PixelsPixelsFileMapsSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_findPixelsOriginalFileMap<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_findPixelsOriginalFileMapPtr
newCallback_Pixels_findPixelsOriginalFileMap(T* instance, void (T::*cb)(const ::omero::model::PixelsPixelsFileMapsSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_findPixelsOriginalFileMap<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_findPixelsOriginalFileMap : public Callback_Pixels_findPixelsOriginalFileMap_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::PixelsPixelsFileMapsSeq&, const CT&);

    Callback_Pixels_findPixelsOriginalFileMap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::PixelsPixelsFileMapsSeq __ret;
        try
        {
            __ret = __proxy->end_findPixelsOriginalFileMap(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Pixels_findPixelsOriginalFileMapPtr
newCallback_Pixels_findPixelsOriginalFileMap(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PixelsPixelsFileMapsSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_findPixelsOriginalFileMap<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_findPixelsOriginalFileMapPtr
newCallback_Pixels_findPixelsOriginalFileMap(T* instance, void (T::*cb)(const ::omero::model::PixelsPixelsFileMapsSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_findPixelsOriginalFileMap<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_unlinkOriginalFile : public Callback_Pixels_unlinkOriginalFile_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_unlinkOriginalFile(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_unlinkOriginalFilePtr
newCallback_Pixels_unlinkOriginalFile(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_unlinkOriginalFile<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_unlinkOriginalFilePtr
newCallback_Pixels_unlinkOriginalFile(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_unlinkOriginalFile<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_unlinkOriginalFilePtr
newCallback_Pixels_unlinkOriginalFile(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_unlinkOriginalFile<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_unlinkOriginalFilePtr
newCallback_Pixels_unlinkOriginalFile(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_unlinkOriginalFile<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_unlinkOriginalFile : public Callback_Pixels_unlinkOriginalFile_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_unlinkOriginalFile(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_unlinkOriginalFilePtr
newCallback_Pixels_unlinkOriginalFile(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_unlinkOriginalFile<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_unlinkOriginalFilePtr
newCallback_Pixels_unlinkOriginalFile(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_unlinkOriginalFile<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_unlinkOriginalFilePtr
newCallback_Pixels_unlinkOriginalFile(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_unlinkOriginalFile<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_unlinkOriginalFilePtr
newCallback_Pixels_unlinkOriginalFile(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_unlinkOriginalFile<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_removePixelsOriginalFileMapFromBoth : public Callback_Pixels_removePixelsOriginalFileMapFromBoth_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_removePixelsOriginalFileMapFromBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_removePixelsOriginalFileMapFromBothPtr
newCallback_Pixels_removePixelsOriginalFileMapFromBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_removePixelsOriginalFileMapFromBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_removePixelsOriginalFileMapFromBothPtr
newCallback_Pixels_removePixelsOriginalFileMapFromBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_removePixelsOriginalFileMapFromBoth<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_removePixelsOriginalFileMapFromBothPtr
newCallback_Pixels_removePixelsOriginalFileMapFromBoth(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_removePixelsOriginalFileMapFromBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_removePixelsOriginalFileMapFromBothPtr
newCallback_Pixels_removePixelsOriginalFileMapFromBoth(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_removePixelsOriginalFileMapFromBoth<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_removePixelsOriginalFileMapFromBoth : public Callback_Pixels_removePixelsOriginalFileMapFromBoth_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_removePixelsOriginalFileMapFromBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_removePixelsOriginalFileMapFromBothPtr
newCallback_Pixels_removePixelsOriginalFileMapFromBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_removePixelsOriginalFileMapFromBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_removePixelsOriginalFileMapFromBothPtr
newCallback_Pixels_removePixelsOriginalFileMapFromBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_removePixelsOriginalFileMapFromBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_removePixelsOriginalFileMapFromBothPtr
newCallback_Pixels_removePixelsOriginalFileMapFromBoth(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_removePixelsOriginalFileMapFromBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_removePixelsOriginalFileMapFromBothPtr
newCallback_Pixels_removePixelsOriginalFileMapFromBoth(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_removePixelsOriginalFileMapFromBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_linkedOriginalFileList : public Callback_Pixels_linkedOriginalFileList_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::PixelsLinkedOriginalFileSeq&);

    CallbackNC_Pixels_linkedOriginalFileList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::PixelsLinkedOriginalFileSeq __ret;
        try
        {
            __ret = __proxy->end_linkedOriginalFileList(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Pixels_linkedOriginalFileListPtr
newCallback_Pixels_linkedOriginalFileList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PixelsLinkedOriginalFileSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_linkedOriginalFileList<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_linkedOriginalFileListPtr
newCallback_Pixels_linkedOriginalFileList(T* instance, void (T::*cb)(const ::omero::model::PixelsLinkedOriginalFileSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_linkedOriginalFileList<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_linkedOriginalFileList : public Callback_Pixels_linkedOriginalFileList_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::PixelsLinkedOriginalFileSeq&, const CT&);

    Callback_Pixels_linkedOriginalFileList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::PixelsLinkedOriginalFileSeq __ret;
        try
        {
            __ret = __proxy->end_linkedOriginalFileList(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Pixels_linkedOriginalFileListPtr
newCallback_Pixels_linkedOriginalFileList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PixelsLinkedOriginalFileSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_linkedOriginalFileList<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_linkedOriginalFileListPtr
newCallback_Pixels_linkedOriginalFileList(T* instance, void (T::*cb)(const ::omero::model::PixelsLinkedOriginalFileSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_linkedOriginalFileList<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_unloadChannels : public Callback_Pixels_unloadChannels_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_unloadChannels(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_unloadChannelsPtr
newCallback_Pixels_unloadChannels(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_unloadChannels<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_unloadChannelsPtr
newCallback_Pixels_unloadChannels(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_unloadChannels<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_unloadChannelsPtr
newCallback_Pixels_unloadChannels(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_unloadChannels<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_unloadChannelsPtr
newCallback_Pixels_unloadChannels(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_unloadChannels<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_unloadChannels : public Callback_Pixels_unloadChannels_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_unloadChannels(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_unloadChannelsPtr
newCallback_Pixels_unloadChannels(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_unloadChannels<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_unloadChannelsPtr
newCallback_Pixels_unloadChannels(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_unloadChannels<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_unloadChannelsPtr
newCallback_Pixels_unloadChannels(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_unloadChannels<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_unloadChannelsPtr
newCallback_Pixels_unloadChannels(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_unloadChannels<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_sizeOfChannels : public Callback_Pixels_sizeOfChannels_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Pixels_sizeOfChannels(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfChannels(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Pixels_sizeOfChannelsPtr
newCallback_Pixels_sizeOfChannels(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_sizeOfChannels<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_sizeOfChannelsPtr
newCallback_Pixels_sizeOfChannels(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_sizeOfChannels<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_sizeOfChannels : public Callback_Pixels_sizeOfChannels_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Pixels_sizeOfChannels(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfChannels(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Pixels_sizeOfChannelsPtr
newCallback_Pixels_sizeOfChannels(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_sizeOfChannels<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_sizeOfChannelsPtr
newCallback_Pixels_sizeOfChannels(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_sizeOfChannels<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_copyChannels : public Callback_Pixels_copyChannels_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::PixelsChannelsSeq&);

    CallbackNC_Pixels_copyChannels(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::PixelsChannelsSeq __ret;
        try
        {
            __ret = __proxy->end_copyChannels(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Pixels_copyChannelsPtr
newCallback_Pixels_copyChannels(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PixelsChannelsSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_copyChannels<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_copyChannelsPtr
newCallback_Pixels_copyChannels(T* instance, void (T::*cb)(const ::omero::model::PixelsChannelsSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_copyChannels<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_copyChannels : public Callback_Pixels_copyChannels_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::PixelsChannelsSeq&, const CT&);

    Callback_Pixels_copyChannels(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::PixelsChannelsSeq __ret;
        try
        {
            __ret = __proxy->end_copyChannels(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Pixels_copyChannelsPtr
newCallback_Pixels_copyChannels(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PixelsChannelsSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_copyChannels<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_copyChannelsPtr
newCallback_Pixels_copyChannels(T* instance, void (T::*cb)(const ::omero::model::PixelsChannelsSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_copyChannels<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_addChannel : public Callback_Pixels_addChannel_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_addChannel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_addChannelPtr
newCallback_Pixels_addChannel(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_addChannel<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_addChannelPtr
newCallback_Pixels_addChannel(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_addChannel<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_addChannelPtr
newCallback_Pixels_addChannel(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_addChannel<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_addChannelPtr
newCallback_Pixels_addChannel(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_addChannel<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_addChannel : public Callback_Pixels_addChannel_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_addChannel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_addChannelPtr
newCallback_Pixels_addChannel(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_addChannel<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_addChannelPtr
newCallback_Pixels_addChannel(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_addChannel<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_addChannelPtr
newCallback_Pixels_addChannel(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_addChannel<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_addChannelPtr
newCallback_Pixels_addChannel(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_addChannel<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_addAllChannelSet : public Callback_Pixels_addAllChannelSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_addAllChannelSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_addAllChannelSetPtr
newCallback_Pixels_addAllChannelSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_addAllChannelSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_addAllChannelSetPtr
newCallback_Pixels_addAllChannelSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_addAllChannelSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_addAllChannelSetPtr
newCallback_Pixels_addAllChannelSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_addAllChannelSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_addAllChannelSetPtr
newCallback_Pixels_addAllChannelSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_addAllChannelSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_addAllChannelSet : public Callback_Pixels_addAllChannelSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_addAllChannelSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_addAllChannelSetPtr
newCallback_Pixels_addAllChannelSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_addAllChannelSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_addAllChannelSetPtr
newCallback_Pixels_addAllChannelSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_addAllChannelSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_addAllChannelSetPtr
newCallback_Pixels_addAllChannelSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_addAllChannelSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_addAllChannelSetPtr
newCallback_Pixels_addAllChannelSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_addAllChannelSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_removeChannel : public Callback_Pixels_removeChannel_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_removeChannel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_removeChannelPtr
newCallback_Pixels_removeChannel(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_removeChannel<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_removeChannelPtr
newCallback_Pixels_removeChannel(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_removeChannel<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_removeChannelPtr
newCallback_Pixels_removeChannel(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_removeChannel<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_removeChannelPtr
newCallback_Pixels_removeChannel(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_removeChannel<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_removeChannel : public Callback_Pixels_removeChannel_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_removeChannel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_removeChannelPtr
newCallback_Pixels_removeChannel(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_removeChannel<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_removeChannelPtr
newCallback_Pixels_removeChannel(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_removeChannel<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_removeChannelPtr
newCallback_Pixels_removeChannel(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_removeChannel<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_removeChannelPtr
newCallback_Pixels_removeChannel(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_removeChannel<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_removeAllChannelSet : public Callback_Pixels_removeAllChannelSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_removeAllChannelSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_removeAllChannelSetPtr
newCallback_Pixels_removeAllChannelSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_removeAllChannelSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_removeAllChannelSetPtr
newCallback_Pixels_removeAllChannelSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_removeAllChannelSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_removeAllChannelSetPtr
newCallback_Pixels_removeAllChannelSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_removeAllChannelSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_removeAllChannelSetPtr
newCallback_Pixels_removeAllChannelSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_removeAllChannelSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_removeAllChannelSet : public Callback_Pixels_removeAllChannelSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_removeAllChannelSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_removeAllChannelSetPtr
newCallback_Pixels_removeAllChannelSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_removeAllChannelSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_removeAllChannelSetPtr
newCallback_Pixels_removeAllChannelSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_removeAllChannelSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_removeAllChannelSetPtr
newCallback_Pixels_removeAllChannelSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_removeAllChannelSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_removeAllChannelSetPtr
newCallback_Pixels_removeAllChannelSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_removeAllChannelSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_clearChannels : public Callback_Pixels_clearChannels_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_clearChannels(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_clearChannelsPtr
newCallback_Pixels_clearChannels(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_clearChannels<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_clearChannelsPtr
newCallback_Pixels_clearChannels(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_clearChannels<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_clearChannelsPtr
newCallback_Pixels_clearChannels(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_clearChannels<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_clearChannelsPtr
newCallback_Pixels_clearChannels(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_clearChannels<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_clearChannels : public Callback_Pixels_clearChannels_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_clearChannels(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_clearChannelsPtr
newCallback_Pixels_clearChannels(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_clearChannels<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_clearChannelsPtr
newCallback_Pixels_clearChannels(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_clearChannels<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_clearChannelsPtr
newCallback_Pixels_clearChannels(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_clearChannels<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_clearChannelsPtr
newCallback_Pixels_clearChannels(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_clearChannels<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_reloadChannels : public Callback_Pixels_reloadChannels_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_reloadChannels(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_reloadChannelsPtr
newCallback_Pixels_reloadChannels(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_reloadChannels<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_reloadChannelsPtr
newCallback_Pixels_reloadChannels(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_reloadChannels<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_reloadChannelsPtr
newCallback_Pixels_reloadChannels(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_reloadChannels<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_reloadChannelsPtr
newCallback_Pixels_reloadChannels(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_reloadChannels<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_reloadChannels : public Callback_Pixels_reloadChannels_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_reloadChannels(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_reloadChannelsPtr
newCallback_Pixels_reloadChannels(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_reloadChannels<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_reloadChannelsPtr
newCallback_Pixels_reloadChannels(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_reloadChannels<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_reloadChannelsPtr
newCallback_Pixels_reloadChannels(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_reloadChannels<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_reloadChannelsPtr
newCallback_Pixels_reloadChannels(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_reloadChannels<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_getChannel : public Callback_Pixels_getChannel_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::ChannelPtr&);

    CallbackNC_Pixels_getChannel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ChannelPtr __ret;
        try
        {
            __ret = __proxy->end_getChannel(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Pixels_getChannelPtr
newCallback_Pixels_getChannel(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ChannelPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_getChannel<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_getChannelPtr
newCallback_Pixels_getChannel(T* instance, void (T::*cb)(const ::omero::model::ChannelPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_getChannel<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_getChannel : public Callback_Pixels_getChannel_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::ChannelPtr&, const CT&);

    Callback_Pixels_getChannel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ChannelPtr __ret;
        try
        {
            __ret = __proxy->end_getChannel(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Pixels_getChannelPtr
newCallback_Pixels_getChannel(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ChannelPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_getChannel<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_getChannelPtr
newCallback_Pixels_getChannel(T* instance, void (T::*cb)(const ::omero::model::ChannelPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_getChannel<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_setChannel : public Callback_Pixels_setChannel_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::ChannelPtr&);

    CallbackNC_Pixels_setChannel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ChannelPtr __ret;
        try
        {
            __ret = __proxy->end_setChannel(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Pixels_setChannelPtr
newCallback_Pixels_setChannel(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ChannelPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setChannel<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_setChannelPtr
newCallback_Pixels_setChannel(T* instance, void (T::*cb)(const ::omero::model::ChannelPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setChannel<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_setChannel : public Callback_Pixels_setChannel_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::ChannelPtr&, const CT&);

    Callback_Pixels_setChannel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ChannelPtr __ret;
        try
        {
            __ret = __proxy->end_setChannel(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Pixels_setChannelPtr
newCallback_Pixels_setChannel(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ChannelPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setChannel<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_setChannelPtr
newCallback_Pixels_setChannel(T* instance, void (T::*cb)(const ::omero::model::ChannelPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setChannel<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_getPrimaryChannel : public Callback_Pixels_getPrimaryChannel_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::ChannelPtr&);

    CallbackNC_Pixels_getPrimaryChannel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ChannelPtr __ret;
        try
        {
            __ret = __proxy->end_getPrimaryChannel(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Pixels_getPrimaryChannelPtr
newCallback_Pixels_getPrimaryChannel(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ChannelPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_getPrimaryChannel<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_getPrimaryChannelPtr
newCallback_Pixels_getPrimaryChannel(T* instance, void (T::*cb)(const ::omero::model::ChannelPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_getPrimaryChannel<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_getPrimaryChannel : public Callback_Pixels_getPrimaryChannel_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::ChannelPtr&, const CT&);

    Callback_Pixels_getPrimaryChannel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ChannelPtr __ret;
        try
        {
            __ret = __proxy->end_getPrimaryChannel(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Pixels_getPrimaryChannelPtr
newCallback_Pixels_getPrimaryChannel(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ChannelPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_getPrimaryChannel<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_getPrimaryChannelPtr
newCallback_Pixels_getPrimaryChannel(T* instance, void (T::*cb)(const ::omero::model::ChannelPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_getPrimaryChannel<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_setPrimaryChannel : public Callback_Pixels_setPrimaryChannel_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::ChannelPtr&);

    CallbackNC_Pixels_setPrimaryChannel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ChannelPtr __ret;
        try
        {
            __ret = __proxy->end_setPrimaryChannel(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Pixels_setPrimaryChannelPtr
newCallback_Pixels_setPrimaryChannel(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ChannelPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setPrimaryChannel<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_setPrimaryChannelPtr
newCallback_Pixels_setPrimaryChannel(T* instance, void (T::*cb)(const ::omero::model::ChannelPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_setPrimaryChannel<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_setPrimaryChannel : public Callback_Pixels_setPrimaryChannel_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::ChannelPtr&, const CT&);

    Callback_Pixels_setPrimaryChannel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ChannelPtr __ret;
        try
        {
            __ret = __proxy->end_setPrimaryChannel(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Pixels_setPrimaryChannelPtr
newCallback_Pixels_setPrimaryChannel(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ChannelPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setPrimaryChannel<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_setPrimaryChannelPtr
newCallback_Pixels_setPrimaryChannel(T* instance, void (T::*cb)(const ::omero::model::ChannelPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_setPrimaryChannel<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_unloadSettings : public Callback_Pixels_unloadSettings_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_unloadSettings(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_unloadSettingsPtr
newCallback_Pixels_unloadSettings(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_unloadSettings<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_unloadSettingsPtr
newCallback_Pixels_unloadSettings(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_unloadSettings<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_unloadSettingsPtr
newCallback_Pixels_unloadSettings(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_unloadSettings<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_unloadSettingsPtr
newCallback_Pixels_unloadSettings(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_unloadSettings<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_unloadSettings : public Callback_Pixels_unloadSettings_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_unloadSettings(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_unloadSettingsPtr
newCallback_Pixels_unloadSettings(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_unloadSettings<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_unloadSettingsPtr
newCallback_Pixels_unloadSettings(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_unloadSettings<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_unloadSettingsPtr
newCallback_Pixels_unloadSettings(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_unloadSettings<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_unloadSettingsPtr
newCallback_Pixels_unloadSettings(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_unloadSettings<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_sizeOfSettings : public Callback_Pixels_sizeOfSettings_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Pixels_sizeOfSettings(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfSettings(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Pixels_sizeOfSettingsPtr
newCallback_Pixels_sizeOfSettings(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_sizeOfSettings<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_sizeOfSettingsPtr
newCallback_Pixels_sizeOfSettings(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_sizeOfSettings<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_sizeOfSettings : public Callback_Pixels_sizeOfSettings_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Pixels_sizeOfSettings(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfSettings(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Pixels_sizeOfSettingsPtr
newCallback_Pixels_sizeOfSettings(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_sizeOfSettings<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_sizeOfSettingsPtr
newCallback_Pixels_sizeOfSettings(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_sizeOfSettings<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_copySettings : public Callback_Pixels_copySettings_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::PixelsSettingsSeq&);

    CallbackNC_Pixels_copySettings(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::PixelsSettingsSeq __ret;
        try
        {
            __ret = __proxy->end_copySettings(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Pixels_copySettingsPtr
newCallback_Pixels_copySettings(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PixelsSettingsSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_copySettings<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_copySettingsPtr
newCallback_Pixels_copySettings(T* instance, void (T::*cb)(const ::omero::model::PixelsSettingsSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_copySettings<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_copySettings : public Callback_Pixels_copySettings_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::PixelsSettingsSeq&, const CT&);

    Callback_Pixels_copySettings(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::PixelsSettingsSeq __ret;
        try
        {
            __ret = __proxy->end_copySettings(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Pixels_copySettingsPtr
newCallback_Pixels_copySettings(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PixelsSettingsSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_copySettings<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_copySettingsPtr
newCallback_Pixels_copySettings(T* instance, void (T::*cb)(const ::omero::model::PixelsSettingsSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_copySettings<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_addRenderingDef : public Callback_Pixels_addRenderingDef_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_addRenderingDef(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_addRenderingDefPtr
newCallback_Pixels_addRenderingDef(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_addRenderingDef<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_addRenderingDefPtr
newCallback_Pixels_addRenderingDef(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_addRenderingDef<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_addRenderingDefPtr
newCallback_Pixels_addRenderingDef(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_addRenderingDef<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_addRenderingDefPtr
newCallback_Pixels_addRenderingDef(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_addRenderingDef<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_addRenderingDef : public Callback_Pixels_addRenderingDef_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_addRenderingDef(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_addRenderingDefPtr
newCallback_Pixels_addRenderingDef(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_addRenderingDef<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_addRenderingDefPtr
newCallback_Pixels_addRenderingDef(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_addRenderingDef<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_addRenderingDefPtr
newCallback_Pixels_addRenderingDef(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_addRenderingDef<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_addRenderingDefPtr
newCallback_Pixels_addRenderingDef(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_addRenderingDef<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_addAllRenderingDefSet : public Callback_Pixels_addAllRenderingDefSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_addAllRenderingDefSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_addAllRenderingDefSetPtr
newCallback_Pixels_addAllRenderingDefSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_addAllRenderingDefSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_addAllRenderingDefSetPtr
newCallback_Pixels_addAllRenderingDefSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_addAllRenderingDefSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_addAllRenderingDefSetPtr
newCallback_Pixels_addAllRenderingDefSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_addAllRenderingDefSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_addAllRenderingDefSetPtr
newCallback_Pixels_addAllRenderingDefSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_addAllRenderingDefSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_addAllRenderingDefSet : public Callback_Pixels_addAllRenderingDefSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_addAllRenderingDefSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_addAllRenderingDefSetPtr
newCallback_Pixels_addAllRenderingDefSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_addAllRenderingDefSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_addAllRenderingDefSetPtr
newCallback_Pixels_addAllRenderingDefSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_addAllRenderingDefSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_addAllRenderingDefSetPtr
newCallback_Pixels_addAllRenderingDefSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_addAllRenderingDefSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_addAllRenderingDefSetPtr
newCallback_Pixels_addAllRenderingDefSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_addAllRenderingDefSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_removeRenderingDef : public Callback_Pixels_removeRenderingDef_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_removeRenderingDef(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_removeRenderingDefPtr
newCallback_Pixels_removeRenderingDef(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_removeRenderingDef<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_removeRenderingDefPtr
newCallback_Pixels_removeRenderingDef(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_removeRenderingDef<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_removeRenderingDefPtr
newCallback_Pixels_removeRenderingDef(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_removeRenderingDef<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_removeRenderingDefPtr
newCallback_Pixels_removeRenderingDef(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_removeRenderingDef<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_removeRenderingDef : public Callback_Pixels_removeRenderingDef_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_removeRenderingDef(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_removeRenderingDefPtr
newCallback_Pixels_removeRenderingDef(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_removeRenderingDef<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_removeRenderingDefPtr
newCallback_Pixels_removeRenderingDef(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_removeRenderingDef<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_removeRenderingDefPtr
newCallback_Pixels_removeRenderingDef(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_removeRenderingDef<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_removeRenderingDefPtr
newCallback_Pixels_removeRenderingDef(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_removeRenderingDef<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_removeAllRenderingDefSet : public Callback_Pixels_removeAllRenderingDefSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_removeAllRenderingDefSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_removeAllRenderingDefSetPtr
newCallback_Pixels_removeAllRenderingDefSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_removeAllRenderingDefSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_removeAllRenderingDefSetPtr
newCallback_Pixels_removeAllRenderingDefSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_removeAllRenderingDefSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_removeAllRenderingDefSetPtr
newCallback_Pixels_removeAllRenderingDefSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_removeAllRenderingDefSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_removeAllRenderingDefSetPtr
newCallback_Pixels_removeAllRenderingDefSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_removeAllRenderingDefSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_removeAllRenderingDefSet : public Callback_Pixels_removeAllRenderingDefSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_removeAllRenderingDefSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_removeAllRenderingDefSetPtr
newCallback_Pixels_removeAllRenderingDefSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_removeAllRenderingDefSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_removeAllRenderingDefSetPtr
newCallback_Pixels_removeAllRenderingDefSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_removeAllRenderingDefSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_removeAllRenderingDefSetPtr
newCallback_Pixels_removeAllRenderingDefSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_removeAllRenderingDefSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_removeAllRenderingDefSetPtr
newCallback_Pixels_removeAllRenderingDefSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_removeAllRenderingDefSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_clearSettings : public Callback_Pixels_clearSettings_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_clearSettings(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_clearSettingsPtr
newCallback_Pixels_clearSettings(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_clearSettings<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_clearSettingsPtr
newCallback_Pixels_clearSettings(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_clearSettings<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_clearSettingsPtr
newCallback_Pixels_clearSettings(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_clearSettings<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_clearSettingsPtr
newCallback_Pixels_clearSettings(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_clearSettings<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_clearSettings : public Callback_Pixels_clearSettings_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_clearSettings(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_clearSettingsPtr
newCallback_Pixels_clearSettings(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_clearSettings<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_clearSettingsPtr
newCallback_Pixels_clearSettings(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_clearSettings<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_clearSettingsPtr
newCallback_Pixels_clearSettings(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_clearSettings<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_clearSettingsPtr
newCallback_Pixels_clearSettings(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_clearSettings<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_reloadSettings : public Callback_Pixels_reloadSettings_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_reloadSettings(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_reloadSettingsPtr
newCallback_Pixels_reloadSettings(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_reloadSettings<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_reloadSettingsPtr
newCallback_Pixels_reloadSettings(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_reloadSettings<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_reloadSettingsPtr
newCallback_Pixels_reloadSettings(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_reloadSettings<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_reloadSettingsPtr
newCallback_Pixels_reloadSettings(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_reloadSettings<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_reloadSettings : public Callback_Pixels_reloadSettings_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_reloadSettings(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_reloadSettingsPtr
newCallback_Pixels_reloadSettings(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_reloadSettings<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_reloadSettingsPtr
newCallback_Pixels_reloadSettings(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_reloadSettings<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_reloadSettingsPtr
newCallback_Pixels_reloadSettings(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_reloadSettings<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_reloadSettingsPtr
newCallback_Pixels_reloadSettings(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_reloadSettings<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_unloadThumbnails : public Callback_Pixels_unloadThumbnails_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_unloadThumbnails(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_unloadThumbnailsPtr
newCallback_Pixels_unloadThumbnails(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_unloadThumbnails<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_unloadThumbnailsPtr
newCallback_Pixels_unloadThumbnails(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_unloadThumbnails<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_unloadThumbnailsPtr
newCallback_Pixels_unloadThumbnails(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_unloadThumbnails<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_unloadThumbnailsPtr
newCallback_Pixels_unloadThumbnails(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_unloadThumbnails<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_unloadThumbnails : public Callback_Pixels_unloadThumbnails_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_unloadThumbnails(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_unloadThumbnailsPtr
newCallback_Pixels_unloadThumbnails(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_unloadThumbnails<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_unloadThumbnailsPtr
newCallback_Pixels_unloadThumbnails(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_unloadThumbnails<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_unloadThumbnailsPtr
newCallback_Pixels_unloadThumbnails(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_unloadThumbnails<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_unloadThumbnailsPtr
newCallback_Pixels_unloadThumbnails(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_unloadThumbnails<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_sizeOfThumbnails : public Callback_Pixels_sizeOfThumbnails_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Pixels_sizeOfThumbnails(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfThumbnails(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Pixels_sizeOfThumbnailsPtr
newCallback_Pixels_sizeOfThumbnails(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_sizeOfThumbnails<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_sizeOfThumbnailsPtr
newCallback_Pixels_sizeOfThumbnails(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_sizeOfThumbnails<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_sizeOfThumbnails : public Callback_Pixels_sizeOfThumbnails_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Pixels_sizeOfThumbnails(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfThumbnails(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Pixels_sizeOfThumbnailsPtr
newCallback_Pixels_sizeOfThumbnails(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_sizeOfThumbnails<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_sizeOfThumbnailsPtr
newCallback_Pixels_sizeOfThumbnails(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_sizeOfThumbnails<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_copyThumbnails : public Callback_Pixels_copyThumbnails_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::PixelsThumbnailsSeq&);

    CallbackNC_Pixels_copyThumbnails(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::PixelsThumbnailsSeq __ret;
        try
        {
            __ret = __proxy->end_copyThumbnails(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Pixels_copyThumbnailsPtr
newCallback_Pixels_copyThumbnails(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PixelsThumbnailsSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_copyThumbnails<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_copyThumbnailsPtr
newCallback_Pixels_copyThumbnails(T* instance, void (T::*cb)(const ::omero::model::PixelsThumbnailsSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_copyThumbnails<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_copyThumbnails : public Callback_Pixels_copyThumbnails_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::PixelsThumbnailsSeq&, const CT&);

    Callback_Pixels_copyThumbnails(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::PixelsThumbnailsSeq __ret;
        try
        {
            __ret = __proxy->end_copyThumbnails(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Pixels_copyThumbnailsPtr
newCallback_Pixels_copyThumbnails(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PixelsThumbnailsSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_copyThumbnails<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_copyThumbnailsPtr
newCallback_Pixels_copyThumbnails(T* instance, void (T::*cb)(const ::omero::model::PixelsThumbnailsSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_copyThumbnails<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_addThumbnail : public Callback_Pixels_addThumbnail_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_addThumbnail(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_addThumbnailPtr
newCallback_Pixels_addThumbnail(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_addThumbnail<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_addThumbnailPtr
newCallback_Pixels_addThumbnail(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_addThumbnail<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_addThumbnailPtr
newCallback_Pixels_addThumbnail(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_addThumbnail<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_addThumbnailPtr
newCallback_Pixels_addThumbnail(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_addThumbnail<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_addThumbnail : public Callback_Pixels_addThumbnail_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_addThumbnail(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_addThumbnailPtr
newCallback_Pixels_addThumbnail(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_addThumbnail<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_addThumbnailPtr
newCallback_Pixels_addThumbnail(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_addThumbnail<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_addThumbnailPtr
newCallback_Pixels_addThumbnail(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_addThumbnail<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_addThumbnailPtr
newCallback_Pixels_addThumbnail(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_addThumbnail<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_addAllThumbnailSet : public Callback_Pixels_addAllThumbnailSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_addAllThumbnailSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_addAllThumbnailSetPtr
newCallback_Pixels_addAllThumbnailSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_addAllThumbnailSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_addAllThumbnailSetPtr
newCallback_Pixels_addAllThumbnailSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_addAllThumbnailSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_addAllThumbnailSetPtr
newCallback_Pixels_addAllThumbnailSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_addAllThumbnailSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_addAllThumbnailSetPtr
newCallback_Pixels_addAllThumbnailSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_addAllThumbnailSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_addAllThumbnailSet : public Callback_Pixels_addAllThumbnailSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_addAllThumbnailSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_addAllThumbnailSetPtr
newCallback_Pixels_addAllThumbnailSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_addAllThumbnailSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_addAllThumbnailSetPtr
newCallback_Pixels_addAllThumbnailSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_addAllThumbnailSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_addAllThumbnailSetPtr
newCallback_Pixels_addAllThumbnailSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_addAllThumbnailSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_addAllThumbnailSetPtr
newCallback_Pixels_addAllThumbnailSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_addAllThumbnailSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_removeThumbnail : public Callback_Pixels_removeThumbnail_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_removeThumbnail(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_removeThumbnailPtr
newCallback_Pixels_removeThumbnail(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_removeThumbnail<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_removeThumbnailPtr
newCallback_Pixels_removeThumbnail(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_removeThumbnail<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_removeThumbnailPtr
newCallback_Pixels_removeThumbnail(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_removeThumbnail<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_removeThumbnailPtr
newCallback_Pixels_removeThumbnail(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_removeThumbnail<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_removeThumbnail : public Callback_Pixels_removeThumbnail_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_removeThumbnail(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_removeThumbnailPtr
newCallback_Pixels_removeThumbnail(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_removeThumbnail<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_removeThumbnailPtr
newCallback_Pixels_removeThumbnail(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_removeThumbnail<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_removeThumbnailPtr
newCallback_Pixels_removeThumbnail(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_removeThumbnail<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_removeThumbnailPtr
newCallback_Pixels_removeThumbnail(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_removeThumbnail<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_removeAllThumbnailSet : public Callback_Pixels_removeAllThumbnailSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_removeAllThumbnailSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_removeAllThumbnailSetPtr
newCallback_Pixels_removeAllThumbnailSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_removeAllThumbnailSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_removeAllThumbnailSetPtr
newCallback_Pixels_removeAllThumbnailSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_removeAllThumbnailSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_removeAllThumbnailSetPtr
newCallback_Pixels_removeAllThumbnailSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_removeAllThumbnailSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_removeAllThumbnailSetPtr
newCallback_Pixels_removeAllThumbnailSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_removeAllThumbnailSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_removeAllThumbnailSet : public Callback_Pixels_removeAllThumbnailSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_removeAllThumbnailSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_removeAllThumbnailSetPtr
newCallback_Pixels_removeAllThumbnailSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_removeAllThumbnailSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_removeAllThumbnailSetPtr
newCallback_Pixels_removeAllThumbnailSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_removeAllThumbnailSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_removeAllThumbnailSetPtr
newCallback_Pixels_removeAllThumbnailSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_removeAllThumbnailSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_removeAllThumbnailSetPtr
newCallback_Pixels_removeAllThumbnailSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_removeAllThumbnailSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_clearThumbnails : public Callback_Pixels_clearThumbnails_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_clearThumbnails(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_clearThumbnailsPtr
newCallback_Pixels_clearThumbnails(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_clearThumbnails<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_clearThumbnailsPtr
newCallback_Pixels_clearThumbnails(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_clearThumbnails<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_clearThumbnailsPtr
newCallback_Pixels_clearThumbnails(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_clearThumbnails<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_clearThumbnailsPtr
newCallback_Pixels_clearThumbnails(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_clearThumbnails<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_clearThumbnails : public Callback_Pixels_clearThumbnails_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_clearThumbnails(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_clearThumbnailsPtr
newCallback_Pixels_clearThumbnails(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_clearThumbnails<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_clearThumbnailsPtr
newCallback_Pixels_clearThumbnails(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_clearThumbnails<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_clearThumbnailsPtr
newCallback_Pixels_clearThumbnails(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_clearThumbnails<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_clearThumbnailsPtr
newCallback_Pixels_clearThumbnails(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_clearThumbnails<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_reloadThumbnails : public Callback_Pixels_reloadThumbnails_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_reloadThumbnails(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_reloadThumbnailsPtr
newCallback_Pixels_reloadThumbnails(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_reloadThumbnails<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_reloadThumbnailsPtr
newCallback_Pixels_reloadThumbnails(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_reloadThumbnails<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_reloadThumbnailsPtr
newCallback_Pixels_reloadThumbnails(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_reloadThumbnails<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_reloadThumbnailsPtr
newCallback_Pixels_reloadThumbnails(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_reloadThumbnails<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_reloadThumbnails : public Callback_Pixels_reloadThumbnails_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_reloadThumbnails(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_reloadThumbnailsPtr
newCallback_Pixels_reloadThumbnails(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_reloadThumbnails<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_reloadThumbnailsPtr
newCallback_Pixels_reloadThumbnails(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_reloadThumbnails<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_reloadThumbnailsPtr
newCallback_Pixels_reloadThumbnails(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_reloadThumbnails<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_reloadThumbnailsPtr
newCallback_Pixels_reloadThumbnails(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_reloadThumbnails<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_unloadAnnotationLinks : public Callback_Pixels_unloadAnnotationLinks_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_unloadAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_unloadAnnotationLinksPtr
newCallback_Pixels_unloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_unloadAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_unloadAnnotationLinksPtr
newCallback_Pixels_unloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_unloadAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_unloadAnnotationLinksPtr
newCallback_Pixels_unloadAnnotationLinks(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_unloadAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_unloadAnnotationLinksPtr
newCallback_Pixels_unloadAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_unloadAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_unloadAnnotationLinks : public Callback_Pixels_unloadAnnotationLinks_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_unloadAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_unloadAnnotationLinksPtr
newCallback_Pixels_unloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_unloadAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_unloadAnnotationLinksPtr
newCallback_Pixels_unloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_unloadAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_unloadAnnotationLinksPtr
newCallback_Pixels_unloadAnnotationLinks(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_unloadAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_unloadAnnotationLinksPtr
newCallback_Pixels_unloadAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_unloadAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_sizeOfAnnotationLinks : public Callback_Pixels_sizeOfAnnotationLinks_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Pixels_sizeOfAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfAnnotationLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Pixels_sizeOfAnnotationLinksPtr
newCallback_Pixels_sizeOfAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_sizeOfAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_sizeOfAnnotationLinksPtr
newCallback_Pixels_sizeOfAnnotationLinks(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_sizeOfAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_sizeOfAnnotationLinks : public Callback_Pixels_sizeOfAnnotationLinks_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Pixels_sizeOfAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfAnnotationLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Pixels_sizeOfAnnotationLinksPtr
newCallback_Pixels_sizeOfAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_sizeOfAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_sizeOfAnnotationLinksPtr
newCallback_Pixels_sizeOfAnnotationLinks(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_sizeOfAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_copyAnnotationLinks : public Callback_Pixels_copyAnnotationLinks_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::PixelsAnnotationLinksSeq&);

    CallbackNC_Pixels_copyAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::PixelsAnnotationLinksSeq __ret;
        try
        {
            __ret = __proxy->end_copyAnnotationLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Pixels_copyAnnotationLinksPtr
newCallback_Pixels_copyAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PixelsAnnotationLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_copyAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_copyAnnotationLinksPtr
newCallback_Pixels_copyAnnotationLinks(T* instance, void (T::*cb)(const ::omero::model::PixelsAnnotationLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_copyAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_copyAnnotationLinks : public Callback_Pixels_copyAnnotationLinks_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::PixelsAnnotationLinksSeq&, const CT&);

    Callback_Pixels_copyAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::PixelsAnnotationLinksSeq __ret;
        try
        {
            __ret = __proxy->end_copyAnnotationLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Pixels_copyAnnotationLinksPtr
newCallback_Pixels_copyAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PixelsAnnotationLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_copyAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_copyAnnotationLinksPtr
newCallback_Pixels_copyAnnotationLinks(T* instance, void (T::*cb)(const ::omero::model::PixelsAnnotationLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_copyAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_addPixelsAnnotationLink : public Callback_Pixels_addPixelsAnnotationLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_addPixelsAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_addPixelsAnnotationLinkPtr
newCallback_Pixels_addPixelsAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_addPixelsAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_addPixelsAnnotationLinkPtr
newCallback_Pixels_addPixelsAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_addPixelsAnnotationLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_addPixelsAnnotationLinkPtr
newCallback_Pixels_addPixelsAnnotationLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_addPixelsAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_addPixelsAnnotationLinkPtr
newCallback_Pixels_addPixelsAnnotationLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_addPixelsAnnotationLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_addPixelsAnnotationLink : public Callback_Pixels_addPixelsAnnotationLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_addPixelsAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_addPixelsAnnotationLinkPtr
newCallback_Pixels_addPixelsAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_addPixelsAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_addPixelsAnnotationLinkPtr
newCallback_Pixels_addPixelsAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_addPixelsAnnotationLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_addPixelsAnnotationLinkPtr
newCallback_Pixels_addPixelsAnnotationLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_addPixelsAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_addPixelsAnnotationLinkPtr
newCallback_Pixels_addPixelsAnnotationLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_addPixelsAnnotationLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_addAllPixelsAnnotationLinkSet : public Callback_Pixels_addAllPixelsAnnotationLinkSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_addAllPixelsAnnotationLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_addAllPixelsAnnotationLinkSetPtr
newCallback_Pixels_addAllPixelsAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_addAllPixelsAnnotationLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_addAllPixelsAnnotationLinkSetPtr
newCallback_Pixels_addAllPixelsAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_addAllPixelsAnnotationLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_addAllPixelsAnnotationLinkSetPtr
newCallback_Pixels_addAllPixelsAnnotationLinkSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_addAllPixelsAnnotationLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_addAllPixelsAnnotationLinkSetPtr
newCallback_Pixels_addAllPixelsAnnotationLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_addAllPixelsAnnotationLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_addAllPixelsAnnotationLinkSet : public Callback_Pixels_addAllPixelsAnnotationLinkSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_addAllPixelsAnnotationLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_addAllPixelsAnnotationLinkSetPtr
newCallback_Pixels_addAllPixelsAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_addAllPixelsAnnotationLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_addAllPixelsAnnotationLinkSetPtr
newCallback_Pixels_addAllPixelsAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_addAllPixelsAnnotationLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_addAllPixelsAnnotationLinkSetPtr
newCallback_Pixels_addAllPixelsAnnotationLinkSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_addAllPixelsAnnotationLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_addAllPixelsAnnotationLinkSetPtr
newCallback_Pixels_addAllPixelsAnnotationLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_addAllPixelsAnnotationLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_removePixelsAnnotationLink : public Callback_Pixels_removePixelsAnnotationLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_removePixelsAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_removePixelsAnnotationLinkPtr
newCallback_Pixels_removePixelsAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_removePixelsAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_removePixelsAnnotationLinkPtr
newCallback_Pixels_removePixelsAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_removePixelsAnnotationLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_removePixelsAnnotationLinkPtr
newCallback_Pixels_removePixelsAnnotationLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_removePixelsAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_removePixelsAnnotationLinkPtr
newCallback_Pixels_removePixelsAnnotationLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_removePixelsAnnotationLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_removePixelsAnnotationLink : public Callback_Pixels_removePixelsAnnotationLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_removePixelsAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_removePixelsAnnotationLinkPtr
newCallback_Pixels_removePixelsAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_removePixelsAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_removePixelsAnnotationLinkPtr
newCallback_Pixels_removePixelsAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_removePixelsAnnotationLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_removePixelsAnnotationLinkPtr
newCallback_Pixels_removePixelsAnnotationLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_removePixelsAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_removePixelsAnnotationLinkPtr
newCallback_Pixels_removePixelsAnnotationLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_removePixelsAnnotationLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_removeAllPixelsAnnotationLinkSet : public Callback_Pixels_removeAllPixelsAnnotationLinkSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_removeAllPixelsAnnotationLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_removeAllPixelsAnnotationLinkSetPtr
newCallback_Pixels_removeAllPixelsAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_removeAllPixelsAnnotationLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_removeAllPixelsAnnotationLinkSetPtr
newCallback_Pixels_removeAllPixelsAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_removeAllPixelsAnnotationLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_removeAllPixelsAnnotationLinkSetPtr
newCallback_Pixels_removeAllPixelsAnnotationLinkSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_removeAllPixelsAnnotationLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_removeAllPixelsAnnotationLinkSetPtr
newCallback_Pixels_removeAllPixelsAnnotationLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_removeAllPixelsAnnotationLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_removeAllPixelsAnnotationLinkSet : public Callback_Pixels_removeAllPixelsAnnotationLinkSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_removeAllPixelsAnnotationLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_removeAllPixelsAnnotationLinkSetPtr
newCallback_Pixels_removeAllPixelsAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_removeAllPixelsAnnotationLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_removeAllPixelsAnnotationLinkSetPtr
newCallback_Pixels_removeAllPixelsAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_removeAllPixelsAnnotationLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_removeAllPixelsAnnotationLinkSetPtr
newCallback_Pixels_removeAllPixelsAnnotationLinkSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_removeAllPixelsAnnotationLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_removeAllPixelsAnnotationLinkSetPtr
newCallback_Pixels_removeAllPixelsAnnotationLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_removeAllPixelsAnnotationLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_clearAnnotationLinks : public Callback_Pixels_clearAnnotationLinks_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_clearAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_clearAnnotationLinksPtr
newCallback_Pixels_clearAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_clearAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_clearAnnotationLinksPtr
newCallback_Pixels_clearAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_clearAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_clearAnnotationLinksPtr
newCallback_Pixels_clearAnnotationLinks(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_clearAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_clearAnnotationLinksPtr
newCallback_Pixels_clearAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_clearAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_clearAnnotationLinks : public Callback_Pixels_clearAnnotationLinks_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_clearAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_clearAnnotationLinksPtr
newCallback_Pixels_clearAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_clearAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_clearAnnotationLinksPtr
newCallback_Pixels_clearAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_clearAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_clearAnnotationLinksPtr
newCallback_Pixels_clearAnnotationLinks(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_clearAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_clearAnnotationLinksPtr
newCallback_Pixels_clearAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_clearAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_reloadAnnotationLinks : public Callback_Pixels_reloadAnnotationLinks_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_reloadAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_reloadAnnotationLinksPtr
newCallback_Pixels_reloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_reloadAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_reloadAnnotationLinksPtr
newCallback_Pixels_reloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_reloadAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_reloadAnnotationLinksPtr
newCallback_Pixels_reloadAnnotationLinks(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_reloadAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_reloadAnnotationLinksPtr
newCallback_Pixels_reloadAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_reloadAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_reloadAnnotationLinks : public Callback_Pixels_reloadAnnotationLinks_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_reloadAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_reloadAnnotationLinksPtr
newCallback_Pixels_reloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_reloadAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_reloadAnnotationLinksPtr
newCallback_Pixels_reloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_reloadAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_reloadAnnotationLinksPtr
newCallback_Pixels_reloadAnnotationLinks(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_reloadAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_reloadAnnotationLinksPtr
newCallback_Pixels_reloadAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_reloadAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_getAnnotationLinksCountPerOwner : public Callback_Pixels_getAnnotationLinksCountPerOwner_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::sys::CountMap&);

    CallbackNC_Pixels_getAnnotationLinksCountPerOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::sys::CountMap __ret;
        try
        {
            __ret = __proxy->end_getAnnotationLinksCountPerOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Pixels_getAnnotationLinksCountPerOwnerPtr
newCallback_Pixels_getAnnotationLinksCountPerOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::CountMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_getAnnotationLinksCountPerOwner<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_getAnnotationLinksCountPerOwnerPtr
newCallback_Pixels_getAnnotationLinksCountPerOwner(T* instance, void (T::*cb)(const ::omero::sys::CountMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_getAnnotationLinksCountPerOwner<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_getAnnotationLinksCountPerOwner : public Callback_Pixels_getAnnotationLinksCountPerOwner_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::sys::CountMap&, const CT&);

    Callback_Pixels_getAnnotationLinksCountPerOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::sys::CountMap __ret;
        try
        {
            __ret = __proxy->end_getAnnotationLinksCountPerOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Pixels_getAnnotationLinksCountPerOwnerPtr
newCallback_Pixels_getAnnotationLinksCountPerOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::CountMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_getAnnotationLinksCountPerOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_getAnnotationLinksCountPerOwnerPtr
newCallback_Pixels_getAnnotationLinksCountPerOwner(T* instance, void (T::*cb)(const ::omero::sys::CountMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_getAnnotationLinksCountPerOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_linkAnnotation : public Callback_Pixels_linkAnnotation_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::PixelsAnnotationLinkPtr&);

    CallbackNC_Pixels_linkAnnotation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::PixelsAnnotationLinkPtr __ret;
        try
        {
            __ret = __proxy->end_linkAnnotation(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Pixels_linkAnnotationPtr
newCallback_Pixels_linkAnnotation(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PixelsAnnotationLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_linkAnnotation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_linkAnnotationPtr
newCallback_Pixels_linkAnnotation(T* instance, void (T::*cb)(const ::omero::model::PixelsAnnotationLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_linkAnnotation<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_linkAnnotation : public Callback_Pixels_linkAnnotation_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::PixelsAnnotationLinkPtr&, const CT&);

    Callback_Pixels_linkAnnotation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::PixelsAnnotationLinkPtr __ret;
        try
        {
            __ret = __proxy->end_linkAnnotation(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Pixels_linkAnnotationPtr
newCallback_Pixels_linkAnnotation(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PixelsAnnotationLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_linkAnnotation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_linkAnnotationPtr
newCallback_Pixels_linkAnnotation(T* instance, void (T::*cb)(const ::omero::model::PixelsAnnotationLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_linkAnnotation<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_addPixelsAnnotationLinkToBoth : public Callback_Pixels_addPixelsAnnotationLinkToBoth_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_addPixelsAnnotationLinkToBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_addPixelsAnnotationLinkToBothPtr
newCallback_Pixels_addPixelsAnnotationLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_addPixelsAnnotationLinkToBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_addPixelsAnnotationLinkToBothPtr
newCallback_Pixels_addPixelsAnnotationLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_addPixelsAnnotationLinkToBoth<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_addPixelsAnnotationLinkToBothPtr
newCallback_Pixels_addPixelsAnnotationLinkToBoth(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_addPixelsAnnotationLinkToBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_addPixelsAnnotationLinkToBothPtr
newCallback_Pixels_addPixelsAnnotationLinkToBoth(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_addPixelsAnnotationLinkToBoth<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_addPixelsAnnotationLinkToBoth : public Callback_Pixels_addPixelsAnnotationLinkToBoth_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_addPixelsAnnotationLinkToBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_addPixelsAnnotationLinkToBothPtr
newCallback_Pixels_addPixelsAnnotationLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_addPixelsAnnotationLinkToBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_addPixelsAnnotationLinkToBothPtr
newCallback_Pixels_addPixelsAnnotationLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_addPixelsAnnotationLinkToBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_addPixelsAnnotationLinkToBothPtr
newCallback_Pixels_addPixelsAnnotationLinkToBoth(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_addPixelsAnnotationLinkToBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_addPixelsAnnotationLinkToBothPtr
newCallback_Pixels_addPixelsAnnotationLinkToBoth(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_addPixelsAnnotationLinkToBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_findPixelsAnnotationLink : public Callback_Pixels_findPixelsAnnotationLink_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::PixelsAnnotationLinksSeq&);

    CallbackNC_Pixels_findPixelsAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::PixelsAnnotationLinksSeq __ret;
        try
        {
            __ret = __proxy->end_findPixelsAnnotationLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Pixels_findPixelsAnnotationLinkPtr
newCallback_Pixels_findPixelsAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PixelsAnnotationLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_findPixelsAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_findPixelsAnnotationLinkPtr
newCallback_Pixels_findPixelsAnnotationLink(T* instance, void (T::*cb)(const ::omero::model::PixelsAnnotationLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_findPixelsAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_findPixelsAnnotationLink : public Callback_Pixels_findPixelsAnnotationLink_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::PixelsAnnotationLinksSeq&, const CT&);

    Callback_Pixels_findPixelsAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::PixelsAnnotationLinksSeq __ret;
        try
        {
            __ret = __proxy->end_findPixelsAnnotationLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Pixels_findPixelsAnnotationLinkPtr
newCallback_Pixels_findPixelsAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PixelsAnnotationLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_findPixelsAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_findPixelsAnnotationLinkPtr
newCallback_Pixels_findPixelsAnnotationLink(T* instance, void (T::*cb)(const ::omero::model::PixelsAnnotationLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_findPixelsAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_unlinkAnnotation : public Callback_Pixels_unlinkAnnotation_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_unlinkAnnotation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_unlinkAnnotationPtr
newCallback_Pixels_unlinkAnnotation(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_unlinkAnnotation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_unlinkAnnotationPtr
newCallback_Pixels_unlinkAnnotation(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_unlinkAnnotation<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_unlinkAnnotationPtr
newCallback_Pixels_unlinkAnnotation(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_unlinkAnnotation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_unlinkAnnotationPtr
newCallback_Pixels_unlinkAnnotation(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_unlinkAnnotation<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_unlinkAnnotation : public Callback_Pixels_unlinkAnnotation_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_unlinkAnnotation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_unlinkAnnotationPtr
newCallback_Pixels_unlinkAnnotation(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_unlinkAnnotation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_unlinkAnnotationPtr
newCallback_Pixels_unlinkAnnotation(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_unlinkAnnotation<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_unlinkAnnotationPtr
newCallback_Pixels_unlinkAnnotation(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_unlinkAnnotation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_unlinkAnnotationPtr
newCallback_Pixels_unlinkAnnotation(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_unlinkAnnotation<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_removePixelsAnnotationLinkFromBoth : public Callback_Pixels_removePixelsAnnotationLinkFromBoth_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Pixels_removePixelsAnnotationLinkFromBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Pixels_removePixelsAnnotationLinkFromBothPtr
newCallback_Pixels_removePixelsAnnotationLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_removePixelsAnnotationLinkFromBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_removePixelsAnnotationLinkFromBothPtr
newCallback_Pixels_removePixelsAnnotationLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_removePixelsAnnotationLinkFromBoth<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Pixels_removePixelsAnnotationLinkFromBothPtr
newCallback_Pixels_removePixelsAnnotationLinkFromBoth(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_removePixelsAnnotationLinkFromBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_removePixelsAnnotationLinkFromBothPtr
newCallback_Pixels_removePixelsAnnotationLinkFromBoth(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_removePixelsAnnotationLinkFromBoth<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_removePixelsAnnotationLinkFromBoth : public Callback_Pixels_removePixelsAnnotationLinkFromBoth_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Pixels_removePixelsAnnotationLinkFromBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Pixels_removePixelsAnnotationLinkFromBothPtr
newCallback_Pixels_removePixelsAnnotationLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_removePixelsAnnotationLinkFromBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_removePixelsAnnotationLinkFromBothPtr
newCallback_Pixels_removePixelsAnnotationLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_removePixelsAnnotationLinkFromBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_removePixelsAnnotationLinkFromBothPtr
newCallback_Pixels_removePixelsAnnotationLinkFromBoth(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_removePixelsAnnotationLinkFromBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_removePixelsAnnotationLinkFromBothPtr
newCallback_Pixels_removePixelsAnnotationLinkFromBoth(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_removePixelsAnnotationLinkFromBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Pixels_linkedAnnotationList : public Callback_Pixels_linkedAnnotationList_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::PixelsLinkedAnnotationSeq&);

    CallbackNC_Pixels_linkedAnnotationList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::PixelsLinkedAnnotationSeq __ret;
        try
        {
            __ret = __proxy->end_linkedAnnotationList(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Pixels_linkedAnnotationListPtr
newCallback_Pixels_linkedAnnotationList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PixelsLinkedAnnotationSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_linkedAnnotationList<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Pixels_linkedAnnotationListPtr
newCallback_Pixels_linkedAnnotationList(T* instance, void (T::*cb)(const ::omero::model::PixelsLinkedAnnotationSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pixels_linkedAnnotationList<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Pixels_linkedAnnotationList : public Callback_Pixels_linkedAnnotationList_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::PixelsLinkedAnnotationSeq&, const CT&);

    Callback_Pixels_linkedAnnotationList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PixelsPrx __proxy = ::omero::model::PixelsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::PixelsLinkedAnnotationSeq __ret;
        try
        {
            __ret = __proxy->end_linkedAnnotationList(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Pixels_linkedAnnotationListPtr
newCallback_Pixels_linkedAnnotationList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PixelsLinkedAnnotationSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_linkedAnnotationList<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Pixels_linkedAnnotationListPtr
newCallback_Pixels_linkedAnnotationList(T* instance, void (T::*cb)(const ::omero::model::PixelsLinkedAnnotationSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pixels_linkedAnnotationList<T, CT>(instance, cb, excb, sentcb);
}

}

}

#endif
