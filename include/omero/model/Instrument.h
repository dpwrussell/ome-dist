// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `Instrument.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_Instrument_h__
#define __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_Instrument_h__

#include <Ice/LocalObjectF.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/StreamF.h>
#include <omero/model/IObject.h>
#include <omero/RTypes.h>
#include <omero/System.h>
#include <omero/Collections.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace omero
{

namespace model
{

class Microscope;

class Detector;

class Objective;

class LightSource;

class Filter;

class Dichroic;

class FilterSet;

class OTF;

class Details;

class Instrument;

}

}

}

namespace omero
{

namespace model
{

class Microscope;
bool operator==(const Microscope&, const Microscope&);
bool operator<(const Microscope&, const Microscope&);

class Detector;
bool operator==(const Detector&, const Detector&);
bool operator<(const Detector&, const Detector&);

class Objective;
bool operator==(const Objective&, const Objective&);
bool operator<(const Objective&, const Objective&);

class LightSource;
bool operator==(const LightSource&, const LightSource&);
bool operator<(const LightSource&, const LightSource&);

class Filter;
bool operator==(const Filter&, const Filter&);
bool operator<(const Filter&, const Filter&);

class Dichroic;
bool operator==(const Dichroic&, const Dichroic&);
bool operator<(const Dichroic&, const Dichroic&);

class FilterSet;
bool operator==(const FilterSet&, const FilterSet&);
bool operator<(const FilterSet&, const FilterSet&);

class OTF;
bool operator==(const OTF&, const OTF&);
bool operator<(const OTF&, const OTF&);

class Details;
bool operator==(const Details&, const Details&);
bool operator<(const Details&, const Details&);

class Instrument;
bool operator==(const Instrument&, const Instrument&);
bool operator<(const Instrument&, const Instrument&);

}

}

namespace IceInternal
{

::Ice::Object* upCast(::omero::model::Microscope*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Microscope*);

::Ice::Object* upCast(::omero::model::Detector*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Detector*);

::Ice::Object* upCast(::omero::model::Objective*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Objective*);

::Ice::Object* upCast(::omero::model::LightSource*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::LightSource*);

::Ice::Object* upCast(::omero::model::Filter*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Filter*);

::Ice::Object* upCast(::omero::model::Dichroic*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Dichroic*);

::Ice::Object* upCast(::omero::model::FilterSet*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::FilterSet*);

::Ice::Object* upCast(::omero::model::OTF*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::OTF*);

::Ice::Object* upCast(::omero::model::Details*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Details*);

::Ice::Object* upCast(::omero::model::Instrument*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Instrument*);

}

namespace omero
{

namespace model
{

typedef ::IceInternal::Handle< ::omero::model::Microscope> MicroscopePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Microscope> MicroscopePrx;

void __read(::IceInternal::BasicStream*, MicroscopePrx&);
void __patch__MicroscopePtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::Detector> DetectorPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Detector> DetectorPrx;

void __read(::IceInternal::BasicStream*, DetectorPrx&);
void __patch__DetectorPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::Objective> ObjectivePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Objective> ObjectivePrx;

void __read(::IceInternal::BasicStream*, ObjectivePrx&);
void __patch__ObjectivePtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::LightSource> LightSourcePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::LightSource> LightSourcePrx;

void __read(::IceInternal::BasicStream*, LightSourcePrx&);
void __patch__LightSourcePtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::Filter> FilterPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Filter> FilterPrx;

void __read(::IceInternal::BasicStream*, FilterPrx&);
void __patch__FilterPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::Dichroic> DichroicPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Dichroic> DichroicPrx;

void __read(::IceInternal::BasicStream*, DichroicPrx&);
void __patch__DichroicPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::FilterSet> FilterSetPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::FilterSet> FilterSetPrx;

void __read(::IceInternal::BasicStream*, FilterSetPrx&);
void __patch__FilterSetPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::OTF> OTFPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::OTF> OTFPrx;

void __read(::IceInternal::BasicStream*, OTFPrx&);
void __patch__OTFPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::Details> DetailsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Details> DetailsPrx;

void __read(::IceInternal::BasicStream*, DetailsPrx&);
void __patch__DetailsPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::Instrument> InstrumentPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Instrument> InstrumentPrx;

void __read(::IceInternal::BasicStream*, InstrumentPrx&);
void __patch__InstrumentPtr(void*, ::Ice::ObjectPtr&);

}

}

namespace omero
{

namespace model
{

typedef ::std::vector< ::omero::model::DetectorPtr> InstrumentDetectorSeq;
void __writeInstrumentDetectorSeq(::IceInternal::BasicStream*, const ::omero::model::DetectorPtr*, const ::omero::model::DetectorPtr*);
void __readInstrumentDetectorSeq(::IceInternal::BasicStream*, InstrumentDetectorSeq&);

typedef ::std::vector< ::omero::model::ObjectivePtr> InstrumentObjectiveSeq;
void __writeInstrumentObjectiveSeq(::IceInternal::BasicStream*, const ::omero::model::ObjectivePtr*, const ::omero::model::ObjectivePtr*);
void __readInstrumentObjectiveSeq(::IceInternal::BasicStream*, InstrumentObjectiveSeq&);

typedef ::std::vector< ::omero::model::LightSourcePtr> InstrumentLightSourceSeq;
void __writeInstrumentLightSourceSeq(::IceInternal::BasicStream*, const ::omero::model::LightSourcePtr*, const ::omero::model::LightSourcePtr*);
void __readInstrumentLightSourceSeq(::IceInternal::BasicStream*, InstrumentLightSourceSeq&);

typedef ::std::vector< ::omero::model::FilterPtr> InstrumentFilterSeq;
void __writeInstrumentFilterSeq(::IceInternal::BasicStream*, const ::omero::model::FilterPtr*, const ::omero::model::FilterPtr*);
void __readInstrumentFilterSeq(::IceInternal::BasicStream*, InstrumentFilterSeq&);

typedef ::std::vector< ::omero::model::DichroicPtr> InstrumentDichroicSeq;
void __writeInstrumentDichroicSeq(::IceInternal::BasicStream*, const ::omero::model::DichroicPtr*, const ::omero::model::DichroicPtr*);
void __readInstrumentDichroicSeq(::IceInternal::BasicStream*, InstrumentDichroicSeq&);

typedef ::std::vector< ::omero::model::FilterSetPtr> InstrumentFilterSetSeq;
void __writeInstrumentFilterSetSeq(::IceInternal::BasicStream*, const ::omero::model::FilterSetPtr*, const ::omero::model::FilterSetPtr*);
void __readInstrumentFilterSetSeq(::IceInternal::BasicStream*, InstrumentFilterSetSeq&);

typedef ::std::vector< ::omero::model::OTFPtr> InstrumentOtfSeq;
void __writeInstrumentOtfSeq(::IceInternal::BasicStream*, const ::omero::model::OTFPtr*, const ::omero::model::OTFPtr*);
void __readInstrumentOtfSeq(::IceInternal::BasicStream*, InstrumentOtfSeq&);

}

}

namespace omero
{

namespace model
{

class Callback_Instrument_getVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_getVersion_Base> Callback_Instrument_getVersionPtr;

class Callback_Instrument_setVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_setVersion_Base> Callback_Instrument_setVersionPtr;

class Callback_Instrument_getMicroscope_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_getMicroscope_Base> Callback_Instrument_getMicroscopePtr;

class Callback_Instrument_setMicroscope_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_setMicroscope_Base> Callback_Instrument_setMicroscopePtr;

class Callback_Instrument_unloadDetector_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_unloadDetector_Base> Callback_Instrument_unloadDetectorPtr;

class Callback_Instrument_sizeOfDetector_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_sizeOfDetector_Base> Callback_Instrument_sizeOfDetectorPtr;

class Callback_Instrument_copyDetector_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_copyDetector_Base> Callback_Instrument_copyDetectorPtr;

class Callback_Instrument_addDetector_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_addDetector_Base> Callback_Instrument_addDetectorPtr;

class Callback_Instrument_addAllDetectorSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_addAllDetectorSet_Base> Callback_Instrument_addAllDetectorSetPtr;

class Callback_Instrument_removeDetector_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_removeDetector_Base> Callback_Instrument_removeDetectorPtr;

class Callback_Instrument_removeAllDetectorSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_removeAllDetectorSet_Base> Callback_Instrument_removeAllDetectorSetPtr;

class Callback_Instrument_clearDetector_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_clearDetector_Base> Callback_Instrument_clearDetectorPtr;

class Callback_Instrument_reloadDetector_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_reloadDetector_Base> Callback_Instrument_reloadDetectorPtr;

class Callback_Instrument_unloadObjective_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_unloadObjective_Base> Callback_Instrument_unloadObjectivePtr;

class Callback_Instrument_sizeOfObjective_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_sizeOfObjective_Base> Callback_Instrument_sizeOfObjectivePtr;

class Callback_Instrument_copyObjective_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_copyObjective_Base> Callback_Instrument_copyObjectivePtr;

class Callback_Instrument_addObjective_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_addObjective_Base> Callback_Instrument_addObjectivePtr;

class Callback_Instrument_addAllObjectiveSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_addAllObjectiveSet_Base> Callback_Instrument_addAllObjectiveSetPtr;

class Callback_Instrument_removeObjective_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_removeObjective_Base> Callback_Instrument_removeObjectivePtr;

class Callback_Instrument_removeAllObjectiveSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_removeAllObjectiveSet_Base> Callback_Instrument_removeAllObjectiveSetPtr;

class Callback_Instrument_clearObjective_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_clearObjective_Base> Callback_Instrument_clearObjectivePtr;

class Callback_Instrument_reloadObjective_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_reloadObjective_Base> Callback_Instrument_reloadObjectivePtr;

class Callback_Instrument_unloadLightSource_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_unloadLightSource_Base> Callback_Instrument_unloadLightSourcePtr;

class Callback_Instrument_sizeOfLightSource_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_sizeOfLightSource_Base> Callback_Instrument_sizeOfLightSourcePtr;

class Callback_Instrument_copyLightSource_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_copyLightSource_Base> Callback_Instrument_copyLightSourcePtr;

class Callback_Instrument_addLightSource_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_addLightSource_Base> Callback_Instrument_addLightSourcePtr;

class Callback_Instrument_addAllLightSourceSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_addAllLightSourceSet_Base> Callback_Instrument_addAllLightSourceSetPtr;

class Callback_Instrument_removeLightSource_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_removeLightSource_Base> Callback_Instrument_removeLightSourcePtr;

class Callback_Instrument_removeAllLightSourceSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_removeAllLightSourceSet_Base> Callback_Instrument_removeAllLightSourceSetPtr;

class Callback_Instrument_clearLightSource_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_clearLightSource_Base> Callback_Instrument_clearLightSourcePtr;

class Callback_Instrument_reloadLightSource_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_reloadLightSource_Base> Callback_Instrument_reloadLightSourcePtr;

class Callback_Instrument_unloadFilter_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_unloadFilter_Base> Callback_Instrument_unloadFilterPtr;

class Callback_Instrument_sizeOfFilter_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_sizeOfFilter_Base> Callback_Instrument_sizeOfFilterPtr;

class Callback_Instrument_copyFilter_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_copyFilter_Base> Callback_Instrument_copyFilterPtr;

class Callback_Instrument_addFilter_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_addFilter_Base> Callback_Instrument_addFilterPtr;

class Callback_Instrument_addAllFilterSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_addAllFilterSet_Base> Callback_Instrument_addAllFilterSetPtr;

class Callback_Instrument_removeFilter_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_removeFilter_Base> Callback_Instrument_removeFilterPtr;

class Callback_Instrument_removeAllFilterSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_removeAllFilterSet_Base> Callback_Instrument_removeAllFilterSetPtr;

class Callback_Instrument_clearFilter_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_clearFilter_Base> Callback_Instrument_clearFilterPtr;

class Callback_Instrument_reloadFilter_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_reloadFilter_Base> Callback_Instrument_reloadFilterPtr;

class Callback_Instrument_unloadDichroic_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_unloadDichroic_Base> Callback_Instrument_unloadDichroicPtr;

class Callback_Instrument_sizeOfDichroic_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_sizeOfDichroic_Base> Callback_Instrument_sizeOfDichroicPtr;

class Callback_Instrument_copyDichroic_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_copyDichroic_Base> Callback_Instrument_copyDichroicPtr;

class Callback_Instrument_addDichroic_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_addDichroic_Base> Callback_Instrument_addDichroicPtr;

class Callback_Instrument_addAllDichroicSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_addAllDichroicSet_Base> Callback_Instrument_addAllDichroicSetPtr;

class Callback_Instrument_removeDichroic_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_removeDichroic_Base> Callback_Instrument_removeDichroicPtr;

class Callback_Instrument_removeAllDichroicSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_removeAllDichroicSet_Base> Callback_Instrument_removeAllDichroicSetPtr;

class Callback_Instrument_clearDichroic_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_clearDichroic_Base> Callback_Instrument_clearDichroicPtr;

class Callback_Instrument_reloadDichroic_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_reloadDichroic_Base> Callback_Instrument_reloadDichroicPtr;

class Callback_Instrument_unloadFilterSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_unloadFilterSet_Base> Callback_Instrument_unloadFilterSetPtr;

class Callback_Instrument_sizeOfFilterSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_sizeOfFilterSet_Base> Callback_Instrument_sizeOfFilterSetPtr;

class Callback_Instrument_copyFilterSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_copyFilterSet_Base> Callback_Instrument_copyFilterSetPtr;

class Callback_Instrument_addFilterSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_addFilterSet_Base> Callback_Instrument_addFilterSetPtr;

class Callback_Instrument_addAllFilterSetSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_addAllFilterSetSet_Base> Callback_Instrument_addAllFilterSetSetPtr;

class Callback_Instrument_removeFilterSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_removeFilterSet_Base> Callback_Instrument_removeFilterSetPtr;

class Callback_Instrument_removeAllFilterSetSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_removeAllFilterSetSet_Base> Callback_Instrument_removeAllFilterSetSetPtr;

class Callback_Instrument_clearFilterSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_clearFilterSet_Base> Callback_Instrument_clearFilterSetPtr;

class Callback_Instrument_reloadFilterSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_reloadFilterSet_Base> Callback_Instrument_reloadFilterSetPtr;

class Callback_Instrument_unloadOtf_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_unloadOtf_Base> Callback_Instrument_unloadOtfPtr;

class Callback_Instrument_sizeOfOtf_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_sizeOfOtf_Base> Callback_Instrument_sizeOfOtfPtr;

class Callback_Instrument_copyOtf_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_copyOtf_Base> Callback_Instrument_copyOtfPtr;

class Callback_Instrument_addOTF_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_addOTF_Base> Callback_Instrument_addOTFPtr;

class Callback_Instrument_addAllOTFSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_addAllOTFSet_Base> Callback_Instrument_addAllOTFSetPtr;

class Callback_Instrument_removeOTF_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_removeOTF_Base> Callback_Instrument_removeOTFPtr;

class Callback_Instrument_removeAllOTFSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_removeAllOTFSet_Base> Callback_Instrument_removeAllOTFSetPtr;

class Callback_Instrument_clearOtf_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_clearOtf_Base> Callback_Instrument_clearOtfPtr;

class Callback_Instrument_reloadOtf_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Instrument_reloadOtf_Base> Callback_Instrument_reloadOtfPtr;

}

}

namespace IceProxy
{

namespace omero
{

namespace model
{

class Instrument : virtual public ::IceProxy::omero::model::IObject
{
public:

    ::omero::RIntPtr getVersion()
    {
        return getVersion(0);
    }
    ::omero::RIntPtr getVersion(const ::Ice::Context& __ctx)
    {
        return getVersion(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getVersion()
    {
        return begin_getVersion(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx)
    {
        return begin_getVersion(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::omero::model::Callback_Instrument_getVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_getVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(&__ctx, __del, __cookie);
    }

    ::omero::RIntPtr end_getVersion(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RIntPtr getVersion(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setVersion(const ::omero::RIntPtr& theVersion)
    {
        setVersion(theVersion, 0);
    }
    void setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx)
    {
        setVersion(theVersion, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion)
    {
        return begin_setVersion(theVersion, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx)
    {
        return begin_setVersion(theVersion, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::omero::model::Callback_Instrument_setVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_setVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, &__ctx, __del, __cookie);
    }

    void end_setVersion(const ::Ice::AsyncResultPtr&);
    
private:

    void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::MicroscopePtr getMicroscope()
    {
        return getMicroscope(0);
    }
    ::omero::model::MicroscopePtr getMicroscope(const ::Ice::Context& __ctx)
    {
        return getMicroscope(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getMicroscope()
    {
        return begin_getMicroscope(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getMicroscope(const ::Ice::Context& __ctx)
    {
        return begin_getMicroscope(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getMicroscope(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMicroscope(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMicroscope(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMicroscope(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMicroscope(const ::omero::model::Callback_Instrument_getMicroscopePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMicroscope(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMicroscope(const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_getMicroscopePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMicroscope(&__ctx, __del, __cookie);
    }

    ::omero::model::MicroscopePtr end_getMicroscope(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::MicroscopePtr getMicroscope(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getMicroscope(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setMicroscope(const ::omero::model::MicroscopePtr& theMicroscope)
    {
        setMicroscope(theMicroscope, 0);
    }
    void setMicroscope(const ::omero::model::MicroscopePtr& theMicroscope, const ::Ice::Context& __ctx)
    {
        setMicroscope(theMicroscope, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setMicroscope(const ::omero::model::MicroscopePtr& theMicroscope)
    {
        return begin_setMicroscope(theMicroscope, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setMicroscope(const ::omero::model::MicroscopePtr& theMicroscope, const ::Ice::Context& __ctx)
    {
        return begin_setMicroscope(theMicroscope, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setMicroscope(const ::omero::model::MicroscopePtr& theMicroscope, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setMicroscope(theMicroscope, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setMicroscope(const ::omero::model::MicroscopePtr& theMicroscope, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setMicroscope(theMicroscope, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setMicroscope(const ::omero::model::MicroscopePtr& theMicroscope, const ::omero::model::Callback_Instrument_setMicroscopePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setMicroscope(theMicroscope, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setMicroscope(const ::omero::model::MicroscopePtr& theMicroscope, const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_setMicroscopePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setMicroscope(theMicroscope, &__ctx, __del, __cookie);
    }

    void end_setMicroscope(const ::Ice::AsyncResultPtr&);
    
private:

    void setMicroscope(const ::omero::model::MicroscopePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setMicroscope(const ::omero::model::MicroscopePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unloadDetector()
    {
        unloadDetector(0);
    }
    void unloadDetector(const ::Ice::Context& __ctx)
    {
        unloadDetector(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_unloadDetector()
    {
        return begin_unloadDetector(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadDetector(const ::Ice::Context& __ctx)
    {
        return begin_unloadDetector(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadDetector(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadDetector(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadDetector(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadDetector(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadDetector(const ::omero::model::Callback_Instrument_unloadDetectorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadDetector(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadDetector(const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_unloadDetectorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadDetector(&__ctx, __del, __cookie);
    }

    void end_unloadDetector(const ::Ice::AsyncResultPtr&);
    
private:

    void unloadDetector(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unloadDetector(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int sizeOfDetector()
    {
        return sizeOfDetector(0);
    }
    ::Ice::Int sizeOfDetector(const ::Ice::Context& __ctx)
    {
        return sizeOfDetector(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_sizeOfDetector()
    {
        return begin_sizeOfDetector(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfDetector(const ::Ice::Context& __ctx)
    {
        return begin_sizeOfDetector(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfDetector(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfDetector(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfDetector(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfDetector(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfDetector(const ::omero::model::Callback_Instrument_sizeOfDetectorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfDetector(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfDetector(const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_sizeOfDetectorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfDetector(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_sizeOfDetector(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int sizeOfDetector(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sizeOfDetector(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::InstrumentDetectorSeq copyDetector()
    {
        return copyDetector(0);
    }
    ::omero::model::InstrumentDetectorSeq copyDetector(const ::Ice::Context& __ctx)
    {
        return copyDetector(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_copyDetector()
    {
        return begin_copyDetector(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyDetector(const ::Ice::Context& __ctx)
    {
        return begin_copyDetector(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyDetector(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyDetector(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyDetector(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyDetector(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyDetector(const ::omero::model::Callback_Instrument_copyDetectorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyDetector(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyDetector(const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_copyDetectorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyDetector(&__ctx, __del, __cookie);
    }

    ::omero::model::InstrumentDetectorSeq end_copyDetector(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::InstrumentDetectorSeq copyDetector(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_copyDetector(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addDetector(const ::omero::model::DetectorPtr& target)
    {
        addDetector(target, 0);
    }
    void addDetector(const ::omero::model::DetectorPtr& target, const ::Ice::Context& __ctx)
    {
        addDetector(target, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addDetector(const ::omero::model::DetectorPtr& target)
    {
        return begin_addDetector(target, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addDetector(const ::omero::model::DetectorPtr& target, const ::Ice::Context& __ctx)
    {
        return begin_addDetector(target, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addDetector(const ::omero::model::DetectorPtr& target, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addDetector(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addDetector(const ::omero::model::DetectorPtr& target, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addDetector(target, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addDetector(const ::omero::model::DetectorPtr& target, const ::omero::model::Callback_Instrument_addDetectorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addDetector(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addDetector(const ::omero::model::DetectorPtr& target, const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_addDetectorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addDetector(target, &__ctx, __del, __cookie);
    }

    void end_addDetector(const ::Ice::AsyncResultPtr&);
    
private:

    void addDetector(const ::omero::model::DetectorPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addDetector(const ::omero::model::DetectorPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addAllDetectorSet(const ::omero::model::InstrumentDetectorSeq& targets)
    {
        addAllDetectorSet(targets, 0);
    }
    void addAllDetectorSet(const ::omero::model::InstrumentDetectorSeq& targets, const ::Ice::Context& __ctx)
    {
        addAllDetectorSet(targets, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addAllDetectorSet(const ::omero::model::InstrumentDetectorSeq& targets)
    {
        return begin_addAllDetectorSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllDetectorSet(const ::omero::model::InstrumentDetectorSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_addAllDetectorSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllDetectorSet(const ::omero::model::InstrumentDetectorSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllDetectorSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllDetectorSet(const ::omero::model::InstrumentDetectorSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllDetectorSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllDetectorSet(const ::omero::model::InstrumentDetectorSeq& targets, const ::omero::model::Callback_Instrument_addAllDetectorSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllDetectorSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllDetectorSet(const ::omero::model::InstrumentDetectorSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_addAllDetectorSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllDetectorSet(targets, &__ctx, __del, __cookie);
    }

    void end_addAllDetectorSet(const ::Ice::AsyncResultPtr&);
    
private:

    void addAllDetectorSet(const ::omero::model::InstrumentDetectorSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addAllDetectorSet(const ::omero::model::InstrumentDetectorSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeDetector(const ::omero::model::DetectorPtr& theTarget)
    {
        removeDetector(theTarget, 0);
    }
    void removeDetector(const ::omero::model::DetectorPtr& theTarget, const ::Ice::Context& __ctx)
    {
        removeDetector(theTarget, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removeDetector(const ::omero::model::DetectorPtr& theTarget)
    {
        return begin_removeDetector(theTarget, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeDetector(const ::omero::model::DetectorPtr& theTarget, const ::Ice::Context& __ctx)
    {
        return begin_removeDetector(theTarget, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeDetector(const ::omero::model::DetectorPtr& theTarget, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeDetector(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeDetector(const ::omero::model::DetectorPtr& theTarget, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeDetector(theTarget, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeDetector(const ::omero::model::DetectorPtr& theTarget, const ::omero::model::Callback_Instrument_removeDetectorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeDetector(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeDetector(const ::omero::model::DetectorPtr& theTarget, const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_removeDetectorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeDetector(theTarget, &__ctx, __del, __cookie);
    }

    void end_removeDetector(const ::Ice::AsyncResultPtr&);
    
private:

    void removeDetector(const ::omero::model::DetectorPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeDetector(const ::omero::model::DetectorPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeAllDetectorSet(const ::omero::model::InstrumentDetectorSeq& targets)
    {
        removeAllDetectorSet(targets, 0);
    }
    void removeAllDetectorSet(const ::omero::model::InstrumentDetectorSeq& targets, const ::Ice::Context& __ctx)
    {
        removeAllDetectorSet(targets, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removeAllDetectorSet(const ::omero::model::InstrumentDetectorSeq& targets)
    {
        return begin_removeAllDetectorSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllDetectorSet(const ::omero::model::InstrumentDetectorSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_removeAllDetectorSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllDetectorSet(const ::omero::model::InstrumentDetectorSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllDetectorSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllDetectorSet(const ::omero::model::InstrumentDetectorSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllDetectorSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllDetectorSet(const ::omero::model::InstrumentDetectorSeq& targets, const ::omero::model::Callback_Instrument_removeAllDetectorSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllDetectorSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllDetectorSet(const ::omero::model::InstrumentDetectorSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_removeAllDetectorSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllDetectorSet(targets, &__ctx, __del, __cookie);
    }

    void end_removeAllDetectorSet(const ::Ice::AsyncResultPtr&);
    
private:

    void removeAllDetectorSet(const ::omero::model::InstrumentDetectorSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeAllDetectorSet(const ::omero::model::InstrumentDetectorSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void clearDetector()
    {
        clearDetector(0);
    }
    void clearDetector(const ::Ice::Context& __ctx)
    {
        clearDetector(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_clearDetector()
    {
        return begin_clearDetector(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearDetector(const ::Ice::Context& __ctx)
    {
        return begin_clearDetector(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearDetector(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearDetector(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearDetector(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearDetector(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearDetector(const ::omero::model::Callback_Instrument_clearDetectorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearDetector(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearDetector(const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_clearDetectorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearDetector(&__ctx, __del, __cookie);
    }

    void end_clearDetector(const ::Ice::AsyncResultPtr&);
    
private:

    void clearDetector(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_clearDetector(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reloadDetector(const ::omero::model::InstrumentPtr& toCopy)
    {
        reloadDetector(toCopy, 0);
    }
    void reloadDetector(const ::omero::model::InstrumentPtr& toCopy, const ::Ice::Context& __ctx)
    {
        reloadDetector(toCopy, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_reloadDetector(const ::omero::model::InstrumentPtr& toCopy)
    {
        return begin_reloadDetector(toCopy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadDetector(const ::omero::model::InstrumentPtr& toCopy, const ::Ice::Context& __ctx)
    {
        return begin_reloadDetector(toCopy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadDetector(const ::omero::model::InstrumentPtr& toCopy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadDetector(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadDetector(const ::omero::model::InstrumentPtr& toCopy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadDetector(toCopy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadDetector(const ::omero::model::InstrumentPtr& toCopy, const ::omero::model::Callback_Instrument_reloadDetectorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadDetector(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadDetector(const ::omero::model::InstrumentPtr& toCopy, const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_reloadDetectorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadDetector(toCopy, &__ctx, __del, __cookie);
    }

    void end_reloadDetector(const ::Ice::AsyncResultPtr&);
    
private:

    void reloadDetector(const ::omero::model::InstrumentPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reloadDetector(const ::omero::model::InstrumentPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unloadObjective()
    {
        unloadObjective(0);
    }
    void unloadObjective(const ::Ice::Context& __ctx)
    {
        unloadObjective(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_unloadObjective()
    {
        return begin_unloadObjective(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadObjective(const ::Ice::Context& __ctx)
    {
        return begin_unloadObjective(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadObjective(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadObjective(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadObjective(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadObjective(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadObjective(const ::omero::model::Callback_Instrument_unloadObjectivePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadObjective(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadObjective(const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_unloadObjectivePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadObjective(&__ctx, __del, __cookie);
    }

    void end_unloadObjective(const ::Ice::AsyncResultPtr&);
    
private:

    void unloadObjective(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unloadObjective(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int sizeOfObjective()
    {
        return sizeOfObjective(0);
    }
    ::Ice::Int sizeOfObjective(const ::Ice::Context& __ctx)
    {
        return sizeOfObjective(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_sizeOfObjective()
    {
        return begin_sizeOfObjective(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfObjective(const ::Ice::Context& __ctx)
    {
        return begin_sizeOfObjective(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfObjective(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfObjective(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfObjective(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfObjective(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfObjective(const ::omero::model::Callback_Instrument_sizeOfObjectivePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfObjective(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfObjective(const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_sizeOfObjectivePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfObjective(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_sizeOfObjective(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int sizeOfObjective(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sizeOfObjective(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::InstrumentObjectiveSeq copyObjective()
    {
        return copyObjective(0);
    }
    ::omero::model::InstrumentObjectiveSeq copyObjective(const ::Ice::Context& __ctx)
    {
        return copyObjective(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_copyObjective()
    {
        return begin_copyObjective(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyObjective(const ::Ice::Context& __ctx)
    {
        return begin_copyObjective(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyObjective(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyObjective(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyObjective(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyObjective(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyObjective(const ::omero::model::Callback_Instrument_copyObjectivePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyObjective(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyObjective(const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_copyObjectivePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyObjective(&__ctx, __del, __cookie);
    }

    ::omero::model::InstrumentObjectiveSeq end_copyObjective(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::InstrumentObjectiveSeq copyObjective(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_copyObjective(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addObjective(const ::omero::model::ObjectivePtr& target)
    {
        addObjective(target, 0);
    }
    void addObjective(const ::omero::model::ObjectivePtr& target, const ::Ice::Context& __ctx)
    {
        addObjective(target, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addObjective(const ::omero::model::ObjectivePtr& target)
    {
        return begin_addObjective(target, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addObjective(const ::omero::model::ObjectivePtr& target, const ::Ice::Context& __ctx)
    {
        return begin_addObjective(target, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addObjective(const ::omero::model::ObjectivePtr& target, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addObjective(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addObjective(const ::omero::model::ObjectivePtr& target, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addObjective(target, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addObjective(const ::omero::model::ObjectivePtr& target, const ::omero::model::Callback_Instrument_addObjectivePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addObjective(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addObjective(const ::omero::model::ObjectivePtr& target, const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_addObjectivePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addObjective(target, &__ctx, __del, __cookie);
    }

    void end_addObjective(const ::Ice::AsyncResultPtr&);
    
private:

    void addObjective(const ::omero::model::ObjectivePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addObjective(const ::omero::model::ObjectivePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addAllObjectiveSet(const ::omero::model::InstrumentObjectiveSeq& targets)
    {
        addAllObjectiveSet(targets, 0);
    }
    void addAllObjectiveSet(const ::omero::model::InstrumentObjectiveSeq& targets, const ::Ice::Context& __ctx)
    {
        addAllObjectiveSet(targets, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addAllObjectiveSet(const ::omero::model::InstrumentObjectiveSeq& targets)
    {
        return begin_addAllObjectiveSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllObjectiveSet(const ::omero::model::InstrumentObjectiveSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_addAllObjectiveSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllObjectiveSet(const ::omero::model::InstrumentObjectiveSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllObjectiveSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllObjectiveSet(const ::omero::model::InstrumentObjectiveSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllObjectiveSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllObjectiveSet(const ::omero::model::InstrumentObjectiveSeq& targets, const ::omero::model::Callback_Instrument_addAllObjectiveSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllObjectiveSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllObjectiveSet(const ::omero::model::InstrumentObjectiveSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_addAllObjectiveSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllObjectiveSet(targets, &__ctx, __del, __cookie);
    }

    void end_addAllObjectiveSet(const ::Ice::AsyncResultPtr&);
    
private:

    void addAllObjectiveSet(const ::omero::model::InstrumentObjectiveSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addAllObjectiveSet(const ::omero::model::InstrumentObjectiveSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeObjective(const ::omero::model::ObjectivePtr& theTarget)
    {
        removeObjective(theTarget, 0);
    }
    void removeObjective(const ::omero::model::ObjectivePtr& theTarget, const ::Ice::Context& __ctx)
    {
        removeObjective(theTarget, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removeObjective(const ::omero::model::ObjectivePtr& theTarget)
    {
        return begin_removeObjective(theTarget, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeObjective(const ::omero::model::ObjectivePtr& theTarget, const ::Ice::Context& __ctx)
    {
        return begin_removeObjective(theTarget, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeObjective(const ::omero::model::ObjectivePtr& theTarget, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeObjective(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeObjective(const ::omero::model::ObjectivePtr& theTarget, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeObjective(theTarget, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeObjective(const ::omero::model::ObjectivePtr& theTarget, const ::omero::model::Callback_Instrument_removeObjectivePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeObjective(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeObjective(const ::omero::model::ObjectivePtr& theTarget, const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_removeObjectivePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeObjective(theTarget, &__ctx, __del, __cookie);
    }

    void end_removeObjective(const ::Ice::AsyncResultPtr&);
    
private:

    void removeObjective(const ::omero::model::ObjectivePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeObjective(const ::omero::model::ObjectivePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeAllObjectiveSet(const ::omero::model::InstrumentObjectiveSeq& targets)
    {
        removeAllObjectiveSet(targets, 0);
    }
    void removeAllObjectiveSet(const ::omero::model::InstrumentObjectiveSeq& targets, const ::Ice::Context& __ctx)
    {
        removeAllObjectiveSet(targets, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removeAllObjectiveSet(const ::omero::model::InstrumentObjectiveSeq& targets)
    {
        return begin_removeAllObjectiveSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllObjectiveSet(const ::omero::model::InstrumentObjectiveSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_removeAllObjectiveSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllObjectiveSet(const ::omero::model::InstrumentObjectiveSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllObjectiveSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllObjectiveSet(const ::omero::model::InstrumentObjectiveSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllObjectiveSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllObjectiveSet(const ::omero::model::InstrumentObjectiveSeq& targets, const ::omero::model::Callback_Instrument_removeAllObjectiveSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllObjectiveSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllObjectiveSet(const ::omero::model::InstrumentObjectiveSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_removeAllObjectiveSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllObjectiveSet(targets, &__ctx, __del, __cookie);
    }

    void end_removeAllObjectiveSet(const ::Ice::AsyncResultPtr&);
    
private:

    void removeAllObjectiveSet(const ::omero::model::InstrumentObjectiveSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeAllObjectiveSet(const ::omero::model::InstrumentObjectiveSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void clearObjective()
    {
        clearObjective(0);
    }
    void clearObjective(const ::Ice::Context& __ctx)
    {
        clearObjective(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_clearObjective()
    {
        return begin_clearObjective(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearObjective(const ::Ice::Context& __ctx)
    {
        return begin_clearObjective(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearObjective(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearObjective(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearObjective(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearObjective(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearObjective(const ::omero::model::Callback_Instrument_clearObjectivePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearObjective(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearObjective(const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_clearObjectivePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearObjective(&__ctx, __del, __cookie);
    }

    void end_clearObjective(const ::Ice::AsyncResultPtr&);
    
private:

    void clearObjective(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_clearObjective(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reloadObjective(const ::omero::model::InstrumentPtr& toCopy)
    {
        reloadObjective(toCopy, 0);
    }
    void reloadObjective(const ::omero::model::InstrumentPtr& toCopy, const ::Ice::Context& __ctx)
    {
        reloadObjective(toCopy, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_reloadObjective(const ::omero::model::InstrumentPtr& toCopy)
    {
        return begin_reloadObjective(toCopy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadObjective(const ::omero::model::InstrumentPtr& toCopy, const ::Ice::Context& __ctx)
    {
        return begin_reloadObjective(toCopy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadObjective(const ::omero::model::InstrumentPtr& toCopy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadObjective(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadObjective(const ::omero::model::InstrumentPtr& toCopy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadObjective(toCopy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadObjective(const ::omero::model::InstrumentPtr& toCopy, const ::omero::model::Callback_Instrument_reloadObjectivePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadObjective(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadObjective(const ::omero::model::InstrumentPtr& toCopy, const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_reloadObjectivePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadObjective(toCopy, &__ctx, __del, __cookie);
    }

    void end_reloadObjective(const ::Ice::AsyncResultPtr&);
    
private:

    void reloadObjective(const ::omero::model::InstrumentPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reloadObjective(const ::omero::model::InstrumentPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unloadLightSource()
    {
        unloadLightSource(0);
    }
    void unloadLightSource(const ::Ice::Context& __ctx)
    {
        unloadLightSource(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_unloadLightSource()
    {
        return begin_unloadLightSource(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadLightSource(const ::Ice::Context& __ctx)
    {
        return begin_unloadLightSource(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadLightSource(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadLightSource(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadLightSource(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadLightSource(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadLightSource(const ::omero::model::Callback_Instrument_unloadLightSourcePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadLightSource(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadLightSource(const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_unloadLightSourcePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadLightSource(&__ctx, __del, __cookie);
    }

    void end_unloadLightSource(const ::Ice::AsyncResultPtr&);
    
private:

    void unloadLightSource(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unloadLightSource(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int sizeOfLightSource()
    {
        return sizeOfLightSource(0);
    }
    ::Ice::Int sizeOfLightSource(const ::Ice::Context& __ctx)
    {
        return sizeOfLightSource(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_sizeOfLightSource()
    {
        return begin_sizeOfLightSource(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfLightSource(const ::Ice::Context& __ctx)
    {
        return begin_sizeOfLightSource(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfLightSource(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfLightSource(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfLightSource(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfLightSource(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfLightSource(const ::omero::model::Callback_Instrument_sizeOfLightSourcePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfLightSource(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfLightSource(const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_sizeOfLightSourcePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfLightSource(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_sizeOfLightSource(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int sizeOfLightSource(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sizeOfLightSource(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::InstrumentLightSourceSeq copyLightSource()
    {
        return copyLightSource(0);
    }
    ::omero::model::InstrumentLightSourceSeq copyLightSource(const ::Ice::Context& __ctx)
    {
        return copyLightSource(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_copyLightSource()
    {
        return begin_copyLightSource(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyLightSource(const ::Ice::Context& __ctx)
    {
        return begin_copyLightSource(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyLightSource(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyLightSource(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyLightSource(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyLightSource(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyLightSource(const ::omero::model::Callback_Instrument_copyLightSourcePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyLightSource(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyLightSource(const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_copyLightSourcePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyLightSource(&__ctx, __del, __cookie);
    }

    ::omero::model::InstrumentLightSourceSeq end_copyLightSource(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::InstrumentLightSourceSeq copyLightSource(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_copyLightSource(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addLightSource(const ::omero::model::LightSourcePtr& target)
    {
        addLightSource(target, 0);
    }
    void addLightSource(const ::omero::model::LightSourcePtr& target, const ::Ice::Context& __ctx)
    {
        addLightSource(target, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addLightSource(const ::omero::model::LightSourcePtr& target)
    {
        return begin_addLightSource(target, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addLightSource(const ::omero::model::LightSourcePtr& target, const ::Ice::Context& __ctx)
    {
        return begin_addLightSource(target, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addLightSource(const ::omero::model::LightSourcePtr& target, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addLightSource(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addLightSource(const ::omero::model::LightSourcePtr& target, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addLightSource(target, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addLightSource(const ::omero::model::LightSourcePtr& target, const ::omero::model::Callback_Instrument_addLightSourcePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addLightSource(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addLightSource(const ::omero::model::LightSourcePtr& target, const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_addLightSourcePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addLightSource(target, &__ctx, __del, __cookie);
    }

    void end_addLightSource(const ::Ice::AsyncResultPtr&);
    
private:

    void addLightSource(const ::omero::model::LightSourcePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addLightSource(const ::omero::model::LightSourcePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addAllLightSourceSet(const ::omero::model::InstrumentLightSourceSeq& targets)
    {
        addAllLightSourceSet(targets, 0);
    }
    void addAllLightSourceSet(const ::omero::model::InstrumentLightSourceSeq& targets, const ::Ice::Context& __ctx)
    {
        addAllLightSourceSet(targets, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addAllLightSourceSet(const ::omero::model::InstrumentLightSourceSeq& targets)
    {
        return begin_addAllLightSourceSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllLightSourceSet(const ::omero::model::InstrumentLightSourceSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_addAllLightSourceSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllLightSourceSet(const ::omero::model::InstrumentLightSourceSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllLightSourceSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllLightSourceSet(const ::omero::model::InstrumentLightSourceSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllLightSourceSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllLightSourceSet(const ::omero::model::InstrumentLightSourceSeq& targets, const ::omero::model::Callback_Instrument_addAllLightSourceSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllLightSourceSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllLightSourceSet(const ::omero::model::InstrumentLightSourceSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_addAllLightSourceSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllLightSourceSet(targets, &__ctx, __del, __cookie);
    }

    void end_addAllLightSourceSet(const ::Ice::AsyncResultPtr&);
    
private:

    void addAllLightSourceSet(const ::omero::model::InstrumentLightSourceSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addAllLightSourceSet(const ::omero::model::InstrumentLightSourceSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeLightSource(const ::omero::model::LightSourcePtr& theTarget)
    {
        removeLightSource(theTarget, 0);
    }
    void removeLightSource(const ::omero::model::LightSourcePtr& theTarget, const ::Ice::Context& __ctx)
    {
        removeLightSource(theTarget, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removeLightSource(const ::omero::model::LightSourcePtr& theTarget)
    {
        return begin_removeLightSource(theTarget, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeLightSource(const ::omero::model::LightSourcePtr& theTarget, const ::Ice::Context& __ctx)
    {
        return begin_removeLightSource(theTarget, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeLightSource(const ::omero::model::LightSourcePtr& theTarget, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeLightSource(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeLightSource(const ::omero::model::LightSourcePtr& theTarget, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeLightSource(theTarget, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeLightSource(const ::omero::model::LightSourcePtr& theTarget, const ::omero::model::Callback_Instrument_removeLightSourcePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeLightSource(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeLightSource(const ::omero::model::LightSourcePtr& theTarget, const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_removeLightSourcePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeLightSource(theTarget, &__ctx, __del, __cookie);
    }

    void end_removeLightSource(const ::Ice::AsyncResultPtr&);
    
private:

    void removeLightSource(const ::omero::model::LightSourcePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeLightSource(const ::omero::model::LightSourcePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeAllLightSourceSet(const ::omero::model::InstrumentLightSourceSeq& targets)
    {
        removeAllLightSourceSet(targets, 0);
    }
    void removeAllLightSourceSet(const ::omero::model::InstrumentLightSourceSeq& targets, const ::Ice::Context& __ctx)
    {
        removeAllLightSourceSet(targets, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removeAllLightSourceSet(const ::omero::model::InstrumentLightSourceSeq& targets)
    {
        return begin_removeAllLightSourceSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllLightSourceSet(const ::omero::model::InstrumentLightSourceSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_removeAllLightSourceSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllLightSourceSet(const ::omero::model::InstrumentLightSourceSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllLightSourceSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllLightSourceSet(const ::omero::model::InstrumentLightSourceSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllLightSourceSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllLightSourceSet(const ::omero::model::InstrumentLightSourceSeq& targets, const ::omero::model::Callback_Instrument_removeAllLightSourceSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllLightSourceSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllLightSourceSet(const ::omero::model::InstrumentLightSourceSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_removeAllLightSourceSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllLightSourceSet(targets, &__ctx, __del, __cookie);
    }

    void end_removeAllLightSourceSet(const ::Ice::AsyncResultPtr&);
    
private:

    void removeAllLightSourceSet(const ::omero::model::InstrumentLightSourceSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeAllLightSourceSet(const ::omero::model::InstrumentLightSourceSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void clearLightSource()
    {
        clearLightSource(0);
    }
    void clearLightSource(const ::Ice::Context& __ctx)
    {
        clearLightSource(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_clearLightSource()
    {
        return begin_clearLightSource(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearLightSource(const ::Ice::Context& __ctx)
    {
        return begin_clearLightSource(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearLightSource(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearLightSource(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearLightSource(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearLightSource(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearLightSource(const ::omero::model::Callback_Instrument_clearLightSourcePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearLightSource(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearLightSource(const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_clearLightSourcePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearLightSource(&__ctx, __del, __cookie);
    }

    void end_clearLightSource(const ::Ice::AsyncResultPtr&);
    
private:

    void clearLightSource(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_clearLightSource(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reloadLightSource(const ::omero::model::InstrumentPtr& toCopy)
    {
        reloadLightSource(toCopy, 0);
    }
    void reloadLightSource(const ::omero::model::InstrumentPtr& toCopy, const ::Ice::Context& __ctx)
    {
        reloadLightSource(toCopy, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_reloadLightSource(const ::omero::model::InstrumentPtr& toCopy)
    {
        return begin_reloadLightSource(toCopy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadLightSource(const ::omero::model::InstrumentPtr& toCopy, const ::Ice::Context& __ctx)
    {
        return begin_reloadLightSource(toCopy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadLightSource(const ::omero::model::InstrumentPtr& toCopy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadLightSource(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadLightSource(const ::omero::model::InstrumentPtr& toCopy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadLightSource(toCopy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadLightSource(const ::omero::model::InstrumentPtr& toCopy, const ::omero::model::Callback_Instrument_reloadLightSourcePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadLightSource(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadLightSource(const ::omero::model::InstrumentPtr& toCopy, const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_reloadLightSourcePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadLightSource(toCopy, &__ctx, __del, __cookie);
    }

    void end_reloadLightSource(const ::Ice::AsyncResultPtr&);
    
private:

    void reloadLightSource(const ::omero::model::InstrumentPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reloadLightSource(const ::omero::model::InstrumentPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unloadFilter()
    {
        unloadFilter(0);
    }
    void unloadFilter(const ::Ice::Context& __ctx)
    {
        unloadFilter(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_unloadFilter()
    {
        return begin_unloadFilter(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadFilter(const ::Ice::Context& __ctx)
    {
        return begin_unloadFilter(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadFilter(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadFilter(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadFilter(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadFilter(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadFilter(const ::omero::model::Callback_Instrument_unloadFilterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadFilter(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadFilter(const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_unloadFilterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadFilter(&__ctx, __del, __cookie);
    }

    void end_unloadFilter(const ::Ice::AsyncResultPtr&);
    
private:

    void unloadFilter(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unloadFilter(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int sizeOfFilter()
    {
        return sizeOfFilter(0);
    }
    ::Ice::Int sizeOfFilter(const ::Ice::Context& __ctx)
    {
        return sizeOfFilter(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_sizeOfFilter()
    {
        return begin_sizeOfFilter(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfFilter(const ::Ice::Context& __ctx)
    {
        return begin_sizeOfFilter(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfFilter(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfFilter(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfFilter(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfFilter(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfFilter(const ::omero::model::Callback_Instrument_sizeOfFilterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfFilter(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfFilter(const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_sizeOfFilterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfFilter(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_sizeOfFilter(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int sizeOfFilter(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sizeOfFilter(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::InstrumentFilterSeq copyFilter()
    {
        return copyFilter(0);
    }
    ::omero::model::InstrumentFilterSeq copyFilter(const ::Ice::Context& __ctx)
    {
        return copyFilter(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_copyFilter()
    {
        return begin_copyFilter(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyFilter(const ::Ice::Context& __ctx)
    {
        return begin_copyFilter(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyFilter(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyFilter(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyFilter(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyFilter(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyFilter(const ::omero::model::Callback_Instrument_copyFilterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyFilter(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyFilter(const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_copyFilterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyFilter(&__ctx, __del, __cookie);
    }

    ::omero::model::InstrumentFilterSeq end_copyFilter(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::InstrumentFilterSeq copyFilter(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_copyFilter(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addFilter(const ::omero::model::FilterPtr& target)
    {
        addFilter(target, 0);
    }
    void addFilter(const ::omero::model::FilterPtr& target, const ::Ice::Context& __ctx)
    {
        addFilter(target, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addFilter(const ::omero::model::FilterPtr& target)
    {
        return begin_addFilter(target, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addFilter(const ::omero::model::FilterPtr& target, const ::Ice::Context& __ctx)
    {
        return begin_addFilter(target, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addFilter(const ::omero::model::FilterPtr& target, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addFilter(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addFilter(const ::omero::model::FilterPtr& target, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addFilter(target, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addFilter(const ::omero::model::FilterPtr& target, const ::omero::model::Callback_Instrument_addFilterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addFilter(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addFilter(const ::omero::model::FilterPtr& target, const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_addFilterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addFilter(target, &__ctx, __del, __cookie);
    }

    void end_addFilter(const ::Ice::AsyncResultPtr&);
    
private:

    void addFilter(const ::omero::model::FilterPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addFilter(const ::omero::model::FilterPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addAllFilterSet(const ::omero::model::InstrumentFilterSeq& targets)
    {
        addAllFilterSet(targets, 0);
    }
    void addAllFilterSet(const ::omero::model::InstrumentFilterSeq& targets, const ::Ice::Context& __ctx)
    {
        addAllFilterSet(targets, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addAllFilterSet(const ::omero::model::InstrumentFilterSeq& targets)
    {
        return begin_addAllFilterSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllFilterSet(const ::omero::model::InstrumentFilterSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_addAllFilterSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllFilterSet(const ::omero::model::InstrumentFilterSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllFilterSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllFilterSet(const ::omero::model::InstrumentFilterSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllFilterSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllFilterSet(const ::omero::model::InstrumentFilterSeq& targets, const ::omero::model::Callback_Instrument_addAllFilterSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllFilterSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllFilterSet(const ::omero::model::InstrumentFilterSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_addAllFilterSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllFilterSet(targets, &__ctx, __del, __cookie);
    }

    void end_addAllFilterSet(const ::Ice::AsyncResultPtr&);
    
private:

    void addAllFilterSet(const ::omero::model::InstrumentFilterSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addAllFilterSet(const ::omero::model::InstrumentFilterSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeFilter(const ::omero::model::FilterPtr& theTarget)
    {
        removeFilter(theTarget, 0);
    }
    void removeFilter(const ::omero::model::FilterPtr& theTarget, const ::Ice::Context& __ctx)
    {
        removeFilter(theTarget, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removeFilter(const ::omero::model::FilterPtr& theTarget)
    {
        return begin_removeFilter(theTarget, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeFilter(const ::omero::model::FilterPtr& theTarget, const ::Ice::Context& __ctx)
    {
        return begin_removeFilter(theTarget, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeFilter(const ::omero::model::FilterPtr& theTarget, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeFilter(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeFilter(const ::omero::model::FilterPtr& theTarget, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeFilter(theTarget, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeFilter(const ::omero::model::FilterPtr& theTarget, const ::omero::model::Callback_Instrument_removeFilterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeFilter(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeFilter(const ::omero::model::FilterPtr& theTarget, const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_removeFilterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeFilter(theTarget, &__ctx, __del, __cookie);
    }

    void end_removeFilter(const ::Ice::AsyncResultPtr&);
    
private:

    void removeFilter(const ::omero::model::FilterPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeFilter(const ::omero::model::FilterPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeAllFilterSet(const ::omero::model::InstrumentFilterSeq& targets)
    {
        removeAllFilterSet(targets, 0);
    }
    void removeAllFilterSet(const ::omero::model::InstrumentFilterSeq& targets, const ::Ice::Context& __ctx)
    {
        removeAllFilterSet(targets, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removeAllFilterSet(const ::omero::model::InstrumentFilterSeq& targets)
    {
        return begin_removeAllFilterSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllFilterSet(const ::omero::model::InstrumentFilterSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_removeAllFilterSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllFilterSet(const ::omero::model::InstrumentFilterSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllFilterSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllFilterSet(const ::omero::model::InstrumentFilterSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllFilterSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllFilterSet(const ::omero::model::InstrumentFilterSeq& targets, const ::omero::model::Callback_Instrument_removeAllFilterSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllFilterSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllFilterSet(const ::omero::model::InstrumentFilterSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_removeAllFilterSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllFilterSet(targets, &__ctx, __del, __cookie);
    }

    void end_removeAllFilterSet(const ::Ice::AsyncResultPtr&);
    
private:

    void removeAllFilterSet(const ::omero::model::InstrumentFilterSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeAllFilterSet(const ::omero::model::InstrumentFilterSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void clearFilter()
    {
        clearFilter(0);
    }
    void clearFilter(const ::Ice::Context& __ctx)
    {
        clearFilter(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_clearFilter()
    {
        return begin_clearFilter(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearFilter(const ::Ice::Context& __ctx)
    {
        return begin_clearFilter(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearFilter(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearFilter(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearFilter(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearFilter(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearFilter(const ::omero::model::Callback_Instrument_clearFilterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearFilter(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearFilter(const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_clearFilterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearFilter(&__ctx, __del, __cookie);
    }

    void end_clearFilter(const ::Ice::AsyncResultPtr&);
    
private:

    void clearFilter(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_clearFilter(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reloadFilter(const ::omero::model::InstrumentPtr& toCopy)
    {
        reloadFilter(toCopy, 0);
    }
    void reloadFilter(const ::omero::model::InstrumentPtr& toCopy, const ::Ice::Context& __ctx)
    {
        reloadFilter(toCopy, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_reloadFilter(const ::omero::model::InstrumentPtr& toCopy)
    {
        return begin_reloadFilter(toCopy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadFilter(const ::omero::model::InstrumentPtr& toCopy, const ::Ice::Context& __ctx)
    {
        return begin_reloadFilter(toCopy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadFilter(const ::omero::model::InstrumentPtr& toCopy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadFilter(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadFilter(const ::omero::model::InstrumentPtr& toCopy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadFilter(toCopy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadFilter(const ::omero::model::InstrumentPtr& toCopy, const ::omero::model::Callback_Instrument_reloadFilterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadFilter(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadFilter(const ::omero::model::InstrumentPtr& toCopy, const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_reloadFilterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadFilter(toCopy, &__ctx, __del, __cookie);
    }

    void end_reloadFilter(const ::Ice::AsyncResultPtr&);
    
private:

    void reloadFilter(const ::omero::model::InstrumentPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reloadFilter(const ::omero::model::InstrumentPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unloadDichroic()
    {
        unloadDichroic(0);
    }
    void unloadDichroic(const ::Ice::Context& __ctx)
    {
        unloadDichroic(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_unloadDichroic()
    {
        return begin_unloadDichroic(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadDichroic(const ::Ice::Context& __ctx)
    {
        return begin_unloadDichroic(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadDichroic(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadDichroic(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadDichroic(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadDichroic(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadDichroic(const ::omero::model::Callback_Instrument_unloadDichroicPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadDichroic(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadDichroic(const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_unloadDichroicPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadDichroic(&__ctx, __del, __cookie);
    }

    void end_unloadDichroic(const ::Ice::AsyncResultPtr&);
    
private:

    void unloadDichroic(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unloadDichroic(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int sizeOfDichroic()
    {
        return sizeOfDichroic(0);
    }
    ::Ice::Int sizeOfDichroic(const ::Ice::Context& __ctx)
    {
        return sizeOfDichroic(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_sizeOfDichroic()
    {
        return begin_sizeOfDichroic(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfDichroic(const ::Ice::Context& __ctx)
    {
        return begin_sizeOfDichroic(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfDichroic(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfDichroic(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfDichroic(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfDichroic(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfDichroic(const ::omero::model::Callback_Instrument_sizeOfDichroicPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfDichroic(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfDichroic(const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_sizeOfDichroicPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfDichroic(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_sizeOfDichroic(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int sizeOfDichroic(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sizeOfDichroic(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::InstrumentDichroicSeq copyDichroic()
    {
        return copyDichroic(0);
    }
    ::omero::model::InstrumentDichroicSeq copyDichroic(const ::Ice::Context& __ctx)
    {
        return copyDichroic(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_copyDichroic()
    {
        return begin_copyDichroic(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyDichroic(const ::Ice::Context& __ctx)
    {
        return begin_copyDichroic(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyDichroic(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyDichroic(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyDichroic(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyDichroic(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyDichroic(const ::omero::model::Callback_Instrument_copyDichroicPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyDichroic(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyDichroic(const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_copyDichroicPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyDichroic(&__ctx, __del, __cookie);
    }

    ::omero::model::InstrumentDichroicSeq end_copyDichroic(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::InstrumentDichroicSeq copyDichroic(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_copyDichroic(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addDichroic(const ::omero::model::DichroicPtr& target)
    {
        addDichroic(target, 0);
    }
    void addDichroic(const ::omero::model::DichroicPtr& target, const ::Ice::Context& __ctx)
    {
        addDichroic(target, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addDichroic(const ::omero::model::DichroicPtr& target)
    {
        return begin_addDichroic(target, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addDichroic(const ::omero::model::DichroicPtr& target, const ::Ice::Context& __ctx)
    {
        return begin_addDichroic(target, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addDichroic(const ::omero::model::DichroicPtr& target, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addDichroic(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addDichroic(const ::omero::model::DichroicPtr& target, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addDichroic(target, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addDichroic(const ::omero::model::DichroicPtr& target, const ::omero::model::Callback_Instrument_addDichroicPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addDichroic(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addDichroic(const ::omero::model::DichroicPtr& target, const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_addDichroicPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addDichroic(target, &__ctx, __del, __cookie);
    }

    void end_addDichroic(const ::Ice::AsyncResultPtr&);
    
private:

    void addDichroic(const ::omero::model::DichroicPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addDichroic(const ::omero::model::DichroicPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addAllDichroicSet(const ::omero::model::InstrumentDichroicSeq& targets)
    {
        addAllDichroicSet(targets, 0);
    }
    void addAllDichroicSet(const ::omero::model::InstrumentDichroicSeq& targets, const ::Ice::Context& __ctx)
    {
        addAllDichroicSet(targets, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addAllDichroicSet(const ::omero::model::InstrumentDichroicSeq& targets)
    {
        return begin_addAllDichroicSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllDichroicSet(const ::omero::model::InstrumentDichroicSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_addAllDichroicSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllDichroicSet(const ::omero::model::InstrumentDichroicSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllDichroicSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllDichroicSet(const ::omero::model::InstrumentDichroicSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllDichroicSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllDichroicSet(const ::omero::model::InstrumentDichroicSeq& targets, const ::omero::model::Callback_Instrument_addAllDichroicSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllDichroicSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllDichroicSet(const ::omero::model::InstrumentDichroicSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_addAllDichroicSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllDichroicSet(targets, &__ctx, __del, __cookie);
    }

    void end_addAllDichroicSet(const ::Ice::AsyncResultPtr&);
    
private:

    void addAllDichroicSet(const ::omero::model::InstrumentDichroicSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addAllDichroicSet(const ::omero::model::InstrumentDichroicSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeDichroic(const ::omero::model::DichroicPtr& theTarget)
    {
        removeDichroic(theTarget, 0);
    }
    void removeDichroic(const ::omero::model::DichroicPtr& theTarget, const ::Ice::Context& __ctx)
    {
        removeDichroic(theTarget, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removeDichroic(const ::omero::model::DichroicPtr& theTarget)
    {
        return begin_removeDichroic(theTarget, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeDichroic(const ::omero::model::DichroicPtr& theTarget, const ::Ice::Context& __ctx)
    {
        return begin_removeDichroic(theTarget, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeDichroic(const ::omero::model::DichroicPtr& theTarget, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeDichroic(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeDichroic(const ::omero::model::DichroicPtr& theTarget, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeDichroic(theTarget, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeDichroic(const ::omero::model::DichroicPtr& theTarget, const ::omero::model::Callback_Instrument_removeDichroicPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeDichroic(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeDichroic(const ::omero::model::DichroicPtr& theTarget, const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_removeDichroicPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeDichroic(theTarget, &__ctx, __del, __cookie);
    }

    void end_removeDichroic(const ::Ice::AsyncResultPtr&);
    
private:

    void removeDichroic(const ::omero::model::DichroicPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeDichroic(const ::omero::model::DichroicPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeAllDichroicSet(const ::omero::model::InstrumentDichroicSeq& targets)
    {
        removeAllDichroicSet(targets, 0);
    }
    void removeAllDichroicSet(const ::omero::model::InstrumentDichroicSeq& targets, const ::Ice::Context& __ctx)
    {
        removeAllDichroicSet(targets, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removeAllDichroicSet(const ::omero::model::InstrumentDichroicSeq& targets)
    {
        return begin_removeAllDichroicSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllDichroicSet(const ::omero::model::InstrumentDichroicSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_removeAllDichroicSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllDichroicSet(const ::omero::model::InstrumentDichroicSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllDichroicSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllDichroicSet(const ::omero::model::InstrumentDichroicSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllDichroicSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllDichroicSet(const ::omero::model::InstrumentDichroicSeq& targets, const ::omero::model::Callback_Instrument_removeAllDichroicSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllDichroicSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllDichroicSet(const ::omero::model::InstrumentDichroicSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_removeAllDichroicSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllDichroicSet(targets, &__ctx, __del, __cookie);
    }

    void end_removeAllDichroicSet(const ::Ice::AsyncResultPtr&);
    
private:

    void removeAllDichroicSet(const ::omero::model::InstrumentDichroicSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeAllDichroicSet(const ::omero::model::InstrumentDichroicSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void clearDichroic()
    {
        clearDichroic(0);
    }
    void clearDichroic(const ::Ice::Context& __ctx)
    {
        clearDichroic(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_clearDichroic()
    {
        return begin_clearDichroic(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearDichroic(const ::Ice::Context& __ctx)
    {
        return begin_clearDichroic(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearDichroic(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearDichroic(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearDichroic(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearDichroic(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearDichroic(const ::omero::model::Callback_Instrument_clearDichroicPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearDichroic(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearDichroic(const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_clearDichroicPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearDichroic(&__ctx, __del, __cookie);
    }

    void end_clearDichroic(const ::Ice::AsyncResultPtr&);
    
private:

    void clearDichroic(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_clearDichroic(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reloadDichroic(const ::omero::model::InstrumentPtr& toCopy)
    {
        reloadDichroic(toCopy, 0);
    }
    void reloadDichroic(const ::omero::model::InstrumentPtr& toCopy, const ::Ice::Context& __ctx)
    {
        reloadDichroic(toCopy, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_reloadDichroic(const ::omero::model::InstrumentPtr& toCopy)
    {
        return begin_reloadDichroic(toCopy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadDichroic(const ::omero::model::InstrumentPtr& toCopy, const ::Ice::Context& __ctx)
    {
        return begin_reloadDichroic(toCopy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadDichroic(const ::omero::model::InstrumentPtr& toCopy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadDichroic(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadDichroic(const ::omero::model::InstrumentPtr& toCopy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadDichroic(toCopy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadDichroic(const ::omero::model::InstrumentPtr& toCopy, const ::omero::model::Callback_Instrument_reloadDichroicPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadDichroic(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadDichroic(const ::omero::model::InstrumentPtr& toCopy, const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_reloadDichroicPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadDichroic(toCopy, &__ctx, __del, __cookie);
    }

    void end_reloadDichroic(const ::Ice::AsyncResultPtr&);
    
private:

    void reloadDichroic(const ::omero::model::InstrumentPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reloadDichroic(const ::omero::model::InstrumentPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unloadFilterSet()
    {
        unloadFilterSet(0);
    }
    void unloadFilterSet(const ::Ice::Context& __ctx)
    {
        unloadFilterSet(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_unloadFilterSet()
    {
        return begin_unloadFilterSet(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadFilterSet(const ::Ice::Context& __ctx)
    {
        return begin_unloadFilterSet(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadFilterSet(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadFilterSet(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadFilterSet(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadFilterSet(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadFilterSet(const ::omero::model::Callback_Instrument_unloadFilterSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadFilterSet(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadFilterSet(const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_unloadFilterSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadFilterSet(&__ctx, __del, __cookie);
    }

    void end_unloadFilterSet(const ::Ice::AsyncResultPtr&);
    
private:

    void unloadFilterSet(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unloadFilterSet(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int sizeOfFilterSet()
    {
        return sizeOfFilterSet(0);
    }
    ::Ice::Int sizeOfFilterSet(const ::Ice::Context& __ctx)
    {
        return sizeOfFilterSet(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_sizeOfFilterSet()
    {
        return begin_sizeOfFilterSet(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfFilterSet(const ::Ice::Context& __ctx)
    {
        return begin_sizeOfFilterSet(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfFilterSet(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfFilterSet(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfFilterSet(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfFilterSet(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfFilterSet(const ::omero::model::Callback_Instrument_sizeOfFilterSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfFilterSet(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfFilterSet(const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_sizeOfFilterSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfFilterSet(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_sizeOfFilterSet(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int sizeOfFilterSet(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sizeOfFilterSet(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::InstrumentFilterSetSeq copyFilterSet()
    {
        return copyFilterSet(0);
    }
    ::omero::model::InstrumentFilterSetSeq copyFilterSet(const ::Ice::Context& __ctx)
    {
        return copyFilterSet(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_copyFilterSet()
    {
        return begin_copyFilterSet(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyFilterSet(const ::Ice::Context& __ctx)
    {
        return begin_copyFilterSet(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyFilterSet(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyFilterSet(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyFilterSet(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyFilterSet(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyFilterSet(const ::omero::model::Callback_Instrument_copyFilterSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyFilterSet(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyFilterSet(const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_copyFilterSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyFilterSet(&__ctx, __del, __cookie);
    }

    ::omero::model::InstrumentFilterSetSeq end_copyFilterSet(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::InstrumentFilterSetSeq copyFilterSet(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_copyFilterSet(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addFilterSet(const ::omero::model::FilterSetPtr& target)
    {
        addFilterSet(target, 0);
    }
    void addFilterSet(const ::omero::model::FilterSetPtr& target, const ::Ice::Context& __ctx)
    {
        addFilterSet(target, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addFilterSet(const ::omero::model::FilterSetPtr& target)
    {
        return begin_addFilterSet(target, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addFilterSet(const ::omero::model::FilterSetPtr& target, const ::Ice::Context& __ctx)
    {
        return begin_addFilterSet(target, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addFilterSet(const ::omero::model::FilterSetPtr& target, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addFilterSet(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addFilterSet(const ::omero::model::FilterSetPtr& target, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addFilterSet(target, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addFilterSet(const ::omero::model::FilterSetPtr& target, const ::omero::model::Callback_Instrument_addFilterSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addFilterSet(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addFilterSet(const ::omero::model::FilterSetPtr& target, const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_addFilterSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addFilterSet(target, &__ctx, __del, __cookie);
    }

    void end_addFilterSet(const ::Ice::AsyncResultPtr&);
    
private:

    void addFilterSet(const ::omero::model::FilterSetPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addFilterSet(const ::omero::model::FilterSetPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addAllFilterSetSet(const ::omero::model::InstrumentFilterSetSeq& targets)
    {
        addAllFilterSetSet(targets, 0);
    }
    void addAllFilterSetSet(const ::omero::model::InstrumentFilterSetSeq& targets, const ::Ice::Context& __ctx)
    {
        addAllFilterSetSet(targets, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addAllFilterSetSet(const ::omero::model::InstrumentFilterSetSeq& targets)
    {
        return begin_addAllFilterSetSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllFilterSetSet(const ::omero::model::InstrumentFilterSetSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_addAllFilterSetSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllFilterSetSet(const ::omero::model::InstrumentFilterSetSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllFilterSetSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllFilterSetSet(const ::omero::model::InstrumentFilterSetSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllFilterSetSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllFilterSetSet(const ::omero::model::InstrumentFilterSetSeq& targets, const ::omero::model::Callback_Instrument_addAllFilterSetSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllFilterSetSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllFilterSetSet(const ::omero::model::InstrumentFilterSetSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_addAllFilterSetSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllFilterSetSet(targets, &__ctx, __del, __cookie);
    }

    void end_addAllFilterSetSet(const ::Ice::AsyncResultPtr&);
    
private:

    void addAllFilterSetSet(const ::omero::model::InstrumentFilterSetSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addAllFilterSetSet(const ::omero::model::InstrumentFilterSetSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeFilterSet(const ::omero::model::FilterSetPtr& theTarget)
    {
        removeFilterSet(theTarget, 0);
    }
    void removeFilterSet(const ::omero::model::FilterSetPtr& theTarget, const ::Ice::Context& __ctx)
    {
        removeFilterSet(theTarget, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removeFilterSet(const ::omero::model::FilterSetPtr& theTarget)
    {
        return begin_removeFilterSet(theTarget, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeFilterSet(const ::omero::model::FilterSetPtr& theTarget, const ::Ice::Context& __ctx)
    {
        return begin_removeFilterSet(theTarget, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeFilterSet(const ::omero::model::FilterSetPtr& theTarget, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeFilterSet(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeFilterSet(const ::omero::model::FilterSetPtr& theTarget, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeFilterSet(theTarget, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeFilterSet(const ::omero::model::FilterSetPtr& theTarget, const ::omero::model::Callback_Instrument_removeFilterSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeFilterSet(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeFilterSet(const ::omero::model::FilterSetPtr& theTarget, const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_removeFilterSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeFilterSet(theTarget, &__ctx, __del, __cookie);
    }

    void end_removeFilterSet(const ::Ice::AsyncResultPtr&);
    
private:

    void removeFilterSet(const ::omero::model::FilterSetPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeFilterSet(const ::omero::model::FilterSetPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeAllFilterSetSet(const ::omero::model::InstrumentFilterSetSeq& targets)
    {
        removeAllFilterSetSet(targets, 0);
    }
    void removeAllFilterSetSet(const ::omero::model::InstrumentFilterSetSeq& targets, const ::Ice::Context& __ctx)
    {
        removeAllFilterSetSet(targets, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removeAllFilterSetSet(const ::omero::model::InstrumentFilterSetSeq& targets)
    {
        return begin_removeAllFilterSetSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllFilterSetSet(const ::omero::model::InstrumentFilterSetSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_removeAllFilterSetSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllFilterSetSet(const ::omero::model::InstrumentFilterSetSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllFilterSetSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllFilterSetSet(const ::omero::model::InstrumentFilterSetSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllFilterSetSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllFilterSetSet(const ::omero::model::InstrumentFilterSetSeq& targets, const ::omero::model::Callback_Instrument_removeAllFilterSetSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllFilterSetSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllFilterSetSet(const ::omero::model::InstrumentFilterSetSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_removeAllFilterSetSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllFilterSetSet(targets, &__ctx, __del, __cookie);
    }

    void end_removeAllFilterSetSet(const ::Ice::AsyncResultPtr&);
    
private:

    void removeAllFilterSetSet(const ::omero::model::InstrumentFilterSetSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeAllFilterSetSet(const ::omero::model::InstrumentFilterSetSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void clearFilterSet()
    {
        clearFilterSet(0);
    }
    void clearFilterSet(const ::Ice::Context& __ctx)
    {
        clearFilterSet(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_clearFilterSet()
    {
        return begin_clearFilterSet(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearFilterSet(const ::Ice::Context& __ctx)
    {
        return begin_clearFilterSet(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearFilterSet(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearFilterSet(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearFilterSet(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearFilterSet(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearFilterSet(const ::omero::model::Callback_Instrument_clearFilterSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearFilterSet(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearFilterSet(const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_clearFilterSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearFilterSet(&__ctx, __del, __cookie);
    }

    void end_clearFilterSet(const ::Ice::AsyncResultPtr&);
    
private:

    void clearFilterSet(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_clearFilterSet(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reloadFilterSet(const ::omero::model::InstrumentPtr& toCopy)
    {
        reloadFilterSet(toCopy, 0);
    }
    void reloadFilterSet(const ::omero::model::InstrumentPtr& toCopy, const ::Ice::Context& __ctx)
    {
        reloadFilterSet(toCopy, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_reloadFilterSet(const ::omero::model::InstrumentPtr& toCopy)
    {
        return begin_reloadFilterSet(toCopy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadFilterSet(const ::omero::model::InstrumentPtr& toCopy, const ::Ice::Context& __ctx)
    {
        return begin_reloadFilterSet(toCopy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadFilterSet(const ::omero::model::InstrumentPtr& toCopy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadFilterSet(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadFilterSet(const ::omero::model::InstrumentPtr& toCopy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadFilterSet(toCopy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadFilterSet(const ::omero::model::InstrumentPtr& toCopy, const ::omero::model::Callback_Instrument_reloadFilterSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadFilterSet(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadFilterSet(const ::omero::model::InstrumentPtr& toCopy, const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_reloadFilterSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadFilterSet(toCopy, &__ctx, __del, __cookie);
    }

    void end_reloadFilterSet(const ::Ice::AsyncResultPtr&);
    
private:

    void reloadFilterSet(const ::omero::model::InstrumentPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reloadFilterSet(const ::omero::model::InstrumentPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unloadOtf()
    {
        unloadOtf(0);
    }
    void unloadOtf(const ::Ice::Context& __ctx)
    {
        unloadOtf(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_unloadOtf()
    {
        return begin_unloadOtf(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadOtf(const ::Ice::Context& __ctx)
    {
        return begin_unloadOtf(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadOtf(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadOtf(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadOtf(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadOtf(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadOtf(const ::omero::model::Callback_Instrument_unloadOtfPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadOtf(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadOtf(const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_unloadOtfPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadOtf(&__ctx, __del, __cookie);
    }

    void end_unloadOtf(const ::Ice::AsyncResultPtr&);
    
private:

    void unloadOtf(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unloadOtf(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int sizeOfOtf()
    {
        return sizeOfOtf(0);
    }
    ::Ice::Int sizeOfOtf(const ::Ice::Context& __ctx)
    {
        return sizeOfOtf(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_sizeOfOtf()
    {
        return begin_sizeOfOtf(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfOtf(const ::Ice::Context& __ctx)
    {
        return begin_sizeOfOtf(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfOtf(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfOtf(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfOtf(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfOtf(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfOtf(const ::omero::model::Callback_Instrument_sizeOfOtfPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfOtf(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfOtf(const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_sizeOfOtfPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfOtf(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_sizeOfOtf(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int sizeOfOtf(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sizeOfOtf(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::InstrumentOtfSeq copyOtf()
    {
        return copyOtf(0);
    }
    ::omero::model::InstrumentOtfSeq copyOtf(const ::Ice::Context& __ctx)
    {
        return copyOtf(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_copyOtf()
    {
        return begin_copyOtf(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyOtf(const ::Ice::Context& __ctx)
    {
        return begin_copyOtf(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyOtf(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyOtf(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyOtf(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyOtf(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyOtf(const ::omero::model::Callback_Instrument_copyOtfPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyOtf(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyOtf(const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_copyOtfPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyOtf(&__ctx, __del, __cookie);
    }

    ::omero::model::InstrumentOtfSeq end_copyOtf(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::InstrumentOtfSeq copyOtf(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_copyOtf(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addOTF(const ::omero::model::OTFPtr& target)
    {
        addOTF(target, 0);
    }
    void addOTF(const ::omero::model::OTFPtr& target, const ::Ice::Context& __ctx)
    {
        addOTF(target, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addOTF(const ::omero::model::OTFPtr& target)
    {
        return begin_addOTF(target, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addOTF(const ::omero::model::OTFPtr& target, const ::Ice::Context& __ctx)
    {
        return begin_addOTF(target, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addOTF(const ::omero::model::OTFPtr& target, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addOTF(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addOTF(const ::omero::model::OTFPtr& target, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addOTF(target, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addOTF(const ::omero::model::OTFPtr& target, const ::omero::model::Callback_Instrument_addOTFPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addOTF(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addOTF(const ::omero::model::OTFPtr& target, const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_addOTFPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addOTF(target, &__ctx, __del, __cookie);
    }

    void end_addOTF(const ::Ice::AsyncResultPtr&);
    
private:

    void addOTF(const ::omero::model::OTFPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addOTF(const ::omero::model::OTFPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addAllOTFSet(const ::omero::model::InstrumentOtfSeq& targets)
    {
        addAllOTFSet(targets, 0);
    }
    void addAllOTFSet(const ::omero::model::InstrumentOtfSeq& targets, const ::Ice::Context& __ctx)
    {
        addAllOTFSet(targets, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addAllOTFSet(const ::omero::model::InstrumentOtfSeq& targets)
    {
        return begin_addAllOTFSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllOTFSet(const ::omero::model::InstrumentOtfSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_addAllOTFSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllOTFSet(const ::omero::model::InstrumentOtfSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllOTFSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllOTFSet(const ::omero::model::InstrumentOtfSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllOTFSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllOTFSet(const ::omero::model::InstrumentOtfSeq& targets, const ::omero::model::Callback_Instrument_addAllOTFSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllOTFSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllOTFSet(const ::omero::model::InstrumentOtfSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_addAllOTFSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllOTFSet(targets, &__ctx, __del, __cookie);
    }

    void end_addAllOTFSet(const ::Ice::AsyncResultPtr&);
    
private:

    void addAllOTFSet(const ::omero::model::InstrumentOtfSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addAllOTFSet(const ::omero::model::InstrumentOtfSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeOTF(const ::omero::model::OTFPtr& theTarget)
    {
        removeOTF(theTarget, 0);
    }
    void removeOTF(const ::omero::model::OTFPtr& theTarget, const ::Ice::Context& __ctx)
    {
        removeOTF(theTarget, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removeOTF(const ::omero::model::OTFPtr& theTarget)
    {
        return begin_removeOTF(theTarget, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeOTF(const ::omero::model::OTFPtr& theTarget, const ::Ice::Context& __ctx)
    {
        return begin_removeOTF(theTarget, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeOTF(const ::omero::model::OTFPtr& theTarget, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeOTF(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeOTF(const ::omero::model::OTFPtr& theTarget, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeOTF(theTarget, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeOTF(const ::omero::model::OTFPtr& theTarget, const ::omero::model::Callback_Instrument_removeOTFPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeOTF(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeOTF(const ::omero::model::OTFPtr& theTarget, const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_removeOTFPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeOTF(theTarget, &__ctx, __del, __cookie);
    }

    void end_removeOTF(const ::Ice::AsyncResultPtr&);
    
private:

    void removeOTF(const ::omero::model::OTFPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeOTF(const ::omero::model::OTFPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeAllOTFSet(const ::omero::model::InstrumentOtfSeq& targets)
    {
        removeAllOTFSet(targets, 0);
    }
    void removeAllOTFSet(const ::omero::model::InstrumentOtfSeq& targets, const ::Ice::Context& __ctx)
    {
        removeAllOTFSet(targets, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removeAllOTFSet(const ::omero::model::InstrumentOtfSeq& targets)
    {
        return begin_removeAllOTFSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllOTFSet(const ::omero::model::InstrumentOtfSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_removeAllOTFSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllOTFSet(const ::omero::model::InstrumentOtfSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllOTFSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllOTFSet(const ::omero::model::InstrumentOtfSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllOTFSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllOTFSet(const ::omero::model::InstrumentOtfSeq& targets, const ::omero::model::Callback_Instrument_removeAllOTFSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllOTFSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllOTFSet(const ::omero::model::InstrumentOtfSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_removeAllOTFSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllOTFSet(targets, &__ctx, __del, __cookie);
    }

    void end_removeAllOTFSet(const ::Ice::AsyncResultPtr&);
    
private:

    void removeAllOTFSet(const ::omero::model::InstrumentOtfSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeAllOTFSet(const ::omero::model::InstrumentOtfSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void clearOtf()
    {
        clearOtf(0);
    }
    void clearOtf(const ::Ice::Context& __ctx)
    {
        clearOtf(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_clearOtf()
    {
        return begin_clearOtf(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearOtf(const ::Ice::Context& __ctx)
    {
        return begin_clearOtf(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearOtf(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearOtf(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearOtf(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearOtf(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearOtf(const ::omero::model::Callback_Instrument_clearOtfPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearOtf(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearOtf(const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_clearOtfPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearOtf(&__ctx, __del, __cookie);
    }

    void end_clearOtf(const ::Ice::AsyncResultPtr&);
    
private:

    void clearOtf(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_clearOtf(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reloadOtf(const ::omero::model::InstrumentPtr& toCopy)
    {
        reloadOtf(toCopy, 0);
    }
    void reloadOtf(const ::omero::model::InstrumentPtr& toCopy, const ::Ice::Context& __ctx)
    {
        reloadOtf(toCopy, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_reloadOtf(const ::omero::model::InstrumentPtr& toCopy)
    {
        return begin_reloadOtf(toCopy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadOtf(const ::omero::model::InstrumentPtr& toCopy, const ::Ice::Context& __ctx)
    {
        return begin_reloadOtf(toCopy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadOtf(const ::omero::model::InstrumentPtr& toCopy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadOtf(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadOtf(const ::omero::model::InstrumentPtr& toCopy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadOtf(toCopy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadOtf(const ::omero::model::InstrumentPtr& toCopy, const ::omero::model::Callback_Instrument_reloadOtfPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadOtf(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadOtf(const ::omero::model::InstrumentPtr& toCopy, const ::Ice::Context& __ctx, const ::omero::model::Callback_Instrument_reloadOtfPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadOtf(toCopy, &__ctx, __del, __cookie);
    }

    void end_reloadOtf(const ::Ice::AsyncResultPtr&);
    
private:

    void reloadOtf(const ::omero::model::InstrumentPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reloadOtf(const ::omero::model::InstrumentPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Instrument> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Instrument*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<Instrument*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Instrument> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Instrument*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<Instrument*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Instrument> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Instrument*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<Instrument*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Instrument> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Instrument*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<Instrument*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Instrument> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Instrument*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<Instrument*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Instrument> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Instrument*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<Instrument*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Instrument> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Instrument*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<Instrument*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Instrument> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Instrument*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<Instrument*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Instrument> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Instrument*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<Instrument*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Instrument> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Instrument*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<Instrument*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Instrument> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Instrument*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<Instrument*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Instrument> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Instrument*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<Instrument*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Instrument> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Instrument*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<Instrument*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Instrument> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Instrument*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<Instrument*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Instrument> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Instrument*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<Instrument*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Instrument> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Instrument*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<Instrument*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Instrument> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Instrument*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<Instrument*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Instrument> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Instrument*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<Instrument*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Instrument> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Instrument*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<Instrument*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

namespace IceDelegate
{

namespace omero
{

namespace model
{

class Instrument : virtual public ::IceDelegate::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*) = 0;

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::model::MicroscopePtr getMicroscope(const ::Ice::Context*) = 0;

    virtual void setMicroscope(const ::omero::model::MicroscopePtr&, const ::Ice::Context*) = 0;

    virtual void unloadDetector(const ::Ice::Context*) = 0;

    virtual ::Ice::Int sizeOfDetector(const ::Ice::Context*) = 0;

    virtual ::omero::model::InstrumentDetectorSeq copyDetector(const ::Ice::Context*) = 0;

    virtual void addDetector(const ::omero::model::DetectorPtr&, const ::Ice::Context*) = 0;

    virtual void addAllDetectorSet(const ::omero::model::InstrumentDetectorSeq&, const ::Ice::Context*) = 0;

    virtual void removeDetector(const ::omero::model::DetectorPtr&, const ::Ice::Context*) = 0;

    virtual void removeAllDetectorSet(const ::omero::model::InstrumentDetectorSeq&, const ::Ice::Context*) = 0;

    virtual void clearDetector(const ::Ice::Context*) = 0;

    virtual void reloadDetector(const ::omero::model::InstrumentPtr&, const ::Ice::Context*) = 0;

    virtual void unloadObjective(const ::Ice::Context*) = 0;

    virtual ::Ice::Int sizeOfObjective(const ::Ice::Context*) = 0;

    virtual ::omero::model::InstrumentObjectiveSeq copyObjective(const ::Ice::Context*) = 0;

    virtual void addObjective(const ::omero::model::ObjectivePtr&, const ::Ice::Context*) = 0;

    virtual void addAllObjectiveSet(const ::omero::model::InstrumentObjectiveSeq&, const ::Ice::Context*) = 0;

    virtual void removeObjective(const ::omero::model::ObjectivePtr&, const ::Ice::Context*) = 0;

    virtual void removeAllObjectiveSet(const ::omero::model::InstrumentObjectiveSeq&, const ::Ice::Context*) = 0;

    virtual void clearObjective(const ::Ice::Context*) = 0;

    virtual void reloadObjective(const ::omero::model::InstrumentPtr&, const ::Ice::Context*) = 0;

    virtual void unloadLightSource(const ::Ice::Context*) = 0;

    virtual ::Ice::Int sizeOfLightSource(const ::Ice::Context*) = 0;

    virtual ::omero::model::InstrumentLightSourceSeq copyLightSource(const ::Ice::Context*) = 0;

    virtual void addLightSource(const ::omero::model::LightSourcePtr&, const ::Ice::Context*) = 0;

    virtual void addAllLightSourceSet(const ::omero::model::InstrumentLightSourceSeq&, const ::Ice::Context*) = 0;

    virtual void removeLightSource(const ::omero::model::LightSourcePtr&, const ::Ice::Context*) = 0;

    virtual void removeAllLightSourceSet(const ::omero::model::InstrumentLightSourceSeq&, const ::Ice::Context*) = 0;

    virtual void clearLightSource(const ::Ice::Context*) = 0;

    virtual void reloadLightSource(const ::omero::model::InstrumentPtr&, const ::Ice::Context*) = 0;

    virtual void unloadFilter(const ::Ice::Context*) = 0;

    virtual ::Ice::Int sizeOfFilter(const ::Ice::Context*) = 0;

    virtual ::omero::model::InstrumentFilterSeq copyFilter(const ::Ice::Context*) = 0;

    virtual void addFilter(const ::omero::model::FilterPtr&, const ::Ice::Context*) = 0;

    virtual void addAllFilterSet(const ::omero::model::InstrumentFilterSeq&, const ::Ice::Context*) = 0;

    virtual void removeFilter(const ::omero::model::FilterPtr&, const ::Ice::Context*) = 0;

    virtual void removeAllFilterSet(const ::omero::model::InstrumentFilterSeq&, const ::Ice::Context*) = 0;

    virtual void clearFilter(const ::Ice::Context*) = 0;

    virtual void reloadFilter(const ::omero::model::InstrumentPtr&, const ::Ice::Context*) = 0;

    virtual void unloadDichroic(const ::Ice::Context*) = 0;

    virtual ::Ice::Int sizeOfDichroic(const ::Ice::Context*) = 0;

    virtual ::omero::model::InstrumentDichroicSeq copyDichroic(const ::Ice::Context*) = 0;

    virtual void addDichroic(const ::omero::model::DichroicPtr&, const ::Ice::Context*) = 0;

    virtual void addAllDichroicSet(const ::omero::model::InstrumentDichroicSeq&, const ::Ice::Context*) = 0;

    virtual void removeDichroic(const ::omero::model::DichroicPtr&, const ::Ice::Context*) = 0;

    virtual void removeAllDichroicSet(const ::omero::model::InstrumentDichroicSeq&, const ::Ice::Context*) = 0;

    virtual void clearDichroic(const ::Ice::Context*) = 0;

    virtual void reloadDichroic(const ::omero::model::InstrumentPtr&, const ::Ice::Context*) = 0;

    virtual void unloadFilterSet(const ::Ice::Context*) = 0;

    virtual ::Ice::Int sizeOfFilterSet(const ::Ice::Context*) = 0;

    virtual ::omero::model::InstrumentFilterSetSeq copyFilterSet(const ::Ice::Context*) = 0;

    virtual void addFilterSet(const ::omero::model::FilterSetPtr&, const ::Ice::Context*) = 0;

    virtual void addAllFilterSetSet(const ::omero::model::InstrumentFilterSetSeq&, const ::Ice::Context*) = 0;

    virtual void removeFilterSet(const ::omero::model::FilterSetPtr&, const ::Ice::Context*) = 0;

    virtual void removeAllFilterSetSet(const ::omero::model::InstrumentFilterSetSeq&, const ::Ice::Context*) = 0;

    virtual void clearFilterSet(const ::Ice::Context*) = 0;

    virtual void reloadFilterSet(const ::omero::model::InstrumentPtr&, const ::Ice::Context*) = 0;

    virtual void unloadOtf(const ::Ice::Context*) = 0;

    virtual ::Ice::Int sizeOfOtf(const ::Ice::Context*) = 0;

    virtual ::omero::model::InstrumentOtfSeq copyOtf(const ::Ice::Context*) = 0;

    virtual void addOTF(const ::omero::model::OTFPtr&, const ::Ice::Context*) = 0;

    virtual void addAllOTFSet(const ::omero::model::InstrumentOtfSeq&, const ::Ice::Context*) = 0;

    virtual void removeOTF(const ::omero::model::OTFPtr&, const ::Ice::Context*) = 0;

    virtual void removeAllOTFSet(const ::omero::model::InstrumentOtfSeq&, const ::Ice::Context*) = 0;

    virtual void clearOtf(const ::Ice::Context*) = 0;

    virtual void reloadOtf(const ::omero::model::InstrumentPtr&, const ::Ice::Context*) = 0;
};

}

}

}

namespace IceDelegateM
{

namespace omero
{

namespace model
{

class Instrument : virtual public ::IceDelegate::omero::model::Instrument,
                   virtual public ::IceDelegateM::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::model::MicroscopePtr getMicroscope(const ::Ice::Context*);

    virtual void setMicroscope(const ::omero::model::MicroscopePtr&, const ::Ice::Context*);

    virtual void unloadDetector(const ::Ice::Context*);

    virtual ::Ice::Int sizeOfDetector(const ::Ice::Context*);

    virtual ::omero::model::InstrumentDetectorSeq copyDetector(const ::Ice::Context*);

    virtual void addDetector(const ::omero::model::DetectorPtr&, const ::Ice::Context*);

    virtual void addAllDetectorSet(const ::omero::model::InstrumentDetectorSeq&, const ::Ice::Context*);

    virtual void removeDetector(const ::omero::model::DetectorPtr&, const ::Ice::Context*);

    virtual void removeAllDetectorSet(const ::omero::model::InstrumentDetectorSeq&, const ::Ice::Context*);

    virtual void clearDetector(const ::Ice::Context*);

    virtual void reloadDetector(const ::omero::model::InstrumentPtr&, const ::Ice::Context*);

    virtual void unloadObjective(const ::Ice::Context*);

    virtual ::Ice::Int sizeOfObjective(const ::Ice::Context*);

    virtual ::omero::model::InstrumentObjectiveSeq copyObjective(const ::Ice::Context*);

    virtual void addObjective(const ::omero::model::ObjectivePtr&, const ::Ice::Context*);

    virtual void addAllObjectiveSet(const ::omero::model::InstrumentObjectiveSeq&, const ::Ice::Context*);

    virtual void removeObjective(const ::omero::model::ObjectivePtr&, const ::Ice::Context*);

    virtual void removeAllObjectiveSet(const ::omero::model::InstrumentObjectiveSeq&, const ::Ice::Context*);

    virtual void clearObjective(const ::Ice::Context*);

    virtual void reloadObjective(const ::omero::model::InstrumentPtr&, const ::Ice::Context*);

    virtual void unloadLightSource(const ::Ice::Context*);

    virtual ::Ice::Int sizeOfLightSource(const ::Ice::Context*);

    virtual ::omero::model::InstrumentLightSourceSeq copyLightSource(const ::Ice::Context*);

    virtual void addLightSource(const ::omero::model::LightSourcePtr&, const ::Ice::Context*);

    virtual void addAllLightSourceSet(const ::omero::model::InstrumentLightSourceSeq&, const ::Ice::Context*);

    virtual void removeLightSource(const ::omero::model::LightSourcePtr&, const ::Ice::Context*);

    virtual void removeAllLightSourceSet(const ::omero::model::InstrumentLightSourceSeq&, const ::Ice::Context*);

    virtual void clearLightSource(const ::Ice::Context*);

    virtual void reloadLightSource(const ::omero::model::InstrumentPtr&, const ::Ice::Context*);

    virtual void unloadFilter(const ::Ice::Context*);

    virtual ::Ice::Int sizeOfFilter(const ::Ice::Context*);

    virtual ::omero::model::InstrumentFilterSeq copyFilter(const ::Ice::Context*);

    virtual void addFilter(const ::omero::model::FilterPtr&, const ::Ice::Context*);

    virtual void addAllFilterSet(const ::omero::model::InstrumentFilterSeq&, const ::Ice::Context*);

    virtual void removeFilter(const ::omero::model::FilterPtr&, const ::Ice::Context*);

    virtual void removeAllFilterSet(const ::omero::model::InstrumentFilterSeq&, const ::Ice::Context*);

    virtual void clearFilter(const ::Ice::Context*);

    virtual void reloadFilter(const ::omero::model::InstrumentPtr&, const ::Ice::Context*);

    virtual void unloadDichroic(const ::Ice::Context*);

    virtual ::Ice::Int sizeOfDichroic(const ::Ice::Context*);

    virtual ::omero::model::InstrumentDichroicSeq copyDichroic(const ::Ice::Context*);

    virtual void addDichroic(const ::omero::model::DichroicPtr&, const ::Ice::Context*);

    virtual void addAllDichroicSet(const ::omero::model::InstrumentDichroicSeq&, const ::Ice::Context*);

    virtual void removeDichroic(const ::omero::model::DichroicPtr&, const ::Ice::Context*);

    virtual void removeAllDichroicSet(const ::omero::model::InstrumentDichroicSeq&, const ::Ice::Context*);

    virtual void clearDichroic(const ::Ice::Context*);

    virtual void reloadDichroic(const ::omero::model::InstrumentPtr&, const ::Ice::Context*);

    virtual void unloadFilterSet(const ::Ice::Context*);

    virtual ::Ice::Int sizeOfFilterSet(const ::Ice::Context*);

    virtual ::omero::model::InstrumentFilterSetSeq copyFilterSet(const ::Ice::Context*);

    virtual void addFilterSet(const ::omero::model::FilterSetPtr&, const ::Ice::Context*);

    virtual void addAllFilterSetSet(const ::omero::model::InstrumentFilterSetSeq&, const ::Ice::Context*);

    virtual void removeFilterSet(const ::omero::model::FilterSetPtr&, const ::Ice::Context*);

    virtual void removeAllFilterSetSet(const ::omero::model::InstrumentFilterSetSeq&, const ::Ice::Context*);

    virtual void clearFilterSet(const ::Ice::Context*);

    virtual void reloadFilterSet(const ::omero::model::InstrumentPtr&, const ::Ice::Context*);

    virtual void unloadOtf(const ::Ice::Context*);

    virtual ::Ice::Int sizeOfOtf(const ::Ice::Context*);

    virtual ::omero::model::InstrumentOtfSeq copyOtf(const ::Ice::Context*);

    virtual void addOTF(const ::omero::model::OTFPtr&, const ::Ice::Context*);

    virtual void addAllOTFSet(const ::omero::model::InstrumentOtfSeq&, const ::Ice::Context*);

    virtual void removeOTF(const ::omero::model::OTFPtr&, const ::Ice::Context*);

    virtual void removeAllOTFSet(const ::omero::model::InstrumentOtfSeq&, const ::Ice::Context*);

    virtual void clearOtf(const ::Ice::Context*);

    virtual void reloadOtf(const ::omero::model::InstrumentPtr&, const ::Ice::Context*);
};

}

}

}

namespace IceDelegateD
{

namespace omero
{

namespace model
{

class Instrument : virtual public ::IceDelegate::omero::model::Instrument,
                   virtual public ::IceDelegateD::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::model::MicroscopePtr getMicroscope(const ::Ice::Context*);

    virtual void setMicroscope(const ::omero::model::MicroscopePtr&, const ::Ice::Context*);

    virtual void unloadDetector(const ::Ice::Context*);

    virtual ::Ice::Int sizeOfDetector(const ::Ice::Context*);

    virtual ::omero::model::InstrumentDetectorSeq copyDetector(const ::Ice::Context*);

    virtual void addDetector(const ::omero::model::DetectorPtr&, const ::Ice::Context*);

    virtual void addAllDetectorSet(const ::omero::model::InstrumentDetectorSeq&, const ::Ice::Context*);

    virtual void removeDetector(const ::omero::model::DetectorPtr&, const ::Ice::Context*);

    virtual void removeAllDetectorSet(const ::omero::model::InstrumentDetectorSeq&, const ::Ice::Context*);

    virtual void clearDetector(const ::Ice::Context*);

    virtual void reloadDetector(const ::omero::model::InstrumentPtr&, const ::Ice::Context*);

    virtual void unloadObjective(const ::Ice::Context*);

    virtual ::Ice::Int sizeOfObjective(const ::Ice::Context*);

    virtual ::omero::model::InstrumentObjectiveSeq copyObjective(const ::Ice::Context*);

    virtual void addObjective(const ::omero::model::ObjectivePtr&, const ::Ice::Context*);

    virtual void addAllObjectiveSet(const ::omero::model::InstrumentObjectiveSeq&, const ::Ice::Context*);

    virtual void removeObjective(const ::omero::model::ObjectivePtr&, const ::Ice::Context*);

    virtual void removeAllObjectiveSet(const ::omero::model::InstrumentObjectiveSeq&, const ::Ice::Context*);

    virtual void clearObjective(const ::Ice::Context*);

    virtual void reloadObjective(const ::omero::model::InstrumentPtr&, const ::Ice::Context*);

    virtual void unloadLightSource(const ::Ice::Context*);

    virtual ::Ice::Int sizeOfLightSource(const ::Ice::Context*);

    virtual ::omero::model::InstrumentLightSourceSeq copyLightSource(const ::Ice::Context*);

    virtual void addLightSource(const ::omero::model::LightSourcePtr&, const ::Ice::Context*);

    virtual void addAllLightSourceSet(const ::omero::model::InstrumentLightSourceSeq&, const ::Ice::Context*);

    virtual void removeLightSource(const ::omero::model::LightSourcePtr&, const ::Ice::Context*);

    virtual void removeAllLightSourceSet(const ::omero::model::InstrumentLightSourceSeq&, const ::Ice::Context*);

    virtual void clearLightSource(const ::Ice::Context*);

    virtual void reloadLightSource(const ::omero::model::InstrumentPtr&, const ::Ice::Context*);

    virtual void unloadFilter(const ::Ice::Context*);

    virtual ::Ice::Int sizeOfFilter(const ::Ice::Context*);

    virtual ::omero::model::InstrumentFilterSeq copyFilter(const ::Ice::Context*);

    virtual void addFilter(const ::omero::model::FilterPtr&, const ::Ice::Context*);

    virtual void addAllFilterSet(const ::omero::model::InstrumentFilterSeq&, const ::Ice::Context*);

    virtual void removeFilter(const ::omero::model::FilterPtr&, const ::Ice::Context*);

    virtual void removeAllFilterSet(const ::omero::model::InstrumentFilterSeq&, const ::Ice::Context*);

    virtual void clearFilter(const ::Ice::Context*);

    virtual void reloadFilter(const ::omero::model::InstrumentPtr&, const ::Ice::Context*);

    virtual void unloadDichroic(const ::Ice::Context*);

    virtual ::Ice::Int sizeOfDichroic(const ::Ice::Context*);

    virtual ::omero::model::InstrumentDichroicSeq copyDichroic(const ::Ice::Context*);

    virtual void addDichroic(const ::omero::model::DichroicPtr&, const ::Ice::Context*);

    virtual void addAllDichroicSet(const ::omero::model::InstrumentDichroicSeq&, const ::Ice::Context*);

    virtual void removeDichroic(const ::omero::model::DichroicPtr&, const ::Ice::Context*);

    virtual void removeAllDichroicSet(const ::omero::model::InstrumentDichroicSeq&, const ::Ice::Context*);

    virtual void clearDichroic(const ::Ice::Context*);

    virtual void reloadDichroic(const ::omero::model::InstrumentPtr&, const ::Ice::Context*);

    virtual void unloadFilterSet(const ::Ice::Context*);

    virtual ::Ice::Int sizeOfFilterSet(const ::Ice::Context*);

    virtual ::omero::model::InstrumentFilterSetSeq copyFilterSet(const ::Ice::Context*);

    virtual void addFilterSet(const ::omero::model::FilterSetPtr&, const ::Ice::Context*);

    virtual void addAllFilterSetSet(const ::omero::model::InstrumentFilterSetSeq&, const ::Ice::Context*);

    virtual void removeFilterSet(const ::omero::model::FilterSetPtr&, const ::Ice::Context*);

    virtual void removeAllFilterSetSet(const ::omero::model::InstrumentFilterSetSeq&, const ::Ice::Context*);

    virtual void clearFilterSet(const ::Ice::Context*);

    virtual void reloadFilterSet(const ::omero::model::InstrumentPtr&, const ::Ice::Context*);

    virtual void unloadOtf(const ::Ice::Context*);

    virtual ::Ice::Int sizeOfOtf(const ::Ice::Context*);

    virtual ::omero::model::InstrumentOtfSeq copyOtf(const ::Ice::Context*);

    virtual void addOTF(const ::omero::model::OTFPtr&, const ::Ice::Context*);

    virtual void addAllOTFSet(const ::omero::model::InstrumentOtfSeq&, const ::Ice::Context*);

    virtual void removeOTF(const ::omero::model::OTFPtr&, const ::Ice::Context*);

    virtual void removeAllOTFSet(const ::omero::model::InstrumentOtfSeq&, const ::Ice::Context*);

    virtual void clearOtf(const ::Ice::Context*);

    virtual void reloadOtf(const ::omero::model::InstrumentPtr&, const ::Ice::Context*);
};

}

}

}

namespace omero
{

namespace model
{

class Instrument : public ::omero::model::IObject
{
public:

    typedef InstrumentPrx ProxyType;
    typedef InstrumentPtr PointerType;
    
    Instrument() {}
    Instrument(const ::omero::RLongPtr&, const ::omero::model::DetailsPtr&, bool, const ::omero::RIntPtr&, const ::omero::model::MicroscopePtr&, const ::omero::model::InstrumentDetectorSeq&, bool, const ::omero::model::InstrumentObjectiveSeq&, bool, const ::omero::model::InstrumentLightSourceSeq&, bool, const ::omero::model::InstrumentFilterSeq&, bool, const ::omero::model::InstrumentDichroicSeq&, bool, const ::omero::model::InstrumentFilterSetSeq&, bool, const ::omero::model::InstrumentOtfSeq&, bool);
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    virtual ::omero::RIntPtr getVersion(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::MicroscopePtr getMicroscope(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getMicroscope(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setMicroscope(const ::omero::model::MicroscopePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setMicroscope(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unloadDetector(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unloadDetector(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int sizeOfDetector(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sizeOfDetector(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::InstrumentDetectorSeq copyDetector(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___copyDetector(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addDetector(const ::omero::model::DetectorPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addDetector(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addAllDetectorSet(const ::omero::model::InstrumentDetectorSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addAllDetectorSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeDetector(const ::omero::model::DetectorPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeDetector(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeAllDetectorSet(const ::omero::model::InstrumentDetectorSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeAllDetectorSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void clearDetector(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___clearDetector(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reloadDetector(const ::omero::model::InstrumentPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reloadDetector(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unloadObjective(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unloadObjective(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int sizeOfObjective(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sizeOfObjective(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::InstrumentObjectiveSeq copyObjective(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___copyObjective(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addObjective(const ::omero::model::ObjectivePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addObjective(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addAllObjectiveSet(const ::omero::model::InstrumentObjectiveSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addAllObjectiveSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeObjective(const ::omero::model::ObjectivePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeObjective(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeAllObjectiveSet(const ::omero::model::InstrumentObjectiveSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeAllObjectiveSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void clearObjective(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___clearObjective(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reloadObjective(const ::omero::model::InstrumentPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reloadObjective(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unloadLightSource(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unloadLightSource(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int sizeOfLightSource(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sizeOfLightSource(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::InstrumentLightSourceSeq copyLightSource(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___copyLightSource(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addLightSource(const ::omero::model::LightSourcePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addLightSource(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addAllLightSourceSet(const ::omero::model::InstrumentLightSourceSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addAllLightSourceSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeLightSource(const ::omero::model::LightSourcePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeLightSource(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeAllLightSourceSet(const ::omero::model::InstrumentLightSourceSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeAllLightSourceSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void clearLightSource(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___clearLightSource(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reloadLightSource(const ::omero::model::InstrumentPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reloadLightSource(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unloadFilter(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unloadFilter(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int sizeOfFilter(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sizeOfFilter(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::InstrumentFilterSeq copyFilter(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___copyFilter(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addFilter(const ::omero::model::FilterPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addFilter(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addAllFilterSet(const ::omero::model::InstrumentFilterSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addAllFilterSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeFilter(const ::omero::model::FilterPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeFilter(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeAllFilterSet(const ::omero::model::InstrumentFilterSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeAllFilterSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void clearFilter(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___clearFilter(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reloadFilter(const ::omero::model::InstrumentPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reloadFilter(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unloadDichroic(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unloadDichroic(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int sizeOfDichroic(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sizeOfDichroic(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::InstrumentDichroicSeq copyDichroic(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___copyDichroic(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addDichroic(const ::omero::model::DichroicPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addDichroic(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addAllDichroicSet(const ::omero::model::InstrumentDichroicSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addAllDichroicSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeDichroic(const ::omero::model::DichroicPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeDichroic(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeAllDichroicSet(const ::omero::model::InstrumentDichroicSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeAllDichroicSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void clearDichroic(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___clearDichroic(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reloadDichroic(const ::omero::model::InstrumentPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reloadDichroic(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unloadFilterSet(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unloadFilterSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int sizeOfFilterSet(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sizeOfFilterSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::InstrumentFilterSetSeq copyFilterSet(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___copyFilterSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addFilterSet(const ::omero::model::FilterSetPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addFilterSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addAllFilterSetSet(const ::omero::model::InstrumentFilterSetSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addAllFilterSetSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeFilterSet(const ::omero::model::FilterSetPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeFilterSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeAllFilterSetSet(const ::omero::model::InstrumentFilterSetSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeAllFilterSetSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void clearFilterSet(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___clearFilterSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reloadFilterSet(const ::omero::model::InstrumentPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reloadFilterSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unloadOtf(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unloadOtf(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int sizeOfOtf(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sizeOfOtf(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::InstrumentOtfSeq copyOtf(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___copyOtf(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addOTF(const ::omero::model::OTFPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addOTF(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addAllOTFSet(const ::omero::model::InstrumentOtfSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addAllOTFSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeOTF(const ::omero::model::OTFPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeOTF(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeAllOTFSet(const ::omero::model::InstrumentOtfSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeAllOTFSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void clearOtf(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___clearOtf(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reloadOtf(const ::omero::model::InstrumentPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reloadOtf(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif

protected:

    ::omero::RIntPtr version;

    ::omero::model::MicroscopePtr microscope;

    ::omero::model::InstrumentDetectorSeq detectorSeq;

    bool detectorLoaded;

    ::omero::model::InstrumentObjectiveSeq objectiveSeq;

    bool objectiveLoaded;

    ::omero::model::InstrumentLightSourceSeq lightSourceSeq;

    bool lightSourceLoaded;

    ::omero::model::InstrumentFilterSeq filterSeq;

    bool filterLoaded;

    ::omero::model::InstrumentDichroicSeq dichroicSeq;

    bool dichroicLoaded;

    ::omero::model::InstrumentFilterSetSeq filterSetSeq;

    bool filterSetLoaded;

    ::omero::model::InstrumentOtfSeq otfSeq;

    bool otfLoaded;
};

inline bool operator==(const Instrument& l, const Instrument& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Instrument& l, const Instrument& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

}

namespace omero
{

namespace model
{

template<class T>
class CallbackNC_Instrument_getVersion : public Callback_Instrument_getVersion_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RIntPtr&);

    CallbackNC_Instrument_getVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::InstrumentPrx __proxy = ::omero::model::InstrumentPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Instrument_getVersionPtr
newCallback_Instrument_getVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_getVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_getVersionPtr
newCallback_Instrument_getVersion(T* instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_getVersion<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_getVersion : public Callback_Instrument_getVersion_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RIntPtr&, const CT&);

    Callback_Instrument_getVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::InstrumentPrx __proxy = ::omero::model::InstrumentPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Instrument_getVersionPtr
newCallback_Instrument_getVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_getVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_getVersionPtr
newCallback_Instrument_getVersion(T* instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_getVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_setVersion : public Callback_Instrument_setVersion_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Instrument_setVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Instrument_setVersionPtr
newCallback_Instrument_setVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_setVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_setVersionPtr
newCallback_Instrument_setVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_setVersion<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Instrument_setVersionPtr
newCallback_Instrument_setVersion(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_setVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_setVersionPtr
newCallback_Instrument_setVersion(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_setVersion<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_setVersion : public Callback_Instrument_setVersion_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Instrument_setVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Instrument_setVersionPtr
newCallback_Instrument_setVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_setVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_setVersionPtr
newCallback_Instrument_setVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_setVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_setVersionPtr
newCallback_Instrument_setVersion(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_setVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_setVersionPtr
newCallback_Instrument_setVersion(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_setVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_getMicroscope : public Callback_Instrument_getMicroscope_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::MicroscopePtr&);

    CallbackNC_Instrument_getMicroscope(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::InstrumentPrx __proxy = ::omero::model::InstrumentPrx::uncheckedCast(__result->getProxy());
        ::omero::model::MicroscopePtr __ret;
        try
        {
            __ret = __proxy->end_getMicroscope(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Instrument_getMicroscopePtr
newCallback_Instrument_getMicroscope(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::MicroscopePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_getMicroscope<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_getMicroscopePtr
newCallback_Instrument_getMicroscope(T* instance, void (T::*cb)(const ::omero::model::MicroscopePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_getMicroscope<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_getMicroscope : public Callback_Instrument_getMicroscope_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::MicroscopePtr&, const CT&);

    Callback_Instrument_getMicroscope(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::InstrumentPrx __proxy = ::omero::model::InstrumentPrx::uncheckedCast(__result->getProxy());
        ::omero::model::MicroscopePtr __ret;
        try
        {
            __ret = __proxy->end_getMicroscope(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Instrument_getMicroscopePtr
newCallback_Instrument_getMicroscope(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::MicroscopePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_getMicroscope<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_getMicroscopePtr
newCallback_Instrument_getMicroscope(T* instance, void (T::*cb)(const ::omero::model::MicroscopePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_getMicroscope<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_setMicroscope : public Callback_Instrument_setMicroscope_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Instrument_setMicroscope(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Instrument_setMicroscopePtr
newCallback_Instrument_setMicroscope(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_setMicroscope<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_setMicroscopePtr
newCallback_Instrument_setMicroscope(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_setMicroscope<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Instrument_setMicroscopePtr
newCallback_Instrument_setMicroscope(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_setMicroscope<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_setMicroscopePtr
newCallback_Instrument_setMicroscope(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_setMicroscope<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_setMicroscope : public Callback_Instrument_setMicroscope_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Instrument_setMicroscope(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Instrument_setMicroscopePtr
newCallback_Instrument_setMicroscope(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_setMicroscope<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_setMicroscopePtr
newCallback_Instrument_setMicroscope(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_setMicroscope<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_setMicroscopePtr
newCallback_Instrument_setMicroscope(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_setMicroscope<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_setMicroscopePtr
newCallback_Instrument_setMicroscope(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_setMicroscope<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_unloadDetector : public Callback_Instrument_unloadDetector_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Instrument_unloadDetector(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Instrument_unloadDetectorPtr
newCallback_Instrument_unloadDetector(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_unloadDetector<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_unloadDetectorPtr
newCallback_Instrument_unloadDetector(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_unloadDetector<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Instrument_unloadDetectorPtr
newCallback_Instrument_unloadDetector(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_unloadDetector<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_unloadDetectorPtr
newCallback_Instrument_unloadDetector(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_unloadDetector<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_unloadDetector : public Callback_Instrument_unloadDetector_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Instrument_unloadDetector(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Instrument_unloadDetectorPtr
newCallback_Instrument_unloadDetector(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_unloadDetector<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_unloadDetectorPtr
newCallback_Instrument_unloadDetector(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_unloadDetector<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_unloadDetectorPtr
newCallback_Instrument_unloadDetector(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_unloadDetector<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_unloadDetectorPtr
newCallback_Instrument_unloadDetector(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_unloadDetector<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_sizeOfDetector : public Callback_Instrument_sizeOfDetector_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Instrument_sizeOfDetector(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::InstrumentPrx __proxy = ::omero::model::InstrumentPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfDetector(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Instrument_sizeOfDetectorPtr
newCallback_Instrument_sizeOfDetector(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_sizeOfDetector<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_sizeOfDetectorPtr
newCallback_Instrument_sizeOfDetector(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_sizeOfDetector<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_sizeOfDetector : public Callback_Instrument_sizeOfDetector_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Instrument_sizeOfDetector(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::InstrumentPrx __proxy = ::omero::model::InstrumentPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfDetector(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Instrument_sizeOfDetectorPtr
newCallback_Instrument_sizeOfDetector(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_sizeOfDetector<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_sizeOfDetectorPtr
newCallback_Instrument_sizeOfDetector(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_sizeOfDetector<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_copyDetector : public Callback_Instrument_copyDetector_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::InstrumentDetectorSeq&);

    CallbackNC_Instrument_copyDetector(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::InstrumentPrx __proxy = ::omero::model::InstrumentPrx::uncheckedCast(__result->getProxy());
        ::omero::model::InstrumentDetectorSeq __ret;
        try
        {
            __ret = __proxy->end_copyDetector(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Instrument_copyDetectorPtr
newCallback_Instrument_copyDetector(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::InstrumentDetectorSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_copyDetector<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_copyDetectorPtr
newCallback_Instrument_copyDetector(T* instance, void (T::*cb)(const ::omero::model::InstrumentDetectorSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_copyDetector<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_copyDetector : public Callback_Instrument_copyDetector_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::InstrumentDetectorSeq&, const CT&);

    Callback_Instrument_copyDetector(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::InstrumentPrx __proxy = ::omero::model::InstrumentPrx::uncheckedCast(__result->getProxy());
        ::omero::model::InstrumentDetectorSeq __ret;
        try
        {
            __ret = __proxy->end_copyDetector(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Instrument_copyDetectorPtr
newCallback_Instrument_copyDetector(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::InstrumentDetectorSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_copyDetector<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_copyDetectorPtr
newCallback_Instrument_copyDetector(T* instance, void (T::*cb)(const ::omero::model::InstrumentDetectorSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_copyDetector<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_addDetector : public Callback_Instrument_addDetector_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Instrument_addDetector(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Instrument_addDetectorPtr
newCallback_Instrument_addDetector(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_addDetector<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_addDetectorPtr
newCallback_Instrument_addDetector(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_addDetector<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Instrument_addDetectorPtr
newCallback_Instrument_addDetector(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_addDetector<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_addDetectorPtr
newCallback_Instrument_addDetector(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_addDetector<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_addDetector : public Callback_Instrument_addDetector_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Instrument_addDetector(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Instrument_addDetectorPtr
newCallback_Instrument_addDetector(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_addDetector<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_addDetectorPtr
newCallback_Instrument_addDetector(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_addDetector<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_addDetectorPtr
newCallback_Instrument_addDetector(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_addDetector<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_addDetectorPtr
newCallback_Instrument_addDetector(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_addDetector<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_addAllDetectorSet : public Callback_Instrument_addAllDetectorSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Instrument_addAllDetectorSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Instrument_addAllDetectorSetPtr
newCallback_Instrument_addAllDetectorSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_addAllDetectorSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_addAllDetectorSetPtr
newCallback_Instrument_addAllDetectorSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_addAllDetectorSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Instrument_addAllDetectorSetPtr
newCallback_Instrument_addAllDetectorSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_addAllDetectorSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_addAllDetectorSetPtr
newCallback_Instrument_addAllDetectorSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_addAllDetectorSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_addAllDetectorSet : public Callback_Instrument_addAllDetectorSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Instrument_addAllDetectorSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Instrument_addAllDetectorSetPtr
newCallback_Instrument_addAllDetectorSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_addAllDetectorSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_addAllDetectorSetPtr
newCallback_Instrument_addAllDetectorSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_addAllDetectorSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_addAllDetectorSetPtr
newCallback_Instrument_addAllDetectorSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_addAllDetectorSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_addAllDetectorSetPtr
newCallback_Instrument_addAllDetectorSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_addAllDetectorSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_removeDetector : public Callback_Instrument_removeDetector_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Instrument_removeDetector(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Instrument_removeDetectorPtr
newCallback_Instrument_removeDetector(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_removeDetector<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_removeDetectorPtr
newCallback_Instrument_removeDetector(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_removeDetector<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Instrument_removeDetectorPtr
newCallback_Instrument_removeDetector(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_removeDetector<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_removeDetectorPtr
newCallback_Instrument_removeDetector(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_removeDetector<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_removeDetector : public Callback_Instrument_removeDetector_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Instrument_removeDetector(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Instrument_removeDetectorPtr
newCallback_Instrument_removeDetector(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_removeDetector<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_removeDetectorPtr
newCallback_Instrument_removeDetector(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_removeDetector<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_removeDetectorPtr
newCallback_Instrument_removeDetector(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_removeDetector<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_removeDetectorPtr
newCallback_Instrument_removeDetector(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_removeDetector<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_removeAllDetectorSet : public Callback_Instrument_removeAllDetectorSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Instrument_removeAllDetectorSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Instrument_removeAllDetectorSetPtr
newCallback_Instrument_removeAllDetectorSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_removeAllDetectorSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_removeAllDetectorSetPtr
newCallback_Instrument_removeAllDetectorSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_removeAllDetectorSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Instrument_removeAllDetectorSetPtr
newCallback_Instrument_removeAllDetectorSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_removeAllDetectorSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_removeAllDetectorSetPtr
newCallback_Instrument_removeAllDetectorSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_removeAllDetectorSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_removeAllDetectorSet : public Callback_Instrument_removeAllDetectorSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Instrument_removeAllDetectorSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Instrument_removeAllDetectorSetPtr
newCallback_Instrument_removeAllDetectorSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_removeAllDetectorSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_removeAllDetectorSetPtr
newCallback_Instrument_removeAllDetectorSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_removeAllDetectorSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_removeAllDetectorSetPtr
newCallback_Instrument_removeAllDetectorSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_removeAllDetectorSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_removeAllDetectorSetPtr
newCallback_Instrument_removeAllDetectorSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_removeAllDetectorSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_clearDetector : public Callback_Instrument_clearDetector_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Instrument_clearDetector(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Instrument_clearDetectorPtr
newCallback_Instrument_clearDetector(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_clearDetector<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_clearDetectorPtr
newCallback_Instrument_clearDetector(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_clearDetector<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Instrument_clearDetectorPtr
newCallback_Instrument_clearDetector(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_clearDetector<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_clearDetectorPtr
newCallback_Instrument_clearDetector(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_clearDetector<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_clearDetector : public Callback_Instrument_clearDetector_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Instrument_clearDetector(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Instrument_clearDetectorPtr
newCallback_Instrument_clearDetector(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_clearDetector<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_clearDetectorPtr
newCallback_Instrument_clearDetector(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_clearDetector<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_clearDetectorPtr
newCallback_Instrument_clearDetector(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_clearDetector<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_clearDetectorPtr
newCallback_Instrument_clearDetector(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_clearDetector<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_reloadDetector : public Callback_Instrument_reloadDetector_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Instrument_reloadDetector(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Instrument_reloadDetectorPtr
newCallback_Instrument_reloadDetector(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_reloadDetector<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_reloadDetectorPtr
newCallback_Instrument_reloadDetector(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_reloadDetector<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Instrument_reloadDetectorPtr
newCallback_Instrument_reloadDetector(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_reloadDetector<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_reloadDetectorPtr
newCallback_Instrument_reloadDetector(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_reloadDetector<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_reloadDetector : public Callback_Instrument_reloadDetector_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Instrument_reloadDetector(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Instrument_reloadDetectorPtr
newCallback_Instrument_reloadDetector(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_reloadDetector<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_reloadDetectorPtr
newCallback_Instrument_reloadDetector(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_reloadDetector<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_reloadDetectorPtr
newCallback_Instrument_reloadDetector(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_reloadDetector<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_reloadDetectorPtr
newCallback_Instrument_reloadDetector(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_reloadDetector<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_unloadObjective : public Callback_Instrument_unloadObjective_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Instrument_unloadObjective(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Instrument_unloadObjectivePtr
newCallback_Instrument_unloadObjective(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_unloadObjective<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_unloadObjectivePtr
newCallback_Instrument_unloadObjective(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_unloadObjective<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Instrument_unloadObjectivePtr
newCallback_Instrument_unloadObjective(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_unloadObjective<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_unloadObjectivePtr
newCallback_Instrument_unloadObjective(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_unloadObjective<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_unloadObjective : public Callback_Instrument_unloadObjective_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Instrument_unloadObjective(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Instrument_unloadObjectivePtr
newCallback_Instrument_unloadObjective(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_unloadObjective<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_unloadObjectivePtr
newCallback_Instrument_unloadObjective(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_unloadObjective<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_unloadObjectivePtr
newCallback_Instrument_unloadObjective(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_unloadObjective<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_unloadObjectivePtr
newCallback_Instrument_unloadObjective(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_unloadObjective<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_sizeOfObjective : public Callback_Instrument_sizeOfObjective_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Instrument_sizeOfObjective(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::InstrumentPrx __proxy = ::omero::model::InstrumentPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfObjective(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Instrument_sizeOfObjectivePtr
newCallback_Instrument_sizeOfObjective(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_sizeOfObjective<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_sizeOfObjectivePtr
newCallback_Instrument_sizeOfObjective(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_sizeOfObjective<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_sizeOfObjective : public Callback_Instrument_sizeOfObjective_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Instrument_sizeOfObjective(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::InstrumentPrx __proxy = ::omero::model::InstrumentPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfObjective(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Instrument_sizeOfObjectivePtr
newCallback_Instrument_sizeOfObjective(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_sizeOfObjective<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_sizeOfObjectivePtr
newCallback_Instrument_sizeOfObjective(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_sizeOfObjective<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_copyObjective : public Callback_Instrument_copyObjective_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::InstrumentObjectiveSeq&);

    CallbackNC_Instrument_copyObjective(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::InstrumentPrx __proxy = ::omero::model::InstrumentPrx::uncheckedCast(__result->getProxy());
        ::omero::model::InstrumentObjectiveSeq __ret;
        try
        {
            __ret = __proxy->end_copyObjective(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Instrument_copyObjectivePtr
newCallback_Instrument_copyObjective(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::InstrumentObjectiveSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_copyObjective<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_copyObjectivePtr
newCallback_Instrument_copyObjective(T* instance, void (T::*cb)(const ::omero::model::InstrumentObjectiveSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_copyObjective<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_copyObjective : public Callback_Instrument_copyObjective_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::InstrumentObjectiveSeq&, const CT&);

    Callback_Instrument_copyObjective(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::InstrumentPrx __proxy = ::omero::model::InstrumentPrx::uncheckedCast(__result->getProxy());
        ::omero::model::InstrumentObjectiveSeq __ret;
        try
        {
            __ret = __proxy->end_copyObjective(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Instrument_copyObjectivePtr
newCallback_Instrument_copyObjective(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::InstrumentObjectiveSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_copyObjective<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_copyObjectivePtr
newCallback_Instrument_copyObjective(T* instance, void (T::*cb)(const ::omero::model::InstrumentObjectiveSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_copyObjective<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_addObjective : public Callback_Instrument_addObjective_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Instrument_addObjective(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Instrument_addObjectivePtr
newCallback_Instrument_addObjective(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_addObjective<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_addObjectivePtr
newCallback_Instrument_addObjective(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_addObjective<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Instrument_addObjectivePtr
newCallback_Instrument_addObjective(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_addObjective<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_addObjectivePtr
newCallback_Instrument_addObjective(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_addObjective<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_addObjective : public Callback_Instrument_addObjective_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Instrument_addObjective(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Instrument_addObjectivePtr
newCallback_Instrument_addObjective(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_addObjective<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_addObjectivePtr
newCallback_Instrument_addObjective(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_addObjective<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_addObjectivePtr
newCallback_Instrument_addObjective(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_addObjective<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_addObjectivePtr
newCallback_Instrument_addObjective(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_addObjective<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_addAllObjectiveSet : public Callback_Instrument_addAllObjectiveSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Instrument_addAllObjectiveSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Instrument_addAllObjectiveSetPtr
newCallback_Instrument_addAllObjectiveSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_addAllObjectiveSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_addAllObjectiveSetPtr
newCallback_Instrument_addAllObjectiveSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_addAllObjectiveSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Instrument_addAllObjectiveSetPtr
newCallback_Instrument_addAllObjectiveSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_addAllObjectiveSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_addAllObjectiveSetPtr
newCallback_Instrument_addAllObjectiveSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_addAllObjectiveSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_addAllObjectiveSet : public Callback_Instrument_addAllObjectiveSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Instrument_addAllObjectiveSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Instrument_addAllObjectiveSetPtr
newCallback_Instrument_addAllObjectiveSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_addAllObjectiveSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_addAllObjectiveSetPtr
newCallback_Instrument_addAllObjectiveSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_addAllObjectiveSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_addAllObjectiveSetPtr
newCallback_Instrument_addAllObjectiveSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_addAllObjectiveSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_addAllObjectiveSetPtr
newCallback_Instrument_addAllObjectiveSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_addAllObjectiveSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_removeObjective : public Callback_Instrument_removeObjective_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Instrument_removeObjective(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Instrument_removeObjectivePtr
newCallback_Instrument_removeObjective(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_removeObjective<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_removeObjectivePtr
newCallback_Instrument_removeObjective(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_removeObjective<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Instrument_removeObjectivePtr
newCallback_Instrument_removeObjective(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_removeObjective<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_removeObjectivePtr
newCallback_Instrument_removeObjective(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_removeObjective<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_removeObjective : public Callback_Instrument_removeObjective_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Instrument_removeObjective(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Instrument_removeObjectivePtr
newCallback_Instrument_removeObjective(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_removeObjective<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_removeObjectivePtr
newCallback_Instrument_removeObjective(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_removeObjective<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_removeObjectivePtr
newCallback_Instrument_removeObjective(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_removeObjective<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_removeObjectivePtr
newCallback_Instrument_removeObjective(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_removeObjective<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_removeAllObjectiveSet : public Callback_Instrument_removeAllObjectiveSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Instrument_removeAllObjectiveSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Instrument_removeAllObjectiveSetPtr
newCallback_Instrument_removeAllObjectiveSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_removeAllObjectiveSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_removeAllObjectiveSetPtr
newCallback_Instrument_removeAllObjectiveSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_removeAllObjectiveSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Instrument_removeAllObjectiveSetPtr
newCallback_Instrument_removeAllObjectiveSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_removeAllObjectiveSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_removeAllObjectiveSetPtr
newCallback_Instrument_removeAllObjectiveSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_removeAllObjectiveSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_removeAllObjectiveSet : public Callback_Instrument_removeAllObjectiveSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Instrument_removeAllObjectiveSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Instrument_removeAllObjectiveSetPtr
newCallback_Instrument_removeAllObjectiveSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_removeAllObjectiveSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_removeAllObjectiveSetPtr
newCallback_Instrument_removeAllObjectiveSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_removeAllObjectiveSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_removeAllObjectiveSetPtr
newCallback_Instrument_removeAllObjectiveSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_removeAllObjectiveSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_removeAllObjectiveSetPtr
newCallback_Instrument_removeAllObjectiveSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_removeAllObjectiveSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_clearObjective : public Callback_Instrument_clearObjective_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Instrument_clearObjective(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Instrument_clearObjectivePtr
newCallback_Instrument_clearObjective(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_clearObjective<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_clearObjectivePtr
newCallback_Instrument_clearObjective(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_clearObjective<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Instrument_clearObjectivePtr
newCallback_Instrument_clearObjective(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_clearObjective<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_clearObjectivePtr
newCallback_Instrument_clearObjective(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_clearObjective<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_clearObjective : public Callback_Instrument_clearObjective_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Instrument_clearObjective(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Instrument_clearObjectivePtr
newCallback_Instrument_clearObjective(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_clearObjective<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_clearObjectivePtr
newCallback_Instrument_clearObjective(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_clearObjective<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_clearObjectivePtr
newCallback_Instrument_clearObjective(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_clearObjective<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_clearObjectivePtr
newCallback_Instrument_clearObjective(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_clearObjective<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_reloadObjective : public Callback_Instrument_reloadObjective_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Instrument_reloadObjective(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Instrument_reloadObjectivePtr
newCallback_Instrument_reloadObjective(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_reloadObjective<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_reloadObjectivePtr
newCallback_Instrument_reloadObjective(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_reloadObjective<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Instrument_reloadObjectivePtr
newCallback_Instrument_reloadObjective(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_reloadObjective<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_reloadObjectivePtr
newCallback_Instrument_reloadObjective(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_reloadObjective<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_reloadObjective : public Callback_Instrument_reloadObjective_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Instrument_reloadObjective(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Instrument_reloadObjectivePtr
newCallback_Instrument_reloadObjective(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_reloadObjective<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_reloadObjectivePtr
newCallback_Instrument_reloadObjective(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_reloadObjective<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_reloadObjectivePtr
newCallback_Instrument_reloadObjective(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_reloadObjective<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_reloadObjectivePtr
newCallback_Instrument_reloadObjective(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_reloadObjective<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_unloadLightSource : public Callback_Instrument_unloadLightSource_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Instrument_unloadLightSource(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Instrument_unloadLightSourcePtr
newCallback_Instrument_unloadLightSource(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_unloadLightSource<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_unloadLightSourcePtr
newCallback_Instrument_unloadLightSource(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_unloadLightSource<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Instrument_unloadLightSourcePtr
newCallback_Instrument_unloadLightSource(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_unloadLightSource<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_unloadLightSourcePtr
newCallback_Instrument_unloadLightSource(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_unloadLightSource<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_unloadLightSource : public Callback_Instrument_unloadLightSource_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Instrument_unloadLightSource(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Instrument_unloadLightSourcePtr
newCallback_Instrument_unloadLightSource(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_unloadLightSource<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_unloadLightSourcePtr
newCallback_Instrument_unloadLightSource(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_unloadLightSource<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_unloadLightSourcePtr
newCallback_Instrument_unloadLightSource(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_unloadLightSource<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_unloadLightSourcePtr
newCallback_Instrument_unloadLightSource(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_unloadLightSource<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_sizeOfLightSource : public Callback_Instrument_sizeOfLightSource_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Instrument_sizeOfLightSource(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::InstrumentPrx __proxy = ::omero::model::InstrumentPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfLightSource(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Instrument_sizeOfLightSourcePtr
newCallback_Instrument_sizeOfLightSource(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_sizeOfLightSource<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_sizeOfLightSourcePtr
newCallback_Instrument_sizeOfLightSource(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_sizeOfLightSource<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_sizeOfLightSource : public Callback_Instrument_sizeOfLightSource_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Instrument_sizeOfLightSource(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::InstrumentPrx __proxy = ::omero::model::InstrumentPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfLightSource(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Instrument_sizeOfLightSourcePtr
newCallback_Instrument_sizeOfLightSource(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_sizeOfLightSource<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_sizeOfLightSourcePtr
newCallback_Instrument_sizeOfLightSource(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_sizeOfLightSource<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_copyLightSource : public Callback_Instrument_copyLightSource_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::InstrumentLightSourceSeq&);

    CallbackNC_Instrument_copyLightSource(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::InstrumentPrx __proxy = ::omero::model::InstrumentPrx::uncheckedCast(__result->getProxy());
        ::omero::model::InstrumentLightSourceSeq __ret;
        try
        {
            __ret = __proxy->end_copyLightSource(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Instrument_copyLightSourcePtr
newCallback_Instrument_copyLightSource(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::InstrumentLightSourceSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_copyLightSource<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_copyLightSourcePtr
newCallback_Instrument_copyLightSource(T* instance, void (T::*cb)(const ::omero::model::InstrumentLightSourceSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_copyLightSource<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_copyLightSource : public Callback_Instrument_copyLightSource_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::InstrumentLightSourceSeq&, const CT&);

    Callback_Instrument_copyLightSource(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::InstrumentPrx __proxy = ::omero::model::InstrumentPrx::uncheckedCast(__result->getProxy());
        ::omero::model::InstrumentLightSourceSeq __ret;
        try
        {
            __ret = __proxy->end_copyLightSource(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Instrument_copyLightSourcePtr
newCallback_Instrument_copyLightSource(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::InstrumentLightSourceSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_copyLightSource<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_copyLightSourcePtr
newCallback_Instrument_copyLightSource(T* instance, void (T::*cb)(const ::omero::model::InstrumentLightSourceSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_copyLightSource<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_addLightSource : public Callback_Instrument_addLightSource_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Instrument_addLightSource(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Instrument_addLightSourcePtr
newCallback_Instrument_addLightSource(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_addLightSource<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_addLightSourcePtr
newCallback_Instrument_addLightSource(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_addLightSource<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Instrument_addLightSourcePtr
newCallback_Instrument_addLightSource(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_addLightSource<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_addLightSourcePtr
newCallback_Instrument_addLightSource(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_addLightSource<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_addLightSource : public Callback_Instrument_addLightSource_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Instrument_addLightSource(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Instrument_addLightSourcePtr
newCallback_Instrument_addLightSource(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_addLightSource<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_addLightSourcePtr
newCallback_Instrument_addLightSource(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_addLightSource<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_addLightSourcePtr
newCallback_Instrument_addLightSource(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_addLightSource<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_addLightSourcePtr
newCallback_Instrument_addLightSource(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_addLightSource<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_addAllLightSourceSet : public Callback_Instrument_addAllLightSourceSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Instrument_addAllLightSourceSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Instrument_addAllLightSourceSetPtr
newCallback_Instrument_addAllLightSourceSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_addAllLightSourceSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_addAllLightSourceSetPtr
newCallback_Instrument_addAllLightSourceSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_addAllLightSourceSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Instrument_addAllLightSourceSetPtr
newCallback_Instrument_addAllLightSourceSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_addAllLightSourceSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_addAllLightSourceSetPtr
newCallback_Instrument_addAllLightSourceSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_addAllLightSourceSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_addAllLightSourceSet : public Callback_Instrument_addAllLightSourceSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Instrument_addAllLightSourceSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Instrument_addAllLightSourceSetPtr
newCallback_Instrument_addAllLightSourceSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_addAllLightSourceSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_addAllLightSourceSetPtr
newCallback_Instrument_addAllLightSourceSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_addAllLightSourceSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_addAllLightSourceSetPtr
newCallback_Instrument_addAllLightSourceSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_addAllLightSourceSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_addAllLightSourceSetPtr
newCallback_Instrument_addAllLightSourceSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_addAllLightSourceSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_removeLightSource : public Callback_Instrument_removeLightSource_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Instrument_removeLightSource(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Instrument_removeLightSourcePtr
newCallback_Instrument_removeLightSource(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_removeLightSource<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_removeLightSourcePtr
newCallback_Instrument_removeLightSource(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_removeLightSource<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Instrument_removeLightSourcePtr
newCallback_Instrument_removeLightSource(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_removeLightSource<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_removeLightSourcePtr
newCallback_Instrument_removeLightSource(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_removeLightSource<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_removeLightSource : public Callback_Instrument_removeLightSource_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Instrument_removeLightSource(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Instrument_removeLightSourcePtr
newCallback_Instrument_removeLightSource(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_removeLightSource<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_removeLightSourcePtr
newCallback_Instrument_removeLightSource(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_removeLightSource<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_removeLightSourcePtr
newCallback_Instrument_removeLightSource(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_removeLightSource<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_removeLightSourcePtr
newCallback_Instrument_removeLightSource(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_removeLightSource<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_removeAllLightSourceSet : public Callback_Instrument_removeAllLightSourceSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Instrument_removeAllLightSourceSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Instrument_removeAllLightSourceSetPtr
newCallback_Instrument_removeAllLightSourceSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_removeAllLightSourceSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_removeAllLightSourceSetPtr
newCallback_Instrument_removeAllLightSourceSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_removeAllLightSourceSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Instrument_removeAllLightSourceSetPtr
newCallback_Instrument_removeAllLightSourceSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_removeAllLightSourceSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_removeAllLightSourceSetPtr
newCallback_Instrument_removeAllLightSourceSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_removeAllLightSourceSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_removeAllLightSourceSet : public Callback_Instrument_removeAllLightSourceSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Instrument_removeAllLightSourceSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Instrument_removeAllLightSourceSetPtr
newCallback_Instrument_removeAllLightSourceSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_removeAllLightSourceSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_removeAllLightSourceSetPtr
newCallback_Instrument_removeAllLightSourceSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_removeAllLightSourceSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_removeAllLightSourceSetPtr
newCallback_Instrument_removeAllLightSourceSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_removeAllLightSourceSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_removeAllLightSourceSetPtr
newCallback_Instrument_removeAllLightSourceSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_removeAllLightSourceSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_clearLightSource : public Callback_Instrument_clearLightSource_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Instrument_clearLightSource(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Instrument_clearLightSourcePtr
newCallback_Instrument_clearLightSource(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_clearLightSource<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_clearLightSourcePtr
newCallback_Instrument_clearLightSource(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_clearLightSource<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Instrument_clearLightSourcePtr
newCallback_Instrument_clearLightSource(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_clearLightSource<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_clearLightSourcePtr
newCallback_Instrument_clearLightSource(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_clearLightSource<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_clearLightSource : public Callback_Instrument_clearLightSource_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Instrument_clearLightSource(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Instrument_clearLightSourcePtr
newCallback_Instrument_clearLightSource(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_clearLightSource<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_clearLightSourcePtr
newCallback_Instrument_clearLightSource(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_clearLightSource<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_clearLightSourcePtr
newCallback_Instrument_clearLightSource(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_clearLightSource<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_clearLightSourcePtr
newCallback_Instrument_clearLightSource(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_clearLightSource<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_reloadLightSource : public Callback_Instrument_reloadLightSource_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Instrument_reloadLightSource(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Instrument_reloadLightSourcePtr
newCallback_Instrument_reloadLightSource(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_reloadLightSource<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_reloadLightSourcePtr
newCallback_Instrument_reloadLightSource(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_reloadLightSource<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Instrument_reloadLightSourcePtr
newCallback_Instrument_reloadLightSource(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_reloadLightSource<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_reloadLightSourcePtr
newCallback_Instrument_reloadLightSource(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_reloadLightSource<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_reloadLightSource : public Callback_Instrument_reloadLightSource_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Instrument_reloadLightSource(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Instrument_reloadLightSourcePtr
newCallback_Instrument_reloadLightSource(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_reloadLightSource<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_reloadLightSourcePtr
newCallback_Instrument_reloadLightSource(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_reloadLightSource<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_reloadLightSourcePtr
newCallback_Instrument_reloadLightSource(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_reloadLightSource<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_reloadLightSourcePtr
newCallback_Instrument_reloadLightSource(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_reloadLightSource<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_unloadFilter : public Callback_Instrument_unloadFilter_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Instrument_unloadFilter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Instrument_unloadFilterPtr
newCallback_Instrument_unloadFilter(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_unloadFilter<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_unloadFilterPtr
newCallback_Instrument_unloadFilter(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_unloadFilter<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Instrument_unloadFilterPtr
newCallback_Instrument_unloadFilter(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_unloadFilter<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_unloadFilterPtr
newCallback_Instrument_unloadFilter(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_unloadFilter<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_unloadFilter : public Callback_Instrument_unloadFilter_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Instrument_unloadFilter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Instrument_unloadFilterPtr
newCallback_Instrument_unloadFilter(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_unloadFilter<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_unloadFilterPtr
newCallback_Instrument_unloadFilter(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_unloadFilter<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_unloadFilterPtr
newCallback_Instrument_unloadFilter(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_unloadFilter<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_unloadFilterPtr
newCallback_Instrument_unloadFilter(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_unloadFilter<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_sizeOfFilter : public Callback_Instrument_sizeOfFilter_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Instrument_sizeOfFilter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::InstrumentPrx __proxy = ::omero::model::InstrumentPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfFilter(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Instrument_sizeOfFilterPtr
newCallback_Instrument_sizeOfFilter(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_sizeOfFilter<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_sizeOfFilterPtr
newCallback_Instrument_sizeOfFilter(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_sizeOfFilter<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_sizeOfFilter : public Callback_Instrument_sizeOfFilter_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Instrument_sizeOfFilter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::InstrumentPrx __proxy = ::omero::model::InstrumentPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfFilter(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Instrument_sizeOfFilterPtr
newCallback_Instrument_sizeOfFilter(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_sizeOfFilter<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_sizeOfFilterPtr
newCallback_Instrument_sizeOfFilter(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_sizeOfFilter<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_copyFilter : public Callback_Instrument_copyFilter_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::InstrumentFilterSeq&);

    CallbackNC_Instrument_copyFilter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::InstrumentPrx __proxy = ::omero::model::InstrumentPrx::uncheckedCast(__result->getProxy());
        ::omero::model::InstrumentFilterSeq __ret;
        try
        {
            __ret = __proxy->end_copyFilter(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Instrument_copyFilterPtr
newCallback_Instrument_copyFilter(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::InstrumentFilterSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_copyFilter<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_copyFilterPtr
newCallback_Instrument_copyFilter(T* instance, void (T::*cb)(const ::omero::model::InstrumentFilterSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_copyFilter<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_copyFilter : public Callback_Instrument_copyFilter_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::InstrumentFilterSeq&, const CT&);

    Callback_Instrument_copyFilter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::InstrumentPrx __proxy = ::omero::model::InstrumentPrx::uncheckedCast(__result->getProxy());
        ::omero::model::InstrumentFilterSeq __ret;
        try
        {
            __ret = __proxy->end_copyFilter(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Instrument_copyFilterPtr
newCallback_Instrument_copyFilter(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::InstrumentFilterSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_copyFilter<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_copyFilterPtr
newCallback_Instrument_copyFilter(T* instance, void (T::*cb)(const ::omero::model::InstrumentFilterSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_copyFilter<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_addFilter : public Callback_Instrument_addFilter_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Instrument_addFilter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Instrument_addFilterPtr
newCallback_Instrument_addFilter(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_addFilter<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_addFilterPtr
newCallback_Instrument_addFilter(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_addFilter<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Instrument_addFilterPtr
newCallback_Instrument_addFilter(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_addFilter<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_addFilterPtr
newCallback_Instrument_addFilter(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_addFilter<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_addFilter : public Callback_Instrument_addFilter_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Instrument_addFilter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Instrument_addFilterPtr
newCallback_Instrument_addFilter(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_addFilter<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_addFilterPtr
newCallback_Instrument_addFilter(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_addFilter<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_addFilterPtr
newCallback_Instrument_addFilter(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_addFilter<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_addFilterPtr
newCallback_Instrument_addFilter(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_addFilter<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_addAllFilterSet : public Callback_Instrument_addAllFilterSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Instrument_addAllFilterSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Instrument_addAllFilterSetPtr
newCallback_Instrument_addAllFilterSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_addAllFilterSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_addAllFilterSetPtr
newCallback_Instrument_addAllFilterSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_addAllFilterSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Instrument_addAllFilterSetPtr
newCallback_Instrument_addAllFilterSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_addAllFilterSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_addAllFilterSetPtr
newCallback_Instrument_addAllFilterSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_addAllFilterSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_addAllFilterSet : public Callback_Instrument_addAllFilterSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Instrument_addAllFilterSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Instrument_addAllFilterSetPtr
newCallback_Instrument_addAllFilterSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_addAllFilterSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_addAllFilterSetPtr
newCallback_Instrument_addAllFilterSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_addAllFilterSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_addAllFilterSetPtr
newCallback_Instrument_addAllFilterSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_addAllFilterSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_addAllFilterSetPtr
newCallback_Instrument_addAllFilterSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_addAllFilterSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_removeFilter : public Callback_Instrument_removeFilter_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Instrument_removeFilter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Instrument_removeFilterPtr
newCallback_Instrument_removeFilter(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_removeFilter<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_removeFilterPtr
newCallback_Instrument_removeFilter(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_removeFilter<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Instrument_removeFilterPtr
newCallback_Instrument_removeFilter(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_removeFilter<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_removeFilterPtr
newCallback_Instrument_removeFilter(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_removeFilter<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_removeFilter : public Callback_Instrument_removeFilter_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Instrument_removeFilter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Instrument_removeFilterPtr
newCallback_Instrument_removeFilter(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_removeFilter<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_removeFilterPtr
newCallback_Instrument_removeFilter(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_removeFilter<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_removeFilterPtr
newCallback_Instrument_removeFilter(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_removeFilter<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_removeFilterPtr
newCallback_Instrument_removeFilter(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_removeFilter<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_removeAllFilterSet : public Callback_Instrument_removeAllFilterSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Instrument_removeAllFilterSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Instrument_removeAllFilterSetPtr
newCallback_Instrument_removeAllFilterSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_removeAllFilterSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_removeAllFilterSetPtr
newCallback_Instrument_removeAllFilterSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_removeAllFilterSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Instrument_removeAllFilterSetPtr
newCallback_Instrument_removeAllFilterSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_removeAllFilterSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_removeAllFilterSetPtr
newCallback_Instrument_removeAllFilterSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_removeAllFilterSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_removeAllFilterSet : public Callback_Instrument_removeAllFilterSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Instrument_removeAllFilterSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Instrument_removeAllFilterSetPtr
newCallback_Instrument_removeAllFilterSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_removeAllFilterSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_removeAllFilterSetPtr
newCallback_Instrument_removeAllFilterSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_removeAllFilterSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_removeAllFilterSetPtr
newCallback_Instrument_removeAllFilterSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_removeAllFilterSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_removeAllFilterSetPtr
newCallback_Instrument_removeAllFilterSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_removeAllFilterSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_clearFilter : public Callback_Instrument_clearFilter_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Instrument_clearFilter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Instrument_clearFilterPtr
newCallback_Instrument_clearFilter(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_clearFilter<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_clearFilterPtr
newCallback_Instrument_clearFilter(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_clearFilter<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Instrument_clearFilterPtr
newCallback_Instrument_clearFilter(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_clearFilter<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_clearFilterPtr
newCallback_Instrument_clearFilter(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_clearFilter<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_clearFilter : public Callback_Instrument_clearFilter_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Instrument_clearFilter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Instrument_clearFilterPtr
newCallback_Instrument_clearFilter(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_clearFilter<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_clearFilterPtr
newCallback_Instrument_clearFilter(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_clearFilter<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_clearFilterPtr
newCallback_Instrument_clearFilter(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_clearFilter<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_clearFilterPtr
newCallback_Instrument_clearFilter(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_clearFilter<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_reloadFilter : public Callback_Instrument_reloadFilter_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Instrument_reloadFilter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Instrument_reloadFilterPtr
newCallback_Instrument_reloadFilter(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_reloadFilter<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_reloadFilterPtr
newCallback_Instrument_reloadFilter(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_reloadFilter<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Instrument_reloadFilterPtr
newCallback_Instrument_reloadFilter(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_reloadFilter<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_reloadFilterPtr
newCallback_Instrument_reloadFilter(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_reloadFilter<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_reloadFilter : public Callback_Instrument_reloadFilter_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Instrument_reloadFilter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Instrument_reloadFilterPtr
newCallback_Instrument_reloadFilter(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_reloadFilter<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_reloadFilterPtr
newCallback_Instrument_reloadFilter(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_reloadFilter<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_reloadFilterPtr
newCallback_Instrument_reloadFilter(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_reloadFilter<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_reloadFilterPtr
newCallback_Instrument_reloadFilter(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_reloadFilter<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_unloadDichroic : public Callback_Instrument_unloadDichroic_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Instrument_unloadDichroic(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Instrument_unloadDichroicPtr
newCallback_Instrument_unloadDichroic(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_unloadDichroic<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_unloadDichroicPtr
newCallback_Instrument_unloadDichroic(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_unloadDichroic<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Instrument_unloadDichroicPtr
newCallback_Instrument_unloadDichroic(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_unloadDichroic<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_unloadDichroicPtr
newCallback_Instrument_unloadDichroic(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_unloadDichroic<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_unloadDichroic : public Callback_Instrument_unloadDichroic_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Instrument_unloadDichroic(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Instrument_unloadDichroicPtr
newCallback_Instrument_unloadDichroic(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_unloadDichroic<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_unloadDichroicPtr
newCallback_Instrument_unloadDichroic(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_unloadDichroic<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_unloadDichroicPtr
newCallback_Instrument_unloadDichroic(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_unloadDichroic<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_unloadDichroicPtr
newCallback_Instrument_unloadDichroic(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_unloadDichroic<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_sizeOfDichroic : public Callback_Instrument_sizeOfDichroic_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Instrument_sizeOfDichroic(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::InstrumentPrx __proxy = ::omero::model::InstrumentPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfDichroic(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Instrument_sizeOfDichroicPtr
newCallback_Instrument_sizeOfDichroic(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_sizeOfDichroic<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_sizeOfDichroicPtr
newCallback_Instrument_sizeOfDichroic(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_sizeOfDichroic<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_sizeOfDichroic : public Callback_Instrument_sizeOfDichroic_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Instrument_sizeOfDichroic(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::InstrumentPrx __proxy = ::omero::model::InstrumentPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfDichroic(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Instrument_sizeOfDichroicPtr
newCallback_Instrument_sizeOfDichroic(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_sizeOfDichroic<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_sizeOfDichroicPtr
newCallback_Instrument_sizeOfDichroic(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_sizeOfDichroic<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_copyDichroic : public Callback_Instrument_copyDichroic_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::InstrumentDichroicSeq&);

    CallbackNC_Instrument_copyDichroic(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::InstrumentPrx __proxy = ::omero::model::InstrumentPrx::uncheckedCast(__result->getProxy());
        ::omero::model::InstrumentDichroicSeq __ret;
        try
        {
            __ret = __proxy->end_copyDichroic(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Instrument_copyDichroicPtr
newCallback_Instrument_copyDichroic(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::InstrumentDichroicSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_copyDichroic<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_copyDichroicPtr
newCallback_Instrument_copyDichroic(T* instance, void (T::*cb)(const ::omero::model::InstrumentDichroicSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_copyDichroic<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_copyDichroic : public Callback_Instrument_copyDichroic_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::InstrumentDichroicSeq&, const CT&);

    Callback_Instrument_copyDichroic(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::InstrumentPrx __proxy = ::omero::model::InstrumentPrx::uncheckedCast(__result->getProxy());
        ::omero::model::InstrumentDichroicSeq __ret;
        try
        {
            __ret = __proxy->end_copyDichroic(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Instrument_copyDichroicPtr
newCallback_Instrument_copyDichroic(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::InstrumentDichroicSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_copyDichroic<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_copyDichroicPtr
newCallback_Instrument_copyDichroic(T* instance, void (T::*cb)(const ::omero::model::InstrumentDichroicSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_copyDichroic<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_addDichroic : public Callback_Instrument_addDichroic_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Instrument_addDichroic(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Instrument_addDichroicPtr
newCallback_Instrument_addDichroic(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_addDichroic<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_addDichroicPtr
newCallback_Instrument_addDichroic(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_addDichroic<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Instrument_addDichroicPtr
newCallback_Instrument_addDichroic(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_addDichroic<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_addDichroicPtr
newCallback_Instrument_addDichroic(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_addDichroic<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_addDichroic : public Callback_Instrument_addDichroic_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Instrument_addDichroic(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Instrument_addDichroicPtr
newCallback_Instrument_addDichroic(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_addDichroic<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_addDichroicPtr
newCallback_Instrument_addDichroic(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_addDichroic<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_addDichroicPtr
newCallback_Instrument_addDichroic(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_addDichroic<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_addDichroicPtr
newCallback_Instrument_addDichroic(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_addDichroic<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_addAllDichroicSet : public Callback_Instrument_addAllDichroicSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Instrument_addAllDichroicSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Instrument_addAllDichroicSetPtr
newCallback_Instrument_addAllDichroicSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_addAllDichroicSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_addAllDichroicSetPtr
newCallback_Instrument_addAllDichroicSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_addAllDichroicSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Instrument_addAllDichroicSetPtr
newCallback_Instrument_addAllDichroicSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_addAllDichroicSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_addAllDichroicSetPtr
newCallback_Instrument_addAllDichroicSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_addAllDichroicSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_addAllDichroicSet : public Callback_Instrument_addAllDichroicSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Instrument_addAllDichroicSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Instrument_addAllDichroicSetPtr
newCallback_Instrument_addAllDichroicSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_addAllDichroicSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_addAllDichroicSetPtr
newCallback_Instrument_addAllDichroicSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_addAllDichroicSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_addAllDichroicSetPtr
newCallback_Instrument_addAllDichroicSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_addAllDichroicSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_addAllDichroicSetPtr
newCallback_Instrument_addAllDichroicSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_addAllDichroicSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_removeDichroic : public Callback_Instrument_removeDichroic_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Instrument_removeDichroic(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Instrument_removeDichroicPtr
newCallback_Instrument_removeDichroic(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_removeDichroic<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_removeDichroicPtr
newCallback_Instrument_removeDichroic(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_removeDichroic<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Instrument_removeDichroicPtr
newCallback_Instrument_removeDichroic(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_removeDichroic<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_removeDichroicPtr
newCallback_Instrument_removeDichroic(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_removeDichroic<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_removeDichroic : public Callback_Instrument_removeDichroic_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Instrument_removeDichroic(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Instrument_removeDichroicPtr
newCallback_Instrument_removeDichroic(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_removeDichroic<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_removeDichroicPtr
newCallback_Instrument_removeDichroic(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_removeDichroic<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_removeDichroicPtr
newCallback_Instrument_removeDichroic(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_removeDichroic<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_removeDichroicPtr
newCallback_Instrument_removeDichroic(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_removeDichroic<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_removeAllDichroicSet : public Callback_Instrument_removeAllDichroicSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Instrument_removeAllDichroicSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Instrument_removeAllDichroicSetPtr
newCallback_Instrument_removeAllDichroicSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_removeAllDichroicSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_removeAllDichroicSetPtr
newCallback_Instrument_removeAllDichroicSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_removeAllDichroicSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Instrument_removeAllDichroicSetPtr
newCallback_Instrument_removeAllDichroicSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_removeAllDichroicSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_removeAllDichroicSetPtr
newCallback_Instrument_removeAllDichroicSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_removeAllDichroicSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_removeAllDichroicSet : public Callback_Instrument_removeAllDichroicSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Instrument_removeAllDichroicSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Instrument_removeAllDichroicSetPtr
newCallback_Instrument_removeAllDichroicSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_removeAllDichroicSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_removeAllDichroicSetPtr
newCallback_Instrument_removeAllDichroicSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_removeAllDichroicSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_removeAllDichroicSetPtr
newCallback_Instrument_removeAllDichroicSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_removeAllDichroicSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_removeAllDichroicSetPtr
newCallback_Instrument_removeAllDichroicSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_removeAllDichroicSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_clearDichroic : public Callback_Instrument_clearDichroic_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Instrument_clearDichroic(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Instrument_clearDichroicPtr
newCallback_Instrument_clearDichroic(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_clearDichroic<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_clearDichroicPtr
newCallback_Instrument_clearDichroic(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_clearDichroic<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Instrument_clearDichroicPtr
newCallback_Instrument_clearDichroic(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_clearDichroic<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_clearDichroicPtr
newCallback_Instrument_clearDichroic(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_clearDichroic<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_clearDichroic : public Callback_Instrument_clearDichroic_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Instrument_clearDichroic(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Instrument_clearDichroicPtr
newCallback_Instrument_clearDichroic(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_clearDichroic<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_clearDichroicPtr
newCallback_Instrument_clearDichroic(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_clearDichroic<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_clearDichroicPtr
newCallback_Instrument_clearDichroic(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_clearDichroic<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_clearDichroicPtr
newCallback_Instrument_clearDichroic(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_clearDichroic<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_reloadDichroic : public Callback_Instrument_reloadDichroic_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Instrument_reloadDichroic(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Instrument_reloadDichroicPtr
newCallback_Instrument_reloadDichroic(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_reloadDichroic<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_reloadDichroicPtr
newCallback_Instrument_reloadDichroic(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_reloadDichroic<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Instrument_reloadDichroicPtr
newCallback_Instrument_reloadDichroic(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_reloadDichroic<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_reloadDichroicPtr
newCallback_Instrument_reloadDichroic(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_reloadDichroic<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_reloadDichroic : public Callback_Instrument_reloadDichroic_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Instrument_reloadDichroic(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Instrument_reloadDichroicPtr
newCallback_Instrument_reloadDichroic(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_reloadDichroic<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_reloadDichroicPtr
newCallback_Instrument_reloadDichroic(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_reloadDichroic<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_reloadDichroicPtr
newCallback_Instrument_reloadDichroic(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_reloadDichroic<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_reloadDichroicPtr
newCallback_Instrument_reloadDichroic(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_reloadDichroic<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_unloadFilterSet : public Callback_Instrument_unloadFilterSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Instrument_unloadFilterSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Instrument_unloadFilterSetPtr
newCallback_Instrument_unloadFilterSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_unloadFilterSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_unloadFilterSetPtr
newCallback_Instrument_unloadFilterSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_unloadFilterSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Instrument_unloadFilterSetPtr
newCallback_Instrument_unloadFilterSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_unloadFilterSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_unloadFilterSetPtr
newCallback_Instrument_unloadFilterSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_unloadFilterSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_unloadFilterSet : public Callback_Instrument_unloadFilterSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Instrument_unloadFilterSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Instrument_unloadFilterSetPtr
newCallback_Instrument_unloadFilterSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_unloadFilterSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_unloadFilterSetPtr
newCallback_Instrument_unloadFilterSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_unloadFilterSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_unloadFilterSetPtr
newCallback_Instrument_unloadFilterSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_unloadFilterSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_unloadFilterSetPtr
newCallback_Instrument_unloadFilterSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_unloadFilterSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_sizeOfFilterSet : public Callback_Instrument_sizeOfFilterSet_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Instrument_sizeOfFilterSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::InstrumentPrx __proxy = ::omero::model::InstrumentPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfFilterSet(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Instrument_sizeOfFilterSetPtr
newCallback_Instrument_sizeOfFilterSet(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_sizeOfFilterSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_sizeOfFilterSetPtr
newCallback_Instrument_sizeOfFilterSet(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_sizeOfFilterSet<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_sizeOfFilterSet : public Callback_Instrument_sizeOfFilterSet_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Instrument_sizeOfFilterSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::InstrumentPrx __proxy = ::omero::model::InstrumentPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfFilterSet(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Instrument_sizeOfFilterSetPtr
newCallback_Instrument_sizeOfFilterSet(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_sizeOfFilterSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_sizeOfFilterSetPtr
newCallback_Instrument_sizeOfFilterSet(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_sizeOfFilterSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_copyFilterSet : public Callback_Instrument_copyFilterSet_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::InstrumentFilterSetSeq&);

    CallbackNC_Instrument_copyFilterSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::InstrumentPrx __proxy = ::omero::model::InstrumentPrx::uncheckedCast(__result->getProxy());
        ::omero::model::InstrumentFilterSetSeq __ret;
        try
        {
            __ret = __proxy->end_copyFilterSet(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Instrument_copyFilterSetPtr
newCallback_Instrument_copyFilterSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::InstrumentFilterSetSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_copyFilterSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_copyFilterSetPtr
newCallback_Instrument_copyFilterSet(T* instance, void (T::*cb)(const ::omero::model::InstrumentFilterSetSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_copyFilterSet<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_copyFilterSet : public Callback_Instrument_copyFilterSet_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::InstrumentFilterSetSeq&, const CT&);

    Callback_Instrument_copyFilterSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::InstrumentPrx __proxy = ::omero::model::InstrumentPrx::uncheckedCast(__result->getProxy());
        ::omero::model::InstrumentFilterSetSeq __ret;
        try
        {
            __ret = __proxy->end_copyFilterSet(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Instrument_copyFilterSetPtr
newCallback_Instrument_copyFilterSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::InstrumentFilterSetSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_copyFilterSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_copyFilterSetPtr
newCallback_Instrument_copyFilterSet(T* instance, void (T::*cb)(const ::omero::model::InstrumentFilterSetSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_copyFilterSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_addFilterSet : public Callback_Instrument_addFilterSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Instrument_addFilterSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Instrument_addFilterSetPtr
newCallback_Instrument_addFilterSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_addFilterSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_addFilterSetPtr
newCallback_Instrument_addFilterSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_addFilterSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Instrument_addFilterSetPtr
newCallback_Instrument_addFilterSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_addFilterSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_addFilterSetPtr
newCallback_Instrument_addFilterSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_addFilterSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_addFilterSet : public Callback_Instrument_addFilterSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Instrument_addFilterSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Instrument_addFilterSetPtr
newCallback_Instrument_addFilterSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_addFilterSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_addFilterSetPtr
newCallback_Instrument_addFilterSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_addFilterSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_addFilterSetPtr
newCallback_Instrument_addFilterSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_addFilterSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_addFilterSetPtr
newCallback_Instrument_addFilterSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_addFilterSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_addAllFilterSetSet : public Callback_Instrument_addAllFilterSetSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Instrument_addAllFilterSetSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Instrument_addAllFilterSetSetPtr
newCallback_Instrument_addAllFilterSetSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_addAllFilterSetSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_addAllFilterSetSetPtr
newCallback_Instrument_addAllFilterSetSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_addAllFilterSetSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Instrument_addAllFilterSetSetPtr
newCallback_Instrument_addAllFilterSetSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_addAllFilterSetSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_addAllFilterSetSetPtr
newCallback_Instrument_addAllFilterSetSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_addAllFilterSetSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_addAllFilterSetSet : public Callback_Instrument_addAllFilterSetSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Instrument_addAllFilterSetSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Instrument_addAllFilterSetSetPtr
newCallback_Instrument_addAllFilterSetSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_addAllFilterSetSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_addAllFilterSetSetPtr
newCallback_Instrument_addAllFilterSetSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_addAllFilterSetSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_addAllFilterSetSetPtr
newCallback_Instrument_addAllFilterSetSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_addAllFilterSetSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_addAllFilterSetSetPtr
newCallback_Instrument_addAllFilterSetSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_addAllFilterSetSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_removeFilterSet : public Callback_Instrument_removeFilterSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Instrument_removeFilterSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Instrument_removeFilterSetPtr
newCallback_Instrument_removeFilterSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_removeFilterSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_removeFilterSetPtr
newCallback_Instrument_removeFilterSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_removeFilterSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Instrument_removeFilterSetPtr
newCallback_Instrument_removeFilterSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_removeFilterSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_removeFilterSetPtr
newCallback_Instrument_removeFilterSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_removeFilterSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_removeFilterSet : public Callback_Instrument_removeFilterSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Instrument_removeFilterSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Instrument_removeFilterSetPtr
newCallback_Instrument_removeFilterSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_removeFilterSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_removeFilterSetPtr
newCallback_Instrument_removeFilterSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_removeFilterSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_removeFilterSetPtr
newCallback_Instrument_removeFilterSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_removeFilterSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_removeFilterSetPtr
newCallback_Instrument_removeFilterSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_removeFilterSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_removeAllFilterSetSet : public Callback_Instrument_removeAllFilterSetSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Instrument_removeAllFilterSetSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Instrument_removeAllFilterSetSetPtr
newCallback_Instrument_removeAllFilterSetSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_removeAllFilterSetSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_removeAllFilterSetSetPtr
newCallback_Instrument_removeAllFilterSetSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_removeAllFilterSetSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Instrument_removeAllFilterSetSetPtr
newCallback_Instrument_removeAllFilterSetSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_removeAllFilterSetSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_removeAllFilterSetSetPtr
newCallback_Instrument_removeAllFilterSetSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_removeAllFilterSetSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_removeAllFilterSetSet : public Callback_Instrument_removeAllFilterSetSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Instrument_removeAllFilterSetSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Instrument_removeAllFilterSetSetPtr
newCallback_Instrument_removeAllFilterSetSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_removeAllFilterSetSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_removeAllFilterSetSetPtr
newCallback_Instrument_removeAllFilterSetSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_removeAllFilterSetSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_removeAllFilterSetSetPtr
newCallback_Instrument_removeAllFilterSetSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_removeAllFilterSetSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_removeAllFilterSetSetPtr
newCallback_Instrument_removeAllFilterSetSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_removeAllFilterSetSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_clearFilterSet : public Callback_Instrument_clearFilterSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Instrument_clearFilterSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Instrument_clearFilterSetPtr
newCallback_Instrument_clearFilterSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_clearFilterSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_clearFilterSetPtr
newCallback_Instrument_clearFilterSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_clearFilterSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Instrument_clearFilterSetPtr
newCallback_Instrument_clearFilterSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_clearFilterSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_clearFilterSetPtr
newCallback_Instrument_clearFilterSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_clearFilterSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_clearFilterSet : public Callback_Instrument_clearFilterSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Instrument_clearFilterSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Instrument_clearFilterSetPtr
newCallback_Instrument_clearFilterSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_clearFilterSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_clearFilterSetPtr
newCallback_Instrument_clearFilterSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_clearFilterSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_clearFilterSetPtr
newCallback_Instrument_clearFilterSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_clearFilterSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_clearFilterSetPtr
newCallback_Instrument_clearFilterSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_clearFilterSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_reloadFilterSet : public Callback_Instrument_reloadFilterSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Instrument_reloadFilterSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Instrument_reloadFilterSetPtr
newCallback_Instrument_reloadFilterSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_reloadFilterSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_reloadFilterSetPtr
newCallback_Instrument_reloadFilterSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_reloadFilterSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Instrument_reloadFilterSetPtr
newCallback_Instrument_reloadFilterSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_reloadFilterSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_reloadFilterSetPtr
newCallback_Instrument_reloadFilterSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_reloadFilterSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_reloadFilterSet : public Callback_Instrument_reloadFilterSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Instrument_reloadFilterSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Instrument_reloadFilterSetPtr
newCallback_Instrument_reloadFilterSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_reloadFilterSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_reloadFilterSetPtr
newCallback_Instrument_reloadFilterSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_reloadFilterSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_reloadFilterSetPtr
newCallback_Instrument_reloadFilterSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_reloadFilterSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_reloadFilterSetPtr
newCallback_Instrument_reloadFilterSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_reloadFilterSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_unloadOtf : public Callback_Instrument_unloadOtf_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Instrument_unloadOtf(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Instrument_unloadOtfPtr
newCallback_Instrument_unloadOtf(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_unloadOtf<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_unloadOtfPtr
newCallback_Instrument_unloadOtf(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_unloadOtf<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Instrument_unloadOtfPtr
newCallback_Instrument_unloadOtf(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_unloadOtf<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_unloadOtfPtr
newCallback_Instrument_unloadOtf(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_unloadOtf<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_unloadOtf : public Callback_Instrument_unloadOtf_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Instrument_unloadOtf(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Instrument_unloadOtfPtr
newCallback_Instrument_unloadOtf(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_unloadOtf<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_unloadOtfPtr
newCallback_Instrument_unloadOtf(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_unloadOtf<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_unloadOtfPtr
newCallback_Instrument_unloadOtf(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_unloadOtf<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_unloadOtfPtr
newCallback_Instrument_unloadOtf(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_unloadOtf<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_sizeOfOtf : public Callback_Instrument_sizeOfOtf_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Instrument_sizeOfOtf(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::InstrumentPrx __proxy = ::omero::model::InstrumentPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfOtf(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Instrument_sizeOfOtfPtr
newCallback_Instrument_sizeOfOtf(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_sizeOfOtf<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_sizeOfOtfPtr
newCallback_Instrument_sizeOfOtf(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_sizeOfOtf<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_sizeOfOtf : public Callback_Instrument_sizeOfOtf_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Instrument_sizeOfOtf(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::InstrumentPrx __proxy = ::omero::model::InstrumentPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfOtf(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Instrument_sizeOfOtfPtr
newCallback_Instrument_sizeOfOtf(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_sizeOfOtf<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_sizeOfOtfPtr
newCallback_Instrument_sizeOfOtf(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_sizeOfOtf<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_copyOtf : public Callback_Instrument_copyOtf_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::InstrumentOtfSeq&);

    CallbackNC_Instrument_copyOtf(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::InstrumentPrx __proxy = ::omero::model::InstrumentPrx::uncheckedCast(__result->getProxy());
        ::omero::model::InstrumentOtfSeq __ret;
        try
        {
            __ret = __proxy->end_copyOtf(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Instrument_copyOtfPtr
newCallback_Instrument_copyOtf(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::InstrumentOtfSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_copyOtf<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_copyOtfPtr
newCallback_Instrument_copyOtf(T* instance, void (T::*cb)(const ::omero::model::InstrumentOtfSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_copyOtf<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_copyOtf : public Callback_Instrument_copyOtf_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::InstrumentOtfSeq&, const CT&);

    Callback_Instrument_copyOtf(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::InstrumentPrx __proxy = ::omero::model::InstrumentPrx::uncheckedCast(__result->getProxy());
        ::omero::model::InstrumentOtfSeq __ret;
        try
        {
            __ret = __proxy->end_copyOtf(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Instrument_copyOtfPtr
newCallback_Instrument_copyOtf(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::InstrumentOtfSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_copyOtf<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_copyOtfPtr
newCallback_Instrument_copyOtf(T* instance, void (T::*cb)(const ::omero::model::InstrumentOtfSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_copyOtf<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_addOTF : public Callback_Instrument_addOTF_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Instrument_addOTF(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Instrument_addOTFPtr
newCallback_Instrument_addOTF(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_addOTF<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_addOTFPtr
newCallback_Instrument_addOTF(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_addOTF<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Instrument_addOTFPtr
newCallback_Instrument_addOTF(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_addOTF<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_addOTFPtr
newCallback_Instrument_addOTF(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_addOTF<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_addOTF : public Callback_Instrument_addOTF_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Instrument_addOTF(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Instrument_addOTFPtr
newCallback_Instrument_addOTF(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_addOTF<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_addOTFPtr
newCallback_Instrument_addOTF(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_addOTF<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_addOTFPtr
newCallback_Instrument_addOTF(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_addOTF<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_addOTFPtr
newCallback_Instrument_addOTF(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_addOTF<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_addAllOTFSet : public Callback_Instrument_addAllOTFSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Instrument_addAllOTFSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Instrument_addAllOTFSetPtr
newCallback_Instrument_addAllOTFSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_addAllOTFSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_addAllOTFSetPtr
newCallback_Instrument_addAllOTFSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_addAllOTFSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Instrument_addAllOTFSetPtr
newCallback_Instrument_addAllOTFSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_addAllOTFSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_addAllOTFSetPtr
newCallback_Instrument_addAllOTFSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_addAllOTFSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_addAllOTFSet : public Callback_Instrument_addAllOTFSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Instrument_addAllOTFSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Instrument_addAllOTFSetPtr
newCallback_Instrument_addAllOTFSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_addAllOTFSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_addAllOTFSetPtr
newCallback_Instrument_addAllOTFSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_addAllOTFSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_addAllOTFSetPtr
newCallback_Instrument_addAllOTFSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_addAllOTFSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_addAllOTFSetPtr
newCallback_Instrument_addAllOTFSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_addAllOTFSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_removeOTF : public Callback_Instrument_removeOTF_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Instrument_removeOTF(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Instrument_removeOTFPtr
newCallback_Instrument_removeOTF(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_removeOTF<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_removeOTFPtr
newCallback_Instrument_removeOTF(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_removeOTF<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Instrument_removeOTFPtr
newCallback_Instrument_removeOTF(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_removeOTF<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_removeOTFPtr
newCallback_Instrument_removeOTF(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_removeOTF<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_removeOTF : public Callback_Instrument_removeOTF_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Instrument_removeOTF(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Instrument_removeOTFPtr
newCallback_Instrument_removeOTF(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_removeOTF<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_removeOTFPtr
newCallback_Instrument_removeOTF(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_removeOTF<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_removeOTFPtr
newCallback_Instrument_removeOTF(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_removeOTF<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_removeOTFPtr
newCallback_Instrument_removeOTF(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_removeOTF<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_removeAllOTFSet : public Callback_Instrument_removeAllOTFSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Instrument_removeAllOTFSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Instrument_removeAllOTFSetPtr
newCallback_Instrument_removeAllOTFSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_removeAllOTFSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_removeAllOTFSetPtr
newCallback_Instrument_removeAllOTFSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_removeAllOTFSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Instrument_removeAllOTFSetPtr
newCallback_Instrument_removeAllOTFSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_removeAllOTFSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_removeAllOTFSetPtr
newCallback_Instrument_removeAllOTFSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_removeAllOTFSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_removeAllOTFSet : public Callback_Instrument_removeAllOTFSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Instrument_removeAllOTFSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Instrument_removeAllOTFSetPtr
newCallback_Instrument_removeAllOTFSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_removeAllOTFSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_removeAllOTFSetPtr
newCallback_Instrument_removeAllOTFSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_removeAllOTFSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_removeAllOTFSetPtr
newCallback_Instrument_removeAllOTFSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_removeAllOTFSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_removeAllOTFSetPtr
newCallback_Instrument_removeAllOTFSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_removeAllOTFSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_clearOtf : public Callback_Instrument_clearOtf_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Instrument_clearOtf(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Instrument_clearOtfPtr
newCallback_Instrument_clearOtf(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_clearOtf<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_clearOtfPtr
newCallback_Instrument_clearOtf(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_clearOtf<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Instrument_clearOtfPtr
newCallback_Instrument_clearOtf(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_clearOtf<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_clearOtfPtr
newCallback_Instrument_clearOtf(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_clearOtf<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_clearOtf : public Callback_Instrument_clearOtf_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Instrument_clearOtf(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Instrument_clearOtfPtr
newCallback_Instrument_clearOtf(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_clearOtf<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_clearOtfPtr
newCallback_Instrument_clearOtf(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_clearOtf<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_clearOtfPtr
newCallback_Instrument_clearOtf(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_clearOtf<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_clearOtfPtr
newCallback_Instrument_clearOtf(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_clearOtf<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Instrument_reloadOtf : public Callback_Instrument_reloadOtf_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Instrument_reloadOtf(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Instrument_reloadOtfPtr
newCallback_Instrument_reloadOtf(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_reloadOtf<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_reloadOtfPtr
newCallback_Instrument_reloadOtf(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_reloadOtf<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Instrument_reloadOtfPtr
newCallback_Instrument_reloadOtf(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_reloadOtf<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Instrument_reloadOtfPtr
newCallback_Instrument_reloadOtf(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Instrument_reloadOtf<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Instrument_reloadOtf : public Callback_Instrument_reloadOtf_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Instrument_reloadOtf(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Instrument_reloadOtfPtr
newCallback_Instrument_reloadOtf(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_reloadOtf<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_reloadOtfPtr
newCallback_Instrument_reloadOtf(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_reloadOtf<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_reloadOtfPtr
newCallback_Instrument_reloadOtf(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_reloadOtf<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Instrument_reloadOtfPtr
newCallback_Instrument_reloadOtf(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Instrument_reloadOtf<T, CT>(instance, 0, excb, sentcb);
}

}

}

#endif
