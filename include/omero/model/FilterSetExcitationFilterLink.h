// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `FilterSetExcitationFilterLink.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_FilterSetExcitationFilterLink_h__
#define __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_FilterSetExcitationFilterLink_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <omero/model/IObject.h>
#include <omero/RTypes.h>
#include <omero/System.h>
#include <omero/Collections.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace omero
{

namespace model
{

class FilterSet;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::FilterSet>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::FilterSet*);

class Filter;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Filter>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Filter*);

class Details;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Details>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Details*);

class FilterSetExcitationFilterLink;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::FilterSetExcitationFilterLink>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::FilterSetExcitationFilterLink*);

}

}

}

namespace omero
{

namespace model
{

class FilterSet;
bool operator==(const FilterSet&, const FilterSet&);
bool operator<(const FilterSet&, const FilterSet&);
::Ice::Object* upCast(::omero::model::FilterSet*);
typedef ::IceInternal::Handle< ::omero::model::FilterSet> FilterSetPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::FilterSet> FilterSetPrx;
void __patch(FilterSetPtr&, const ::Ice::ObjectPtr&);

class Filter;
bool operator==(const Filter&, const Filter&);
bool operator<(const Filter&, const Filter&);
::Ice::Object* upCast(::omero::model::Filter*);
typedef ::IceInternal::Handle< ::omero::model::Filter> FilterPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Filter> FilterPrx;
void __patch(FilterPtr&, const ::Ice::ObjectPtr&);

class Details;
bool operator==(const Details&, const Details&);
bool operator<(const Details&, const Details&);
::Ice::Object* upCast(::omero::model::Details*);
typedef ::IceInternal::Handle< ::omero::model::Details> DetailsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Details> DetailsPrx;
void __patch(DetailsPtr&, const ::Ice::ObjectPtr&);

class FilterSetExcitationFilterLink;
bool operator==(const FilterSetExcitationFilterLink&, const FilterSetExcitationFilterLink&);
bool operator<(const FilterSetExcitationFilterLink&, const FilterSetExcitationFilterLink&);
::Ice::Object* upCast(::omero::model::FilterSetExcitationFilterLink*);
typedef ::IceInternal::Handle< ::omero::model::FilterSetExcitationFilterLink> FilterSetExcitationFilterLinkPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::FilterSetExcitationFilterLink> FilterSetExcitationFilterLinkPrx;
void __patch(FilterSetExcitationFilterLinkPtr&, const ::Ice::ObjectPtr&);

}

}

namespace omero
{

namespace model
{

class Callback_FilterSetExcitationFilterLink_getVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilterSetExcitationFilterLink_getVersion_Base> Callback_FilterSetExcitationFilterLink_getVersionPtr;

class Callback_FilterSetExcitationFilterLink_setVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilterSetExcitationFilterLink_setVersion_Base> Callback_FilterSetExcitationFilterLink_setVersionPtr;

class Callback_FilterSetExcitationFilterLink_getParent_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilterSetExcitationFilterLink_getParent_Base> Callback_FilterSetExcitationFilterLink_getParentPtr;

class Callback_FilterSetExcitationFilterLink_setParent_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilterSetExcitationFilterLink_setParent_Base> Callback_FilterSetExcitationFilterLink_setParentPtr;

class Callback_FilterSetExcitationFilterLink_getChild_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilterSetExcitationFilterLink_getChild_Base> Callback_FilterSetExcitationFilterLink_getChildPtr;

class Callback_FilterSetExcitationFilterLink_setChild_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilterSetExcitationFilterLink_setChild_Base> Callback_FilterSetExcitationFilterLink_setChildPtr;

class Callback_FilterSetExcitationFilterLink_link_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilterSetExcitationFilterLink_link_Base> Callback_FilterSetExcitationFilterLink_linkPtr;

}

}

namespace IceProxy
{

namespace omero
{

namespace model
{

class FilterSetExcitationFilterLink : virtual public ::IceProxy::omero::model::IObject
{
public:

    ::omero::RIntPtr getVersion()
    {
        return getVersion(0);
    }
    ::omero::RIntPtr getVersion(const ::Ice::Context& __ctx)
    {
        return getVersion(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getVersion(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getVersion(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getVersion(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getVersion(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getVersion(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RIntPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::FilterSetExcitationFilterLinkPrx __proxy = ::omero::model::FilterSetExcitationFilterLinkPrx::uncheckedCast(__result->getProxy());
                ::omero::RIntPtr __ret;
                try
                {
                    __ret = __proxy->end_getVersion(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RIntPtr&)> _response;
        };
        return begin_getVersion(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getVersion()
    {
        return begin_getVersion(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx)
    {
        return begin_getVersion(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::omero::model::Callback_FilterSetExcitationFilterLink_getVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx, const ::omero::model::Callback_FilterSetExcitationFilterLink_getVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(&__ctx, __del, __cookie);
    }

    ::omero::RIntPtr end_getVersion(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RIntPtr getVersion(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setVersion(const ::omero::RIntPtr& theVersion)
    {
        setVersion(theVersion, 0);
    }
    void setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx)
    {
        setVersion(theVersion, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setVersion(const ::omero::RIntPtr& theVersion, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setVersion(theVersion, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setVersion(const ::omero::RIntPtr& theVersion, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setVersion(theVersion, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setVersion(theVersion, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setVersion(theVersion, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion)
    {
        return begin_setVersion(theVersion, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx)
    {
        return begin_setVersion(theVersion, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::omero::model::Callback_FilterSetExcitationFilterLink_setVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::omero::model::Callback_FilterSetExcitationFilterLink_setVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, &__ctx, __del, __cookie);
    }

    void end_setVersion(const ::Ice::AsyncResultPtr&);
    
private:

    void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::FilterSetPtr getParent()
    {
        return getParent(0);
    }
    ::omero::model::FilterSetPtr getParent(const ::Ice::Context& __ctx)
    {
        return getParent(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getParent(const ::IceInternal::Function<void (const ::omero::model::FilterSetPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getParent(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getParent(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getParent(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getParent(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::FilterSetPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getParent(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getParent(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getParent(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getParent(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::FilterSetPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::FilterSetPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::FilterSetExcitationFilterLinkPrx __proxy = ::omero::model::FilterSetExcitationFilterLinkPrx::uncheckedCast(__result->getProxy());
                ::omero::model::FilterSetPtr __ret;
                try
                {
                    __ret = __proxy->end_getParent(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::FilterSetPtr&)> _response;
        };
        return begin_getParent(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getParent()
    {
        return begin_getParent(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getParent(const ::Ice::Context& __ctx)
    {
        return begin_getParent(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getParent(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getParent(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getParent(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getParent(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getParent(const ::omero::model::Callback_FilterSetExcitationFilterLink_getParentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getParent(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getParent(const ::Ice::Context& __ctx, const ::omero::model::Callback_FilterSetExcitationFilterLink_getParentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getParent(&__ctx, __del, __cookie);
    }

    ::omero::model::FilterSetPtr end_getParent(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::FilterSetPtr getParent(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getParent(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setParent(const ::omero::model::FilterSetPtr& theParent)
    {
        setParent(theParent, 0);
    }
    void setParent(const ::omero::model::FilterSetPtr& theParent, const ::Ice::Context& __ctx)
    {
        setParent(theParent, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setParent(const ::omero::model::FilterSetPtr& theParent, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setParent(theParent, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setParent(const ::omero::model::FilterSetPtr& theParent, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setParent(theParent, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setParent(const ::omero::model::FilterSetPtr& theParent, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setParent(theParent, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setParent(const ::omero::model::FilterSetPtr& theParent, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setParent(theParent, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setParent(const ::omero::model::FilterSetPtr& theParent)
    {
        return begin_setParent(theParent, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setParent(const ::omero::model::FilterSetPtr& theParent, const ::Ice::Context& __ctx)
    {
        return begin_setParent(theParent, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setParent(const ::omero::model::FilterSetPtr& theParent, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setParent(theParent, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setParent(const ::omero::model::FilterSetPtr& theParent, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setParent(theParent, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setParent(const ::omero::model::FilterSetPtr& theParent, const ::omero::model::Callback_FilterSetExcitationFilterLink_setParentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setParent(theParent, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setParent(const ::omero::model::FilterSetPtr& theParent, const ::Ice::Context& __ctx, const ::omero::model::Callback_FilterSetExcitationFilterLink_setParentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setParent(theParent, &__ctx, __del, __cookie);
    }

    void end_setParent(const ::Ice::AsyncResultPtr&);
    
private:

    void setParent(const ::omero::model::FilterSetPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setParent(const ::omero::model::FilterSetPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::FilterPtr getChild()
    {
        return getChild(0);
    }
    ::omero::model::FilterPtr getChild(const ::Ice::Context& __ctx)
    {
        return getChild(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getChild(const ::IceInternal::Function<void (const ::omero::model::FilterPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getChild(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getChild(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getChild(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getChild(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::FilterPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getChild(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getChild(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getChild(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getChild(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::FilterPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::FilterPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::FilterSetExcitationFilterLinkPrx __proxy = ::omero::model::FilterSetExcitationFilterLinkPrx::uncheckedCast(__result->getProxy());
                ::omero::model::FilterPtr __ret;
                try
                {
                    __ret = __proxy->end_getChild(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::FilterPtr&)> _response;
        };
        return begin_getChild(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getChild()
    {
        return begin_getChild(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getChild(const ::Ice::Context& __ctx)
    {
        return begin_getChild(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getChild(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getChild(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getChild(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getChild(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getChild(const ::omero::model::Callback_FilterSetExcitationFilterLink_getChildPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getChild(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getChild(const ::Ice::Context& __ctx, const ::omero::model::Callback_FilterSetExcitationFilterLink_getChildPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getChild(&__ctx, __del, __cookie);
    }

    ::omero::model::FilterPtr end_getChild(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::FilterPtr getChild(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getChild(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setChild(const ::omero::model::FilterPtr& theChild)
    {
        setChild(theChild, 0);
    }
    void setChild(const ::omero::model::FilterPtr& theChild, const ::Ice::Context& __ctx)
    {
        setChild(theChild, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setChild(const ::omero::model::FilterPtr& theChild, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setChild(theChild, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setChild(const ::omero::model::FilterPtr& theChild, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setChild(theChild, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setChild(const ::omero::model::FilterPtr& theChild, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setChild(theChild, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setChild(const ::omero::model::FilterPtr& theChild, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setChild(theChild, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setChild(const ::omero::model::FilterPtr& theChild)
    {
        return begin_setChild(theChild, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setChild(const ::omero::model::FilterPtr& theChild, const ::Ice::Context& __ctx)
    {
        return begin_setChild(theChild, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setChild(const ::omero::model::FilterPtr& theChild, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setChild(theChild, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setChild(const ::omero::model::FilterPtr& theChild, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setChild(theChild, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setChild(const ::omero::model::FilterPtr& theChild, const ::omero::model::Callback_FilterSetExcitationFilterLink_setChildPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setChild(theChild, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setChild(const ::omero::model::FilterPtr& theChild, const ::Ice::Context& __ctx, const ::omero::model::Callback_FilterSetExcitationFilterLink_setChildPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setChild(theChild, &__ctx, __del, __cookie);
    }

    void end_setChild(const ::Ice::AsyncResultPtr&);
    
private:

    void setChild(const ::omero::model::FilterPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setChild(const ::omero::model::FilterPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void link(const ::omero::model::FilterSetPtr& theParent, const ::omero::model::FilterPtr& theChild)
    {
        link(theParent, theChild, 0);
    }
    void link(const ::omero::model::FilterSetPtr& theParent, const ::omero::model::FilterPtr& theChild, const ::Ice::Context& __ctx)
    {
        link(theParent, theChild, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_link(const ::omero::model::FilterSetPtr& theParent, const ::omero::model::FilterPtr& theChild, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_link(theParent, theChild, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_link(const ::omero::model::FilterSetPtr& theParent, const ::omero::model::FilterPtr& theChild, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_link(theParent, theChild, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_link(const ::omero::model::FilterSetPtr& theParent, const ::omero::model::FilterPtr& theChild, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_link(theParent, theChild, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_link(const ::omero::model::FilterSetPtr& theParent, const ::omero::model::FilterPtr& theChild, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_link(theParent, theChild, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_link(const ::omero::model::FilterSetPtr& theParent, const ::omero::model::FilterPtr& theChild)
    {
        return begin_link(theParent, theChild, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_link(const ::omero::model::FilterSetPtr& theParent, const ::omero::model::FilterPtr& theChild, const ::Ice::Context& __ctx)
    {
        return begin_link(theParent, theChild, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_link(const ::omero::model::FilterSetPtr& theParent, const ::omero::model::FilterPtr& theChild, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_link(theParent, theChild, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_link(const ::omero::model::FilterSetPtr& theParent, const ::omero::model::FilterPtr& theChild, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_link(theParent, theChild, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_link(const ::omero::model::FilterSetPtr& theParent, const ::omero::model::FilterPtr& theChild, const ::omero::model::Callback_FilterSetExcitationFilterLink_linkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_link(theParent, theChild, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_link(const ::omero::model::FilterSetPtr& theParent, const ::omero::model::FilterPtr& theChild, const ::Ice::Context& __ctx, const ::omero::model::Callback_FilterSetExcitationFilterLink_linkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_link(theParent, theChild, &__ctx, __del, __cookie);
    }

    void end_link(const ::Ice::AsyncResultPtr&);
    
private:

    void link(const ::omero::model::FilterSetPtr&, const ::omero::model::FilterPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_link(const ::omero::model::FilterSetPtr&, const ::omero::model::FilterPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<FilterSetExcitationFilterLink> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<FilterSetExcitationFilterLink*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<FilterSetExcitationFilterLink> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<FilterSetExcitationFilterLink*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<FilterSetExcitationFilterLink> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<FilterSetExcitationFilterLink*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<FilterSetExcitationFilterLink> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<FilterSetExcitationFilterLink*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<FilterSetExcitationFilterLink> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<FilterSetExcitationFilterLink*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<FilterSetExcitationFilterLink> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<FilterSetExcitationFilterLink*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<FilterSetExcitationFilterLink> ice_secure(bool __secure) const
    {
        return dynamic_cast<FilterSetExcitationFilterLink*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<FilterSetExcitationFilterLink> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<FilterSetExcitationFilterLink*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<FilterSetExcitationFilterLink> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<FilterSetExcitationFilterLink*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<FilterSetExcitationFilterLink> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<FilterSetExcitationFilterLink*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<FilterSetExcitationFilterLink> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<FilterSetExcitationFilterLink*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<FilterSetExcitationFilterLink> ice_twoway() const
    {
        return dynamic_cast<FilterSetExcitationFilterLink*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<FilterSetExcitationFilterLink> ice_oneway() const
    {
        return dynamic_cast<FilterSetExcitationFilterLink*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<FilterSetExcitationFilterLink> ice_batchOneway() const
    {
        return dynamic_cast<FilterSetExcitationFilterLink*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<FilterSetExcitationFilterLink> ice_datagram() const
    {
        return dynamic_cast<FilterSetExcitationFilterLink*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<FilterSetExcitationFilterLink> ice_batchDatagram() const
    {
        return dynamic_cast<FilterSetExcitationFilterLink*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<FilterSetExcitationFilterLink> ice_compress(bool __compress) const
    {
        return dynamic_cast<FilterSetExcitationFilterLink*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<FilterSetExcitationFilterLink> ice_timeout(int __timeout) const
    {
        return dynamic_cast<FilterSetExcitationFilterLink*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<FilterSetExcitationFilterLink> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<FilterSetExcitationFilterLink*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<FilterSetExcitationFilterLink> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<FilterSetExcitationFilterLink*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

namespace IceDelegate
{

namespace omero
{

namespace model
{

class FilterSetExcitationFilterLink : virtual public ::IceDelegate::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::FilterSetPtr getParent(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setParent(const ::omero::model::FilterSetPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::FilterPtr getChild(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setChild(const ::omero::model::FilterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void link(const ::omero::model::FilterSetPtr&, const ::omero::model::FilterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

}

namespace IceDelegateM
{

namespace omero
{

namespace model
{

class FilterSetExcitationFilterLink : virtual public ::IceDelegate::omero::model::FilterSetExcitationFilterLink,
                                      virtual public ::IceDelegateM::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::FilterSetPtr getParent(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setParent(const ::omero::model::FilterSetPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::FilterPtr getChild(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setChild(const ::omero::model::FilterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void link(const ::omero::model::FilterSetPtr&, const ::omero::model::FilterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace IceDelegateD
{

namespace omero
{

namespace model
{

class FilterSetExcitationFilterLink : virtual public ::IceDelegate::omero::model::FilterSetExcitationFilterLink,
                                      virtual public ::IceDelegateD::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::FilterSetPtr getParent(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setParent(const ::omero::model::FilterSetPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::FilterPtr getChild(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setChild(const ::omero::model::FilterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void link(const ::omero::model::FilterSetPtr&, const ::omero::model::FilterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace omero
{

namespace model
{

class FilterSetExcitationFilterLink : public ::omero::model::IObject
{
public:

    typedef FilterSetExcitationFilterLinkPrx ProxyType;
    typedef FilterSetExcitationFilterLinkPtr PointerType;

    FilterSetExcitationFilterLink()
    {
    }

    FilterSetExcitationFilterLink(const ::omero::RLongPtr& __ice_id, const ::omero::model::DetailsPtr& __ice_details, bool __ice_loaded, const ::omero::RIntPtr& __ice_version, const ::omero::model::FilterSetPtr& __ice_parent, const ::omero::model::FilterPtr& __ice_child) :
        ::omero::model::IObject(__ice_id, __ice_details, __ice_loaded)
        ,
        version(__ice_version),
        parent(__ice_parent),
        child(__ice_child)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    virtual ::omero::RIntPtr getVersion(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::FilterSetPtr getParent(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getParent(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setParent(const ::omero::model::FilterSetPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setParent(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::FilterPtr getChild(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getChild(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setChild(const ::omero::model::FilterPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setChild(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void link(const ::omero::model::FilterSetPtr&, const ::omero::model::FilterPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___link(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::model::IObject::__writeImpl;
    using ::omero::model::IObject::__readImpl;
    #endif

    ::omero::RIntPtr version;

    ::omero::model::FilterSetPtr parent;

    ::omero::model::FilterPtr child;
};

inline bool operator==(const FilterSetExcitationFilterLink& l, const FilterSetExcitationFilterLink& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const FilterSetExcitationFilterLink& l, const FilterSetExcitationFilterLink& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

}

namespace omero
{

namespace model
{

template<class T>
class CallbackNC_FilterSetExcitationFilterLink_getVersion : public Callback_FilterSetExcitationFilterLink_getVersion_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RIntPtr&);

    CallbackNC_FilterSetExcitationFilterLink_getVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterSetExcitationFilterLinkPrx __proxy = ::omero::model::FilterSetExcitationFilterLinkPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FilterSetExcitationFilterLink_getVersionPtr
newCallback_FilterSetExcitationFilterLink_getVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSetExcitationFilterLink_getVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSetExcitationFilterLink_getVersionPtr
newCallback_FilterSetExcitationFilterLink_getVersion(T* instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSetExcitationFilterLink_getVersion<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilterSetExcitationFilterLink_getVersion : public Callback_FilterSetExcitationFilterLink_getVersion_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RIntPtr&, const CT&);

    Callback_FilterSetExcitationFilterLink_getVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterSetExcitationFilterLinkPrx __proxy = ::omero::model::FilterSetExcitationFilterLinkPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FilterSetExcitationFilterLink_getVersionPtr
newCallback_FilterSetExcitationFilterLink_getVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSetExcitationFilterLink_getVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSetExcitationFilterLink_getVersionPtr
newCallback_FilterSetExcitationFilterLink_getVersion(T* instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSetExcitationFilterLink_getVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FilterSetExcitationFilterLink_setVersion : public Callback_FilterSetExcitationFilterLink_setVersion_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_FilterSetExcitationFilterLink_setVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_FilterSetExcitationFilterLink_setVersionPtr
newCallback_FilterSetExcitationFilterLink_setVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSetExcitationFilterLink_setVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSetExcitationFilterLink_setVersionPtr
newCallback_FilterSetExcitationFilterLink_setVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSetExcitationFilterLink_setVersion<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_FilterSetExcitationFilterLink_setVersionPtr
newCallback_FilterSetExcitationFilterLink_setVersion(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSetExcitationFilterLink_setVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSetExcitationFilterLink_setVersionPtr
newCallback_FilterSetExcitationFilterLink_setVersion(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSetExcitationFilterLink_setVersion<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilterSetExcitationFilterLink_setVersion : public Callback_FilterSetExcitationFilterLink_setVersion_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_FilterSetExcitationFilterLink_setVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_FilterSetExcitationFilterLink_setVersionPtr
newCallback_FilterSetExcitationFilterLink_setVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSetExcitationFilterLink_setVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSetExcitationFilterLink_setVersionPtr
newCallback_FilterSetExcitationFilterLink_setVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSetExcitationFilterLink_setVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSetExcitationFilterLink_setVersionPtr
newCallback_FilterSetExcitationFilterLink_setVersion(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSetExcitationFilterLink_setVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSetExcitationFilterLink_setVersionPtr
newCallback_FilterSetExcitationFilterLink_setVersion(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSetExcitationFilterLink_setVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_FilterSetExcitationFilterLink_getParent : public Callback_FilterSetExcitationFilterLink_getParent_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::FilterSetPtr&);

    CallbackNC_FilterSetExcitationFilterLink_getParent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterSetExcitationFilterLinkPrx __proxy = ::omero::model::FilterSetExcitationFilterLinkPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilterSetPtr __ret;
        try
        {
            __ret = __proxy->end_getParent(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FilterSetExcitationFilterLink_getParentPtr
newCallback_FilterSetExcitationFilterLink_getParent(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilterSetPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSetExcitationFilterLink_getParent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSetExcitationFilterLink_getParentPtr
newCallback_FilterSetExcitationFilterLink_getParent(T* instance, void (T::*cb)(const ::omero::model::FilterSetPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSetExcitationFilterLink_getParent<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilterSetExcitationFilterLink_getParent : public Callback_FilterSetExcitationFilterLink_getParent_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::FilterSetPtr&, const CT&);

    Callback_FilterSetExcitationFilterLink_getParent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterSetExcitationFilterLinkPrx __proxy = ::omero::model::FilterSetExcitationFilterLinkPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilterSetPtr __ret;
        try
        {
            __ret = __proxy->end_getParent(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FilterSetExcitationFilterLink_getParentPtr
newCallback_FilterSetExcitationFilterLink_getParent(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilterSetPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSetExcitationFilterLink_getParent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSetExcitationFilterLink_getParentPtr
newCallback_FilterSetExcitationFilterLink_getParent(T* instance, void (T::*cb)(const ::omero::model::FilterSetPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSetExcitationFilterLink_getParent<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FilterSetExcitationFilterLink_setParent : public Callback_FilterSetExcitationFilterLink_setParent_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_FilterSetExcitationFilterLink_setParent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_FilterSetExcitationFilterLink_setParentPtr
newCallback_FilterSetExcitationFilterLink_setParent(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSetExcitationFilterLink_setParent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSetExcitationFilterLink_setParentPtr
newCallback_FilterSetExcitationFilterLink_setParent(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSetExcitationFilterLink_setParent<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_FilterSetExcitationFilterLink_setParentPtr
newCallback_FilterSetExcitationFilterLink_setParent(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSetExcitationFilterLink_setParent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSetExcitationFilterLink_setParentPtr
newCallback_FilterSetExcitationFilterLink_setParent(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSetExcitationFilterLink_setParent<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilterSetExcitationFilterLink_setParent : public Callback_FilterSetExcitationFilterLink_setParent_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_FilterSetExcitationFilterLink_setParent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_FilterSetExcitationFilterLink_setParentPtr
newCallback_FilterSetExcitationFilterLink_setParent(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSetExcitationFilterLink_setParent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSetExcitationFilterLink_setParentPtr
newCallback_FilterSetExcitationFilterLink_setParent(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSetExcitationFilterLink_setParent<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSetExcitationFilterLink_setParentPtr
newCallback_FilterSetExcitationFilterLink_setParent(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSetExcitationFilterLink_setParent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSetExcitationFilterLink_setParentPtr
newCallback_FilterSetExcitationFilterLink_setParent(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSetExcitationFilterLink_setParent<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_FilterSetExcitationFilterLink_getChild : public Callback_FilterSetExcitationFilterLink_getChild_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::FilterPtr&);

    CallbackNC_FilterSetExcitationFilterLink_getChild(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterSetExcitationFilterLinkPrx __proxy = ::omero::model::FilterSetExcitationFilterLinkPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilterPtr __ret;
        try
        {
            __ret = __proxy->end_getChild(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FilterSetExcitationFilterLink_getChildPtr
newCallback_FilterSetExcitationFilterLink_getChild(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilterPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSetExcitationFilterLink_getChild<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSetExcitationFilterLink_getChildPtr
newCallback_FilterSetExcitationFilterLink_getChild(T* instance, void (T::*cb)(const ::omero::model::FilterPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSetExcitationFilterLink_getChild<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilterSetExcitationFilterLink_getChild : public Callback_FilterSetExcitationFilterLink_getChild_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::FilterPtr&, const CT&);

    Callback_FilterSetExcitationFilterLink_getChild(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterSetExcitationFilterLinkPrx __proxy = ::omero::model::FilterSetExcitationFilterLinkPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilterPtr __ret;
        try
        {
            __ret = __proxy->end_getChild(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FilterSetExcitationFilterLink_getChildPtr
newCallback_FilterSetExcitationFilterLink_getChild(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilterPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSetExcitationFilterLink_getChild<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSetExcitationFilterLink_getChildPtr
newCallback_FilterSetExcitationFilterLink_getChild(T* instance, void (T::*cb)(const ::omero::model::FilterPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSetExcitationFilterLink_getChild<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FilterSetExcitationFilterLink_setChild : public Callback_FilterSetExcitationFilterLink_setChild_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_FilterSetExcitationFilterLink_setChild(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_FilterSetExcitationFilterLink_setChildPtr
newCallback_FilterSetExcitationFilterLink_setChild(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSetExcitationFilterLink_setChild<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSetExcitationFilterLink_setChildPtr
newCallback_FilterSetExcitationFilterLink_setChild(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSetExcitationFilterLink_setChild<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_FilterSetExcitationFilterLink_setChildPtr
newCallback_FilterSetExcitationFilterLink_setChild(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSetExcitationFilterLink_setChild<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSetExcitationFilterLink_setChildPtr
newCallback_FilterSetExcitationFilterLink_setChild(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSetExcitationFilterLink_setChild<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilterSetExcitationFilterLink_setChild : public Callback_FilterSetExcitationFilterLink_setChild_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_FilterSetExcitationFilterLink_setChild(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_FilterSetExcitationFilterLink_setChildPtr
newCallback_FilterSetExcitationFilterLink_setChild(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSetExcitationFilterLink_setChild<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSetExcitationFilterLink_setChildPtr
newCallback_FilterSetExcitationFilterLink_setChild(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSetExcitationFilterLink_setChild<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSetExcitationFilterLink_setChildPtr
newCallback_FilterSetExcitationFilterLink_setChild(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSetExcitationFilterLink_setChild<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSetExcitationFilterLink_setChildPtr
newCallback_FilterSetExcitationFilterLink_setChild(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSetExcitationFilterLink_setChild<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_FilterSetExcitationFilterLink_link : public Callback_FilterSetExcitationFilterLink_link_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_FilterSetExcitationFilterLink_link(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_FilterSetExcitationFilterLink_linkPtr
newCallback_FilterSetExcitationFilterLink_link(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSetExcitationFilterLink_link<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSetExcitationFilterLink_linkPtr
newCallback_FilterSetExcitationFilterLink_link(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSetExcitationFilterLink_link<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_FilterSetExcitationFilterLink_linkPtr
newCallback_FilterSetExcitationFilterLink_link(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSetExcitationFilterLink_link<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSetExcitationFilterLink_linkPtr
newCallback_FilterSetExcitationFilterLink_link(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSetExcitationFilterLink_link<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilterSetExcitationFilterLink_link : public Callback_FilterSetExcitationFilterLink_link_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_FilterSetExcitationFilterLink_link(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_FilterSetExcitationFilterLink_linkPtr
newCallback_FilterSetExcitationFilterLink_link(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSetExcitationFilterLink_link<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSetExcitationFilterLink_linkPtr
newCallback_FilterSetExcitationFilterLink_link(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSetExcitationFilterLink_link<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSetExcitationFilterLink_linkPtr
newCallback_FilterSetExcitationFilterLink_link(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSetExcitationFilterLink_link<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSetExcitationFilterLink_linkPtr
newCallback_FilterSetExcitationFilterLink_link(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSetExcitationFilterLink_link<T, CT>(instance, 0, excb, sentcb);
}

}

}

#endif
