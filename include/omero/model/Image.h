// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Image.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_Image_h__
#define __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_Image_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <omero/model/IObject.h>
#include <omero/RTypes.h>
#include <omero/System.h>
#include <omero/Collections.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace omero
{

namespace model
{

class Format;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Format>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Format*);

class ImagingEnvironment;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::ImagingEnvironment>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::ImagingEnvironment*);

class ObjectiveSettings;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::ObjectiveSettings>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::ObjectiveSettings*);

class Instrument;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Instrument>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Instrument*);

class StageLabel;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::StageLabel>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::StageLabel*);

class Experiment;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Experiment>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Experiment*);

class Pixels;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Pixels>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Pixels*);

class WellSample;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::WellSample>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::WellSample*);

class Roi;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Roi>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Roi*);

class DatasetImageLink;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::DatasetImageLink>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::DatasetImageLink*);

class Dataset;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Dataset>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Dataset*);

class Fileset;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Fileset>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Fileset*);

class ImageAnnotationLink;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::ImageAnnotationLink>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::ImageAnnotationLink*);

class Annotation;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Annotation>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Annotation*);

class Details;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Details>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Details*);

class Image;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Image>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Image*);

}

}

}

namespace omero
{

namespace model
{

class Format;
bool operator==(const Format&, const Format&);
bool operator<(const Format&, const Format&);
::Ice::Object* upCast(::omero::model::Format*);
typedef ::IceInternal::Handle< ::omero::model::Format> FormatPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Format> FormatPrx;
void __patch(FormatPtr&, const ::Ice::ObjectPtr&);

class ImagingEnvironment;
bool operator==(const ImagingEnvironment&, const ImagingEnvironment&);
bool operator<(const ImagingEnvironment&, const ImagingEnvironment&);
::Ice::Object* upCast(::omero::model::ImagingEnvironment*);
typedef ::IceInternal::Handle< ::omero::model::ImagingEnvironment> ImagingEnvironmentPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::ImagingEnvironment> ImagingEnvironmentPrx;
void __patch(ImagingEnvironmentPtr&, const ::Ice::ObjectPtr&);

class ObjectiveSettings;
bool operator==(const ObjectiveSettings&, const ObjectiveSettings&);
bool operator<(const ObjectiveSettings&, const ObjectiveSettings&);
::Ice::Object* upCast(::omero::model::ObjectiveSettings*);
typedef ::IceInternal::Handle< ::omero::model::ObjectiveSettings> ObjectiveSettingsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::ObjectiveSettings> ObjectiveSettingsPrx;
void __patch(ObjectiveSettingsPtr&, const ::Ice::ObjectPtr&);

class Instrument;
bool operator==(const Instrument&, const Instrument&);
bool operator<(const Instrument&, const Instrument&);
::Ice::Object* upCast(::omero::model::Instrument*);
typedef ::IceInternal::Handle< ::omero::model::Instrument> InstrumentPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Instrument> InstrumentPrx;
void __patch(InstrumentPtr&, const ::Ice::ObjectPtr&);

class StageLabel;
bool operator==(const StageLabel&, const StageLabel&);
bool operator<(const StageLabel&, const StageLabel&);
::Ice::Object* upCast(::omero::model::StageLabel*);
typedef ::IceInternal::Handle< ::omero::model::StageLabel> StageLabelPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::StageLabel> StageLabelPrx;
void __patch(StageLabelPtr&, const ::Ice::ObjectPtr&);

class Experiment;
bool operator==(const Experiment&, const Experiment&);
bool operator<(const Experiment&, const Experiment&);
::Ice::Object* upCast(::omero::model::Experiment*);
typedef ::IceInternal::Handle< ::omero::model::Experiment> ExperimentPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Experiment> ExperimentPrx;
void __patch(ExperimentPtr&, const ::Ice::ObjectPtr&);

class Pixels;
bool operator==(const Pixels&, const Pixels&);
bool operator<(const Pixels&, const Pixels&);
::Ice::Object* upCast(::omero::model::Pixels*);
typedef ::IceInternal::Handle< ::omero::model::Pixels> PixelsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Pixels> PixelsPrx;
void __patch(PixelsPtr&, const ::Ice::ObjectPtr&);

class WellSample;
bool operator==(const WellSample&, const WellSample&);
bool operator<(const WellSample&, const WellSample&);
::Ice::Object* upCast(::omero::model::WellSample*);
typedef ::IceInternal::Handle< ::omero::model::WellSample> WellSamplePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::WellSample> WellSamplePrx;
void __patch(WellSamplePtr&, const ::Ice::ObjectPtr&);

class Roi;
bool operator==(const Roi&, const Roi&);
bool operator<(const Roi&, const Roi&);
::Ice::Object* upCast(::omero::model::Roi*);
typedef ::IceInternal::Handle< ::omero::model::Roi> RoiPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Roi> RoiPrx;
void __patch(RoiPtr&, const ::Ice::ObjectPtr&);

class DatasetImageLink;
bool operator==(const DatasetImageLink&, const DatasetImageLink&);
bool operator<(const DatasetImageLink&, const DatasetImageLink&);
::Ice::Object* upCast(::omero::model::DatasetImageLink*);
typedef ::IceInternal::Handle< ::omero::model::DatasetImageLink> DatasetImageLinkPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::DatasetImageLink> DatasetImageLinkPrx;
void __patch(DatasetImageLinkPtr&, const ::Ice::ObjectPtr&);

class Dataset;
bool operator==(const Dataset&, const Dataset&);
bool operator<(const Dataset&, const Dataset&);
::Ice::Object* upCast(::omero::model::Dataset*);
typedef ::IceInternal::Handle< ::omero::model::Dataset> DatasetPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Dataset> DatasetPrx;
void __patch(DatasetPtr&, const ::Ice::ObjectPtr&);

class Fileset;
bool operator==(const Fileset&, const Fileset&);
bool operator<(const Fileset&, const Fileset&);
::Ice::Object* upCast(::omero::model::Fileset*);
typedef ::IceInternal::Handle< ::omero::model::Fileset> FilesetPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Fileset> FilesetPrx;
void __patch(FilesetPtr&, const ::Ice::ObjectPtr&);

class ImageAnnotationLink;
bool operator==(const ImageAnnotationLink&, const ImageAnnotationLink&);
bool operator<(const ImageAnnotationLink&, const ImageAnnotationLink&);
::Ice::Object* upCast(::omero::model::ImageAnnotationLink*);
typedef ::IceInternal::Handle< ::omero::model::ImageAnnotationLink> ImageAnnotationLinkPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::ImageAnnotationLink> ImageAnnotationLinkPrx;
void __patch(ImageAnnotationLinkPtr&, const ::Ice::ObjectPtr&);

class Annotation;
bool operator==(const Annotation&, const Annotation&);
bool operator<(const Annotation&, const Annotation&);
::Ice::Object* upCast(::omero::model::Annotation*);
typedef ::IceInternal::Handle< ::omero::model::Annotation> AnnotationPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Annotation> AnnotationPrx;
void __patch(AnnotationPtr&, const ::Ice::ObjectPtr&);

class Details;
bool operator==(const Details&, const Details&);
bool operator<(const Details&, const Details&);
::Ice::Object* upCast(::omero::model::Details*);
typedef ::IceInternal::Handle< ::omero::model::Details> DetailsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Details> DetailsPrx;
void __patch(DetailsPtr&, const ::Ice::ObjectPtr&);

class Image;
bool operator==(const Image&, const Image&);
bool operator<(const Image&, const Image&);
::Ice::Object* upCast(::omero::model::Image*);
typedef ::IceInternal::Handle< ::omero::model::Image> ImagePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Image> ImagePrx;
void __patch(ImagePtr&, const ::Ice::ObjectPtr&);

}

}

namespace omero
{

namespace model
{

typedef ::std::vector< ::omero::model::PixelsPtr> ImagePixelsSeq;

typedef ::std::vector< ::omero::model::WellSamplePtr> ImageWellSamplesSeq;

typedef ::std::vector< ::omero::model::RoiPtr> ImageRoisSeq;

typedef ::std::vector< ::omero::model::DatasetImageLinkPtr> ImageDatasetLinksSeq;

typedef ::std::vector< ::omero::model::DatasetPtr> ImageLinkedDatasetSeq;

typedef ::std::vector< ::omero::model::ImageAnnotationLinkPtr> ImageAnnotationLinksSeq;

typedef ::std::vector< ::omero::model::AnnotationPtr> ImageLinkedAnnotationSeq;

}

}

namespace omero
{

namespace model
{

class Callback_Image_getVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_getVersion_Base> Callback_Image_getVersionPtr;

class Callback_Image_setVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_setVersion_Base> Callback_Image_setVersionPtr;

class Callback_Image_getAcquisitionDate_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_getAcquisitionDate_Base> Callback_Image_getAcquisitionDatePtr;

class Callback_Image_setAcquisitionDate_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_setAcquisitionDate_Base> Callback_Image_setAcquisitionDatePtr;

class Callback_Image_getArchived_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_getArchived_Base> Callback_Image_getArchivedPtr;

class Callback_Image_setArchived_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_setArchived_Base> Callback_Image_setArchivedPtr;

class Callback_Image_getPartial_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_getPartial_Base> Callback_Image_getPartialPtr;

class Callback_Image_setPartial_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_setPartial_Base> Callback_Image_setPartialPtr;

class Callback_Image_getFormat_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_getFormat_Base> Callback_Image_getFormatPtr;

class Callback_Image_setFormat_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_setFormat_Base> Callback_Image_setFormatPtr;

class Callback_Image_getImagingEnvironment_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_getImagingEnvironment_Base> Callback_Image_getImagingEnvironmentPtr;

class Callback_Image_setImagingEnvironment_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_setImagingEnvironment_Base> Callback_Image_setImagingEnvironmentPtr;

class Callback_Image_getObjectiveSettings_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_getObjectiveSettings_Base> Callback_Image_getObjectiveSettingsPtr;

class Callback_Image_setObjectiveSettings_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_setObjectiveSettings_Base> Callback_Image_setObjectiveSettingsPtr;

class Callback_Image_getInstrument_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_getInstrument_Base> Callback_Image_getInstrumentPtr;

class Callback_Image_setInstrument_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_setInstrument_Base> Callback_Image_setInstrumentPtr;

class Callback_Image_getStageLabel_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_getStageLabel_Base> Callback_Image_getStageLabelPtr;

class Callback_Image_setStageLabel_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_setStageLabel_Base> Callback_Image_setStageLabelPtr;

class Callback_Image_getExperiment_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_getExperiment_Base> Callback_Image_getExperimentPtr;

class Callback_Image_setExperiment_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_setExperiment_Base> Callback_Image_setExperimentPtr;

class Callback_Image_unloadPixels_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_unloadPixels_Base> Callback_Image_unloadPixelsPtr;

class Callback_Image_sizeOfPixels_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_sizeOfPixels_Base> Callback_Image_sizeOfPixelsPtr;

class Callback_Image_copyPixels_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_copyPixels_Base> Callback_Image_copyPixelsPtr;

class Callback_Image_addPixels_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_addPixels_Base> Callback_Image_addPixelsPtr;

class Callback_Image_addAllPixelsSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_addAllPixelsSet_Base> Callback_Image_addAllPixelsSetPtr;

class Callback_Image_removePixels_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_removePixels_Base> Callback_Image_removePixelsPtr;

class Callback_Image_removeAllPixelsSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_removeAllPixelsSet_Base> Callback_Image_removeAllPixelsSetPtr;

class Callback_Image_clearPixels_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_clearPixels_Base> Callback_Image_clearPixelsPtr;

class Callback_Image_reloadPixels_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_reloadPixels_Base> Callback_Image_reloadPixelsPtr;

class Callback_Image_getPixels_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_getPixels_Base> Callback_Image_getPixelsPtr;

class Callback_Image_setPixels_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_setPixels_Base> Callback_Image_setPixelsPtr;

class Callback_Image_getPrimaryPixels_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_getPrimaryPixels_Base> Callback_Image_getPrimaryPixelsPtr;

class Callback_Image_setPrimaryPixels_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_setPrimaryPixels_Base> Callback_Image_setPrimaryPixelsPtr;

class Callback_Image_unloadWellSamples_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_unloadWellSamples_Base> Callback_Image_unloadWellSamplesPtr;

class Callback_Image_sizeOfWellSamples_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_sizeOfWellSamples_Base> Callback_Image_sizeOfWellSamplesPtr;

class Callback_Image_copyWellSamples_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_copyWellSamples_Base> Callback_Image_copyWellSamplesPtr;

class Callback_Image_addWellSample_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_addWellSample_Base> Callback_Image_addWellSamplePtr;

class Callback_Image_addAllWellSampleSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_addAllWellSampleSet_Base> Callback_Image_addAllWellSampleSetPtr;

class Callback_Image_removeWellSample_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_removeWellSample_Base> Callback_Image_removeWellSamplePtr;

class Callback_Image_removeAllWellSampleSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_removeAllWellSampleSet_Base> Callback_Image_removeAllWellSampleSetPtr;

class Callback_Image_clearWellSamples_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_clearWellSamples_Base> Callback_Image_clearWellSamplesPtr;

class Callback_Image_reloadWellSamples_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_reloadWellSamples_Base> Callback_Image_reloadWellSamplesPtr;

class Callback_Image_unloadRois_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_unloadRois_Base> Callback_Image_unloadRoisPtr;

class Callback_Image_sizeOfRois_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_sizeOfRois_Base> Callback_Image_sizeOfRoisPtr;

class Callback_Image_copyRois_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_copyRois_Base> Callback_Image_copyRoisPtr;

class Callback_Image_addRoi_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_addRoi_Base> Callback_Image_addRoiPtr;

class Callback_Image_addAllRoiSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_addAllRoiSet_Base> Callback_Image_addAllRoiSetPtr;

class Callback_Image_removeRoi_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_removeRoi_Base> Callback_Image_removeRoiPtr;

class Callback_Image_removeAllRoiSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_removeAllRoiSet_Base> Callback_Image_removeAllRoiSetPtr;

class Callback_Image_clearRois_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_clearRois_Base> Callback_Image_clearRoisPtr;

class Callback_Image_reloadRois_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_reloadRois_Base> Callback_Image_reloadRoisPtr;

class Callback_Image_unloadDatasetLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_unloadDatasetLinks_Base> Callback_Image_unloadDatasetLinksPtr;

class Callback_Image_sizeOfDatasetLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_sizeOfDatasetLinks_Base> Callback_Image_sizeOfDatasetLinksPtr;

class Callback_Image_copyDatasetLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_copyDatasetLinks_Base> Callback_Image_copyDatasetLinksPtr;

class Callback_Image_addDatasetImageLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_addDatasetImageLink_Base> Callback_Image_addDatasetImageLinkPtr;

class Callback_Image_addAllDatasetImageLinkSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_addAllDatasetImageLinkSet_Base> Callback_Image_addAllDatasetImageLinkSetPtr;

class Callback_Image_removeDatasetImageLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_removeDatasetImageLink_Base> Callback_Image_removeDatasetImageLinkPtr;

class Callback_Image_removeAllDatasetImageLinkSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_removeAllDatasetImageLinkSet_Base> Callback_Image_removeAllDatasetImageLinkSetPtr;

class Callback_Image_clearDatasetLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_clearDatasetLinks_Base> Callback_Image_clearDatasetLinksPtr;

class Callback_Image_reloadDatasetLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_reloadDatasetLinks_Base> Callback_Image_reloadDatasetLinksPtr;

class Callback_Image_getDatasetLinksCountPerOwner_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_getDatasetLinksCountPerOwner_Base> Callback_Image_getDatasetLinksCountPerOwnerPtr;

class Callback_Image_linkDataset_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_linkDataset_Base> Callback_Image_linkDatasetPtr;

class Callback_Image_addDatasetImageLinkToBoth_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_addDatasetImageLinkToBoth_Base> Callback_Image_addDatasetImageLinkToBothPtr;

class Callback_Image_findDatasetImageLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_findDatasetImageLink_Base> Callback_Image_findDatasetImageLinkPtr;

class Callback_Image_unlinkDataset_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_unlinkDataset_Base> Callback_Image_unlinkDatasetPtr;

class Callback_Image_removeDatasetImageLinkFromBoth_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_removeDatasetImageLinkFromBoth_Base> Callback_Image_removeDatasetImageLinkFromBothPtr;

class Callback_Image_linkedDatasetList_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_linkedDatasetList_Base> Callback_Image_linkedDatasetListPtr;

class Callback_Image_getFileset_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_getFileset_Base> Callback_Image_getFilesetPtr;

class Callback_Image_setFileset_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_setFileset_Base> Callback_Image_setFilesetPtr;

class Callback_Image_unloadAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_unloadAnnotationLinks_Base> Callback_Image_unloadAnnotationLinksPtr;

class Callback_Image_sizeOfAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_sizeOfAnnotationLinks_Base> Callback_Image_sizeOfAnnotationLinksPtr;

class Callback_Image_copyAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_copyAnnotationLinks_Base> Callback_Image_copyAnnotationLinksPtr;

class Callback_Image_addImageAnnotationLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_addImageAnnotationLink_Base> Callback_Image_addImageAnnotationLinkPtr;

class Callback_Image_addAllImageAnnotationLinkSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_addAllImageAnnotationLinkSet_Base> Callback_Image_addAllImageAnnotationLinkSetPtr;

class Callback_Image_removeImageAnnotationLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_removeImageAnnotationLink_Base> Callback_Image_removeImageAnnotationLinkPtr;

class Callback_Image_removeAllImageAnnotationLinkSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_removeAllImageAnnotationLinkSet_Base> Callback_Image_removeAllImageAnnotationLinkSetPtr;

class Callback_Image_clearAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_clearAnnotationLinks_Base> Callback_Image_clearAnnotationLinksPtr;

class Callback_Image_reloadAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_reloadAnnotationLinks_Base> Callback_Image_reloadAnnotationLinksPtr;

class Callback_Image_getAnnotationLinksCountPerOwner_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_getAnnotationLinksCountPerOwner_Base> Callback_Image_getAnnotationLinksCountPerOwnerPtr;

class Callback_Image_linkAnnotation_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_linkAnnotation_Base> Callback_Image_linkAnnotationPtr;

class Callback_Image_addImageAnnotationLinkToBoth_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_addImageAnnotationLinkToBoth_Base> Callback_Image_addImageAnnotationLinkToBothPtr;

class Callback_Image_findImageAnnotationLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_findImageAnnotationLink_Base> Callback_Image_findImageAnnotationLinkPtr;

class Callback_Image_unlinkAnnotation_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_unlinkAnnotation_Base> Callback_Image_unlinkAnnotationPtr;

class Callback_Image_removeImageAnnotationLinkFromBoth_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_removeImageAnnotationLinkFromBoth_Base> Callback_Image_removeImageAnnotationLinkFromBothPtr;

class Callback_Image_linkedAnnotationList_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_linkedAnnotationList_Base> Callback_Image_linkedAnnotationListPtr;

class Callback_Image_getName_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_getName_Base> Callback_Image_getNamePtr;

class Callback_Image_setName_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_setName_Base> Callback_Image_setNamePtr;

class Callback_Image_getDescription_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_getDescription_Base> Callback_Image_getDescriptionPtr;

class Callback_Image_setDescription_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Image_setDescription_Base> Callback_Image_setDescriptionPtr;

}

}

namespace IceProxy
{

namespace omero
{

namespace model
{

class Image : virtual public ::IceProxy::omero::model::IObject
{
public:

    ::omero::RIntPtr getVersion()
    {
        return getVersion(0);
    }
    ::omero::RIntPtr getVersion(const ::Ice::Context& __ctx)
    {
        return getVersion(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getVersion(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getVersion(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getVersion(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getVersion(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getVersion(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RIntPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
                ::omero::RIntPtr __ret;
                try
                {
                    __ret = __proxy->end_getVersion(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RIntPtr&)> _response;
        };
        return begin_getVersion(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getVersion()
    {
        return begin_getVersion(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx)
    {
        return begin_getVersion(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::omero::model::Callback_Image_getVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_getVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(&__ctx, __del, __cookie);
    }

    ::omero::RIntPtr end_getVersion(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RIntPtr getVersion(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setVersion(const ::omero::RIntPtr& theVersion)
    {
        setVersion(theVersion, 0);
    }
    void setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx)
    {
        setVersion(theVersion, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setVersion(const ::omero::RIntPtr& theVersion, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setVersion(theVersion, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setVersion(const ::omero::RIntPtr& theVersion, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setVersion(theVersion, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setVersion(theVersion, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setVersion(theVersion, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion)
    {
        return begin_setVersion(theVersion, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx)
    {
        return begin_setVersion(theVersion, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::omero::model::Callback_Image_setVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_setVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, &__ctx, __del, __cookie);
    }

    void end_setVersion(const ::Ice::AsyncResultPtr&);
    
private:

    void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RTimePtr getAcquisitionDate()
    {
        return getAcquisitionDate(0);
    }
    ::omero::RTimePtr getAcquisitionDate(const ::Ice::Context& __ctx)
    {
        return getAcquisitionDate(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getAcquisitionDate(const ::IceInternal::Function<void (const ::omero::RTimePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAcquisitionDate(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAcquisitionDate(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAcquisitionDate(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getAcquisitionDate(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RTimePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAcquisitionDate(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAcquisitionDate(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAcquisitionDate(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getAcquisitionDate(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RTimePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RTimePtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
                ::omero::RTimePtr __ret;
                try
                {
                    __ret = __proxy->end_getAcquisitionDate(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RTimePtr&)> _response;
        };
        return begin_getAcquisitionDate(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getAcquisitionDate()
    {
        return begin_getAcquisitionDate(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAcquisitionDate(const ::Ice::Context& __ctx)
    {
        return begin_getAcquisitionDate(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAcquisitionDate(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAcquisitionDate(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAcquisitionDate(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAcquisitionDate(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAcquisitionDate(const ::omero::model::Callback_Image_getAcquisitionDatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAcquisitionDate(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAcquisitionDate(const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_getAcquisitionDatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAcquisitionDate(&__ctx, __del, __cookie);
    }

    ::omero::RTimePtr end_getAcquisitionDate(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RTimePtr getAcquisitionDate(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getAcquisitionDate(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setAcquisitionDate(const ::omero::RTimePtr& theAcquisitionDate)
    {
        setAcquisitionDate(theAcquisitionDate, 0);
    }
    void setAcquisitionDate(const ::omero::RTimePtr& theAcquisitionDate, const ::Ice::Context& __ctx)
    {
        setAcquisitionDate(theAcquisitionDate, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setAcquisitionDate(const ::omero::RTimePtr& theAcquisitionDate, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setAcquisitionDate(theAcquisitionDate, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setAcquisitionDate(const ::omero::RTimePtr& theAcquisitionDate, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setAcquisitionDate(theAcquisitionDate, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setAcquisitionDate(const ::omero::RTimePtr& theAcquisitionDate, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setAcquisitionDate(theAcquisitionDate, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setAcquisitionDate(const ::omero::RTimePtr& theAcquisitionDate, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setAcquisitionDate(theAcquisitionDate, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setAcquisitionDate(const ::omero::RTimePtr& theAcquisitionDate)
    {
        return begin_setAcquisitionDate(theAcquisitionDate, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setAcquisitionDate(const ::omero::RTimePtr& theAcquisitionDate, const ::Ice::Context& __ctx)
    {
        return begin_setAcquisitionDate(theAcquisitionDate, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setAcquisitionDate(const ::omero::RTimePtr& theAcquisitionDate, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setAcquisitionDate(theAcquisitionDate, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setAcquisitionDate(const ::omero::RTimePtr& theAcquisitionDate, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setAcquisitionDate(theAcquisitionDate, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setAcquisitionDate(const ::omero::RTimePtr& theAcquisitionDate, const ::omero::model::Callback_Image_setAcquisitionDatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setAcquisitionDate(theAcquisitionDate, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setAcquisitionDate(const ::omero::RTimePtr& theAcquisitionDate, const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_setAcquisitionDatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setAcquisitionDate(theAcquisitionDate, &__ctx, __del, __cookie);
    }

    void end_setAcquisitionDate(const ::Ice::AsyncResultPtr&);
    
private:

    void setAcquisitionDate(const ::omero::RTimePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setAcquisitionDate(const ::omero::RTimePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RBoolPtr getArchived()
    {
        return getArchived(0);
    }
    ::omero::RBoolPtr getArchived(const ::Ice::Context& __ctx)
    {
        return getArchived(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getArchived(const ::IceInternal::Function<void (const ::omero::RBoolPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getArchived(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getArchived(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getArchived(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getArchived(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RBoolPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getArchived(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getArchived(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getArchived(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getArchived(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RBoolPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RBoolPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
                ::omero::RBoolPtr __ret;
                try
                {
                    __ret = __proxy->end_getArchived(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RBoolPtr&)> _response;
        };
        return begin_getArchived(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getArchived()
    {
        return begin_getArchived(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getArchived(const ::Ice::Context& __ctx)
    {
        return begin_getArchived(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getArchived(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getArchived(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getArchived(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getArchived(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getArchived(const ::omero::model::Callback_Image_getArchivedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getArchived(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getArchived(const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_getArchivedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getArchived(&__ctx, __del, __cookie);
    }

    ::omero::RBoolPtr end_getArchived(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RBoolPtr getArchived(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getArchived(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setArchived(const ::omero::RBoolPtr& theArchived)
    {
        setArchived(theArchived, 0);
    }
    void setArchived(const ::omero::RBoolPtr& theArchived, const ::Ice::Context& __ctx)
    {
        setArchived(theArchived, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setArchived(const ::omero::RBoolPtr& theArchived, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setArchived(theArchived, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setArchived(const ::omero::RBoolPtr& theArchived, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setArchived(theArchived, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setArchived(const ::omero::RBoolPtr& theArchived, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setArchived(theArchived, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setArchived(const ::omero::RBoolPtr& theArchived, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setArchived(theArchived, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setArchived(const ::omero::RBoolPtr& theArchived)
    {
        return begin_setArchived(theArchived, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setArchived(const ::omero::RBoolPtr& theArchived, const ::Ice::Context& __ctx)
    {
        return begin_setArchived(theArchived, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setArchived(const ::omero::RBoolPtr& theArchived, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setArchived(theArchived, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setArchived(const ::omero::RBoolPtr& theArchived, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setArchived(theArchived, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setArchived(const ::omero::RBoolPtr& theArchived, const ::omero::model::Callback_Image_setArchivedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setArchived(theArchived, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setArchived(const ::omero::RBoolPtr& theArchived, const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_setArchivedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setArchived(theArchived, &__ctx, __del, __cookie);
    }

    void end_setArchived(const ::Ice::AsyncResultPtr&);
    
private:

    void setArchived(const ::omero::RBoolPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setArchived(const ::omero::RBoolPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RBoolPtr getPartial()
    {
        return getPartial(0);
    }
    ::omero::RBoolPtr getPartial(const ::Ice::Context& __ctx)
    {
        return getPartial(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getPartial(const ::IceInternal::Function<void (const ::omero::RBoolPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPartial(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPartial(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPartial(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getPartial(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RBoolPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPartial(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPartial(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPartial(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getPartial(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RBoolPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RBoolPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
                ::omero::RBoolPtr __ret;
                try
                {
                    __ret = __proxy->end_getPartial(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RBoolPtr&)> _response;
        };
        return begin_getPartial(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getPartial()
    {
        return begin_getPartial(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPartial(const ::Ice::Context& __ctx)
    {
        return begin_getPartial(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPartial(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPartial(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPartial(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPartial(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPartial(const ::omero::model::Callback_Image_getPartialPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPartial(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPartial(const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_getPartialPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPartial(&__ctx, __del, __cookie);
    }

    ::omero::RBoolPtr end_getPartial(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RBoolPtr getPartial(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getPartial(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setPartial(const ::omero::RBoolPtr& thePartial)
    {
        setPartial(thePartial, 0);
    }
    void setPartial(const ::omero::RBoolPtr& thePartial, const ::Ice::Context& __ctx)
    {
        setPartial(thePartial, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setPartial(const ::omero::RBoolPtr& thePartial, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setPartial(thePartial, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setPartial(const ::omero::RBoolPtr& thePartial, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPartial(thePartial, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setPartial(const ::omero::RBoolPtr& thePartial, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setPartial(thePartial, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setPartial(const ::omero::RBoolPtr& thePartial, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPartial(thePartial, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setPartial(const ::omero::RBoolPtr& thePartial)
    {
        return begin_setPartial(thePartial, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPartial(const ::omero::RBoolPtr& thePartial, const ::Ice::Context& __ctx)
    {
        return begin_setPartial(thePartial, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPartial(const ::omero::RBoolPtr& thePartial, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPartial(thePartial, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPartial(const ::omero::RBoolPtr& thePartial, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPartial(thePartial, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPartial(const ::omero::RBoolPtr& thePartial, const ::omero::model::Callback_Image_setPartialPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPartial(thePartial, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPartial(const ::omero::RBoolPtr& thePartial, const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_setPartialPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPartial(thePartial, &__ctx, __del, __cookie);
    }

    void end_setPartial(const ::Ice::AsyncResultPtr&);
    
private:

    void setPartial(const ::omero::RBoolPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setPartial(const ::omero::RBoolPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::FormatPtr getFormat()
    {
        return getFormat(0);
    }
    ::omero::model::FormatPtr getFormat(const ::Ice::Context& __ctx)
    {
        return getFormat(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getFormat(const ::IceInternal::Function<void (const ::omero::model::FormatPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getFormat(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getFormat(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getFormat(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getFormat(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::FormatPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getFormat(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getFormat(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getFormat(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getFormat(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::FormatPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::FormatPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
                ::omero::model::FormatPtr __ret;
                try
                {
                    __ret = __proxy->end_getFormat(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::FormatPtr&)> _response;
        };
        return begin_getFormat(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getFormat()
    {
        return begin_getFormat(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getFormat(const ::Ice::Context& __ctx)
    {
        return begin_getFormat(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getFormat(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFormat(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getFormat(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFormat(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getFormat(const ::omero::model::Callback_Image_getFormatPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFormat(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getFormat(const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_getFormatPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFormat(&__ctx, __del, __cookie);
    }

    ::omero::model::FormatPtr end_getFormat(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::FormatPtr getFormat(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getFormat(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setFormat(const ::omero::model::FormatPtr& theFormat)
    {
        setFormat(theFormat, 0);
    }
    void setFormat(const ::omero::model::FormatPtr& theFormat, const ::Ice::Context& __ctx)
    {
        setFormat(theFormat, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setFormat(const ::omero::model::FormatPtr& theFormat, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setFormat(theFormat, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setFormat(const ::omero::model::FormatPtr& theFormat, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setFormat(theFormat, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setFormat(const ::omero::model::FormatPtr& theFormat, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setFormat(theFormat, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setFormat(const ::omero::model::FormatPtr& theFormat, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setFormat(theFormat, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setFormat(const ::omero::model::FormatPtr& theFormat)
    {
        return begin_setFormat(theFormat, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setFormat(const ::omero::model::FormatPtr& theFormat, const ::Ice::Context& __ctx)
    {
        return begin_setFormat(theFormat, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setFormat(const ::omero::model::FormatPtr& theFormat, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setFormat(theFormat, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setFormat(const ::omero::model::FormatPtr& theFormat, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setFormat(theFormat, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setFormat(const ::omero::model::FormatPtr& theFormat, const ::omero::model::Callback_Image_setFormatPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setFormat(theFormat, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setFormat(const ::omero::model::FormatPtr& theFormat, const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_setFormatPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setFormat(theFormat, &__ctx, __del, __cookie);
    }

    void end_setFormat(const ::Ice::AsyncResultPtr&);
    
private:

    void setFormat(const ::omero::model::FormatPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setFormat(const ::omero::model::FormatPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::ImagingEnvironmentPtr getImagingEnvironment()
    {
        return getImagingEnvironment(0);
    }
    ::omero::model::ImagingEnvironmentPtr getImagingEnvironment(const ::Ice::Context& __ctx)
    {
        return getImagingEnvironment(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getImagingEnvironment(const ::IceInternal::Function<void (const ::omero::model::ImagingEnvironmentPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getImagingEnvironment(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getImagingEnvironment(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getImagingEnvironment(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getImagingEnvironment(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::ImagingEnvironmentPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getImagingEnvironment(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getImagingEnvironment(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getImagingEnvironment(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getImagingEnvironment(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::ImagingEnvironmentPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::ImagingEnvironmentPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
                ::omero::model::ImagingEnvironmentPtr __ret;
                try
                {
                    __ret = __proxy->end_getImagingEnvironment(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::ImagingEnvironmentPtr&)> _response;
        };
        return begin_getImagingEnvironment(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getImagingEnvironment()
    {
        return begin_getImagingEnvironment(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getImagingEnvironment(const ::Ice::Context& __ctx)
    {
        return begin_getImagingEnvironment(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getImagingEnvironment(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getImagingEnvironment(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getImagingEnvironment(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getImagingEnvironment(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getImagingEnvironment(const ::omero::model::Callback_Image_getImagingEnvironmentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getImagingEnvironment(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getImagingEnvironment(const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_getImagingEnvironmentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getImagingEnvironment(&__ctx, __del, __cookie);
    }

    ::omero::model::ImagingEnvironmentPtr end_getImagingEnvironment(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::ImagingEnvironmentPtr getImagingEnvironment(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getImagingEnvironment(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setImagingEnvironment(const ::omero::model::ImagingEnvironmentPtr& theImagingEnvironment)
    {
        setImagingEnvironment(theImagingEnvironment, 0);
    }
    void setImagingEnvironment(const ::omero::model::ImagingEnvironmentPtr& theImagingEnvironment, const ::Ice::Context& __ctx)
    {
        setImagingEnvironment(theImagingEnvironment, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setImagingEnvironment(const ::omero::model::ImagingEnvironmentPtr& theImagingEnvironment, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setImagingEnvironment(theImagingEnvironment, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setImagingEnvironment(const ::omero::model::ImagingEnvironmentPtr& theImagingEnvironment, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setImagingEnvironment(theImagingEnvironment, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setImagingEnvironment(const ::omero::model::ImagingEnvironmentPtr& theImagingEnvironment, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setImagingEnvironment(theImagingEnvironment, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setImagingEnvironment(const ::omero::model::ImagingEnvironmentPtr& theImagingEnvironment, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setImagingEnvironment(theImagingEnvironment, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setImagingEnvironment(const ::omero::model::ImagingEnvironmentPtr& theImagingEnvironment)
    {
        return begin_setImagingEnvironment(theImagingEnvironment, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setImagingEnvironment(const ::omero::model::ImagingEnvironmentPtr& theImagingEnvironment, const ::Ice::Context& __ctx)
    {
        return begin_setImagingEnvironment(theImagingEnvironment, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setImagingEnvironment(const ::omero::model::ImagingEnvironmentPtr& theImagingEnvironment, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setImagingEnvironment(theImagingEnvironment, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setImagingEnvironment(const ::omero::model::ImagingEnvironmentPtr& theImagingEnvironment, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setImagingEnvironment(theImagingEnvironment, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setImagingEnvironment(const ::omero::model::ImagingEnvironmentPtr& theImagingEnvironment, const ::omero::model::Callback_Image_setImagingEnvironmentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setImagingEnvironment(theImagingEnvironment, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setImagingEnvironment(const ::omero::model::ImagingEnvironmentPtr& theImagingEnvironment, const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_setImagingEnvironmentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setImagingEnvironment(theImagingEnvironment, &__ctx, __del, __cookie);
    }

    void end_setImagingEnvironment(const ::Ice::AsyncResultPtr&);
    
private:

    void setImagingEnvironment(const ::omero::model::ImagingEnvironmentPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setImagingEnvironment(const ::omero::model::ImagingEnvironmentPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::ObjectiveSettingsPtr getObjectiveSettings()
    {
        return getObjectiveSettings(0);
    }
    ::omero::model::ObjectiveSettingsPtr getObjectiveSettings(const ::Ice::Context& __ctx)
    {
        return getObjectiveSettings(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getObjectiveSettings(const ::IceInternal::Function<void (const ::omero::model::ObjectiveSettingsPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getObjectiveSettings(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getObjectiveSettings(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getObjectiveSettings(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getObjectiveSettings(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::ObjectiveSettingsPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getObjectiveSettings(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getObjectiveSettings(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getObjectiveSettings(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getObjectiveSettings(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::ObjectiveSettingsPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::ObjectiveSettingsPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
                ::omero::model::ObjectiveSettingsPtr __ret;
                try
                {
                    __ret = __proxy->end_getObjectiveSettings(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::ObjectiveSettingsPtr&)> _response;
        };
        return begin_getObjectiveSettings(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getObjectiveSettings()
    {
        return begin_getObjectiveSettings(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getObjectiveSettings(const ::Ice::Context& __ctx)
    {
        return begin_getObjectiveSettings(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getObjectiveSettings(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getObjectiveSettings(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getObjectiveSettings(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getObjectiveSettings(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getObjectiveSettings(const ::omero::model::Callback_Image_getObjectiveSettingsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getObjectiveSettings(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getObjectiveSettings(const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_getObjectiveSettingsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getObjectiveSettings(&__ctx, __del, __cookie);
    }

    ::omero::model::ObjectiveSettingsPtr end_getObjectiveSettings(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::ObjectiveSettingsPtr getObjectiveSettings(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getObjectiveSettings(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setObjectiveSettings(const ::omero::model::ObjectiveSettingsPtr& theObjectiveSettings)
    {
        setObjectiveSettings(theObjectiveSettings, 0);
    }
    void setObjectiveSettings(const ::omero::model::ObjectiveSettingsPtr& theObjectiveSettings, const ::Ice::Context& __ctx)
    {
        setObjectiveSettings(theObjectiveSettings, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setObjectiveSettings(const ::omero::model::ObjectiveSettingsPtr& theObjectiveSettings, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setObjectiveSettings(theObjectiveSettings, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setObjectiveSettings(const ::omero::model::ObjectiveSettingsPtr& theObjectiveSettings, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setObjectiveSettings(theObjectiveSettings, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setObjectiveSettings(const ::omero::model::ObjectiveSettingsPtr& theObjectiveSettings, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setObjectiveSettings(theObjectiveSettings, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setObjectiveSettings(const ::omero::model::ObjectiveSettingsPtr& theObjectiveSettings, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setObjectiveSettings(theObjectiveSettings, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setObjectiveSettings(const ::omero::model::ObjectiveSettingsPtr& theObjectiveSettings)
    {
        return begin_setObjectiveSettings(theObjectiveSettings, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setObjectiveSettings(const ::omero::model::ObjectiveSettingsPtr& theObjectiveSettings, const ::Ice::Context& __ctx)
    {
        return begin_setObjectiveSettings(theObjectiveSettings, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setObjectiveSettings(const ::omero::model::ObjectiveSettingsPtr& theObjectiveSettings, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setObjectiveSettings(theObjectiveSettings, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setObjectiveSettings(const ::omero::model::ObjectiveSettingsPtr& theObjectiveSettings, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setObjectiveSettings(theObjectiveSettings, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setObjectiveSettings(const ::omero::model::ObjectiveSettingsPtr& theObjectiveSettings, const ::omero::model::Callback_Image_setObjectiveSettingsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setObjectiveSettings(theObjectiveSettings, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setObjectiveSettings(const ::omero::model::ObjectiveSettingsPtr& theObjectiveSettings, const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_setObjectiveSettingsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setObjectiveSettings(theObjectiveSettings, &__ctx, __del, __cookie);
    }

    void end_setObjectiveSettings(const ::Ice::AsyncResultPtr&);
    
private:

    void setObjectiveSettings(const ::omero::model::ObjectiveSettingsPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setObjectiveSettings(const ::omero::model::ObjectiveSettingsPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::InstrumentPtr getInstrument()
    {
        return getInstrument(0);
    }
    ::omero::model::InstrumentPtr getInstrument(const ::Ice::Context& __ctx)
    {
        return getInstrument(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getInstrument(const ::IceInternal::Function<void (const ::omero::model::InstrumentPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getInstrument(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getInstrument(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getInstrument(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getInstrument(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::InstrumentPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getInstrument(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getInstrument(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getInstrument(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getInstrument(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::InstrumentPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::InstrumentPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
                ::omero::model::InstrumentPtr __ret;
                try
                {
                    __ret = __proxy->end_getInstrument(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::InstrumentPtr&)> _response;
        };
        return begin_getInstrument(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getInstrument()
    {
        return begin_getInstrument(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getInstrument(const ::Ice::Context& __ctx)
    {
        return begin_getInstrument(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getInstrument(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getInstrument(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getInstrument(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getInstrument(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getInstrument(const ::omero::model::Callback_Image_getInstrumentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getInstrument(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getInstrument(const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_getInstrumentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getInstrument(&__ctx, __del, __cookie);
    }

    ::omero::model::InstrumentPtr end_getInstrument(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::InstrumentPtr getInstrument(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getInstrument(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setInstrument(const ::omero::model::InstrumentPtr& theInstrument)
    {
        setInstrument(theInstrument, 0);
    }
    void setInstrument(const ::omero::model::InstrumentPtr& theInstrument, const ::Ice::Context& __ctx)
    {
        setInstrument(theInstrument, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setInstrument(const ::omero::model::InstrumentPtr& theInstrument, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setInstrument(theInstrument, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setInstrument(const ::omero::model::InstrumentPtr& theInstrument, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setInstrument(theInstrument, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setInstrument(const ::omero::model::InstrumentPtr& theInstrument, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setInstrument(theInstrument, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setInstrument(const ::omero::model::InstrumentPtr& theInstrument, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setInstrument(theInstrument, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setInstrument(const ::omero::model::InstrumentPtr& theInstrument)
    {
        return begin_setInstrument(theInstrument, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setInstrument(const ::omero::model::InstrumentPtr& theInstrument, const ::Ice::Context& __ctx)
    {
        return begin_setInstrument(theInstrument, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setInstrument(const ::omero::model::InstrumentPtr& theInstrument, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setInstrument(theInstrument, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setInstrument(const ::omero::model::InstrumentPtr& theInstrument, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setInstrument(theInstrument, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setInstrument(const ::omero::model::InstrumentPtr& theInstrument, const ::omero::model::Callback_Image_setInstrumentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setInstrument(theInstrument, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setInstrument(const ::omero::model::InstrumentPtr& theInstrument, const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_setInstrumentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setInstrument(theInstrument, &__ctx, __del, __cookie);
    }

    void end_setInstrument(const ::Ice::AsyncResultPtr&);
    
private:

    void setInstrument(const ::omero::model::InstrumentPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setInstrument(const ::omero::model::InstrumentPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::StageLabelPtr getStageLabel()
    {
        return getStageLabel(0);
    }
    ::omero::model::StageLabelPtr getStageLabel(const ::Ice::Context& __ctx)
    {
        return getStageLabel(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getStageLabel(const ::IceInternal::Function<void (const ::omero::model::StageLabelPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getStageLabel(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getStageLabel(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getStageLabel(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getStageLabel(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::StageLabelPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getStageLabel(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getStageLabel(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getStageLabel(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getStageLabel(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::StageLabelPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::StageLabelPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
                ::omero::model::StageLabelPtr __ret;
                try
                {
                    __ret = __proxy->end_getStageLabel(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::StageLabelPtr&)> _response;
        };
        return begin_getStageLabel(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getStageLabel()
    {
        return begin_getStageLabel(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getStageLabel(const ::Ice::Context& __ctx)
    {
        return begin_getStageLabel(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getStageLabel(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStageLabel(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getStageLabel(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStageLabel(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getStageLabel(const ::omero::model::Callback_Image_getStageLabelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStageLabel(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getStageLabel(const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_getStageLabelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStageLabel(&__ctx, __del, __cookie);
    }

    ::omero::model::StageLabelPtr end_getStageLabel(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::StageLabelPtr getStageLabel(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getStageLabel(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setStageLabel(const ::omero::model::StageLabelPtr& theStageLabel)
    {
        setStageLabel(theStageLabel, 0);
    }
    void setStageLabel(const ::omero::model::StageLabelPtr& theStageLabel, const ::Ice::Context& __ctx)
    {
        setStageLabel(theStageLabel, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setStageLabel(const ::omero::model::StageLabelPtr& theStageLabel, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setStageLabel(theStageLabel, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setStageLabel(const ::omero::model::StageLabelPtr& theStageLabel, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setStageLabel(theStageLabel, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setStageLabel(const ::omero::model::StageLabelPtr& theStageLabel, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setStageLabel(theStageLabel, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setStageLabel(const ::omero::model::StageLabelPtr& theStageLabel, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setStageLabel(theStageLabel, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setStageLabel(const ::omero::model::StageLabelPtr& theStageLabel)
    {
        return begin_setStageLabel(theStageLabel, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setStageLabel(const ::omero::model::StageLabelPtr& theStageLabel, const ::Ice::Context& __ctx)
    {
        return begin_setStageLabel(theStageLabel, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setStageLabel(const ::omero::model::StageLabelPtr& theStageLabel, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setStageLabel(theStageLabel, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setStageLabel(const ::omero::model::StageLabelPtr& theStageLabel, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setStageLabel(theStageLabel, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setStageLabel(const ::omero::model::StageLabelPtr& theStageLabel, const ::omero::model::Callback_Image_setStageLabelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setStageLabel(theStageLabel, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setStageLabel(const ::omero::model::StageLabelPtr& theStageLabel, const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_setStageLabelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setStageLabel(theStageLabel, &__ctx, __del, __cookie);
    }

    void end_setStageLabel(const ::Ice::AsyncResultPtr&);
    
private:

    void setStageLabel(const ::omero::model::StageLabelPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setStageLabel(const ::omero::model::StageLabelPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::ExperimentPtr getExperiment()
    {
        return getExperiment(0);
    }
    ::omero::model::ExperimentPtr getExperiment(const ::Ice::Context& __ctx)
    {
        return getExperiment(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getExperiment(const ::IceInternal::Function<void (const ::omero::model::ExperimentPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getExperiment(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getExperiment(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getExperiment(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getExperiment(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::ExperimentPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getExperiment(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getExperiment(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getExperiment(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getExperiment(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::ExperimentPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::ExperimentPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
                ::omero::model::ExperimentPtr __ret;
                try
                {
                    __ret = __proxy->end_getExperiment(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::ExperimentPtr&)> _response;
        };
        return begin_getExperiment(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getExperiment()
    {
        return begin_getExperiment(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getExperiment(const ::Ice::Context& __ctx)
    {
        return begin_getExperiment(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getExperiment(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getExperiment(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getExperiment(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getExperiment(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getExperiment(const ::omero::model::Callback_Image_getExperimentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getExperiment(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getExperiment(const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_getExperimentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getExperiment(&__ctx, __del, __cookie);
    }

    ::omero::model::ExperimentPtr end_getExperiment(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::ExperimentPtr getExperiment(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getExperiment(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setExperiment(const ::omero::model::ExperimentPtr& theExperiment)
    {
        setExperiment(theExperiment, 0);
    }
    void setExperiment(const ::omero::model::ExperimentPtr& theExperiment, const ::Ice::Context& __ctx)
    {
        setExperiment(theExperiment, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setExperiment(const ::omero::model::ExperimentPtr& theExperiment, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setExperiment(theExperiment, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setExperiment(const ::omero::model::ExperimentPtr& theExperiment, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setExperiment(theExperiment, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setExperiment(const ::omero::model::ExperimentPtr& theExperiment, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setExperiment(theExperiment, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setExperiment(const ::omero::model::ExperimentPtr& theExperiment, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setExperiment(theExperiment, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setExperiment(const ::omero::model::ExperimentPtr& theExperiment)
    {
        return begin_setExperiment(theExperiment, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setExperiment(const ::omero::model::ExperimentPtr& theExperiment, const ::Ice::Context& __ctx)
    {
        return begin_setExperiment(theExperiment, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setExperiment(const ::omero::model::ExperimentPtr& theExperiment, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setExperiment(theExperiment, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setExperiment(const ::omero::model::ExperimentPtr& theExperiment, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setExperiment(theExperiment, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setExperiment(const ::omero::model::ExperimentPtr& theExperiment, const ::omero::model::Callback_Image_setExperimentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setExperiment(theExperiment, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setExperiment(const ::omero::model::ExperimentPtr& theExperiment, const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_setExperimentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setExperiment(theExperiment, &__ctx, __del, __cookie);
    }

    void end_setExperiment(const ::Ice::AsyncResultPtr&);
    
private:

    void setExperiment(const ::omero::model::ExperimentPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setExperiment(const ::omero::model::ExperimentPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unloadPixels()
    {
        unloadPixels(0);
    }
    void unloadPixels(const ::Ice::Context& __ctx)
    {
        unloadPixels(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_unloadPixels(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unloadPixels(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_unloadPixels(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unloadPixels(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unloadPixels(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unloadPixels(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unloadPixels(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unloadPixels(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_unloadPixels()
    {
        return begin_unloadPixels(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadPixels(const ::Ice::Context& __ctx)
    {
        return begin_unloadPixels(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadPixels(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadPixels(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadPixels(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadPixels(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadPixels(const ::omero::model::Callback_Image_unloadPixelsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadPixels(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadPixels(const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_unloadPixelsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadPixels(&__ctx, __del, __cookie);
    }

    void end_unloadPixels(const ::Ice::AsyncResultPtr&);
    
private:

    void unloadPixels(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unloadPixels(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int sizeOfPixels()
    {
        return sizeOfPixels(0);
    }
    ::Ice::Int sizeOfPixels(const ::Ice::Context& __ctx)
    {
        return sizeOfPixels(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_sizeOfPixels(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sizeOfPixels(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfPixels(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sizeOfPixels(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfPixels(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sizeOfPixels(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfPixels(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sizeOfPixels(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_sizeOfPixels(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_sizeOfPixels(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_sizeOfPixels(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_sizeOfPixels()
    {
        return begin_sizeOfPixels(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfPixels(const ::Ice::Context& __ctx)
    {
        return begin_sizeOfPixels(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfPixels(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfPixels(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfPixels(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfPixels(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfPixels(const ::omero::model::Callback_Image_sizeOfPixelsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfPixels(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfPixels(const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_sizeOfPixelsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfPixels(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_sizeOfPixels(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int sizeOfPixels(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sizeOfPixels(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::ImagePixelsSeq copyPixels()
    {
        return copyPixels(0);
    }
    ::omero::model::ImagePixelsSeq copyPixels(const ::Ice::Context& __ctx)
    {
        return copyPixels(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_copyPixels(const ::IceInternal::Function<void (const ::omero::model::ImagePixelsSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_copyPixels(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_copyPixels(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_copyPixels(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_copyPixels(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::ImagePixelsSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_copyPixels(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_copyPixels(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_copyPixels(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_copyPixels(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::ImagePixelsSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::ImagePixelsSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
                ::omero::model::ImagePixelsSeq __ret;
                try
                {
                    __ret = __proxy->end_copyPixels(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::ImagePixelsSeq&)> _response;
        };
        return begin_copyPixels(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_copyPixels()
    {
        return begin_copyPixels(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyPixels(const ::Ice::Context& __ctx)
    {
        return begin_copyPixels(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyPixels(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyPixels(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyPixels(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyPixels(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyPixels(const ::omero::model::Callback_Image_copyPixelsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyPixels(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyPixels(const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_copyPixelsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyPixels(&__ctx, __del, __cookie);
    }

    ::omero::model::ImagePixelsSeq end_copyPixels(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::ImagePixelsSeq copyPixels(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_copyPixels(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addPixels(const ::omero::model::PixelsPtr& target)
    {
        addPixels(target, 0);
    }
    void addPixels(const ::omero::model::PixelsPtr& target, const ::Ice::Context& __ctx)
    {
        addPixels(target, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addPixels(const ::omero::model::PixelsPtr& target, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addPixels(target, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addPixels(const ::omero::model::PixelsPtr& target, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addPixels(target, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addPixels(const ::omero::model::PixelsPtr& target, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addPixels(target, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addPixels(const ::omero::model::PixelsPtr& target, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addPixels(target, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addPixels(const ::omero::model::PixelsPtr& target)
    {
        return begin_addPixels(target, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addPixels(const ::omero::model::PixelsPtr& target, const ::Ice::Context& __ctx)
    {
        return begin_addPixels(target, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addPixels(const ::omero::model::PixelsPtr& target, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPixels(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addPixels(const ::omero::model::PixelsPtr& target, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPixels(target, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addPixels(const ::omero::model::PixelsPtr& target, const ::omero::model::Callback_Image_addPixelsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPixels(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addPixels(const ::omero::model::PixelsPtr& target, const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_addPixelsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPixels(target, &__ctx, __del, __cookie);
    }

    void end_addPixels(const ::Ice::AsyncResultPtr&);
    
private:

    void addPixels(const ::omero::model::PixelsPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addPixels(const ::omero::model::PixelsPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addAllPixelsSet(const ::omero::model::ImagePixelsSeq& targets)
    {
        addAllPixelsSet(targets, 0);
    }
    void addAllPixelsSet(const ::omero::model::ImagePixelsSeq& targets, const ::Ice::Context& __ctx)
    {
        addAllPixelsSet(targets, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addAllPixelsSet(const ::omero::model::ImagePixelsSeq& targets, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addAllPixelsSet(targets, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addAllPixelsSet(const ::omero::model::ImagePixelsSeq& targets, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addAllPixelsSet(targets, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addAllPixelsSet(const ::omero::model::ImagePixelsSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addAllPixelsSet(targets, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addAllPixelsSet(const ::omero::model::ImagePixelsSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addAllPixelsSet(targets, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addAllPixelsSet(const ::omero::model::ImagePixelsSeq& targets)
    {
        return begin_addAllPixelsSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllPixelsSet(const ::omero::model::ImagePixelsSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_addAllPixelsSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllPixelsSet(const ::omero::model::ImagePixelsSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllPixelsSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllPixelsSet(const ::omero::model::ImagePixelsSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllPixelsSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllPixelsSet(const ::omero::model::ImagePixelsSeq& targets, const ::omero::model::Callback_Image_addAllPixelsSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllPixelsSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllPixelsSet(const ::omero::model::ImagePixelsSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_addAllPixelsSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllPixelsSet(targets, &__ctx, __del, __cookie);
    }

    void end_addAllPixelsSet(const ::Ice::AsyncResultPtr&);
    
private:

    void addAllPixelsSet(const ::omero::model::ImagePixelsSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addAllPixelsSet(const ::omero::model::ImagePixelsSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removePixels(const ::omero::model::PixelsPtr& theTarget)
    {
        removePixels(theTarget, 0);
    }
    void removePixels(const ::omero::model::PixelsPtr& theTarget, const ::Ice::Context& __ctx)
    {
        removePixels(theTarget, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removePixels(const ::omero::model::PixelsPtr& theTarget, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removePixels(theTarget, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removePixels(const ::omero::model::PixelsPtr& theTarget, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removePixels(theTarget, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removePixels(const ::omero::model::PixelsPtr& theTarget, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removePixels(theTarget, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removePixels(const ::omero::model::PixelsPtr& theTarget, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removePixels(theTarget, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removePixels(const ::omero::model::PixelsPtr& theTarget)
    {
        return begin_removePixels(theTarget, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removePixels(const ::omero::model::PixelsPtr& theTarget, const ::Ice::Context& __ctx)
    {
        return begin_removePixels(theTarget, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removePixels(const ::omero::model::PixelsPtr& theTarget, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removePixels(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removePixels(const ::omero::model::PixelsPtr& theTarget, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removePixels(theTarget, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removePixels(const ::omero::model::PixelsPtr& theTarget, const ::omero::model::Callback_Image_removePixelsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removePixels(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removePixels(const ::omero::model::PixelsPtr& theTarget, const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_removePixelsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removePixels(theTarget, &__ctx, __del, __cookie);
    }

    void end_removePixels(const ::Ice::AsyncResultPtr&);
    
private:

    void removePixels(const ::omero::model::PixelsPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removePixels(const ::omero::model::PixelsPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeAllPixelsSet(const ::omero::model::ImagePixelsSeq& targets)
    {
        removeAllPixelsSet(targets, 0);
    }
    void removeAllPixelsSet(const ::omero::model::ImagePixelsSeq& targets, const ::Ice::Context& __ctx)
    {
        removeAllPixelsSet(targets, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeAllPixelsSet(const ::omero::model::ImagePixelsSeq& targets, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeAllPixelsSet(targets, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeAllPixelsSet(const ::omero::model::ImagePixelsSeq& targets, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeAllPixelsSet(targets, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeAllPixelsSet(const ::omero::model::ImagePixelsSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeAllPixelsSet(targets, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeAllPixelsSet(const ::omero::model::ImagePixelsSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeAllPixelsSet(targets, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeAllPixelsSet(const ::omero::model::ImagePixelsSeq& targets)
    {
        return begin_removeAllPixelsSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllPixelsSet(const ::omero::model::ImagePixelsSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_removeAllPixelsSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllPixelsSet(const ::omero::model::ImagePixelsSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllPixelsSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllPixelsSet(const ::omero::model::ImagePixelsSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllPixelsSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllPixelsSet(const ::omero::model::ImagePixelsSeq& targets, const ::omero::model::Callback_Image_removeAllPixelsSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllPixelsSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllPixelsSet(const ::omero::model::ImagePixelsSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_removeAllPixelsSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllPixelsSet(targets, &__ctx, __del, __cookie);
    }

    void end_removeAllPixelsSet(const ::Ice::AsyncResultPtr&);
    
private:

    void removeAllPixelsSet(const ::omero::model::ImagePixelsSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeAllPixelsSet(const ::omero::model::ImagePixelsSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void clearPixels()
    {
        clearPixels(0);
    }
    void clearPixels(const ::Ice::Context& __ctx)
    {
        clearPixels(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_clearPixels(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_clearPixels(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_clearPixels(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_clearPixels(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_clearPixels(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_clearPixels(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_clearPixels(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_clearPixels(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_clearPixels()
    {
        return begin_clearPixels(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearPixels(const ::Ice::Context& __ctx)
    {
        return begin_clearPixels(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearPixels(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearPixels(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearPixels(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearPixels(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearPixels(const ::omero::model::Callback_Image_clearPixelsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearPixels(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearPixels(const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_clearPixelsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearPixels(&__ctx, __del, __cookie);
    }

    void end_clearPixels(const ::Ice::AsyncResultPtr&);
    
private:

    void clearPixels(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_clearPixels(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reloadPixels(const ::omero::model::ImagePtr& toCopy)
    {
        reloadPixels(toCopy, 0);
    }
    void reloadPixels(const ::omero::model::ImagePtr& toCopy, const ::Ice::Context& __ctx)
    {
        reloadPixels(toCopy, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_reloadPixels(const ::omero::model::ImagePtr& toCopy, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reloadPixels(toCopy, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_reloadPixels(const ::omero::model::ImagePtr& toCopy, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reloadPixels(toCopy, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reloadPixels(const ::omero::model::ImagePtr& toCopy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reloadPixels(toCopy, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reloadPixels(const ::omero::model::ImagePtr& toCopy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reloadPixels(toCopy, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_reloadPixels(const ::omero::model::ImagePtr& toCopy)
    {
        return begin_reloadPixels(toCopy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadPixels(const ::omero::model::ImagePtr& toCopy, const ::Ice::Context& __ctx)
    {
        return begin_reloadPixels(toCopy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadPixels(const ::omero::model::ImagePtr& toCopy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadPixels(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadPixels(const ::omero::model::ImagePtr& toCopy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadPixels(toCopy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadPixels(const ::omero::model::ImagePtr& toCopy, const ::omero::model::Callback_Image_reloadPixelsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadPixels(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadPixels(const ::omero::model::ImagePtr& toCopy, const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_reloadPixelsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadPixels(toCopy, &__ctx, __del, __cookie);
    }

    void end_reloadPixels(const ::Ice::AsyncResultPtr&);
    
private:

    void reloadPixels(const ::omero::model::ImagePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reloadPixels(const ::omero::model::ImagePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::PixelsPtr getPixels(::Ice::Int index)
    {
        return getPixels(index, 0);
    }
    ::omero::model::PixelsPtr getPixels(::Ice::Int index, const ::Ice::Context& __ctx)
    {
        return getPixels(index, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getPixels(::Ice::Int index, const ::IceInternal::Function<void (const ::omero::model::PixelsPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPixels(index, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPixels(::Ice::Int index, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPixels(index, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getPixels(::Ice::Int index, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::PixelsPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPixels(index, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPixels(::Ice::Int index, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPixels(index, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getPixels(::Ice::Int index, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::PixelsPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::PixelsPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
                ::omero::model::PixelsPtr __ret;
                try
                {
                    __ret = __proxy->end_getPixels(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::PixelsPtr&)> _response;
        };
        return begin_getPixels(index, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getPixels(::Ice::Int index)
    {
        return begin_getPixels(index, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPixels(::Ice::Int index, const ::Ice::Context& __ctx)
    {
        return begin_getPixels(index, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPixels(::Ice::Int index, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPixels(index, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPixels(::Ice::Int index, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPixels(index, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPixels(::Ice::Int index, const ::omero::model::Callback_Image_getPixelsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPixels(index, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPixels(::Ice::Int index, const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_getPixelsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPixels(index, &__ctx, __del, __cookie);
    }

    ::omero::model::PixelsPtr end_getPixels(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::PixelsPtr getPixels(::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getPixels(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::PixelsPtr setPixels(::Ice::Int index, const ::omero::model::PixelsPtr& theElement)
    {
        return setPixels(index, theElement, 0);
    }
    ::omero::model::PixelsPtr setPixels(::Ice::Int index, const ::omero::model::PixelsPtr& theElement, const ::Ice::Context& __ctx)
    {
        return setPixels(index, theElement, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setPixels(::Ice::Int index, const ::omero::model::PixelsPtr& theElement, const ::IceInternal::Function<void (const ::omero::model::PixelsPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setPixels(index, theElement, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setPixels(::Ice::Int index, const ::omero::model::PixelsPtr& theElement, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPixels(index, theElement, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setPixels(::Ice::Int index, const ::omero::model::PixelsPtr& theElement, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::PixelsPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setPixels(index, theElement, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setPixels(::Ice::Int index, const ::omero::model::PixelsPtr& theElement, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPixels(index, theElement, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setPixels(::Ice::Int index, const ::omero::model::PixelsPtr& theElement, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::PixelsPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::PixelsPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
                ::omero::model::PixelsPtr __ret;
                try
                {
                    __ret = __proxy->end_setPixels(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::PixelsPtr&)> _response;
        };
        return begin_setPixels(index, theElement, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setPixels(::Ice::Int index, const ::omero::model::PixelsPtr& theElement)
    {
        return begin_setPixels(index, theElement, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPixels(::Ice::Int index, const ::omero::model::PixelsPtr& theElement, const ::Ice::Context& __ctx)
    {
        return begin_setPixels(index, theElement, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPixels(::Ice::Int index, const ::omero::model::PixelsPtr& theElement, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPixels(index, theElement, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPixels(::Ice::Int index, const ::omero::model::PixelsPtr& theElement, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPixels(index, theElement, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPixels(::Ice::Int index, const ::omero::model::PixelsPtr& theElement, const ::omero::model::Callback_Image_setPixelsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPixels(index, theElement, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPixels(::Ice::Int index, const ::omero::model::PixelsPtr& theElement, const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_setPixelsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPixels(index, theElement, &__ctx, __del, __cookie);
    }

    ::omero::model::PixelsPtr end_setPixels(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::PixelsPtr setPixels(::Ice::Int, const ::omero::model::PixelsPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setPixels(::Ice::Int, const ::omero::model::PixelsPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::PixelsPtr getPrimaryPixels()
    {
        return getPrimaryPixels(0);
    }
    ::omero::model::PixelsPtr getPrimaryPixels(const ::Ice::Context& __ctx)
    {
        return getPrimaryPixels(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getPrimaryPixels(const ::IceInternal::Function<void (const ::omero::model::PixelsPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPrimaryPixels(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPrimaryPixels(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPrimaryPixels(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getPrimaryPixels(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::PixelsPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPrimaryPixels(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPrimaryPixels(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPrimaryPixels(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getPrimaryPixels(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::PixelsPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::PixelsPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
                ::omero::model::PixelsPtr __ret;
                try
                {
                    __ret = __proxy->end_getPrimaryPixels(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::PixelsPtr&)> _response;
        };
        return begin_getPrimaryPixels(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getPrimaryPixels()
    {
        return begin_getPrimaryPixels(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPrimaryPixels(const ::Ice::Context& __ctx)
    {
        return begin_getPrimaryPixels(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPrimaryPixels(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPrimaryPixels(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPrimaryPixels(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPrimaryPixels(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPrimaryPixels(const ::omero::model::Callback_Image_getPrimaryPixelsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPrimaryPixels(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPrimaryPixels(const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_getPrimaryPixelsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPrimaryPixels(&__ctx, __del, __cookie);
    }

    ::omero::model::PixelsPtr end_getPrimaryPixels(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::PixelsPtr getPrimaryPixels(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getPrimaryPixels(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::PixelsPtr setPrimaryPixels(const ::omero::model::PixelsPtr& theElement)
    {
        return setPrimaryPixels(theElement, 0);
    }
    ::omero::model::PixelsPtr setPrimaryPixels(const ::omero::model::PixelsPtr& theElement, const ::Ice::Context& __ctx)
    {
        return setPrimaryPixels(theElement, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setPrimaryPixels(const ::omero::model::PixelsPtr& theElement, const ::IceInternal::Function<void (const ::omero::model::PixelsPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setPrimaryPixels(theElement, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setPrimaryPixels(const ::omero::model::PixelsPtr& theElement, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPrimaryPixels(theElement, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setPrimaryPixels(const ::omero::model::PixelsPtr& theElement, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::PixelsPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setPrimaryPixels(theElement, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setPrimaryPixels(const ::omero::model::PixelsPtr& theElement, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPrimaryPixels(theElement, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setPrimaryPixels(const ::omero::model::PixelsPtr& theElement, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::PixelsPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::PixelsPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
                ::omero::model::PixelsPtr __ret;
                try
                {
                    __ret = __proxy->end_setPrimaryPixels(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::PixelsPtr&)> _response;
        };
        return begin_setPrimaryPixels(theElement, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setPrimaryPixels(const ::omero::model::PixelsPtr& theElement)
    {
        return begin_setPrimaryPixels(theElement, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPrimaryPixels(const ::omero::model::PixelsPtr& theElement, const ::Ice::Context& __ctx)
    {
        return begin_setPrimaryPixels(theElement, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPrimaryPixels(const ::omero::model::PixelsPtr& theElement, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPrimaryPixels(theElement, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPrimaryPixels(const ::omero::model::PixelsPtr& theElement, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPrimaryPixels(theElement, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPrimaryPixels(const ::omero::model::PixelsPtr& theElement, const ::omero::model::Callback_Image_setPrimaryPixelsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPrimaryPixels(theElement, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPrimaryPixels(const ::omero::model::PixelsPtr& theElement, const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_setPrimaryPixelsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPrimaryPixels(theElement, &__ctx, __del, __cookie);
    }

    ::omero::model::PixelsPtr end_setPrimaryPixels(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::PixelsPtr setPrimaryPixels(const ::omero::model::PixelsPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setPrimaryPixels(const ::omero::model::PixelsPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unloadWellSamples()
    {
        unloadWellSamples(0);
    }
    void unloadWellSamples(const ::Ice::Context& __ctx)
    {
        unloadWellSamples(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_unloadWellSamples(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unloadWellSamples(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_unloadWellSamples(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unloadWellSamples(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unloadWellSamples(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unloadWellSamples(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unloadWellSamples(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unloadWellSamples(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_unloadWellSamples()
    {
        return begin_unloadWellSamples(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadWellSamples(const ::Ice::Context& __ctx)
    {
        return begin_unloadWellSamples(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadWellSamples(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadWellSamples(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadWellSamples(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadWellSamples(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadWellSamples(const ::omero::model::Callback_Image_unloadWellSamplesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadWellSamples(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadWellSamples(const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_unloadWellSamplesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadWellSamples(&__ctx, __del, __cookie);
    }

    void end_unloadWellSamples(const ::Ice::AsyncResultPtr&);
    
private:

    void unloadWellSamples(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unloadWellSamples(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int sizeOfWellSamples()
    {
        return sizeOfWellSamples(0);
    }
    ::Ice::Int sizeOfWellSamples(const ::Ice::Context& __ctx)
    {
        return sizeOfWellSamples(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_sizeOfWellSamples(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sizeOfWellSamples(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfWellSamples(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sizeOfWellSamples(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfWellSamples(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sizeOfWellSamples(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfWellSamples(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sizeOfWellSamples(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_sizeOfWellSamples(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_sizeOfWellSamples(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_sizeOfWellSamples(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_sizeOfWellSamples()
    {
        return begin_sizeOfWellSamples(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfWellSamples(const ::Ice::Context& __ctx)
    {
        return begin_sizeOfWellSamples(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfWellSamples(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfWellSamples(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfWellSamples(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfWellSamples(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfWellSamples(const ::omero::model::Callback_Image_sizeOfWellSamplesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfWellSamples(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfWellSamples(const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_sizeOfWellSamplesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfWellSamples(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_sizeOfWellSamples(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int sizeOfWellSamples(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sizeOfWellSamples(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::ImageWellSamplesSeq copyWellSamples()
    {
        return copyWellSamples(0);
    }
    ::omero::model::ImageWellSamplesSeq copyWellSamples(const ::Ice::Context& __ctx)
    {
        return copyWellSamples(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_copyWellSamples(const ::IceInternal::Function<void (const ::omero::model::ImageWellSamplesSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_copyWellSamples(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_copyWellSamples(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_copyWellSamples(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_copyWellSamples(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::ImageWellSamplesSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_copyWellSamples(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_copyWellSamples(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_copyWellSamples(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_copyWellSamples(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::ImageWellSamplesSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::ImageWellSamplesSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
                ::omero::model::ImageWellSamplesSeq __ret;
                try
                {
                    __ret = __proxy->end_copyWellSamples(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::ImageWellSamplesSeq&)> _response;
        };
        return begin_copyWellSamples(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_copyWellSamples()
    {
        return begin_copyWellSamples(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyWellSamples(const ::Ice::Context& __ctx)
    {
        return begin_copyWellSamples(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyWellSamples(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyWellSamples(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyWellSamples(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyWellSamples(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyWellSamples(const ::omero::model::Callback_Image_copyWellSamplesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyWellSamples(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyWellSamples(const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_copyWellSamplesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyWellSamples(&__ctx, __del, __cookie);
    }

    ::omero::model::ImageWellSamplesSeq end_copyWellSamples(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::ImageWellSamplesSeq copyWellSamples(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_copyWellSamples(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addWellSample(const ::omero::model::WellSamplePtr& target)
    {
        addWellSample(target, 0);
    }
    void addWellSample(const ::omero::model::WellSamplePtr& target, const ::Ice::Context& __ctx)
    {
        addWellSample(target, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addWellSample(const ::omero::model::WellSamplePtr& target, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addWellSample(target, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addWellSample(const ::omero::model::WellSamplePtr& target, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addWellSample(target, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addWellSample(const ::omero::model::WellSamplePtr& target, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addWellSample(target, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addWellSample(const ::omero::model::WellSamplePtr& target, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addWellSample(target, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addWellSample(const ::omero::model::WellSamplePtr& target)
    {
        return begin_addWellSample(target, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addWellSample(const ::omero::model::WellSamplePtr& target, const ::Ice::Context& __ctx)
    {
        return begin_addWellSample(target, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addWellSample(const ::omero::model::WellSamplePtr& target, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addWellSample(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addWellSample(const ::omero::model::WellSamplePtr& target, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addWellSample(target, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addWellSample(const ::omero::model::WellSamplePtr& target, const ::omero::model::Callback_Image_addWellSamplePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addWellSample(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addWellSample(const ::omero::model::WellSamplePtr& target, const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_addWellSamplePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addWellSample(target, &__ctx, __del, __cookie);
    }

    void end_addWellSample(const ::Ice::AsyncResultPtr&);
    
private:

    void addWellSample(const ::omero::model::WellSamplePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addWellSample(const ::omero::model::WellSamplePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addAllWellSampleSet(const ::omero::model::ImageWellSamplesSeq& targets)
    {
        addAllWellSampleSet(targets, 0);
    }
    void addAllWellSampleSet(const ::omero::model::ImageWellSamplesSeq& targets, const ::Ice::Context& __ctx)
    {
        addAllWellSampleSet(targets, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addAllWellSampleSet(const ::omero::model::ImageWellSamplesSeq& targets, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addAllWellSampleSet(targets, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addAllWellSampleSet(const ::omero::model::ImageWellSamplesSeq& targets, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addAllWellSampleSet(targets, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addAllWellSampleSet(const ::omero::model::ImageWellSamplesSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addAllWellSampleSet(targets, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addAllWellSampleSet(const ::omero::model::ImageWellSamplesSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addAllWellSampleSet(targets, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addAllWellSampleSet(const ::omero::model::ImageWellSamplesSeq& targets)
    {
        return begin_addAllWellSampleSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllWellSampleSet(const ::omero::model::ImageWellSamplesSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_addAllWellSampleSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllWellSampleSet(const ::omero::model::ImageWellSamplesSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllWellSampleSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllWellSampleSet(const ::omero::model::ImageWellSamplesSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllWellSampleSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllWellSampleSet(const ::omero::model::ImageWellSamplesSeq& targets, const ::omero::model::Callback_Image_addAllWellSampleSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllWellSampleSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllWellSampleSet(const ::omero::model::ImageWellSamplesSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_addAllWellSampleSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllWellSampleSet(targets, &__ctx, __del, __cookie);
    }

    void end_addAllWellSampleSet(const ::Ice::AsyncResultPtr&);
    
private:

    void addAllWellSampleSet(const ::omero::model::ImageWellSamplesSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addAllWellSampleSet(const ::omero::model::ImageWellSamplesSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeWellSample(const ::omero::model::WellSamplePtr& theTarget)
    {
        removeWellSample(theTarget, 0);
    }
    void removeWellSample(const ::omero::model::WellSamplePtr& theTarget, const ::Ice::Context& __ctx)
    {
        removeWellSample(theTarget, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeWellSample(const ::omero::model::WellSamplePtr& theTarget, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeWellSample(theTarget, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeWellSample(const ::omero::model::WellSamplePtr& theTarget, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeWellSample(theTarget, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeWellSample(const ::omero::model::WellSamplePtr& theTarget, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeWellSample(theTarget, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeWellSample(const ::omero::model::WellSamplePtr& theTarget, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeWellSample(theTarget, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeWellSample(const ::omero::model::WellSamplePtr& theTarget)
    {
        return begin_removeWellSample(theTarget, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeWellSample(const ::omero::model::WellSamplePtr& theTarget, const ::Ice::Context& __ctx)
    {
        return begin_removeWellSample(theTarget, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeWellSample(const ::omero::model::WellSamplePtr& theTarget, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeWellSample(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeWellSample(const ::omero::model::WellSamplePtr& theTarget, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeWellSample(theTarget, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeWellSample(const ::omero::model::WellSamplePtr& theTarget, const ::omero::model::Callback_Image_removeWellSamplePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeWellSample(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeWellSample(const ::omero::model::WellSamplePtr& theTarget, const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_removeWellSamplePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeWellSample(theTarget, &__ctx, __del, __cookie);
    }

    void end_removeWellSample(const ::Ice::AsyncResultPtr&);
    
private:

    void removeWellSample(const ::omero::model::WellSamplePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeWellSample(const ::omero::model::WellSamplePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeAllWellSampleSet(const ::omero::model::ImageWellSamplesSeq& targets)
    {
        removeAllWellSampleSet(targets, 0);
    }
    void removeAllWellSampleSet(const ::omero::model::ImageWellSamplesSeq& targets, const ::Ice::Context& __ctx)
    {
        removeAllWellSampleSet(targets, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeAllWellSampleSet(const ::omero::model::ImageWellSamplesSeq& targets, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeAllWellSampleSet(targets, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeAllWellSampleSet(const ::omero::model::ImageWellSamplesSeq& targets, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeAllWellSampleSet(targets, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeAllWellSampleSet(const ::omero::model::ImageWellSamplesSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeAllWellSampleSet(targets, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeAllWellSampleSet(const ::omero::model::ImageWellSamplesSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeAllWellSampleSet(targets, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeAllWellSampleSet(const ::omero::model::ImageWellSamplesSeq& targets)
    {
        return begin_removeAllWellSampleSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllWellSampleSet(const ::omero::model::ImageWellSamplesSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_removeAllWellSampleSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllWellSampleSet(const ::omero::model::ImageWellSamplesSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllWellSampleSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllWellSampleSet(const ::omero::model::ImageWellSamplesSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllWellSampleSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllWellSampleSet(const ::omero::model::ImageWellSamplesSeq& targets, const ::omero::model::Callback_Image_removeAllWellSampleSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllWellSampleSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllWellSampleSet(const ::omero::model::ImageWellSamplesSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_removeAllWellSampleSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllWellSampleSet(targets, &__ctx, __del, __cookie);
    }

    void end_removeAllWellSampleSet(const ::Ice::AsyncResultPtr&);
    
private:

    void removeAllWellSampleSet(const ::omero::model::ImageWellSamplesSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeAllWellSampleSet(const ::omero::model::ImageWellSamplesSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void clearWellSamples()
    {
        clearWellSamples(0);
    }
    void clearWellSamples(const ::Ice::Context& __ctx)
    {
        clearWellSamples(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_clearWellSamples(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_clearWellSamples(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_clearWellSamples(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_clearWellSamples(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_clearWellSamples(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_clearWellSamples(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_clearWellSamples(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_clearWellSamples(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_clearWellSamples()
    {
        return begin_clearWellSamples(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearWellSamples(const ::Ice::Context& __ctx)
    {
        return begin_clearWellSamples(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearWellSamples(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearWellSamples(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearWellSamples(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearWellSamples(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearWellSamples(const ::omero::model::Callback_Image_clearWellSamplesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearWellSamples(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearWellSamples(const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_clearWellSamplesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearWellSamples(&__ctx, __del, __cookie);
    }

    void end_clearWellSamples(const ::Ice::AsyncResultPtr&);
    
private:

    void clearWellSamples(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_clearWellSamples(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reloadWellSamples(const ::omero::model::ImagePtr& toCopy)
    {
        reloadWellSamples(toCopy, 0);
    }
    void reloadWellSamples(const ::omero::model::ImagePtr& toCopy, const ::Ice::Context& __ctx)
    {
        reloadWellSamples(toCopy, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_reloadWellSamples(const ::omero::model::ImagePtr& toCopy, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reloadWellSamples(toCopy, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_reloadWellSamples(const ::omero::model::ImagePtr& toCopy, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reloadWellSamples(toCopy, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reloadWellSamples(const ::omero::model::ImagePtr& toCopy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reloadWellSamples(toCopy, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reloadWellSamples(const ::omero::model::ImagePtr& toCopy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reloadWellSamples(toCopy, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_reloadWellSamples(const ::omero::model::ImagePtr& toCopy)
    {
        return begin_reloadWellSamples(toCopy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadWellSamples(const ::omero::model::ImagePtr& toCopy, const ::Ice::Context& __ctx)
    {
        return begin_reloadWellSamples(toCopy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadWellSamples(const ::omero::model::ImagePtr& toCopy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadWellSamples(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadWellSamples(const ::omero::model::ImagePtr& toCopy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadWellSamples(toCopy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadWellSamples(const ::omero::model::ImagePtr& toCopy, const ::omero::model::Callback_Image_reloadWellSamplesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadWellSamples(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadWellSamples(const ::omero::model::ImagePtr& toCopy, const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_reloadWellSamplesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadWellSamples(toCopy, &__ctx, __del, __cookie);
    }

    void end_reloadWellSamples(const ::Ice::AsyncResultPtr&);
    
private:

    void reloadWellSamples(const ::omero::model::ImagePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reloadWellSamples(const ::omero::model::ImagePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unloadRois()
    {
        unloadRois(0);
    }
    void unloadRois(const ::Ice::Context& __ctx)
    {
        unloadRois(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_unloadRois(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unloadRois(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_unloadRois(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unloadRois(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unloadRois(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unloadRois(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unloadRois(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unloadRois(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_unloadRois()
    {
        return begin_unloadRois(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadRois(const ::Ice::Context& __ctx)
    {
        return begin_unloadRois(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadRois(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadRois(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadRois(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadRois(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadRois(const ::omero::model::Callback_Image_unloadRoisPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadRois(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadRois(const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_unloadRoisPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadRois(&__ctx, __del, __cookie);
    }

    void end_unloadRois(const ::Ice::AsyncResultPtr&);
    
private:

    void unloadRois(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unloadRois(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int sizeOfRois()
    {
        return sizeOfRois(0);
    }
    ::Ice::Int sizeOfRois(const ::Ice::Context& __ctx)
    {
        return sizeOfRois(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_sizeOfRois(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sizeOfRois(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfRois(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sizeOfRois(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfRois(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sizeOfRois(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfRois(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sizeOfRois(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_sizeOfRois(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_sizeOfRois(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_sizeOfRois(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_sizeOfRois()
    {
        return begin_sizeOfRois(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfRois(const ::Ice::Context& __ctx)
    {
        return begin_sizeOfRois(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfRois(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfRois(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfRois(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfRois(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfRois(const ::omero::model::Callback_Image_sizeOfRoisPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfRois(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfRois(const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_sizeOfRoisPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfRois(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_sizeOfRois(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int sizeOfRois(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sizeOfRois(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::ImageRoisSeq copyRois()
    {
        return copyRois(0);
    }
    ::omero::model::ImageRoisSeq copyRois(const ::Ice::Context& __ctx)
    {
        return copyRois(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_copyRois(const ::IceInternal::Function<void (const ::omero::model::ImageRoisSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_copyRois(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_copyRois(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_copyRois(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_copyRois(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::ImageRoisSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_copyRois(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_copyRois(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_copyRois(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_copyRois(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::ImageRoisSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::ImageRoisSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
                ::omero::model::ImageRoisSeq __ret;
                try
                {
                    __ret = __proxy->end_copyRois(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::ImageRoisSeq&)> _response;
        };
        return begin_copyRois(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_copyRois()
    {
        return begin_copyRois(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyRois(const ::Ice::Context& __ctx)
    {
        return begin_copyRois(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyRois(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyRois(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyRois(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyRois(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyRois(const ::omero::model::Callback_Image_copyRoisPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyRois(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyRois(const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_copyRoisPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyRois(&__ctx, __del, __cookie);
    }

    ::omero::model::ImageRoisSeq end_copyRois(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::ImageRoisSeq copyRois(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_copyRois(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addRoi(const ::omero::model::RoiPtr& target)
    {
        addRoi(target, 0);
    }
    void addRoi(const ::omero::model::RoiPtr& target, const ::Ice::Context& __ctx)
    {
        addRoi(target, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addRoi(const ::omero::model::RoiPtr& target, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addRoi(target, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addRoi(const ::omero::model::RoiPtr& target, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addRoi(target, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addRoi(const ::omero::model::RoiPtr& target, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addRoi(target, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addRoi(const ::omero::model::RoiPtr& target, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addRoi(target, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addRoi(const ::omero::model::RoiPtr& target)
    {
        return begin_addRoi(target, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addRoi(const ::omero::model::RoiPtr& target, const ::Ice::Context& __ctx)
    {
        return begin_addRoi(target, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addRoi(const ::omero::model::RoiPtr& target, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addRoi(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addRoi(const ::omero::model::RoiPtr& target, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addRoi(target, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addRoi(const ::omero::model::RoiPtr& target, const ::omero::model::Callback_Image_addRoiPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addRoi(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addRoi(const ::omero::model::RoiPtr& target, const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_addRoiPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addRoi(target, &__ctx, __del, __cookie);
    }

    void end_addRoi(const ::Ice::AsyncResultPtr&);
    
private:

    void addRoi(const ::omero::model::RoiPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addRoi(const ::omero::model::RoiPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addAllRoiSet(const ::omero::model::ImageRoisSeq& targets)
    {
        addAllRoiSet(targets, 0);
    }
    void addAllRoiSet(const ::omero::model::ImageRoisSeq& targets, const ::Ice::Context& __ctx)
    {
        addAllRoiSet(targets, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addAllRoiSet(const ::omero::model::ImageRoisSeq& targets, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addAllRoiSet(targets, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addAllRoiSet(const ::omero::model::ImageRoisSeq& targets, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addAllRoiSet(targets, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addAllRoiSet(const ::omero::model::ImageRoisSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addAllRoiSet(targets, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addAllRoiSet(const ::omero::model::ImageRoisSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addAllRoiSet(targets, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addAllRoiSet(const ::omero::model::ImageRoisSeq& targets)
    {
        return begin_addAllRoiSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllRoiSet(const ::omero::model::ImageRoisSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_addAllRoiSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllRoiSet(const ::omero::model::ImageRoisSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllRoiSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllRoiSet(const ::omero::model::ImageRoisSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllRoiSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllRoiSet(const ::omero::model::ImageRoisSeq& targets, const ::omero::model::Callback_Image_addAllRoiSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllRoiSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllRoiSet(const ::omero::model::ImageRoisSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_addAllRoiSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllRoiSet(targets, &__ctx, __del, __cookie);
    }

    void end_addAllRoiSet(const ::Ice::AsyncResultPtr&);
    
private:

    void addAllRoiSet(const ::omero::model::ImageRoisSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addAllRoiSet(const ::omero::model::ImageRoisSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeRoi(const ::omero::model::RoiPtr& theTarget)
    {
        removeRoi(theTarget, 0);
    }
    void removeRoi(const ::omero::model::RoiPtr& theTarget, const ::Ice::Context& __ctx)
    {
        removeRoi(theTarget, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeRoi(const ::omero::model::RoiPtr& theTarget, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeRoi(theTarget, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeRoi(const ::omero::model::RoiPtr& theTarget, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeRoi(theTarget, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeRoi(const ::omero::model::RoiPtr& theTarget, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeRoi(theTarget, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeRoi(const ::omero::model::RoiPtr& theTarget, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeRoi(theTarget, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeRoi(const ::omero::model::RoiPtr& theTarget)
    {
        return begin_removeRoi(theTarget, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeRoi(const ::omero::model::RoiPtr& theTarget, const ::Ice::Context& __ctx)
    {
        return begin_removeRoi(theTarget, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeRoi(const ::omero::model::RoiPtr& theTarget, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeRoi(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeRoi(const ::omero::model::RoiPtr& theTarget, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeRoi(theTarget, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeRoi(const ::omero::model::RoiPtr& theTarget, const ::omero::model::Callback_Image_removeRoiPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeRoi(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeRoi(const ::omero::model::RoiPtr& theTarget, const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_removeRoiPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeRoi(theTarget, &__ctx, __del, __cookie);
    }

    void end_removeRoi(const ::Ice::AsyncResultPtr&);
    
private:

    void removeRoi(const ::omero::model::RoiPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeRoi(const ::omero::model::RoiPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeAllRoiSet(const ::omero::model::ImageRoisSeq& targets)
    {
        removeAllRoiSet(targets, 0);
    }
    void removeAllRoiSet(const ::omero::model::ImageRoisSeq& targets, const ::Ice::Context& __ctx)
    {
        removeAllRoiSet(targets, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeAllRoiSet(const ::omero::model::ImageRoisSeq& targets, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeAllRoiSet(targets, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeAllRoiSet(const ::omero::model::ImageRoisSeq& targets, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeAllRoiSet(targets, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeAllRoiSet(const ::omero::model::ImageRoisSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeAllRoiSet(targets, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeAllRoiSet(const ::omero::model::ImageRoisSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeAllRoiSet(targets, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeAllRoiSet(const ::omero::model::ImageRoisSeq& targets)
    {
        return begin_removeAllRoiSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllRoiSet(const ::omero::model::ImageRoisSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_removeAllRoiSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllRoiSet(const ::omero::model::ImageRoisSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllRoiSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllRoiSet(const ::omero::model::ImageRoisSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllRoiSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllRoiSet(const ::omero::model::ImageRoisSeq& targets, const ::omero::model::Callback_Image_removeAllRoiSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllRoiSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllRoiSet(const ::omero::model::ImageRoisSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_removeAllRoiSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllRoiSet(targets, &__ctx, __del, __cookie);
    }

    void end_removeAllRoiSet(const ::Ice::AsyncResultPtr&);
    
private:

    void removeAllRoiSet(const ::omero::model::ImageRoisSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeAllRoiSet(const ::omero::model::ImageRoisSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void clearRois()
    {
        clearRois(0);
    }
    void clearRois(const ::Ice::Context& __ctx)
    {
        clearRois(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_clearRois(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_clearRois(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_clearRois(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_clearRois(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_clearRois(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_clearRois(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_clearRois(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_clearRois(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_clearRois()
    {
        return begin_clearRois(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearRois(const ::Ice::Context& __ctx)
    {
        return begin_clearRois(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearRois(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearRois(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearRois(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearRois(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearRois(const ::omero::model::Callback_Image_clearRoisPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearRois(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearRois(const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_clearRoisPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearRois(&__ctx, __del, __cookie);
    }

    void end_clearRois(const ::Ice::AsyncResultPtr&);
    
private:

    void clearRois(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_clearRois(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reloadRois(const ::omero::model::ImagePtr& toCopy)
    {
        reloadRois(toCopy, 0);
    }
    void reloadRois(const ::omero::model::ImagePtr& toCopy, const ::Ice::Context& __ctx)
    {
        reloadRois(toCopy, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_reloadRois(const ::omero::model::ImagePtr& toCopy, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reloadRois(toCopy, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_reloadRois(const ::omero::model::ImagePtr& toCopy, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reloadRois(toCopy, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reloadRois(const ::omero::model::ImagePtr& toCopy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reloadRois(toCopy, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reloadRois(const ::omero::model::ImagePtr& toCopy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reloadRois(toCopy, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_reloadRois(const ::omero::model::ImagePtr& toCopy)
    {
        return begin_reloadRois(toCopy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadRois(const ::omero::model::ImagePtr& toCopy, const ::Ice::Context& __ctx)
    {
        return begin_reloadRois(toCopy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadRois(const ::omero::model::ImagePtr& toCopy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadRois(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadRois(const ::omero::model::ImagePtr& toCopy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadRois(toCopy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadRois(const ::omero::model::ImagePtr& toCopy, const ::omero::model::Callback_Image_reloadRoisPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadRois(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadRois(const ::omero::model::ImagePtr& toCopy, const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_reloadRoisPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadRois(toCopy, &__ctx, __del, __cookie);
    }

    void end_reloadRois(const ::Ice::AsyncResultPtr&);
    
private:

    void reloadRois(const ::omero::model::ImagePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reloadRois(const ::omero::model::ImagePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unloadDatasetLinks()
    {
        unloadDatasetLinks(0);
    }
    void unloadDatasetLinks(const ::Ice::Context& __ctx)
    {
        unloadDatasetLinks(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_unloadDatasetLinks(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unloadDatasetLinks(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_unloadDatasetLinks(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unloadDatasetLinks(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unloadDatasetLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unloadDatasetLinks(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unloadDatasetLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unloadDatasetLinks(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_unloadDatasetLinks()
    {
        return begin_unloadDatasetLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadDatasetLinks(const ::Ice::Context& __ctx)
    {
        return begin_unloadDatasetLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadDatasetLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadDatasetLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadDatasetLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadDatasetLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadDatasetLinks(const ::omero::model::Callback_Image_unloadDatasetLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadDatasetLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadDatasetLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_unloadDatasetLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadDatasetLinks(&__ctx, __del, __cookie);
    }

    void end_unloadDatasetLinks(const ::Ice::AsyncResultPtr&);
    
private:

    void unloadDatasetLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unloadDatasetLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int sizeOfDatasetLinks()
    {
        return sizeOfDatasetLinks(0);
    }
    ::Ice::Int sizeOfDatasetLinks(const ::Ice::Context& __ctx)
    {
        return sizeOfDatasetLinks(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_sizeOfDatasetLinks(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sizeOfDatasetLinks(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfDatasetLinks(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sizeOfDatasetLinks(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfDatasetLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sizeOfDatasetLinks(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfDatasetLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sizeOfDatasetLinks(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_sizeOfDatasetLinks(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_sizeOfDatasetLinks(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_sizeOfDatasetLinks(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_sizeOfDatasetLinks()
    {
        return begin_sizeOfDatasetLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfDatasetLinks(const ::Ice::Context& __ctx)
    {
        return begin_sizeOfDatasetLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfDatasetLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfDatasetLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfDatasetLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfDatasetLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfDatasetLinks(const ::omero::model::Callback_Image_sizeOfDatasetLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfDatasetLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfDatasetLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_sizeOfDatasetLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfDatasetLinks(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_sizeOfDatasetLinks(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int sizeOfDatasetLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sizeOfDatasetLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::ImageDatasetLinksSeq copyDatasetLinks()
    {
        return copyDatasetLinks(0);
    }
    ::omero::model::ImageDatasetLinksSeq copyDatasetLinks(const ::Ice::Context& __ctx)
    {
        return copyDatasetLinks(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_copyDatasetLinks(const ::IceInternal::Function<void (const ::omero::model::ImageDatasetLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_copyDatasetLinks(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_copyDatasetLinks(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_copyDatasetLinks(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_copyDatasetLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::ImageDatasetLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_copyDatasetLinks(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_copyDatasetLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_copyDatasetLinks(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_copyDatasetLinks(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::ImageDatasetLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::ImageDatasetLinksSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
                ::omero::model::ImageDatasetLinksSeq __ret;
                try
                {
                    __ret = __proxy->end_copyDatasetLinks(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::ImageDatasetLinksSeq&)> _response;
        };
        return begin_copyDatasetLinks(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_copyDatasetLinks()
    {
        return begin_copyDatasetLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyDatasetLinks(const ::Ice::Context& __ctx)
    {
        return begin_copyDatasetLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyDatasetLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyDatasetLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyDatasetLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyDatasetLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyDatasetLinks(const ::omero::model::Callback_Image_copyDatasetLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyDatasetLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyDatasetLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_copyDatasetLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyDatasetLinks(&__ctx, __del, __cookie);
    }

    ::omero::model::ImageDatasetLinksSeq end_copyDatasetLinks(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::ImageDatasetLinksSeq copyDatasetLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_copyDatasetLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addDatasetImageLink(const ::omero::model::DatasetImageLinkPtr& target)
    {
        addDatasetImageLink(target, 0);
    }
    void addDatasetImageLink(const ::omero::model::DatasetImageLinkPtr& target, const ::Ice::Context& __ctx)
    {
        addDatasetImageLink(target, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addDatasetImageLink(const ::omero::model::DatasetImageLinkPtr& target, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addDatasetImageLink(target, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addDatasetImageLink(const ::omero::model::DatasetImageLinkPtr& target, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addDatasetImageLink(target, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addDatasetImageLink(const ::omero::model::DatasetImageLinkPtr& target, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addDatasetImageLink(target, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addDatasetImageLink(const ::omero::model::DatasetImageLinkPtr& target, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addDatasetImageLink(target, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addDatasetImageLink(const ::omero::model::DatasetImageLinkPtr& target)
    {
        return begin_addDatasetImageLink(target, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addDatasetImageLink(const ::omero::model::DatasetImageLinkPtr& target, const ::Ice::Context& __ctx)
    {
        return begin_addDatasetImageLink(target, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addDatasetImageLink(const ::omero::model::DatasetImageLinkPtr& target, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addDatasetImageLink(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addDatasetImageLink(const ::omero::model::DatasetImageLinkPtr& target, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addDatasetImageLink(target, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addDatasetImageLink(const ::omero::model::DatasetImageLinkPtr& target, const ::omero::model::Callback_Image_addDatasetImageLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addDatasetImageLink(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addDatasetImageLink(const ::omero::model::DatasetImageLinkPtr& target, const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_addDatasetImageLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addDatasetImageLink(target, &__ctx, __del, __cookie);
    }

    void end_addDatasetImageLink(const ::Ice::AsyncResultPtr&);
    
private:

    void addDatasetImageLink(const ::omero::model::DatasetImageLinkPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addDatasetImageLink(const ::omero::model::DatasetImageLinkPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addAllDatasetImageLinkSet(const ::omero::model::ImageDatasetLinksSeq& targets)
    {
        addAllDatasetImageLinkSet(targets, 0);
    }
    void addAllDatasetImageLinkSet(const ::omero::model::ImageDatasetLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        addAllDatasetImageLinkSet(targets, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addAllDatasetImageLinkSet(const ::omero::model::ImageDatasetLinksSeq& targets, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addAllDatasetImageLinkSet(targets, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addAllDatasetImageLinkSet(const ::omero::model::ImageDatasetLinksSeq& targets, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addAllDatasetImageLinkSet(targets, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addAllDatasetImageLinkSet(const ::omero::model::ImageDatasetLinksSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addAllDatasetImageLinkSet(targets, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addAllDatasetImageLinkSet(const ::omero::model::ImageDatasetLinksSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addAllDatasetImageLinkSet(targets, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addAllDatasetImageLinkSet(const ::omero::model::ImageDatasetLinksSeq& targets)
    {
        return begin_addAllDatasetImageLinkSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllDatasetImageLinkSet(const ::omero::model::ImageDatasetLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_addAllDatasetImageLinkSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllDatasetImageLinkSet(const ::omero::model::ImageDatasetLinksSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllDatasetImageLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllDatasetImageLinkSet(const ::omero::model::ImageDatasetLinksSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllDatasetImageLinkSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllDatasetImageLinkSet(const ::omero::model::ImageDatasetLinksSeq& targets, const ::omero::model::Callback_Image_addAllDatasetImageLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllDatasetImageLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllDatasetImageLinkSet(const ::omero::model::ImageDatasetLinksSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_addAllDatasetImageLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllDatasetImageLinkSet(targets, &__ctx, __del, __cookie);
    }

    void end_addAllDatasetImageLinkSet(const ::Ice::AsyncResultPtr&);
    
private:

    void addAllDatasetImageLinkSet(const ::omero::model::ImageDatasetLinksSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addAllDatasetImageLinkSet(const ::omero::model::ImageDatasetLinksSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeDatasetImageLink(const ::omero::model::DatasetImageLinkPtr& theTarget)
    {
        removeDatasetImageLink(theTarget, 0);
    }
    void removeDatasetImageLink(const ::omero::model::DatasetImageLinkPtr& theTarget, const ::Ice::Context& __ctx)
    {
        removeDatasetImageLink(theTarget, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeDatasetImageLink(const ::omero::model::DatasetImageLinkPtr& theTarget, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeDatasetImageLink(theTarget, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeDatasetImageLink(const ::omero::model::DatasetImageLinkPtr& theTarget, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeDatasetImageLink(theTarget, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeDatasetImageLink(const ::omero::model::DatasetImageLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeDatasetImageLink(theTarget, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeDatasetImageLink(const ::omero::model::DatasetImageLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeDatasetImageLink(theTarget, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeDatasetImageLink(const ::omero::model::DatasetImageLinkPtr& theTarget)
    {
        return begin_removeDatasetImageLink(theTarget, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeDatasetImageLink(const ::omero::model::DatasetImageLinkPtr& theTarget, const ::Ice::Context& __ctx)
    {
        return begin_removeDatasetImageLink(theTarget, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeDatasetImageLink(const ::omero::model::DatasetImageLinkPtr& theTarget, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeDatasetImageLink(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeDatasetImageLink(const ::omero::model::DatasetImageLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeDatasetImageLink(theTarget, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeDatasetImageLink(const ::omero::model::DatasetImageLinkPtr& theTarget, const ::omero::model::Callback_Image_removeDatasetImageLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeDatasetImageLink(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeDatasetImageLink(const ::omero::model::DatasetImageLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_removeDatasetImageLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeDatasetImageLink(theTarget, &__ctx, __del, __cookie);
    }

    void end_removeDatasetImageLink(const ::Ice::AsyncResultPtr&);
    
private:

    void removeDatasetImageLink(const ::omero::model::DatasetImageLinkPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeDatasetImageLink(const ::omero::model::DatasetImageLinkPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeAllDatasetImageLinkSet(const ::omero::model::ImageDatasetLinksSeq& targets)
    {
        removeAllDatasetImageLinkSet(targets, 0);
    }
    void removeAllDatasetImageLinkSet(const ::omero::model::ImageDatasetLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        removeAllDatasetImageLinkSet(targets, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeAllDatasetImageLinkSet(const ::omero::model::ImageDatasetLinksSeq& targets, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeAllDatasetImageLinkSet(targets, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeAllDatasetImageLinkSet(const ::omero::model::ImageDatasetLinksSeq& targets, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeAllDatasetImageLinkSet(targets, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeAllDatasetImageLinkSet(const ::omero::model::ImageDatasetLinksSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeAllDatasetImageLinkSet(targets, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeAllDatasetImageLinkSet(const ::omero::model::ImageDatasetLinksSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeAllDatasetImageLinkSet(targets, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeAllDatasetImageLinkSet(const ::omero::model::ImageDatasetLinksSeq& targets)
    {
        return begin_removeAllDatasetImageLinkSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllDatasetImageLinkSet(const ::omero::model::ImageDatasetLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_removeAllDatasetImageLinkSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllDatasetImageLinkSet(const ::omero::model::ImageDatasetLinksSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllDatasetImageLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllDatasetImageLinkSet(const ::omero::model::ImageDatasetLinksSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllDatasetImageLinkSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllDatasetImageLinkSet(const ::omero::model::ImageDatasetLinksSeq& targets, const ::omero::model::Callback_Image_removeAllDatasetImageLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllDatasetImageLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllDatasetImageLinkSet(const ::omero::model::ImageDatasetLinksSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_removeAllDatasetImageLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllDatasetImageLinkSet(targets, &__ctx, __del, __cookie);
    }

    void end_removeAllDatasetImageLinkSet(const ::Ice::AsyncResultPtr&);
    
private:

    void removeAllDatasetImageLinkSet(const ::omero::model::ImageDatasetLinksSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeAllDatasetImageLinkSet(const ::omero::model::ImageDatasetLinksSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void clearDatasetLinks()
    {
        clearDatasetLinks(0);
    }
    void clearDatasetLinks(const ::Ice::Context& __ctx)
    {
        clearDatasetLinks(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_clearDatasetLinks(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_clearDatasetLinks(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_clearDatasetLinks(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_clearDatasetLinks(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_clearDatasetLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_clearDatasetLinks(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_clearDatasetLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_clearDatasetLinks(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_clearDatasetLinks()
    {
        return begin_clearDatasetLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearDatasetLinks(const ::Ice::Context& __ctx)
    {
        return begin_clearDatasetLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearDatasetLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearDatasetLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearDatasetLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearDatasetLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearDatasetLinks(const ::omero::model::Callback_Image_clearDatasetLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearDatasetLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearDatasetLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_clearDatasetLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearDatasetLinks(&__ctx, __del, __cookie);
    }

    void end_clearDatasetLinks(const ::Ice::AsyncResultPtr&);
    
private:

    void clearDatasetLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_clearDatasetLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reloadDatasetLinks(const ::omero::model::ImagePtr& toCopy)
    {
        reloadDatasetLinks(toCopy, 0);
    }
    void reloadDatasetLinks(const ::omero::model::ImagePtr& toCopy, const ::Ice::Context& __ctx)
    {
        reloadDatasetLinks(toCopy, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_reloadDatasetLinks(const ::omero::model::ImagePtr& toCopy, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reloadDatasetLinks(toCopy, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_reloadDatasetLinks(const ::omero::model::ImagePtr& toCopy, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reloadDatasetLinks(toCopy, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reloadDatasetLinks(const ::omero::model::ImagePtr& toCopy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reloadDatasetLinks(toCopy, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reloadDatasetLinks(const ::omero::model::ImagePtr& toCopy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reloadDatasetLinks(toCopy, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_reloadDatasetLinks(const ::omero::model::ImagePtr& toCopy)
    {
        return begin_reloadDatasetLinks(toCopy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadDatasetLinks(const ::omero::model::ImagePtr& toCopy, const ::Ice::Context& __ctx)
    {
        return begin_reloadDatasetLinks(toCopy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadDatasetLinks(const ::omero::model::ImagePtr& toCopy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadDatasetLinks(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadDatasetLinks(const ::omero::model::ImagePtr& toCopy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadDatasetLinks(toCopy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadDatasetLinks(const ::omero::model::ImagePtr& toCopy, const ::omero::model::Callback_Image_reloadDatasetLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadDatasetLinks(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadDatasetLinks(const ::omero::model::ImagePtr& toCopy, const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_reloadDatasetLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadDatasetLinks(toCopy, &__ctx, __del, __cookie);
    }

    void end_reloadDatasetLinks(const ::Ice::AsyncResultPtr&);
    
private:

    void reloadDatasetLinks(const ::omero::model::ImagePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reloadDatasetLinks(const ::omero::model::ImagePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::sys::CountMap getDatasetLinksCountPerOwner()
    {
        return getDatasetLinksCountPerOwner(0);
    }
    ::omero::sys::CountMap getDatasetLinksCountPerOwner(const ::Ice::Context& __ctx)
    {
        return getDatasetLinksCountPerOwner(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getDatasetLinksCountPerOwner(const ::IceInternal::Function<void (const ::omero::sys::CountMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getDatasetLinksCountPerOwner(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getDatasetLinksCountPerOwner(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getDatasetLinksCountPerOwner(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getDatasetLinksCountPerOwner(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::sys::CountMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getDatasetLinksCountPerOwner(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getDatasetLinksCountPerOwner(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getDatasetLinksCountPerOwner(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getDatasetLinksCountPerOwner(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::sys::CountMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::sys::CountMap&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
                ::omero::sys::CountMap __ret;
                try
                {
                    __ret = __proxy->end_getDatasetLinksCountPerOwner(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::sys::CountMap&)> _response;
        };
        return begin_getDatasetLinksCountPerOwner(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getDatasetLinksCountPerOwner()
    {
        return begin_getDatasetLinksCountPerOwner(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDatasetLinksCountPerOwner(const ::Ice::Context& __ctx)
    {
        return begin_getDatasetLinksCountPerOwner(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDatasetLinksCountPerOwner(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDatasetLinksCountPerOwner(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDatasetLinksCountPerOwner(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDatasetLinksCountPerOwner(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDatasetLinksCountPerOwner(const ::omero::model::Callback_Image_getDatasetLinksCountPerOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDatasetLinksCountPerOwner(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDatasetLinksCountPerOwner(const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_getDatasetLinksCountPerOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDatasetLinksCountPerOwner(&__ctx, __del, __cookie);
    }

    ::omero::sys::CountMap end_getDatasetLinksCountPerOwner(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::sys::CountMap getDatasetLinksCountPerOwner(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getDatasetLinksCountPerOwner(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::DatasetImageLinkPtr linkDataset(const ::omero::model::DatasetPtr& addition)
    {
        return linkDataset(addition, 0);
    }
    ::omero::model::DatasetImageLinkPtr linkDataset(const ::omero::model::DatasetPtr& addition, const ::Ice::Context& __ctx)
    {
        return linkDataset(addition, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_linkDataset(const ::omero::model::DatasetPtr& addition, const ::IceInternal::Function<void (const ::omero::model::DatasetImageLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_linkDataset(addition, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_linkDataset(const ::omero::model::DatasetPtr& addition, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_linkDataset(addition, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_linkDataset(const ::omero::model::DatasetPtr& addition, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::DatasetImageLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_linkDataset(addition, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_linkDataset(const ::omero::model::DatasetPtr& addition, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_linkDataset(addition, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_linkDataset(const ::omero::model::DatasetPtr& addition, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::DatasetImageLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::DatasetImageLinkPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
                ::omero::model::DatasetImageLinkPtr __ret;
                try
                {
                    __ret = __proxy->end_linkDataset(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::DatasetImageLinkPtr&)> _response;
        };
        return begin_linkDataset(addition, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_linkDataset(const ::omero::model::DatasetPtr& addition)
    {
        return begin_linkDataset(addition, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkDataset(const ::omero::model::DatasetPtr& addition, const ::Ice::Context& __ctx)
    {
        return begin_linkDataset(addition, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkDataset(const ::omero::model::DatasetPtr& addition, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkDataset(addition, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkDataset(const ::omero::model::DatasetPtr& addition, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkDataset(addition, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkDataset(const ::omero::model::DatasetPtr& addition, const ::omero::model::Callback_Image_linkDatasetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkDataset(addition, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkDataset(const ::omero::model::DatasetPtr& addition, const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_linkDatasetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkDataset(addition, &__ctx, __del, __cookie);
    }

    ::omero::model::DatasetImageLinkPtr end_linkDataset(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::DatasetImageLinkPtr linkDataset(const ::omero::model::DatasetPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_linkDataset(const ::omero::model::DatasetPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addDatasetImageLinkToBoth(const ::omero::model::DatasetImageLinkPtr& link, bool bothSides)
    {
        addDatasetImageLinkToBoth(link, bothSides, 0);
    }
    void addDatasetImageLinkToBoth(const ::omero::model::DatasetImageLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        addDatasetImageLinkToBoth(link, bothSides, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addDatasetImageLinkToBoth(const ::omero::model::DatasetImageLinkPtr& link, bool bothSides, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addDatasetImageLinkToBoth(link, bothSides, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addDatasetImageLinkToBoth(const ::omero::model::DatasetImageLinkPtr& link, bool bothSides, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addDatasetImageLinkToBoth(link, bothSides, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addDatasetImageLinkToBoth(const ::omero::model::DatasetImageLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addDatasetImageLinkToBoth(link, bothSides, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addDatasetImageLinkToBoth(const ::omero::model::DatasetImageLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addDatasetImageLinkToBoth(link, bothSides, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addDatasetImageLinkToBoth(const ::omero::model::DatasetImageLinkPtr& link, bool bothSides)
    {
        return begin_addDatasetImageLinkToBoth(link, bothSides, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addDatasetImageLinkToBoth(const ::omero::model::DatasetImageLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        return begin_addDatasetImageLinkToBoth(link, bothSides, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addDatasetImageLinkToBoth(const ::omero::model::DatasetImageLinkPtr& link, bool bothSides, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addDatasetImageLinkToBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addDatasetImageLinkToBoth(const ::omero::model::DatasetImageLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addDatasetImageLinkToBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addDatasetImageLinkToBoth(const ::omero::model::DatasetImageLinkPtr& link, bool bothSides, const ::omero::model::Callback_Image_addDatasetImageLinkToBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addDatasetImageLinkToBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addDatasetImageLinkToBoth(const ::omero::model::DatasetImageLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_addDatasetImageLinkToBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addDatasetImageLinkToBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    void end_addDatasetImageLinkToBoth(const ::Ice::AsyncResultPtr&);
    
private:

    void addDatasetImageLinkToBoth(const ::omero::model::DatasetImageLinkPtr&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addDatasetImageLinkToBoth(const ::omero::model::DatasetImageLinkPtr&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::ImageDatasetLinksSeq findDatasetImageLink(const ::omero::model::DatasetPtr& removal)
    {
        return findDatasetImageLink(removal, 0);
    }
    ::omero::model::ImageDatasetLinksSeq findDatasetImageLink(const ::omero::model::DatasetPtr& removal, const ::Ice::Context& __ctx)
    {
        return findDatasetImageLink(removal, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_findDatasetImageLink(const ::omero::model::DatasetPtr& removal, const ::IceInternal::Function<void (const ::omero::model::ImageDatasetLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_findDatasetImageLink(removal, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_findDatasetImageLink(const ::omero::model::DatasetPtr& removal, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_findDatasetImageLink(removal, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_findDatasetImageLink(const ::omero::model::DatasetPtr& removal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::ImageDatasetLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_findDatasetImageLink(removal, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_findDatasetImageLink(const ::omero::model::DatasetPtr& removal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_findDatasetImageLink(removal, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_findDatasetImageLink(const ::omero::model::DatasetPtr& removal, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::ImageDatasetLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::ImageDatasetLinksSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
                ::omero::model::ImageDatasetLinksSeq __ret;
                try
                {
                    __ret = __proxy->end_findDatasetImageLink(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::ImageDatasetLinksSeq&)> _response;
        };
        return begin_findDatasetImageLink(removal, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_findDatasetImageLink(const ::omero::model::DatasetPtr& removal)
    {
        return begin_findDatasetImageLink(removal, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findDatasetImageLink(const ::omero::model::DatasetPtr& removal, const ::Ice::Context& __ctx)
    {
        return begin_findDatasetImageLink(removal, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findDatasetImageLink(const ::omero::model::DatasetPtr& removal, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findDatasetImageLink(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findDatasetImageLink(const ::omero::model::DatasetPtr& removal, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findDatasetImageLink(removal, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findDatasetImageLink(const ::omero::model::DatasetPtr& removal, const ::omero::model::Callback_Image_findDatasetImageLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findDatasetImageLink(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findDatasetImageLink(const ::omero::model::DatasetPtr& removal, const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_findDatasetImageLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findDatasetImageLink(removal, &__ctx, __del, __cookie);
    }

    ::omero::model::ImageDatasetLinksSeq end_findDatasetImageLink(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::ImageDatasetLinksSeq findDatasetImageLink(const ::omero::model::DatasetPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_findDatasetImageLink(const ::omero::model::DatasetPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unlinkDataset(const ::omero::model::DatasetPtr& removal)
    {
        unlinkDataset(removal, 0);
    }
    void unlinkDataset(const ::omero::model::DatasetPtr& removal, const ::Ice::Context& __ctx)
    {
        unlinkDataset(removal, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_unlinkDataset(const ::omero::model::DatasetPtr& removal, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unlinkDataset(removal, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_unlinkDataset(const ::omero::model::DatasetPtr& removal, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unlinkDataset(removal, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unlinkDataset(const ::omero::model::DatasetPtr& removal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unlinkDataset(removal, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unlinkDataset(const ::omero::model::DatasetPtr& removal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unlinkDataset(removal, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_unlinkDataset(const ::omero::model::DatasetPtr& removal)
    {
        return begin_unlinkDataset(removal, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unlinkDataset(const ::omero::model::DatasetPtr& removal, const ::Ice::Context& __ctx)
    {
        return begin_unlinkDataset(removal, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unlinkDataset(const ::omero::model::DatasetPtr& removal, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkDataset(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkDataset(const ::omero::model::DatasetPtr& removal, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkDataset(removal, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkDataset(const ::omero::model::DatasetPtr& removal, const ::omero::model::Callback_Image_unlinkDatasetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkDataset(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkDataset(const ::omero::model::DatasetPtr& removal, const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_unlinkDatasetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkDataset(removal, &__ctx, __del, __cookie);
    }

    void end_unlinkDataset(const ::Ice::AsyncResultPtr&);
    
private:

    void unlinkDataset(const ::omero::model::DatasetPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unlinkDataset(const ::omero::model::DatasetPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeDatasetImageLinkFromBoth(const ::omero::model::DatasetImageLinkPtr& link, bool bothSides)
    {
        removeDatasetImageLinkFromBoth(link, bothSides, 0);
    }
    void removeDatasetImageLinkFromBoth(const ::omero::model::DatasetImageLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        removeDatasetImageLinkFromBoth(link, bothSides, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeDatasetImageLinkFromBoth(const ::omero::model::DatasetImageLinkPtr& link, bool bothSides, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeDatasetImageLinkFromBoth(link, bothSides, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeDatasetImageLinkFromBoth(const ::omero::model::DatasetImageLinkPtr& link, bool bothSides, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeDatasetImageLinkFromBoth(link, bothSides, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeDatasetImageLinkFromBoth(const ::omero::model::DatasetImageLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeDatasetImageLinkFromBoth(link, bothSides, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeDatasetImageLinkFromBoth(const ::omero::model::DatasetImageLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeDatasetImageLinkFromBoth(link, bothSides, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeDatasetImageLinkFromBoth(const ::omero::model::DatasetImageLinkPtr& link, bool bothSides)
    {
        return begin_removeDatasetImageLinkFromBoth(link, bothSides, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeDatasetImageLinkFromBoth(const ::omero::model::DatasetImageLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        return begin_removeDatasetImageLinkFromBoth(link, bothSides, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeDatasetImageLinkFromBoth(const ::omero::model::DatasetImageLinkPtr& link, bool bothSides, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeDatasetImageLinkFromBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeDatasetImageLinkFromBoth(const ::omero::model::DatasetImageLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeDatasetImageLinkFromBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeDatasetImageLinkFromBoth(const ::omero::model::DatasetImageLinkPtr& link, bool bothSides, const ::omero::model::Callback_Image_removeDatasetImageLinkFromBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeDatasetImageLinkFromBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeDatasetImageLinkFromBoth(const ::omero::model::DatasetImageLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_removeDatasetImageLinkFromBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeDatasetImageLinkFromBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    void end_removeDatasetImageLinkFromBoth(const ::Ice::AsyncResultPtr&);
    
private:

    void removeDatasetImageLinkFromBoth(const ::omero::model::DatasetImageLinkPtr&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeDatasetImageLinkFromBoth(const ::omero::model::DatasetImageLinkPtr&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::ImageLinkedDatasetSeq linkedDatasetList()
    {
        return linkedDatasetList(0);
    }
    ::omero::model::ImageLinkedDatasetSeq linkedDatasetList(const ::Ice::Context& __ctx)
    {
        return linkedDatasetList(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_linkedDatasetList(const ::IceInternal::Function<void (const ::omero::model::ImageLinkedDatasetSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_linkedDatasetList(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_linkedDatasetList(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_linkedDatasetList(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_linkedDatasetList(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::ImageLinkedDatasetSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_linkedDatasetList(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_linkedDatasetList(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_linkedDatasetList(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_linkedDatasetList(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::ImageLinkedDatasetSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::ImageLinkedDatasetSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
                ::omero::model::ImageLinkedDatasetSeq __ret;
                try
                {
                    __ret = __proxy->end_linkedDatasetList(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::ImageLinkedDatasetSeq&)> _response;
        };
        return begin_linkedDatasetList(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_linkedDatasetList()
    {
        return begin_linkedDatasetList(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkedDatasetList(const ::Ice::Context& __ctx)
    {
        return begin_linkedDatasetList(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkedDatasetList(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedDatasetList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedDatasetList(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedDatasetList(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedDatasetList(const ::omero::model::Callback_Image_linkedDatasetListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedDatasetList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedDatasetList(const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_linkedDatasetListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedDatasetList(&__ctx, __del, __cookie);
    }

    ::omero::model::ImageLinkedDatasetSeq end_linkedDatasetList(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::ImageLinkedDatasetSeq linkedDatasetList(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_linkedDatasetList(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::FilesetPtr getFileset()
    {
        return getFileset(0);
    }
    ::omero::model::FilesetPtr getFileset(const ::Ice::Context& __ctx)
    {
        return getFileset(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getFileset(const ::IceInternal::Function<void (const ::omero::model::FilesetPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getFileset(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getFileset(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getFileset(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getFileset(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::FilesetPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getFileset(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getFileset(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getFileset(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getFileset(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::FilesetPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::FilesetPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
                ::omero::model::FilesetPtr __ret;
                try
                {
                    __ret = __proxy->end_getFileset(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::FilesetPtr&)> _response;
        };
        return begin_getFileset(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getFileset()
    {
        return begin_getFileset(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getFileset(const ::Ice::Context& __ctx)
    {
        return begin_getFileset(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getFileset(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFileset(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getFileset(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFileset(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getFileset(const ::omero::model::Callback_Image_getFilesetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFileset(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getFileset(const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_getFilesetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFileset(&__ctx, __del, __cookie);
    }

    ::omero::model::FilesetPtr end_getFileset(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::FilesetPtr getFileset(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getFileset(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setFileset(const ::omero::model::FilesetPtr& theFileset)
    {
        setFileset(theFileset, 0);
    }
    void setFileset(const ::omero::model::FilesetPtr& theFileset, const ::Ice::Context& __ctx)
    {
        setFileset(theFileset, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setFileset(const ::omero::model::FilesetPtr& theFileset, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setFileset(theFileset, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setFileset(const ::omero::model::FilesetPtr& theFileset, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setFileset(theFileset, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setFileset(const ::omero::model::FilesetPtr& theFileset, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setFileset(theFileset, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setFileset(const ::omero::model::FilesetPtr& theFileset, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setFileset(theFileset, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setFileset(const ::omero::model::FilesetPtr& theFileset)
    {
        return begin_setFileset(theFileset, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setFileset(const ::omero::model::FilesetPtr& theFileset, const ::Ice::Context& __ctx)
    {
        return begin_setFileset(theFileset, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setFileset(const ::omero::model::FilesetPtr& theFileset, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setFileset(theFileset, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setFileset(const ::omero::model::FilesetPtr& theFileset, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setFileset(theFileset, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setFileset(const ::omero::model::FilesetPtr& theFileset, const ::omero::model::Callback_Image_setFilesetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setFileset(theFileset, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setFileset(const ::omero::model::FilesetPtr& theFileset, const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_setFilesetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setFileset(theFileset, &__ctx, __del, __cookie);
    }

    void end_setFileset(const ::Ice::AsyncResultPtr&);
    
private:

    void setFileset(const ::omero::model::FilesetPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setFileset(const ::omero::model::FilesetPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unloadAnnotationLinks()
    {
        unloadAnnotationLinks(0);
    }
    void unloadAnnotationLinks(const ::Ice::Context& __ctx)
    {
        unloadAnnotationLinks(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_unloadAnnotationLinks(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unloadAnnotationLinks(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_unloadAnnotationLinks(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unloadAnnotationLinks(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unloadAnnotationLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unloadAnnotationLinks(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unloadAnnotationLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unloadAnnotationLinks(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks()
    {
        return begin_unloadAnnotationLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return begin_unloadAnnotationLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::omero::model::Callback_Image_unloadAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_unloadAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadAnnotationLinks(&__ctx, __del, __cookie);
    }

    void end_unloadAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    void unloadAnnotationLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int sizeOfAnnotationLinks()
    {
        return sizeOfAnnotationLinks(0);
    }
    ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return sizeOfAnnotationLinks(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_sizeOfAnnotationLinks(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sizeOfAnnotationLinks(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfAnnotationLinks(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sizeOfAnnotationLinks(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfAnnotationLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sizeOfAnnotationLinks(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfAnnotationLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sizeOfAnnotationLinks(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_sizeOfAnnotationLinks(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_sizeOfAnnotationLinks(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_sizeOfAnnotationLinks(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks()
    {
        return begin_sizeOfAnnotationLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return begin_sizeOfAnnotationLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::omero::model::Callback_Image_sizeOfAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_sizeOfAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_sizeOfAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::ImageAnnotationLinksSeq copyAnnotationLinks()
    {
        return copyAnnotationLinks(0);
    }
    ::omero::model::ImageAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return copyAnnotationLinks(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_copyAnnotationLinks(const ::IceInternal::Function<void (const ::omero::model::ImageAnnotationLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_copyAnnotationLinks(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_copyAnnotationLinks(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_copyAnnotationLinks(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_copyAnnotationLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::ImageAnnotationLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_copyAnnotationLinks(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_copyAnnotationLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_copyAnnotationLinks(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_copyAnnotationLinks(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::ImageAnnotationLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::ImageAnnotationLinksSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
                ::omero::model::ImageAnnotationLinksSeq __ret;
                try
                {
                    __ret = __proxy->end_copyAnnotationLinks(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::ImageAnnotationLinksSeq&)> _response;
        };
        return begin_copyAnnotationLinks(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks()
    {
        return begin_copyAnnotationLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return begin_copyAnnotationLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::omero::model::Callback_Image_copyAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_copyAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::omero::model::ImageAnnotationLinksSeq end_copyAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::ImageAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addImageAnnotationLink(const ::omero::model::ImageAnnotationLinkPtr& target)
    {
        addImageAnnotationLink(target, 0);
    }
    void addImageAnnotationLink(const ::omero::model::ImageAnnotationLinkPtr& target, const ::Ice::Context& __ctx)
    {
        addImageAnnotationLink(target, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addImageAnnotationLink(const ::omero::model::ImageAnnotationLinkPtr& target, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addImageAnnotationLink(target, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addImageAnnotationLink(const ::omero::model::ImageAnnotationLinkPtr& target, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addImageAnnotationLink(target, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addImageAnnotationLink(const ::omero::model::ImageAnnotationLinkPtr& target, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addImageAnnotationLink(target, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addImageAnnotationLink(const ::omero::model::ImageAnnotationLinkPtr& target, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addImageAnnotationLink(target, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addImageAnnotationLink(const ::omero::model::ImageAnnotationLinkPtr& target)
    {
        return begin_addImageAnnotationLink(target, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addImageAnnotationLink(const ::omero::model::ImageAnnotationLinkPtr& target, const ::Ice::Context& __ctx)
    {
        return begin_addImageAnnotationLink(target, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addImageAnnotationLink(const ::omero::model::ImageAnnotationLinkPtr& target, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addImageAnnotationLink(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addImageAnnotationLink(const ::omero::model::ImageAnnotationLinkPtr& target, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addImageAnnotationLink(target, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addImageAnnotationLink(const ::omero::model::ImageAnnotationLinkPtr& target, const ::omero::model::Callback_Image_addImageAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addImageAnnotationLink(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addImageAnnotationLink(const ::omero::model::ImageAnnotationLinkPtr& target, const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_addImageAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addImageAnnotationLink(target, &__ctx, __del, __cookie);
    }

    void end_addImageAnnotationLink(const ::Ice::AsyncResultPtr&);
    
private:

    void addImageAnnotationLink(const ::omero::model::ImageAnnotationLinkPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addImageAnnotationLink(const ::omero::model::ImageAnnotationLinkPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addAllImageAnnotationLinkSet(const ::omero::model::ImageAnnotationLinksSeq& targets)
    {
        addAllImageAnnotationLinkSet(targets, 0);
    }
    void addAllImageAnnotationLinkSet(const ::omero::model::ImageAnnotationLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        addAllImageAnnotationLinkSet(targets, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addAllImageAnnotationLinkSet(const ::omero::model::ImageAnnotationLinksSeq& targets, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addAllImageAnnotationLinkSet(targets, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addAllImageAnnotationLinkSet(const ::omero::model::ImageAnnotationLinksSeq& targets, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addAllImageAnnotationLinkSet(targets, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addAllImageAnnotationLinkSet(const ::omero::model::ImageAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addAllImageAnnotationLinkSet(targets, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addAllImageAnnotationLinkSet(const ::omero::model::ImageAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addAllImageAnnotationLinkSet(targets, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addAllImageAnnotationLinkSet(const ::omero::model::ImageAnnotationLinksSeq& targets)
    {
        return begin_addAllImageAnnotationLinkSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllImageAnnotationLinkSet(const ::omero::model::ImageAnnotationLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_addAllImageAnnotationLinkSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllImageAnnotationLinkSet(const ::omero::model::ImageAnnotationLinksSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllImageAnnotationLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllImageAnnotationLinkSet(const ::omero::model::ImageAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllImageAnnotationLinkSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllImageAnnotationLinkSet(const ::omero::model::ImageAnnotationLinksSeq& targets, const ::omero::model::Callback_Image_addAllImageAnnotationLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllImageAnnotationLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllImageAnnotationLinkSet(const ::omero::model::ImageAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_addAllImageAnnotationLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllImageAnnotationLinkSet(targets, &__ctx, __del, __cookie);
    }

    void end_addAllImageAnnotationLinkSet(const ::Ice::AsyncResultPtr&);
    
private:

    void addAllImageAnnotationLinkSet(const ::omero::model::ImageAnnotationLinksSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addAllImageAnnotationLinkSet(const ::omero::model::ImageAnnotationLinksSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeImageAnnotationLink(const ::omero::model::ImageAnnotationLinkPtr& theTarget)
    {
        removeImageAnnotationLink(theTarget, 0);
    }
    void removeImageAnnotationLink(const ::omero::model::ImageAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx)
    {
        removeImageAnnotationLink(theTarget, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeImageAnnotationLink(const ::omero::model::ImageAnnotationLinkPtr& theTarget, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeImageAnnotationLink(theTarget, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeImageAnnotationLink(const ::omero::model::ImageAnnotationLinkPtr& theTarget, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeImageAnnotationLink(theTarget, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeImageAnnotationLink(const ::omero::model::ImageAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeImageAnnotationLink(theTarget, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeImageAnnotationLink(const ::omero::model::ImageAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeImageAnnotationLink(theTarget, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeImageAnnotationLink(const ::omero::model::ImageAnnotationLinkPtr& theTarget)
    {
        return begin_removeImageAnnotationLink(theTarget, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeImageAnnotationLink(const ::omero::model::ImageAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx)
    {
        return begin_removeImageAnnotationLink(theTarget, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeImageAnnotationLink(const ::omero::model::ImageAnnotationLinkPtr& theTarget, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeImageAnnotationLink(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeImageAnnotationLink(const ::omero::model::ImageAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeImageAnnotationLink(theTarget, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeImageAnnotationLink(const ::omero::model::ImageAnnotationLinkPtr& theTarget, const ::omero::model::Callback_Image_removeImageAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeImageAnnotationLink(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeImageAnnotationLink(const ::omero::model::ImageAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_removeImageAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeImageAnnotationLink(theTarget, &__ctx, __del, __cookie);
    }

    void end_removeImageAnnotationLink(const ::Ice::AsyncResultPtr&);
    
private:

    void removeImageAnnotationLink(const ::omero::model::ImageAnnotationLinkPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeImageAnnotationLink(const ::omero::model::ImageAnnotationLinkPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeAllImageAnnotationLinkSet(const ::omero::model::ImageAnnotationLinksSeq& targets)
    {
        removeAllImageAnnotationLinkSet(targets, 0);
    }
    void removeAllImageAnnotationLinkSet(const ::omero::model::ImageAnnotationLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        removeAllImageAnnotationLinkSet(targets, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeAllImageAnnotationLinkSet(const ::omero::model::ImageAnnotationLinksSeq& targets, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeAllImageAnnotationLinkSet(targets, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeAllImageAnnotationLinkSet(const ::omero::model::ImageAnnotationLinksSeq& targets, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeAllImageAnnotationLinkSet(targets, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeAllImageAnnotationLinkSet(const ::omero::model::ImageAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeAllImageAnnotationLinkSet(targets, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeAllImageAnnotationLinkSet(const ::omero::model::ImageAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeAllImageAnnotationLinkSet(targets, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeAllImageAnnotationLinkSet(const ::omero::model::ImageAnnotationLinksSeq& targets)
    {
        return begin_removeAllImageAnnotationLinkSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllImageAnnotationLinkSet(const ::omero::model::ImageAnnotationLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_removeAllImageAnnotationLinkSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllImageAnnotationLinkSet(const ::omero::model::ImageAnnotationLinksSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllImageAnnotationLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllImageAnnotationLinkSet(const ::omero::model::ImageAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllImageAnnotationLinkSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllImageAnnotationLinkSet(const ::omero::model::ImageAnnotationLinksSeq& targets, const ::omero::model::Callback_Image_removeAllImageAnnotationLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllImageAnnotationLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllImageAnnotationLinkSet(const ::omero::model::ImageAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_removeAllImageAnnotationLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllImageAnnotationLinkSet(targets, &__ctx, __del, __cookie);
    }

    void end_removeAllImageAnnotationLinkSet(const ::Ice::AsyncResultPtr&);
    
private:

    void removeAllImageAnnotationLinkSet(const ::omero::model::ImageAnnotationLinksSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeAllImageAnnotationLinkSet(const ::omero::model::ImageAnnotationLinksSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void clearAnnotationLinks()
    {
        clearAnnotationLinks(0);
    }
    void clearAnnotationLinks(const ::Ice::Context& __ctx)
    {
        clearAnnotationLinks(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_clearAnnotationLinks(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_clearAnnotationLinks(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_clearAnnotationLinks(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_clearAnnotationLinks(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_clearAnnotationLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_clearAnnotationLinks(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_clearAnnotationLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_clearAnnotationLinks(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks()
    {
        return begin_clearAnnotationLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return begin_clearAnnotationLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::omero::model::Callback_Image_clearAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_clearAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearAnnotationLinks(&__ctx, __del, __cookie);
    }

    void end_clearAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    void clearAnnotationLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reloadAnnotationLinks(const ::omero::model::ImagePtr& toCopy)
    {
        reloadAnnotationLinks(toCopy, 0);
    }
    void reloadAnnotationLinks(const ::omero::model::ImagePtr& toCopy, const ::Ice::Context& __ctx)
    {
        reloadAnnotationLinks(toCopy, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_reloadAnnotationLinks(const ::omero::model::ImagePtr& toCopy, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reloadAnnotationLinks(toCopy, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_reloadAnnotationLinks(const ::omero::model::ImagePtr& toCopy, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reloadAnnotationLinks(toCopy, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reloadAnnotationLinks(const ::omero::model::ImagePtr& toCopy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reloadAnnotationLinks(toCopy, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reloadAnnotationLinks(const ::omero::model::ImagePtr& toCopy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reloadAnnotationLinks(toCopy, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::ImagePtr& toCopy)
    {
        return begin_reloadAnnotationLinks(toCopy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::ImagePtr& toCopy, const ::Ice::Context& __ctx)
    {
        return begin_reloadAnnotationLinks(toCopy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::ImagePtr& toCopy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadAnnotationLinks(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::ImagePtr& toCopy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadAnnotationLinks(toCopy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::ImagePtr& toCopy, const ::omero::model::Callback_Image_reloadAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadAnnotationLinks(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::ImagePtr& toCopy, const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_reloadAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadAnnotationLinks(toCopy, &__ctx, __del, __cookie);
    }

    void end_reloadAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    void reloadAnnotationLinks(const ::omero::model::ImagePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::ImagePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::sys::CountMap getAnnotationLinksCountPerOwner()
    {
        return getAnnotationLinksCountPerOwner(0);
    }
    ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx)
    {
        return getAnnotationLinksCountPerOwner(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getAnnotationLinksCountPerOwner(const ::IceInternal::Function<void (const ::omero::sys::CountMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAnnotationLinksCountPerOwner(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAnnotationLinksCountPerOwner(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAnnotationLinksCountPerOwner(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::sys::CountMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAnnotationLinksCountPerOwner(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAnnotationLinksCountPerOwner(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getAnnotationLinksCountPerOwner(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::sys::CountMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::sys::CountMap&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
                ::omero::sys::CountMap __ret;
                try
                {
                    __ret = __proxy->end_getAnnotationLinksCountPerOwner(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::sys::CountMap&)> _response;
        };
        return begin_getAnnotationLinksCountPerOwner(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner()
    {
        return begin_getAnnotationLinksCountPerOwner(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx)
    {
        return begin_getAnnotationLinksCountPerOwner(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAnnotationLinksCountPerOwner(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAnnotationLinksCountPerOwner(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::omero::model::Callback_Image_getAnnotationLinksCountPerOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAnnotationLinksCountPerOwner(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_getAnnotationLinksCountPerOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAnnotationLinksCountPerOwner(&__ctx, __del, __cookie);
    }

    ::omero::sys::CountMap end_getAnnotationLinksCountPerOwner(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::ImageAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr& addition)
    {
        return linkAnnotation(addition, 0);
    }
    ::omero::model::ImageAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx)
    {
        return linkAnnotation(addition, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::IceInternal::Function<void (const ::omero::model::ImageAnnotationLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_linkAnnotation(addition, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_linkAnnotation(addition, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::ImageAnnotationLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_linkAnnotation(addition, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_linkAnnotation(addition, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::ImageAnnotationLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::ImageAnnotationLinkPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
                ::omero::model::ImageAnnotationLinkPtr __ret;
                try
                {
                    __ret = __proxy->end_linkAnnotation(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::ImageAnnotationLinkPtr&)> _response;
        };
        return begin_linkAnnotation(addition, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition)
    {
        return begin_linkAnnotation(addition, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx)
    {
        return begin_linkAnnotation(addition, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkAnnotation(addition, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkAnnotation(addition, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::omero::model::Callback_Image_linkAnnotationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkAnnotation(addition, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_linkAnnotationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkAnnotation(addition, &__ctx, __del, __cookie);
    }

    ::omero::model::ImageAnnotationLinkPtr end_linkAnnotation(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::ImageAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addImageAnnotationLinkToBoth(const ::omero::model::ImageAnnotationLinkPtr& link, bool bothSides)
    {
        addImageAnnotationLinkToBoth(link, bothSides, 0);
    }
    void addImageAnnotationLinkToBoth(const ::omero::model::ImageAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        addImageAnnotationLinkToBoth(link, bothSides, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addImageAnnotationLinkToBoth(const ::omero::model::ImageAnnotationLinkPtr& link, bool bothSides, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addImageAnnotationLinkToBoth(link, bothSides, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addImageAnnotationLinkToBoth(const ::omero::model::ImageAnnotationLinkPtr& link, bool bothSides, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addImageAnnotationLinkToBoth(link, bothSides, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addImageAnnotationLinkToBoth(const ::omero::model::ImageAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addImageAnnotationLinkToBoth(link, bothSides, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addImageAnnotationLinkToBoth(const ::omero::model::ImageAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addImageAnnotationLinkToBoth(link, bothSides, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addImageAnnotationLinkToBoth(const ::omero::model::ImageAnnotationLinkPtr& link, bool bothSides)
    {
        return begin_addImageAnnotationLinkToBoth(link, bothSides, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addImageAnnotationLinkToBoth(const ::omero::model::ImageAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        return begin_addImageAnnotationLinkToBoth(link, bothSides, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addImageAnnotationLinkToBoth(const ::omero::model::ImageAnnotationLinkPtr& link, bool bothSides, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addImageAnnotationLinkToBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addImageAnnotationLinkToBoth(const ::omero::model::ImageAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addImageAnnotationLinkToBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addImageAnnotationLinkToBoth(const ::omero::model::ImageAnnotationLinkPtr& link, bool bothSides, const ::omero::model::Callback_Image_addImageAnnotationLinkToBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addImageAnnotationLinkToBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addImageAnnotationLinkToBoth(const ::omero::model::ImageAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_addImageAnnotationLinkToBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addImageAnnotationLinkToBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    void end_addImageAnnotationLinkToBoth(const ::Ice::AsyncResultPtr&);
    
private:

    void addImageAnnotationLinkToBoth(const ::omero::model::ImageAnnotationLinkPtr&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addImageAnnotationLinkToBoth(const ::omero::model::ImageAnnotationLinkPtr&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::ImageAnnotationLinksSeq findImageAnnotationLink(const ::omero::model::AnnotationPtr& removal)
    {
        return findImageAnnotationLink(removal, 0);
    }
    ::omero::model::ImageAnnotationLinksSeq findImageAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx)
    {
        return findImageAnnotationLink(removal, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_findImageAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::IceInternal::Function<void (const ::omero::model::ImageAnnotationLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_findImageAnnotationLink(removal, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_findImageAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_findImageAnnotationLink(removal, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_findImageAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::ImageAnnotationLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_findImageAnnotationLink(removal, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_findImageAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_findImageAnnotationLink(removal, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_findImageAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::ImageAnnotationLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::ImageAnnotationLinksSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
                ::omero::model::ImageAnnotationLinksSeq __ret;
                try
                {
                    __ret = __proxy->end_findImageAnnotationLink(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::ImageAnnotationLinksSeq&)> _response;
        };
        return begin_findImageAnnotationLink(removal, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_findImageAnnotationLink(const ::omero::model::AnnotationPtr& removal)
    {
        return begin_findImageAnnotationLink(removal, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findImageAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx)
    {
        return begin_findImageAnnotationLink(removal, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findImageAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findImageAnnotationLink(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findImageAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findImageAnnotationLink(removal, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findImageAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::omero::model::Callback_Image_findImageAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findImageAnnotationLink(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findImageAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_findImageAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findImageAnnotationLink(removal, &__ctx, __del, __cookie);
    }

    ::omero::model::ImageAnnotationLinksSeq end_findImageAnnotationLink(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::ImageAnnotationLinksSeq findImageAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_findImageAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unlinkAnnotation(const ::omero::model::AnnotationPtr& removal)
    {
        unlinkAnnotation(removal, 0);
    }
    void unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx)
    {
        unlinkAnnotation(removal, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unlinkAnnotation(removal, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unlinkAnnotation(removal, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unlinkAnnotation(removal, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unlinkAnnotation(removal, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal)
    {
        return begin_unlinkAnnotation(removal, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx)
    {
        return begin_unlinkAnnotation(removal, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkAnnotation(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkAnnotation(removal, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::omero::model::Callback_Image_unlinkAnnotationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkAnnotation(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_unlinkAnnotationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkAnnotation(removal, &__ctx, __del, __cookie);
    }

    void end_unlinkAnnotation(const ::Ice::AsyncResultPtr&);
    
private:

    void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeImageAnnotationLinkFromBoth(const ::omero::model::ImageAnnotationLinkPtr& link, bool bothSides)
    {
        removeImageAnnotationLinkFromBoth(link, bothSides, 0);
    }
    void removeImageAnnotationLinkFromBoth(const ::omero::model::ImageAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        removeImageAnnotationLinkFromBoth(link, bothSides, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeImageAnnotationLinkFromBoth(const ::omero::model::ImageAnnotationLinkPtr& link, bool bothSides, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeImageAnnotationLinkFromBoth(link, bothSides, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeImageAnnotationLinkFromBoth(const ::omero::model::ImageAnnotationLinkPtr& link, bool bothSides, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeImageAnnotationLinkFromBoth(link, bothSides, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeImageAnnotationLinkFromBoth(const ::omero::model::ImageAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeImageAnnotationLinkFromBoth(link, bothSides, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeImageAnnotationLinkFromBoth(const ::omero::model::ImageAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeImageAnnotationLinkFromBoth(link, bothSides, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeImageAnnotationLinkFromBoth(const ::omero::model::ImageAnnotationLinkPtr& link, bool bothSides)
    {
        return begin_removeImageAnnotationLinkFromBoth(link, bothSides, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeImageAnnotationLinkFromBoth(const ::omero::model::ImageAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        return begin_removeImageAnnotationLinkFromBoth(link, bothSides, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeImageAnnotationLinkFromBoth(const ::omero::model::ImageAnnotationLinkPtr& link, bool bothSides, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeImageAnnotationLinkFromBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeImageAnnotationLinkFromBoth(const ::omero::model::ImageAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeImageAnnotationLinkFromBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeImageAnnotationLinkFromBoth(const ::omero::model::ImageAnnotationLinkPtr& link, bool bothSides, const ::omero::model::Callback_Image_removeImageAnnotationLinkFromBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeImageAnnotationLinkFromBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeImageAnnotationLinkFromBoth(const ::omero::model::ImageAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_removeImageAnnotationLinkFromBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeImageAnnotationLinkFromBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    void end_removeImageAnnotationLinkFromBoth(const ::Ice::AsyncResultPtr&);
    
private:

    void removeImageAnnotationLinkFromBoth(const ::omero::model::ImageAnnotationLinkPtr&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeImageAnnotationLinkFromBoth(const ::omero::model::ImageAnnotationLinkPtr&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::ImageLinkedAnnotationSeq linkedAnnotationList()
    {
        return linkedAnnotationList(0);
    }
    ::omero::model::ImageLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context& __ctx)
    {
        return linkedAnnotationList(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_linkedAnnotationList(const ::IceInternal::Function<void (const ::omero::model::ImageLinkedAnnotationSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_linkedAnnotationList(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_linkedAnnotationList(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_linkedAnnotationList(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_linkedAnnotationList(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::ImageLinkedAnnotationSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_linkedAnnotationList(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_linkedAnnotationList(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_linkedAnnotationList(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_linkedAnnotationList(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::ImageLinkedAnnotationSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::ImageLinkedAnnotationSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
                ::omero::model::ImageLinkedAnnotationSeq __ret;
                try
                {
                    __ret = __proxy->end_linkedAnnotationList(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::ImageLinkedAnnotationSeq&)> _response;
        };
        return begin_linkedAnnotationList(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_linkedAnnotationList()
    {
        return begin_linkedAnnotationList(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::Context& __ctx)
    {
        return begin_linkedAnnotationList(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedAnnotationList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedAnnotationList(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::omero::model::Callback_Image_linkedAnnotationListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedAnnotationList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_linkedAnnotationListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedAnnotationList(&__ctx, __del, __cookie);
    }

    ::omero::model::ImageLinkedAnnotationSeq end_linkedAnnotationList(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::ImageLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getName()
    {
        return getName(0);
    }
    ::omero::RStringPtr getName(const ::Ice::Context& __ctx)
    {
        return getName(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getName(const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getName(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getName(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getName(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getName(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getName(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getName(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getName(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getName(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RStringPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
                ::omero::RStringPtr __ret;
                try
                {
                    __ret = __proxy->end_getName(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RStringPtr&)> _response;
        };
        return begin_getName(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getName()
    {
        return begin_getName(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& __ctx)
    {
        return begin_getName(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getName(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getName(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::omero::model::Callback_Image_getNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getName(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_getNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getName(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getName(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getName(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setName(const ::omero::RStringPtr& theName)
    {
        setName(theName, 0);
    }
    void setName(const ::omero::RStringPtr& theName, const ::Ice::Context& __ctx)
    {
        setName(theName, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setName(const ::omero::RStringPtr& theName, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setName(theName, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setName(const ::omero::RStringPtr& theName, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setName(theName, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setName(const ::omero::RStringPtr& theName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setName(theName, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setName(const ::omero::RStringPtr& theName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setName(theName, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setName(const ::omero::RStringPtr& theName)
    {
        return begin_setName(theName, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setName(const ::omero::RStringPtr& theName, const ::Ice::Context& __ctx)
    {
        return begin_setName(theName, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setName(const ::omero::RStringPtr& theName, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setName(theName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setName(const ::omero::RStringPtr& theName, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setName(theName, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setName(const ::omero::RStringPtr& theName, const ::omero::model::Callback_Image_setNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setName(theName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setName(const ::omero::RStringPtr& theName, const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_setNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setName(theName, &__ctx, __del, __cookie);
    }

    void end_setName(const ::Ice::AsyncResultPtr&);
    
private:

    void setName(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setName(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getDescription()
    {
        return getDescription(0);
    }
    ::omero::RStringPtr getDescription(const ::Ice::Context& __ctx)
    {
        return getDescription(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getDescription(const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getDescription(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getDescription(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getDescription(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getDescription(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getDescription(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getDescription(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getDescription(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getDescription(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RStringPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
                ::omero::RStringPtr __ret;
                try
                {
                    __ret = __proxy->end_getDescription(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RStringPtr&)> _response;
        };
        return begin_getDescription(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getDescription()
    {
        return begin_getDescription(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDescription(const ::Ice::Context& __ctx)
    {
        return begin_getDescription(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDescription(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDescription(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDescription(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDescription(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDescription(const ::omero::model::Callback_Image_getDescriptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDescription(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDescription(const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_getDescriptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDescription(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getDescription(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getDescription(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getDescription(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setDescription(const ::omero::RStringPtr& theDescription)
    {
        setDescription(theDescription, 0);
    }
    void setDescription(const ::omero::RStringPtr& theDescription, const ::Ice::Context& __ctx)
    {
        setDescription(theDescription, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setDescription(const ::omero::RStringPtr& theDescription, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setDescription(theDescription, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setDescription(const ::omero::RStringPtr& theDescription, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setDescription(theDescription, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setDescription(const ::omero::RStringPtr& theDescription, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setDescription(theDescription, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setDescription(const ::omero::RStringPtr& theDescription, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setDescription(theDescription, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setDescription(const ::omero::RStringPtr& theDescription)
    {
        return begin_setDescription(theDescription, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setDescription(const ::omero::RStringPtr& theDescription, const ::Ice::Context& __ctx)
    {
        return begin_setDescription(theDescription, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setDescription(const ::omero::RStringPtr& theDescription, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDescription(theDescription, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDescription(const ::omero::RStringPtr& theDescription, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDescription(theDescription, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDescription(const ::omero::RStringPtr& theDescription, const ::omero::model::Callback_Image_setDescriptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDescription(theDescription, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDescription(const ::omero::RStringPtr& theDescription, const ::Ice::Context& __ctx, const ::omero::model::Callback_Image_setDescriptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDescription(theDescription, &__ctx, __del, __cookie);
    }

    void end_setDescription(const ::Ice::AsyncResultPtr&);
    
private:

    void setDescription(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setDescription(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Image> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Image*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Image> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Image*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Image> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Image*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Image> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Image*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Image> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Image*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Image> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Image*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Image> ice_secure(bool __secure) const
    {
        return dynamic_cast<Image*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Image> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Image*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Image> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Image*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Image> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Image*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Image> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Image*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Image> ice_twoway() const
    {
        return dynamic_cast<Image*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Image> ice_oneway() const
    {
        return dynamic_cast<Image*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Image> ice_batchOneway() const
    {
        return dynamic_cast<Image*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Image> ice_datagram() const
    {
        return dynamic_cast<Image*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Image> ice_batchDatagram() const
    {
        return dynamic_cast<Image*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Image> ice_compress(bool __compress) const
    {
        return dynamic_cast<Image*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Image> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Image*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Image> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Image*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Image> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Image*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

namespace IceDelegate
{

namespace omero
{

namespace model
{

class Image : virtual public ::IceDelegate::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RTimePtr getAcquisitionDate(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setAcquisitionDate(const ::omero::RTimePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RBoolPtr getArchived(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setArchived(const ::omero::RBoolPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RBoolPtr getPartial(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setPartial(const ::omero::RBoolPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::FormatPtr getFormat(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setFormat(const ::omero::model::FormatPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::ImagingEnvironmentPtr getImagingEnvironment(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setImagingEnvironment(const ::omero::model::ImagingEnvironmentPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::ObjectiveSettingsPtr getObjectiveSettings(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setObjectiveSettings(const ::omero::model::ObjectiveSettingsPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::InstrumentPtr getInstrument(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setInstrument(const ::omero::model::InstrumentPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::StageLabelPtr getStageLabel(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setStageLabel(const ::omero::model::StageLabelPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::ExperimentPtr getExperiment(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setExperiment(const ::omero::model::ExperimentPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void unloadPixels(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int sizeOfPixels(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::ImagePixelsSeq copyPixels(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addPixels(const ::omero::model::PixelsPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addAllPixelsSet(const ::omero::model::ImagePixelsSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removePixels(const ::omero::model::PixelsPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeAllPixelsSet(const ::omero::model::ImagePixelsSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void clearPixels(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void reloadPixels(const ::omero::model::ImagePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::PixelsPtr getPixels(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::PixelsPtr setPixels(::Ice::Int, const ::omero::model::PixelsPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::PixelsPtr getPrimaryPixels(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::PixelsPtr setPrimaryPixels(const ::omero::model::PixelsPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void unloadWellSamples(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int sizeOfWellSamples(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::ImageWellSamplesSeq copyWellSamples(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addWellSample(const ::omero::model::WellSamplePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addAllWellSampleSet(const ::omero::model::ImageWellSamplesSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeWellSample(const ::omero::model::WellSamplePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeAllWellSampleSet(const ::omero::model::ImageWellSamplesSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void clearWellSamples(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void reloadWellSamples(const ::omero::model::ImagePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void unloadRois(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int sizeOfRois(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::ImageRoisSeq copyRois(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addRoi(const ::omero::model::RoiPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addAllRoiSet(const ::omero::model::ImageRoisSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeRoi(const ::omero::model::RoiPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeAllRoiSet(const ::omero::model::ImageRoisSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void clearRois(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void reloadRois(const ::omero::model::ImagePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void unloadDatasetLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int sizeOfDatasetLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::ImageDatasetLinksSeq copyDatasetLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addDatasetImageLink(const ::omero::model::DatasetImageLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addAllDatasetImageLinkSet(const ::omero::model::ImageDatasetLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeDatasetImageLink(const ::omero::model::DatasetImageLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeAllDatasetImageLinkSet(const ::omero::model::ImageDatasetLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void clearDatasetLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void reloadDatasetLinks(const ::omero::model::ImagePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::sys::CountMap getDatasetLinksCountPerOwner(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::DatasetImageLinkPtr linkDataset(const ::omero::model::DatasetPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addDatasetImageLinkToBoth(const ::omero::model::DatasetImageLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::ImageDatasetLinksSeq findDatasetImageLink(const ::omero::model::DatasetPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void unlinkDataset(const ::omero::model::DatasetPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeDatasetImageLinkFromBoth(const ::omero::model::DatasetImageLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::ImageLinkedDatasetSeq linkedDatasetList(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::FilesetPtr getFileset(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setFileset(const ::omero::model::FilesetPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void unloadAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::ImageAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addImageAnnotationLink(const ::omero::model::ImageAnnotationLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addAllImageAnnotationLinkSet(const ::omero::model::ImageAnnotationLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeImageAnnotationLink(const ::omero::model::ImageAnnotationLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeAllImageAnnotationLinkSet(const ::omero::model::ImageAnnotationLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void clearAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void reloadAnnotationLinks(const ::omero::model::ImagePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::ImageAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addImageAnnotationLinkToBoth(const ::omero::model::ImageAnnotationLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::ImageAnnotationLinksSeq findImageAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeImageAnnotationLinkFromBoth(const ::omero::model::ImageAnnotationLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::ImageLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RStringPtr getName(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setName(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RStringPtr getDescription(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setDescription(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

}

namespace IceDelegateM
{

namespace omero
{

namespace model
{

class Image : virtual public ::IceDelegate::omero::model::Image,
              virtual public ::IceDelegateM::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RTimePtr getAcquisitionDate(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setAcquisitionDate(const ::omero::RTimePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RBoolPtr getArchived(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setArchived(const ::omero::RBoolPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RBoolPtr getPartial(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setPartial(const ::omero::RBoolPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::FormatPtr getFormat(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setFormat(const ::omero::model::FormatPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::ImagingEnvironmentPtr getImagingEnvironment(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setImagingEnvironment(const ::omero::model::ImagingEnvironmentPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::ObjectiveSettingsPtr getObjectiveSettings(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setObjectiveSettings(const ::omero::model::ObjectiveSettingsPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::InstrumentPtr getInstrument(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setInstrument(const ::omero::model::InstrumentPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::StageLabelPtr getStageLabel(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setStageLabel(const ::omero::model::StageLabelPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::ExperimentPtr getExperiment(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setExperiment(const ::omero::model::ExperimentPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unloadPixels(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int sizeOfPixels(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::ImagePixelsSeq copyPixels(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addPixels(const ::omero::model::PixelsPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addAllPixelsSet(const ::omero::model::ImagePixelsSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removePixels(const ::omero::model::PixelsPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeAllPixelsSet(const ::omero::model::ImagePixelsSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void clearPixels(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void reloadPixels(const ::omero::model::ImagePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::PixelsPtr getPixels(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::PixelsPtr setPixels(::Ice::Int, const ::omero::model::PixelsPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::PixelsPtr getPrimaryPixels(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::PixelsPtr setPrimaryPixels(const ::omero::model::PixelsPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unloadWellSamples(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int sizeOfWellSamples(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::ImageWellSamplesSeq copyWellSamples(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addWellSample(const ::omero::model::WellSamplePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addAllWellSampleSet(const ::omero::model::ImageWellSamplesSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeWellSample(const ::omero::model::WellSamplePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeAllWellSampleSet(const ::omero::model::ImageWellSamplesSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void clearWellSamples(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void reloadWellSamples(const ::omero::model::ImagePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unloadRois(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int sizeOfRois(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::ImageRoisSeq copyRois(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addRoi(const ::omero::model::RoiPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addAllRoiSet(const ::omero::model::ImageRoisSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeRoi(const ::omero::model::RoiPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeAllRoiSet(const ::omero::model::ImageRoisSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void clearRois(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void reloadRois(const ::omero::model::ImagePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unloadDatasetLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int sizeOfDatasetLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::ImageDatasetLinksSeq copyDatasetLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addDatasetImageLink(const ::omero::model::DatasetImageLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addAllDatasetImageLinkSet(const ::omero::model::ImageDatasetLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeDatasetImageLink(const ::omero::model::DatasetImageLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeAllDatasetImageLinkSet(const ::omero::model::ImageDatasetLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void clearDatasetLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void reloadDatasetLinks(const ::omero::model::ImagePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::sys::CountMap getDatasetLinksCountPerOwner(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::DatasetImageLinkPtr linkDataset(const ::omero::model::DatasetPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addDatasetImageLinkToBoth(const ::omero::model::DatasetImageLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::ImageDatasetLinksSeq findDatasetImageLink(const ::omero::model::DatasetPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unlinkDataset(const ::omero::model::DatasetPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeDatasetImageLinkFromBoth(const ::omero::model::DatasetImageLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::ImageLinkedDatasetSeq linkedDatasetList(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::FilesetPtr getFileset(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setFileset(const ::omero::model::FilesetPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unloadAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::ImageAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addImageAnnotationLink(const ::omero::model::ImageAnnotationLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addAllImageAnnotationLinkSet(const ::omero::model::ImageAnnotationLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeImageAnnotationLink(const ::omero::model::ImageAnnotationLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeAllImageAnnotationLinkSet(const ::omero::model::ImageAnnotationLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void clearAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void reloadAnnotationLinks(const ::omero::model::ImagePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::ImageAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addImageAnnotationLinkToBoth(const ::omero::model::ImageAnnotationLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::ImageAnnotationLinksSeq findImageAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeImageAnnotationLinkFromBoth(const ::omero::model::ImageAnnotationLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::ImageLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getName(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setName(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getDescription(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setDescription(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace IceDelegateD
{

namespace omero
{

namespace model
{

class Image : virtual public ::IceDelegate::omero::model::Image,
              virtual public ::IceDelegateD::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RTimePtr getAcquisitionDate(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setAcquisitionDate(const ::omero::RTimePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RBoolPtr getArchived(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setArchived(const ::omero::RBoolPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RBoolPtr getPartial(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setPartial(const ::omero::RBoolPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::FormatPtr getFormat(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setFormat(const ::omero::model::FormatPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::ImagingEnvironmentPtr getImagingEnvironment(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setImagingEnvironment(const ::omero::model::ImagingEnvironmentPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::ObjectiveSettingsPtr getObjectiveSettings(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setObjectiveSettings(const ::omero::model::ObjectiveSettingsPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::InstrumentPtr getInstrument(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setInstrument(const ::omero::model::InstrumentPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::StageLabelPtr getStageLabel(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setStageLabel(const ::omero::model::StageLabelPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::ExperimentPtr getExperiment(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setExperiment(const ::omero::model::ExperimentPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unloadPixels(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int sizeOfPixels(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::ImagePixelsSeq copyPixels(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addPixels(const ::omero::model::PixelsPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addAllPixelsSet(const ::omero::model::ImagePixelsSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removePixels(const ::omero::model::PixelsPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeAllPixelsSet(const ::omero::model::ImagePixelsSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void clearPixels(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void reloadPixels(const ::omero::model::ImagePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::PixelsPtr getPixels(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::PixelsPtr setPixels(::Ice::Int, const ::omero::model::PixelsPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::PixelsPtr getPrimaryPixels(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::PixelsPtr setPrimaryPixels(const ::omero::model::PixelsPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unloadWellSamples(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int sizeOfWellSamples(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::ImageWellSamplesSeq copyWellSamples(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addWellSample(const ::omero::model::WellSamplePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addAllWellSampleSet(const ::omero::model::ImageWellSamplesSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeWellSample(const ::omero::model::WellSamplePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeAllWellSampleSet(const ::omero::model::ImageWellSamplesSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void clearWellSamples(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void reloadWellSamples(const ::omero::model::ImagePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unloadRois(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int sizeOfRois(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::ImageRoisSeq copyRois(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addRoi(const ::omero::model::RoiPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addAllRoiSet(const ::omero::model::ImageRoisSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeRoi(const ::omero::model::RoiPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeAllRoiSet(const ::omero::model::ImageRoisSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void clearRois(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void reloadRois(const ::omero::model::ImagePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unloadDatasetLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int sizeOfDatasetLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::ImageDatasetLinksSeq copyDatasetLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addDatasetImageLink(const ::omero::model::DatasetImageLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addAllDatasetImageLinkSet(const ::omero::model::ImageDatasetLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeDatasetImageLink(const ::omero::model::DatasetImageLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeAllDatasetImageLinkSet(const ::omero::model::ImageDatasetLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void clearDatasetLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void reloadDatasetLinks(const ::omero::model::ImagePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::sys::CountMap getDatasetLinksCountPerOwner(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::DatasetImageLinkPtr linkDataset(const ::omero::model::DatasetPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addDatasetImageLinkToBoth(const ::omero::model::DatasetImageLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::ImageDatasetLinksSeq findDatasetImageLink(const ::omero::model::DatasetPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unlinkDataset(const ::omero::model::DatasetPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeDatasetImageLinkFromBoth(const ::omero::model::DatasetImageLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::ImageLinkedDatasetSeq linkedDatasetList(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::FilesetPtr getFileset(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setFileset(const ::omero::model::FilesetPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unloadAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::ImageAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addImageAnnotationLink(const ::omero::model::ImageAnnotationLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addAllImageAnnotationLinkSet(const ::omero::model::ImageAnnotationLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeImageAnnotationLink(const ::omero::model::ImageAnnotationLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeAllImageAnnotationLinkSet(const ::omero::model::ImageAnnotationLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void clearAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void reloadAnnotationLinks(const ::omero::model::ImagePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::ImageAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addImageAnnotationLinkToBoth(const ::omero::model::ImageAnnotationLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::ImageAnnotationLinksSeq findImageAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeImageAnnotationLinkFromBoth(const ::omero::model::ImageAnnotationLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::ImageLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getName(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setName(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getDescription(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setDescription(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace omero
{

namespace model
{

class Image : public ::omero::model::IObject
{
public:

    typedef ImagePrx ProxyType;
    typedef ImagePtr PointerType;

    Image()
    {
    }

    Image(const ::omero::RLongPtr& __ice_id, const ::omero::model::DetailsPtr& __ice_details, bool __ice_loaded, const ::omero::RIntPtr& __ice_version, const ::omero::RTimePtr& __ice_acquisitionDate, const ::omero::RBoolPtr& __ice_archived, const ::omero::RBoolPtr& __ice_partial, const ::omero::model::FormatPtr& __ice_format, const ::omero::model::ImagingEnvironmentPtr& __ice_imagingEnvironment, const ::omero::model::ObjectiveSettingsPtr& __ice_objectiveSettings, const ::omero::model::InstrumentPtr& __ice_instrument, const ::omero::model::StageLabelPtr& __ice_stageLabel, const ::omero::model::ExperimentPtr& __ice_experiment, const ::omero::model::ImagePixelsSeq& __ice_pixelsSeq, bool __ice_pixelsLoaded, const ::omero::model::ImageWellSamplesSeq& __ice_wellSamplesSeq, bool __ice_wellSamplesLoaded, const ::omero::model::ImageRoisSeq& __ice_roisSeq, bool __ice_roisLoaded, const ::omero::model::ImageDatasetLinksSeq& __ice_datasetLinksSeq, bool __ice_datasetLinksLoaded, const ::omero::sys::CountMap& __ice_datasetLinksCountPerOwner, const ::omero::model::FilesetPtr& __ice_fileset, const ::omero::model::ImageAnnotationLinksSeq& __ice_annotationLinksSeq, bool __ice_annotationLinksLoaded, const ::omero::sys::CountMap& __ice_annotationLinksCountPerOwner, const ::omero::RStringPtr& __ice_name, const ::omero::RStringPtr& __ice_description) :
        ::omero::model::IObject(__ice_id, __ice_details, __ice_loaded)
        ,
        version(__ice_version),
        acquisitionDate(__ice_acquisitionDate),
        archived(__ice_archived),
        partial(__ice_partial),
        format(__ice_format),
        imagingEnvironment(__ice_imagingEnvironment),
        objectiveSettings(__ice_objectiveSettings),
        instrument(__ice_instrument),
        stageLabel(__ice_stageLabel),
        experiment(__ice_experiment),
        pixelsSeq(__ice_pixelsSeq),
        pixelsLoaded(__ice_pixelsLoaded),
        wellSamplesSeq(__ice_wellSamplesSeq),
        wellSamplesLoaded(__ice_wellSamplesLoaded),
        roisSeq(__ice_roisSeq),
        roisLoaded(__ice_roisLoaded),
        datasetLinksSeq(__ice_datasetLinksSeq),
        datasetLinksLoaded(__ice_datasetLinksLoaded),
        datasetLinksCountPerOwner(__ice_datasetLinksCountPerOwner),
        fileset(__ice_fileset),
        annotationLinksSeq(__ice_annotationLinksSeq),
        annotationLinksLoaded(__ice_annotationLinksLoaded),
        annotationLinksCountPerOwner(__ice_annotationLinksCountPerOwner),
        name(__ice_name),
        description(__ice_description)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    virtual ::omero::RIntPtr getVersion(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RTimePtr getAcquisitionDate(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getAcquisitionDate(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setAcquisitionDate(const ::omero::RTimePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setAcquisitionDate(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RBoolPtr getArchived(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getArchived(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setArchived(const ::omero::RBoolPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setArchived(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RBoolPtr getPartial(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getPartial(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setPartial(const ::omero::RBoolPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setPartial(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::FormatPtr getFormat(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getFormat(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setFormat(const ::omero::model::FormatPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setFormat(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::ImagingEnvironmentPtr getImagingEnvironment(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getImagingEnvironment(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setImagingEnvironment(const ::omero::model::ImagingEnvironmentPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setImagingEnvironment(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::ObjectiveSettingsPtr getObjectiveSettings(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getObjectiveSettings(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setObjectiveSettings(const ::omero::model::ObjectiveSettingsPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setObjectiveSettings(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::InstrumentPtr getInstrument(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getInstrument(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setInstrument(const ::omero::model::InstrumentPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setInstrument(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::StageLabelPtr getStageLabel(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getStageLabel(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setStageLabel(const ::omero::model::StageLabelPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setStageLabel(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::ExperimentPtr getExperiment(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getExperiment(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setExperiment(const ::omero::model::ExperimentPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setExperiment(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unloadPixels(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unloadPixels(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int sizeOfPixels(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sizeOfPixels(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::ImagePixelsSeq copyPixels(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___copyPixels(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addPixels(const ::omero::model::PixelsPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addPixels(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addAllPixelsSet(const ::omero::model::ImagePixelsSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addAllPixelsSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removePixels(const ::omero::model::PixelsPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removePixels(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeAllPixelsSet(const ::omero::model::ImagePixelsSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeAllPixelsSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void clearPixels(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___clearPixels(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reloadPixels(const ::omero::model::ImagePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reloadPixels(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::PixelsPtr getPixels(::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getPixels(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::PixelsPtr setPixels(::Ice::Int, const ::omero::model::PixelsPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setPixels(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::PixelsPtr getPrimaryPixels(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getPrimaryPixels(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::PixelsPtr setPrimaryPixels(const ::omero::model::PixelsPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setPrimaryPixels(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unloadWellSamples(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unloadWellSamples(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int sizeOfWellSamples(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sizeOfWellSamples(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::ImageWellSamplesSeq copyWellSamples(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___copyWellSamples(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addWellSample(const ::omero::model::WellSamplePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addWellSample(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addAllWellSampleSet(const ::omero::model::ImageWellSamplesSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addAllWellSampleSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeWellSample(const ::omero::model::WellSamplePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeWellSample(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeAllWellSampleSet(const ::omero::model::ImageWellSamplesSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeAllWellSampleSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void clearWellSamples(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___clearWellSamples(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reloadWellSamples(const ::omero::model::ImagePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reloadWellSamples(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unloadRois(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unloadRois(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int sizeOfRois(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sizeOfRois(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::ImageRoisSeq copyRois(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___copyRois(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addRoi(const ::omero::model::RoiPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addRoi(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addAllRoiSet(const ::omero::model::ImageRoisSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addAllRoiSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeRoi(const ::omero::model::RoiPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeRoi(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeAllRoiSet(const ::omero::model::ImageRoisSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeAllRoiSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void clearRois(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___clearRois(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reloadRois(const ::omero::model::ImagePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reloadRois(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unloadDatasetLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unloadDatasetLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int sizeOfDatasetLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sizeOfDatasetLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::ImageDatasetLinksSeq copyDatasetLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___copyDatasetLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addDatasetImageLink(const ::omero::model::DatasetImageLinkPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addDatasetImageLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addAllDatasetImageLinkSet(const ::omero::model::ImageDatasetLinksSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addAllDatasetImageLinkSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeDatasetImageLink(const ::omero::model::DatasetImageLinkPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeDatasetImageLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeAllDatasetImageLinkSet(const ::omero::model::ImageDatasetLinksSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeAllDatasetImageLinkSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void clearDatasetLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___clearDatasetLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reloadDatasetLinks(const ::omero::model::ImagePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reloadDatasetLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::sys::CountMap getDatasetLinksCountPerOwner(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getDatasetLinksCountPerOwner(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::DatasetImageLinkPtr linkDataset(const ::omero::model::DatasetPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___linkDataset(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addDatasetImageLinkToBoth(const ::omero::model::DatasetImageLinkPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addDatasetImageLinkToBoth(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::ImageDatasetLinksSeq findDatasetImageLink(const ::omero::model::DatasetPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___findDatasetImageLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unlinkDataset(const ::omero::model::DatasetPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unlinkDataset(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeDatasetImageLinkFromBoth(const ::omero::model::DatasetImageLinkPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeDatasetImageLinkFromBoth(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::ImageLinkedDatasetSeq linkedDatasetList(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___linkedDatasetList(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::FilesetPtr getFileset(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getFileset(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setFileset(const ::omero::model::FilesetPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setFileset(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unloadAnnotationLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unloadAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sizeOfAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::ImageAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___copyAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addImageAnnotationLink(const ::omero::model::ImageAnnotationLinkPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addImageAnnotationLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addAllImageAnnotationLinkSet(const ::omero::model::ImageAnnotationLinksSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addAllImageAnnotationLinkSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeImageAnnotationLink(const ::omero::model::ImageAnnotationLinkPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeImageAnnotationLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeAllImageAnnotationLinkSet(const ::omero::model::ImageAnnotationLinksSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeAllImageAnnotationLinkSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void clearAnnotationLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___clearAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reloadAnnotationLinks(const ::omero::model::ImagePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reloadAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getAnnotationLinksCountPerOwner(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::ImageAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___linkAnnotation(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addImageAnnotationLinkToBoth(const ::omero::model::ImageAnnotationLinkPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addImageAnnotationLinkToBoth(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::ImageAnnotationLinksSeq findImageAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___findImageAnnotationLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unlinkAnnotation(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeImageAnnotationLinkFromBoth(const ::omero::model::ImageAnnotationLinkPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeImageAnnotationLinkFromBoth(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::ImageLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___linkedAnnotationList(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getName(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getName(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setName(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setName(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getDescription(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getDescription(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setDescription(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setDescription(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::model::IObject::__writeImpl;
    using ::omero::model::IObject::__readImpl;
    #endif

    ::omero::RIntPtr version;

    ::omero::RTimePtr acquisitionDate;

    ::omero::RBoolPtr archived;

    ::omero::RBoolPtr partial;

    ::omero::model::FormatPtr format;

    ::omero::model::ImagingEnvironmentPtr imagingEnvironment;

    ::omero::model::ObjectiveSettingsPtr objectiveSettings;

    ::omero::model::InstrumentPtr instrument;

    ::omero::model::StageLabelPtr stageLabel;

    ::omero::model::ExperimentPtr experiment;

    ::omero::model::ImagePixelsSeq pixelsSeq;

    bool pixelsLoaded;

    ::omero::model::ImageWellSamplesSeq wellSamplesSeq;

    bool wellSamplesLoaded;

    ::omero::model::ImageRoisSeq roisSeq;

    bool roisLoaded;

    ::omero::model::ImageDatasetLinksSeq datasetLinksSeq;

    bool datasetLinksLoaded;

    ::omero::sys::CountMap datasetLinksCountPerOwner;

    ::omero::model::FilesetPtr fileset;

    ::omero::model::ImageAnnotationLinksSeq annotationLinksSeq;

    bool annotationLinksLoaded;

    ::omero::sys::CountMap annotationLinksCountPerOwner;

    ::omero::RStringPtr name;

    ::omero::RStringPtr description;
};

inline bool operator==(const Image& l, const Image& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Image& l, const Image& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

}

namespace omero
{

namespace model
{

template<class T>
class CallbackNC_Image_getVersion : public Callback_Image_getVersion_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RIntPtr&);

    CallbackNC_Image_getVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Image_getVersionPtr
newCallback_Image_getVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_getVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_getVersionPtr
newCallback_Image_getVersion(T* instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_getVersion<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_getVersion : public Callback_Image_getVersion_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RIntPtr&, const CT&);

    Callback_Image_getVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Image_getVersionPtr
newCallback_Image_getVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_getVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_getVersionPtr
newCallback_Image_getVersion(T* instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_getVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Image_setVersion : public Callback_Image_setVersion_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Image_setVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Image_setVersionPtr
newCallback_Image_setVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_setVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_setVersionPtr
newCallback_Image_setVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_setVersion<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Image_setVersionPtr
newCallback_Image_setVersion(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_setVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_setVersionPtr
newCallback_Image_setVersion(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_setVersion<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_setVersion : public Callback_Image_setVersion_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Image_setVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Image_setVersionPtr
newCallback_Image_setVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_setVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_setVersionPtr
newCallback_Image_setVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_setVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Image_setVersionPtr
newCallback_Image_setVersion(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_setVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_setVersionPtr
newCallback_Image_setVersion(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_setVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Image_getAcquisitionDate : public Callback_Image_getAcquisitionDate_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RTimePtr&);

    CallbackNC_Image_getAcquisitionDate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::omero::RTimePtr __ret;
        try
        {
            __ret = __proxy->end_getAcquisitionDate(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Image_getAcquisitionDatePtr
newCallback_Image_getAcquisitionDate(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RTimePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_getAcquisitionDate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_getAcquisitionDatePtr
newCallback_Image_getAcquisitionDate(T* instance, void (T::*cb)(const ::omero::RTimePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_getAcquisitionDate<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_getAcquisitionDate : public Callback_Image_getAcquisitionDate_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RTimePtr&, const CT&);

    Callback_Image_getAcquisitionDate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::omero::RTimePtr __ret;
        try
        {
            __ret = __proxy->end_getAcquisitionDate(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Image_getAcquisitionDatePtr
newCallback_Image_getAcquisitionDate(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RTimePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_getAcquisitionDate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_getAcquisitionDatePtr
newCallback_Image_getAcquisitionDate(T* instance, void (T::*cb)(const ::omero::RTimePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_getAcquisitionDate<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Image_setAcquisitionDate : public Callback_Image_setAcquisitionDate_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Image_setAcquisitionDate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Image_setAcquisitionDatePtr
newCallback_Image_setAcquisitionDate(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_setAcquisitionDate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_setAcquisitionDatePtr
newCallback_Image_setAcquisitionDate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_setAcquisitionDate<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Image_setAcquisitionDatePtr
newCallback_Image_setAcquisitionDate(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_setAcquisitionDate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_setAcquisitionDatePtr
newCallback_Image_setAcquisitionDate(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_setAcquisitionDate<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_setAcquisitionDate : public Callback_Image_setAcquisitionDate_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Image_setAcquisitionDate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Image_setAcquisitionDatePtr
newCallback_Image_setAcquisitionDate(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_setAcquisitionDate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_setAcquisitionDatePtr
newCallback_Image_setAcquisitionDate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_setAcquisitionDate<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Image_setAcquisitionDatePtr
newCallback_Image_setAcquisitionDate(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_setAcquisitionDate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_setAcquisitionDatePtr
newCallback_Image_setAcquisitionDate(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_setAcquisitionDate<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Image_getArchived : public Callback_Image_getArchived_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RBoolPtr&);

    CallbackNC_Image_getArchived(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::omero::RBoolPtr __ret;
        try
        {
            __ret = __proxy->end_getArchived(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Image_getArchivedPtr
newCallback_Image_getArchived(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RBoolPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_getArchived<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_getArchivedPtr
newCallback_Image_getArchived(T* instance, void (T::*cb)(const ::omero::RBoolPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_getArchived<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_getArchived : public Callback_Image_getArchived_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RBoolPtr&, const CT&);

    Callback_Image_getArchived(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::omero::RBoolPtr __ret;
        try
        {
            __ret = __proxy->end_getArchived(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Image_getArchivedPtr
newCallback_Image_getArchived(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RBoolPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_getArchived<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_getArchivedPtr
newCallback_Image_getArchived(T* instance, void (T::*cb)(const ::omero::RBoolPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_getArchived<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Image_setArchived : public Callback_Image_setArchived_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Image_setArchived(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Image_setArchivedPtr
newCallback_Image_setArchived(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_setArchived<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_setArchivedPtr
newCallback_Image_setArchived(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_setArchived<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Image_setArchivedPtr
newCallback_Image_setArchived(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_setArchived<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_setArchivedPtr
newCallback_Image_setArchived(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_setArchived<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_setArchived : public Callback_Image_setArchived_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Image_setArchived(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Image_setArchivedPtr
newCallback_Image_setArchived(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_setArchived<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_setArchivedPtr
newCallback_Image_setArchived(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_setArchived<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Image_setArchivedPtr
newCallback_Image_setArchived(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_setArchived<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_setArchivedPtr
newCallback_Image_setArchived(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_setArchived<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Image_getPartial : public Callback_Image_getPartial_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RBoolPtr&);

    CallbackNC_Image_getPartial(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::omero::RBoolPtr __ret;
        try
        {
            __ret = __proxy->end_getPartial(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Image_getPartialPtr
newCallback_Image_getPartial(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RBoolPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_getPartial<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_getPartialPtr
newCallback_Image_getPartial(T* instance, void (T::*cb)(const ::omero::RBoolPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_getPartial<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_getPartial : public Callback_Image_getPartial_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RBoolPtr&, const CT&);

    Callback_Image_getPartial(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::omero::RBoolPtr __ret;
        try
        {
            __ret = __proxy->end_getPartial(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Image_getPartialPtr
newCallback_Image_getPartial(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RBoolPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_getPartial<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_getPartialPtr
newCallback_Image_getPartial(T* instance, void (T::*cb)(const ::omero::RBoolPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_getPartial<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Image_setPartial : public Callback_Image_setPartial_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Image_setPartial(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Image_setPartialPtr
newCallback_Image_setPartial(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_setPartial<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_setPartialPtr
newCallback_Image_setPartial(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_setPartial<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Image_setPartialPtr
newCallback_Image_setPartial(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_setPartial<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_setPartialPtr
newCallback_Image_setPartial(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_setPartial<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_setPartial : public Callback_Image_setPartial_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Image_setPartial(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Image_setPartialPtr
newCallback_Image_setPartial(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_setPartial<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_setPartialPtr
newCallback_Image_setPartial(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_setPartial<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Image_setPartialPtr
newCallback_Image_setPartial(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_setPartial<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_setPartialPtr
newCallback_Image_setPartial(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_setPartial<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Image_getFormat : public Callback_Image_getFormat_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::FormatPtr&);

    CallbackNC_Image_getFormat(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::omero::model::FormatPtr __ret;
        try
        {
            __ret = __proxy->end_getFormat(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Image_getFormatPtr
newCallback_Image_getFormat(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FormatPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_getFormat<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_getFormatPtr
newCallback_Image_getFormat(T* instance, void (T::*cb)(const ::omero::model::FormatPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_getFormat<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_getFormat : public Callback_Image_getFormat_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::FormatPtr&, const CT&);

    Callback_Image_getFormat(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::omero::model::FormatPtr __ret;
        try
        {
            __ret = __proxy->end_getFormat(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Image_getFormatPtr
newCallback_Image_getFormat(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FormatPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_getFormat<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_getFormatPtr
newCallback_Image_getFormat(T* instance, void (T::*cb)(const ::omero::model::FormatPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_getFormat<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Image_setFormat : public Callback_Image_setFormat_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Image_setFormat(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Image_setFormatPtr
newCallback_Image_setFormat(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_setFormat<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_setFormatPtr
newCallback_Image_setFormat(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_setFormat<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Image_setFormatPtr
newCallback_Image_setFormat(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_setFormat<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_setFormatPtr
newCallback_Image_setFormat(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_setFormat<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_setFormat : public Callback_Image_setFormat_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Image_setFormat(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Image_setFormatPtr
newCallback_Image_setFormat(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_setFormat<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_setFormatPtr
newCallback_Image_setFormat(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_setFormat<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Image_setFormatPtr
newCallback_Image_setFormat(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_setFormat<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_setFormatPtr
newCallback_Image_setFormat(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_setFormat<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Image_getImagingEnvironment : public Callback_Image_getImagingEnvironment_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::ImagingEnvironmentPtr&);

    CallbackNC_Image_getImagingEnvironment(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::omero::model::ImagingEnvironmentPtr __ret;
        try
        {
            __ret = __proxy->end_getImagingEnvironment(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Image_getImagingEnvironmentPtr
newCallback_Image_getImagingEnvironment(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ImagingEnvironmentPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_getImagingEnvironment<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_getImagingEnvironmentPtr
newCallback_Image_getImagingEnvironment(T* instance, void (T::*cb)(const ::omero::model::ImagingEnvironmentPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_getImagingEnvironment<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_getImagingEnvironment : public Callback_Image_getImagingEnvironment_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::ImagingEnvironmentPtr&, const CT&);

    Callback_Image_getImagingEnvironment(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::omero::model::ImagingEnvironmentPtr __ret;
        try
        {
            __ret = __proxy->end_getImagingEnvironment(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Image_getImagingEnvironmentPtr
newCallback_Image_getImagingEnvironment(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ImagingEnvironmentPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_getImagingEnvironment<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_getImagingEnvironmentPtr
newCallback_Image_getImagingEnvironment(T* instance, void (T::*cb)(const ::omero::model::ImagingEnvironmentPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_getImagingEnvironment<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Image_setImagingEnvironment : public Callback_Image_setImagingEnvironment_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Image_setImagingEnvironment(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Image_setImagingEnvironmentPtr
newCallback_Image_setImagingEnvironment(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_setImagingEnvironment<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_setImagingEnvironmentPtr
newCallback_Image_setImagingEnvironment(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_setImagingEnvironment<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Image_setImagingEnvironmentPtr
newCallback_Image_setImagingEnvironment(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_setImagingEnvironment<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_setImagingEnvironmentPtr
newCallback_Image_setImagingEnvironment(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_setImagingEnvironment<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_setImagingEnvironment : public Callback_Image_setImagingEnvironment_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Image_setImagingEnvironment(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Image_setImagingEnvironmentPtr
newCallback_Image_setImagingEnvironment(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_setImagingEnvironment<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_setImagingEnvironmentPtr
newCallback_Image_setImagingEnvironment(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_setImagingEnvironment<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Image_setImagingEnvironmentPtr
newCallback_Image_setImagingEnvironment(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_setImagingEnvironment<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_setImagingEnvironmentPtr
newCallback_Image_setImagingEnvironment(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_setImagingEnvironment<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Image_getObjectiveSettings : public Callback_Image_getObjectiveSettings_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::ObjectiveSettingsPtr&);

    CallbackNC_Image_getObjectiveSettings(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::omero::model::ObjectiveSettingsPtr __ret;
        try
        {
            __ret = __proxy->end_getObjectiveSettings(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Image_getObjectiveSettingsPtr
newCallback_Image_getObjectiveSettings(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ObjectiveSettingsPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_getObjectiveSettings<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_getObjectiveSettingsPtr
newCallback_Image_getObjectiveSettings(T* instance, void (T::*cb)(const ::omero::model::ObjectiveSettingsPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_getObjectiveSettings<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_getObjectiveSettings : public Callback_Image_getObjectiveSettings_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::ObjectiveSettingsPtr&, const CT&);

    Callback_Image_getObjectiveSettings(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::omero::model::ObjectiveSettingsPtr __ret;
        try
        {
            __ret = __proxy->end_getObjectiveSettings(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Image_getObjectiveSettingsPtr
newCallback_Image_getObjectiveSettings(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ObjectiveSettingsPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_getObjectiveSettings<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_getObjectiveSettingsPtr
newCallback_Image_getObjectiveSettings(T* instance, void (T::*cb)(const ::omero::model::ObjectiveSettingsPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_getObjectiveSettings<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Image_setObjectiveSettings : public Callback_Image_setObjectiveSettings_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Image_setObjectiveSettings(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Image_setObjectiveSettingsPtr
newCallback_Image_setObjectiveSettings(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_setObjectiveSettings<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_setObjectiveSettingsPtr
newCallback_Image_setObjectiveSettings(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_setObjectiveSettings<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Image_setObjectiveSettingsPtr
newCallback_Image_setObjectiveSettings(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_setObjectiveSettings<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_setObjectiveSettingsPtr
newCallback_Image_setObjectiveSettings(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_setObjectiveSettings<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_setObjectiveSettings : public Callback_Image_setObjectiveSettings_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Image_setObjectiveSettings(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Image_setObjectiveSettingsPtr
newCallback_Image_setObjectiveSettings(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_setObjectiveSettings<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_setObjectiveSettingsPtr
newCallback_Image_setObjectiveSettings(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_setObjectiveSettings<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Image_setObjectiveSettingsPtr
newCallback_Image_setObjectiveSettings(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_setObjectiveSettings<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_setObjectiveSettingsPtr
newCallback_Image_setObjectiveSettings(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_setObjectiveSettings<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Image_getInstrument : public Callback_Image_getInstrument_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::InstrumentPtr&);

    CallbackNC_Image_getInstrument(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::omero::model::InstrumentPtr __ret;
        try
        {
            __ret = __proxy->end_getInstrument(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Image_getInstrumentPtr
newCallback_Image_getInstrument(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::InstrumentPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_getInstrument<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_getInstrumentPtr
newCallback_Image_getInstrument(T* instance, void (T::*cb)(const ::omero::model::InstrumentPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_getInstrument<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_getInstrument : public Callback_Image_getInstrument_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::InstrumentPtr&, const CT&);

    Callback_Image_getInstrument(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::omero::model::InstrumentPtr __ret;
        try
        {
            __ret = __proxy->end_getInstrument(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Image_getInstrumentPtr
newCallback_Image_getInstrument(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::InstrumentPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_getInstrument<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_getInstrumentPtr
newCallback_Image_getInstrument(T* instance, void (T::*cb)(const ::omero::model::InstrumentPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_getInstrument<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Image_setInstrument : public Callback_Image_setInstrument_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Image_setInstrument(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Image_setInstrumentPtr
newCallback_Image_setInstrument(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_setInstrument<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_setInstrumentPtr
newCallback_Image_setInstrument(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_setInstrument<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Image_setInstrumentPtr
newCallback_Image_setInstrument(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_setInstrument<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_setInstrumentPtr
newCallback_Image_setInstrument(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_setInstrument<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_setInstrument : public Callback_Image_setInstrument_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Image_setInstrument(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Image_setInstrumentPtr
newCallback_Image_setInstrument(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_setInstrument<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_setInstrumentPtr
newCallback_Image_setInstrument(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_setInstrument<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Image_setInstrumentPtr
newCallback_Image_setInstrument(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_setInstrument<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_setInstrumentPtr
newCallback_Image_setInstrument(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_setInstrument<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Image_getStageLabel : public Callback_Image_getStageLabel_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::StageLabelPtr&);

    CallbackNC_Image_getStageLabel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::omero::model::StageLabelPtr __ret;
        try
        {
            __ret = __proxy->end_getStageLabel(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Image_getStageLabelPtr
newCallback_Image_getStageLabel(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::StageLabelPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_getStageLabel<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_getStageLabelPtr
newCallback_Image_getStageLabel(T* instance, void (T::*cb)(const ::omero::model::StageLabelPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_getStageLabel<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_getStageLabel : public Callback_Image_getStageLabel_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::StageLabelPtr&, const CT&);

    Callback_Image_getStageLabel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::omero::model::StageLabelPtr __ret;
        try
        {
            __ret = __proxy->end_getStageLabel(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Image_getStageLabelPtr
newCallback_Image_getStageLabel(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::StageLabelPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_getStageLabel<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_getStageLabelPtr
newCallback_Image_getStageLabel(T* instance, void (T::*cb)(const ::omero::model::StageLabelPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_getStageLabel<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Image_setStageLabel : public Callback_Image_setStageLabel_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Image_setStageLabel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Image_setStageLabelPtr
newCallback_Image_setStageLabel(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_setStageLabel<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_setStageLabelPtr
newCallback_Image_setStageLabel(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_setStageLabel<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Image_setStageLabelPtr
newCallback_Image_setStageLabel(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_setStageLabel<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_setStageLabelPtr
newCallback_Image_setStageLabel(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_setStageLabel<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_setStageLabel : public Callback_Image_setStageLabel_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Image_setStageLabel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Image_setStageLabelPtr
newCallback_Image_setStageLabel(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_setStageLabel<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_setStageLabelPtr
newCallback_Image_setStageLabel(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_setStageLabel<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Image_setStageLabelPtr
newCallback_Image_setStageLabel(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_setStageLabel<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_setStageLabelPtr
newCallback_Image_setStageLabel(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_setStageLabel<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Image_getExperiment : public Callback_Image_getExperiment_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::ExperimentPtr&);

    CallbackNC_Image_getExperiment(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::omero::model::ExperimentPtr __ret;
        try
        {
            __ret = __proxy->end_getExperiment(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Image_getExperimentPtr
newCallback_Image_getExperiment(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ExperimentPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_getExperiment<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_getExperimentPtr
newCallback_Image_getExperiment(T* instance, void (T::*cb)(const ::omero::model::ExperimentPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_getExperiment<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_getExperiment : public Callback_Image_getExperiment_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::ExperimentPtr&, const CT&);

    Callback_Image_getExperiment(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::omero::model::ExperimentPtr __ret;
        try
        {
            __ret = __proxy->end_getExperiment(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Image_getExperimentPtr
newCallback_Image_getExperiment(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ExperimentPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_getExperiment<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_getExperimentPtr
newCallback_Image_getExperiment(T* instance, void (T::*cb)(const ::omero::model::ExperimentPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_getExperiment<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Image_setExperiment : public Callback_Image_setExperiment_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Image_setExperiment(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Image_setExperimentPtr
newCallback_Image_setExperiment(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_setExperiment<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_setExperimentPtr
newCallback_Image_setExperiment(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_setExperiment<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Image_setExperimentPtr
newCallback_Image_setExperiment(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_setExperiment<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_setExperimentPtr
newCallback_Image_setExperiment(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_setExperiment<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_setExperiment : public Callback_Image_setExperiment_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Image_setExperiment(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Image_setExperimentPtr
newCallback_Image_setExperiment(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_setExperiment<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_setExperimentPtr
newCallback_Image_setExperiment(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_setExperiment<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Image_setExperimentPtr
newCallback_Image_setExperiment(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_setExperiment<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_setExperimentPtr
newCallback_Image_setExperiment(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_setExperiment<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Image_unloadPixels : public Callback_Image_unloadPixels_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Image_unloadPixels(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Image_unloadPixelsPtr
newCallback_Image_unloadPixels(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_unloadPixels<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_unloadPixelsPtr
newCallback_Image_unloadPixels(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_unloadPixels<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Image_unloadPixelsPtr
newCallback_Image_unloadPixels(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_unloadPixels<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_unloadPixelsPtr
newCallback_Image_unloadPixels(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_unloadPixels<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_unloadPixels : public Callback_Image_unloadPixels_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Image_unloadPixels(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Image_unloadPixelsPtr
newCallback_Image_unloadPixels(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_unloadPixels<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_unloadPixelsPtr
newCallback_Image_unloadPixels(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_unloadPixels<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Image_unloadPixelsPtr
newCallback_Image_unloadPixels(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_unloadPixels<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_unloadPixelsPtr
newCallback_Image_unloadPixels(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_unloadPixels<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Image_sizeOfPixels : public Callback_Image_sizeOfPixels_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Image_sizeOfPixels(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfPixels(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Image_sizeOfPixelsPtr
newCallback_Image_sizeOfPixels(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_sizeOfPixels<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_sizeOfPixelsPtr
newCallback_Image_sizeOfPixels(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_sizeOfPixels<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_sizeOfPixels : public Callback_Image_sizeOfPixels_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Image_sizeOfPixels(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfPixels(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Image_sizeOfPixelsPtr
newCallback_Image_sizeOfPixels(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_sizeOfPixels<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_sizeOfPixelsPtr
newCallback_Image_sizeOfPixels(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_sizeOfPixels<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Image_copyPixels : public Callback_Image_copyPixels_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::ImagePixelsSeq&);

    CallbackNC_Image_copyPixels(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::omero::model::ImagePixelsSeq __ret;
        try
        {
            __ret = __proxy->end_copyPixels(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Image_copyPixelsPtr
newCallback_Image_copyPixels(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ImagePixelsSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_copyPixels<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_copyPixelsPtr
newCallback_Image_copyPixels(T* instance, void (T::*cb)(const ::omero::model::ImagePixelsSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_copyPixels<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_copyPixels : public Callback_Image_copyPixels_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::ImagePixelsSeq&, const CT&);

    Callback_Image_copyPixels(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::omero::model::ImagePixelsSeq __ret;
        try
        {
            __ret = __proxy->end_copyPixels(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Image_copyPixelsPtr
newCallback_Image_copyPixels(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ImagePixelsSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_copyPixels<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_copyPixelsPtr
newCallback_Image_copyPixels(T* instance, void (T::*cb)(const ::omero::model::ImagePixelsSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_copyPixels<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Image_addPixels : public Callback_Image_addPixels_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Image_addPixels(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Image_addPixelsPtr
newCallback_Image_addPixels(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_addPixels<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_addPixelsPtr
newCallback_Image_addPixels(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_addPixels<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Image_addPixelsPtr
newCallback_Image_addPixels(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_addPixels<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_addPixelsPtr
newCallback_Image_addPixels(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_addPixels<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_addPixels : public Callback_Image_addPixels_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Image_addPixels(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Image_addPixelsPtr
newCallback_Image_addPixels(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_addPixels<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_addPixelsPtr
newCallback_Image_addPixels(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_addPixels<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Image_addPixelsPtr
newCallback_Image_addPixels(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_addPixels<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_addPixelsPtr
newCallback_Image_addPixels(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_addPixels<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Image_addAllPixelsSet : public Callback_Image_addAllPixelsSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Image_addAllPixelsSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Image_addAllPixelsSetPtr
newCallback_Image_addAllPixelsSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_addAllPixelsSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_addAllPixelsSetPtr
newCallback_Image_addAllPixelsSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_addAllPixelsSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Image_addAllPixelsSetPtr
newCallback_Image_addAllPixelsSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_addAllPixelsSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_addAllPixelsSetPtr
newCallback_Image_addAllPixelsSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_addAllPixelsSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_addAllPixelsSet : public Callback_Image_addAllPixelsSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Image_addAllPixelsSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Image_addAllPixelsSetPtr
newCallback_Image_addAllPixelsSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_addAllPixelsSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_addAllPixelsSetPtr
newCallback_Image_addAllPixelsSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_addAllPixelsSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Image_addAllPixelsSetPtr
newCallback_Image_addAllPixelsSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_addAllPixelsSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_addAllPixelsSetPtr
newCallback_Image_addAllPixelsSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_addAllPixelsSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Image_removePixels : public Callback_Image_removePixels_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Image_removePixels(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Image_removePixelsPtr
newCallback_Image_removePixels(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_removePixels<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_removePixelsPtr
newCallback_Image_removePixels(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_removePixels<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Image_removePixelsPtr
newCallback_Image_removePixels(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_removePixels<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_removePixelsPtr
newCallback_Image_removePixels(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_removePixels<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_removePixels : public Callback_Image_removePixels_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Image_removePixels(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Image_removePixelsPtr
newCallback_Image_removePixels(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_removePixels<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_removePixelsPtr
newCallback_Image_removePixels(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_removePixels<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Image_removePixelsPtr
newCallback_Image_removePixels(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_removePixels<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_removePixelsPtr
newCallback_Image_removePixels(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_removePixels<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Image_removeAllPixelsSet : public Callback_Image_removeAllPixelsSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Image_removeAllPixelsSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Image_removeAllPixelsSetPtr
newCallback_Image_removeAllPixelsSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_removeAllPixelsSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_removeAllPixelsSetPtr
newCallback_Image_removeAllPixelsSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_removeAllPixelsSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Image_removeAllPixelsSetPtr
newCallback_Image_removeAllPixelsSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_removeAllPixelsSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_removeAllPixelsSetPtr
newCallback_Image_removeAllPixelsSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_removeAllPixelsSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_removeAllPixelsSet : public Callback_Image_removeAllPixelsSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Image_removeAllPixelsSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Image_removeAllPixelsSetPtr
newCallback_Image_removeAllPixelsSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_removeAllPixelsSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_removeAllPixelsSetPtr
newCallback_Image_removeAllPixelsSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_removeAllPixelsSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Image_removeAllPixelsSetPtr
newCallback_Image_removeAllPixelsSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_removeAllPixelsSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_removeAllPixelsSetPtr
newCallback_Image_removeAllPixelsSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_removeAllPixelsSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Image_clearPixels : public Callback_Image_clearPixels_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Image_clearPixels(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Image_clearPixelsPtr
newCallback_Image_clearPixels(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_clearPixels<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_clearPixelsPtr
newCallback_Image_clearPixels(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_clearPixels<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Image_clearPixelsPtr
newCallback_Image_clearPixels(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_clearPixels<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_clearPixelsPtr
newCallback_Image_clearPixels(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_clearPixels<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_clearPixels : public Callback_Image_clearPixels_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Image_clearPixels(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Image_clearPixelsPtr
newCallback_Image_clearPixels(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_clearPixels<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_clearPixelsPtr
newCallback_Image_clearPixels(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_clearPixels<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Image_clearPixelsPtr
newCallback_Image_clearPixels(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_clearPixels<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_clearPixelsPtr
newCallback_Image_clearPixels(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_clearPixels<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Image_reloadPixels : public Callback_Image_reloadPixels_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Image_reloadPixels(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Image_reloadPixelsPtr
newCallback_Image_reloadPixels(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_reloadPixels<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_reloadPixelsPtr
newCallback_Image_reloadPixels(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_reloadPixels<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Image_reloadPixelsPtr
newCallback_Image_reloadPixels(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_reloadPixels<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_reloadPixelsPtr
newCallback_Image_reloadPixels(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_reloadPixels<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_reloadPixels : public Callback_Image_reloadPixels_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Image_reloadPixels(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Image_reloadPixelsPtr
newCallback_Image_reloadPixels(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_reloadPixels<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_reloadPixelsPtr
newCallback_Image_reloadPixels(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_reloadPixels<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Image_reloadPixelsPtr
newCallback_Image_reloadPixels(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_reloadPixels<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_reloadPixelsPtr
newCallback_Image_reloadPixels(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_reloadPixels<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Image_getPixels : public Callback_Image_getPixels_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::PixelsPtr&);

    CallbackNC_Image_getPixels(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::omero::model::PixelsPtr __ret;
        try
        {
            __ret = __proxy->end_getPixels(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Image_getPixelsPtr
newCallback_Image_getPixels(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PixelsPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_getPixels<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_getPixelsPtr
newCallback_Image_getPixels(T* instance, void (T::*cb)(const ::omero::model::PixelsPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_getPixels<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_getPixels : public Callback_Image_getPixels_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::PixelsPtr&, const CT&);

    Callback_Image_getPixels(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::omero::model::PixelsPtr __ret;
        try
        {
            __ret = __proxy->end_getPixels(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Image_getPixelsPtr
newCallback_Image_getPixels(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PixelsPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_getPixels<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_getPixelsPtr
newCallback_Image_getPixels(T* instance, void (T::*cb)(const ::omero::model::PixelsPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_getPixels<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Image_setPixels : public Callback_Image_setPixels_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::PixelsPtr&);

    CallbackNC_Image_setPixels(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::omero::model::PixelsPtr __ret;
        try
        {
            __ret = __proxy->end_setPixels(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Image_setPixelsPtr
newCallback_Image_setPixels(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PixelsPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_setPixels<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_setPixelsPtr
newCallback_Image_setPixels(T* instance, void (T::*cb)(const ::omero::model::PixelsPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_setPixels<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_setPixels : public Callback_Image_setPixels_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::PixelsPtr&, const CT&);

    Callback_Image_setPixels(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::omero::model::PixelsPtr __ret;
        try
        {
            __ret = __proxy->end_setPixels(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Image_setPixelsPtr
newCallback_Image_setPixels(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PixelsPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_setPixels<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_setPixelsPtr
newCallback_Image_setPixels(T* instance, void (T::*cb)(const ::omero::model::PixelsPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_setPixels<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Image_getPrimaryPixels : public Callback_Image_getPrimaryPixels_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::PixelsPtr&);

    CallbackNC_Image_getPrimaryPixels(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::omero::model::PixelsPtr __ret;
        try
        {
            __ret = __proxy->end_getPrimaryPixels(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Image_getPrimaryPixelsPtr
newCallback_Image_getPrimaryPixels(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PixelsPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_getPrimaryPixels<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_getPrimaryPixelsPtr
newCallback_Image_getPrimaryPixels(T* instance, void (T::*cb)(const ::omero::model::PixelsPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_getPrimaryPixels<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_getPrimaryPixels : public Callback_Image_getPrimaryPixels_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::PixelsPtr&, const CT&);

    Callback_Image_getPrimaryPixels(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::omero::model::PixelsPtr __ret;
        try
        {
            __ret = __proxy->end_getPrimaryPixels(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Image_getPrimaryPixelsPtr
newCallback_Image_getPrimaryPixels(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PixelsPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_getPrimaryPixels<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_getPrimaryPixelsPtr
newCallback_Image_getPrimaryPixels(T* instance, void (T::*cb)(const ::omero::model::PixelsPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_getPrimaryPixels<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Image_setPrimaryPixels : public Callback_Image_setPrimaryPixels_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::PixelsPtr&);

    CallbackNC_Image_setPrimaryPixels(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::omero::model::PixelsPtr __ret;
        try
        {
            __ret = __proxy->end_setPrimaryPixels(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Image_setPrimaryPixelsPtr
newCallback_Image_setPrimaryPixels(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PixelsPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_setPrimaryPixels<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_setPrimaryPixelsPtr
newCallback_Image_setPrimaryPixels(T* instance, void (T::*cb)(const ::omero::model::PixelsPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_setPrimaryPixels<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_setPrimaryPixels : public Callback_Image_setPrimaryPixels_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::PixelsPtr&, const CT&);

    Callback_Image_setPrimaryPixels(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::omero::model::PixelsPtr __ret;
        try
        {
            __ret = __proxy->end_setPrimaryPixels(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Image_setPrimaryPixelsPtr
newCallback_Image_setPrimaryPixels(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PixelsPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_setPrimaryPixels<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_setPrimaryPixelsPtr
newCallback_Image_setPrimaryPixels(T* instance, void (T::*cb)(const ::omero::model::PixelsPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_setPrimaryPixels<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Image_unloadWellSamples : public Callback_Image_unloadWellSamples_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Image_unloadWellSamples(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Image_unloadWellSamplesPtr
newCallback_Image_unloadWellSamples(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_unloadWellSamples<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_unloadWellSamplesPtr
newCallback_Image_unloadWellSamples(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_unloadWellSamples<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Image_unloadWellSamplesPtr
newCallback_Image_unloadWellSamples(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_unloadWellSamples<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_unloadWellSamplesPtr
newCallback_Image_unloadWellSamples(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_unloadWellSamples<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_unloadWellSamples : public Callback_Image_unloadWellSamples_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Image_unloadWellSamples(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Image_unloadWellSamplesPtr
newCallback_Image_unloadWellSamples(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_unloadWellSamples<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_unloadWellSamplesPtr
newCallback_Image_unloadWellSamples(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_unloadWellSamples<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Image_unloadWellSamplesPtr
newCallback_Image_unloadWellSamples(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_unloadWellSamples<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_unloadWellSamplesPtr
newCallback_Image_unloadWellSamples(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_unloadWellSamples<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Image_sizeOfWellSamples : public Callback_Image_sizeOfWellSamples_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Image_sizeOfWellSamples(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfWellSamples(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Image_sizeOfWellSamplesPtr
newCallback_Image_sizeOfWellSamples(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_sizeOfWellSamples<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_sizeOfWellSamplesPtr
newCallback_Image_sizeOfWellSamples(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_sizeOfWellSamples<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_sizeOfWellSamples : public Callback_Image_sizeOfWellSamples_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Image_sizeOfWellSamples(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfWellSamples(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Image_sizeOfWellSamplesPtr
newCallback_Image_sizeOfWellSamples(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_sizeOfWellSamples<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_sizeOfWellSamplesPtr
newCallback_Image_sizeOfWellSamples(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_sizeOfWellSamples<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Image_copyWellSamples : public Callback_Image_copyWellSamples_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::ImageWellSamplesSeq&);

    CallbackNC_Image_copyWellSamples(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::omero::model::ImageWellSamplesSeq __ret;
        try
        {
            __ret = __proxy->end_copyWellSamples(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Image_copyWellSamplesPtr
newCallback_Image_copyWellSamples(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ImageWellSamplesSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_copyWellSamples<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_copyWellSamplesPtr
newCallback_Image_copyWellSamples(T* instance, void (T::*cb)(const ::omero::model::ImageWellSamplesSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_copyWellSamples<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_copyWellSamples : public Callback_Image_copyWellSamples_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::ImageWellSamplesSeq&, const CT&);

    Callback_Image_copyWellSamples(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::omero::model::ImageWellSamplesSeq __ret;
        try
        {
            __ret = __proxy->end_copyWellSamples(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Image_copyWellSamplesPtr
newCallback_Image_copyWellSamples(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ImageWellSamplesSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_copyWellSamples<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_copyWellSamplesPtr
newCallback_Image_copyWellSamples(T* instance, void (T::*cb)(const ::omero::model::ImageWellSamplesSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_copyWellSamples<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Image_addWellSample : public Callback_Image_addWellSample_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Image_addWellSample(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Image_addWellSamplePtr
newCallback_Image_addWellSample(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_addWellSample<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_addWellSamplePtr
newCallback_Image_addWellSample(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_addWellSample<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Image_addWellSamplePtr
newCallback_Image_addWellSample(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_addWellSample<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_addWellSamplePtr
newCallback_Image_addWellSample(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_addWellSample<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_addWellSample : public Callback_Image_addWellSample_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Image_addWellSample(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Image_addWellSamplePtr
newCallback_Image_addWellSample(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_addWellSample<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_addWellSamplePtr
newCallback_Image_addWellSample(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_addWellSample<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Image_addWellSamplePtr
newCallback_Image_addWellSample(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_addWellSample<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_addWellSamplePtr
newCallback_Image_addWellSample(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_addWellSample<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Image_addAllWellSampleSet : public Callback_Image_addAllWellSampleSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Image_addAllWellSampleSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Image_addAllWellSampleSetPtr
newCallback_Image_addAllWellSampleSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_addAllWellSampleSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_addAllWellSampleSetPtr
newCallback_Image_addAllWellSampleSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_addAllWellSampleSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Image_addAllWellSampleSetPtr
newCallback_Image_addAllWellSampleSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_addAllWellSampleSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_addAllWellSampleSetPtr
newCallback_Image_addAllWellSampleSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_addAllWellSampleSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_addAllWellSampleSet : public Callback_Image_addAllWellSampleSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Image_addAllWellSampleSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Image_addAllWellSampleSetPtr
newCallback_Image_addAllWellSampleSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_addAllWellSampleSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_addAllWellSampleSetPtr
newCallback_Image_addAllWellSampleSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_addAllWellSampleSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Image_addAllWellSampleSetPtr
newCallback_Image_addAllWellSampleSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_addAllWellSampleSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_addAllWellSampleSetPtr
newCallback_Image_addAllWellSampleSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_addAllWellSampleSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Image_removeWellSample : public Callback_Image_removeWellSample_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Image_removeWellSample(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Image_removeWellSamplePtr
newCallback_Image_removeWellSample(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_removeWellSample<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_removeWellSamplePtr
newCallback_Image_removeWellSample(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_removeWellSample<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Image_removeWellSamplePtr
newCallback_Image_removeWellSample(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_removeWellSample<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_removeWellSamplePtr
newCallback_Image_removeWellSample(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_removeWellSample<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_removeWellSample : public Callback_Image_removeWellSample_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Image_removeWellSample(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Image_removeWellSamplePtr
newCallback_Image_removeWellSample(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_removeWellSample<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_removeWellSamplePtr
newCallback_Image_removeWellSample(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_removeWellSample<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Image_removeWellSamplePtr
newCallback_Image_removeWellSample(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_removeWellSample<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_removeWellSamplePtr
newCallback_Image_removeWellSample(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_removeWellSample<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Image_removeAllWellSampleSet : public Callback_Image_removeAllWellSampleSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Image_removeAllWellSampleSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Image_removeAllWellSampleSetPtr
newCallback_Image_removeAllWellSampleSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_removeAllWellSampleSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_removeAllWellSampleSetPtr
newCallback_Image_removeAllWellSampleSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_removeAllWellSampleSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Image_removeAllWellSampleSetPtr
newCallback_Image_removeAllWellSampleSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_removeAllWellSampleSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_removeAllWellSampleSetPtr
newCallback_Image_removeAllWellSampleSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_removeAllWellSampleSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_removeAllWellSampleSet : public Callback_Image_removeAllWellSampleSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Image_removeAllWellSampleSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Image_removeAllWellSampleSetPtr
newCallback_Image_removeAllWellSampleSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_removeAllWellSampleSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_removeAllWellSampleSetPtr
newCallback_Image_removeAllWellSampleSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_removeAllWellSampleSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Image_removeAllWellSampleSetPtr
newCallback_Image_removeAllWellSampleSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_removeAllWellSampleSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_removeAllWellSampleSetPtr
newCallback_Image_removeAllWellSampleSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_removeAllWellSampleSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Image_clearWellSamples : public Callback_Image_clearWellSamples_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Image_clearWellSamples(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Image_clearWellSamplesPtr
newCallback_Image_clearWellSamples(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_clearWellSamples<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_clearWellSamplesPtr
newCallback_Image_clearWellSamples(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_clearWellSamples<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Image_clearWellSamplesPtr
newCallback_Image_clearWellSamples(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_clearWellSamples<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_clearWellSamplesPtr
newCallback_Image_clearWellSamples(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_clearWellSamples<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_clearWellSamples : public Callback_Image_clearWellSamples_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Image_clearWellSamples(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Image_clearWellSamplesPtr
newCallback_Image_clearWellSamples(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_clearWellSamples<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_clearWellSamplesPtr
newCallback_Image_clearWellSamples(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_clearWellSamples<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Image_clearWellSamplesPtr
newCallback_Image_clearWellSamples(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_clearWellSamples<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_clearWellSamplesPtr
newCallback_Image_clearWellSamples(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_clearWellSamples<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Image_reloadWellSamples : public Callback_Image_reloadWellSamples_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Image_reloadWellSamples(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Image_reloadWellSamplesPtr
newCallback_Image_reloadWellSamples(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_reloadWellSamples<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_reloadWellSamplesPtr
newCallback_Image_reloadWellSamples(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_reloadWellSamples<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Image_reloadWellSamplesPtr
newCallback_Image_reloadWellSamples(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_reloadWellSamples<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_reloadWellSamplesPtr
newCallback_Image_reloadWellSamples(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_reloadWellSamples<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_reloadWellSamples : public Callback_Image_reloadWellSamples_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Image_reloadWellSamples(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Image_reloadWellSamplesPtr
newCallback_Image_reloadWellSamples(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_reloadWellSamples<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_reloadWellSamplesPtr
newCallback_Image_reloadWellSamples(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_reloadWellSamples<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Image_reloadWellSamplesPtr
newCallback_Image_reloadWellSamples(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_reloadWellSamples<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_reloadWellSamplesPtr
newCallback_Image_reloadWellSamples(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_reloadWellSamples<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Image_unloadRois : public Callback_Image_unloadRois_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Image_unloadRois(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Image_unloadRoisPtr
newCallback_Image_unloadRois(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_unloadRois<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_unloadRoisPtr
newCallback_Image_unloadRois(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_unloadRois<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Image_unloadRoisPtr
newCallback_Image_unloadRois(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_unloadRois<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_unloadRoisPtr
newCallback_Image_unloadRois(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_unloadRois<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_unloadRois : public Callback_Image_unloadRois_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Image_unloadRois(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Image_unloadRoisPtr
newCallback_Image_unloadRois(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_unloadRois<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_unloadRoisPtr
newCallback_Image_unloadRois(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_unloadRois<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Image_unloadRoisPtr
newCallback_Image_unloadRois(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_unloadRois<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_unloadRoisPtr
newCallback_Image_unloadRois(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_unloadRois<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Image_sizeOfRois : public Callback_Image_sizeOfRois_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Image_sizeOfRois(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfRois(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Image_sizeOfRoisPtr
newCallback_Image_sizeOfRois(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_sizeOfRois<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_sizeOfRoisPtr
newCallback_Image_sizeOfRois(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_sizeOfRois<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_sizeOfRois : public Callback_Image_sizeOfRois_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Image_sizeOfRois(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfRois(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Image_sizeOfRoisPtr
newCallback_Image_sizeOfRois(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_sizeOfRois<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_sizeOfRoisPtr
newCallback_Image_sizeOfRois(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_sizeOfRois<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Image_copyRois : public Callback_Image_copyRois_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::ImageRoisSeq&);

    CallbackNC_Image_copyRois(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::omero::model::ImageRoisSeq __ret;
        try
        {
            __ret = __proxy->end_copyRois(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Image_copyRoisPtr
newCallback_Image_copyRois(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ImageRoisSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_copyRois<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_copyRoisPtr
newCallback_Image_copyRois(T* instance, void (T::*cb)(const ::omero::model::ImageRoisSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_copyRois<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_copyRois : public Callback_Image_copyRois_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::ImageRoisSeq&, const CT&);

    Callback_Image_copyRois(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::omero::model::ImageRoisSeq __ret;
        try
        {
            __ret = __proxy->end_copyRois(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Image_copyRoisPtr
newCallback_Image_copyRois(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ImageRoisSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_copyRois<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_copyRoisPtr
newCallback_Image_copyRois(T* instance, void (T::*cb)(const ::omero::model::ImageRoisSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_copyRois<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Image_addRoi : public Callback_Image_addRoi_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Image_addRoi(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Image_addRoiPtr
newCallback_Image_addRoi(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_addRoi<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_addRoiPtr
newCallback_Image_addRoi(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_addRoi<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Image_addRoiPtr
newCallback_Image_addRoi(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_addRoi<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_addRoiPtr
newCallback_Image_addRoi(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_addRoi<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_addRoi : public Callback_Image_addRoi_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Image_addRoi(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Image_addRoiPtr
newCallback_Image_addRoi(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_addRoi<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_addRoiPtr
newCallback_Image_addRoi(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_addRoi<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Image_addRoiPtr
newCallback_Image_addRoi(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_addRoi<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_addRoiPtr
newCallback_Image_addRoi(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_addRoi<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Image_addAllRoiSet : public Callback_Image_addAllRoiSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Image_addAllRoiSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Image_addAllRoiSetPtr
newCallback_Image_addAllRoiSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_addAllRoiSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_addAllRoiSetPtr
newCallback_Image_addAllRoiSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_addAllRoiSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Image_addAllRoiSetPtr
newCallback_Image_addAllRoiSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_addAllRoiSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_addAllRoiSetPtr
newCallback_Image_addAllRoiSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_addAllRoiSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_addAllRoiSet : public Callback_Image_addAllRoiSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Image_addAllRoiSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Image_addAllRoiSetPtr
newCallback_Image_addAllRoiSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_addAllRoiSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_addAllRoiSetPtr
newCallback_Image_addAllRoiSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_addAllRoiSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Image_addAllRoiSetPtr
newCallback_Image_addAllRoiSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_addAllRoiSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_addAllRoiSetPtr
newCallback_Image_addAllRoiSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_addAllRoiSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Image_removeRoi : public Callback_Image_removeRoi_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Image_removeRoi(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Image_removeRoiPtr
newCallback_Image_removeRoi(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_removeRoi<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_removeRoiPtr
newCallback_Image_removeRoi(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_removeRoi<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Image_removeRoiPtr
newCallback_Image_removeRoi(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_removeRoi<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_removeRoiPtr
newCallback_Image_removeRoi(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_removeRoi<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_removeRoi : public Callback_Image_removeRoi_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Image_removeRoi(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Image_removeRoiPtr
newCallback_Image_removeRoi(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_removeRoi<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_removeRoiPtr
newCallback_Image_removeRoi(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_removeRoi<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Image_removeRoiPtr
newCallback_Image_removeRoi(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_removeRoi<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_removeRoiPtr
newCallback_Image_removeRoi(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_removeRoi<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Image_removeAllRoiSet : public Callback_Image_removeAllRoiSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Image_removeAllRoiSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Image_removeAllRoiSetPtr
newCallback_Image_removeAllRoiSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_removeAllRoiSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_removeAllRoiSetPtr
newCallback_Image_removeAllRoiSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_removeAllRoiSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Image_removeAllRoiSetPtr
newCallback_Image_removeAllRoiSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_removeAllRoiSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_removeAllRoiSetPtr
newCallback_Image_removeAllRoiSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_removeAllRoiSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_removeAllRoiSet : public Callback_Image_removeAllRoiSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Image_removeAllRoiSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Image_removeAllRoiSetPtr
newCallback_Image_removeAllRoiSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_removeAllRoiSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_removeAllRoiSetPtr
newCallback_Image_removeAllRoiSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_removeAllRoiSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Image_removeAllRoiSetPtr
newCallback_Image_removeAllRoiSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_removeAllRoiSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_removeAllRoiSetPtr
newCallback_Image_removeAllRoiSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_removeAllRoiSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Image_clearRois : public Callback_Image_clearRois_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Image_clearRois(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Image_clearRoisPtr
newCallback_Image_clearRois(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_clearRois<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_clearRoisPtr
newCallback_Image_clearRois(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_clearRois<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Image_clearRoisPtr
newCallback_Image_clearRois(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_clearRois<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_clearRoisPtr
newCallback_Image_clearRois(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_clearRois<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_clearRois : public Callback_Image_clearRois_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Image_clearRois(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Image_clearRoisPtr
newCallback_Image_clearRois(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_clearRois<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_clearRoisPtr
newCallback_Image_clearRois(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_clearRois<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Image_clearRoisPtr
newCallback_Image_clearRois(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_clearRois<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_clearRoisPtr
newCallback_Image_clearRois(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_clearRois<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Image_reloadRois : public Callback_Image_reloadRois_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Image_reloadRois(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Image_reloadRoisPtr
newCallback_Image_reloadRois(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_reloadRois<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_reloadRoisPtr
newCallback_Image_reloadRois(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_reloadRois<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Image_reloadRoisPtr
newCallback_Image_reloadRois(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_reloadRois<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_reloadRoisPtr
newCallback_Image_reloadRois(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_reloadRois<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_reloadRois : public Callback_Image_reloadRois_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Image_reloadRois(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Image_reloadRoisPtr
newCallback_Image_reloadRois(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_reloadRois<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_reloadRoisPtr
newCallback_Image_reloadRois(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_reloadRois<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Image_reloadRoisPtr
newCallback_Image_reloadRois(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_reloadRois<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_reloadRoisPtr
newCallback_Image_reloadRois(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_reloadRois<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Image_unloadDatasetLinks : public Callback_Image_unloadDatasetLinks_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Image_unloadDatasetLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Image_unloadDatasetLinksPtr
newCallback_Image_unloadDatasetLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_unloadDatasetLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_unloadDatasetLinksPtr
newCallback_Image_unloadDatasetLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_unloadDatasetLinks<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Image_unloadDatasetLinksPtr
newCallback_Image_unloadDatasetLinks(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_unloadDatasetLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_unloadDatasetLinksPtr
newCallback_Image_unloadDatasetLinks(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_unloadDatasetLinks<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_unloadDatasetLinks : public Callback_Image_unloadDatasetLinks_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Image_unloadDatasetLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Image_unloadDatasetLinksPtr
newCallback_Image_unloadDatasetLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_unloadDatasetLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_unloadDatasetLinksPtr
newCallback_Image_unloadDatasetLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_unloadDatasetLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Image_unloadDatasetLinksPtr
newCallback_Image_unloadDatasetLinks(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_unloadDatasetLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_unloadDatasetLinksPtr
newCallback_Image_unloadDatasetLinks(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_unloadDatasetLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Image_sizeOfDatasetLinks : public Callback_Image_sizeOfDatasetLinks_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Image_sizeOfDatasetLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfDatasetLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Image_sizeOfDatasetLinksPtr
newCallback_Image_sizeOfDatasetLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_sizeOfDatasetLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_sizeOfDatasetLinksPtr
newCallback_Image_sizeOfDatasetLinks(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_sizeOfDatasetLinks<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_sizeOfDatasetLinks : public Callback_Image_sizeOfDatasetLinks_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Image_sizeOfDatasetLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfDatasetLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Image_sizeOfDatasetLinksPtr
newCallback_Image_sizeOfDatasetLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_sizeOfDatasetLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_sizeOfDatasetLinksPtr
newCallback_Image_sizeOfDatasetLinks(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_sizeOfDatasetLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Image_copyDatasetLinks : public Callback_Image_copyDatasetLinks_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::ImageDatasetLinksSeq&);

    CallbackNC_Image_copyDatasetLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::omero::model::ImageDatasetLinksSeq __ret;
        try
        {
            __ret = __proxy->end_copyDatasetLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Image_copyDatasetLinksPtr
newCallback_Image_copyDatasetLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ImageDatasetLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_copyDatasetLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_copyDatasetLinksPtr
newCallback_Image_copyDatasetLinks(T* instance, void (T::*cb)(const ::omero::model::ImageDatasetLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_copyDatasetLinks<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_copyDatasetLinks : public Callback_Image_copyDatasetLinks_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::ImageDatasetLinksSeq&, const CT&);

    Callback_Image_copyDatasetLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::omero::model::ImageDatasetLinksSeq __ret;
        try
        {
            __ret = __proxy->end_copyDatasetLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Image_copyDatasetLinksPtr
newCallback_Image_copyDatasetLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ImageDatasetLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_copyDatasetLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_copyDatasetLinksPtr
newCallback_Image_copyDatasetLinks(T* instance, void (T::*cb)(const ::omero::model::ImageDatasetLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_copyDatasetLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Image_addDatasetImageLink : public Callback_Image_addDatasetImageLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Image_addDatasetImageLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Image_addDatasetImageLinkPtr
newCallback_Image_addDatasetImageLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_addDatasetImageLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_addDatasetImageLinkPtr
newCallback_Image_addDatasetImageLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_addDatasetImageLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Image_addDatasetImageLinkPtr
newCallback_Image_addDatasetImageLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_addDatasetImageLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_addDatasetImageLinkPtr
newCallback_Image_addDatasetImageLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_addDatasetImageLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_addDatasetImageLink : public Callback_Image_addDatasetImageLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Image_addDatasetImageLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Image_addDatasetImageLinkPtr
newCallback_Image_addDatasetImageLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_addDatasetImageLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_addDatasetImageLinkPtr
newCallback_Image_addDatasetImageLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_addDatasetImageLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Image_addDatasetImageLinkPtr
newCallback_Image_addDatasetImageLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_addDatasetImageLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_addDatasetImageLinkPtr
newCallback_Image_addDatasetImageLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_addDatasetImageLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Image_addAllDatasetImageLinkSet : public Callback_Image_addAllDatasetImageLinkSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Image_addAllDatasetImageLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Image_addAllDatasetImageLinkSetPtr
newCallback_Image_addAllDatasetImageLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_addAllDatasetImageLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_addAllDatasetImageLinkSetPtr
newCallback_Image_addAllDatasetImageLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_addAllDatasetImageLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Image_addAllDatasetImageLinkSetPtr
newCallback_Image_addAllDatasetImageLinkSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_addAllDatasetImageLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_addAllDatasetImageLinkSetPtr
newCallback_Image_addAllDatasetImageLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_addAllDatasetImageLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_addAllDatasetImageLinkSet : public Callback_Image_addAllDatasetImageLinkSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Image_addAllDatasetImageLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Image_addAllDatasetImageLinkSetPtr
newCallback_Image_addAllDatasetImageLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_addAllDatasetImageLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_addAllDatasetImageLinkSetPtr
newCallback_Image_addAllDatasetImageLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_addAllDatasetImageLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Image_addAllDatasetImageLinkSetPtr
newCallback_Image_addAllDatasetImageLinkSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_addAllDatasetImageLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_addAllDatasetImageLinkSetPtr
newCallback_Image_addAllDatasetImageLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_addAllDatasetImageLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Image_removeDatasetImageLink : public Callback_Image_removeDatasetImageLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Image_removeDatasetImageLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Image_removeDatasetImageLinkPtr
newCallback_Image_removeDatasetImageLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_removeDatasetImageLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_removeDatasetImageLinkPtr
newCallback_Image_removeDatasetImageLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_removeDatasetImageLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Image_removeDatasetImageLinkPtr
newCallback_Image_removeDatasetImageLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_removeDatasetImageLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_removeDatasetImageLinkPtr
newCallback_Image_removeDatasetImageLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_removeDatasetImageLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_removeDatasetImageLink : public Callback_Image_removeDatasetImageLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Image_removeDatasetImageLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Image_removeDatasetImageLinkPtr
newCallback_Image_removeDatasetImageLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_removeDatasetImageLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_removeDatasetImageLinkPtr
newCallback_Image_removeDatasetImageLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_removeDatasetImageLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Image_removeDatasetImageLinkPtr
newCallback_Image_removeDatasetImageLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_removeDatasetImageLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_removeDatasetImageLinkPtr
newCallback_Image_removeDatasetImageLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_removeDatasetImageLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Image_removeAllDatasetImageLinkSet : public Callback_Image_removeAllDatasetImageLinkSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Image_removeAllDatasetImageLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Image_removeAllDatasetImageLinkSetPtr
newCallback_Image_removeAllDatasetImageLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_removeAllDatasetImageLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_removeAllDatasetImageLinkSetPtr
newCallback_Image_removeAllDatasetImageLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_removeAllDatasetImageLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Image_removeAllDatasetImageLinkSetPtr
newCallback_Image_removeAllDatasetImageLinkSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_removeAllDatasetImageLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_removeAllDatasetImageLinkSetPtr
newCallback_Image_removeAllDatasetImageLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_removeAllDatasetImageLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_removeAllDatasetImageLinkSet : public Callback_Image_removeAllDatasetImageLinkSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Image_removeAllDatasetImageLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Image_removeAllDatasetImageLinkSetPtr
newCallback_Image_removeAllDatasetImageLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_removeAllDatasetImageLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_removeAllDatasetImageLinkSetPtr
newCallback_Image_removeAllDatasetImageLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_removeAllDatasetImageLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Image_removeAllDatasetImageLinkSetPtr
newCallback_Image_removeAllDatasetImageLinkSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_removeAllDatasetImageLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_removeAllDatasetImageLinkSetPtr
newCallback_Image_removeAllDatasetImageLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_removeAllDatasetImageLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Image_clearDatasetLinks : public Callback_Image_clearDatasetLinks_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Image_clearDatasetLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Image_clearDatasetLinksPtr
newCallback_Image_clearDatasetLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_clearDatasetLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_clearDatasetLinksPtr
newCallback_Image_clearDatasetLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_clearDatasetLinks<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Image_clearDatasetLinksPtr
newCallback_Image_clearDatasetLinks(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_clearDatasetLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_clearDatasetLinksPtr
newCallback_Image_clearDatasetLinks(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_clearDatasetLinks<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_clearDatasetLinks : public Callback_Image_clearDatasetLinks_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Image_clearDatasetLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Image_clearDatasetLinksPtr
newCallback_Image_clearDatasetLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_clearDatasetLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_clearDatasetLinksPtr
newCallback_Image_clearDatasetLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_clearDatasetLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Image_clearDatasetLinksPtr
newCallback_Image_clearDatasetLinks(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_clearDatasetLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_clearDatasetLinksPtr
newCallback_Image_clearDatasetLinks(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_clearDatasetLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Image_reloadDatasetLinks : public Callback_Image_reloadDatasetLinks_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Image_reloadDatasetLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Image_reloadDatasetLinksPtr
newCallback_Image_reloadDatasetLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_reloadDatasetLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_reloadDatasetLinksPtr
newCallback_Image_reloadDatasetLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_reloadDatasetLinks<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Image_reloadDatasetLinksPtr
newCallback_Image_reloadDatasetLinks(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_reloadDatasetLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_reloadDatasetLinksPtr
newCallback_Image_reloadDatasetLinks(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_reloadDatasetLinks<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_reloadDatasetLinks : public Callback_Image_reloadDatasetLinks_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Image_reloadDatasetLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Image_reloadDatasetLinksPtr
newCallback_Image_reloadDatasetLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_reloadDatasetLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_reloadDatasetLinksPtr
newCallback_Image_reloadDatasetLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_reloadDatasetLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Image_reloadDatasetLinksPtr
newCallback_Image_reloadDatasetLinks(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_reloadDatasetLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_reloadDatasetLinksPtr
newCallback_Image_reloadDatasetLinks(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_reloadDatasetLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Image_getDatasetLinksCountPerOwner : public Callback_Image_getDatasetLinksCountPerOwner_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::sys::CountMap&);

    CallbackNC_Image_getDatasetLinksCountPerOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::omero::sys::CountMap __ret;
        try
        {
            __ret = __proxy->end_getDatasetLinksCountPerOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Image_getDatasetLinksCountPerOwnerPtr
newCallback_Image_getDatasetLinksCountPerOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::CountMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_getDatasetLinksCountPerOwner<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_getDatasetLinksCountPerOwnerPtr
newCallback_Image_getDatasetLinksCountPerOwner(T* instance, void (T::*cb)(const ::omero::sys::CountMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_getDatasetLinksCountPerOwner<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_getDatasetLinksCountPerOwner : public Callback_Image_getDatasetLinksCountPerOwner_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::sys::CountMap&, const CT&);

    Callback_Image_getDatasetLinksCountPerOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::omero::sys::CountMap __ret;
        try
        {
            __ret = __proxy->end_getDatasetLinksCountPerOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Image_getDatasetLinksCountPerOwnerPtr
newCallback_Image_getDatasetLinksCountPerOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::CountMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_getDatasetLinksCountPerOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_getDatasetLinksCountPerOwnerPtr
newCallback_Image_getDatasetLinksCountPerOwner(T* instance, void (T::*cb)(const ::omero::sys::CountMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_getDatasetLinksCountPerOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Image_linkDataset : public Callback_Image_linkDataset_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::DatasetImageLinkPtr&);

    CallbackNC_Image_linkDataset(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::omero::model::DatasetImageLinkPtr __ret;
        try
        {
            __ret = __proxy->end_linkDataset(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Image_linkDatasetPtr
newCallback_Image_linkDataset(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::DatasetImageLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_linkDataset<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_linkDatasetPtr
newCallback_Image_linkDataset(T* instance, void (T::*cb)(const ::omero::model::DatasetImageLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_linkDataset<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_linkDataset : public Callback_Image_linkDataset_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::DatasetImageLinkPtr&, const CT&);

    Callback_Image_linkDataset(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::omero::model::DatasetImageLinkPtr __ret;
        try
        {
            __ret = __proxy->end_linkDataset(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Image_linkDatasetPtr
newCallback_Image_linkDataset(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::DatasetImageLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_linkDataset<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_linkDatasetPtr
newCallback_Image_linkDataset(T* instance, void (T::*cb)(const ::omero::model::DatasetImageLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_linkDataset<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Image_addDatasetImageLinkToBoth : public Callback_Image_addDatasetImageLinkToBoth_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Image_addDatasetImageLinkToBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Image_addDatasetImageLinkToBothPtr
newCallback_Image_addDatasetImageLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_addDatasetImageLinkToBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_addDatasetImageLinkToBothPtr
newCallback_Image_addDatasetImageLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_addDatasetImageLinkToBoth<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Image_addDatasetImageLinkToBothPtr
newCallback_Image_addDatasetImageLinkToBoth(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_addDatasetImageLinkToBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_addDatasetImageLinkToBothPtr
newCallback_Image_addDatasetImageLinkToBoth(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_addDatasetImageLinkToBoth<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_addDatasetImageLinkToBoth : public Callback_Image_addDatasetImageLinkToBoth_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Image_addDatasetImageLinkToBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Image_addDatasetImageLinkToBothPtr
newCallback_Image_addDatasetImageLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_addDatasetImageLinkToBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_addDatasetImageLinkToBothPtr
newCallback_Image_addDatasetImageLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_addDatasetImageLinkToBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Image_addDatasetImageLinkToBothPtr
newCallback_Image_addDatasetImageLinkToBoth(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_addDatasetImageLinkToBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_addDatasetImageLinkToBothPtr
newCallback_Image_addDatasetImageLinkToBoth(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_addDatasetImageLinkToBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Image_findDatasetImageLink : public Callback_Image_findDatasetImageLink_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::ImageDatasetLinksSeq&);

    CallbackNC_Image_findDatasetImageLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::omero::model::ImageDatasetLinksSeq __ret;
        try
        {
            __ret = __proxy->end_findDatasetImageLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Image_findDatasetImageLinkPtr
newCallback_Image_findDatasetImageLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ImageDatasetLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_findDatasetImageLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_findDatasetImageLinkPtr
newCallback_Image_findDatasetImageLink(T* instance, void (T::*cb)(const ::omero::model::ImageDatasetLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_findDatasetImageLink<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_findDatasetImageLink : public Callback_Image_findDatasetImageLink_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::ImageDatasetLinksSeq&, const CT&);

    Callback_Image_findDatasetImageLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::omero::model::ImageDatasetLinksSeq __ret;
        try
        {
            __ret = __proxy->end_findDatasetImageLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Image_findDatasetImageLinkPtr
newCallback_Image_findDatasetImageLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ImageDatasetLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_findDatasetImageLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_findDatasetImageLinkPtr
newCallback_Image_findDatasetImageLink(T* instance, void (T::*cb)(const ::omero::model::ImageDatasetLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_findDatasetImageLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Image_unlinkDataset : public Callback_Image_unlinkDataset_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Image_unlinkDataset(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Image_unlinkDatasetPtr
newCallback_Image_unlinkDataset(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_unlinkDataset<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_unlinkDatasetPtr
newCallback_Image_unlinkDataset(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_unlinkDataset<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Image_unlinkDatasetPtr
newCallback_Image_unlinkDataset(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_unlinkDataset<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_unlinkDatasetPtr
newCallback_Image_unlinkDataset(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_unlinkDataset<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_unlinkDataset : public Callback_Image_unlinkDataset_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Image_unlinkDataset(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Image_unlinkDatasetPtr
newCallback_Image_unlinkDataset(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_unlinkDataset<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_unlinkDatasetPtr
newCallback_Image_unlinkDataset(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_unlinkDataset<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Image_unlinkDatasetPtr
newCallback_Image_unlinkDataset(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_unlinkDataset<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_unlinkDatasetPtr
newCallback_Image_unlinkDataset(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_unlinkDataset<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Image_removeDatasetImageLinkFromBoth : public Callback_Image_removeDatasetImageLinkFromBoth_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Image_removeDatasetImageLinkFromBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Image_removeDatasetImageLinkFromBothPtr
newCallback_Image_removeDatasetImageLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_removeDatasetImageLinkFromBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_removeDatasetImageLinkFromBothPtr
newCallback_Image_removeDatasetImageLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_removeDatasetImageLinkFromBoth<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Image_removeDatasetImageLinkFromBothPtr
newCallback_Image_removeDatasetImageLinkFromBoth(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_removeDatasetImageLinkFromBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_removeDatasetImageLinkFromBothPtr
newCallback_Image_removeDatasetImageLinkFromBoth(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_removeDatasetImageLinkFromBoth<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_removeDatasetImageLinkFromBoth : public Callback_Image_removeDatasetImageLinkFromBoth_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Image_removeDatasetImageLinkFromBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Image_removeDatasetImageLinkFromBothPtr
newCallback_Image_removeDatasetImageLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_removeDatasetImageLinkFromBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_removeDatasetImageLinkFromBothPtr
newCallback_Image_removeDatasetImageLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_removeDatasetImageLinkFromBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Image_removeDatasetImageLinkFromBothPtr
newCallback_Image_removeDatasetImageLinkFromBoth(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_removeDatasetImageLinkFromBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_removeDatasetImageLinkFromBothPtr
newCallback_Image_removeDatasetImageLinkFromBoth(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_removeDatasetImageLinkFromBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Image_linkedDatasetList : public Callback_Image_linkedDatasetList_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::ImageLinkedDatasetSeq&);

    CallbackNC_Image_linkedDatasetList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::omero::model::ImageLinkedDatasetSeq __ret;
        try
        {
            __ret = __proxy->end_linkedDatasetList(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Image_linkedDatasetListPtr
newCallback_Image_linkedDatasetList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ImageLinkedDatasetSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_linkedDatasetList<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_linkedDatasetListPtr
newCallback_Image_linkedDatasetList(T* instance, void (T::*cb)(const ::omero::model::ImageLinkedDatasetSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_linkedDatasetList<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_linkedDatasetList : public Callback_Image_linkedDatasetList_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::ImageLinkedDatasetSeq&, const CT&);

    Callback_Image_linkedDatasetList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::omero::model::ImageLinkedDatasetSeq __ret;
        try
        {
            __ret = __proxy->end_linkedDatasetList(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Image_linkedDatasetListPtr
newCallback_Image_linkedDatasetList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ImageLinkedDatasetSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_linkedDatasetList<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_linkedDatasetListPtr
newCallback_Image_linkedDatasetList(T* instance, void (T::*cb)(const ::omero::model::ImageLinkedDatasetSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_linkedDatasetList<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Image_getFileset : public Callback_Image_getFileset_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::FilesetPtr&);

    CallbackNC_Image_getFileset(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilesetPtr __ret;
        try
        {
            __ret = __proxy->end_getFileset(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Image_getFilesetPtr
newCallback_Image_getFileset(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilesetPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_getFileset<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_getFilesetPtr
newCallback_Image_getFileset(T* instance, void (T::*cb)(const ::omero::model::FilesetPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_getFileset<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_getFileset : public Callback_Image_getFileset_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::FilesetPtr&, const CT&);

    Callback_Image_getFileset(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilesetPtr __ret;
        try
        {
            __ret = __proxy->end_getFileset(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Image_getFilesetPtr
newCallback_Image_getFileset(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilesetPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_getFileset<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_getFilesetPtr
newCallback_Image_getFileset(T* instance, void (T::*cb)(const ::omero::model::FilesetPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_getFileset<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Image_setFileset : public Callback_Image_setFileset_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Image_setFileset(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Image_setFilesetPtr
newCallback_Image_setFileset(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_setFileset<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_setFilesetPtr
newCallback_Image_setFileset(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_setFileset<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Image_setFilesetPtr
newCallback_Image_setFileset(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_setFileset<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_setFilesetPtr
newCallback_Image_setFileset(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_setFileset<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_setFileset : public Callback_Image_setFileset_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Image_setFileset(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Image_setFilesetPtr
newCallback_Image_setFileset(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_setFileset<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_setFilesetPtr
newCallback_Image_setFileset(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_setFileset<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Image_setFilesetPtr
newCallback_Image_setFileset(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_setFileset<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_setFilesetPtr
newCallback_Image_setFileset(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_setFileset<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Image_unloadAnnotationLinks : public Callback_Image_unloadAnnotationLinks_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Image_unloadAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Image_unloadAnnotationLinksPtr
newCallback_Image_unloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_unloadAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_unloadAnnotationLinksPtr
newCallback_Image_unloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_unloadAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Image_unloadAnnotationLinksPtr
newCallback_Image_unloadAnnotationLinks(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_unloadAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_unloadAnnotationLinksPtr
newCallback_Image_unloadAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_unloadAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_unloadAnnotationLinks : public Callback_Image_unloadAnnotationLinks_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Image_unloadAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Image_unloadAnnotationLinksPtr
newCallback_Image_unloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_unloadAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_unloadAnnotationLinksPtr
newCallback_Image_unloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_unloadAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Image_unloadAnnotationLinksPtr
newCallback_Image_unloadAnnotationLinks(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_unloadAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_unloadAnnotationLinksPtr
newCallback_Image_unloadAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_unloadAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Image_sizeOfAnnotationLinks : public Callback_Image_sizeOfAnnotationLinks_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Image_sizeOfAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfAnnotationLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Image_sizeOfAnnotationLinksPtr
newCallback_Image_sizeOfAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_sizeOfAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_sizeOfAnnotationLinksPtr
newCallback_Image_sizeOfAnnotationLinks(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_sizeOfAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_sizeOfAnnotationLinks : public Callback_Image_sizeOfAnnotationLinks_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Image_sizeOfAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfAnnotationLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Image_sizeOfAnnotationLinksPtr
newCallback_Image_sizeOfAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_sizeOfAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_sizeOfAnnotationLinksPtr
newCallback_Image_sizeOfAnnotationLinks(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_sizeOfAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Image_copyAnnotationLinks : public Callback_Image_copyAnnotationLinks_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::ImageAnnotationLinksSeq&);

    CallbackNC_Image_copyAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::omero::model::ImageAnnotationLinksSeq __ret;
        try
        {
            __ret = __proxy->end_copyAnnotationLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Image_copyAnnotationLinksPtr
newCallback_Image_copyAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ImageAnnotationLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_copyAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_copyAnnotationLinksPtr
newCallback_Image_copyAnnotationLinks(T* instance, void (T::*cb)(const ::omero::model::ImageAnnotationLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_copyAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_copyAnnotationLinks : public Callback_Image_copyAnnotationLinks_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::ImageAnnotationLinksSeq&, const CT&);

    Callback_Image_copyAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::omero::model::ImageAnnotationLinksSeq __ret;
        try
        {
            __ret = __proxy->end_copyAnnotationLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Image_copyAnnotationLinksPtr
newCallback_Image_copyAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ImageAnnotationLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_copyAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_copyAnnotationLinksPtr
newCallback_Image_copyAnnotationLinks(T* instance, void (T::*cb)(const ::omero::model::ImageAnnotationLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_copyAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Image_addImageAnnotationLink : public Callback_Image_addImageAnnotationLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Image_addImageAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Image_addImageAnnotationLinkPtr
newCallback_Image_addImageAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_addImageAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_addImageAnnotationLinkPtr
newCallback_Image_addImageAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_addImageAnnotationLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Image_addImageAnnotationLinkPtr
newCallback_Image_addImageAnnotationLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_addImageAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_addImageAnnotationLinkPtr
newCallback_Image_addImageAnnotationLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_addImageAnnotationLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_addImageAnnotationLink : public Callback_Image_addImageAnnotationLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Image_addImageAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Image_addImageAnnotationLinkPtr
newCallback_Image_addImageAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_addImageAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_addImageAnnotationLinkPtr
newCallback_Image_addImageAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_addImageAnnotationLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Image_addImageAnnotationLinkPtr
newCallback_Image_addImageAnnotationLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_addImageAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_addImageAnnotationLinkPtr
newCallback_Image_addImageAnnotationLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_addImageAnnotationLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Image_addAllImageAnnotationLinkSet : public Callback_Image_addAllImageAnnotationLinkSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Image_addAllImageAnnotationLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Image_addAllImageAnnotationLinkSetPtr
newCallback_Image_addAllImageAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_addAllImageAnnotationLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_addAllImageAnnotationLinkSetPtr
newCallback_Image_addAllImageAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_addAllImageAnnotationLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Image_addAllImageAnnotationLinkSetPtr
newCallback_Image_addAllImageAnnotationLinkSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_addAllImageAnnotationLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_addAllImageAnnotationLinkSetPtr
newCallback_Image_addAllImageAnnotationLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_addAllImageAnnotationLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_addAllImageAnnotationLinkSet : public Callback_Image_addAllImageAnnotationLinkSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Image_addAllImageAnnotationLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Image_addAllImageAnnotationLinkSetPtr
newCallback_Image_addAllImageAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_addAllImageAnnotationLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_addAllImageAnnotationLinkSetPtr
newCallback_Image_addAllImageAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_addAllImageAnnotationLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Image_addAllImageAnnotationLinkSetPtr
newCallback_Image_addAllImageAnnotationLinkSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_addAllImageAnnotationLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_addAllImageAnnotationLinkSetPtr
newCallback_Image_addAllImageAnnotationLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_addAllImageAnnotationLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Image_removeImageAnnotationLink : public Callback_Image_removeImageAnnotationLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Image_removeImageAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Image_removeImageAnnotationLinkPtr
newCallback_Image_removeImageAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_removeImageAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_removeImageAnnotationLinkPtr
newCallback_Image_removeImageAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_removeImageAnnotationLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Image_removeImageAnnotationLinkPtr
newCallback_Image_removeImageAnnotationLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_removeImageAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_removeImageAnnotationLinkPtr
newCallback_Image_removeImageAnnotationLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_removeImageAnnotationLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_removeImageAnnotationLink : public Callback_Image_removeImageAnnotationLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Image_removeImageAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Image_removeImageAnnotationLinkPtr
newCallback_Image_removeImageAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_removeImageAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_removeImageAnnotationLinkPtr
newCallback_Image_removeImageAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_removeImageAnnotationLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Image_removeImageAnnotationLinkPtr
newCallback_Image_removeImageAnnotationLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_removeImageAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_removeImageAnnotationLinkPtr
newCallback_Image_removeImageAnnotationLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_removeImageAnnotationLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Image_removeAllImageAnnotationLinkSet : public Callback_Image_removeAllImageAnnotationLinkSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Image_removeAllImageAnnotationLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Image_removeAllImageAnnotationLinkSetPtr
newCallback_Image_removeAllImageAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_removeAllImageAnnotationLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_removeAllImageAnnotationLinkSetPtr
newCallback_Image_removeAllImageAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_removeAllImageAnnotationLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Image_removeAllImageAnnotationLinkSetPtr
newCallback_Image_removeAllImageAnnotationLinkSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_removeAllImageAnnotationLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_removeAllImageAnnotationLinkSetPtr
newCallback_Image_removeAllImageAnnotationLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_removeAllImageAnnotationLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_removeAllImageAnnotationLinkSet : public Callback_Image_removeAllImageAnnotationLinkSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Image_removeAllImageAnnotationLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Image_removeAllImageAnnotationLinkSetPtr
newCallback_Image_removeAllImageAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_removeAllImageAnnotationLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_removeAllImageAnnotationLinkSetPtr
newCallback_Image_removeAllImageAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_removeAllImageAnnotationLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Image_removeAllImageAnnotationLinkSetPtr
newCallback_Image_removeAllImageAnnotationLinkSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_removeAllImageAnnotationLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_removeAllImageAnnotationLinkSetPtr
newCallback_Image_removeAllImageAnnotationLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_removeAllImageAnnotationLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Image_clearAnnotationLinks : public Callback_Image_clearAnnotationLinks_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Image_clearAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Image_clearAnnotationLinksPtr
newCallback_Image_clearAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_clearAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_clearAnnotationLinksPtr
newCallback_Image_clearAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_clearAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Image_clearAnnotationLinksPtr
newCallback_Image_clearAnnotationLinks(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_clearAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_clearAnnotationLinksPtr
newCallback_Image_clearAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_clearAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_clearAnnotationLinks : public Callback_Image_clearAnnotationLinks_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Image_clearAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Image_clearAnnotationLinksPtr
newCallback_Image_clearAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_clearAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_clearAnnotationLinksPtr
newCallback_Image_clearAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_clearAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Image_clearAnnotationLinksPtr
newCallback_Image_clearAnnotationLinks(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_clearAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_clearAnnotationLinksPtr
newCallback_Image_clearAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_clearAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Image_reloadAnnotationLinks : public Callback_Image_reloadAnnotationLinks_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Image_reloadAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Image_reloadAnnotationLinksPtr
newCallback_Image_reloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_reloadAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_reloadAnnotationLinksPtr
newCallback_Image_reloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_reloadAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Image_reloadAnnotationLinksPtr
newCallback_Image_reloadAnnotationLinks(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_reloadAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_reloadAnnotationLinksPtr
newCallback_Image_reloadAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_reloadAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_reloadAnnotationLinks : public Callback_Image_reloadAnnotationLinks_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Image_reloadAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Image_reloadAnnotationLinksPtr
newCallback_Image_reloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_reloadAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_reloadAnnotationLinksPtr
newCallback_Image_reloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_reloadAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Image_reloadAnnotationLinksPtr
newCallback_Image_reloadAnnotationLinks(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_reloadAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_reloadAnnotationLinksPtr
newCallback_Image_reloadAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_reloadAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Image_getAnnotationLinksCountPerOwner : public Callback_Image_getAnnotationLinksCountPerOwner_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::sys::CountMap&);

    CallbackNC_Image_getAnnotationLinksCountPerOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::omero::sys::CountMap __ret;
        try
        {
            __ret = __proxy->end_getAnnotationLinksCountPerOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Image_getAnnotationLinksCountPerOwnerPtr
newCallback_Image_getAnnotationLinksCountPerOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::CountMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_getAnnotationLinksCountPerOwner<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_getAnnotationLinksCountPerOwnerPtr
newCallback_Image_getAnnotationLinksCountPerOwner(T* instance, void (T::*cb)(const ::omero::sys::CountMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_getAnnotationLinksCountPerOwner<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_getAnnotationLinksCountPerOwner : public Callback_Image_getAnnotationLinksCountPerOwner_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::sys::CountMap&, const CT&);

    Callback_Image_getAnnotationLinksCountPerOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::omero::sys::CountMap __ret;
        try
        {
            __ret = __proxy->end_getAnnotationLinksCountPerOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Image_getAnnotationLinksCountPerOwnerPtr
newCallback_Image_getAnnotationLinksCountPerOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::CountMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_getAnnotationLinksCountPerOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_getAnnotationLinksCountPerOwnerPtr
newCallback_Image_getAnnotationLinksCountPerOwner(T* instance, void (T::*cb)(const ::omero::sys::CountMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_getAnnotationLinksCountPerOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Image_linkAnnotation : public Callback_Image_linkAnnotation_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::ImageAnnotationLinkPtr&);

    CallbackNC_Image_linkAnnotation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::omero::model::ImageAnnotationLinkPtr __ret;
        try
        {
            __ret = __proxy->end_linkAnnotation(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Image_linkAnnotationPtr
newCallback_Image_linkAnnotation(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ImageAnnotationLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_linkAnnotation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_linkAnnotationPtr
newCallback_Image_linkAnnotation(T* instance, void (T::*cb)(const ::omero::model::ImageAnnotationLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_linkAnnotation<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_linkAnnotation : public Callback_Image_linkAnnotation_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::ImageAnnotationLinkPtr&, const CT&);

    Callback_Image_linkAnnotation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::omero::model::ImageAnnotationLinkPtr __ret;
        try
        {
            __ret = __proxy->end_linkAnnotation(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Image_linkAnnotationPtr
newCallback_Image_linkAnnotation(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ImageAnnotationLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_linkAnnotation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_linkAnnotationPtr
newCallback_Image_linkAnnotation(T* instance, void (T::*cb)(const ::omero::model::ImageAnnotationLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_linkAnnotation<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Image_addImageAnnotationLinkToBoth : public Callback_Image_addImageAnnotationLinkToBoth_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Image_addImageAnnotationLinkToBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Image_addImageAnnotationLinkToBothPtr
newCallback_Image_addImageAnnotationLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_addImageAnnotationLinkToBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_addImageAnnotationLinkToBothPtr
newCallback_Image_addImageAnnotationLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_addImageAnnotationLinkToBoth<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Image_addImageAnnotationLinkToBothPtr
newCallback_Image_addImageAnnotationLinkToBoth(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_addImageAnnotationLinkToBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_addImageAnnotationLinkToBothPtr
newCallback_Image_addImageAnnotationLinkToBoth(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_addImageAnnotationLinkToBoth<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_addImageAnnotationLinkToBoth : public Callback_Image_addImageAnnotationLinkToBoth_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Image_addImageAnnotationLinkToBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Image_addImageAnnotationLinkToBothPtr
newCallback_Image_addImageAnnotationLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_addImageAnnotationLinkToBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_addImageAnnotationLinkToBothPtr
newCallback_Image_addImageAnnotationLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_addImageAnnotationLinkToBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Image_addImageAnnotationLinkToBothPtr
newCallback_Image_addImageAnnotationLinkToBoth(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_addImageAnnotationLinkToBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_addImageAnnotationLinkToBothPtr
newCallback_Image_addImageAnnotationLinkToBoth(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_addImageAnnotationLinkToBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Image_findImageAnnotationLink : public Callback_Image_findImageAnnotationLink_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::ImageAnnotationLinksSeq&);

    CallbackNC_Image_findImageAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::omero::model::ImageAnnotationLinksSeq __ret;
        try
        {
            __ret = __proxy->end_findImageAnnotationLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Image_findImageAnnotationLinkPtr
newCallback_Image_findImageAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ImageAnnotationLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_findImageAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_findImageAnnotationLinkPtr
newCallback_Image_findImageAnnotationLink(T* instance, void (T::*cb)(const ::omero::model::ImageAnnotationLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_findImageAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_findImageAnnotationLink : public Callback_Image_findImageAnnotationLink_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::ImageAnnotationLinksSeq&, const CT&);

    Callback_Image_findImageAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::omero::model::ImageAnnotationLinksSeq __ret;
        try
        {
            __ret = __proxy->end_findImageAnnotationLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Image_findImageAnnotationLinkPtr
newCallback_Image_findImageAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ImageAnnotationLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_findImageAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_findImageAnnotationLinkPtr
newCallback_Image_findImageAnnotationLink(T* instance, void (T::*cb)(const ::omero::model::ImageAnnotationLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_findImageAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Image_unlinkAnnotation : public Callback_Image_unlinkAnnotation_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Image_unlinkAnnotation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Image_unlinkAnnotationPtr
newCallback_Image_unlinkAnnotation(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_unlinkAnnotation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_unlinkAnnotationPtr
newCallback_Image_unlinkAnnotation(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_unlinkAnnotation<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Image_unlinkAnnotationPtr
newCallback_Image_unlinkAnnotation(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_unlinkAnnotation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_unlinkAnnotationPtr
newCallback_Image_unlinkAnnotation(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_unlinkAnnotation<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_unlinkAnnotation : public Callback_Image_unlinkAnnotation_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Image_unlinkAnnotation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Image_unlinkAnnotationPtr
newCallback_Image_unlinkAnnotation(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_unlinkAnnotation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_unlinkAnnotationPtr
newCallback_Image_unlinkAnnotation(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_unlinkAnnotation<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Image_unlinkAnnotationPtr
newCallback_Image_unlinkAnnotation(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_unlinkAnnotation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_unlinkAnnotationPtr
newCallback_Image_unlinkAnnotation(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_unlinkAnnotation<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Image_removeImageAnnotationLinkFromBoth : public Callback_Image_removeImageAnnotationLinkFromBoth_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Image_removeImageAnnotationLinkFromBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Image_removeImageAnnotationLinkFromBothPtr
newCallback_Image_removeImageAnnotationLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_removeImageAnnotationLinkFromBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_removeImageAnnotationLinkFromBothPtr
newCallback_Image_removeImageAnnotationLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_removeImageAnnotationLinkFromBoth<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Image_removeImageAnnotationLinkFromBothPtr
newCallback_Image_removeImageAnnotationLinkFromBoth(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_removeImageAnnotationLinkFromBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_removeImageAnnotationLinkFromBothPtr
newCallback_Image_removeImageAnnotationLinkFromBoth(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_removeImageAnnotationLinkFromBoth<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_removeImageAnnotationLinkFromBoth : public Callback_Image_removeImageAnnotationLinkFromBoth_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Image_removeImageAnnotationLinkFromBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Image_removeImageAnnotationLinkFromBothPtr
newCallback_Image_removeImageAnnotationLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_removeImageAnnotationLinkFromBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_removeImageAnnotationLinkFromBothPtr
newCallback_Image_removeImageAnnotationLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_removeImageAnnotationLinkFromBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Image_removeImageAnnotationLinkFromBothPtr
newCallback_Image_removeImageAnnotationLinkFromBoth(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_removeImageAnnotationLinkFromBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_removeImageAnnotationLinkFromBothPtr
newCallback_Image_removeImageAnnotationLinkFromBoth(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_removeImageAnnotationLinkFromBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Image_linkedAnnotationList : public Callback_Image_linkedAnnotationList_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::ImageLinkedAnnotationSeq&);

    CallbackNC_Image_linkedAnnotationList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::omero::model::ImageLinkedAnnotationSeq __ret;
        try
        {
            __ret = __proxy->end_linkedAnnotationList(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Image_linkedAnnotationListPtr
newCallback_Image_linkedAnnotationList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ImageLinkedAnnotationSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_linkedAnnotationList<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_linkedAnnotationListPtr
newCallback_Image_linkedAnnotationList(T* instance, void (T::*cb)(const ::omero::model::ImageLinkedAnnotationSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_linkedAnnotationList<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_linkedAnnotationList : public Callback_Image_linkedAnnotationList_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::ImageLinkedAnnotationSeq&, const CT&);

    Callback_Image_linkedAnnotationList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::omero::model::ImageLinkedAnnotationSeq __ret;
        try
        {
            __ret = __proxy->end_linkedAnnotationList(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Image_linkedAnnotationListPtr
newCallback_Image_linkedAnnotationList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ImageLinkedAnnotationSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_linkedAnnotationList<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_linkedAnnotationListPtr
newCallback_Image_linkedAnnotationList(T* instance, void (T::*cb)(const ::omero::model::ImageLinkedAnnotationSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_linkedAnnotationList<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Image_getName : public Callback_Image_getName_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_Image_getName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getName(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Image_getNamePtr
newCallback_Image_getName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_getName<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_getNamePtr
newCallback_Image_getName(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_getName<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_getName : public Callback_Image_getName_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_Image_getName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getName(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Image_getNamePtr
newCallback_Image_getName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_getName<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_getNamePtr
newCallback_Image_getName(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_getName<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Image_setName : public Callback_Image_setName_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Image_setName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Image_setNamePtr
newCallback_Image_setName(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_setName<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_setNamePtr
newCallback_Image_setName(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_setName<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Image_setNamePtr
newCallback_Image_setName(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_setName<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_setNamePtr
newCallback_Image_setName(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_setName<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_setName : public Callback_Image_setName_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Image_setName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Image_setNamePtr
newCallback_Image_setName(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_setName<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_setNamePtr
newCallback_Image_setName(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_setName<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Image_setNamePtr
newCallback_Image_setName(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_setName<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_setNamePtr
newCallback_Image_setName(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_setName<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Image_getDescription : public Callback_Image_getDescription_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_Image_getDescription(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getDescription(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Image_getDescriptionPtr
newCallback_Image_getDescription(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_getDescription<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_getDescriptionPtr
newCallback_Image_getDescription(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_getDescription<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_getDescription : public Callback_Image_getDescription_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_Image_getDescription(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ImagePrx __proxy = ::omero::model::ImagePrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getDescription(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Image_getDescriptionPtr
newCallback_Image_getDescription(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_getDescription<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_getDescriptionPtr
newCallback_Image_getDescription(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_getDescription<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Image_setDescription : public Callback_Image_setDescription_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Image_setDescription(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Image_setDescriptionPtr
newCallback_Image_setDescription(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_setDescription<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_setDescriptionPtr
newCallback_Image_setDescription(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_setDescription<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Image_setDescriptionPtr
newCallback_Image_setDescription(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_setDescription<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Image_setDescriptionPtr
newCallback_Image_setDescription(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Image_setDescription<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Image_setDescription : public Callback_Image_setDescription_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Image_setDescription(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Image_setDescriptionPtr
newCallback_Image_setDescription(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_setDescription<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_setDescriptionPtr
newCallback_Image_setDescription(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_setDescription<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Image_setDescriptionPtr
newCallback_Image_setDescription(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_setDescription<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Image_setDescriptionPtr
newCallback_Image_setDescription(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Image_setDescription<T, CT>(instance, 0, excb, sentcb);
}

}

}

#endif
