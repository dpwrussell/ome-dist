// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `ExperimenterGroup.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_ExperimenterGroup_h__
#define __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_ExperimenterGroup_h__

#include <Ice/LocalObjectF.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/StreamF.h>
#include <omero/model/IObject.h>
#include <omero/RTypes.h>
#include <omero/System.h>
#include <omero/Collections.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace omero
{

namespace model
{

class GroupExperimenterMap;

class Experimenter;

class ExperimenterGroupAnnotationLink;

class Annotation;

class Details;

class ExperimenterGroup;

}

}

}

namespace omero
{

namespace model
{

class GroupExperimenterMap;
bool operator==(const GroupExperimenterMap&, const GroupExperimenterMap&);
bool operator<(const GroupExperimenterMap&, const GroupExperimenterMap&);

class Experimenter;
bool operator==(const Experimenter&, const Experimenter&);
bool operator<(const Experimenter&, const Experimenter&);

class ExperimenterGroupAnnotationLink;
bool operator==(const ExperimenterGroupAnnotationLink&, const ExperimenterGroupAnnotationLink&);
bool operator<(const ExperimenterGroupAnnotationLink&, const ExperimenterGroupAnnotationLink&);

class Annotation;
bool operator==(const Annotation&, const Annotation&);
bool operator<(const Annotation&, const Annotation&);

class Details;
bool operator==(const Details&, const Details&);
bool operator<(const Details&, const Details&);

class ExperimenterGroup;
bool operator==(const ExperimenterGroup&, const ExperimenterGroup&);
bool operator<(const ExperimenterGroup&, const ExperimenterGroup&);

}

}

namespace IceInternal
{

::Ice::Object* upCast(::omero::model::GroupExperimenterMap*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::GroupExperimenterMap*);

::Ice::Object* upCast(::omero::model::Experimenter*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Experimenter*);

::Ice::Object* upCast(::omero::model::ExperimenterGroupAnnotationLink*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::ExperimenterGroupAnnotationLink*);

::Ice::Object* upCast(::omero::model::Annotation*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Annotation*);

::Ice::Object* upCast(::omero::model::Details*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Details*);

::Ice::Object* upCast(::omero::model::ExperimenterGroup*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::ExperimenterGroup*);

}

namespace omero
{

namespace model
{

typedef ::IceInternal::Handle< ::omero::model::GroupExperimenterMap> GroupExperimenterMapPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::GroupExperimenterMap> GroupExperimenterMapPrx;

void __read(::IceInternal::BasicStream*, GroupExperimenterMapPrx&);
void __patch__GroupExperimenterMapPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::Experimenter> ExperimenterPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Experimenter> ExperimenterPrx;

void __read(::IceInternal::BasicStream*, ExperimenterPrx&);
void __patch__ExperimenterPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::ExperimenterGroupAnnotationLink> ExperimenterGroupAnnotationLinkPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::ExperimenterGroupAnnotationLink> ExperimenterGroupAnnotationLinkPrx;

void __read(::IceInternal::BasicStream*, ExperimenterGroupAnnotationLinkPrx&);
void __patch__ExperimenterGroupAnnotationLinkPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::Annotation> AnnotationPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Annotation> AnnotationPrx;

void __read(::IceInternal::BasicStream*, AnnotationPrx&);
void __patch__AnnotationPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::Details> DetailsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Details> DetailsPrx;

void __read(::IceInternal::BasicStream*, DetailsPrx&);
void __patch__DetailsPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::ExperimenterGroup> ExperimenterGroupPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::ExperimenterGroup> ExperimenterGroupPrx;

void __read(::IceInternal::BasicStream*, ExperimenterGroupPrx&);
void __patch__ExperimenterGroupPtr(void*, ::Ice::ObjectPtr&);

}

}

namespace omero
{

namespace model
{

typedef ::std::vector< ::omero::model::GroupExperimenterMapPtr> ExperimenterGroupGroupExperimenterMapSeq;
void __writeExperimenterGroupGroupExperimenterMapSeq(::IceInternal::BasicStream*, const ::omero::model::GroupExperimenterMapPtr*, const ::omero::model::GroupExperimenterMapPtr*);
void __readExperimenterGroupGroupExperimenterMapSeq(::IceInternal::BasicStream*, ExperimenterGroupGroupExperimenterMapSeq&);

typedef ::std::vector< ::omero::model::ExperimenterPtr> ExperimenterGroupLinkedExperimenterSeq;
void __writeExperimenterGroupLinkedExperimenterSeq(::IceInternal::BasicStream*, const ::omero::model::ExperimenterPtr*, const ::omero::model::ExperimenterPtr*);
void __readExperimenterGroupLinkedExperimenterSeq(::IceInternal::BasicStream*, ExperimenterGroupLinkedExperimenterSeq&);

typedef ::std::vector< ::omero::model::ExperimenterGroupAnnotationLinkPtr> ExperimenterGroupAnnotationLinksSeq;
void __writeExperimenterGroupAnnotationLinksSeq(::IceInternal::BasicStream*, const ::omero::model::ExperimenterGroupAnnotationLinkPtr*, const ::omero::model::ExperimenterGroupAnnotationLinkPtr*);
void __readExperimenterGroupAnnotationLinksSeq(::IceInternal::BasicStream*, ExperimenterGroupAnnotationLinksSeq&);

typedef ::std::vector< ::omero::model::AnnotationPtr> ExperimenterGroupLinkedAnnotationSeq;
void __writeExperimenterGroupLinkedAnnotationSeq(::IceInternal::BasicStream*, const ::omero::model::AnnotationPtr*, const ::omero::model::AnnotationPtr*);
void __readExperimenterGroupLinkedAnnotationSeq(::IceInternal::BasicStream*, ExperimenterGroupLinkedAnnotationSeq&);

}

}

namespace omero
{

namespace model
{

class Callback_ExperimenterGroup_getVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ExperimenterGroup_getVersion_Base> Callback_ExperimenterGroup_getVersionPtr;

class Callback_ExperimenterGroup_setVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ExperimenterGroup_setVersion_Base> Callback_ExperimenterGroup_setVersionPtr;

class Callback_ExperimenterGroup_getName_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ExperimenterGroup_getName_Base> Callback_ExperimenterGroup_getNamePtr;

class Callback_ExperimenterGroup_setName_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ExperimenterGroup_setName_Base> Callback_ExperimenterGroup_setNamePtr;

class Callback_ExperimenterGroup_unloadGroupExperimenterMap_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ExperimenterGroup_unloadGroupExperimenterMap_Base> Callback_ExperimenterGroup_unloadGroupExperimenterMapPtr;

class Callback_ExperimenterGroup_sizeOfGroupExperimenterMap_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ExperimenterGroup_sizeOfGroupExperimenterMap_Base> Callback_ExperimenterGroup_sizeOfGroupExperimenterMapPtr;

class Callback_ExperimenterGroup_copyGroupExperimenterMap_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ExperimenterGroup_copyGroupExperimenterMap_Base> Callback_ExperimenterGroup_copyGroupExperimenterMapPtr;

class Callback_ExperimenterGroup_addGroupExperimenterMap_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ExperimenterGroup_addGroupExperimenterMap_Base> Callback_ExperimenterGroup_addGroupExperimenterMapPtr;

class Callback_ExperimenterGroup_addAllGroupExperimenterMapSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ExperimenterGroup_addAllGroupExperimenterMapSet_Base> Callback_ExperimenterGroup_addAllGroupExperimenterMapSetPtr;

class Callback_ExperimenterGroup_removeGroupExperimenterMap_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ExperimenterGroup_removeGroupExperimenterMap_Base> Callback_ExperimenterGroup_removeGroupExperimenterMapPtr;

class Callback_ExperimenterGroup_removeAllGroupExperimenterMapSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ExperimenterGroup_removeAllGroupExperimenterMapSet_Base> Callback_ExperimenterGroup_removeAllGroupExperimenterMapSetPtr;

class Callback_ExperimenterGroup_clearGroupExperimenterMap_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ExperimenterGroup_clearGroupExperimenterMap_Base> Callback_ExperimenterGroup_clearGroupExperimenterMapPtr;

class Callback_ExperimenterGroup_reloadGroupExperimenterMap_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ExperimenterGroup_reloadGroupExperimenterMap_Base> Callback_ExperimenterGroup_reloadGroupExperimenterMapPtr;

class Callback_ExperimenterGroup_linkExperimenter_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ExperimenterGroup_linkExperimenter_Base> Callback_ExperimenterGroup_linkExperimenterPtr;

class Callback_ExperimenterGroup_addGroupExperimenterMapToBoth_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ExperimenterGroup_addGroupExperimenterMapToBoth_Base> Callback_ExperimenterGroup_addGroupExperimenterMapToBothPtr;

class Callback_ExperimenterGroup_findGroupExperimenterMap_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ExperimenterGroup_findGroupExperimenterMap_Base> Callback_ExperimenterGroup_findGroupExperimenterMapPtr;

class Callback_ExperimenterGroup_unlinkExperimenter_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ExperimenterGroup_unlinkExperimenter_Base> Callback_ExperimenterGroup_unlinkExperimenterPtr;

class Callback_ExperimenterGroup_removeGroupExperimenterMapFromBoth_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ExperimenterGroup_removeGroupExperimenterMapFromBoth_Base> Callback_ExperimenterGroup_removeGroupExperimenterMapFromBothPtr;

class Callback_ExperimenterGroup_linkedExperimenterList_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ExperimenterGroup_linkedExperimenterList_Base> Callback_ExperimenterGroup_linkedExperimenterListPtr;

class Callback_ExperimenterGroup_unloadAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ExperimenterGroup_unloadAnnotationLinks_Base> Callback_ExperimenterGroup_unloadAnnotationLinksPtr;

class Callback_ExperimenterGroup_sizeOfAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ExperimenterGroup_sizeOfAnnotationLinks_Base> Callback_ExperimenterGroup_sizeOfAnnotationLinksPtr;

class Callback_ExperimenterGroup_copyAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ExperimenterGroup_copyAnnotationLinks_Base> Callback_ExperimenterGroup_copyAnnotationLinksPtr;

class Callback_ExperimenterGroup_addExperimenterGroupAnnotationLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ExperimenterGroup_addExperimenterGroupAnnotationLink_Base> Callback_ExperimenterGroup_addExperimenterGroupAnnotationLinkPtr;

class Callback_ExperimenterGroup_addAllExperimenterGroupAnnotationLinkSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ExperimenterGroup_addAllExperimenterGroupAnnotationLinkSet_Base> Callback_ExperimenterGroup_addAllExperimenterGroupAnnotationLinkSetPtr;

class Callback_ExperimenterGroup_removeExperimenterGroupAnnotationLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ExperimenterGroup_removeExperimenterGroupAnnotationLink_Base> Callback_ExperimenterGroup_removeExperimenterGroupAnnotationLinkPtr;

class Callback_ExperimenterGroup_removeAllExperimenterGroupAnnotationLinkSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ExperimenterGroup_removeAllExperimenterGroupAnnotationLinkSet_Base> Callback_ExperimenterGroup_removeAllExperimenterGroupAnnotationLinkSetPtr;

class Callback_ExperimenterGroup_clearAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ExperimenterGroup_clearAnnotationLinks_Base> Callback_ExperimenterGroup_clearAnnotationLinksPtr;

class Callback_ExperimenterGroup_reloadAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ExperimenterGroup_reloadAnnotationLinks_Base> Callback_ExperimenterGroup_reloadAnnotationLinksPtr;

class Callback_ExperimenterGroup_getAnnotationLinksCountPerOwner_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ExperimenterGroup_getAnnotationLinksCountPerOwner_Base> Callback_ExperimenterGroup_getAnnotationLinksCountPerOwnerPtr;

class Callback_ExperimenterGroup_linkAnnotation_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ExperimenterGroup_linkAnnotation_Base> Callback_ExperimenterGroup_linkAnnotationPtr;

class Callback_ExperimenterGroup_addExperimenterGroupAnnotationLinkToBoth_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ExperimenterGroup_addExperimenterGroupAnnotationLinkToBoth_Base> Callback_ExperimenterGroup_addExperimenterGroupAnnotationLinkToBothPtr;

class Callback_ExperimenterGroup_findExperimenterGroupAnnotationLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ExperimenterGroup_findExperimenterGroupAnnotationLink_Base> Callback_ExperimenterGroup_findExperimenterGroupAnnotationLinkPtr;

class Callback_ExperimenterGroup_unlinkAnnotation_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ExperimenterGroup_unlinkAnnotation_Base> Callback_ExperimenterGroup_unlinkAnnotationPtr;

class Callback_ExperimenterGroup_removeExperimenterGroupAnnotationLinkFromBoth_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ExperimenterGroup_removeExperimenterGroupAnnotationLinkFromBoth_Base> Callback_ExperimenterGroup_removeExperimenterGroupAnnotationLinkFromBothPtr;

class Callback_ExperimenterGroup_linkedAnnotationList_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ExperimenterGroup_linkedAnnotationList_Base> Callback_ExperimenterGroup_linkedAnnotationListPtr;

class Callback_ExperimenterGroup_getDescription_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ExperimenterGroup_getDescription_Base> Callback_ExperimenterGroup_getDescriptionPtr;

class Callback_ExperimenterGroup_setDescription_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ExperimenterGroup_setDescription_Base> Callback_ExperimenterGroup_setDescriptionPtr;

}

}

namespace IceProxy
{

namespace omero
{

namespace model
{

class ExperimenterGroup : virtual public ::IceProxy::omero::model::IObject
{
public:

    ::omero::RIntPtr getVersion()
    {
        return getVersion(0);
    }
    ::omero::RIntPtr getVersion(const ::Ice::Context& __ctx)
    {
        return getVersion(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getVersion()
    {
        return begin_getVersion(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx)
    {
        return begin_getVersion(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::omero::model::Callback_ExperimenterGroup_getVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx, const ::omero::model::Callback_ExperimenterGroup_getVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(&__ctx, __del, __cookie);
    }

    ::omero::RIntPtr end_getVersion(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RIntPtr getVersion(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setVersion(const ::omero::RIntPtr& theVersion)
    {
        setVersion(theVersion, 0);
    }
    void setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx)
    {
        setVersion(theVersion, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion)
    {
        return begin_setVersion(theVersion, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx)
    {
        return begin_setVersion(theVersion, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::omero::model::Callback_ExperimenterGroup_setVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::omero::model::Callback_ExperimenterGroup_setVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, &__ctx, __del, __cookie);
    }

    void end_setVersion(const ::Ice::AsyncResultPtr&);
    
private:

    void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getName()
    {
        return getName(0);
    }
    ::omero::RStringPtr getName(const ::Ice::Context& __ctx)
    {
        return getName(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getName()
    {
        return begin_getName(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& __ctx)
    {
        return begin_getName(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getName(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getName(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::omero::model::Callback_ExperimenterGroup_getNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getName(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& __ctx, const ::omero::model::Callback_ExperimenterGroup_getNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getName(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getName(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getName(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setName(const ::omero::RStringPtr& theName)
    {
        setName(theName, 0);
    }
    void setName(const ::omero::RStringPtr& theName, const ::Ice::Context& __ctx)
    {
        setName(theName, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setName(const ::omero::RStringPtr& theName)
    {
        return begin_setName(theName, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setName(const ::omero::RStringPtr& theName, const ::Ice::Context& __ctx)
    {
        return begin_setName(theName, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setName(const ::omero::RStringPtr& theName, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setName(theName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setName(const ::omero::RStringPtr& theName, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setName(theName, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setName(const ::omero::RStringPtr& theName, const ::omero::model::Callback_ExperimenterGroup_setNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setName(theName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setName(const ::omero::RStringPtr& theName, const ::Ice::Context& __ctx, const ::omero::model::Callback_ExperimenterGroup_setNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setName(theName, &__ctx, __del, __cookie);
    }

    void end_setName(const ::Ice::AsyncResultPtr&);
    
private:

    void setName(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setName(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unloadGroupExperimenterMap()
    {
        unloadGroupExperimenterMap(0);
    }
    void unloadGroupExperimenterMap(const ::Ice::Context& __ctx)
    {
        unloadGroupExperimenterMap(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_unloadGroupExperimenterMap()
    {
        return begin_unloadGroupExperimenterMap(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadGroupExperimenterMap(const ::Ice::Context& __ctx)
    {
        return begin_unloadGroupExperimenterMap(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadGroupExperimenterMap(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadGroupExperimenterMap(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadGroupExperimenterMap(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadGroupExperimenterMap(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadGroupExperimenterMap(const ::omero::model::Callback_ExperimenterGroup_unloadGroupExperimenterMapPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadGroupExperimenterMap(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadGroupExperimenterMap(const ::Ice::Context& __ctx, const ::omero::model::Callback_ExperimenterGroup_unloadGroupExperimenterMapPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadGroupExperimenterMap(&__ctx, __del, __cookie);
    }

    void end_unloadGroupExperimenterMap(const ::Ice::AsyncResultPtr&);
    
private:

    void unloadGroupExperimenterMap(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unloadGroupExperimenterMap(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int sizeOfGroupExperimenterMap()
    {
        return sizeOfGroupExperimenterMap(0);
    }
    ::Ice::Int sizeOfGroupExperimenterMap(const ::Ice::Context& __ctx)
    {
        return sizeOfGroupExperimenterMap(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_sizeOfGroupExperimenterMap()
    {
        return begin_sizeOfGroupExperimenterMap(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfGroupExperimenterMap(const ::Ice::Context& __ctx)
    {
        return begin_sizeOfGroupExperimenterMap(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfGroupExperimenterMap(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfGroupExperimenterMap(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfGroupExperimenterMap(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfGroupExperimenterMap(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfGroupExperimenterMap(const ::omero::model::Callback_ExperimenterGroup_sizeOfGroupExperimenterMapPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfGroupExperimenterMap(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfGroupExperimenterMap(const ::Ice::Context& __ctx, const ::omero::model::Callback_ExperimenterGroup_sizeOfGroupExperimenterMapPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfGroupExperimenterMap(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_sizeOfGroupExperimenterMap(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int sizeOfGroupExperimenterMap(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sizeOfGroupExperimenterMap(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::ExperimenterGroupGroupExperimenterMapSeq copyGroupExperimenterMap()
    {
        return copyGroupExperimenterMap(0);
    }
    ::omero::model::ExperimenterGroupGroupExperimenterMapSeq copyGroupExperimenterMap(const ::Ice::Context& __ctx)
    {
        return copyGroupExperimenterMap(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_copyGroupExperimenterMap()
    {
        return begin_copyGroupExperimenterMap(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyGroupExperimenterMap(const ::Ice::Context& __ctx)
    {
        return begin_copyGroupExperimenterMap(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyGroupExperimenterMap(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyGroupExperimenterMap(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyGroupExperimenterMap(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyGroupExperimenterMap(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyGroupExperimenterMap(const ::omero::model::Callback_ExperimenterGroup_copyGroupExperimenterMapPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyGroupExperimenterMap(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyGroupExperimenterMap(const ::Ice::Context& __ctx, const ::omero::model::Callback_ExperimenterGroup_copyGroupExperimenterMapPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyGroupExperimenterMap(&__ctx, __del, __cookie);
    }

    ::omero::model::ExperimenterGroupGroupExperimenterMapSeq end_copyGroupExperimenterMap(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::ExperimenterGroupGroupExperimenterMapSeq copyGroupExperimenterMap(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_copyGroupExperimenterMap(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addGroupExperimenterMap(const ::omero::model::GroupExperimenterMapPtr& target)
    {
        addGroupExperimenterMap(target, 0);
    }
    void addGroupExperimenterMap(const ::omero::model::GroupExperimenterMapPtr& target, const ::Ice::Context& __ctx)
    {
        addGroupExperimenterMap(target, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addGroupExperimenterMap(const ::omero::model::GroupExperimenterMapPtr& target)
    {
        return begin_addGroupExperimenterMap(target, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addGroupExperimenterMap(const ::omero::model::GroupExperimenterMapPtr& target, const ::Ice::Context& __ctx)
    {
        return begin_addGroupExperimenterMap(target, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addGroupExperimenterMap(const ::omero::model::GroupExperimenterMapPtr& target, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addGroupExperimenterMap(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addGroupExperimenterMap(const ::omero::model::GroupExperimenterMapPtr& target, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addGroupExperimenterMap(target, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addGroupExperimenterMap(const ::omero::model::GroupExperimenterMapPtr& target, const ::omero::model::Callback_ExperimenterGroup_addGroupExperimenterMapPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addGroupExperimenterMap(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addGroupExperimenterMap(const ::omero::model::GroupExperimenterMapPtr& target, const ::Ice::Context& __ctx, const ::omero::model::Callback_ExperimenterGroup_addGroupExperimenterMapPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addGroupExperimenterMap(target, &__ctx, __del, __cookie);
    }

    void end_addGroupExperimenterMap(const ::Ice::AsyncResultPtr&);
    
private:

    void addGroupExperimenterMap(const ::omero::model::GroupExperimenterMapPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addGroupExperimenterMap(const ::omero::model::GroupExperimenterMapPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addAllGroupExperimenterMapSet(const ::omero::model::ExperimenterGroupGroupExperimenterMapSeq& targets)
    {
        addAllGroupExperimenterMapSet(targets, 0);
    }
    void addAllGroupExperimenterMapSet(const ::omero::model::ExperimenterGroupGroupExperimenterMapSeq& targets, const ::Ice::Context& __ctx)
    {
        addAllGroupExperimenterMapSet(targets, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addAllGroupExperimenterMapSet(const ::omero::model::ExperimenterGroupGroupExperimenterMapSeq& targets)
    {
        return begin_addAllGroupExperimenterMapSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllGroupExperimenterMapSet(const ::omero::model::ExperimenterGroupGroupExperimenterMapSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_addAllGroupExperimenterMapSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllGroupExperimenterMapSet(const ::omero::model::ExperimenterGroupGroupExperimenterMapSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllGroupExperimenterMapSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllGroupExperimenterMapSet(const ::omero::model::ExperimenterGroupGroupExperimenterMapSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllGroupExperimenterMapSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllGroupExperimenterMapSet(const ::omero::model::ExperimenterGroupGroupExperimenterMapSeq& targets, const ::omero::model::Callback_ExperimenterGroup_addAllGroupExperimenterMapSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllGroupExperimenterMapSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllGroupExperimenterMapSet(const ::omero::model::ExperimenterGroupGroupExperimenterMapSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_ExperimenterGroup_addAllGroupExperimenterMapSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllGroupExperimenterMapSet(targets, &__ctx, __del, __cookie);
    }

    void end_addAllGroupExperimenterMapSet(const ::Ice::AsyncResultPtr&);
    
private:

    void addAllGroupExperimenterMapSet(const ::omero::model::ExperimenterGroupGroupExperimenterMapSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addAllGroupExperimenterMapSet(const ::omero::model::ExperimenterGroupGroupExperimenterMapSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeGroupExperimenterMap(const ::omero::model::GroupExperimenterMapPtr& theTarget)
    {
        removeGroupExperimenterMap(theTarget, 0);
    }
    void removeGroupExperimenterMap(const ::omero::model::GroupExperimenterMapPtr& theTarget, const ::Ice::Context& __ctx)
    {
        removeGroupExperimenterMap(theTarget, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removeGroupExperimenterMap(const ::omero::model::GroupExperimenterMapPtr& theTarget)
    {
        return begin_removeGroupExperimenterMap(theTarget, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeGroupExperimenterMap(const ::omero::model::GroupExperimenterMapPtr& theTarget, const ::Ice::Context& __ctx)
    {
        return begin_removeGroupExperimenterMap(theTarget, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeGroupExperimenterMap(const ::omero::model::GroupExperimenterMapPtr& theTarget, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeGroupExperimenterMap(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeGroupExperimenterMap(const ::omero::model::GroupExperimenterMapPtr& theTarget, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeGroupExperimenterMap(theTarget, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeGroupExperimenterMap(const ::omero::model::GroupExperimenterMapPtr& theTarget, const ::omero::model::Callback_ExperimenterGroup_removeGroupExperimenterMapPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeGroupExperimenterMap(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeGroupExperimenterMap(const ::omero::model::GroupExperimenterMapPtr& theTarget, const ::Ice::Context& __ctx, const ::omero::model::Callback_ExperimenterGroup_removeGroupExperimenterMapPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeGroupExperimenterMap(theTarget, &__ctx, __del, __cookie);
    }

    void end_removeGroupExperimenterMap(const ::Ice::AsyncResultPtr&);
    
private:

    void removeGroupExperimenterMap(const ::omero::model::GroupExperimenterMapPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeGroupExperimenterMap(const ::omero::model::GroupExperimenterMapPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeAllGroupExperimenterMapSet(const ::omero::model::ExperimenterGroupGroupExperimenterMapSeq& targets)
    {
        removeAllGroupExperimenterMapSet(targets, 0);
    }
    void removeAllGroupExperimenterMapSet(const ::omero::model::ExperimenterGroupGroupExperimenterMapSeq& targets, const ::Ice::Context& __ctx)
    {
        removeAllGroupExperimenterMapSet(targets, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removeAllGroupExperimenterMapSet(const ::omero::model::ExperimenterGroupGroupExperimenterMapSeq& targets)
    {
        return begin_removeAllGroupExperimenterMapSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllGroupExperimenterMapSet(const ::omero::model::ExperimenterGroupGroupExperimenterMapSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_removeAllGroupExperimenterMapSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllGroupExperimenterMapSet(const ::omero::model::ExperimenterGroupGroupExperimenterMapSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllGroupExperimenterMapSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllGroupExperimenterMapSet(const ::omero::model::ExperimenterGroupGroupExperimenterMapSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllGroupExperimenterMapSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllGroupExperimenterMapSet(const ::omero::model::ExperimenterGroupGroupExperimenterMapSeq& targets, const ::omero::model::Callback_ExperimenterGroup_removeAllGroupExperimenterMapSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllGroupExperimenterMapSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllGroupExperimenterMapSet(const ::omero::model::ExperimenterGroupGroupExperimenterMapSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_ExperimenterGroup_removeAllGroupExperimenterMapSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllGroupExperimenterMapSet(targets, &__ctx, __del, __cookie);
    }

    void end_removeAllGroupExperimenterMapSet(const ::Ice::AsyncResultPtr&);
    
private:

    void removeAllGroupExperimenterMapSet(const ::omero::model::ExperimenterGroupGroupExperimenterMapSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeAllGroupExperimenterMapSet(const ::omero::model::ExperimenterGroupGroupExperimenterMapSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void clearGroupExperimenterMap()
    {
        clearGroupExperimenterMap(0);
    }
    void clearGroupExperimenterMap(const ::Ice::Context& __ctx)
    {
        clearGroupExperimenterMap(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_clearGroupExperimenterMap()
    {
        return begin_clearGroupExperimenterMap(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearGroupExperimenterMap(const ::Ice::Context& __ctx)
    {
        return begin_clearGroupExperimenterMap(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearGroupExperimenterMap(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearGroupExperimenterMap(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearGroupExperimenterMap(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearGroupExperimenterMap(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearGroupExperimenterMap(const ::omero::model::Callback_ExperimenterGroup_clearGroupExperimenterMapPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearGroupExperimenterMap(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearGroupExperimenterMap(const ::Ice::Context& __ctx, const ::omero::model::Callback_ExperimenterGroup_clearGroupExperimenterMapPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearGroupExperimenterMap(&__ctx, __del, __cookie);
    }

    void end_clearGroupExperimenterMap(const ::Ice::AsyncResultPtr&);
    
private:

    void clearGroupExperimenterMap(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_clearGroupExperimenterMap(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reloadGroupExperimenterMap(const ::omero::model::ExperimenterGroupPtr& toCopy)
    {
        reloadGroupExperimenterMap(toCopy, 0);
    }
    void reloadGroupExperimenterMap(const ::omero::model::ExperimenterGroupPtr& toCopy, const ::Ice::Context& __ctx)
    {
        reloadGroupExperimenterMap(toCopy, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_reloadGroupExperimenterMap(const ::omero::model::ExperimenterGroupPtr& toCopy)
    {
        return begin_reloadGroupExperimenterMap(toCopy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadGroupExperimenterMap(const ::omero::model::ExperimenterGroupPtr& toCopy, const ::Ice::Context& __ctx)
    {
        return begin_reloadGroupExperimenterMap(toCopy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadGroupExperimenterMap(const ::omero::model::ExperimenterGroupPtr& toCopy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadGroupExperimenterMap(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadGroupExperimenterMap(const ::omero::model::ExperimenterGroupPtr& toCopy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadGroupExperimenterMap(toCopy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadGroupExperimenterMap(const ::omero::model::ExperimenterGroupPtr& toCopy, const ::omero::model::Callback_ExperimenterGroup_reloadGroupExperimenterMapPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadGroupExperimenterMap(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadGroupExperimenterMap(const ::omero::model::ExperimenterGroupPtr& toCopy, const ::Ice::Context& __ctx, const ::omero::model::Callback_ExperimenterGroup_reloadGroupExperimenterMapPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadGroupExperimenterMap(toCopy, &__ctx, __del, __cookie);
    }

    void end_reloadGroupExperimenterMap(const ::Ice::AsyncResultPtr&);
    
private:

    void reloadGroupExperimenterMap(const ::omero::model::ExperimenterGroupPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reloadGroupExperimenterMap(const ::omero::model::ExperimenterGroupPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::GroupExperimenterMapPtr linkExperimenter(const ::omero::model::ExperimenterPtr& addition)
    {
        return linkExperimenter(addition, 0);
    }
    ::omero::model::GroupExperimenterMapPtr linkExperimenter(const ::omero::model::ExperimenterPtr& addition, const ::Ice::Context& __ctx)
    {
        return linkExperimenter(addition, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_linkExperimenter(const ::omero::model::ExperimenterPtr& addition)
    {
        return begin_linkExperimenter(addition, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkExperimenter(const ::omero::model::ExperimenterPtr& addition, const ::Ice::Context& __ctx)
    {
        return begin_linkExperimenter(addition, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkExperimenter(const ::omero::model::ExperimenterPtr& addition, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkExperimenter(addition, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkExperimenter(const ::omero::model::ExperimenterPtr& addition, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkExperimenter(addition, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkExperimenter(const ::omero::model::ExperimenterPtr& addition, const ::omero::model::Callback_ExperimenterGroup_linkExperimenterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkExperimenter(addition, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkExperimenter(const ::omero::model::ExperimenterPtr& addition, const ::Ice::Context& __ctx, const ::omero::model::Callback_ExperimenterGroup_linkExperimenterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkExperimenter(addition, &__ctx, __del, __cookie);
    }

    ::omero::model::GroupExperimenterMapPtr end_linkExperimenter(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::GroupExperimenterMapPtr linkExperimenter(const ::omero::model::ExperimenterPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_linkExperimenter(const ::omero::model::ExperimenterPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addGroupExperimenterMapToBoth(const ::omero::model::GroupExperimenterMapPtr& link, bool bothSides)
    {
        addGroupExperimenterMapToBoth(link, bothSides, 0);
    }
    void addGroupExperimenterMapToBoth(const ::omero::model::GroupExperimenterMapPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        addGroupExperimenterMapToBoth(link, bothSides, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addGroupExperimenterMapToBoth(const ::omero::model::GroupExperimenterMapPtr& link, bool bothSides)
    {
        return begin_addGroupExperimenterMapToBoth(link, bothSides, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addGroupExperimenterMapToBoth(const ::omero::model::GroupExperimenterMapPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        return begin_addGroupExperimenterMapToBoth(link, bothSides, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addGroupExperimenterMapToBoth(const ::omero::model::GroupExperimenterMapPtr& link, bool bothSides, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addGroupExperimenterMapToBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addGroupExperimenterMapToBoth(const ::omero::model::GroupExperimenterMapPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addGroupExperimenterMapToBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addGroupExperimenterMapToBoth(const ::omero::model::GroupExperimenterMapPtr& link, bool bothSides, const ::omero::model::Callback_ExperimenterGroup_addGroupExperimenterMapToBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addGroupExperimenterMapToBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addGroupExperimenterMapToBoth(const ::omero::model::GroupExperimenterMapPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::omero::model::Callback_ExperimenterGroup_addGroupExperimenterMapToBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addGroupExperimenterMapToBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    void end_addGroupExperimenterMapToBoth(const ::Ice::AsyncResultPtr&);
    
private:

    void addGroupExperimenterMapToBoth(const ::omero::model::GroupExperimenterMapPtr&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addGroupExperimenterMapToBoth(const ::omero::model::GroupExperimenterMapPtr&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::ExperimenterGroupGroupExperimenterMapSeq findGroupExperimenterMap(const ::omero::model::ExperimenterPtr& removal)
    {
        return findGroupExperimenterMap(removal, 0);
    }
    ::omero::model::ExperimenterGroupGroupExperimenterMapSeq findGroupExperimenterMap(const ::omero::model::ExperimenterPtr& removal, const ::Ice::Context& __ctx)
    {
        return findGroupExperimenterMap(removal, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_findGroupExperimenterMap(const ::omero::model::ExperimenterPtr& removal)
    {
        return begin_findGroupExperimenterMap(removal, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findGroupExperimenterMap(const ::omero::model::ExperimenterPtr& removal, const ::Ice::Context& __ctx)
    {
        return begin_findGroupExperimenterMap(removal, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findGroupExperimenterMap(const ::omero::model::ExperimenterPtr& removal, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findGroupExperimenterMap(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findGroupExperimenterMap(const ::omero::model::ExperimenterPtr& removal, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findGroupExperimenterMap(removal, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findGroupExperimenterMap(const ::omero::model::ExperimenterPtr& removal, const ::omero::model::Callback_ExperimenterGroup_findGroupExperimenterMapPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findGroupExperimenterMap(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findGroupExperimenterMap(const ::omero::model::ExperimenterPtr& removal, const ::Ice::Context& __ctx, const ::omero::model::Callback_ExperimenterGroup_findGroupExperimenterMapPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findGroupExperimenterMap(removal, &__ctx, __del, __cookie);
    }

    ::omero::model::ExperimenterGroupGroupExperimenterMapSeq end_findGroupExperimenterMap(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::ExperimenterGroupGroupExperimenterMapSeq findGroupExperimenterMap(const ::omero::model::ExperimenterPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_findGroupExperimenterMap(const ::omero::model::ExperimenterPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unlinkExperimenter(const ::omero::model::ExperimenterPtr& removal)
    {
        unlinkExperimenter(removal, 0);
    }
    void unlinkExperimenter(const ::omero::model::ExperimenterPtr& removal, const ::Ice::Context& __ctx)
    {
        unlinkExperimenter(removal, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_unlinkExperimenter(const ::omero::model::ExperimenterPtr& removal)
    {
        return begin_unlinkExperimenter(removal, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unlinkExperimenter(const ::omero::model::ExperimenterPtr& removal, const ::Ice::Context& __ctx)
    {
        return begin_unlinkExperimenter(removal, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unlinkExperimenter(const ::omero::model::ExperimenterPtr& removal, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkExperimenter(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkExperimenter(const ::omero::model::ExperimenterPtr& removal, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkExperimenter(removal, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkExperimenter(const ::omero::model::ExperimenterPtr& removal, const ::omero::model::Callback_ExperimenterGroup_unlinkExperimenterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkExperimenter(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkExperimenter(const ::omero::model::ExperimenterPtr& removal, const ::Ice::Context& __ctx, const ::omero::model::Callback_ExperimenterGroup_unlinkExperimenterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkExperimenter(removal, &__ctx, __del, __cookie);
    }

    void end_unlinkExperimenter(const ::Ice::AsyncResultPtr&);
    
private:

    void unlinkExperimenter(const ::omero::model::ExperimenterPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unlinkExperimenter(const ::omero::model::ExperimenterPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeGroupExperimenterMapFromBoth(const ::omero::model::GroupExperimenterMapPtr& link, bool bothSides)
    {
        removeGroupExperimenterMapFromBoth(link, bothSides, 0);
    }
    void removeGroupExperimenterMapFromBoth(const ::omero::model::GroupExperimenterMapPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        removeGroupExperimenterMapFromBoth(link, bothSides, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removeGroupExperimenterMapFromBoth(const ::omero::model::GroupExperimenterMapPtr& link, bool bothSides)
    {
        return begin_removeGroupExperimenterMapFromBoth(link, bothSides, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeGroupExperimenterMapFromBoth(const ::omero::model::GroupExperimenterMapPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        return begin_removeGroupExperimenterMapFromBoth(link, bothSides, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeGroupExperimenterMapFromBoth(const ::omero::model::GroupExperimenterMapPtr& link, bool bothSides, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeGroupExperimenterMapFromBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeGroupExperimenterMapFromBoth(const ::omero::model::GroupExperimenterMapPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeGroupExperimenterMapFromBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeGroupExperimenterMapFromBoth(const ::omero::model::GroupExperimenterMapPtr& link, bool bothSides, const ::omero::model::Callback_ExperimenterGroup_removeGroupExperimenterMapFromBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeGroupExperimenterMapFromBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeGroupExperimenterMapFromBoth(const ::omero::model::GroupExperimenterMapPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::omero::model::Callback_ExperimenterGroup_removeGroupExperimenterMapFromBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeGroupExperimenterMapFromBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    void end_removeGroupExperimenterMapFromBoth(const ::Ice::AsyncResultPtr&);
    
private:

    void removeGroupExperimenterMapFromBoth(const ::omero::model::GroupExperimenterMapPtr&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeGroupExperimenterMapFromBoth(const ::omero::model::GroupExperimenterMapPtr&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::ExperimenterGroupLinkedExperimenterSeq linkedExperimenterList()
    {
        return linkedExperimenterList(0);
    }
    ::omero::model::ExperimenterGroupLinkedExperimenterSeq linkedExperimenterList(const ::Ice::Context& __ctx)
    {
        return linkedExperimenterList(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_linkedExperimenterList()
    {
        return begin_linkedExperimenterList(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkedExperimenterList(const ::Ice::Context& __ctx)
    {
        return begin_linkedExperimenterList(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkedExperimenterList(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedExperimenterList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedExperimenterList(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedExperimenterList(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedExperimenterList(const ::omero::model::Callback_ExperimenterGroup_linkedExperimenterListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedExperimenterList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedExperimenterList(const ::Ice::Context& __ctx, const ::omero::model::Callback_ExperimenterGroup_linkedExperimenterListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedExperimenterList(&__ctx, __del, __cookie);
    }

    ::omero::model::ExperimenterGroupLinkedExperimenterSeq end_linkedExperimenterList(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::ExperimenterGroupLinkedExperimenterSeq linkedExperimenterList(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_linkedExperimenterList(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unloadAnnotationLinks()
    {
        unloadAnnotationLinks(0);
    }
    void unloadAnnotationLinks(const ::Ice::Context& __ctx)
    {
        unloadAnnotationLinks(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks()
    {
        return begin_unloadAnnotationLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return begin_unloadAnnotationLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::omero::model::Callback_ExperimenterGroup_unloadAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_ExperimenterGroup_unloadAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadAnnotationLinks(&__ctx, __del, __cookie);
    }

    void end_unloadAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    void unloadAnnotationLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int sizeOfAnnotationLinks()
    {
        return sizeOfAnnotationLinks(0);
    }
    ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return sizeOfAnnotationLinks(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks()
    {
        return begin_sizeOfAnnotationLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return begin_sizeOfAnnotationLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::omero::model::Callback_ExperimenterGroup_sizeOfAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_ExperimenterGroup_sizeOfAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_sizeOfAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::ExperimenterGroupAnnotationLinksSeq copyAnnotationLinks()
    {
        return copyAnnotationLinks(0);
    }
    ::omero::model::ExperimenterGroupAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return copyAnnotationLinks(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks()
    {
        return begin_copyAnnotationLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return begin_copyAnnotationLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::omero::model::Callback_ExperimenterGroup_copyAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_ExperimenterGroup_copyAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::omero::model::ExperimenterGroupAnnotationLinksSeq end_copyAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::ExperimenterGroupAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addExperimenterGroupAnnotationLink(const ::omero::model::ExperimenterGroupAnnotationLinkPtr& target)
    {
        addExperimenterGroupAnnotationLink(target, 0);
    }
    void addExperimenterGroupAnnotationLink(const ::omero::model::ExperimenterGroupAnnotationLinkPtr& target, const ::Ice::Context& __ctx)
    {
        addExperimenterGroupAnnotationLink(target, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addExperimenterGroupAnnotationLink(const ::omero::model::ExperimenterGroupAnnotationLinkPtr& target)
    {
        return begin_addExperimenterGroupAnnotationLink(target, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addExperimenterGroupAnnotationLink(const ::omero::model::ExperimenterGroupAnnotationLinkPtr& target, const ::Ice::Context& __ctx)
    {
        return begin_addExperimenterGroupAnnotationLink(target, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addExperimenterGroupAnnotationLink(const ::omero::model::ExperimenterGroupAnnotationLinkPtr& target, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addExperimenterGroupAnnotationLink(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addExperimenterGroupAnnotationLink(const ::omero::model::ExperimenterGroupAnnotationLinkPtr& target, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addExperimenterGroupAnnotationLink(target, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addExperimenterGroupAnnotationLink(const ::omero::model::ExperimenterGroupAnnotationLinkPtr& target, const ::omero::model::Callback_ExperimenterGroup_addExperimenterGroupAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addExperimenterGroupAnnotationLink(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addExperimenterGroupAnnotationLink(const ::omero::model::ExperimenterGroupAnnotationLinkPtr& target, const ::Ice::Context& __ctx, const ::omero::model::Callback_ExperimenterGroup_addExperimenterGroupAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addExperimenterGroupAnnotationLink(target, &__ctx, __del, __cookie);
    }

    void end_addExperimenterGroupAnnotationLink(const ::Ice::AsyncResultPtr&);
    
private:

    void addExperimenterGroupAnnotationLink(const ::omero::model::ExperimenterGroupAnnotationLinkPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addExperimenterGroupAnnotationLink(const ::omero::model::ExperimenterGroupAnnotationLinkPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addAllExperimenterGroupAnnotationLinkSet(const ::omero::model::ExperimenterGroupAnnotationLinksSeq& targets)
    {
        addAllExperimenterGroupAnnotationLinkSet(targets, 0);
    }
    void addAllExperimenterGroupAnnotationLinkSet(const ::omero::model::ExperimenterGroupAnnotationLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        addAllExperimenterGroupAnnotationLinkSet(targets, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addAllExperimenterGroupAnnotationLinkSet(const ::omero::model::ExperimenterGroupAnnotationLinksSeq& targets)
    {
        return begin_addAllExperimenterGroupAnnotationLinkSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllExperimenterGroupAnnotationLinkSet(const ::omero::model::ExperimenterGroupAnnotationLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_addAllExperimenterGroupAnnotationLinkSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllExperimenterGroupAnnotationLinkSet(const ::omero::model::ExperimenterGroupAnnotationLinksSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllExperimenterGroupAnnotationLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllExperimenterGroupAnnotationLinkSet(const ::omero::model::ExperimenterGroupAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllExperimenterGroupAnnotationLinkSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllExperimenterGroupAnnotationLinkSet(const ::omero::model::ExperimenterGroupAnnotationLinksSeq& targets, const ::omero::model::Callback_ExperimenterGroup_addAllExperimenterGroupAnnotationLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllExperimenterGroupAnnotationLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllExperimenterGroupAnnotationLinkSet(const ::omero::model::ExperimenterGroupAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_ExperimenterGroup_addAllExperimenterGroupAnnotationLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllExperimenterGroupAnnotationLinkSet(targets, &__ctx, __del, __cookie);
    }

    void end_addAllExperimenterGroupAnnotationLinkSet(const ::Ice::AsyncResultPtr&);
    
private:

    void addAllExperimenterGroupAnnotationLinkSet(const ::omero::model::ExperimenterGroupAnnotationLinksSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addAllExperimenterGroupAnnotationLinkSet(const ::omero::model::ExperimenterGroupAnnotationLinksSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeExperimenterGroupAnnotationLink(const ::omero::model::ExperimenterGroupAnnotationLinkPtr& theTarget)
    {
        removeExperimenterGroupAnnotationLink(theTarget, 0);
    }
    void removeExperimenterGroupAnnotationLink(const ::omero::model::ExperimenterGroupAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx)
    {
        removeExperimenterGroupAnnotationLink(theTarget, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removeExperimenterGroupAnnotationLink(const ::omero::model::ExperimenterGroupAnnotationLinkPtr& theTarget)
    {
        return begin_removeExperimenterGroupAnnotationLink(theTarget, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeExperimenterGroupAnnotationLink(const ::omero::model::ExperimenterGroupAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx)
    {
        return begin_removeExperimenterGroupAnnotationLink(theTarget, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeExperimenterGroupAnnotationLink(const ::omero::model::ExperimenterGroupAnnotationLinkPtr& theTarget, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeExperimenterGroupAnnotationLink(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeExperimenterGroupAnnotationLink(const ::omero::model::ExperimenterGroupAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeExperimenterGroupAnnotationLink(theTarget, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeExperimenterGroupAnnotationLink(const ::omero::model::ExperimenterGroupAnnotationLinkPtr& theTarget, const ::omero::model::Callback_ExperimenterGroup_removeExperimenterGroupAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeExperimenterGroupAnnotationLink(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeExperimenterGroupAnnotationLink(const ::omero::model::ExperimenterGroupAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::omero::model::Callback_ExperimenterGroup_removeExperimenterGroupAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeExperimenterGroupAnnotationLink(theTarget, &__ctx, __del, __cookie);
    }

    void end_removeExperimenterGroupAnnotationLink(const ::Ice::AsyncResultPtr&);
    
private:

    void removeExperimenterGroupAnnotationLink(const ::omero::model::ExperimenterGroupAnnotationLinkPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeExperimenterGroupAnnotationLink(const ::omero::model::ExperimenterGroupAnnotationLinkPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeAllExperimenterGroupAnnotationLinkSet(const ::omero::model::ExperimenterGroupAnnotationLinksSeq& targets)
    {
        removeAllExperimenterGroupAnnotationLinkSet(targets, 0);
    }
    void removeAllExperimenterGroupAnnotationLinkSet(const ::omero::model::ExperimenterGroupAnnotationLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        removeAllExperimenterGroupAnnotationLinkSet(targets, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removeAllExperimenterGroupAnnotationLinkSet(const ::omero::model::ExperimenterGroupAnnotationLinksSeq& targets)
    {
        return begin_removeAllExperimenterGroupAnnotationLinkSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllExperimenterGroupAnnotationLinkSet(const ::omero::model::ExperimenterGroupAnnotationLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_removeAllExperimenterGroupAnnotationLinkSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllExperimenterGroupAnnotationLinkSet(const ::omero::model::ExperimenterGroupAnnotationLinksSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllExperimenterGroupAnnotationLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllExperimenterGroupAnnotationLinkSet(const ::omero::model::ExperimenterGroupAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllExperimenterGroupAnnotationLinkSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllExperimenterGroupAnnotationLinkSet(const ::omero::model::ExperimenterGroupAnnotationLinksSeq& targets, const ::omero::model::Callback_ExperimenterGroup_removeAllExperimenterGroupAnnotationLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllExperimenterGroupAnnotationLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllExperimenterGroupAnnotationLinkSet(const ::omero::model::ExperimenterGroupAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_ExperimenterGroup_removeAllExperimenterGroupAnnotationLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllExperimenterGroupAnnotationLinkSet(targets, &__ctx, __del, __cookie);
    }

    void end_removeAllExperimenterGroupAnnotationLinkSet(const ::Ice::AsyncResultPtr&);
    
private:

    void removeAllExperimenterGroupAnnotationLinkSet(const ::omero::model::ExperimenterGroupAnnotationLinksSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeAllExperimenterGroupAnnotationLinkSet(const ::omero::model::ExperimenterGroupAnnotationLinksSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void clearAnnotationLinks()
    {
        clearAnnotationLinks(0);
    }
    void clearAnnotationLinks(const ::Ice::Context& __ctx)
    {
        clearAnnotationLinks(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks()
    {
        return begin_clearAnnotationLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return begin_clearAnnotationLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::omero::model::Callback_ExperimenterGroup_clearAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_ExperimenterGroup_clearAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearAnnotationLinks(&__ctx, __del, __cookie);
    }

    void end_clearAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    void clearAnnotationLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reloadAnnotationLinks(const ::omero::model::ExperimenterGroupPtr& toCopy)
    {
        reloadAnnotationLinks(toCopy, 0);
    }
    void reloadAnnotationLinks(const ::omero::model::ExperimenterGroupPtr& toCopy, const ::Ice::Context& __ctx)
    {
        reloadAnnotationLinks(toCopy, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::ExperimenterGroupPtr& toCopy)
    {
        return begin_reloadAnnotationLinks(toCopy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::ExperimenterGroupPtr& toCopy, const ::Ice::Context& __ctx)
    {
        return begin_reloadAnnotationLinks(toCopy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::ExperimenterGroupPtr& toCopy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadAnnotationLinks(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::ExperimenterGroupPtr& toCopy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadAnnotationLinks(toCopy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::ExperimenterGroupPtr& toCopy, const ::omero::model::Callback_ExperimenterGroup_reloadAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadAnnotationLinks(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::ExperimenterGroupPtr& toCopy, const ::Ice::Context& __ctx, const ::omero::model::Callback_ExperimenterGroup_reloadAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadAnnotationLinks(toCopy, &__ctx, __del, __cookie);
    }

    void end_reloadAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    void reloadAnnotationLinks(const ::omero::model::ExperimenterGroupPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::ExperimenterGroupPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::sys::CountMap getAnnotationLinksCountPerOwner()
    {
        return getAnnotationLinksCountPerOwner(0);
    }
    ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx)
    {
        return getAnnotationLinksCountPerOwner(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner()
    {
        return begin_getAnnotationLinksCountPerOwner(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx)
    {
        return begin_getAnnotationLinksCountPerOwner(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAnnotationLinksCountPerOwner(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAnnotationLinksCountPerOwner(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::omero::model::Callback_ExperimenterGroup_getAnnotationLinksCountPerOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAnnotationLinksCountPerOwner(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx, const ::omero::model::Callback_ExperimenterGroup_getAnnotationLinksCountPerOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAnnotationLinksCountPerOwner(&__ctx, __del, __cookie);
    }

    ::omero::sys::CountMap end_getAnnotationLinksCountPerOwner(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::ExperimenterGroupAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr& addition)
    {
        return linkAnnotation(addition, 0);
    }
    ::omero::model::ExperimenterGroupAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx)
    {
        return linkAnnotation(addition, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition)
    {
        return begin_linkAnnotation(addition, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx)
    {
        return begin_linkAnnotation(addition, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkAnnotation(addition, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkAnnotation(addition, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::omero::model::Callback_ExperimenterGroup_linkAnnotationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkAnnotation(addition, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx, const ::omero::model::Callback_ExperimenterGroup_linkAnnotationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkAnnotation(addition, &__ctx, __del, __cookie);
    }

    ::omero::model::ExperimenterGroupAnnotationLinkPtr end_linkAnnotation(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::ExperimenterGroupAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addExperimenterGroupAnnotationLinkToBoth(const ::omero::model::ExperimenterGroupAnnotationLinkPtr& link, bool bothSides)
    {
        addExperimenterGroupAnnotationLinkToBoth(link, bothSides, 0);
    }
    void addExperimenterGroupAnnotationLinkToBoth(const ::omero::model::ExperimenterGroupAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        addExperimenterGroupAnnotationLinkToBoth(link, bothSides, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addExperimenterGroupAnnotationLinkToBoth(const ::omero::model::ExperimenterGroupAnnotationLinkPtr& link, bool bothSides)
    {
        return begin_addExperimenterGroupAnnotationLinkToBoth(link, bothSides, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addExperimenterGroupAnnotationLinkToBoth(const ::omero::model::ExperimenterGroupAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        return begin_addExperimenterGroupAnnotationLinkToBoth(link, bothSides, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addExperimenterGroupAnnotationLinkToBoth(const ::omero::model::ExperimenterGroupAnnotationLinkPtr& link, bool bothSides, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addExperimenterGroupAnnotationLinkToBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addExperimenterGroupAnnotationLinkToBoth(const ::omero::model::ExperimenterGroupAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addExperimenterGroupAnnotationLinkToBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addExperimenterGroupAnnotationLinkToBoth(const ::omero::model::ExperimenterGroupAnnotationLinkPtr& link, bool bothSides, const ::omero::model::Callback_ExperimenterGroup_addExperimenterGroupAnnotationLinkToBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addExperimenterGroupAnnotationLinkToBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addExperimenterGroupAnnotationLinkToBoth(const ::omero::model::ExperimenterGroupAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::omero::model::Callback_ExperimenterGroup_addExperimenterGroupAnnotationLinkToBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addExperimenterGroupAnnotationLinkToBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    void end_addExperimenterGroupAnnotationLinkToBoth(const ::Ice::AsyncResultPtr&);
    
private:

    void addExperimenterGroupAnnotationLinkToBoth(const ::omero::model::ExperimenterGroupAnnotationLinkPtr&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addExperimenterGroupAnnotationLinkToBoth(const ::omero::model::ExperimenterGroupAnnotationLinkPtr&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::ExperimenterGroupAnnotationLinksSeq findExperimenterGroupAnnotationLink(const ::omero::model::AnnotationPtr& removal)
    {
        return findExperimenterGroupAnnotationLink(removal, 0);
    }
    ::omero::model::ExperimenterGroupAnnotationLinksSeq findExperimenterGroupAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx)
    {
        return findExperimenterGroupAnnotationLink(removal, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_findExperimenterGroupAnnotationLink(const ::omero::model::AnnotationPtr& removal)
    {
        return begin_findExperimenterGroupAnnotationLink(removal, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findExperimenterGroupAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx)
    {
        return begin_findExperimenterGroupAnnotationLink(removal, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findExperimenterGroupAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findExperimenterGroupAnnotationLink(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findExperimenterGroupAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findExperimenterGroupAnnotationLink(removal, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findExperimenterGroupAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::omero::model::Callback_ExperimenterGroup_findExperimenterGroupAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findExperimenterGroupAnnotationLink(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findExperimenterGroupAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::omero::model::Callback_ExperimenterGroup_findExperimenterGroupAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findExperimenterGroupAnnotationLink(removal, &__ctx, __del, __cookie);
    }

    ::omero::model::ExperimenterGroupAnnotationLinksSeq end_findExperimenterGroupAnnotationLink(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::ExperimenterGroupAnnotationLinksSeq findExperimenterGroupAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_findExperimenterGroupAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unlinkAnnotation(const ::omero::model::AnnotationPtr& removal)
    {
        unlinkAnnotation(removal, 0);
    }
    void unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx)
    {
        unlinkAnnotation(removal, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal)
    {
        return begin_unlinkAnnotation(removal, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx)
    {
        return begin_unlinkAnnotation(removal, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkAnnotation(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkAnnotation(removal, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::omero::model::Callback_ExperimenterGroup_unlinkAnnotationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkAnnotation(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::omero::model::Callback_ExperimenterGroup_unlinkAnnotationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkAnnotation(removal, &__ctx, __del, __cookie);
    }

    void end_unlinkAnnotation(const ::Ice::AsyncResultPtr&);
    
private:

    void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeExperimenterGroupAnnotationLinkFromBoth(const ::omero::model::ExperimenterGroupAnnotationLinkPtr& link, bool bothSides)
    {
        removeExperimenterGroupAnnotationLinkFromBoth(link, bothSides, 0);
    }
    void removeExperimenterGroupAnnotationLinkFromBoth(const ::omero::model::ExperimenterGroupAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        removeExperimenterGroupAnnotationLinkFromBoth(link, bothSides, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removeExperimenterGroupAnnotationLinkFromBoth(const ::omero::model::ExperimenterGroupAnnotationLinkPtr& link, bool bothSides)
    {
        return begin_removeExperimenterGroupAnnotationLinkFromBoth(link, bothSides, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeExperimenterGroupAnnotationLinkFromBoth(const ::omero::model::ExperimenterGroupAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        return begin_removeExperimenterGroupAnnotationLinkFromBoth(link, bothSides, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeExperimenterGroupAnnotationLinkFromBoth(const ::omero::model::ExperimenterGroupAnnotationLinkPtr& link, bool bothSides, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeExperimenterGroupAnnotationLinkFromBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeExperimenterGroupAnnotationLinkFromBoth(const ::omero::model::ExperimenterGroupAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeExperimenterGroupAnnotationLinkFromBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeExperimenterGroupAnnotationLinkFromBoth(const ::omero::model::ExperimenterGroupAnnotationLinkPtr& link, bool bothSides, const ::omero::model::Callback_ExperimenterGroup_removeExperimenterGroupAnnotationLinkFromBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeExperimenterGroupAnnotationLinkFromBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeExperimenterGroupAnnotationLinkFromBoth(const ::omero::model::ExperimenterGroupAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::omero::model::Callback_ExperimenterGroup_removeExperimenterGroupAnnotationLinkFromBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeExperimenterGroupAnnotationLinkFromBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    void end_removeExperimenterGroupAnnotationLinkFromBoth(const ::Ice::AsyncResultPtr&);
    
private:

    void removeExperimenterGroupAnnotationLinkFromBoth(const ::omero::model::ExperimenterGroupAnnotationLinkPtr&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeExperimenterGroupAnnotationLinkFromBoth(const ::omero::model::ExperimenterGroupAnnotationLinkPtr&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::ExperimenterGroupLinkedAnnotationSeq linkedAnnotationList()
    {
        return linkedAnnotationList(0);
    }
    ::omero::model::ExperimenterGroupLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context& __ctx)
    {
        return linkedAnnotationList(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList()
    {
        return begin_linkedAnnotationList(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::Context& __ctx)
    {
        return begin_linkedAnnotationList(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedAnnotationList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedAnnotationList(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::omero::model::Callback_ExperimenterGroup_linkedAnnotationListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedAnnotationList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::Context& __ctx, const ::omero::model::Callback_ExperimenterGroup_linkedAnnotationListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedAnnotationList(&__ctx, __del, __cookie);
    }

    ::omero::model::ExperimenterGroupLinkedAnnotationSeq end_linkedAnnotationList(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::ExperimenterGroupLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getDescription()
    {
        return getDescription(0);
    }
    ::omero::RStringPtr getDescription(const ::Ice::Context& __ctx)
    {
        return getDescription(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getDescription()
    {
        return begin_getDescription(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDescription(const ::Ice::Context& __ctx)
    {
        return begin_getDescription(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDescription(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDescription(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDescription(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDescription(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDescription(const ::omero::model::Callback_ExperimenterGroup_getDescriptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDescription(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDescription(const ::Ice::Context& __ctx, const ::omero::model::Callback_ExperimenterGroup_getDescriptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDescription(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getDescription(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getDescription(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getDescription(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setDescription(const ::omero::RStringPtr& theDescription)
    {
        setDescription(theDescription, 0);
    }
    void setDescription(const ::omero::RStringPtr& theDescription, const ::Ice::Context& __ctx)
    {
        setDescription(theDescription, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setDescription(const ::omero::RStringPtr& theDescription)
    {
        return begin_setDescription(theDescription, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setDescription(const ::omero::RStringPtr& theDescription, const ::Ice::Context& __ctx)
    {
        return begin_setDescription(theDescription, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setDescription(const ::omero::RStringPtr& theDescription, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDescription(theDescription, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDescription(const ::omero::RStringPtr& theDescription, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDescription(theDescription, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDescription(const ::omero::RStringPtr& theDescription, const ::omero::model::Callback_ExperimenterGroup_setDescriptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDescription(theDescription, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDescription(const ::omero::RStringPtr& theDescription, const ::Ice::Context& __ctx, const ::omero::model::Callback_ExperimenterGroup_setDescriptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDescription(theDescription, &__ctx, __del, __cookie);
    }

    void end_setDescription(const ::Ice::AsyncResultPtr&);
    
private:

    void setDescription(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setDescription(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<ExperimenterGroup> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ExperimenterGroup*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<ExperimenterGroup*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ExperimenterGroup> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ExperimenterGroup*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<ExperimenterGroup*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ExperimenterGroup> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ExperimenterGroup*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<ExperimenterGroup*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ExperimenterGroup> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ExperimenterGroup*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<ExperimenterGroup*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ExperimenterGroup> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ExperimenterGroup*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<ExperimenterGroup*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ExperimenterGroup> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ExperimenterGroup*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<ExperimenterGroup*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ExperimenterGroup> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ExperimenterGroup*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<ExperimenterGroup*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ExperimenterGroup> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ExperimenterGroup*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<ExperimenterGroup*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ExperimenterGroup> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ExperimenterGroup*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<ExperimenterGroup*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ExperimenterGroup> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ExperimenterGroup*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<ExperimenterGroup*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ExperimenterGroup> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ExperimenterGroup*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<ExperimenterGroup*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ExperimenterGroup> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ExperimenterGroup*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<ExperimenterGroup*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ExperimenterGroup> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ExperimenterGroup*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<ExperimenterGroup*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ExperimenterGroup> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ExperimenterGroup*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<ExperimenterGroup*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ExperimenterGroup> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ExperimenterGroup*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<ExperimenterGroup*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ExperimenterGroup> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ExperimenterGroup*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<ExperimenterGroup*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ExperimenterGroup> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ExperimenterGroup*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<ExperimenterGroup*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ExperimenterGroup> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ExperimenterGroup*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<ExperimenterGroup*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ExperimenterGroup> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ExperimenterGroup*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<ExperimenterGroup*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

namespace IceDelegate
{

namespace omero
{

namespace model
{

class ExperimenterGroup : virtual public ::IceDelegate::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*) = 0;

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::RStringPtr getName(const ::Ice::Context*) = 0;

    virtual void setName(const ::omero::RStringPtr&, const ::Ice::Context*) = 0;

    virtual void unloadGroupExperimenterMap(const ::Ice::Context*) = 0;

    virtual ::Ice::Int sizeOfGroupExperimenterMap(const ::Ice::Context*) = 0;

    virtual ::omero::model::ExperimenterGroupGroupExperimenterMapSeq copyGroupExperimenterMap(const ::Ice::Context*) = 0;

    virtual void addGroupExperimenterMap(const ::omero::model::GroupExperimenterMapPtr&, const ::Ice::Context*) = 0;

    virtual void addAllGroupExperimenterMapSet(const ::omero::model::ExperimenterGroupGroupExperimenterMapSeq&, const ::Ice::Context*) = 0;

    virtual void removeGroupExperimenterMap(const ::omero::model::GroupExperimenterMapPtr&, const ::Ice::Context*) = 0;

    virtual void removeAllGroupExperimenterMapSet(const ::omero::model::ExperimenterGroupGroupExperimenterMapSeq&, const ::Ice::Context*) = 0;

    virtual void clearGroupExperimenterMap(const ::Ice::Context*) = 0;

    virtual void reloadGroupExperimenterMap(const ::omero::model::ExperimenterGroupPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::model::GroupExperimenterMapPtr linkExperimenter(const ::omero::model::ExperimenterPtr&, const ::Ice::Context*) = 0;

    virtual void addGroupExperimenterMapToBoth(const ::omero::model::GroupExperimenterMapPtr&, bool, const ::Ice::Context*) = 0;

    virtual ::omero::model::ExperimenterGroupGroupExperimenterMapSeq findGroupExperimenterMap(const ::omero::model::ExperimenterPtr&, const ::Ice::Context*) = 0;

    virtual void unlinkExperimenter(const ::omero::model::ExperimenterPtr&, const ::Ice::Context*) = 0;

    virtual void removeGroupExperimenterMapFromBoth(const ::omero::model::GroupExperimenterMapPtr&, bool, const ::Ice::Context*) = 0;

    virtual ::omero::model::ExperimenterGroupLinkedExperimenterSeq linkedExperimenterList(const ::Ice::Context*) = 0;

    virtual void unloadAnnotationLinks(const ::Ice::Context*) = 0;

    virtual ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context*) = 0;

    virtual ::omero::model::ExperimenterGroupAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context*) = 0;

    virtual void addExperimenterGroupAnnotationLink(const ::omero::model::ExperimenterGroupAnnotationLinkPtr&, const ::Ice::Context*) = 0;

    virtual void addAllExperimenterGroupAnnotationLinkSet(const ::omero::model::ExperimenterGroupAnnotationLinksSeq&, const ::Ice::Context*) = 0;

    virtual void removeExperimenterGroupAnnotationLink(const ::omero::model::ExperimenterGroupAnnotationLinkPtr&, const ::Ice::Context*) = 0;

    virtual void removeAllExperimenterGroupAnnotationLinkSet(const ::omero::model::ExperimenterGroupAnnotationLinksSeq&, const ::Ice::Context*) = 0;

    virtual void clearAnnotationLinks(const ::Ice::Context*) = 0;

    virtual void reloadAnnotationLinks(const ::omero::model::ExperimenterGroupPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context*) = 0;

    virtual ::omero::model::ExperimenterGroupAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*) = 0;

    virtual void addExperimenterGroupAnnotationLinkToBoth(const ::omero::model::ExperimenterGroupAnnotationLinkPtr&, bool, const ::Ice::Context*) = 0;

    virtual ::omero::model::ExperimenterGroupAnnotationLinksSeq findExperimenterGroupAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*) = 0;

    virtual void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*) = 0;

    virtual void removeExperimenterGroupAnnotationLinkFromBoth(const ::omero::model::ExperimenterGroupAnnotationLinkPtr&, bool, const ::Ice::Context*) = 0;

    virtual ::omero::model::ExperimenterGroupLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context*) = 0;

    virtual ::omero::RStringPtr getDescription(const ::Ice::Context*) = 0;

    virtual void setDescription(const ::omero::RStringPtr&, const ::Ice::Context*) = 0;
};

}

}

}

namespace IceDelegateM
{

namespace omero
{

namespace model
{

class ExperimenterGroup : virtual public ::IceDelegate::omero::model::ExperimenterGroup,
                          virtual public ::IceDelegateM::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::RStringPtr getName(const ::Ice::Context*);

    virtual void setName(const ::omero::RStringPtr&, const ::Ice::Context*);

    virtual void unloadGroupExperimenterMap(const ::Ice::Context*);

    virtual ::Ice::Int sizeOfGroupExperimenterMap(const ::Ice::Context*);

    virtual ::omero::model::ExperimenterGroupGroupExperimenterMapSeq copyGroupExperimenterMap(const ::Ice::Context*);

    virtual void addGroupExperimenterMap(const ::omero::model::GroupExperimenterMapPtr&, const ::Ice::Context*);

    virtual void addAllGroupExperimenterMapSet(const ::omero::model::ExperimenterGroupGroupExperimenterMapSeq&, const ::Ice::Context*);

    virtual void removeGroupExperimenterMap(const ::omero::model::GroupExperimenterMapPtr&, const ::Ice::Context*);

    virtual void removeAllGroupExperimenterMapSet(const ::omero::model::ExperimenterGroupGroupExperimenterMapSeq&, const ::Ice::Context*);

    virtual void clearGroupExperimenterMap(const ::Ice::Context*);

    virtual void reloadGroupExperimenterMap(const ::omero::model::ExperimenterGroupPtr&, const ::Ice::Context*);

    virtual ::omero::model::GroupExperimenterMapPtr linkExperimenter(const ::omero::model::ExperimenterPtr&, const ::Ice::Context*);

    virtual void addGroupExperimenterMapToBoth(const ::omero::model::GroupExperimenterMapPtr&, bool, const ::Ice::Context*);

    virtual ::omero::model::ExperimenterGroupGroupExperimenterMapSeq findGroupExperimenterMap(const ::omero::model::ExperimenterPtr&, const ::Ice::Context*);

    virtual void unlinkExperimenter(const ::omero::model::ExperimenterPtr&, const ::Ice::Context*);

    virtual void removeGroupExperimenterMapFromBoth(const ::omero::model::GroupExperimenterMapPtr&, bool, const ::Ice::Context*);

    virtual ::omero::model::ExperimenterGroupLinkedExperimenterSeq linkedExperimenterList(const ::Ice::Context*);

    virtual void unloadAnnotationLinks(const ::Ice::Context*);

    virtual ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context*);

    virtual ::omero::model::ExperimenterGroupAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context*);

    virtual void addExperimenterGroupAnnotationLink(const ::omero::model::ExperimenterGroupAnnotationLinkPtr&, const ::Ice::Context*);

    virtual void addAllExperimenterGroupAnnotationLinkSet(const ::omero::model::ExperimenterGroupAnnotationLinksSeq&, const ::Ice::Context*);

    virtual void removeExperimenterGroupAnnotationLink(const ::omero::model::ExperimenterGroupAnnotationLinkPtr&, const ::Ice::Context*);

    virtual void removeAllExperimenterGroupAnnotationLinkSet(const ::omero::model::ExperimenterGroupAnnotationLinksSeq&, const ::Ice::Context*);

    virtual void clearAnnotationLinks(const ::Ice::Context*);

    virtual void reloadAnnotationLinks(const ::omero::model::ExperimenterGroupPtr&, const ::Ice::Context*);

    virtual ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context*);

    virtual ::omero::model::ExperimenterGroupAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);

    virtual void addExperimenterGroupAnnotationLinkToBoth(const ::omero::model::ExperimenterGroupAnnotationLinkPtr&, bool, const ::Ice::Context*);

    virtual ::omero::model::ExperimenterGroupAnnotationLinksSeq findExperimenterGroupAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);

    virtual void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);

    virtual void removeExperimenterGroupAnnotationLinkFromBoth(const ::omero::model::ExperimenterGroupAnnotationLinkPtr&, bool, const ::Ice::Context*);

    virtual ::omero::model::ExperimenterGroupLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context*);

    virtual ::omero::RStringPtr getDescription(const ::Ice::Context*);

    virtual void setDescription(const ::omero::RStringPtr&, const ::Ice::Context*);
};

}

}

}

namespace IceDelegateD
{

namespace omero
{

namespace model
{

class ExperimenterGroup : virtual public ::IceDelegate::omero::model::ExperimenterGroup,
                          virtual public ::IceDelegateD::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::RStringPtr getName(const ::Ice::Context*);

    virtual void setName(const ::omero::RStringPtr&, const ::Ice::Context*);

    virtual void unloadGroupExperimenterMap(const ::Ice::Context*);

    virtual ::Ice::Int sizeOfGroupExperimenterMap(const ::Ice::Context*);

    virtual ::omero::model::ExperimenterGroupGroupExperimenterMapSeq copyGroupExperimenterMap(const ::Ice::Context*);

    virtual void addGroupExperimenterMap(const ::omero::model::GroupExperimenterMapPtr&, const ::Ice::Context*);

    virtual void addAllGroupExperimenterMapSet(const ::omero::model::ExperimenterGroupGroupExperimenterMapSeq&, const ::Ice::Context*);

    virtual void removeGroupExperimenterMap(const ::omero::model::GroupExperimenterMapPtr&, const ::Ice::Context*);

    virtual void removeAllGroupExperimenterMapSet(const ::omero::model::ExperimenterGroupGroupExperimenterMapSeq&, const ::Ice::Context*);

    virtual void clearGroupExperimenterMap(const ::Ice::Context*);

    virtual void reloadGroupExperimenterMap(const ::omero::model::ExperimenterGroupPtr&, const ::Ice::Context*);

    virtual ::omero::model::GroupExperimenterMapPtr linkExperimenter(const ::omero::model::ExperimenterPtr&, const ::Ice::Context*);

    virtual void addGroupExperimenterMapToBoth(const ::omero::model::GroupExperimenterMapPtr&, bool, const ::Ice::Context*);

    virtual ::omero::model::ExperimenterGroupGroupExperimenterMapSeq findGroupExperimenterMap(const ::omero::model::ExperimenterPtr&, const ::Ice::Context*);

    virtual void unlinkExperimenter(const ::omero::model::ExperimenterPtr&, const ::Ice::Context*);

    virtual void removeGroupExperimenterMapFromBoth(const ::omero::model::GroupExperimenterMapPtr&, bool, const ::Ice::Context*);

    virtual ::omero::model::ExperimenterGroupLinkedExperimenterSeq linkedExperimenterList(const ::Ice::Context*);

    virtual void unloadAnnotationLinks(const ::Ice::Context*);

    virtual ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context*);

    virtual ::omero::model::ExperimenterGroupAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context*);

    virtual void addExperimenterGroupAnnotationLink(const ::omero::model::ExperimenterGroupAnnotationLinkPtr&, const ::Ice::Context*);

    virtual void addAllExperimenterGroupAnnotationLinkSet(const ::omero::model::ExperimenterGroupAnnotationLinksSeq&, const ::Ice::Context*);

    virtual void removeExperimenterGroupAnnotationLink(const ::omero::model::ExperimenterGroupAnnotationLinkPtr&, const ::Ice::Context*);

    virtual void removeAllExperimenterGroupAnnotationLinkSet(const ::omero::model::ExperimenterGroupAnnotationLinksSeq&, const ::Ice::Context*);

    virtual void clearAnnotationLinks(const ::Ice::Context*);

    virtual void reloadAnnotationLinks(const ::omero::model::ExperimenterGroupPtr&, const ::Ice::Context*);

    virtual ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context*);

    virtual ::omero::model::ExperimenterGroupAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);

    virtual void addExperimenterGroupAnnotationLinkToBoth(const ::omero::model::ExperimenterGroupAnnotationLinkPtr&, bool, const ::Ice::Context*);

    virtual ::omero::model::ExperimenterGroupAnnotationLinksSeq findExperimenterGroupAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);

    virtual void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);

    virtual void removeExperimenterGroupAnnotationLinkFromBoth(const ::omero::model::ExperimenterGroupAnnotationLinkPtr&, bool, const ::Ice::Context*);

    virtual ::omero::model::ExperimenterGroupLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context*);

    virtual ::omero::RStringPtr getDescription(const ::Ice::Context*);

    virtual void setDescription(const ::omero::RStringPtr&, const ::Ice::Context*);
};

}

}

}

namespace omero
{

namespace model
{

class ExperimenterGroup : public ::omero::model::IObject
{
public:

    typedef ExperimenterGroupPrx ProxyType;
    typedef ExperimenterGroupPtr PointerType;
    
    ExperimenterGroup() {}
    ExperimenterGroup(const ::omero::RLongPtr&, const ::omero::model::DetailsPtr&, bool, const ::omero::RIntPtr&, const ::omero::RStringPtr&, const ::omero::model::ExperimenterGroupGroupExperimenterMapSeq&, bool, const ::omero::model::ExperimenterGroupAnnotationLinksSeq&, bool, const ::omero::sys::CountMap&, const ::omero::RStringPtr&);
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    virtual ::omero::RIntPtr getVersion(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getName(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getName(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setName(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setName(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unloadGroupExperimenterMap(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unloadGroupExperimenterMap(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int sizeOfGroupExperimenterMap(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sizeOfGroupExperimenterMap(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::ExperimenterGroupGroupExperimenterMapSeq copyGroupExperimenterMap(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___copyGroupExperimenterMap(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addGroupExperimenterMap(const ::omero::model::GroupExperimenterMapPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addGroupExperimenterMap(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addAllGroupExperimenterMapSet(const ::omero::model::ExperimenterGroupGroupExperimenterMapSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addAllGroupExperimenterMapSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeGroupExperimenterMap(const ::omero::model::GroupExperimenterMapPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeGroupExperimenterMap(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeAllGroupExperimenterMapSet(const ::omero::model::ExperimenterGroupGroupExperimenterMapSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeAllGroupExperimenterMapSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void clearGroupExperimenterMap(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___clearGroupExperimenterMap(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reloadGroupExperimenterMap(const ::omero::model::ExperimenterGroupPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reloadGroupExperimenterMap(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::GroupExperimenterMapPtr linkExperimenter(const ::omero::model::ExperimenterPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___linkExperimenter(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addGroupExperimenterMapToBoth(const ::omero::model::GroupExperimenterMapPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addGroupExperimenterMapToBoth(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::ExperimenterGroupGroupExperimenterMapSeq findGroupExperimenterMap(const ::omero::model::ExperimenterPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___findGroupExperimenterMap(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unlinkExperimenter(const ::omero::model::ExperimenterPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unlinkExperimenter(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeGroupExperimenterMapFromBoth(const ::omero::model::GroupExperimenterMapPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeGroupExperimenterMapFromBoth(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::ExperimenterGroupLinkedExperimenterSeq linkedExperimenterList(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___linkedExperimenterList(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unloadAnnotationLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unloadAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sizeOfAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::ExperimenterGroupAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___copyAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addExperimenterGroupAnnotationLink(const ::omero::model::ExperimenterGroupAnnotationLinkPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addExperimenterGroupAnnotationLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addAllExperimenterGroupAnnotationLinkSet(const ::omero::model::ExperimenterGroupAnnotationLinksSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addAllExperimenterGroupAnnotationLinkSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeExperimenterGroupAnnotationLink(const ::omero::model::ExperimenterGroupAnnotationLinkPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeExperimenterGroupAnnotationLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeAllExperimenterGroupAnnotationLinkSet(const ::omero::model::ExperimenterGroupAnnotationLinksSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeAllExperimenterGroupAnnotationLinkSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void clearAnnotationLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___clearAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reloadAnnotationLinks(const ::omero::model::ExperimenterGroupPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reloadAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getAnnotationLinksCountPerOwner(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::ExperimenterGroupAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___linkAnnotation(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addExperimenterGroupAnnotationLinkToBoth(const ::omero::model::ExperimenterGroupAnnotationLinkPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addExperimenterGroupAnnotationLinkToBoth(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::ExperimenterGroupAnnotationLinksSeq findExperimenterGroupAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___findExperimenterGroupAnnotationLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unlinkAnnotation(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeExperimenterGroupAnnotationLinkFromBoth(const ::omero::model::ExperimenterGroupAnnotationLinkPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeExperimenterGroupAnnotationLinkFromBoth(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::ExperimenterGroupLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___linkedAnnotationList(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getDescription(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getDescription(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setDescription(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setDescription(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif

protected:

    ::omero::RIntPtr version;

    ::omero::RStringPtr name;

    ::omero::model::ExperimenterGroupGroupExperimenterMapSeq groupExperimenterMapSeq;

    bool groupExperimenterMapLoaded;

    ::omero::model::ExperimenterGroupAnnotationLinksSeq annotationLinksSeq;

    bool annotationLinksLoaded;

    ::omero::sys::CountMap annotationLinksCountPerOwner;

    ::omero::RStringPtr description;
};

inline bool operator==(const ExperimenterGroup& l, const ExperimenterGroup& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const ExperimenterGroup& l, const ExperimenterGroup& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

}

namespace omero
{

namespace model
{

template<class T>
class CallbackNC_ExperimenterGroup_getVersion : public Callback_ExperimenterGroup_getVersion_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RIntPtr&);

    CallbackNC_ExperimenterGroup_getVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ExperimenterGroupPrx __proxy = ::omero::model::ExperimenterGroupPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_ExperimenterGroup_getVersionPtr
newCallback_ExperimenterGroup_getVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_getVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_getVersionPtr
newCallback_ExperimenterGroup_getVersion(T* instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_getVersion<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ExperimenterGroup_getVersion : public Callback_ExperimenterGroup_getVersion_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RIntPtr&, const CT&);

    Callback_ExperimenterGroup_getVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ExperimenterGroupPrx __proxy = ::omero::model::ExperimenterGroupPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ExperimenterGroup_getVersionPtr
newCallback_ExperimenterGroup_getVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_getVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_getVersionPtr
newCallback_ExperimenterGroup_getVersion(T* instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_getVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ExperimenterGroup_setVersion : public Callback_ExperimenterGroup_setVersion_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ExperimenterGroup_setVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ExperimenterGroup_setVersionPtr
newCallback_ExperimenterGroup_setVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_setVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_setVersionPtr
newCallback_ExperimenterGroup_setVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_setVersion<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_setVersionPtr
newCallback_ExperimenterGroup_setVersion(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_setVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_setVersionPtr
newCallback_ExperimenterGroup_setVersion(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_setVersion<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ExperimenterGroup_setVersion : public Callback_ExperimenterGroup_setVersion_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ExperimenterGroup_setVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ExperimenterGroup_setVersionPtr
newCallback_ExperimenterGroup_setVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_setVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_setVersionPtr
newCallback_ExperimenterGroup_setVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_setVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_setVersionPtr
newCallback_ExperimenterGroup_setVersion(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_setVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_setVersionPtr
newCallback_ExperimenterGroup_setVersion(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_setVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ExperimenterGroup_getName : public Callback_ExperimenterGroup_getName_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_ExperimenterGroup_getName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ExperimenterGroupPrx __proxy = ::omero::model::ExperimenterGroupPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getName(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_ExperimenterGroup_getNamePtr
newCallback_ExperimenterGroup_getName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_getName<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_getNamePtr
newCallback_ExperimenterGroup_getName(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_getName<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ExperimenterGroup_getName : public Callback_ExperimenterGroup_getName_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_ExperimenterGroup_getName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ExperimenterGroupPrx __proxy = ::omero::model::ExperimenterGroupPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getName(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ExperimenterGroup_getNamePtr
newCallback_ExperimenterGroup_getName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_getName<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_getNamePtr
newCallback_ExperimenterGroup_getName(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_getName<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ExperimenterGroup_setName : public Callback_ExperimenterGroup_setName_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ExperimenterGroup_setName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ExperimenterGroup_setNamePtr
newCallback_ExperimenterGroup_setName(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_setName<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_setNamePtr
newCallback_ExperimenterGroup_setName(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_setName<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_setNamePtr
newCallback_ExperimenterGroup_setName(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_setName<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_setNamePtr
newCallback_ExperimenterGroup_setName(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_setName<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ExperimenterGroup_setName : public Callback_ExperimenterGroup_setName_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ExperimenterGroup_setName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ExperimenterGroup_setNamePtr
newCallback_ExperimenterGroup_setName(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_setName<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_setNamePtr
newCallback_ExperimenterGroup_setName(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_setName<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_setNamePtr
newCallback_ExperimenterGroup_setName(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_setName<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_setNamePtr
newCallback_ExperimenterGroup_setName(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_setName<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ExperimenterGroup_unloadGroupExperimenterMap : public Callback_ExperimenterGroup_unloadGroupExperimenterMap_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ExperimenterGroup_unloadGroupExperimenterMap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ExperimenterGroup_unloadGroupExperimenterMapPtr
newCallback_ExperimenterGroup_unloadGroupExperimenterMap(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_unloadGroupExperimenterMap<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_unloadGroupExperimenterMapPtr
newCallback_ExperimenterGroup_unloadGroupExperimenterMap(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_unloadGroupExperimenterMap<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_unloadGroupExperimenterMapPtr
newCallback_ExperimenterGroup_unloadGroupExperimenterMap(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_unloadGroupExperimenterMap<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_unloadGroupExperimenterMapPtr
newCallback_ExperimenterGroup_unloadGroupExperimenterMap(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_unloadGroupExperimenterMap<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ExperimenterGroup_unloadGroupExperimenterMap : public Callback_ExperimenterGroup_unloadGroupExperimenterMap_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ExperimenterGroup_unloadGroupExperimenterMap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ExperimenterGroup_unloadGroupExperimenterMapPtr
newCallback_ExperimenterGroup_unloadGroupExperimenterMap(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_unloadGroupExperimenterMap<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_unloadGroupExperimenterMapPtr
newCallback_ExperimenterGroup_unloadGroupExperimenterMap(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_unloadGroupExperimenterMap<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_unloadGroupExperimenterMapPtr
newCallback_ExperimenterGroup_unloadGroupExperimenterMap(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_unloadGroupExperimenterMap<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_unloadGroupExperimenterMapPtr
newCallback_ExperimenterGroup_unloadGroupExperimenterMap(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_unloadGroupExperimenterMap<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ExperimenterGroup_sizeOfGroupExperimenterMap : public Callback_ExperimenterGroup_sizeOfGroupExperimenterMap_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_ExperimenterGroup_sizeOfGroupExperimenterMap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ExperimenterGroupPrx __proxy = ::omero::model::ExperimenterGroupPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfGroupExperimenterMap(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_ExperimenterGroup_sizeOfGroupExperimenterMapPtr
newCallback_ExperimenterGroup_sizeOfGroupExperimenterMap(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_sizeOfGroupExperimenterMap<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_sizeOfGroupExperimenterMapPtr
newCallback_ExperimenterGroup_sizeOfGroupExperimenterMap(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_sizeOfGroupExperimenterMap<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ExperimenterGroup_sizeOfGroupExperimenterMap : public Callback_ExperimenterGroup_sizeOfGroupExperimenterMap_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_ExperimenterGroup_sizeOfGroupExperimenterMap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ExperimenterGroupPrx __proxy = ::omero::model::ExperimenterGroupPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfGroupExperimenterMap(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ExperimenterGroup_sizeOfGroupExperimenterMapPtr
newCallback_ExperimenterGroup_sizeOfGroupExperimenterMap(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_sizeOfGroupExperimenterMap<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_sizeOfGroupExperimenterMapPtr
newCallback_ExperimenterGroup_sizeOfGroupExperimenterMap(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_sizeOfGroupExperimenterMap<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ExperimenterGroup_copyGroupExperimenterMap : public Callback_ExperimenterGroup_copyGroupExperimenterMap_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::ExperimenterGroupGroupExperimenterMapSeq&);

    CallbackNC_ExperimenterGroup_copyGroupExperimenterMap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ExperimenterGroupPrx __proxy = ::omero::model::ExperimenterGroupPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ExperimenterGroupGroupExperimenterMapSeq __ret;
        try
        {
            __ret = __proxy->end_copyGroupExperimenterMap(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_ExperimenterGroup_copyGroupExperimenterMapPtr
newCallback_ExperimenterGroup_copyGroupExperimenterMap(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ExperimenterGroupGroupExperimenterMapSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_copyGroupExperimenterMap<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_copyGroupExperimenterMapPtr
newCallback_ExperimenterGroup_copyGroupExperimenterMap(T* instance, void (T::*cb)(const ::omero::model::ExperimenterGroupGroupExperimenterMapSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_copyGroupExperimenterMap<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ExperimenterGroup_copyGroupExperimenterMap : public Callback_ExperimenterGroup_copyGroupExperimenterMap_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::ExperimenterGroupGroupExperimenterMapSeq&, const CT&);

    Callback_ExperimenterGroup_copyGroupExperimenterMap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ExperimenterGroupPrx __proxy = ::omero::model::ExperimenterGroupPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ExperimenterGroupGroupExperimenterMapSeq __ret;
        try
        {
            __ret = __proxy->end_copyGroupExperimenterMap(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ExperimenterGroup_copyGroupExperimenterMapPtr
newCallback_ExperimenterGroup_copyGroupExperimenterMap(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ExperimenterGroupGroupExperimenterMapSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_copyGroupExperimenterMap<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_copyGroupExperimenterMapPtr
newCallback_ExperimenterGroup_copyGroupExperimenterMap(T* instance, void (T::*cb)(const ::omero::model::ExperimenterGroupGroupExperimenterMapSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_copyGroupExperimenterMap<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ExperimenterGroup_addGroupExperimenterMap : public Callback_ExperimenterGroup_addGroupExperimenterMap_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ExperimenterGroup_addGroupExperimenterMap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ExperimenterGroup_addGroupExperimenterMapPtr
newCallback_ExperimenterGroup_addGroupExperimenterMap(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_addGroupExperimenterMap<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_addGroupExperimenterMapPtr
newCallback_ExperimenterGroup_addGroupExperimenterMap(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_addGroupExperimenterMap<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_addGroupExperimenterMapPtr
newCallback_ExperimenterGroup_addGroupExperimenterMap(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_addGroupExperimenterMap<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_addGroupExperimenterMapPtr
newCallback_ExperimenterGroup_addGroupExperimenterMap(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_addGroupExperimenterMap<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ExperimenterGroup_addGroupExperimenterMap : public Callback_ExperimenterGroup_addGroupExperimenterMap_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ExperimenterGroup_addGroupExperimenterMap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ExperimenterGroup_addGroupExperimenterMapPtr
newCallback_ExperimenterGroup_addGroupExperimenterMap(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_addGroupExperimenterMap<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_addGroupExperimenterMapPtr
newCallback_ExperimenterGroup_addGroupExperimenterMap(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_addGroupExperimenterMap<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_addGroupExperimenterMapPtr
newCallback_ExperimenterGroup_addGroupExperimenterMap(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_addGroupExperimenterMap<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_addGroupExperimenterMapPtr
newCallback_ExperimenterGroup_addGroupExperimenterMap(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_addGroupExperimenterMap<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ExperimenterGroup_addAllGroupExperimenterMapSet : public Callback_ExperimenterGroup_addAllGroupExperimenterMapSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ExperimenterGroup_addAllGroupExperimenterMapSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ExperimenterGroup_addAllGroupExperimenterMapSetPtr
newCallback_ExperimenterGroup_addAllGroupExperimenterMapSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_addAllGroupExperimenterMapSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_addAllGroupExperimenterMapSetPtr
newCallback_ExperimenterGroup_addAllGroupExperimenterMapSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_addAllGroupExperimenterMapSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_addAllGroupExperimenterMapSetPtr
newCallback_ExperimenterGroup_addAllGroupExperimenterMapSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_addAllGroupExperimenterMapSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_addAllGroupExperimenterMapSetPtr
newCallback_ExperimenterGroup_addAllGroupExperimenterMapSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_addAllGroupExperimenterMapSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ExperimenterGroup_addAllGroupExperimenterMapSet : public Callback_ExperimenterGroup_addAllGroupExperimenterMapSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ExperimenterGroup_addAllGroupExperimenterMapSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ExperimenterGroup_addAllGroupExperimenterMapSetPtr
newCallback_ExperimenterGroup_addAllGroupExperimenterMapSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_addAllGroupExperimenterMapSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_addAllGroupExperimenterMapSetPtr
newCallback_ExperimenterGroup_addAllGroupExperimenterMapSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_addAllGroupExperimenterMapSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_addAllGroupExperimenterMapSetPtr
newCallback_ExperimenterGroup_addAllGroupExperimenterMapSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_addAllGroupExperimenterMapSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_addAllGroupExperimenterMapSetPtr
newCallback_ExperimenterGroup_addAllGroupExperimenterMapSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_addAllGroupExperimenterMapSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ExperimenterGroup_removeGroupExperimenterMap : public Callback_ExperimenterGroup_removeGroupExperimenterMap_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ExperimenterGroup_removeGroupExperimenterMap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ExperimenterGroup_removeGroupExperimenterMapPtr
newCallback_ExperimenterGroup_removeGroupExperimenterMap(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_removeGroupExperimenterMap<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_removeGroupExperimenterMapPtr
newCallback_ExperimenterGroup_removeGroupExperimenterMap(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_removeGroupExperimenterMap<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_removeGroupExperimenterMapPtr
newCallback_ExperimenterGroup_removeGroupExperimenterMap(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_removeGroupExperimenterMap<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_removeGroupExperimenterMapPtr
newCallback_ExperimenterGroup_removeGroupExperimenterMap(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_removeGroupExperimenterMap<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ExperimenterGroup_removeGroupExperimenterMap : public Callback_ExperimenterGroup_removeGroupExperimenterMap_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ExperimenterGroup_removeGroupExperimenterMap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ExperimenterGroup_removeGroupExperimenterMapPtr
newCallback_ExperimenterGroup_removeGroupExperimenterMap(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_removeGroupExperimenterMap<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_removeGroupExperimenterMapPtr
newCallback_ExperimenterGroup_removeGroupExperimenterMap(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_removeGroupExperimenterMap<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_removeGroupExperimenterMapPtr
newCallback_ExperimenterGroup_removeGroupExperimenterMap(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_removeGroupExperimenterMap<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_removeGroupExperimenterMapPtr
newCallback_ExperimenterGroup_removeGroupExperimenterMap(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_removeGroupExperimenterMap<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ExperimenterGroup_removeAllGroupExperimenterMapSet : public Callback_ExperimenterGroup_removeAllGroupExperimenterMapSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ExperimenterGroup_removeAllGroupExperimenterMapSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ExperimenterGroup_removeAllGroupExperimenterMapSetPtr
newCallback_ExperimenterGroup_removeAllGroupExperimenterMapSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_removeAllGroupExperimenterMapSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_removeAllGroupExperimenterMapSetPtr
newCallback_ExperimenterGroup_removeAllGroupExperimenterMapSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_removeAllGroupExperimenterMapSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_removeAllGroupExperimenterMapSetPtr
newCallback_ExperimenterGroup_removeAllGroupExperimenterMapSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_removeAllGroupExperimenterMapSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_removeAllGroupExperimenterMapSetPtr
newCallback_ExperimenterGroup_removeAllGroupExperimenterMapSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_removeAllGroupExperimenterMapSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ExperimenterGroup_removeAllGroupExperimenterMapSet : public Callback_ExperimenterGroup_removeAllGroupExperimenterMapSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ExperimenterGroup_removeAllGroupExperimenterMapSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ExperimenterGroup_removeAllGroupExperimenterMapSetPtr
newCallback_ExperimenterGroup_removeAllGroupExperimenterMapSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_removeAllGroupExperimenterMapSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_removeAllGroupExperimenterMapSetPtr
newCallback_ExperimenterGroup_removeAllGroupExperimenterMapSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_removeAllGroupExperimenterMapSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_removeAllGroupExperimenterMapSetPtr
newCallback_ExperimenterGroup_removeAllGroupExperimenterMapSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_removeAllGroupExperimenterMapSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_removeAllGroupExperimenterMapSetPtr
newCallback_ExperimenterGroup_removeAllGroupExperimenterMapSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_removeAllGroupExperimenterMapSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ExperimenterGroup_clearGroupExperimenterMap : public Callback_ExperimenterGroup_clearGroupExperimenterMap_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ExperimenterGroup_clearGroupExperimenterMap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ExperimenterGroup_clearGroupExperimenterMapPtr
newCallback_ExperimenterGroup_clearGroupExperimenterMap(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_clearGroupExperimenterMap<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_clearGroupExperimenterMapPtr
newCallback_ExperimenterGroup_clearGroupExperimenterMap(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_clearGroupExperimenterMap<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_clearGroupExperimenterMapPtr
newCallback_ExperimenterGroup_clearGroupExperimenterMap(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_clearGroupExperimenterMap<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_clearGroupExperimenterMapPtr
newCallback_ExperimenterGroup_clearGroupExperimenterMap(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_clearGroupExperimenterMap<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ExperimenterGroup_clearGroupExperimenterMap : public Callback_ExperimenterGroup_clearGroupExperimenterMap_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ExperimenterGroup_clearGroupExperimenterMap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ExperimenterGroup_clearGroupExperimenterMapPtr
newCallback_ExperimenterGroup_clearGroupExperimenterMap(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_clearGroupExperimenterMap<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_clearGroupExperimenterMapPtr
newCallback_ExperimenterGroup_clearGroupExperimenterMap(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_clearGroupExperimenterMap<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_clearGroupExperimenterMapPtr
newCallback_ExperimenterGroup_clearGroupExperimenterMap(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_clearGroupExperimenterMap<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_clearGroupExperimenterMapPtr
newCallback_ExperimenterGroup_clearGroupExperimenterMap(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_clearGroupExperimenterMap<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ExperimenterGroup_reloadGroupExperimenterMap : public Callback_ExperimenterGroup_reloadGroupExperimenterMap_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ExperimenterGroup_reloadGroupExperimenterMap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ExperimenterGroup_reloadGroupExperimenterMapPtr
newCallback_ExperimenterGroup_reloadGroupExperimenterMap(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_reloadGroupExperimenterMap<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_reloadGroupExperimenterMapPtr
newCallback_ExperimenterGroup_reloadGroupExperimenterMap(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_reloadGroupExperimenterMap<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_reloadGroupExperimenterMapPtr
newCallback_ExperimenterGroup_reloadGroupExperimenterMap(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_reloadGroupExperimenterMap<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_reloadGroupExperimenterMapPtr
newCallback_ExperimenterGroup_reloadGroupExperimenterMap(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_reloadGroupExperimenterMap<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ExperimenterGroup_reloadGroupExperimenterMap : public Callback_ExperimenterGroup_reloadGroupExperimenterMap_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ExperimenterGroup_reloadGroupExperimenterMap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ExperimenterGroup_reloadGroupExperimenterMapPtr
newCallback_ExperimenterGroup_reloadGroupExperimenterMap(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_reloadGroupExperimenterMap<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_reloadGroupExperimenterMapPtr
newCallback_ExperimenterGroup_reloadGroupExperimenterMap(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_reloadGroupExperimenterMap<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_reloadGroupExperimenterMapPtr
newCallback_ExperimenterGroup_reloadGroupExperimenterMap(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_reloadGroupExperimenterMap<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_reloadGroupExperimenterMapPtr
newCallback_ExperimenterGroup_reloadGroupExperimenterMap(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_reloadGroupExperimenterMap<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ExperimenterGroup_linkExperimenter : public Callback_ExperimenterGroup_linkExperimenter_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::GroupExperimenterMapPtr&);

    CallbackNC_ExperimenterGroup_linkExperimenter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ExperimenterGroupPrx __proxy = ::omero::model::ExperimenterGroupPrx::uncheckedCast(__result->getProxy());
        ::omero::model::GroupExperimenterMapPtr __ret;
        try
        {
            __ret = __proxy->end_linkExperimenter(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_ExperimenterGroup_linkExperimenterPtr
newCallback_ExperimenterGroup_linkExperimenter(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::GroupExperimenterMapPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_linkExperimenter<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_linkExperimenterPtr
newCallback_ExperimenterGroup_linkExperimenter(T* instance, void (T::*cb)(const ::omero::model::GroupExperimenterMapPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_linkExperimenter<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ExperimenterGroup_linkExperimenter : public Callback_ExperimenterGroup_linkExperimenter_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::GroupExperimenterMapPtr&, const CT&);

    Callback_ExperimenterGroup_linkExperimenter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ExperimenterGroupPrx __proxy = ::omero::model::ExperimenterGroupPrx::uncheckedCast(__result->getProxy());
        ::omero::model::GroupExperimenterMapPtr __ret;
        try
        {
            __ret = __proxy->end_linkExperimenter(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ExperimenterGroup_linkExperimenterPtr
newCallback_ExperimenterGroup_linkExperimenter(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::GroupExperimenterMapPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_linkExperimenter<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_linkExperimenterPtr
newCallback_ExperimenterGroup_linkExperimenter(T* instance, void (T::*cb)(const ::omero::model::GroupExperimenterMapPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_linkExperimenter<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ExperimenterGroup_addGroupExperimenterMapToBoth : public Callback_ExperimenterGroup_addGroupExperimenterMapToBoth_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ExperimenterGroup_addGroupExperimenterMapToBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ExperimenterGroup_addGroupExperimenterMapToBothPtr
newCallback_ExperimenterGroup_addGroupExperimenterMapToBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_addGroupExperimenterMapToBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_addGroupExperimenterMapToBothPtr
newCallback_ExperimenterGroup_addGroupExperimenterMapToBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_addGroupExperimenterMapToBoth<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_addGroupExperimenterMapToBothPtr
newCallback_ExperimenterGroup_addGroupExperimenterMapToBoth(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_addGroupExperimenterMapToBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_addGroupExperimenterMapToBothPtr
newCallback_ExperimenterGroup_addGroupExperimenterMapToBoth(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_addGroupExperimenterMapToBoth<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ExperimenterGroup_addGroupExperimenterMapToBoth : public Callback_ExperimenterGroup_addGroupExperimenterMapToBoth_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ExperimenterGroup_addGroupExperimenterMapToBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ExperimenterGroup_addGroupExperimenterMapToBothPtr
newCallback_ExperimenterGroup_addGroupExperimenterMapToBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_addGroupExperimenterMapToBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_addGroupExperimenterMapToBothPtr
newCallback_ExperimenterGroup_addGroupExperimenterMapToBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_addGroupExperimenterMapToBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_addGroupExperimenterMapToBothPtr
newCallback_ExperimenterGroup_addGroupExperimenterMapToBoth(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_addGroupExperimenterMapToBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_addGroupExperimenterMapToBothPtr
newCallback_ExperimenterGroup_addGroupExperimenterMapToBoth(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_addGroupExperimenterMapToBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ExperimenterGroup_findGroupExperimenterMap : public Callback_ExperimenterGroup_findGroupExperimenterMap_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::ExperimenterGroupGroupExperimenterMapSeq&);

    CallbackNC_ExperimenterGroup_findGroupExperimenterMap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ExperimenterGroupPrx __proxy = ::omero::model::ExperimenterGroupPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ExperimenterGroupGroupExperimenterMapSeq __ret;
        try
        {
            __ret = __proxy->end_findGroupExperimenterMap(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_ExperimenterGroup_findGroupExperimenterMapPtr
newCallback_ExperimenterGroup_findGroupExperimenterMap(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ExperimenterGroupGroupExperimenterMapSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_findGroupExperimenterMap<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_findGroupExperimenterMapPtr
newCallback_ExperimenterGroup_findGroupExperimenterMap(T* instance, void (T::*cb)(const ::omero::model::ExperimenterGroupGroupExperimenterMapSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_findGroupExperimenterMap<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ExperimenterGroup_findGroupExperimenterMap : public Callback_ExperimenterGroup_findGroupExperimenterMap_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::ExperimenterGroupGroupExperimenterMapSeq&, const CT&);

    Callback_ExperimenterGroup_findGroupExperimenterMap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ExperimenterGroupPrx __proxy = ::omero::model::ExperimenterGroupPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ExperimenterGroupGroupExperimenterMapSeq __ret;
        try
        {
            __ret = __proxy->end_findGroupExperimenterMap(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ExperimenterGroup_findGroupExperimenterMapPtr
newCallback_ExperimenterGroup_findGroupExperimenterMap(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ExperimenterGroupGroupExperimenterMapSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_findGroupExperimenterMap<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_findGroupExperimenterMapPtr
newCallback_ExperimenterGroup_findGroupExperimenterMap(T* instance, void (T::*cb)(const ::omero::model::ExperimenterGroupGroupExperimenterMapSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_findGroupExperimenterMap<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ExperimenterGroup_unlinkExperimenter : public Callback_ExperimenterGroup_unlinkExperimenter_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ExperimenterGroup_unlinkExperimenter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ExperimenterGroup_unlinkExperimenterPtr
newCallback_ExperimenterGroup_unlinkExperimenter(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_unlinkExperimenter<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_unlinkExperimenterPtr
newCallback_ExperimenterGroup_unlinkExperimenter(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_unlinkExperimenter<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_unlinkExperimenterPtr
newCallback_ExperimenterGroup_unlinkExperimenter(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_unlinkExperimenter<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_unlinkExperimenterPtr
newCallback_ExperimenterGroup_unlinkExperimenter(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_unlinkExperimenter<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ExperimenterGroup_unlinkExperimenter : public Callback_ExperimenterGroup_unlinkExperimenter_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ExperimenterGroup_unlinkExperimenter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ExperimenterGroup_unlinkExperimenterPtr
newCallback_ExperimenterGroup_unlinkExperimenter(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_unlinkExperimenter<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_unlinkExperimenterPtr
newCallback_ExperimenterGroup_unlinkExperimenter(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_unlinkExperimenter<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_unlinkExperimenterPtr
newCallback_ExperimenterGroup_unlinkExperimenter(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_unlinkExperimenter<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_unlinkExperimenterPtr
newCallback_ExperimenterGroup_unlinkExperimenter(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_unlinkExperimenter<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ExperimenterGroup_removeGroupExperimenterMapFromBoth : public Callback_ExperimenterGroup_removeGroupExperimenterMapFromBoth_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ExperimenterGroup_removeGroupExperimenterMapFromBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ExperimenterGroup_removeGroupExperimenterMapFromBothPtr
newCallback_ExperimenterGroup_removeGroupExperimenterMapFromBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_removeGroupExperimenterMapFromBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_removeGroupExperimenterMapFromBothPtr
newCallback_ExperimenterGroup_removeGroupExperimenterMapFromBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_removeGroupExperimenterMapFromBoth<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_removeGroupExperimenterMapFromBothPtr
newCallback_ExperimenterGroup_removeGroupExperimenterMapFromBoth(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_removeGroupExperimenterMapFromBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_removeGroupExperimenterMapFromBothPtr
newCallback_ExperimenterGroup_removeGroupExperimenterMapFromBoth(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_removeGroupExperimenterMapFromBoth<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ExperimenterGroup_removeGroupExperimenterMapFromBoth : public Callback_ExperimenterGroup_removeGroupExperimenterMapFromBoth_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ExperimenterGroup_removeGroupExperimenterMapFromBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ExperimenterGroup_removeGroupExperimenterMapFromBothPtr
newCallback_ExperimenterGroup_removeGroupExperimenterMapFromBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_removeGroupExperimenterMapFromBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_removeGroupExperimenterMapFromBothPtr
newCallback_ExperimenterGroup_removeGroupExperimenterMapFromBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_removeGroupExperimenterMapFromBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_removeGroupExperimenterMapFromBothPtr
newCallback_ExperimenterGroup_removeGroupExperimenterMapFromBoth(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_removeGroupExperimenterMapFromBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_removeGroupExperimenterMapFromBothPtr
newCallback_ExperimenterGroup_removeGroupExperimenterMapFromBoth(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_removeGroupExperimenterMapFromBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ExperimenterGroup_linkedExperimenterList : public Callback_ExperimenterGroup_linkedExperimenterList_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::ExperimenterGroupLinkedExperimenterSeq&);

    CallbackNC_ExperimenterGroup_linkedExperimenterList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ExperimenterGroupPrx __proxy = ::omero::model::ExperimenterGroupPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ExperimenterGroupLinkedExperimenterSeq __ret;
        try
        {
            __ret = __proxy->end_linkedExperimenterList(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_ExperimenterGroup_linkedExperimenterListPtr
newCallback_ExperimenterGroup_linkedExperimenterList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ExperimenterGroupLinkedExperimenterSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_linkedExperimenterList<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_linkedExperimenterListPtr
newCallback_ExperimenterGroup_linkedExperimenterList(T* instance, void (T::*cb)(const ::omero::model::ExperimenterGroupLinkedExperimenterSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_linkedExperimenterList<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ExperimenterGroup_linkedExperimenterList : public Callback_ExperimenterGroup_linkedExperimenterList_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::ExperimenterGroupLinkedExperimenterSeq&, const CT&);

    Callback_ExperimenterGroup_linkedExperimenterList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ExperimenterGroupPrx __proxy = ::omero::model::ExperimenterGroupPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ExperimenterGroupLinkedExperimenterSeq __ret;
        try
        {
            __ret = __proxy->end_linkedExperimenterList(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ExperimenterGroup_linkedExperimenterListPtr
newCallback_ExperimenterGroup_linkedExperimenterList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ExperimenterGroupLinkedExperimenterSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_linkedExperimenterList<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_linkedExperimenterListPtr
newCallback_ExperimenterGroup_linkedExperimenterList(T* instance, void (T::*cb)(const ::omero::model::ExperimenterGroupLinkedExperimenterSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_linkedExperimenterList<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ExperimenterGroup_unloadAnnotationLinks : public Callback_ExperimenterGroup_unloadAnnotationLinks_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ExperimenterGroup_unloadAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ExperimenterGroup_unloadAnnotationLinksPtr
newCallback_ExperimenterGroup_unloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_unloadAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_unloadAnnotationLinksPtr
newCallback_ExperimenterGroup_unloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_unloadAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_unloadAnnotationLinksPtr
newCallback_ExperimenterGroup_unloadAnnotationLinks(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_unloadAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_unloadAnnotationLinksPtr
newCallback_ExperimenterGroup_unloadAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_unloadAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ExperimenterGroup_unloadAnnotationLinks : public Callback_ExperimenterGroup_unloadAnnotationLinks_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ExperimenterGroup_unloadAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ExperimenterGroup_unloadAnnotationLinksPtr
newCallback_ExperimenterGroup_unloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_unloadAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_unloadAnnotationLinksPtr
newCallback_ExperimenterGroup_unloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_unloadAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_unloadAnnotationLinksPtr
newCallback_ExperimenterGroup_unloadAnnotationLinks(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_unloadAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_unloadAnnotationLinksPtr
newCallback_ExperimenterGroup_unloadAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_unloadAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ExperimenterGroup_sizeOfAnnotationLinks : public Callback_ExperimenterGroup_sizeOfAnnotationLinks_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_ExperimenterGroup_sizeOfAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ExperimenterGroupPrx __proxy = ::omero::model::ExperimenterGroupPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfAnnotationLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_ExperimenterGroup_sizeOfAnnotationLinksPtr
newCallback_ExperimenterGroup_sizeOfAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_sizeOfAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_sizeOfAnnotationLinksPtr
newCallback_ExperimenterGroup_sizeOfAnnotationLinks(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_sizeOfAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ExperimenterGroup_sizeOfAnnotationLinks : public Callback_ExperimenterGroup_sizeOfAnnotationLinks_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_ExperimenterGroup_sizeOfAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ExperimenterGroupPrx __proxy = ::omero::model::ExperimenterGroupPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfAnnotationLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ExperimenterGroup_sizeOfAnnotationLinksPtr
newCallback_ExperimenterGroup_sizeOfAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_sizeOfAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_sizeOfAnnotationLinksPtr
newCallback_ExperimenterGroup_sizeOfAnnotationLinks(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_sizeOfAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ExperimenterGroup_copyAnnotationLinks : public Callback_ExperimenterGroup_copyAnnotationLinks_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::ExperimenterGroupAnnotationLinksSeq&);

    CallbackNC_ExperimenterGroup_copyAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ExperimenterGroupPrx __proxy = ::omero::model::ExperimenterGroupPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ExperimenterGroupAnnotationLinksSeq __ret;
        try
        {
            __ret = __proxy->end_copyAnnotationLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_ExperimenterGroup_copyAnnotationLinksPtr
newCallback_ExperimenterGroup_copyAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ExperimenterGroupAnnotationLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_copyAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_copyAnnotationLinksPtr
newCallback_ExperimenterGroup_copyAnnotationLinks(T* instance, void (T::*cb)(const ::omero::model::ExperimenterGroupAnnotationLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_copyAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ExperimenterGroup_copyAnnotationLinks : public Callback_ExperimenterGroup_copyAnnotationLinks_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::ExperimenterGroupAnnotationLinksSeq&, const CT&);

    Callback_ExperimenterGroup_copyAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ExperimenterGroupPrx __proxy = ::omero::model::ExperimenterGroupPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ExperimenterGroupAnnotationLinksSeq __ret;
        try
        {
            __ret = __proxy->end_copyAnnotationLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ExperimenterGroup_copyAnnotationLinksPtr
newCallback_ExperimenterGroup_copyAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ExperimenterGroupAnnotationLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_copyAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_copyAnnotationLinksPtr
newCallback_ExperimenterGroup_copyAnnotationLinks(T* instance, void (T::*cb)(const ::omero::model::ExperimenterGroupAnnotationLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_copyAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ExperimenterGroup_addExperimenterGroupAnnotationLink : public Callback_ExperimenterGroup_addExperimenterGroupAnnotationLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ExperimenterGroup_addExperimenterGroupAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ExperimenterGroup_addExperimenterGroupAnnotationLinkPtr
newCallback_ExperimenterGroup_addExperimenterGroupAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_addExperimenterGroupAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_addExperimenterGroupAnnotationLinkPtr
newCallback_ExperimenterGroup_addExperimenterGroupAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_addExperimenterGroupAnnotationLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_addExperimenterGroupAnnotationLinkPtr
newCallback_ExperimenterGroup_addExperimenterGroupAnnotationLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_addExperimenterGroupAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_addExperimenterGroupAnnotationLinkPtr
newCallback_ExperimenterGroup_addExperimenterGroupAnnotationLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_addExperimenterGroupAnnotationLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ExperimenterGroup_addExperimenterGroupAnnotationLink : public Callback_ExperimenterGroup_addExperimenterGroupAnnotationLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ExperimenterGroup_addExperimenterGroupAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ExperimenterGroup_addExperimenterGroupAnnotationLinkPtr
newCallback_ExperimenterGroup_addExperimenterGroupAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_addExperimenterGroupAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_addExperimenterGroupAnnotationLinkPtr
newCallback_ExperimenterGroup_addExperimenterGroupAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_addExperimenterGroupAnnotationLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_addExperimenterGroupAnnotationLinkPtr
newCallback_ExperimenterGroup_addExperimenterGroupAnnotationLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_addExperimenterGroupAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_addExperimenterGroupAnnotationLinkPtr
newCallback_ExperimenterGroup_addExperimenterGroupAnnotationLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_addExperimenterGroupAnnotationLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ExperimenterGroup_addAllExperimenterGroupAnnotationLinkSet : public Callback_ExperimenterGroup_addAllExperimenterGroupAnnotationLinkSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ExperimenterGroup_addAllExperimenterGroupAnnotationLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ExperimenterGroup_addAllExperimenterGroupAnnotationLinkSetPtr
newCallback_ExperimenterGroup_addAllExperimenterGroupAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_addAllExperimenterGroupAnnotationLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_addAllExperimenterGroupAnnotationLinkSetPtr
newCallback_ExperimenterGroup_addAllExperimenterGroupAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_addAllExperimenterGroupAnnotationLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_addAllExperimenterGroupAnnotationLinkSetPtr
newCallback_ExperimenterGroup_addAllExperimenterGroupAnnotationLinkSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_addAllExperimenterGroupAnnotationLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_addAllExperimenterGroupAnnotationLinkSetPtr
newCallback_ExperimenterGroup_addAllExperimenterGroupAnnotationLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_addAllExperimenterGroupAnnotationLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ExperimenterGroup_addAllExperimenterGroupAnnotationLinkSet : public Callback_ExperimenterGroup_addAllExperimenterGroupAnnotationLinkSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ExperimenterGroup_addAllExperimenterGroupAnnotationLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ExperimenterGroup_addAllExperimenterGroupAnnotationLinkSetPtr
newCallback_ExperimenterGroup_addAllExperimenterGroupAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_addAllExperimenterGroupAnnotationLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_addAllExperimenterGroupAnnotationLinkSetPtr
newCallback_ExperimenterGroup_addAllExperimenterGroupAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_addAllExperimenterGroupAnnotationLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_addAllExperimenterGroupAnnotationLinkSetPtr
newCallback_ExperimenterGroup_addAllExperimenterGroupAnnotationLinkSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_addAllExperimenterGroupAnnotationLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_addAllExperimenterGroupAnnotationLinkSetPtr
newCallback_ExperimenterGroup_addAllExperimenterGroupAnnotationLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_addAllExperimenterGroupAnnotationLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ExperimenterGroup_removeExperimenterGroupAnnotationLink : public Callback_ExperimenterGroup_removeExperimenterGroupAnnotationLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ExperimenterGroup_removeExperimenterGroupAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ExperimenterGroup_removeExperimenterGroupAnnotationLinkPtr
newCallback_ExperimenterGroup_removeExperimenterGroupAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_removeExperimenterGroupAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_removeExperimenterGroupAnnotationLinkPtr
newCallback_ExperimenterGroup_removeExperimenterGroupAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_removeExperimenterGroupAnnotationLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_removeExperimenterGroupAnnotationLinkPtr
newCallback_ExperimenterGroup_removeExperimenterGroupAnnotationLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_removeExperimenterGroupAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_removeExperimenterGroupAnnotationLinkPtr
newCallback_ExperimenterGroup_removeExperimenterGroupAnnotationLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_removeExperimenterGroupAnnotationLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ExperimenterGroup_removeExperimenterGroupAnnotationLink : public Callback_ExperimenterGroup_removeExperimenterGroupAnnotationLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ExperimenterGroup_removeExperimenterGroupAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ExperimenterGroup_removeExperimenterGroupAnnotationLinkPtr
newCallback_ExperimenterGroup_removeExperimenterGroupAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_removeExperimenterGroupAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_removeExperimenterGroupAnnotationLinkPtr
newCallback_ExperimenterGroup_removeExperimenterGroupAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_removeExperimenterGroupAnnotationLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_removeExperimenterGroupAnnotationLinkPtr
newCallback_ExperimenterGroup_removeExperimenterGroupAnnotationLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_removeExperimenterGroupAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_removeExperimenterGroupAnnotationLinkPtr
newCallback_ExperimenterGroup_removeExperimenterGroupAnnotationLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_removeExperimenterGroupAnnotationLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ExperimenterGroup_removeAllExperimenterGroupAnnotationLinkSet : public Callback_ExperimenterGroup_removeAllExperimenterGroupAnnotationLinkSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ExperimenterGroup_removeAllExperimenterGroupAnnotationLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ExperimenterGroup_removeAllExperimenterGroupAnnotationLinkSetPtr
newCallback_ExperimenterGroup_removeAllExperimenterGroupAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_removeAllExperimenterGroupAnnotationLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_removeAllExperimenterGroupAnnotationLinkSetPtr
newCallback_ExperimenterGroup_removeAllExperimenterGroupAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_removeAllExperimenterGroupAnnotationLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_removeAllExperimenterGroupAnnotationLinkSetPtr
newCallback_ExperimenterGroup_removeAllExperimenterGroupAnnotationLinkSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_removeAllExperimenterGroupAnnotationLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_removeAllExperimenterGroupAnnotationLinkSetPtr
newCallback_ExperimenterGroup_removeAllExperimenterGroupAnnotationLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_removeAllExperimenterGroupAnnotationLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ExperimenterGroup_removeAllExperimenterGroupAnnotationLinkSet : public Callback_ExperimenterGroup_removeAllExperimenterGroupAnnotationLinkSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ExperimenterGroup_removeAllExperimenterGroupAnnotationLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ExperimenterGroup_removeAllExperimenterGroupAnnotationLinkSetPtr
newCallback_ExperimenterGroup_removeAllExperimenterGroupAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_removeAllExperimenterGroupAnnotationLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_removeAllExperimenterGroupAnnotationLinkSetPtr
newCallback_ExperimenterGroup_removeAllExperimenterGroupAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_removeAllExperimenterGroupAnnotationLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_removeAllExperimenterGroupAnnotationLinkSetPtr
newCallback_ExperimenterGroup_removeAllExperimenterGroupAnnotationLinkSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_removeAllExperimenterGroupAnnotationLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_removeAllExperimenterGroupAnnotationLinkSetPtr
newCallback_ExperimenterGroup_removeAllExperimenterGroupAnnotationLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_removeAllExperimenterGroupAnnotationLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ExperimenterGroup_clearAnnotationLinks : public Callback_ExperimenterGroup_clearAnnotationLinks_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ExperimenterGroup_clearAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ExperimenterGroup_clearAnnotationLinksPtr
newCallback_ExperimenterGroup_clearAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_clearAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_clearAnnotationLinksPtr
newCallback_ExperimenterGroup_clearAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_clearAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_clearAnnotationLinksPtr
newCallback_ExperimenterGroup_clearAnnotationLinks(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_clearAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_clearAnnotationLinksPtr
newCallback_ExperimenterGroup_clearAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_clearAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ExperimenterGroup_clearAnnotationLinks : public Callback_ExperimenterGroup_clearAnnotationLinks_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ExperimenterGroup_clearAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ExperimenterGroup_clearAnnotationLinksPtr
newCallback_ExperimenterGroup_clearAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_clearAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_clearAnnotationLinksPtr
newCallback_ExperimenterGroup_clearAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_clearAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_clearAnnotationLinksPtr
newCallback_ExperimenterGroup_clearAnnotationLinks(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_clearAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_clearAnnotationLinksPtr
newCallback_ExperimenterGroup_clearAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_clearAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ExperimenterGroup_reloadAnnotationLinks : public Callback_ExperimenterGroup_reloadAnnotationLinks_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ExperimenterGroup_reloadAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ExperimenterGroup_reloadAnnotationLinksPtr
newCallback_ExperimenterGroup_reloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_reloadAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_reloadAnnotationLinksPtr
newCallback_ExperimenterGroup_reloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_reloadAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_reloadAnnotationLinksPtr
newCallback_ExperimenterGroup_reloadAnnotationLinks(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_reloadAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_reloadAnnotationLinksPtr
newCallback_ExperimenterGroup_reloadAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_reloadAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ExperimenterGroup_reloadAnnotationLinks : public Callback_ExperimenterGroup_reloadAnnotationLinks_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ExperimenterGroup_reloadAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ExperimenterGroup_reloadAnnotationLinksPtr
newCallback_ExperimenterGroup_reloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_reloadAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_reloadAnnotationLinksPtr
newCallback_ExperimenterGroup_reloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_reloadAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_reloadAnnotationLinksPtr
newCallback_ExperimenterGroup_reloadAnnotationLinks(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_reloadAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_reloadAnnotationLinksPtr
newCallback_ExperimenterGroup_reloadAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_reloadAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ExperimenterGroup_getAnnotationLinksCountPerOwner : public Callback_ExperimenterGroup_getAnnotationLinksCountPerOwner_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::sys::CountMap&);

    CallbackNC_ExperimenterGroup_getAnnotationLinksCountPerOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ExperimenterGroupPrx __proxy = ::omero::model::ExperimenterGroupPrx::uncheckedCast(__result->getProxy());
        ::omero::sys::CountMap __ret;
        try
        {
            __ret = __proxy->end_getAnnotationLinksCountPerOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_ExperimenterGroup_getAnnotationLinksCountPerOwnerPtr
newCallback_ExperimenterGroup_getAnnotationLinksCountPerOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::CountMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_getAnnotationLinksCountPerOwner<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_getAnnotationLinksCountPerOwnerPtr
newCallback_ExperimenterGroup_getAnnotationLinksCountPerOwner(T* instance, void (T::*cb)(const ::omero::sys::CountMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_getAnnotationLinksCountPerOwner<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ExperimenterGroup_getAnnotationLinksCountPerOwner : public Callback_ExperimenterGroup_getAnnotationLinksCountPerOwner_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::sys::CountMap&, const CT&);

    Callback_ExperimenterGroup_getAnnotationLinksCountPerOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ExperimenterGroupPrx __proxy = ::omero::model::ExperimenterGroupPrx::uncheckedCast(__result->getProxy());
        ::omero::sys::CountMap __ret;
        try
        {
            __ret = __proxy->end_getAnnotationLinksCountPerOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ExperimenterGroup_getAnnotationLinksCountPerOwnerPtr
newCallback_ExperimenterGroup_getAnnotationLinksCountPerOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::CountMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_getAnnotationLinksCountPerOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_getAnnotationLinksCountPerOwnerPtr
newCallback_ExperimenterGroup_getAnnotationLinksCountPerOwner(T* instance, void (T::*cb)(const ::omero::sys::CountMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_getAnnotationLinksCountPerOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ExperimenterGroup_linkAnnotation : public Callback_ExperimenterGroup_linkAnnotation_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::ExperimenterGroupAnnotationLinkPtr&);

    CallbackNC_ExperimenterGroup_linkAnnotation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ExperimenterGroupPrx __proxy = ::omero::model::ExperimenterGroupPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ExperimenterGroupAnnotationLinkPtr __ret;
        try
        {
            __ret = __proxy->end_linkAnnotation(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_ExperimenterGroup_linkAnnotationPtr
newCallback_ExperimenterGroup_linkAnnotation(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ExperimenterGroupAnnotationLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_linkAnnotation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_linkAnnotationPtr
newCallback_ExperimenterGroup_linkAnnotation(T* instance, void (T::*cb)(const ::omero::model::ExperimenterGroupAnnotationLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_linkAnnotation<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ExperimenterGroup_linkAnnotation : public Callback_ExperimenterGroup_linkAnnotation_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::ExperimenterGroupAnnotationLinkPtr&, const CT&);

    Callback_ExperimenterGroup_linkAnnotation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ExperimenterGroupPrx __proxy = ::omero::model::ExperimenterGroupPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ExperimenterGroupAnnotationLinkPtr __ret;
        try
        {
            __ret = __proxy->end_linkAnnotation(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ExperimenterGroup_linkAnnotationPtr
newCallback_ExperimenterGroup_linkAnnotation(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ExperimenterGroupAnnotationLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_linkAnnotation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_linkAnnotationPtr
newCallback_ExperimenterGroup_linkAnnotation(T* instance, void (T::*cb)(const ::omero::model::ExperimenterGroupAnnotationLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_linkAnnotation<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ExperimenterGroup_addExperimenterGroupAnnotationLinkToBoth : public Callback_ExperimenterGroup_addExperimenterGroupAnnotationLinkToBoth_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ExperimenterGroup_addExperimenterGroupAnnotationLinkToBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ExperimenterGroup_addExperimenterGroupAnnotationLinkToBothPtr
newCallback_ExperimenterGroup_addExperimenterGroupAnnotationLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_addExperimenterGroupAnnotationLinkToBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_addExperimenterGroupAnnotationLinkToBothPtr
newCallback_ExperimenterGroup_addExperimenterGroupAnnotationLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_addExperimenterGroupAnnotationLinkToBoth<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_addExperimenterGroupAnnotationLinkToBothPtr
newCallback_ExperimenterGroup_addExperimenterGroupAnnotationLinkToBoth(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_addExperimenterGroupAnnotationLinkToBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_addExperimenterGroupAnnotationLinkToBothPtr
newCallback_ExperimenterGroup_addExperimenterGroupAnnotationLinkToBoth(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_addExperimenterGroupAnnotationLinkToBoth<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ExperimenterGroup_addExperimenterGroupAnnotationLinkToBoth : public Callback_ExperimenterGroup_addExperimenterGroupAnnotationLinkToBoth_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ExperimenterGroup_addExperimenterGroupAnnotationLinkToBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ExperimenterGroup_addExperimenterGroupAnnotationLinkToBothPtr
newCallback_ExperimenterGroup_addExperimenterGroupAnnotationLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_addExperimenterGroupAnnotationLinkToBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_addExperimenterGroupAnnotationLinkToBothPtr
newCallback_ExperimenterGroup_addExperimenterGroupAnnotationLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_addExperimenterGroupAnnotationLinkToBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_addExperimenterGroupAnnotationLinkToBothPtr
newCallback_ExperimenterGroup_addExperimenterGroupAnnotationLinkToBoth(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_addExperimenterGroupAnnotationLinkToBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_addExperimenterGroupAnnotationLinkToBothPtr
newCallback_ExperimenterGroup_addExperimenterGroupAnnotationLinkToBoth(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_addExperimenterGroupAnnotationLinkToBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ExperimenterGroup_findExperimenterGroupAnnotationLink : public Callback_ExperimenterGroup_findExperimenterGroupAnnotationLink_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::ExperimenterGroupAnnotationLinksSeq&);

    CallbackNC_ExperimenterGroup_findExperimenterGroupAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ExperimenterGroupPrx __proxy = ::omero::model::ExperimenterGroupPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ExperimenterGroupAnnotationLinksSeq __ret;
        try
        {
            __ret = __proxy->end_findExperimenterGroupAnnotationLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_ExperimenterGroup_findExperimenterGroupAnnotationLinkPtr
newCallback_ExperimenterGroup_findExperimenterGroupAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ExperimenterGroupAnnotationLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_findExperimenterGroupAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_findExperimenterGroupAnnotationLinkPtr
newCallback_ExperimenterGroup_findExperimenterGroupAnnotationLink(T* instance, void (T::*cb)(const ::omero::model::ExperimenterGroupAnnotationLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_findExperimenterGroupAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ExperimenterGroup_findExperimenterGroupAnnotationLink : public Callback_ExperimenterGroup_findExperimenterGroupAnnotationLink_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::ExperimenterGroupAnnotationLinksSeq&, const CT&);

    Callback_ExperimenterGroup_findExperimenterGroupAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ExperimenterGroupPrx __proxy = ::omero::model::ExperimenterGroupPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ExperimenterGroupAnnotationLinksSeq __ret;
        try
        {
            __ret = __proxy->end_findExperimenterGroupAnnotationLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ExperimenterGroup_findExperimenterGroupAnnotationLinkPtr
newCallback_ExperimenterGroup_findExperimenterGroupAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ExperimenterGroupAnnotationLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_findExperimenterGroupAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_findExperimenterGroupAnnotationLinkPtr
newCallback_ExperimenterGroup_findExperimenterGroupAnnotationLink(T* instance, void (T::*cb)(const ::omero::model::ExperimenterGroupAnnotationLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_findExperimenterGroupAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ExperimenterGroup_unlinkAnnotation : public Callback_ExperimenterGroup_unlinkAnnotation_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ExperimenterGroup_unlinkAnnotation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ExperimenterGroup_unlinkAnnotationPtr
newCallback_ExperimenterGroup_unlinkAnnotation(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_unlinkAnnotation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_unlinkAnnotationPtr
newCallback_ExperimenterGroup_unlinkAnnotation(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_unlinkAnnotation<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_unlinkAnnotationPtr
newCallback_ExperimenterGroup_unlinkAnnotation(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_unlinkAnnotation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_unlinkAnnotationPtr
newCallback_ExperimenterGroup_unlinkAnnotation(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_unlinkAnnotation<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ExperimenterGroup_unlinkAnnotation : public Callback_ExperimenterGroup_unlinkAnnotation_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ExperimenterGroup_unlinkAnnotation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ExperimenterGroup_unlinkAnnotationPtr
newCallback_ExperimenterGroup_unlinkAnnotation(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_unlinkAnnotation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_unlinkAnnotationPtr
newCallback_ExperimenterGroup_unlinkAnnotation(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_unlinkAnnotation<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_unlinkAnnotationPtr
newCallback_ExperimenterGroup_unlinkAnnotation(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_unlinkAnnotation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_unlinkAnnotationPtr
newCallback_ExperimenterGroup_unlinkAnnotation(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_unlinkAnnotation<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ExperimenterGroup_removeExperimenterGroupAnnotationLinkFromBoth : public Callback_ExperimenterGroup_removeExperimenterGroupAnnotationLinkFromBoth_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ExperimenterGroup_removeExperimenterGroupAnnotationLinkFromBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ExperimenterGroup_removeExperimenterGroupAnnotationLinkFromBothPtr
newCallback_ExperimenterGroup_removeExperimenterGroupAnnotationLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_removeExperimenterGroupAnnotationLinkFromBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_removeExperimenterGroupAnnotationLinkFromBothPtr
newCallback_ExperimenterGroup_removeExperimenterGroupAnnotationLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_removeExperimenterGroupAnnotationLinkFromBoth<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_removeExperimenterGroupAnnotationLinkFromBothPtr
newCallback_ExperimenterGroup_removeExperimenterGroupAnnotationLinkFromBoth(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_removeExperimenterGroupAnnotationLinkFromBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_removeExperimenterGroupAnnotationLinkFromBothPtr
newCallback_ExperimenterGroup_removeExperimenterGroupAnnotationLinkFromBoth(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_removeExperimenterGroupAnnotationLinkFromBoth<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ExperimenterGroup_removeExperimenterGroupAnnotationLinkFromBoth : public Callback_ExperimenterGroup_removeExperimenterGroupAnnotationLinkFromBoth_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ExperimenterGroup_removeExperimenterGroupAnnotationLinkFromBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ExperimenterGroup_removeExperimenterGroupAnnotationLinkFromBothPtr
newCallback_ExperimenterGroup_removeExperimenterGroupAnnotationLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_removeExperimenterGroupAnnotationLinkFromBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_removeExperimenterGroupAnnotationLinkFromBothPtr
newCallback_ExperimenterGroup_removeExperimenterGroupAnnotationLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_removeExperimenterGroupAnnotationLinkFromBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_removeExperimenterGroupAnnotationLinkFromBothPtr
newCallback_ExperimenterGroup_removeExperimenterGroupAnnotationLinkFromBoth(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_removeExperimenterGroupAnnotationLinkFromBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_removeExperimenterGroupAnnotationLinkFromBothPtr
newCallback_ExperimenterGroup_removeExperimenterGroupAnnotationLinkFromBoth(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_removeExperimenterGroupAnnotationLinkFromBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ExperimenterGroup_linkedAnnotationList : public Callback_ExperimenterGroup_linkedAnnotationList_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::ExperimenterGroupLinkedAnnotationSeq&);

    CallbackNC_ExperimenterGroup_linkedAnnotationList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ExperimenterGroupPrx __proxy = ::omero::model::ExperimenterGroupPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ExperimenterGroupLinkedAnnotationSeq __ret;
        try
        {
            __ret = __proxy->end_linkedAnnotationList(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_ExperimenterGroup_linkedAnnotationListPtr
newCallback_ExperimenterGroup_linkedAnnotationList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ExperimenterGroupLinkedAnnotationSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_linkedAnnotationList<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_linkedAnnotationListPtr
newCallback_ExperimenterGroup_linkedAnnotationList(T* instance, void (T::*cb)(const ::omero::model::ExperimenterGroupLinkedAnnotationSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_linkedAnnotationList<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ExperimenterGroup_linkedAnnotationList : public Callback_ExperimenterGroup_linkedAnnotationList_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::ExperimenterGroupLinkedAnnotationSeq&, const CT&);

    Callback_ExperimenterGroup_linkedAnnotationList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ExperimenterGroupPrx __proxy = ::omero::model::ExperimenterGroupPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ExperimenterGroupLinkedAnnotationSeq __ret;
        try
        {
            __ret = __proxy->end_linkedAnnotationList(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ExperimenterGroup_linkedAnnotationListPtr
newCallback_ExperimenterGroup_linkedAnnotationList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ExperimenterGroupLinkedAnnotationSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_linkedAnnotationList<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_linkedAnnotationListPtr
newCallback_ExperimenterGroup_linkedAnnotationList(T* instance, void (T::*cb)(const ::omero::model::ExperimenterGroupLinkedAnnotationSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_linkedAnnotationList<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ExperimenterGroup_getDescription : public Callback_ExperimenterGroup_getDescription_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_ExperimenterGroup_getDescription(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ExperimenterGroupPrx __proxy = ::omero::model::ExperimenterGroupPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getDescription(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_ExperimenterGroup_getDescriptionPtr
newCallback_ExperimenterGroup_getDescription(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_getDescription<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_getDescriptionPtr
newCallback_ExperimenterGroup_getDescription(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_getDescription<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ExperimenterGroup_getDescription : public Callback_ExperimenterGroup_getDescription_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_ExperimenterGroup_getDescription(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ExperimenterGroupPrx __proxy = ::omero::model::ExperimenterGroupPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getDescription(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ExperimenterGroup_getDescriptionPtr
newCallback_ExperimenterGroup_getDescription(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_getDescription<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_getDescriptionPtr
newCallback_ExperimenterGroup_getDescription(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_getDescription<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ExperimenterGroup_setDescription : public Callback_ExperimenterGroup_setDescription_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ExperimenterGroup_setDescription(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ExperimenterGroup_setDescriptionPtr
newCallback_ExperimenterGroup_setDescription(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_setDescription<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_setDescriptionPtr
newCallback_ExperimenterGroup_setDescription(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_setDescription<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_setDescriptionPtr
newCallback_ExperimenterGroup_setDescription(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_setDescription<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ExperimenterGroup_setDescriptionPtr
newCallback_ExperimenterGroup_setDescription(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ExperimenterGroup_setDescription<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ExperimenterGroup_setDescription : public Callback_ExperimenterGroup_setDescription_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ExperimenterGroup_setDescription(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ExperimenterGroup_setDescriptionPtr
newCallback_ExperimenterGroup_setDescription(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_setDescription<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_setDescriptionPtr
newCallback_ExperimenterGroup_setDescription(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_setDescription<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_setDescriptionPtr
newCallback_ExperimenterGroup_setDescription(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_setDescription<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ExperimenterGroup_setDescriptionPtr
newCallback_ExperimenterGroup_setDescription(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ExperimenterGroup_setDescription<T, CT>(instance, 0, excb, sentcb);
}

}

}

#endif
