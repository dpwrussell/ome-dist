// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Event.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_Event_h__
#define __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_Event_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <omero/model/IObject.h>
#include <omero/RTypes.h>
#include <omero/System.h>
#include <omero/Collections.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace omero
{

namespace model
{

class Experimenter;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Experimenter>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Experimenter*);

class ExperimenterGroup;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::ExperimenterGroup>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::ExperimenterGroup*);

class EventType;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::EventType>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::EventType*);

class Event;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Event>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Event*);

class EventLog;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::EventLog>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::EventLog*);

class Session;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Session>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Session*);

class Details;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Details>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Details*);

}

}

}

namespace omero
{

namespace model
{

class Experimenter;
bool operator==(const Experimenter&, const Experimenter&);
bool operator<(const Experimenter&, const Experimenter&);
::Ice::Object* upCast(::omero::model::Experimenter*);
typedef ::IceInternal::Handle< ::omero::model::Experimenter> ExperimenterPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Experimenter> ExperimenterPrx;
void __patch(ExperimenterPtr&, const ::Ice::ObjectPtr&);

class ExperimenterGroup;
bool operator==(const ExperimenterGroup&, const ExperimenterGroup&);
bool operator<(const ExperimenterGroup&, const ExperimenterGroup&);
::Ice::Object* upCast(::omero::model::ExperimenterGroup*);
typedef ::IceInternal::Handle< ::omero::model::ExperimenterGroup> ExperimenterGroupPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::ExperimenterGroup> ExperimenterGroupPrx;
void __patch(ExperimenterGroupPtr&, const ::Ice::ObjectPtr&);

class EventType;
bool operator==(const EventType&, const EventType&);
bool operator<(const EventType&, const EventType&);
::Ice::Object* upCast(::omero::model::EventType*);
typedef ::IceInternal::Handle< ::omero::model::EventType> EventTypePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::EventType> EventTypePrx;
void __patch(EventTypePtr&, const ::Ice::ObjectPtr&);

class Event;
bool operator==(const Event&, const Event&);
bool operator<(const Event&, const Event&);
::Ice::Object* upCast(::omero::model::Event*);
typedef ::IceInternal::Handle< ::omero::model::Event> EventPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Event> EventPrx;
void __patch(EventPtr&, const ::Ice::ObjectPtr&);

class EventLog;
bool operator==(const EventLog&, const EventLog&);
bool operator<(const EventLog&, const EventLog&);
::Ice::Object* upCast(::omero::model::EventLog*);
typedef ::IceInternal::Handle< ::omero::model::EventLog> EventLogPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::EventLog> EventLogPrx;
void __patch(EventLogPtr&, const ::Ice::ObjectPtr&);

class Session;
bool operator==(const Session&, const Session&);
bool operator<(const Session&, const Session&);
::Ice::Object* upCast(::omero::model::Session*);
typedef ::IceInternal::Handle< ::omero::model::Session> SessionPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Session> SessionPrx;
void __patch(SessionPtr&, const ::Ice::ObjectPtr&);

class Details;
bool operator==(const Details&, const Details&);
bool operator<(const Details&, const Details&);
::Ice::Object* upCast(::omero::model::Details*);
typedef ::IceInternal::Handle< ::omero::model::Details> DetailsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Details> DetailsPrx;
void __patch(DetailsPtr&, const ::Ice::ObjectPtr&);

}

}

namespace omero
{

namespace model
{

typedef ::std::vector< ::omero::model::EventLogPtr> EventLogsSeq;

}

}

namespace omero
{

namespace model
{

class Callback_Event_getStatus_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Event_getStatus_Base> Callback_Event_getStatusPtr;

class Callback_Event_setStatus_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Event_setStatus_Base> Callback_Event_setStatusPtr;

class Callback_Event_getTime_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Event_getTime_Base> Callback_Event_getTimePtr;

class Callback_Event_setTime_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Event_setTime_Base> Callback_Event_setTimePtr;

class Callback_Event_getExperimenter_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Event_getExperimenter_Base> Callback_Event_getExperimenterPtr;

class Callback_Event_setExperimenter_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Event_setExperimenter_Base> Callback_Event_setExperimenterPtr;

class Callback_Event_getExperimenterGroup_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Event_getExperimenterGroup_Base> Callback_Event_getExperimenterGroupPtr;

class Callback_Event_setExperimenterGroup_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Event_setExperimenterGroup_Base> Callback_Event_setExperimenterGroupPtr;

class Callback_Event_getType_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Event_getType_Base> Callback_Event_getTypePtr;

class Callback_Event_setType_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Event_setType_Base> Callback_Event_setTypePtr;

class Callback_Event_getContainingEvent_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Event_getContainingEvent_Base> Callback_Event_getContainingEventPtr;

class Callback_Event_setContainingEvent_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Event_setContainingEvent_Base> Callback_Event_setContainingEventPtr;

class Callback_Event_unloadLogs_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Event_unloadLogs_Base> Callback_Event_unloadLogsPtr;

class Callback_Event_sizeOfLogs_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Event_sizeOfLogs_Base> Callback_Event_sizeOfLogsPtr;

class Callback_Event_copyLogs_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Event_copyLogs_Base> Callback_Event_copyLogsPtr;

class Callback_Event_addEventLog_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Event_addEventLog_Base> Callback_Event_addEventLogPtr;

class Callback_Event_addAllEventLogSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Event_addAllEventLogSet_Base> Callback_Event_addAllEventLogSetPtr;

class Callback_Event_removeEventLog_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Event_removeEventLog_Base> Callback_Event_removeEventLogPtr;

class Callback_Event_removeAllEventLogSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Event_removeAllEventLogSet_Base> Callback_Event_removeAllEventLogSetPtr;

class Callback_Event_clearLogs_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Event_clearLogs_Base> Callback_Event_clearLogsPtr;

class Callback_Event_reloadLogs_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Event_reloadLogs_Base> Callback_Event_reloadLogsPtr;

class Callback_Event_getSession_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Event_getSession_Base> Callback_Event_getSessionPtr;

class Callback_Event_setSession_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Event_setSession_Base> Callback_Event_setSessionPtr;

}

}

namespace IceProxy
{

namespace omero
{

namespace model
{

class Event : virtual public ::IceProxy::omero::model::IObject
{
public:

    ::omero::RStringPtr getStatus()
    {
        return getStatus(0);
    }
    ::omero::RStringPtr getStatus(const ::Ice::Context& __ctx)
    {
        return getStatus(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getStatus(const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getStatus(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getStatus(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getStatus(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getStatus(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getStatus(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getStatus(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getStatus(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getStatus(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RStringPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::EventPrx __proxy = ::omero::model::EventPrx::uncheckedCast(__result->getProxy());
                ::omero::RStringPtr __ret;
                try
                {
                    __ret = __proxy->end_getStatus(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RStringPtr&)> _response;
        };
        return begin_getStatus(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getStatus()
    {
        return begin_getStatus(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getStatus(const ::Ice::Context& __ctx)
    {
        return begin_getStatus(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getStatus(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStatus(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getStatus(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStatus(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getStatus(const ::omero::model::Callback_Event_getStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStatus(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getStatus(const ::Ice::Context& __ctx, const ::omero::model::Callback_Event_getStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStatus(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getStatus(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getStatus(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getStatus(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setStatus(const ::omero::RStringPtr& theStatus)
    {
        setStatus(theStatus, 0);
    }
    void setStatus(const ::omero::RStringPtr& theStatus, const ::Ice::Context& __ctx)
    {
        setStatus(theStatus, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setStatus(const ::omero::RStringPtr& theStatus, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setStatus(theStatus, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setStatus(const ::omero::RStringPtr& theStatus, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setStatus(theStatus, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setStatus(const ::omero::RStringPtr& theStatus, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setStatus(theStatus, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setStatus(const ::omero::RStringPtr& theStatus, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setStatus(theStatus, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setStatus(const ::omero::RStringPtr& theStatus)
    {
        return begin_setStatus(theStatus, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setStatus(const ::omero::RStringPtr& theStatus, const ::Ice::Context& __ctx)
    {
        return begin_setStatus(theStatus, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setStatus(const ::omero::RStringPtr& theStatus, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setStatus(theStatus, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setStatus(const ::omero::RStringPtr& theStatus, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setStatus(theStatus, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setStatus(const ::omero::RStringPtr& theStatus, const ::omero::model::Callback_Event_setStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setStatus(theStatus, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setStatus(const ::omero::RStringPtr& theStatus, const ::Ice::Context& __ctx, const ::omero::model::Callback_Event_setStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setStatus(theStatus, &__ctx, __del, __cookie);
    }

    void end_setStatus(const ::Ice::AsyncResultPtr&);
    
private:

    void setStatus(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setStatus(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RTimePtr getTime()
    {
        return getTime(0);
    }
    ::omero::RTimePtr getTime(const ::Ice::Context& __ctx)
    {
        return getTime(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getTime(const ::IceInternal::Function<void (const ::omero::RTimePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getTime(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getTime(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getTime(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getTime(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RTimePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getTime(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getTime(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getTime(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getTime(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RTimePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RTimePtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::EventPrx __proxy = ::omero::model::EventPrx::uncheckedCast(__result->getProxy());
                ::omero::RTimePtr __ret;
                try
                {
                    __ret = __proxy->end_getTime(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RTimePtr&)> _response;
        };
        return begin_getTime(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getTime()
    {
        return begin_getTime(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getTime(const ::Ice::Context& __ctx)
    {
        return begin_getTime(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getTime(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTime(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTime(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTime(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTime(const ::omero::model::Callback_Event_getTimePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTime(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTime(const ::Ice::Context& __ctx, const ::omero::model::Callback_Event_getTimePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTime(&__ctx, __del, __cookie);
    }

    ::omero::RTimePtr end_getTime(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RTimePtr getTime(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getTime(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setTime(const ::omero::RTimePtr& theTime)
    {
        setTime(theTime, 0);
    }
    void setTime(const ::omero::RTimePtr& theTime, const ::Ice::Context& __ctx)
    {
        setTime(theTime, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setTime(const ::omero::RTimePtr& theTime, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setTime(theTime, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setTime(const ::omero::RTimePtr& theTime, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setTime(theTime, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setTime(const ::omero::RTimePtr& theTime, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setTime(theTime, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setTime(const ::omero::RTimePtr& theTime, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setTime(theTime, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setTime(const ::omero::RTimePtr& theTime)
    {
        return begin_setTime(theTime, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setTime(const ::omero::RTimePtr& theTime, const ::Ice::Context& __ctx)
    {
        return begin_setTime(theTime, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setTime(const ::omero::RTimePtr& theTime, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTime(theTime, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setTime(const ::omero::RTimePtr& theTime, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTime(theTime, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setTime(const ::omero::RTimePtr& theTime, const ::omero::model::Callback_Event_setTimePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTime(theTime, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setTime(const ::omero::RTimePtr& theTime, const ::Ice::Context& __ctx, const ::omero::model::Callback_Event_setTimePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTime(theTime, &__ctx, __del, __cookie);
    }

    void end_setTime(const ::Ice::AsyncResultPtr&);
    
private:

    void setTime(const ::omero::RTimePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setTime(const ::omero::RTimePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::ExperimenterPtr getExperimenter()
    {
        return getExperimenter(0);
    }
    ::omero::model::ExperimenterPtr getExperimenter(const ::Ice::Context& __ctx)
    {
        return getExperimenter(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getExperimenter(const ::IceInternal::Function<void (const ::omero::model::ExperimenterPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getExperimenter(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getExperimenter(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getExperimenter(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getExperimenter(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::ExperimenterPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getExperimenter(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getExperimenter(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getExperimenter(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getExperimenter(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::ExperimenterPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::ExperimenterPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::EventPrx __proxy = ::omero::model::EventPrx::uncheckedCast(__result->getProxy());
                ::omero::model::ExperimenterPtr __ret;
                try
                {
                    __ret = __proxy->end_getExperimenter(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::ExperimenterPtr&)> _response;
        };
        return begin_getExperimenter(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getExperimenter()
    {
        return begin_getExperimenter(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getExperimenter(const ::Ice::Context& __ctx)
    {
        return begin_getExperimenter(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getExperimenter(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getExperimenter(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getExperimenter(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getExperimenter(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getExperimenter(const ::omero::model::Callback_Event_getExperimenterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getExperimenter(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getExperimenter(const ::Ice::Context& __ctx, const ::omero::model::Callback_Event_getExperimenterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getExperimenter(&__ctx, __del, __cookie);
    }

    ::omero::model::ExperimenterPtr end_getExperimenter(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::ExperimenterPtr getExperimenter(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getExperimenter(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setExperimenter(const ::omero::model::ExperimenterPtr& theExperimenter)
    {
        setExperimenter(theExperimenter, 0);
    }
    void setExperimenter(const ::omero::model::ExperimenterPtr& theExperimenter, const ::Ice::Context& __ctx)
    {
        setExperimenter(theExperimenter, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setExperimenter(const ::omero::model::ExperimenterPtr& theExperimenter, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setExperimenter(theExperimenter, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setExperimenter(const ::omero::model::ExperimenterPtr& theExperimenter, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setExperimenter(theExperimenter, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setExperimenter(const ::omero::model::ExperimenterPtr& theExperimenter, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setExperimenter(theExperimenter, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setExperimenter(const ::omero::model::ExperimenterPtr& theExperimenter, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setExperimenter(theExperimenter, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setExperimenter(const ::omero::model::ExperimenterPtr& theExperimenter)
    {
        return begin_setExperimenter(theExperimenter, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setExperimenter(const ::omero::model::ExperimenterPtr& theExperimenter, const ::Ice::Context& __ctx)
    {
        return begin_setExperimenter(theExperimenter, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setExperimenter(const ::omero::model::ExperimenterPtr& theExperimenter, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setExperimenter(theExperimenter, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setExperimenter(const ::omero::model::ExperimenterPtr& theExperimenter, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setExperimenter(theExperimenter, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setExperimenter(const ::omero::model::ExperimenterPtr& theExperimenter, const ::omero::model::Callback_Event_setExperimenterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setExperimenter(theExperimenter, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setExperimenter(const ::omero::model::ExperimenterPtr& theExperimenter, const ::Ice::Context& __ctx, const ::omero::model::Callback_Event_setExperimenterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setExperimenter(theExperimenter, &__ctx, __del, __cookie);
    }

    void end_setExperimenter(const ::Ice::AsyncResultPtr&);
    
private:

    void setExperimenter(const ::omero::model::ExperimenterPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setExperimenter(const ::omero::model::ExperimenterPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::ExperimenterGroupPtr getExperimenterGroup()
    {
        return getExperimenterGroup(0);
    }
    ::omero::model::ExperimenterGroupPtr getExperimenterGroup(const ::Ice::Context& __ctx)
    {
        return getExperimenterGroup(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getExperimenterGroup(const ::IceInternal::Function<void (const ::omero::model::ExperimenterGroupPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getExperimenterGroup(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getExperimenterGroup(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getExperimenterGroup(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getExperimenterGroup(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::ExperimenterGroupPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getExperimenterGroup(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getExperimenterGroup(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getExperimenterGroup(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getExperimenterGroup(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::ExperimenterGroupPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::ExperimenterGroupPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::EventPrx __proxy = ::omero::model::EventPrx::uncheckedCast(__result->getProxy());
                ::omero::model::ExperimenterGroupPtr __ret;
                try
                {
                    __ret = __proxy->end_getExperimenterGroup(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::ExperimenterGroupPtr&)> _response;
        };
        return begin_getExperimenterGroup(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getExperimenterGroup()
    {
        return begin_getExperimenterGroup(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getExperimenterGroup(const ::Ice::Context& __ctx)
    {
        return begin_getExperimenterGroup(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getExperimenterGroup(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getExperimenterGroup(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getExperimenterGroup(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getExperimenterGroup(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getExperimenterGroup(const ::omero::model::Callback_Event_getExperimenterGroupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getExperimenterGroup(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getExperimenterGroup(const ::Ice::Context& __ctx, const ::omero::model::Callback_Event_getExperimenterGroupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getExperimenterGroup(&__ctx, __del, __cookie);
    }

    ::omero::model::ExperimenterGroupPtr end_getExperimenterGroup(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::ExperimenterGroupPtr getExperimenterGroup(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getExperimenterGroup(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setExperimenterGroup(const ::omero::model::ExperimenterGroupPtr& theExperimenterGroup)
    {
        setExperimenterGroup(theExperimenterGroup, 0);
    }
    void setExperimenterGroup(const ::omero::model::ExperimenterGroupPtr& theExperimenterGroup, const ::Ice::Context& __ctx)
    {
        setExperimenterGroup(theExperimenterGroup, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setExperimenterGroup(const ::omero::model::ExperimenterGroupPtr& theExperimenterGroup, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setExperimenterGroup(theExperimenterGroup, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setExperimenterGroup(const ::omero::model::ExperimenterGroupPtr& theExperimenterGroup, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setExperimenterGroup(theExperimenterGroup, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setExperimenterGroup(const ::omero::model::ExperimenterGroupPtr& theExperimenterGroup, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setExperimenterGroup(theExperimenterGroup, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setExperimenterGroup(const ::omero::model::ExperimenterGroupPtr& theExperimenterGroup, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setExperimenterGroup(theExperimenterGroup, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setExperimenterGroup(const ::omero::model::ExperimenterGroupPtr& theExperimenterGroup)
    {
        return begin_setExperimenterGroup(theExperimenterGroup, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setExperimenterGroup(const ::omero::model::ExperimenterGroupPtr& theExperimenterGroup, const ::Ice::Context& __ctx)
    {
        return begin_setExperimenterGroup(theExperimenterGroup, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setExperimenterGroup(const ::omero::model::ExperimenterGroupPtr& theExperimenterGroup, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setExperimenterGroup(theExperimenterGroup, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setExperimenterGroup(const ::omero::model::ExperimenterGroupPtr& theExperimenterGroup, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setExperimenterGroup(theExperimenterGroup, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setExperimenterGroup(const ::omero::model::ExperimenterGroupPtr& theExperimenterGroup, const ::omero::model::Callback_Event_setExperimenterGroupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setExperimenterGroup(theExperimenterGroup, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setExperimenterGroup(const ::omero::model::ExperimenterGroupPtr& theExperimenterGroup, const ::Ice::Context& __ctx, const ::omero::model::Callback_Event_setExperimenterGroupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setExperimenterGroup(theExperimenterGroup, &__ctx, __del, __cookie);
    }

    void end_setExperimenterGroup(const ::Ice::AsyncResultPtr&);
    
private:

    void setExperimenterGroup(const ::omero::model::ExperimenterGroupPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setExperimenterGroup(const ::omero::model::ExperimenterGroupPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::EventTypePtr getType()
    {
        return getType(0);
    }
    ::omero::model::EventTypePtr getType(const ::Ice::Context& __ctx)
    {
        return getType(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getType(const ::IceInternal::Function<void (const ::omero::model::EventTypePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getType(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getType(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getType(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getType(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::EventTypePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getType(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getType(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getType(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getType(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::EventTypePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::EventTypePtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::EventPrx __proxy = ::omero::model::EventPrx::uncheckedCast(__result->getProxy());
                ::omero::model::EventTypePtr __ret;
                try
                {
                    __ret = __proxy->end_getType(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::EventTypePtr&)> _response;
        };
        return begin_getType(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getType()
    {
        return begin_getType(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getType(const ::Ice::Context& __ctx)
    {
        return begin_getType(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getType(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getType(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getType(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getType(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getType(const ::omero::model::Callback_Event_getTypePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getType(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getType(const ::Ice::Context& __ctx, const ::omero::model::Callback_Event_getTypePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getType(&__ctx, __del, __cookie);
    }

    ::omero::model::EventTypePtr end_getType(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::EventTypePtr getType(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getType(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setType(const ::omero::model::EventTypePtr& theType)
    {
        setType(theType, 0);
    }
    void setType(const ::omero::model::EventTypePtr& theType, const ::Ice::Context& __ctx)
    {
        setType(theType, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setType(const ::omero::model::EventTypePtr& theType, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setType(theType, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setType(const ::omero::model::EventTypePtr& theType, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setType(theType, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setType(const ::omero::model::EventTypePtr& theType, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setType(theType, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setType(const ::omero::model::EventTypePtr& theType, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setType(theType, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setType(const ::omero::model::EventTypePtr& theType)
    {
        return begin_setType(theType, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setType(const ::omero::model::EventTypePtr& theType, const ::Ice::Context& __ctx)
    {
        return begin_setType(theType, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setType(const ::omero::model::EventTypePtr& theType, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setType(theType, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setType(const ::omero::model::EventTypePtr& theType, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setType(theType, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setType(const ::omero::model::EventTypePtr& theType, const ::omero::model::Callback_Event_setTypePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setType(theType, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setType(const ::omero::model::EventTypePtr& theType, const ::Ice::Context& __ctx, const ::omero::model::Callback_Event_setTypePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setType(theType, &__ctx, __del, __cookie);
    }

    void end_setType(const ::Ice::AsyncResultPtr&);
    
private:

    void setType(const ::omero::model::EventTypePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setType(const ::omero::model::EventTypePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::EventPtr getContainingEvent()
    {
        return getContainingEvent(0);
    }
    ::omero::model::EventPtr getContainingEvent(const ::Ice::Context& __ctx)
    {
        return getContainingEvent(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getContainingEvent(const ::IceInternal::Function<void (const ::omero::model::EventPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getContainingEvent(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getContainingEvent(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getContainingEvent(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getContainingEvent(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::EventPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getContainingEvent(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getContainingEvent(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getContainingEvent(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getContainingEvent(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::EventPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::EventPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::EventPrx __proxy = ::omero::model::EventPrx::uncheckedCast(__result->getProxy());
                ::omero::model::EventPtr __ret;
                try
                {
                    __ret = __proxy->end_getContainingEvent(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::EventPtr&)> _response;
        };
        return begin_getContainingEvent(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getContainingEvent()
    {
        return begin_getContainingEvent(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getContainingEvent(const ::Ice::Context& __ctx)
    {
        return begin_getContainingEvent(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getContainingEvent(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getContainingEvent(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getContainingEvent(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getContainingEvent(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getContainingEvent(const ::omero::model::Callback_Event_getContainingEventPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getContainingEvent(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getContainingEvent(const ::Ice::Context& __ctx, const ::omero::model::Callback_Event_getContainingEventPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getContainingEvent(&__ctx, __del, __cookie);
    }

    ::omero::model::EventPtr end_getContainingEvent(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::EventPtr getContainingEvent(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getContainingEvent(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setContainingEvent(const ::omero::model::EventPtr& theContainingEvent)
    {
        setContainingEvent(theContainingEvent, 0);
    }
    void setContainingEvent(const ::omero::model::EventPtr& theContainingEvent, const ::Ice::Context& __ctx)
    {
        setContainingEvent(theContainingEvent, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setContainingEvent(const ::omero::model::EventPtr& theContainingEvent, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setContainingEvent(theContainingEvent, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setContainingEvent(const ::omero::model::EventPtr& theContainingEvent, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setContainingEvent(theContainingEvent, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setContainingEvent(const ::omero::model::EventPtr& theContainingEvent, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setContainingEvent(theContainingEvent, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setContainingEvent(const ::omero::model::EventPtr& theContainingEvent, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setContainingEvent(theContainingEvent, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setContainingEvent(const ::omero::model::EventPtr& theContainingEvent)
    {
        return begin_setContainingEvent(theContainingEvent, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setContainingEvent(const ::omero::model::EventPtr& theContainingEvent, const ::Ice::Context& __ctx)
    {
        return begin_setContainingEvent(theContainingEvent, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setContainingEvent(const ::omero::model::EventPtr& theContainingEvent, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setContainingEvent(theContainingEvent, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setContainingEvent(const ::omero::model::EventPtr& theContainingEvent, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setContainingEvent(theContainingEvent, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setContainingEvent(const ::omero::model::EventPtr& theContainingEvent, const ::omero::model::Callback_Event_setContainingEventPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setContainingEvent(theContainingEvent, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setContainingEvent(const ::omero::model::EventPtr& theContainingEvent, const ::Ice::Context& __ctx, const ::omero::model::Callback_Event_setContainingEventPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setContainingEvent(theContainingEvent, &__ctx, __del, __cookie);
    }

    void end_setContainingEvent(const ::Ice::AsyncResultPtr&);
    
private:

    void setContainingEvent(const ::omero::model::EventPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setContainingEvent(const ::omero::model::EventPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unloadLogs()
    {
        unloadLogs(0);
    }
    void unloadLogs(const ::Ice::Context& __ctx)
    {
        unloadLogs(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_unloadLogs(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unloadLogs(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_unloadLogs(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unloadLogs(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unloadLogs(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unloadLogs(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unloadLogs(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unloadLogs(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_unloadLogs()
    {
        return begin_unloadLogs(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadLogs(const ::Ice::Context& __ctx)
    {
        return begin_unloadLogs(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadLogs(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadLogs(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadLogs(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadLogs(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadLogs(const ::omero::model::Callback_Event_unloadLogsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadLogs(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadLogs(const ::Ice::Context& __ctx, const ::omero::model::Callback_Event_unloadLogsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadLogs(&__ctx, __del, __cookie);
    }

    void end_unloadLogs(const ::Ice::AsyncResultPtr&);
    
private:

    void unloadLogs(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unloadLogs(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int sizeOfLogs()
    {
        return sizeOfLogs(0);
    }
    ::Ice::Int sizeOfLogs(const ::Ice::Context& __ctx)
    {
        return sizeOfLogs(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_sizeOfLogs(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sizeOfLogs(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfLogs(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sizeOfLogs(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfLogs(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sizeOfLogs(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfLogs(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sizeOfLogs(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_sizeOfLogs(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::EventPrx __proxy = ::omero::model::EventPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_sizeOfLogs(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_sizeOfLogs(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_sizeOfLogs()
    {
        return begin_sizeOfLogs(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfLogs(const ::Ice::Context& __ctx)
    {
        return begin_sizeOfLogs(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfLogs(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfLogs(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfLogs(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfLogs(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfLogs(const ::omero::model::Callback_Event_sizeOfLogsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfLogs(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfLogs(const ::Ice::Context& __ctx, const ::omero::model::Callback_Event_sizeOfLogsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfLogs(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_sizeOfLogs(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int sizeOfLogs(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sizeOfLogs(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::EventLogsSeq copyLogs()
    {
        return copyLogs(0);
    }
    ::omero::model::EventLogsSeq copyLogs(const ::Ice::Context& __ctx)
    {
        return copyLogs(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_copyLogs(const ::IceInternal::Function<void (const ::omero::model::EventLogsSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_copyLogs(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_copyLogs(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_copyLogs(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_copyLogs(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::EventLogsSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_copyLogs(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_copyLogs(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_copyLogs(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_copyLogs(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::EventLogsSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::EventLogsSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::EventPrx __proxy = ::omero::model::EventPrx::uncheckedCast(__result->getProxy());
                ::omero::model::EventLogsSeq __ret;
                try
                {
                    __ret = __proxy->end_copyLogs(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::EventLogsSeq&)> _response;
        };
        return begin_copyLogs(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_copyLogs()
    {
        return begin_copyLogs(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyLogs(const ::Ice::Context& __ctx)
    {
        return begin_copyLogs(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyLogs(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyLogs(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyLogs(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyLogs(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyLogs(const ::omero::model::Callback_Event_copyLogsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyLogs(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyLogs(const ::Ice::Context& __ctx, const ::omero::model::Callback_Event_copyLogsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyLogs(&__ctx, __del, __cookie);
    }

    ::omero::model::EventLogsSeq end_copyLogs(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::EventLogsSeq copyLogs(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_copyLogs(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addEventLog(const ::omero::model::EventLogPtr& target)
    {
        addEventLog(target, 0);
    }
    void addEventLog(const ::omero::model::EventLogPtr& target, const ::Ice::Context& __ctx)
    {
        addEventLog(target, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addEventLog(const ::omero::model::EventLogPtr& target, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addEventLog(target, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addEventLog(const ::omero::model::EventLogPtr& target, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addEventLog(target, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addEventLog(const ::omero::model::EventLogPtr& target, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addEventLog(target, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addEventLog(const ::omero::model::EventLogPtr& target, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addEventLog(target, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addEventLog(const ::omero::model::EventLogPtr& target)
    {
        return begin_addEventLog(target, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addEventLog(const ::omero::model::EventLogPtr& target, const ::Ice::Context& __ctx)
    {
        return begin_addEventLog(target, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addEventLog(const ::omero::model::EventLogPtr& target, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addEventLog(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addEventLog(const ::omero::model::EventLogPtr& target, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addEventLog(target, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addEventLog(const ::omero::model::EventLogPtr& target, const ::omero::model::Callback_Event_addEventLogPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addEventLog(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addEventLog(const ::omero::model::EventLogPtr& target, const ::Ice::Context& __ctx, const ::omero::model::Callback_Event_addEventLogPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addEventLog(target, &__ctx, __del, __cookie);
    }

    void end_addEventLog(const ::Ice::AsyncResultPtr&);
    
private:

    void addEventLog(const ::omero::model::EventLogPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addEventLog(const ::omero::model::EventLogPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addAllEventLogSet(const ::omero::model::EventLogsSeq& targets)
    {
        addAllEventLogSet(targets, 0);
    }
    void addAllEventLogSet(const ::omero::model::EventLogsSeq& targets, const ::Ice::Context& __ctx)
    {
        addAllEventLogSet(targets, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addAllEventLogSet(const ::omero::model::EventLogsSeq& targets, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addAllEventLogSet(targets, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addAllEventLogSet(const ::omero::model::EventLogsSeq& targets, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addAllEventLogSet(targets, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addAllEventLogSet(const ::omero::model::EventLogsSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addAllEventLogSet(targets, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addAllEventLogSet(const ::omero::model::EventLogsSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addAllEventLogSet(targets, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addAllEventLogSet(const ::omero::model::EventLogsSeq& targets)
    {
        return begin_addAllEventLogSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllEventLogSet(const ::omero::model::EventLogsSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_addAllEventLogSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllEventLogSet(const ::omero::model::EventLogsSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllEventLogSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllEventLogSet(const ::omero::model::EventLogsSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllEventLogSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllEventLogSet(const ::omero::model::EventLogsSeq& targets, const ::omero::model::Callback_Event_addAllEventLogSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllEventLogSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllEventLogSet(const ::omero::model::EventLogsSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Event_addAllEventLogSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllEventLogSet(targets, &__ctx, __del, __cookie);
    }

    void end_addAllEventLogSet(const ::Ice::AsyncResultPtr&);
    
private:

    void addAllEventLogSet(const ::omero::model::EventLogsSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addAllEventLogSet(const ::omero::model::EventLogsSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeEventLog(const ::omero::model::EventLogPtr& theTarget)
    {
        removeEventLog(theTarget, 0);
    }
    void removeEventLog(const ::omero::model::EventLogPtr& theTarget, const ::Ice::Context& __ctx)
    {
        removeEventLog(theTarget, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeEventLog(const ::omero::model::EventLogPtr& theTarget, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeEventLog(theTarget, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeEventLog(const ::omero::model::EventLogPtr& theTarget, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeEventLog(theTarget, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeEventLog(const ::omero::model::EventLogPtr& theTarget, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeEventLog(theTarget, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeEventLog(const ::omero::model::EventLogPtr& theTarget, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeEventLog(theTarget, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeEventLog(const ::omero::model::EventLogPtr& theTarget)
    {
        return begin_removeEventLog(theTarget, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeEventLog(const ::omero::model::EventLogPtr& theTarget, const ::Ice::Context& __ctx)
    {
        return begin_removeEventLog(theTarget, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeEventLog(const ::omero::model::EventLogPtr& theTarget, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeEventLog(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeEventLog(const ::omero::model::EventLogPtr& theTarget, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeEventLog(theTarget, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeEventLog(const ::omero::model::EventLogPtr& theTarget, const ::omero::model::Callback_Event_removeEventLogPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeEventLog(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeEventLog(const ::omero::model::EventLogPtr& theTarget, const ::Ice::Context& __ctx, const ::omero::model::Callback_Event_removeEventLogPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeEventLog(theTarget, &__ctx, __del, __cookie);
    }

    void end_removeEventLog(const ::Ice::AsyncResultPtr&);
    
private:

    void removeEventLog(const ::omero::model::EventLogPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeEventLog(const ::omero::model::EventLogPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeAllEventLogSet(const ::omero::model::EventLogsSeq& targets)
    {
        removeAllEventLogSet(targets, 0);
    }
    void removeAllEventLogSet(const ::omero::model::EventLogsSeq& targets, const ::Ice::Context& __ctx)
    {
        removeAllEventLogSet(targets, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeAllEventLogSet(const ::omero::model::EventLogsSeq& targets, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeAllEventLogSet(targets, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeAllEventLogSet(const ::omero::model::EventLogsSeq& targets, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeAllEventLogSet(targets, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeAllEventLogSet(const ::omero::model::EventLogsSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeAllEventLogSet(targets, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeAllEventLogSet(const ::omero::model::EventLogsSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeAllEventLogSet(targets, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeAllEventLogSet(const ::omero::model::EventLogsSeq& targets)
    {
        return begin_removeAllEventLogSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllEventLogSet(const ::omero::model::EventLogsSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_removeAllEventLogSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllEventLogSet(const ::omero::model::EventLogsSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllEventLogSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllEventLogSet(const ::omero::model::EventLogsSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllEventLogSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllEventLogSet(const ::omero::model::EventLogsSeq& targets, const ::omero::model::Callback_Event_removeAllEventLogSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllEventLogSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllEventLogSet(const ::omero::model::EventLogsSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Event_removeAllEventLogSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllEventLogSet(targets, &__ctx, __del, __cookie);
    }

    void end_removeAllEventLogSet(const ::Ice::AsyncResultPtr&);
    
private:

    void removeAllEventLogSet(const ::omero::model::EventLogsSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeAllEventLogSet(const ::omero::model::EventLogsSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void clearLogs()
    {
        clearLogs(0);
    }
    void clearLogs(const ::Ice::Context& __ctx)
    {
        clearLogs(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_clearLogs(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_clearLogs(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_clearLogs(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_clearLogs(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_clearLogs(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_clearLogs(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_clearLogs(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_clearLogs(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_clearLogs()
    {
        return begin_clearLogs(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearLogs(const ::Ice::Context& __ctx)
    {
        return begin_clearLogs(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearLogs(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearLogs(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearLogs(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearLogs(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearLogs(const ::omero::model::Callback_Event_clearLogsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearLogs(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearLogs(const ::Ice::Context& __ctx, const ::omero::model::Callback_Event_clearLogsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearLogs(&__ctx, __del, __cookie);
    }

    void end_clearLogs(const ::Ice::AsyncResultPtr&);
    
private:

    void clearLogs(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_clearLogs(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reloadLogs(const ::omero::model::EventPtr& toCopy)
    {
        reloadLogs(toCopy, 0);
    }
    void reloadLogs(const ::omero::model::EventPtr& toCopy, const ::Ice::Context& __ctx)
    {
        reloadLogs(toCopy, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_reloadLogs(const ::omero::model::EventPtr& toCopy, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reloadLogs(toCopy, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_reloadLogs(const ::omero::model::EventPtr& toCopy, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reloadLogs(toCopy, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reloadLogs(const ::omero::model::EventPtr& toCopy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reloadLogs(toCopy, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reloadLogs(const ::omero::model::EventPtr& toCopy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reloadLogs(toCopy, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_reloadLogs(const ::omero::model::EventPtr& toCopy)
    {
        return begin_reloadLogs(toCopy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadLogs(const ::omero::model::EventPtr& toCopy, const ::Ice::Context& __ctx)
    {
        return begin_reloadLogs(toCopy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadLogs(const ::omero::model::EventPtr& toCopy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadLogs(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadLogs(const ::omero::model::EventPtr& toCopy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadLogs(toCopy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadLogs(const ::omero::model::EventPtr& toCopy, const ::omero::model::Callback_Event_reloadLogsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadLogs(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadLogs(const ::omero::model::EventPtr& toCopy, const ::Ice::Context& __ctx, const ::omero::model::Callback_Event_reloadLogsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadLogs(toCopy, &__ctx, __del, __cookie);
    }

    void end_reloadLogs(const ::Ice::AsyncResultPtr&);
    
private:

    void reloadLogs(const ::omero::model::EventPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reloadLogs(const ::omero::model::EventPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::SessionPtr getSession()
    {
        return getSession(0);
    }
    ::omero::model::SessionPtr getSession(const ::Ice::Context& __ctx)
    {
        return getSession(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getSession(const ::IceInternal::Function<void (const ::omero::model::SessionPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getSession(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getSession(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getSession(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getSession(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::SessionPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getSession(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getSession(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getSession(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getSession(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::SessionPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::SessionPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::EventPrx __proxy = ::omero::model::EventPrx::uncheckedCast(__result->getProxy());
                ::omero::model::SessionPtr __ret;
                try
                {
                    __ret = __proxy->end_getSession(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::SessionPtr&)> _response;
        };
        return begin_getSession(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getSession()
    {
        return begin_getSession(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSession(const ::Ice::Context& __ctx)
    {
        return begin_getSession(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSession(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSession(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSession(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSession(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSession(const ::omero::model::Callback_Event_getSessionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSession(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSession(const ::Ice::Context& __ctx, const ::omero::model::Callback_Event_getSessionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSession(&__ctx, __del, __cookie);
    }

    ::omero::model::SessionPtr end_getSession(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::SessionPtr getSession(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getSession(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setSession(const ::omero::model::SessionPtr& theSession)
    {
        setSession(theSession, 0);
    }
    void setSession(const ::omero::model::SessionPtr& theSession, const ::Ice::Context& __ctx)
    {
        setSession(theSession, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setSession(const ::omero::model::SessionPtr& theSession, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setSession(theSession, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setSession(const ::omero::model::SessionPtr& theSession, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setSession(theSession, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setSession(const ::omero::model::SessionPtr& theSession, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setSession(theSession, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setSession(const ::omero::model::SessionPtr& theSession, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setSession(theSession, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setSession(const ::omero::model::SessionPtr& theSession)
    {
        return begin_setSession(theSession, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setSession(const ::omero::model::SessionPtr& theSession, const ::Ice::Context& __ctx)
    {
        return begin_setSession(theSession, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setSession(const ::omero::model::SessionPtr& theSession, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSession(theSession, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSession(const ::omero::model::SessionPtr& theSession, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSession(theSession, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSession(const ::omero::model::SessionPtr& theSession, const ::omero::model::Callback_Event_setSessionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSession(theSession, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSession(const ::omero::model::SessionPtr& theSession, const ::Ice::Context& __ctx, const ::omero::model::Callback_Event_setSessionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSession(theSession, &__ctx, __del, __cookie);
    }

    void end_setSession(const ::Ice::AsyncResultPtr&);
    
private:

    void setSession(const ::omero::model::SessionPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setSession(const ::omero::model::SessionPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Event> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Event*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Event> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Event*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Event> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Event*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Event> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Event*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Event> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Event*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Event> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Event*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Event> ice_secure(bool __secure) const
    {
        return dynamic_cast<Event*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Event> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Event*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Event> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Event*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Event> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Event*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Event> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Event*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Event> ice_twoway() const
    {
        return dynamic_cast<Event*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Event> ice_oneway() const
    {
        return dynamic_cast<Event*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Event> ice_batchOneway() const
    {
        return dynamic_cast<Event*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Event> ice_datagram() const
    {
        return dynamic_cast<Event*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Event> ice_batchDatagram() const
    {
        return dynamic_cast<Event*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Event> ice_compress(bool __compress) const
    {
        return dynamic_cast<Event*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Event> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Event*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Event> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Event*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Event> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Event*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

namespace IceDelegate
{

namespace omero
{

namespace model
{

class Event : virtual public ::IceDelegate::omero::model::IObject
{
public:

    virtual ::omero::RStringPtr getStatus(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setStatus(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RTimePtr getTime(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setTime(const ::omero::RTimePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::ExperimenterPtr getExperimenter(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setExperimenter(const ::omero::model::ExperimenterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::ExperimenterGroupPtr getExperimenterGroup(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setExperimenterGroup(const ::omero::model::ExperimenterGroupPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::EventTypePtr getType(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setType(const ::omero::model::EventTypePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::EventPtr getContainingEvent(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setContainingEvent(const ::omero::model::EventPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void unloadLogs(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int sizeOfLogs(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::EventLogsSeq copyLogs(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addEventLog(const ::omero::model::EventLogPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addAllEventLogSet(const ::omero::model::EventLogsSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeEventLog(const ::omero::model::EventLogPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeAllEventLogSet(const ::omero::model::EventLogsSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void clearLogs(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void reloadLogs(const ::omero::model::EventPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::SessionPtr getSession(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setSession(const ::omero::model::SessionPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

}

namespace IceDelegateM
{

namespace omero
{

namespace model
{

class Event : virtual public ::IceDelegate::omero::model::Event,
              virtual public ::IceDelegateM::omero::model::IObject
{
public:

    virtual ::omero::RStringPtr getStatus(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setStatus(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RTimePtr getTime(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setTime(const ::omero::RTimePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::ExperimenterPtr getExperimenter(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setExperimenter(const ::omero::model::ExperimenterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::ExperimenterGroupPtr getExperimenterGroup(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setExperimenterGroup(const ::omero::model::ExperimenterGroupPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::EventTypePtr getType(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setType(const ::omero::model::EventTypePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::EventPtr getContainingEvent(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setContainingEvent(const ::omero::model::EventPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unloadLogs(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int sizeOfLogs(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::EventLogsSeq copyLogs(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addEventLog(const ::omero::model::EventLogPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addAllEventLogSet(const ::omero::model::EventLogsSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeEventLog(const ::omero::model::EventLogPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeAllEventLogSet(const ::omero::model::EventLogsSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void clearLogs(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void reloadLogs(const ::omero::model::EventPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::SessionPtr getSession(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setSession(const ::omero::model::SessionPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace IceDelegateD
{

namespace omero
{

namespace model
{

class Event : virtual public ::IceDelegate::omero::model::Event,
              virtual public ::IceDelegateD::omero::model::IObject
{
public:

    virtual ::omero::RStringPtr getStatus(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setStatus(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RTimePtr getTime(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setTime(const ::omero::RTimePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::ExperimenterPtr getExperimenter(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setExperimenter(const ::omero::model::ExperimenterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::ExperimenterGroupPtr getExperimenterGroup(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setExperimenterGroup(const ::omero::model::ExperimenterGroupPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::EventTypePtr getType(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setType(const ::omero::model::EventTypePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::EventPtr getContainingEvent(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setContainingEvent(const ::omero::model::EventPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unloadLogs(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int sizeOfLogs(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::EventLogsSeq copyLogs(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addEventLog(const ::omero::model::EventLogPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addAllEventLogSet(const ::omero::model::EventLogsSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeEventLog(const ::omero::model::EventLogPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeAllEventLogSet(const ::omero::model::EventLogsSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void clearLogs(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void reloadLogs(const ::omero::model::EventPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::SessionPtr getSession(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setSession(const ::omero::model::SessionPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace omero
{

namespace model
{

class Event : public ::omero::model::IObject
{
public:

    typedef EventPrx ProxyType;
    typedef EventPtr PointerType;

    Event()
    {
    }

    Event(const ::omero::RLongPtr& __ice_id, const ::omero::model::DetailsPtr& __ice_details, bool __ice_loaded, const ::omero::RStringPtr& __ice_status, const ::omero::RTimePtr& __ice_time, const ::omero::model::ExperimenterPtr& __ice_experimenter, const ::omero::model::ExperimenterGroupPtr& __ice_experimenterGroup, const ::omero::model::EventTypePtr& __ice_type, const ::omero::model::EventPtr& __ice_containingEvent, const ::omero::model::EventLogsSeq& __ice_logsSeq, bool __ice_logsLoaded, const ::omero::model::SessionPtr& __ice_session) :
        ::omero::model::IObject(__ice_id, __ice_details, __ice_loaded)
        ,
        status(__ice_status),
        time(__ice_time),
        experimenter(__ice_experimenter),
        experimenterGroup(__ice_experimenterGroup),
        type(__ice_type),
        containingEvent(__ice_containingEvent),
        logsSeq(__ice_logsSeq),
        logsLoaded(__ice_logsLoaded),
        session(__ice_session)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    virtual ::omero::RStringPtr getStatus(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getStatus(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setStatus(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setStatus(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RTimePtr getTime(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getTime(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setTime(const ::omero::RTimePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setTime(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::ExperimenterPtr getExperimenter(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getExperimenter(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setExperimenter(const ::omero::model::ExperimenterPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setExperimenter(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::ExperimenterGroupPtr getExperimenterGroup(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getExperimenterGroup(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setExperimenterGroup(const ::omero::model::ExperimenterGroupPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setExperimenterGroup(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::EventTypePtr getType(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getType(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setType(const ::omero::model::EventTypePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setType(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::EventPtr getContainingEvent(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getContainingEvent(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setContainingEvent(const ::omero::model::EventPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setContainingEvent(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unloadLogs(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unloadLogs(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int sizeOfLogs(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sizeOfLogs(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::EventLogsSeq copyLogs(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___copyLogs(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addEventLog(const ::omero::model::EventLogPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addEventLog(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addAllEventLogSet(const ::omero::model::EventLogsSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addAllEventLogSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeEventLog(const ::omero::model::EventLogPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeEventLog(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeAllEventLogSet(const ::omero::model::EventLogsSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeAllEventLogSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void clearLogs(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___clearLogs(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reloadLogs(const ::omero::model::EventPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reloadLogs(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::SessionPtr getSession(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getSession(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setSession(const ::omero::model::SessionPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setSession(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::model::IObject::__writeImpl;
    using ::omero::model::IObject::__readImpl;
    #endif

    ::omero::RStringPtr status;

    ::omero::RTimePtr time;

    ::omero::model::ExperimenterPtr experimenter;

    ::omero::model::ExperimenterGroupPtr experimenterGroup;

    ::omero::model::EventTypePtr type;

    ::omero::model::EventPtr containingEvent;

    ::omero::model::EventLogsSeq logsSeq;

    bool logsLoaded;

    ::omero::model::SessionPtr session;
};

inline bool operator==(const Event& l, const Event& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Event& l, const Event& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

}

namespace omero
{

namespace model
{

template<class T>
class CallbackNC_Event_getStatus : public Callback_Event_getStatus_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_Event_getStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::EventPrx __proxy = ::omero::model::EventPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getStatus(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Event_getStatusPtr
newCallback_Event_getStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_getStatus<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Event_getStatusPtr
newCallback_Event_getStatus(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_getStatus<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Event_getStatus : public Callback_Event_getStatus_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_Event_getStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::EventPrx __proxy = ::omero::model::EventPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getStatus(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Event_getStatusPtr
newCallback_Event_getStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_getStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Event_getStatusPtr
newCallback_Event_getStatus(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_getStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Event_setStatus : public Callback_Event_setStatus_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Event_setStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Event_setStatusPtr
newCallback_Event_setStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_setStatus<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Event_setStatusPtr
newCallback_Event_setStatus(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_setStatus<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Event_setStatusPtr
newCallback_Event_setStatus(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_setStatus<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Event_setStatusPtr
newCallback_Event_setStatus(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_setStatus<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Event_setStatus : public Callback_Event_setStatus_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Event_setStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Event_setStatusPtr
newCallback_Event_setStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_setStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Event_setStatusPtr
newCallback_Event_setStatus(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_setStatus<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Event_setStatusPtr
newCallback_Event_setStatus(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_setStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Event_setStatusPtr
newCallback_Event_setStatus(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_setStatus<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Event_getTime : public Callback_Event_getTime_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RTimePtr&);

    CallbackNC_Event_getTime(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::EventPrx __proxy = ::omero::model::EventPrx::uncheckedCast(__result->getProxy());
        ::omero::RTimePtr __ret;
        try
        {
            __ret = __proxy->end_getTime(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Event_getTimePtr
newCallback_Event_getTime(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RTimePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_getTime<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Event_getTimePtr
newCallback_Event_getTime(T* instance, void (T::*cb)(const ::omero::RTimePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_getTime<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Event_getTime : public Callback_Event_getTime_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RTimePtr&, const CT&);

    Callback_Event_getTime(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::EventPrx __proxy = ::omero::model::EventPrx::uncheckedCast(__result->getProxy());
        ::omero::RTimePtr __ret;
        try
        {
            __ret = __proxy->end_getTime(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Event_getTimePtr
newCallback_Event_getTime(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RTimePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_getTime<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Event_getTimePtr
newCallback_Event_getTime(T* instance, void (T::*cb)(const ::omero::RTimePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_getTime<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Event_setTime : public Callback_Event_setTime_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Event_setTime(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Event_setTimePtr
newCallback_Event_setTime(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_setTime<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Event_setTimePtr
newCallback_Event_setTime(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_setTime<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Event_setTimePtr
newCallback_Event_setTime(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_setTime<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Event_setTimePtr
newCallback_Event_setTime(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_setTime<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Event_setTime : public Callback_Event_setTime_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Event_setTime(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Event_setTimePtr
newCallback_Event_setTime(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_setTime<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Event_setTimePtr
newCallback_Event_setTime(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_setTime<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Event_setTimePtr
newCallback_Event_setTime(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_setTime<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Event_setTimePtr
newCallback_Event_setTime(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_setTime<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Event_getExperimenter : public Callback_Event_getExperimenter_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::ExperimenterPtr&);

    CallbackNC_Event_getExperimenter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::EventPrx __proxy = ::omero::model::EventPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ExperimenterPtr __ret;
        try
        {
            __ret = __proxy->end_getExperimenter(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Event_getExperimenterPtr
newCallback_Event_getExperimenter(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ExperimenterPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_getExperimenter<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Event_getExperimenterPtr
newCallback_Event_getExperimenter(T* instance, void (T::*cb)(const ::omero::model::ExperimenterPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_getExperimenter<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Event_getExperimenter : public Callback_Event_getExperimenter_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::ExperimenterPtr&, const CT&);

    Callback_Event_getExperimenter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::EventPrx __proxy = ::omero::model::EventPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ExperimenterPtr __ret;
        try
        {
            __ret = __proxy->end_getExperimenter(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Event_getExperimenterPtr
newCallback_Event_getExperimenter(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ExperimenterPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_getExperimenter<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Event_getExperimenterPtr
newCallback_Event_getExperimenter(T* instance, void (T::*cb)(const ::omero::model::ExperimenterPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_getExperimenter<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Event_setExperimenter : public Callback_Event_setExperimenter_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Event_setExperimenter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Event_setExperimenterPtr
newCallback_Event_setExperimenter(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_setExperimenter<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Event_setExperimenterPtr
newCallback_Event_setExperimenter(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_setExperimenter<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Event_setExperimenterPtr
newCallback_Event_setExperimenter(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_setExperimenter<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Event_setExperimenterPtr
newCallback_Event_setExperimenter(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_setExperimenter<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Event_setExperimenter : public Callback_Event_setExperimenter_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Event_setExperimenter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Event_setExperimenterPtr
newCallback_Event_setExperimenter(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_setExperimenter<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Event_setExperimenterPtr
newCallback_Event_setExperimenter(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_setExperimenter<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Event_setExperimenterPtr
newCallback_Event_setExperimenter(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_setExperimenter<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Event_setExperimenterPtr
newCallback_Event_setExperimenter(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_setExperimenter<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Event_getExperimenterGroup : public Callback_Event_getExperimenterGroup_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::ExperimenterGroupPtr&);

    CallbackNC_Event_getExperimenterGroup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::EventPrx __proxy = ::omero::model::EventPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ExperimenterGroupPtr __ret;
        try
        {
            __ret = __proxy->end_getExperimenterGroup(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Event_getExperimenterGroupPtr
newCallback_Event_getExperimenterGroup(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ExperimenterGroupPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_getExperimenterGroup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Event_getExperimenterGroupPtr
newCallback_Event_getExperimenterGroup(T* instance, void (T::*cb)(const ::omero::model::ExperimenterGroupPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_getExperimenterGroup<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Event_getExperimenterGroup : public Callback_Event_getExperimenterGroup_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::ExperimenterGroupPtr&, const CT&);

    Callback_Event_getExperimenterGroup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::EventPrx __proxy = ::omero::model::EventPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ExperimenterGroupPtr __ret;
        try
        {
            __ret = __proxy->end_getExperimenterGroup(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Event_getExperimenterGroupPtr
newCallback_Event_getExperimenterGroup(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ExperimenterGroupPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_getExperimenterGroup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Event_getExperimenterGroupPtr
newCallback_Event_getExperimenterGroup(T* instance, void (T::*cb)(const ::omero::model::ExperimenterGroupPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_getExperimenterGroup<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Event_setExperimenterGroup : public Callback_Event_setExperimenterGroup_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Event_setExperimenterGroup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Event_setExperimenterGroupPtr
newCallback_Event_setExperimenterGroup(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_setExperimenterGroup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Event_setExperimenterGroupPtr
newCallback_Event_setExperimenterGroup(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_setExperimenterGroup<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Event_setExperimenterGroupPtr
newCallback_Event_setExperimenterGroup(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_setExperimenterGroup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Event_setExperimenterGroupPtr
newCallback_Event_setExperimenterGroup(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_setExperimenterGroup<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Event_setExperimenterGroup : public Callback_Event_setExperimenterGroup_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Event_setExperimenterGroup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Event_setExperimenterGroupPtr
newCallback_Event_setExperimenterGroup(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_setExperimenterGroup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Event_setExperimenterGroupPtr
newCallback_Event_setExperimenterGroup(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_setExperimenterGroup<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Event_setExperimenterGroupPtr
newCallback_Event_setExperimenterGroup(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_setExperimenterGroup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Event_setExperimenterGroupPtr
newCallback_Event_setExperimenterGroup(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_setExperimenterGroup<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Event_getType : public Callback_Event_getType_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::EventTypePtr&);

    CallbackNC_Event_getType(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::EventPrx __proxy = ::omero::model::EventPrx::uncheckedCast(__result->getProxy());
        ::omero::model::EventTypePtr __ret;
        try
        {
            __ret = __proxy->end_getType(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Event_getTypePtr
newCallback_Event_getType(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::EventTypePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_getType<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Event_getTypePtr
newCallback_Event_getType(T* instance, void (T::*cb)(const ::omero::model::EventTypePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_getType<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Event_getType : public Callback_Event_getType_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::EventTypePtr&, const CT&);

    Callback_Event_getType(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::EventPrx __proxy = ::omero::model::EventPrx::uncheckedCast(__result->getProxy());
        ::omero::model::EventTypePtr __ret;
        try
        {
            __ret = __proxy->end_getType(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Event_getTypePtr
newCallback_Event_getType(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::EventTypePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_getType<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Event_getTypePtr
newCallback_Event_getType(T* instance, void (T::*cb)(const ::omero::model::EventTypePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_getType<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Event_setType : public Callback_Event_setType_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Event_setType(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Event_setTypePtr
newCallback_Event_setType(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_setType<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Event_setTypePtr
newCallback_Event_setType(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_setType<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Event_setTypePtr
newCallback_Event_setType(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_setType<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Event_setTypePtr
newCallback_Event_setType(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_setType<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Event_setType : public Callback_Event_setType_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Event_setType(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Event_setTypePtr
newCallback_Event_setType(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_setType<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Event_setTypePtr
newCallback_Event_setType(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_setType<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Event_setTypePtr
newCallback_Event_setType(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_setType<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Event_setTypePtr
newCallback_Event_setType(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_setType<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Event_getContainingEvent : public Callback_Event_getContainingEvent_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::EventPtr&);

    CallbackNC_Event_getContainingEvent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::EventPrx __proxy = ::omero::model::EventPrx::uncheckedCast(__result->getProxy());
        ::omero::model::EventPtr __ret;
        try
        {
            __ret = __proxy->end_getContainingEvent(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Event_getContainingEventPtr
newCallback_Event_getContainingEvent(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::EventPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_getContainingEvent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Event_getContainingEventPtr
newCallback_Event_getContainingEvent(T* instance, void (T::*cb)(const ::omero::model::EventPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_getContainingEvent<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Event_getContainingEvent : public Callback_Event_getContainingEvent_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::EventPtr&, const CT&);

    Callback_Event_getContainingEvent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::EventPrx __proxy = ::omero::model::EventPrx::uncheckedCast(__result->getProxy());
        ::omero::model::EventPtr __ret;
        try
        {
            __ret = __proxy->end_getContainingEvent(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Event_getContainingEventPtr
newCallback_Event_getContainingEvent(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::EventPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_getContainingEvent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Event_getContainingEventPtr
newCallback_Event_getContainingEvent(T* instance, void (T::*cb)(const ::omero::model::EventPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_getContainingEvent<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Event_setContainingEvent : public Callback_Event_setContainingEvent_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Event_setContainingEvent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Event_setContainingEventPtr
newCallback_Event_setContainingEvent(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_setContainingEvent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Event_setContainingEventPtr
newCallback_Event_setContainingEvent(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_setContainingEvent<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Event_setContainingEventPtr
newCallback_Event_setContainingEvent(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_setContainingEvent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Event_setContainingEventPtr
newCallback_Event_setContainingEvent(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_setContainingEvent<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Event_setContainingEvent : public Callback_Event_setContainingEvent_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Event_setContainingEvent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Event_setContainingEventPtr
newCallback_Event_setContainingEvent(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_setContainingEvent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Event_setContainingEventPtr
newCallback_Event_setContainingEvent(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_setContainingEvent<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Event_setContainingEventPtr
newCallback_Event_setContainingEvent(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_setContainingEvent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Event_setContainingEventPtr
newCallback_Event_setContainingEvent(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_setContainingEvent<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Event_unloadLogs : public Callback_Event_unloadLogs_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Event_unloadLogs(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Event_unloadLogsPtr
newCallback_Event_unloadLogs(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_unloadLogs<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Event_unloadLogsPtr
newCallback_Event_unloadLogs(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_unloadLogs<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Event_unloadLogsPtr
newCallback_Event_unloadLogs(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_unloadLogs<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Event_unloadLogsPtr
newCallback_Event_unloadLogs(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_unloadLogs<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Event_unloadLogs : public Callback_Event_unloadLogs_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Event_unloadLogs(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Event_unloadLogsPtr
newCallback_Event_unloadLogs(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_unloadLogs<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Event_unloadLogsPtr
newCallback_Event_unloadLogs(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_unloadLogs<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Event_unloadLogsPtr
newCallback_Event_unloadLogs(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_unloadLogs<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Event_unloadLogsPtr
newCallback_Event_unloadLogs(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_unloadLogs<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Event_sizeOfLogs : public Callback_Event_sizeOfLogs_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Event_sizeOfLogs(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::EventPrx __proxy = ::omero::model::EventPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfLogs(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Event_sizeOfLogsPtr
newCallback_Event_sizeOfLogs(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_sizeOfLogs<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Event_sizeOfLogsPtr
newCallback_Event_sizeOfLogs(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_sizeOfLogs<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Event_sizeOfLogs : public Callback_Event_sizeOfLogs_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Event_sizeOfLogs(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::EventPrx __proxy = ::omero::model::EventPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfLogs(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Event_sizeOfLogsPtr
newCallback_Event_sizeOfLogs(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_sizeOfLogs<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Event_sizeOfLogsPtr
newCallback_Event_sizeOfLogs(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_sizeOfLogs<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Event_copyLogs : public Callback_Event_copyLogs_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::EventLogsSeq&);

    CallbackNC_Event_copyLogs(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::EventPrx __proxy = ::omero::model::EventPrx::uncheckedCast(__result->getProxy());
        ::omero::model::EventLogsSeq __ret;
        try
        {
            __ret = __proxy->end_copyLogs(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Event_copyLogsPtr
newCallback_Event_copyLogs(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::EventLogsSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_copyLogs<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Event_copyLogsPtr
newCallback_Event_copyLogs(T* instance, void (T::*cb)(const ::omero::model::EventLogsSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_copyLogs<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Event_copyLogs : public Callback_Event_copyLogs_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::EventLogsSeq&, const CT&);

    Callback_Event_copyLogs(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::EventPrx __proxy = ::omero::model::EventPrx::uncheckedCast(__result->getProxy());
        ::omero::model::EventLogsSeq __ret;
        try
        {
            __ret = __proxy->end_copyLogs(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Event_copyLogsPtr
newCallback_Event_copyLogs(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::EventLogsSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_copyLogs<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Event_copyLogsPtr
newCallback_Event_copyLogs(T* instance, void (T::*cb)(const ::omero::model::EventLogsSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_copyLogs<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Event_addEventLog : public Callback_Event_addEventLog_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Event_addEventLog(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Event_addEventLogPtr
newCallback_Event_addEventLog(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_addEventLog<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Event_addEventLogPtr
newCallback_Event_addEventLog(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_addEventLog<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Event_addEventLogPtr
newCallback_Event_addEventLog(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_addEventLog<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Event_addEventLogPtr
newCallback_Event_addEventLog(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_addEventLog<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Event_addEventLog : public Callback_Event_addEventLog_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Event_addEventLog(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Event_addEventLogPtr
newCallback_Event_addEventLog(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_addEventLog<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Event_addEventLogPtr
newCallback_Event_addEventLog(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_addEventLog<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Event_addEventLogPtr
newCallback_Event_addEventLog(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_addEventLog<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Event_addEventLogPtr
newCallback_Event_addEventLog(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_addEventLog<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Event_addAllEventLogSet : public Callback_Event_addAllEventLogSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Event_addAllEventLogSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Event_addAllEventLogSetPtr
newCallback_Event_addAllEventLogSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_addAllEventLogSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Event_addAllEventLogSetPtr
newCallback_Event_addAllEventLogSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_addAllEventLogSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Event_addAllEventLogSetPtr
newCallback_Event_addAllEventLogSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_addAllEventLogSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Event_addAllEventLogSetPtr
newCallback_Event_addAllEventLogSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_addAllEventLogSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Event_addAllEventLogSet : public Callback_Event_addAllEventLogSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Event_addAllEventLogSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Event_addAllEventLogSetPtr
newCallback_Event_addAllEventLogSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_addAllEventLogSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Event_addAllEventLogSetPtr
newCallback_Event_addAllEventLogSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_addAllEventLogSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Event_addAllEventLogSetPtr
newCallback_Event_addAllEventLogSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_addAllEventLogSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Event_addAllEventLogSetPtr
newCallback_Event_addAllEventLogSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_addAllEventLogSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Event_removeEventLog : public Callback_Event_removeEventLog_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Event_removeEventLog(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Event_removeEventLogPtr
newCallback_Event_removeEventLog(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_removeEventLog<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Event_removeEventLogPtr
newCallback_Event_removeEventLog(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_removeEventLog<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Event_removeEventLogPtr
newCallback_Event_removeEventLog(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_removeEventLog<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Event_removeEventLogPtr
newCallback_Event_removeEventLog(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_removeEventLog<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Event_removeEventLog : public Callback_Event_removeEventLog_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Event_removeEventLog(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Event_removeEventLogPtr
newCallback_Event_removeEventLog(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_removeEventLog<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Event_removeEventLogPtr
newCallback_Event_removeEventLog(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_removeEventLog<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Event_removeEventLogPtr
newCallback_Event_removeEventLog(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_removeEventLog<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Event_removeEventLogPtr
newCallback_Event_removeEventLog(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_removeEventLog<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Event_removeAllEventLogSet : public Callback_Event_removeAllEventLogSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Event_removeAllEventLogSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Event_removeAllEventLogSetPtr
newCallback_Event_removeAllEventLogSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_removeAllEventLogSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Event_removeAllEventLogSetPtr
newCallback_Event_removeAllEventLogSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_removeAllEventLogSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Event_removeAllEventLogSetPtr
newCallback_Event_removeAllEventLogSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_removeAllEventLogSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Event_removeAllEventLogSetPtr
newCallback_Event_removeAllEventLogSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_removeAllEventLogSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Event_removeAllEventLogSet : public Callback_Event_removeAllEventLogSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Event_removeAllEventLogSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Event_removeAllEventLogSetPtr
newCallback_Event_removeAllEventLogSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_removeAllEventLogSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Event_removeAllEventLogSetPtr
newCallback_Event_removeAllEventLogSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_removeAllEventLogSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Event_removeAllEventLogSetPtr
newCallback_Event_removeAllEventLogSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_removeAllEventLogSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Event_removeAllEventLogSetPtr
newCallback_Event_removeAllEventLogSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_removeAllEventLogSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Event_clearLogs : public Callback_Event_clearLogs_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Event_clearLogs(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Event_clearLogsPtr
newCallback_Event_clearLogs(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_clearLogs<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Event_clearLogsPtr
newCallback_Event_clearLogs(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_clearLogs<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Event_clearLogsPtr
newCallback_Event_clearLogs(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_clearLogs<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Event_clearLogsPtr
newCallback_Event_clearLogs(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_clearLogs<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Event_clearLogs : public Callback_Event_clearLogs_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Event_clearLogs(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Event_clearLogsPtr
newCallback_Event_clearLogs(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_clearLogs<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Event_clearLogsPtr
newCallback_Event_clearLogs(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_clearLogs<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Event_clearLogsPtr
newCallback_Event_clearLogs(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_clearLogs<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Event_clearLogsPtr
newCallback_Event_clearLogs(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_clearLogs<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Event_reloadLogs : public Callback_Event_reloadLogs_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Event_reloadLogs(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Event_reloadLogsPtr
newCallback_Event_reloadLogs(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_reloadLogs<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Event_reloadLogsPtr
newCallback_Event_reloadLogs(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_reloadLogs<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Event_reloadLogsPtr
newCallback_Event_reloadLogs(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_reloadLogs<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Event_reloadLogsPtr
newCallback_Event_reloadLogs(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_reloadLogs<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Event_reloadLogs : public Callback_Event_reloadLogs_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Event_reloadLogs(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Event_reloadLogsPtr
newCallback_Event_reloadLogs(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_reloadLogs<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Event_reloadLogsPtr
newCallback_Event_reloadLogs(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_reloadLogs<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Event_reloadLogsPtr
newCallback_Event_reloadLogs(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_reloadLogs<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Event_reloadLogsPtr
newCallback_Event_reloadLogs(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_reloadLogs<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Event_getSession : public Callback_Event_getSession_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::SessionPtr&);

    CallbackNC_Event_getSession(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::EventPrx __proxy = ::omero::model::EventPrx::uncheckedCast(__result->getProxy());
        ::omero::model::SessionPtr __ret;
        try
        {
            __ret = __proxy->end_getSession(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Event_getSessionPtr
newCallback_Event_getSession(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::SessionPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_getSession<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Event_getSessionPtr
newCallback_Event_getSession(T* instance, void (T::*cb)(const ::omero::model::SessionPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_getSession<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Event_getSession : public Callback_Event_getSession_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::SessionPtr&, const CT&);

    Callback_Event_getSession(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::EventPrx __proxy = ::omero::model::EventPrx::uncheckedCast(__result->getProxy());
        ::omero::model::SessionPtr __ret;
        try
        {
            __ret = __proxy->end_getSession(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Event_getSessionPtr
newCallback_Event_getSession(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::SessionPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_getSession<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Event_getSessionPtr
newCallback_Event_getSession(T* instance, void (T::*cb)(const ::omero::model::SessionPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_getSession<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Event_setSession : public Callback_Event_setSession_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Event_setSession(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Event_setSessionPtr
newCallback_Event_setSession(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_setSession<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Event_setSessionPtr
newCallback_Event_setSession(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_setSession<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Event_setSessionPtr
newCallback_Event_setSession(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_setSession<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Event_setSessionPtr
newCallback_Event_setSession(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Event_setSession<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Event_setSession : public Callback_Event_setSession_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Event_setSession(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Event_setSessionPtr
newCallback_Event_setSession(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_setSession<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Event_setSessionPtr
newCallback_Event_setSession(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_setSession<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Event_setSessionPtr
newCallback_Event_setSession(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_setSession<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Event_setSessionPtr
newCallback_Event_setSession(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Event_setSession<T, CT>(instance, 0, excb, sentcb);
}

}

}

#endif
