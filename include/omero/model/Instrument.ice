   /*
   **   Generated by blitz/templates/resouces/combined.vm
   **   See ../../README.ice for information on these types.
   **
   **   Copyright 2007, 2008 Glencoe Software, Inc. All rights reserved.
   **   Use is subject to license terms supplied in LICENSE.txt
   **
   */
#ifndef INSTRUMENT_ICE
#define INSTRUMENT_ICE
#include <omero/model/IObject.ice>
#include <omero/RTypes.ice>
#include <omero/System.ice>
#include <omero/Collections.ice>
module omero {
  module model {
    class Microscope;
    class Detector;
    class Objective;
    class LightSource;
    class Filter;
    class Dichroic;
    class FilterSet;
    class OTF;
    class Details;
    ["java:type:java.util.ArrayList"] sequence<omero::model::Detector> InstrumentDetectorSeq;
    ["java:type:java.util.ArrayList"] sequence<omero::model::Objective> InstrumentObjectiveSeq;
    ["java:type:java.util.ArrayList"] sequence<omero::model::LightSource> InstrumentLightSourceSeq;
    ["java:type:java.util.ArrayList"] sequence<omero::model::Filter> InstrumentFilterSeq;
    ["java:type:java.util.ArrayList"] sequence<omero::model::Dichroic> InstrumentDichroicSeq;
    ["java:type:java.util.ArrayList"] sequence<omero::model::FilterSet> InstrumentFilterSetSeq;
    ["java:type:java.util.ArrayList"] sequence<omero::model::OTF> InstrumentOtfSeq;
    ["protected"] class Instrument
    extends omero::model::IObject
    {
      omero::RInt version;
      omero::RInt getVersion();
      void setVersion(omero::RInt theVersion);
      omero::model::Microscope microscope;
      omero::model::Microscope getMicroscope();
      void setMicroscope(omero::model::Microscope theMicroscope);
      InstrumentDetectorSeq detectorSeq;
      bool detectorLoaded;
      /*
       * Unloads the detector collection. Any access to this
       * collection will throw an omero.UnloadedCollectionException.
       *
       * See sizeOfDetector() on how to test for unloaded collections.
       * See reloadDetector() on how to reset the value.
       *
       */
      void unloadDetector();
      int sizeOfDetector();
      InstrumentDetectorSeq copyDetector();
      // See language-specific iterator methods
      void addDetector(Detector target);
      /*
       * Adds all the members of the InstrumentDetectorSeq sequence to
       * the detectorSeq field.
       */
      void addAllDetectorSet(InstrumentDetectorSeq targets);
      void removeDetector(Detector theTarget);
      /*
       * Removes all the members of the InstrumentDetectorSeq sequence from
       * the detectorSeq field.
       */
      void removeAllDetectorSet(InstrumentDetectorSeq targets);
      void clearDetector();

      /*
       * Allows reloading the protected detector collection
       * from another instance of Instrument. The argument's collection
       * will be unloaded and all member entities will have their
       * inverse property altered.
       *
       * The argument's id must match and it's update id must be present and
       * greater than or equal to that of the current object.
       */
      void reloadDetector(Instrument toCopy);
      InstrumentObjectiveSeq objectiveSeq;
      bool objectiveLoaded;
      /*
       * Unloads the objective collection. Any access to this
       * collection will throw an omero.UnloadedCollectionException.
       *
       * See sizeOfObjective() on how to test for unloaded collections.
       * See reloadObjective() on how to reset the value.
       *
       */
      void unloadObjective();
      int sizeOfObjective();
      InstrumentObjectiveSeq copyObjective();
      // See language-specific iterator methods
      void addObjective(Objective target);
      /*
       * Adds all the members of the InstrumentObjectiveSeq sequence to
       * the objectiveSeq field.
       */
      void addAllObjectiveSet(InstrumentObjectiveSeq targets);
      void removeObjective(Objective theTarget);
      /*
       * Removes all the members of the InstrumentObjectiveSeq sequence from
       * the objectiveSeq field.
       */
      void removeAllObjectiveSet(InstrumentObjectiveSeq targets);
      void clearObjective();

      /*
       * Allows reloading the protected objective collection
       * from another instance of Instrument. The argument's collection
       * will be unloaded and all member entities will have their
       * inverse property altered.
       *
       * The argument's id must match and it's update id must be present and
       * greater than or equal to that of the current object.
       */
      void reloadObjective(Instrument toCopy);
      InstrumentLightSourceSeq lightSourceSeq;
      bool lightSourceLoaded;
      /*
       * Unloads the lightSource collection. Any access to this
       * collection will throw an omero.UnloadedCollectionException.
       *
       * See sizeOfLightSource() on how to test for unloaded collections.
       * See reloadLightSource() on how to reset the value.
       *
       */
      void unloadLightSource();
      int sizeOfLightSource();
      InstrumentLightSourceSeq copyLightSource();
      // See language-specific iterator methods
      void addLightSource(LightSource target);
      /*
       * Adds all the members of the InstrumentLightSourceSeq sequence to
       * the lightSourceSeq field.
       */
      void addAllLightSourceSet(InstrumentLightSourceSeq targets);
      void removeLightSource(LightSource theTarget);
      /*
       * Removes all the members of the InstrumentLightSourceSeq sequence from
       * the lightSourceSeq field.
       */
      void removeAllLightSourceSet(InstrumentLightSourceSeq targets);
      void clearLightSource();

      /*
       * Allows reloading the protected lightSource collection
       * from another instance of Instrument. The argument's collection
       * will be unloaded and all member entities will have their
       * inverse property altered.
       *
       * The argument's id must match and it's update id must be present and
       * greater than or equal to that of the current object.
       */
      void reloadLightSource(Instrument toCopy);
      InstrumentFilterSeq filterSeq;
      bool filterLoaded;
      /*
       * Unloads the filter collection. Any access to this
       * collection will throw an omero.UnloadedCollectionException.
       *
       * See sizeOfFilter() on how to test for unloaded collections.
       * See reloadFilter() on how to reset the value.
       *
       */
      void unloadFilter();
      int sizeOfFilter();
      InstrumentFilterSeq copyFilter();
      // See language-specific iterator methods
      void addFilter(Filter target);
      /*
       * Adds all the members of the InstrumentFilterSeq sequence to
       * the filterSeq field.
       */
      void addAllFilterSet(InstrumentFilterSeq targets);
      void removeFilter(Filter theTarget);
      /*
       * Removes all the members of the InstrumentFilterSeq sequence from
       * the filterSeq field.
       */
      void removeAllFilterSet(InstrumentFilterSeq targets);
      void clearFilter();

      /*
       * Allows reloading the protected filter collection
       * from another instance of Instrument. The argument's collection
       * will be unloaded and all member entities will have their
       * inverse property altered.
       *
       * The argument's id must match and it's update id must be present and
       * greater than or equal to that of the current object.
       */
      void reloadFilter(Instrument toCopy);
      InstrumentDichroicSeq dichroicSeq;
      bool dichroicLoaded;
      /*
       * Unloads the dichroic collection. Any access to this
       * collection will throw an omero.UnloadedCollectionException.
       *
       * See sizeOfDichroic() on how to test for unloaded collections.
       * See reloadDichroic() on how to reset the value.
       *
       */
      void unloadDichroic();
      int sizeOfDichroic();
      InstrumentDichroicSeq copyDichroic();
      // See language-specific iterator methods
      void addDichroic(Dichroic target);
      /*
       * Adds all the members of the InstrumentDichroicSeq sequence to
       * the dichroicSeq field.
       */
      void addAllDichroicSet(InstrumentDichroicSeq targets);
      void removeDichroic(Dichroic theTarget);
      /*
       * Removes all the members of the InstrumentDichroicSeq sequence from
       * the dichroicSeq field.
       */
      void removeAllDichroicSet(InstrumentDichroicSeq targets);
      void clearDichroic();

      /*
       * Allows reloading the protected dichroic collection
       * from another instance of Instrument. The argument's collection
       * will be unloaded and all member entities will have their
       * inverse property altered.
       *
       * The argument's id must match and it's update id must be present and
       * greater than or equal to that of the current object.
       */
      void reloadDichroic(Instrument toCopy);
      InstrumentFilterSetSeq filterSetSeq;
      bool filterSetLoaded;
      /*
       * Unloads the filterSet collection. Any access to this
       * collection will throw an omero.UnloadedCollectionException.
       *
       * See sizeOfFilterSet() on how to test for unloaded collections.
       * See reloadFilterSet() on how to reset the value.
       *
       */
      void unloadFilterSet();
      int sizeOfFilterSet();
      InstrumentFilterSetSeq copyFilterSet();
      // See language-specific iterator methods
      void addFilterSet(FilterSet target);
      /*
       * Adds all the members of the InstrumentFilterSetSeq sequence to
       * the filterSetSeq field.
       */
      void addAllFilterSetSet(InstrumentFilterSetSeq targets);
      void removeFilterSet(FilterSet theTarget);
      /*
       * Removes all the members of the InstrumentFilterSetSeq sequence from
       * the filterSetSeq field.
       */
      void removeAllFilterSetSet(InstrumentFilterSetSeq targets);
      void clearFilterSet();

      /*
       * Allows reloading the protected filterSet collection
       * from another instance of Instrument. The argument's collection
       * will be unloaded and all member entities will have their
       * inverse property altered.
       *
       * The argument's id must match and it's update id must be present and
       * greater than or equal to that of the current object.
       */
      void reloadFilterSet(Instrument toCopy);
      InstrumentOtfSeq otfSeq;
      bool otfLoaded;
      /*
       * Unloads the otf collection. Any access to this
       * collection will throw an omero.UnloadedCollectionException.
       *
       * See sizeOfOtf() on how to test for unloaded collections.
       * See reloadOtf() on how to reset the value.
       *
       */
      void unloadOtf();
      int sizeOfOtf();
      InstrumentOtfSeq copyOtf();
      // See language-specific iterator methods
      void addOTF(OTF target);
      /*
       * Adds all the members of the InstrumentOtfSeq sequence to
       * the otfSeq field.
       */
      void addAllOTFSet(InstrumentOtfSeq targets);
      void removeOTF(OTF theTarget);
      /*
       * Removes all the members of the InstrumentOtfSeq sequence from
       * the otfSeq field.
       */
      void removeAllOTFSet(InstrumentOtfSeq targets);
      void clearOtf();

      /*
       * Allows reloading the protected otf collection
       * from another instance of Instrument. The argument's collection
       * will be unloaded and all member entities will have their
       * inverse property altered.
       *
       * The argument's id must match and it's update id must be present and
       * greater than or equal to that of the current object.
       */
      void reloadOtf(Instrument toCopy);
    };
  };
};
#endif // INSTRUMENT_ICE
