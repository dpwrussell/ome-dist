// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `IObject.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_IObject_h__
#define __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_IObject_h__

#include <Ice/LocalObjectF.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/StreamF.h>
#include <omero/RTypes.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace omero
{

namespace model
{

class IObject;

}

}

}

namespace omero
{

namespace model
{

class IObject;
bool operator==(const IObject&, const IObject&);
bool operator<(const IObject&, const IObject&);

}

}

namespace IceInternal
{

::Ice::Object* upCast(::omero::model::IObject*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::IObject*);

}

namespace omero
{

namespace model
{

typedef ::IceInternal::Handle< ::omero::model::IObject> IObjectPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::IObject> IObjectPrx;

void __read(::IceInternal::BasicStream*, IObjectPrx&);
void __patch__IObjectPtr(void*, ::Ice::ObjectPtr&);

}

}

namespace omero
{

namespace model
{

class Callback_IObject_getId_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IObject_getId_Base> Callback_IObject_getIdPtr;

class Callback_IObject_setId_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IObject_setId_Base> Callback_IObject_setIdPtr;

class Callback_IObject_getDetails_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IObject_getDetails_Base> Callback_IObject_getDetailsPtr;

class Callback_IObject_proxy_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IObject_proxy_Base> Callback_IObject_proxyPtr;

class Callback_IObject_shallowCopy_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IObject_shallowCopy_Base> Callback_IObject_shallowCopyPtr;

class Callback_IObject_unload_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IObject_unload_Base> Callback_IObject_unloadPtr;

class Callback_IObject_unloadCollections_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IObject_unloadCollections_Base> Callback_IObject_unloadCollectionsPtr;

class Callback_IObject_unloadDetails_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IObject_unloadDetails_Base> Callback_IObject_unloadDetailsPtr;

class Callback_IObject_isLoaded_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IObject_isLoaded_Base> Callback_IObject_isLoadedPtr;

class Callback_IObject_isGlobal_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IObject_isGlobal_Base> Callback_IObject_isGlobalPtr;

class Callback_IObject_isLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IObject_isLink_Base> Callback_IObject_isLinkPtr;

class Callback_IObject_isMutable_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IObject_isMutable_Base> Callback_IObject_isMutablePtr;

class Callback_IObject_isAnnotated_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IObject_isAnnotated_Base> Callback_IObject_isAnnotatedPtr;

}

}

namespace IceProxy
{

namespace omero
{

namespace model
{

class IObject : virtual public ::IceProxy::Ice::Object
{
public:

    ::omero::RLongPtr getId()
    {
        return getId(0);
    }
    ::omero::RLongPtr getId(const ::Ice::Context& __ctx)
    {
        return getId(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getId()
    {
        return begin_getId(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getId(const ::Ice::Context& __ctx)
    {
        return begin_getId(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getId(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getId(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getId(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getId(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getId(const ::omero::model::Callback_IObject_getIdPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getId(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getId(const ::Ice::Context& __ctx, const ::omero::model::Callback_IObject_getIdPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getId(&__ctx, __del, __cookie);
    }

    ::omero::RLongPtr end_getId(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RLongPtr getId(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getId(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setId(const ::omero::RLongPtr& id)
    {
        setId(id, 0);
    }
    void setId(const ::omero::RLongPtr& id, const ::Ice::Context& __ctx)
    {
        setId(id, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setId(const ::omero::RLongPtr& id)
    {
        return begin_setId(id, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setId(const ::omero::RLongPtr& id, const ::Ice::Context& __ctx)
    {
        return begin_setId(id, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setId(const ::omero::RLongPtr& id, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setId(id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setId(const ::omero::RLongPtr& id, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setId(id, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setId(const ::omero::RLongPtr& id, const ::omero::model::Callback_IObject_setIdPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setId(id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setId(const ::omero::RLongPtr& id, const ::Ice::Context& __ctx, const ::omero::model::Callback_IObject_setIdPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setId(id, &__ctx, __del, __cookie);
    }

    void end_setId(const ::Ice::AsyncResultPtr&);
    
private:

    void setId(const ::omero::RLongPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setId(const ::omero::RLongPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::DetailsPtr getDetails()
    {
        return getDetails(0);
    }
    ::omero::model::DetailsPtr getDetails(const ::Ice::Context& __ctx)
    {
        return getDetails(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getDetails()
    {
        return begin_getDetails(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDetails(const ::Ice::Context& __ctx)
    {
        return begin_getDetails(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDetails(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDetails(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDetails(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDetails(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDetails(const ::omero::model::Callback_IObject_getDetailsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDetails(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDetails(const ::Ice::Context& __ctx, const ::omero::model::Callback_IObject_getDetailsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDetails(&__ctx, __del, __cookie);
    }

    ::omero::model::DetailsPtr end_getDetails(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::DetailsPtr getDetails(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getDetails(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::IObjectPtr proxy()
    {
        return proxy(0);
    }
    ::omero::model::IObjectPtr proxy(const ::Ice::Context& __ctx)
    {
        return proxy(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_proxy()
    {
        return begin_proxy(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_proxy(const ::Ice::Context& __ctx)
    {
        return begin_proxy(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_proxy(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_proxy(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_proxy(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_proxy(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_proxy(const ::omero::model::Callback_IObject_proxyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_proxy(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_proxy(const ::Ice::Context& __ctx, const ::omero::model::Callback_IObject_proxyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_proxy(&__ctx, __del, __cookie);
    }

    ::omero::model::IObjectPtr end_proxy(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::IObjectPtr proxy(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_proxy(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::IObjectPtr shallowCopy()
    {
        return shallowCopy(0);
    }
    ::omero::model::IObjectPtr shallowCopy(const ::Ice::Context& __ctx)
    {
        return shallowCopy(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_shallowCopy()
    {
        return begin_shallowCopy(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shallowCopy(const ::Ice::Context& __ctx)
    {
        return begin_shallowCopy(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shallowCopy(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shallowCopy(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shallowCopy(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shallowCopy(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shallowCopy(const ::omero::model::Callback_IObject_shallowCopyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shallowCopy(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shallowCopy(const ::Ice::Context& __ctx, const ::omero::model::Callback_IObject_shallowCopyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shallowCopy(&__ctx, __del, __cookie);
    }

    ::omero::model::IObjectPtr end_shallowCopy(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::IObjectPtr shallowCopy(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_shallowCopy(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unload()
    {
        unload(0);
    }
    void unload(const ::Ice::Context& __ctx)
    {
        unload(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_unload()
    {
        return begin_unload(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unload(const ::Ice::Context& __ctx)
    {
        return begin_unload(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unload(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unload(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unload(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unload(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unload(const ::omero::model::Callback_IObject_unloadPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unload(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unload(const ::Ice::Context& __ctx, const ::omero::model::Callback_IObject_unloadPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unload(&__ctx, __del, __cookie);
    }

    void end_unload(const ::Ice::AsyncResultPtr&);
    
private:

    void unload(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unload(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unloadCollections()
    {
        unloadCollections(0);
    }
    void unloadCollections(const ::Ice::Context& __ctx)
    {
        unloadCollections(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_unloadCollections()
    {
        return begin_unloadCollections(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadCollections(const ::Ice::Context& __ctx)
    {
        return begin_unloadCollections(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadCollections(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadCollections(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadCollections(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadCollections(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadCollections(const ::omero::model::Callback_IObject_unloadCollectionsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadCollections(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadCollections(const ::Ice::Context& __ctx, const ::omero::model::Callback_IObject_unloadCollectionsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadCollections(&__ctx, __del, __cookie);
    }

    void end_unloadCollections(const ::Ice::AsyncResultPtr&);
    
private:

    void unloadCollections(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unloadCollections(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unloadDetails()
    {
        unloadDetails(0);
    }
    void unloadDetails(const ::Ice::Context& __ctx)
    {
        unloadDetails(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_unloadDetails()
    {
        return begin_unloadDetails(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadDetails(const ::Ice::Context& __ctx)
    {
        return begin_unloadDetails(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadDetails(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadDetails(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadDetails(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadDetails(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadDetails(const ::omero::model::Callback_IObject_unloadDetailsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadDetails(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadDetails(const ::Ice::Context& __ctx, const ::omero::model::Callback_IObject_unloadDetailsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadDetails(&__ctx, __del, __cookie);
    }

    void end_unloadDetails(const ::Ice::AsyncResultPtr&);
    
private:

    void unloadDetails(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unloadDetails(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool isLoaded()
    {
        return isLoaded(0);
    }
    bool isLoaded(const ::Ice::Context& __ctx)
    {
        return isLoaded(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_isLoaded()
    {
        return begin_isLoaded(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_isLoaded(const ::Ice::Context& __ctx)
    {
        return begin_isLoaded(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_isLoaded(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isLoaded(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isLoaded(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isLoaded(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isLoaded(const ::omero::model::Callback_IObject_isLoadedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isLoaded(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isLoaded(const ::Ice::Context& __ctx, const ::omero::model::Callback_IObject_isLoadedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isLoaded(&__ctx, __del, __cookie);
    }

    bool end_isLoaded(const ::Ice::AsyncResultPtr&);
    
private:

    bool isLoaded(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_isLoaded(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool isGlobal()
    {
        return isGlobal(0);
    }
    bool isGlobal(const ::Ice::Context& __ctx)
    {
        return isGlobal(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_isGlobal()
    {
        return begin_isGlobal(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_isGlobal(const ::Ice::Context& __ctx)
    {
        return begin_isGlobal(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_isGlobal(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isGlobal(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isGlobal(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isGlobal(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isGlobal(const ::omero::model::Callback_IObject_isGlobalPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isGlobal(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isGlobal(const ::Ice::Context& __ctx, const ::omero::model::Callback_IObject_isGlobalPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isGlobal(&__ctx, __del, __cookie);
    }

    bool end_isGlobal(const ::Ice::AsyncResultPtr&);
    
private:

    bool isGlobal(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_isGlobal(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool isLink()
    {
        return isLink(0);
    }
    bool isLink(const ::Ice::Context& __ctx)
    {
        return isLink(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_isLink()
    {
        return begin_isLink(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_isLink(const ::Ice::Context& __ctx)
    {
        return begin_isLink(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_isLink(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isLink(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isLink(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isLink(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isLink(const ::omero::model::Callback_IObject_isLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isLink(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isLink(const ::Ice::Context& __ctx, const ::omero::model::Callback_IObject_isLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isLink(&__ctx, __del, __cookie);
    }

    bool end_isLink(const ::Ice::AsyncResultPtr&);
    
private:

    bool isLink(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_isLink(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool isMutable()
    {
        return isMutable(0);
    }
    bool isMutable(const ::Ice::Context& __ctx)
    {
        return isMutable(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_isMutable()
    {
        return begin_isMutable(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_isMutable(const ::Ice::Context& __ctx)
    {
        return begin_isMutable(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_isMutable(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isMutable(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isMutable(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isMutable(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isMutable(const ::omero::model::Callback_IObject_isMutablePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isMutable(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isMutable(const ::Ice::Context& __ctx, const ::omero::model::Callback_IObject_isMutablePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isMutable(&__ctx, __del, __cookie);
    }

    bool end_isMutable(const ::Ice::AsyncResultPtr&);
    
private:

    bool isMutable(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_isMutable(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool isAnnotated()
    {
        return isAnnotated(0);
    }
    bool isAnnotated(const ::Ice::Context& __ctx)
    {
        return isAnnotated(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_isAnnotated()
    {
        return begin_isAnnotated(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_isAnnotated(const ::Ice::Context& __ctx)
    {
        return begin_isAnnotated(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_isAnnotated(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isAnnotated(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isAnnotated(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isAnnotated(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isAnnotated(const ::omero::model::Callback_IObject_isAnnotatedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isAnnotated(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isAnnotated(const ::Ice::Context& __ctx, const ::omero::model::Callback_IObject_isAnnotatedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isAnnotated(&__ctx, __del, __cookie);
    }

    bool end_isAnnotated(const ::Ice::AsyncResultPtr&);
    
private:

    bool isAnnotated(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_isAnnotated(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<IObject> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IObject*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<IObject*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IObject> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IObject*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<IObject*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IObject> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IObject*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<IObject*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IObject> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IObject*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<IObject*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IObject> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IObject*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<IObject*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IObject> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IObject*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<IObject*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IObject> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IObject*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<IObject*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IObject> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IObject*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<IObject*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IObject> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IObject*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<IObject*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IObject> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IObject*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<IObject*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IObject> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IObject*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<IObject*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IObject> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IObject*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<IObject*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IObject> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IObject*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<IObject*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IObject> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IObject*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<IObject*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IObject> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IObject*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<IObject*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IObject> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IObject*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<IObject*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IObject> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IObject*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<IObject*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IObject> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IObject*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<IObject*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IObject> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IObject*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<IObject*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

namespace IceDelegate
{

namespace omero
{

namespace model
{

class IObject : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::omero::RLongPtr getId(const ::Ice::Context*) = 0;

    virtual void setId(const ::omero::RLongPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::model::DetailsPtr getDetails(const ::Ice::Context*) = 0;

    virtual ::omero::model::IObjectPtr proxy(const ::Ice::Context*) = 0;

    virtual ::omero::model::IObjectPtr shallowCopy(const ::Ice::Context*) = 0;

    virtual void unload(const ::Ice::Context*) = 0;

    virtual void unloadCollections(const ::Ice::Context*) = 0;

    virtual void unloadDetails(const ::Ice::Context*) = 0;

    virtual bool isLoaded(const ::Ice::Context*) = 0;

    virtual bool isGlobal(const ::Ice::Context*) = 0;

    virtual bool isLink(const ::Ice::Context*) = 0;

    virtual bool isMutable(const ::Ice::Context*) = 0;

    virtual bool isAnnotated(const ::Ice::Context*) = 0;
};

}

}

}

namespace IceDelegateM
{

namespace omero
{

namespace model
{

class IObject : virtual public ::IceDelegate::omero::model::IObject,
                virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::omero::RLongPtr getId(const ::Ice::Context*);

    virtual void setId(const ::omero::RLongPtr&, const ::Ice::Context*);

    virtual ::omero::model::DetailsPtr getDetails(const ::Ice::Context*);

    virtual ::omero::model::IObjectPtr proxy(const ::Ice::Context*);

    virtual ::omero::model::IObjectPtr shallowCopy(const ::Ice::Context*);

    virtual void unload(const ::Ice::Context*);

    virtual void unloadCollections(const ::Ice::Context*);

    virtual void unloadDetails(const ::Ice::Context*);

    virtual bool isLoaded(const ::Ice::Context*);

    virtual bool isGlobal(const ::Ice::Context*);

    virtual bool isLink(const ::Ice::Context*);

    virtual bool isMutable(const ::Ice::Context*);

    virtual bool isAnnotated(const ::Ice::Context*);
};

}

}

}

namespace IceDelegateD
{

namespace omero
{

namespace model
{

class IObject : virtual public ::IceDelegate::omero::model::IObject,
                virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::omero::RLongPtr getId(const ::Ice::Context*);

    virtual void setId(const ::omero::RLongPtr&, const ::Ice::Context*);

    virtual ::omero::model::DetailsPtr getDetails(const ::Ice::Context*);

    virtual ::omero::model::IObjectPtr proxy(const ::Ice::Context*);

    virtual ::omero::model::IObjectPtr shallowCopy(const ::Ice::Context*);

    virtual void unload(const ::Ice::Context*);

    virtual void unloadCollections(const ::Ice::Context*);

    virtual void unloadDetails(const ::Ice::Context*);

    virtual bool isLoaded(const ::Ice::Context*);

    virtual bool isGlobal(const ::Ice::Context*);

    virtual bool isLink(const ::Ice::Context*);

    virtual bool isMutable(const ::Ice::Context*);

    virtual bool isAnnotated(const ::Ice::Context*);
};

}

}

}

namespace omero
{

namespace model
{

class IObject : virtual public ::Ice::Object, private IceInternal::GCShared
{
public:

    typedef IObjectPrx ProxyType;
    typedef IObjectPtr PointerType;
    
    IObject() {}
    IObject(const ::omero::RLongPtr&, const ::omero::model::DetailsPtr&, bool);
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __addObject(::IceInternal::GCCountMap&);
    virtual bool __usesClasses();
    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    virtual ::omero::RLongPtr getId(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getId(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setId(const ::omero::RLongPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setId(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::DetailsPtr getDetails(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getDetails(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::IObjectPtr proxy(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___proxy(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::IObjectPtr shallowCopy(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___shallowCopy(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unload(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unload(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unloadCollections(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unloadCollections(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unloadDetails(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unloadDetails(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool isLoaded(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___isLoaded(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool isGlobal(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___isGlobal(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool isLink(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___isLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool isMutable(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___isMutable(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool isAnnotated(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___isAnnotated(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif

protected:

    ::omero::RLongPtr id;

    ::omero::model::DetailsPtr details;

    bool loaded;
};

inline bool operator==(const IObject& l, const IObject& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const IObject& l, const IObject& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

}

namespace omero
{

namespace model
{

template<class T>
class CallbackNC_IObject_getId : public Callback_IObject_getId_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RLongPtr&);

    CallbackNC_IObject_getId(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::IObjectPrx __proxy = ::omero::model::IObjectPrx::uncheckedCast(__result->getProxy());
        ::omero::RLongPtr __ret;
        try
        {
            __ret = __proxy->end_getId(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_IObject_getIdPtr
newCallback_IObject_getId(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RLongPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IObject_getId<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IObject_getIdPtr
newCallback_IObject_getId(T* instance, void (T::*cb)(const ::omero::RLongPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IObject_getId<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IObject_getId : public Callback_IObject_getId_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RLongPtr&, const CT&);

    Callback_IObject_getId(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::IObjectPrx __proxy = ::omero::model::IObjectPrx::uncheckedCast(__result->getProxy());
        ::omero::RLongPtr __ret;
        try
        {
            __ret = __proxy->end_getId(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IObject_getIdPtr
newCallback_IObject_getId(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RLongPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IObject_getId<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IObject_getIdPtr
newCallback_IObject_getId(T* instance, void (T::*cb)(const ::omero::RLongPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IObject_getId<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IObject_setId : public Callback_IObject_setId_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IObject_setId(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_IObject_setIdPtr
newCallback_IObject_setId(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IObject_setId<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IObject_setIdPtr
newCallback_IObject_setId(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IObject_setId<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IObject_setIdPtr
newCallback_IObject_setId(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IObject_setId<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IObject_setIdPtr
newCallback_IObject_setId(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IObject_setId<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IObject_setId : public Callback_IObject_setId_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IObject_setId(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_IObject_setIdPtr
newCallback_IObject_setId(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IObject_setId<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IObject_setIdPtr
newCallback_IObject_setId(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IObject_setId<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IObject_setIdPtr
newCallback_IObject_setId(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IObject_setId<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IObject_setIdPtr
newCallback_IObject_setId(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IObject_setId<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IObject_getDetails : public Callback_IObject_getDetails_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::DetailsPtr&);

    CallbackNC_IObject_getDetails(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::IObjectPrx __proxy = ::omero::model::IObjectPrx::uncheckedCast(__result->getProxy());
        ::omero::model::DetailsPtr __ret;
        try
        {
            __ret = __proxy->end_getDetails(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_IObject_getDetailsPtr
newCallback_IObject_getDetails(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::DetailsPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IObject_getDetails<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IObject_getDetailsPtr
newCallback_IObject_getDetails(T* instance, void (T::*cb)(const ::omero::model::DetailsPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IObject_getDetails<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IObject_getDetails : public Callback_IObject_getDetails_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::DetailsPtr&, const CT&);

    Callback_IObject_getDetails(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::IObjectPrx __proxy = ::omero::model::IObjectPrx::uncheckedCast(__result->getProxy());
        ::omero::model::DetailsPtr __ret;
        try
        {
            __ret = __proxy->end_getDetails(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IObject_getDetailsPtr
newCallback_IObject_getDetails(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::DetailsPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IObject_getDetails<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IObject_getDetailsPtr
newCallback_IObject_getDetails(T* instance, void (T::*cb)(const ::omero::model::DetailsPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IObject_getDetails<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IObject_proxy : public Callback_IObject_proxy_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::IObjectPtr&);

    CallbackNC_IObject_proxy(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::IObjectPrx __proxy = ::omero::model::IObjectPrx::uncheckedCast(__result->getProxy());
        ::omero::model::IObjectPtr __ret;
        try
        {
            __ret = __proxy->end_proxy(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_IObject_proxyPtr
newCallback_IObject_proxy(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::IObjectPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IObject_proxy<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IObject_proxyPtr
newCallback_IObject_proxy(T* instance, void (T::*cb)(const ::omero::model::IObjectPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IObject_proxy<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IObject_proxy : public Callback_IObject_proxy_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::IObjectPtr&, const CT&);

    Callback_IObject_proxy(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::IObjectPrx __proxy = ::omero::model::IObjectPrx::uncheckedCast(__result->getProxy());
        ::omero::model::IObjectPtr __ret;
        try
        {
            __ret = __proxy->end_proxy(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IObject_proxyPtr
newCallback_IObject_proxy(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::IObjectPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IObject_proxy<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IObject_proxyPtr
newCallback_IObject_proxy(T* instance, void (T::*cb)(const ::omero::model::IObjectPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IObject_proxy<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IObject_shallowCopy : public Callback_IObject_shallowCopy_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::IObjectPtr&);

    CallbackNC_IObject_shallowCopy(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::IObjectPrx __proxy = ::omero::model::IObjectPrx::uncheckedCast(__result->getProxy());
        ::omero::model::IObjectPtr __ret;
        try
        {
            __ret = __proxy->end_shallowCopy(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_IObject_shallowCopyPtr
newCallback_IObject_shallowCopy(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::IObjectPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IObject_shallowCopy<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IObject_shallowCopyPtr
newCallback_IObject_shallowCopy(T* instance, void (T::*cb)(const ::omero::model::IObjectPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IObject_shallowCopy<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IObject_shallowCopy : public Callback_IObject_shallowCopy_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::IObjectPtr&, const CT&);

    Callback_IObject_shallowCopy(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::IObjectPrx __proxy = ::omero::model::IObjectPrx::uncheckedCast(__result->getProxy());
        ::omero::model::IObjectPtr __ret;
        try
        {
            __ret = __proxy->end_shallowCopy(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IObject_shallowCopyPtr
newCallback_IObject_shallowCopy(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::IObjectPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IObject_shallowCopy<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IObject_shallowCopyPtr
newCallback_IObject_shallowCopy(T* instance, void (T::*cb)(const ::omero::model::IObjectPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IObject_shallowCopy<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IObject_unload : public Callback_IObject_unload_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IObject_unload(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_IObject_unloadPtr
newCallback_IObject_unload(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IObject_unload<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IObject_unloadPtr
newCallback_IObject_unload(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IObject_unload<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IObject_unloadPtr
newCallback_IObject_unload(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IObject_unload<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IObject_unloadPtr
newCallback_IObject_unload(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IObject_unload<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IObject_unload : public Callback_IObject_unload_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IObject_unload(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_IObject_unloadPtr
newCallback_IObject_unload(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IObject_unload<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IObject_unloadPtr
newCallback_IObject_unload(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IObject_unload<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IObject_unloadPtr
newCallback_IObject_unload(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IObject_unload<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IObject_unloadPtr
newCallback_IObject_unload(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IObject_unload<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IObject_unloadCollections : public Callback_IObject_unloadCollections_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IObject_unloadCollections(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_IObject_unloadCollectionsPtr
newCallback_IObject_unloadCollections(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IObject_unloadCollections<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IObject_unloadCollectionsPtr
newCallback_IObject_unloadCollections(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IObject_unloadCollections<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IObject_unloadCollectionsPtr
newCallback_IObject_unloadCollections(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IObject_unloadCollections<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IObject_unloadCollectionsPtr
newCallback_IObject_unloadCollections(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IObject_unloadCollections<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IObject_unloadCollections : public Callback_IObject_unloadCollections_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IObject_unloadCollections(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_IObject_unloadCollectionsPtr
newCallback_IObject_unloadCollections(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IObject_unloadCollections<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IObject_unloadCollectionsPtr
newCallback_IObject_unloadCollections(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IObject_unloadCollections<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IObject_unloadCollectionsPtr
newCallback_IObject_unloadCollections(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IObject_unloadCollections<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IObject_unloadCollectionsPtr
newCallback_IObject_unloadCollections(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IObject_unloadCollections<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IObject_unloadDetails : public Callback_IObject_unloadDetails_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IObject_unloadDetails(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_IObject_unloadDetailsPtr
newCallback_IObject_unloadDetails(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IObject_unloadDetails<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IObject_unloadDetailsPtr
newCallback_IObject_unloadDetails(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IObject_unloadDetails<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IObject_unloadDetailsPtr
newCallback_IObject_unloadDetails(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IObject_unloadDetails<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IObject_unloadDetailsPtr
newCallback_IObject_unloadDetails(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IObject_unloadDetails<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IObject_unloadDetails : public Callback_IObject_unloadDetails_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IObject_unloadDetails(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_IObject_unloadDetailsPtr
newCallback_IObject_unloadDetails(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IObject_unloadDetails<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IObject_unloadDetailsPtr
newCallback_IObject_unloadDetails(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IObject_unloadDetails<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IObject_unloadDetailsPtr
newCallback_IObject_unloadDetails(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IObject_unloadDetails<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IObject_unloadDetailsPtr
newCallback_IObject_unloadDetails(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IObject_unloadDetails<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IObject_isLoaded : public Callback_IObject_isLoaded_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_IObject_isLoaded(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::IObjectPrx __proxy = ::omero::model::IObjectPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_isLoaded(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_IObject_isLoadedPtr
newCallback_IObject_isLoaded(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IObject_isLoaded<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IObject_isLoadedPtr
newCallback_IObject_isLoaded(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IObject_isLoaded<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IObject_isLoaded : public Callback_IObject_isLoaded_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_IObject_isLoaded(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::IObjectPrx __proxy = ::omero::model::IObjectPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_isLoaded(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IObject_isLoadedPtr
newCallback_IObject_isLoaded(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IObject_isLoaded<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IObject_isLoadedPtr
newCallback_IObject_isLoaded(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IObject_isLoaded<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IObject_isGlobal : public Callback_IObject_isGlobal_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_IObject_isGlobal(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::IObjectPrx __proxy = ::omero::model::IObjectPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_isGlobal(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_IObject_isGlobalPtr
newCallback_IObject_isGlobal(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IObject_isGlobal<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IObject_isGlobalPtr
newCallback_IObject_isGlobal(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IObject_isGlobal<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IObject_isGlobal : public Callback_IObject_isGlobal_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_IObject_isGlobal(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::IObjectPrx __proxy = ::omero::model::IObjectPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_isGlobal(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IObject_isGlobalPtr
newCallback_IObject_isGlobal(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IObject_isGlobal<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IObject_isGlobalPtr
newCallback_IObject_isGlobal(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IObject_isGlobal<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IObject_isLink : public Callback_IObject_isLink_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_IObject_isLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::IObjectPrx __proxy = ::omero::model::IObjectPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_isLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_IObject_isLinkPtr
newCallback_IObject_isLink(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IObject_isLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IObject_isLinkPtr
newCallback_IObject_isLink(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IObject_isLink<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IObject_isLink : public Callback_IObject_isLink_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_IObject_isLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::IObjectPrx __proxy = ::omero::model::IObjectPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_isLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IObject_isLinkPtr
newCallback_IObject_isLink(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IObject_isLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IObject_isLinkPtr
newCallback_IObject_isLink(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IObject_isLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IObject_isMutable : public Callback_IObject_isMutable_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_IObject_isMutable(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::IObjectPrx __proxy = ::omero::model::IObjectPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_isMutable(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_IObject_isMutablePtr
newCallback_IObject_isMutable(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IObject_isMutable<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IObject_isMutablePtr
newCallback_IObject_isMutable(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IObject_isMutable<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IObject_isMutable : public Callback_IObject_isMutable_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_IObject_isMutable(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::IObjectPrx __proxy = ::omero::model::IObjectPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_isMutable(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IObject_isMutablePtr
newCallback_IObject_isMutable(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IObject_isMutable<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IObject_isMutablePtr
newCallback_IObject_isMutable(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IObject_isMutable<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IObject_isAnnotated : public Callback_IObject_isAnnotated_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_IObject_isAnnotated(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::IObjectPrx __proxy = ::omero::model::IObjectPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_isAnnotated(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_IObject_isAnnotatedPtr
newCallback_IObject_isAnnotated(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IObject_isAnnotated<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IObject_isAnnotatedPtr
newCallback_IObject_isAnnotated(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IObject_isAnnotated<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IObject_isAnnotated : public Callback_IObject_isAnnotated_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_IObject_isAnnotated(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::IObjectPrx __proxy = ::omero::model::IObjectPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_isAnnotated(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IObject_isAnnotatedPtr
newCallback_IObject_isAnnotated(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IObject_isAnnotated<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IObject_isAnnotatedPtr
newCallback_IObject_isAnnotated(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IObject_isAnnotated<T, CT>(instance, cb, excb, sentcb);
}

}

}

#endif
