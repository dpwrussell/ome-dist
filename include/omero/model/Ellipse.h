// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Ellipse.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_Ellipse_h__
#define __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_Ellipse_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <omero/model/IObject.h>
#include <omero/RTypes.h>
#include <omero/System.h>
#include <omero/Collections.h>
#include <omero/model/Shape.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace omero
{

namespace model
{

class Roi;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Roi>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Roi*);

class Details;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Details>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Details*);

class Ellipse;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Ellipse>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Ellipse*);

}

}

}

namespace omero
{

namespace model
{

class Roi;
bool operator==(const Roi&, const Roi&);
bool operator<(const Roi&, const Roi&);
::Ice::Object* upCast(::omero::model::Roi*);
typedef ::IceInternal::Handle< ::omero::model::Roi> RoiPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Roi> RoiPrx;
void __patch(RoiPtr&, const ::Ice::ObjectPtr&);

class Details;
bool operator==(const Details&, const Details&);
bool operator<(const Details&, const Details&);
::Ice::Object* upCast(::omero::model::Details*);
typedef ::IceInternal::Handle< ::omero::model::Details> DetailsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Details> DetailsPrx;
void __patch(DetailsPtr&, const ::Ice::ObjectPtr&);

class Ellipse;
bool operator==(const Ellipse&, const Ellipse&);
bool operator<(const Ellipse&, const Ellipse&);
::Ice::Object* upCast(::omero::model::Ellipse*);
typedef ::IceInternal::Handle< ::omero::model::Ellipse> EllipsePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Ellipse> EllipsePrx;
void __patch(EllipsePtr&, const ::Ice::ObjectPtr&);

}

}

namespace omero
{

namespace model
{

class Callback_Ellipse_getCx_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Ellipse_getCx_Base> Callback_Ellipse_getCxPtr;

class Callback_Ellipse_setCx_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Ellipse_setCx_Base> Callback_Ellipse_setCxPtr;

class Callback_Ellipse_getCy_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Ellipse_getCy_Base> Callback_Ellipse_getCyPtr;

class Callback_Ellipse_setCy_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Ellipse_setCy_Base> Callback_Ellipse_setCyPtr;

class Callback_Ellipse_getRx_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Ellipse_getRx_Base> Callback_Ellipse_getRxPtr;

class Callback_Ellipse_setRx_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Ellipse_setRx_Base> Callback_Ellipse_setRxPtr;

class Callback_Ellipse_getRy_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Ellipse_getRy_Base> Callback_Ellipse_getRyPtr;

class Callback_Ellipse_setRy_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Ellipse_setRy_Base> Callback_Ellipse_setRyPtr;

class Callback_Ellipse_getTextValue_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Ellipse_getTextValue_Base> Callback_Ellipse_getTextValuePtr;

class Callback_Ellipse_setTextValue_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Ellipse_setTextValue_Base> Callback_Ellipse_setTextValuePtr;

}

}

namespace IceProxy
{

namespace omero
{

namespace model
{

class Ellipse : virtual public ::IceProxy::omero::model::Shape
{
public:

    ::omero::RDoublePtr getCx()
    {
        return getCx(0);
    }
    ::omero::RDoublePtr getCx(const ::Ice::Context& __ctx)
    {
        return getCx(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getCx(const ::IceInternal::Function<void (const ::omero::RDoublePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getCx(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getCx(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getCx(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getCx(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RDoublePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getCx(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getCx(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getCx(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getCx(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RDoublePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RDoublePtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::EllipsePrx __proxy = ::omero::model::EllipsePrx::uncheckedCast(__result->getProxy());
                ::omero::RDoublePtr __ret;
                try
                {
                    __ret = __proxy->end_getCx(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RDoublePtr&)> _response;
        };
        return begin_getCx(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getCx()
    {
        return begin_getCx(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getCx(const ::Ice::Context& __ctx)
    {
        return begin_getCx(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getCx(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCx(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCx(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCx(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCx(const ::omero::model::Callback_Ellipse_getCxPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCx(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCx(const ::Ice::Context& __ctx, const ::omero::model::Callback_Ellipse_getCxPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCx(&__ctx, __del, __cookie);
    }

    ::omero::RDoublePtr end_getCx(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RDoublePtr getCx(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getCx(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setCx(const ::omero::RDoublePtr& theCx)
    {
        setCx(theCx, 0);
    }
    void setCx(const ::omero::RDoublePtr& theCx, const ::Ice::Context& __ctx)
    {
        setCx(theCx, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setCx(const ::omero::RDoublePtr& theCx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setCx(theCx, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setCx(const ::omero::RDoublePtr& theCx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setCx(theCx, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setCx(const ::omero::RDoublePtr& theCx, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setCx(theCx, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setCx(const ::omero::RDoublePtr& theCx, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setCx(theCx, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setCx(const ::omero::RDoublePtr& theCx)
    {
        return begin_setCx(theCx, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setCx(const ::omero::RDoublePtr& theCx, const ::Ice::Context& __ctx)
    {
        return begin_setCx(theCx, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setCx(const ::omero::RDoublePtr& theCx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCx(theCx, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setCx(const ::omero::RDoublePtr& theCx, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCx(theCx, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setCx(const ::omero::RDoublePtr& theCx, const ::omero::model::Callback_Ellipse_setCxPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCx(theCx, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setCx(const ::omero::RDoublePtr& theCx, const ::Ice::Context& __ctx, const ::omero::model::Callback_Ellipse_setCxPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCx(theCx, &__ctx, __del, __cookie);
    }

    void end_setCx(const ::Ice::AsyncResultPtr&);
    
private:

    void setCx(const ::omero::RDoublePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setCx(const ::omero::RDoublePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RDoublePtr getCy()
    {
        return getCy(0);
    }
    ::omero::RDoublePtr getCy(const ::Ice::Context& __ctx)
    {
        return getCy(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getCy(const ::IceInternal::Function<void (const ::omero::RDoublePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getCy(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getCy(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getCy(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getCy(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RDoublePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getCy(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getCy(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getCy(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getCy(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RDoublePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RDoublePtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::EllipsePrx __proxy = ::omero::model::EllipsePrx::uncheckedCast(__result->getProxy());
                ::omero::RDoublePtr __ret;
                try
                {
                    __ret = __proxy->end_getCy(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RDoublePtr&)> _response;
        };
        return begin_getCy(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getCy()
    {
        return begin_getCy(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getCy(const ::Ice::Context& __ctx)
    {
        return begin_getCy(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getCy(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCy(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCy(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCy(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCy(const ::omero::model::Callback_Ellipse_getCyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCy(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCy(const ::Ice::Context& __ctx, const ::omero::model::Callback_Ellipse_getCyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCy(&__ctx, __del, __cookie);
    }

    ::omero::RDoublePtr end_getCy(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RDoublePtr getCy(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getCy(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setCy(const ::omero::RDoublePtr& theCy)
    {
        setCy(theCy, 0);
    }
    void setCy(const ::omero::RDoublePtr& theCy, const ::Ice::Context& __ctx)
    {
        setCy(theCy, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setCy(const ::omero::RDoublePtr& theCy, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setCy(theCy, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setCy(const ::omero::RDoublePtr& theCy, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setCy(theCy, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setCy(const ::omero::RDoublePtr& theCy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setCy(theCy, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setCy(const ::omero::RDoublePtr& theCy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setCy(theCy, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setCy(const ::omero::RDoublePtr& theCy)
    {
        return begin_setCy(theCy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setCy(const ::omero::RDoublePtr& theCy, const ::Ice::Context& __ctx)
    {
        return begin_setCy(theCy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setCy(const ::omero::RDoublePtr& theCy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCy(theCy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setCy(const ::omero::RDoublePtr& theCy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCy(theCy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setCy(const ::omero::RDoublePtr& theCy, const ::omero::model::Callback_Ellipse_setCyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCy(theCy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setCy(const ::omero::RDoublePtr& theCy, const ::Ice::Context& __ctx, const ::omero::model::Callback_Ellipse_setCyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCy(theCy, &__ctx, __del, __cookie);
    }

    void end_setCy(const ::Ice::AsyncResultPtr&);
    
private:

    void setCy(const ::omero::RDoublePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setCy(const ::omero::RDoublePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RDoublePtr getRx()
    {
        return getRx(0);
    }
    ::omero::RDoublePtr getRx(const ::Ice::Context& __ctx)
    {
        return getRx(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getRx(const ::IceInternal::Function<void (const ::omero::RDoublePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getRx(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getRx(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getRx(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getRx(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RDoublePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getRx(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getRx(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getRx(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getRx(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RDoublePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RDoublePtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::EllipsePrx __proxy = ::omero::model::EllipsePrx::uncheckedCast(__result->getProxy());
                ::omero::RDoublePtr __ret;
                try
                {
                    __ret = __proxy->end_getRx(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RDoublePtr&)> _response;
        };
        return begin_getRx(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getRx()
    {
        return begin_getRx(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRx(const ::Ice::Context& __ctx)
    {
        return begin_getRx(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRx(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRx(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRx(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRx(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRx(const ::omero::model::Callback_Ellipse_getRxPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRx(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRx(const ::Ice::Context& __ctx, const ::omero::model::Callback_Ellipse_getRxPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRx(&__ctx, __del, __cookie);
    }

    ::omero::RDoublePtr end_getRx(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RDoublePtr getRx(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getRx(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setRx(const ::omero::RDoublePtr& theRx)
    {
        setRx(theRx, 0);
    }
    void setRx(const ::omero::RDoublePtr& theRx, const ::Ice::Context& __ctx)
    {
        setRx(theRx, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setRx(const ::omero::RDoublePtr& theRx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setRx(theRx, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setRx(const ::omero::RDoublePtr& theRx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setRx(theRx, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setRx(const ::omero::RDoublePtr& theRx, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setRx(theRx, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setRx(const ::omero::RDoublePtr& theRx, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setRx(theRx, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setRx(const ::omero::RDoublePtr& theRx)
    {
        return begin_setRx(theRx, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setRx(const ::omero::RDoublePtr& theRx, const ::Ice::Context& __ctx)
    {
        return begin_setRx(theRx, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setRx(const ::omero::RDoublePtr& theRx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setRx(theRx, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setRx(const ::omero::RDoublePtr& theRx, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setRx(theRx, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setRx(const ::omero::RDoublePtr& theRx, const ::omero::model::Callback_Ellipse_setRxPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setRx(theRx, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setRx(const ::omero::RDoublePtr& theRx, const ::Ice::Context& __ctx, const ::omero::model::Callback_Ellipse_setRxPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setRx(theRx, &__ctx, __del, __cookie);
    }

    void end_setRx(const ::Ice::AsyncResultPtr&);
    
private:

    void setRx(const ::omero::RDoublePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setRx(const ::omero::RDoublePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RDoublePtr getRy()
    {
        return getRy(0);
    }
    ::omero::RDoublePtr getRy(const ::Ice::Context& __ctx)
    {
        return getRy(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getRy(const ::IceInternal::Function<void (const ::omero::RDoublePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getRy(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getRy(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getRy(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getRy(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RDoublePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getRy(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getRy(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getRy(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getRy(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RDoublePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RDoublePtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::EllipsePrx __proxy = ::omero::model::EllipsePrx::uncheckedCast(__result->getProxy());
                ::omero::RDoublePtr __ret;
                try
                {
                    __ret = __proxy->end_getRy(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RDoublePtr&)> _response;
        };
        return begin_getRy(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getRy()
    {
        return begin_getRy(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRy(const ::Ice::Context& __ctx)
    {
        return begin_getRy(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRy(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRy(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRy(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRy(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRy(const ::omero::model::Callback_Ellipse_getRyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRy(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRy(const ::Ice::Context& __ctx, const ::omero::model::Callback_Ellipse_getRyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRy(&__ctx, __del, __cookie);
    }

    ::omero::RDoublePtr end_getRy(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RDoublePtr getRy(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getRy(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setRy(const ::omero::RDoublePtr& theRy)
    {
        setRy(theRy, 0);
    }
    void setRy(const ::omero::RDoublePtr& theRy, const ::Ice::Context& __ctx)
    {
        setRy(theRy, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setRy(const ::omero::RDoublePtr& theRy, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setRy(theRy, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setRy(const ::omero::RDoublePtr& theRy, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setRy(theRy, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setRy(const ::omero::RDoublePtr& theRy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setRy(theRy, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setRy(const ::omero::RDoublePtr& theRy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setRy(theRy, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setRy(const ::omero::RDoublePtr& theRy)
    {
        return begin_setRy(theRy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setRy(const ::omero::RDoublePtr& theRy, const ::Ice::Context& __ctx)
    {
        return begin_setRy(theRy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setRy(const ::omero::RDoublePtr& theRy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setRy(theRy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setRy(const ::omero::RDoublePtr& theRy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setRy(theRy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setRy(const ::omero::RDoublePtr& theRy, const ::omero::model::Callback_Ellipse_setRyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setRy(theRy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setRy(const ::omero::RDoublePtr& theRy, const ::Ice::Context& __ctx, const ::omero::model::Callback_Ellipse_setRyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setRy(theRy, &__ctx, __del, __cookie);
    }

    void end_setRy(const ::Ice::AsyncResultPtr&);
    
private:

    void setRy(const ::omero::RDoublePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setRy(const ::omero::RDoublePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getTextValue()
    {
        return getTextValue(0);
    }
    ::omero::RStringPtr getTextValue(const ::Ice::Context& __ctx)
    {
        return getTextValue(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getTextValue(const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getTextValue(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getTextValue(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getTextValue(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getTextValue(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getTextValue(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getTextValue(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getTextValue(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getTextValue(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RStringPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::EllipsePrx __proxy = ::omero::model::EllipsePrx::uncheckedCast(__result->getProxy());
                ::omero::RStringPtr __ret;
                try
                {
                    __ret = __proxy->end_getTextValue(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RStringPtr&)> _response;
        };
        return begin_getTextValue(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getTextValue()
    {
        return begin_getTextValue(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getTextValue(const ::Ice::Context& __ctx)
    {
        return begin_getTextValue(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getTextValue(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTextValue(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTextValue(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTextValue(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTextValue(const ::omero::model::Callback_Ellipse_getTextValuePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTextValue(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTextValue(const ::Ice::Context& __ctx, const ::omero::model::Callback_Ellipse_getTextValuePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTextValue(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getTextValue(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getTextValue(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getTextValue(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setTextValue(const ::omero::RStringPtr& theTextValue)
    {
        setTextValue(theTextValue, 0);
    }
    void setTextValue(const ::omero::RStringPtr& theTextValue, const ::Ice::Context& __ctx)
    {
        setTextValue(theTextValue, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setTextValue(const ::omero::RStringPtr& theTextValue, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setTextValue(theTextValue, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setTextValue(const ::omero::RStringPtr& theTextValue, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setTextValue(theTextValue, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setTextValue(const ::omero::RStringPtr& theTextValue, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setTextValue(theTextValue, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setTextValue(const ::omero::RStringPtr& theTextValue, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setTextValue(theTextValue, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setTextValue(const ::omero::RStringPtr& theTextValue)
    {
        return begin_setTextValue(theTextValue, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setTextValue(const ::omero::RStringPtr& theTextValue, const ::Ice::Context& __ctx)
    {
        return begin_setTextValue(theTextValue, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setTextValue(const ::omero::RStringPtr& theTextValue, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTextValue(theTextValue, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setTextValue(const ::omero::RStringPtr& theTextValue, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTextValue(theTextValue, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setTextValue(const ::omero::RStringPtr& theTextValue, const ::omero::model::Callback_Ellipse_setTextValuePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTextValue(theTextValue, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setTextValue(const ::omero::RStringPtr& theTextValue, const ::Ice::Context& __ctx, const ::omero::model::Callback_Ellipse_setTextValuePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTextValue(theTextValue, &__ctx, __del, __cookie);
    }

    void end_setTextValue(const ::Ice::AsyncResultPtr&);
    
private:

    void setTextValue(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setTextValue(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Ellipse> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Ellipse*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Ellipse> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Ellipse*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Ellipse> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Ellipse*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Ellipse> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Ellipse*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Ellipse> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Ellipse*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Ellipse> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Ellipse*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Ellipse> ice_secure(bool __secure) const
    {
        return dynamic_cast<Ellipse*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Ellipse> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Ellipse*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Ellipse> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Ellipse*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Ellipse> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Ellipse*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Ellipse> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Ellipse*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Ellipse> ice_twoway() const
    {
        return dynamic_cast<Ellipse*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Ellipse> ice_oneway() const
    {
        return dynamic_cast<Ellipse*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Ellipse> ice_batchOneway() const
    {
        return dynamic_cast<Ellipse*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Ellipse> ice_datagram() const
    {
        return dynamic_cast<Ellipse*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Ellipse> ice_batchDatagram() const
    {
        return dynamic_cast<Ellipse*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Ellipse> ice_compress(bool __compress) const
    {
        return dynamic_cast<Ellipse*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Ellipse> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Ellipse*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Ellipse> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Ellipse*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Ellipse> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Ellipse*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

namespace IceDelegate
{

namespace omero
{

namespace model
{

class Ellipse : virtual public ::IceDelegate::omero::model::Shape
{
public:

    virtual ::omero::RDoublePtr getCx(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setCx(const ::omero::RDoublePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RDoublePtr getCy(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setCy(const ::omero::RDoublePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RDoublePtr getRx(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setRx(const ::omero::RDoublePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RDoublePtr getRy(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setRy(const ::omero::RDoublePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RStringPtr getTextValue(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setTextValue(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

}

namespace IceDelegateM
{

namespace omero
{

namespace model
{

class Ellipse : virtual public ::IceDelegate::omero::model::Ellipse,
                virtual public ::IceDelegateM::omero::model::Shape
{
public:

    virtual ::omero::RDoublePtr getCx(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setCx(const ::omero::RDoublePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RDoublePtr getCy(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setCy(const ::omero::RDoublePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RDoublePtr getRx(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setRx(const ::omero::RDoublePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RDoublePtr getRy(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setRy(const ::omero::RDoublePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getTextValue(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setTextValue(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace IceDelegateD
{

namespace omero
{

namespace model
{

class Ellipse : virtual public ::IceDelegate::omero::model::Ellipse,
                virtual public ::IceDelegateD::omero::model::Shape
{
public:

    virtual ::omero::RDoublePtr getCx(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setCx(const ::omero::RDoublePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RDoublePtr getCy(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setCy(const ::omero::RDoublePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RDoublePtr getRx(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setRx(const ::omero::RDoublePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RDoublePtr getRy(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setRy(const ::omero::RDoublePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getTextValue(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setTextValue(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace omero
{

namespace model
{

class Ellipse : public ::omero::model::Shape
{
public:

    typedef EllipsePrx ProxyType;
    typedef EllipsePtr PointerType;

    Ellipse()
    {
    }

    Ellipse(const ::omero::RLongPtr& __ice_id, const ::omero::model::DetailsPtr& __ice_details, bool __ice_loaded, const ::omero::RIntPtr& __ice_version, const ::omero::RIntPtr& __ice_theZ, const ::omero::RIntPtr& __ice_theT, const ::omero::RIntPtr& __ice_theC, const ::omero::model::RoiPtr& __ice_roi, const ::omero::RBoolPtr& __ice_locked, const ::omero::RStringPtr& __ice_g, const ::omero::RStringPtr& __ice_transform, const ::omero::RStringPtr& __ice_vectorEffect, const ::omero::RBoolPtr& __ice_visibility, const ::omero::RIntPtr& __ice_fillColor, const ::omero::RStringPtr& __ice_fillRule, const ::omero::RIntPtr& __ice_strokeColor, const ::omero::RStringPtr& __ice_strokeDashArray, const ::omero::RIntPtr& __ice_strokeDashOffset, const ::omero::RStringPtr& __ice_strokeLineCap, const ::omero::RStringPtr& __ice_strokeLineJoin, const ::omero::RIntPtr& __ice_strokeMiterLimit, const ::omero::RIntPtr& __ice_strokeWidth, const ::omero::RStringPtr& __ice_fontFamily, const ::omero::RIntPtr& __ice_fontSize, const ::omero::RStringPtr& __ice_fontStretch, const ::omero::RStringPtr& __ice_fontStyle, const ::omero::RStringPtr& __ice_fontVariant, const ::omero::RStringPtr& __ice_fontWeight, const ::omero::RDoublePtr& __ice_cx, const ::omero::RDoublePtr& __ice_cy, const ::omero::RDoublePtr& __ice_rx, const ::omero::RDoublePtr& __ice_ry, const ::omero::RStringPtr& __ice_textValue) :
        ::omero::model::Shape(__ice_id, __ice_details, __ice_loaded, __ice_version, __ice_theZ, __ice_theT, __ice_theC, __ice_roi, __ice_locked, __ice_g, __ice_transform, __ice_vectorEffect, __ice_visibility, __ice_fillColor, __ice_fillRule, __ice_strokeColor, __ice_strokeDashArray, __ice_strokeDashOffset, __ice_strokeLineCap, __ice_strokeLineJoin, __ice_strokeMiterLimit, __ice_strokeWidth, __ice_fontFamily, __ice_fontSize, __ice_fontStretch, __ice_fontStyle, __ice_fontVariant, __ice_fontWeight)
        ,
        cx(__ice_cx),
        cy(__ice_cy),
        rx(__ice_rx),
        ry(__ice_ry),
        textValue(__ice_textValue)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    virtual ::omero::RDoublePtr getCx(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getCx(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setCx(const ::omero::RDoublePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setCx(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RDoublePtr getCy(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getCy(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setCy(const ::omero::RDoublePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setCy(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RDoublePtr getRx(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getRx(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setRx(const ::omero::RDoublePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setRx(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RDoublePtr getRy(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getRy(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setRy(const ::omero::RDoublePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setRy(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getTextValue(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getTextValue(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setTextValue(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setTextValue(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::model::Shape::__writeImpl;
    using ::omero::model::Shape::__readImpl;
    #endif

    ::omero::RDoublePtr cx;

    ::omero::RDoublePtr cy;

    ::omero::RDoublePtr rx;

    ::omero::RDoublePtr ry;

    ::omero::RStringPtr textValue;
};

inline bool operator==(const Ellipse& l, const Ellipse& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Ellipse& l, const Ellipse& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

}

namespace omero
{

namespace model
{

template<class T>
class CallbackNC_Ellipse_getCx : public Callback_Ellipse_getCx_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RDoublePtr&);

    CallbackNC_Ellipse_getCx(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::EllipsePrx __proxy = ::omero::model::EllipsePrx::uncheckedCast(__result->getProxy());
        ::omero::RDoublePtr __ret;
        try
        {
            __ret = __proxy->end_getCx(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Ellipse_getCxPtr
newCallback_Ellipse_getCx(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RDoublePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Ellipse_getCx<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Ellipse_getCxPtr
newCallback_Ellipse_getCx(T* instance, void (T::*cb)(const ::omero::RDoublePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Ellipse_getCx<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Ellipse_getCx : public Callback_Ellipse_getCx_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RDoublePtr&, const CT&);

    Callback_Ellipse_getCx(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::EllipsePrx __proxy = ::omero::model::EllipsePrx::uncheckedCast(__result->getProxy());
        ::omero::RDoublePtr __ret;
        try
        {
            __ret = __proxy->end_getCx(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Ellipse_getCxPtr
newCallback_Ellipse_getCx(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RDoublePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Ellipse_getCx<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Ellipse_getCxPtr
newCallback_Ellipse_getCx(T* instance, void (T::*cb)(const ::omero::RDoublePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Ellipse_getCx<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Ellipse_setCx : public Callback_Ellipse_setCx_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Ellipse_setCx(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Ellipse_setCxPtr
newCallback_Ellipse_setCx(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Ellipse_setCx<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Ellipse_setCxPtr
newCallback_Ellipse_setCx(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Ellipse_setCx<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Ellipse_setCxPtr
newCallback_Ellipse_setCx(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Ellipse_setCx<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Ellipse_setCxPtr
newCallback_Ellipse_setCx(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Ellipse_setCx<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Ellipse_setCx : public Callback_Ellipse_setCx_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Ellipse_setCx(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Ellipse_setCxPtr
newCallback_Ellipse_setCx(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Ellipse_setCx<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Ellipse_setCxPtr
newCallback_Ellipse_setCx(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Ellipse_setCx<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Ellipse_setCxPtr
newCallback_Ellipse_setCx(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Ellipse_setCx<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Ellipse_setCxPtr
newCallback_Ellipse_setCx(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Ellipse_setCx<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Ellipse_getCy : public Callback_Ellipse_getCy_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RDoublePtr&);

    CallbackNC_Ellipse_getCy(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::EllipsePrx __proxy = ::omero::model::EllipsePrx::uncheckedCast(__result->getProxy());
        ::omero::RDoublePtr __ret;
        try
        {
            __ret = __proxy->end_getCy(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Ellipse_getCyPtr
newCallback_Ellipse_getCy(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RDoublePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Ellipse_getCy<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Ellipse_getCyPtr
newCallback_Ellipse_getCy(T* instance, void (T::*cb)(const ::omero::RDoublePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Ellipse_getCy<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Ellipse_getCy : public Callback_Ellipse_getCy_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RDoublePtr&, const CT&);

    Callback_Ellipse_getCy(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::EllipsePrx __proxy = ::omero::model::EllipsePrx::uncheckedCast(__result->getProxy());
        ::omero::RDoublePtr __ret;
        try
        {
            __ret = __proxy->end_getCy(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Ellipse_getCyPtr
newCallback_Ellipse_getCy(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RDoublePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Ellipse_getCy<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Ellipse_getCyPtr
newCallback_Ellipse_getCy(T* instance, void (T::*cb)(const ::omero::RDoublePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Ellipse_getCy<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Ellipse_setCy : public Callback_Ellipse_setCy_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Ellipse_setCy(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Ellipse_setCyPtr
newCallback_Ellipse_setCy(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Ellipse_setCy<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Ellipse_setCyPtr
newCallback_Ellipse_setCy(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Ellipse_setCy<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Ellipse_setCyPtr
newCallback_Ellipse_setCy(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Ellipse_setCy<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Ellipse_setCyPtr
newCallback_Ellipse_setCy(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Ellipse_setCy<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Ellipse_setCy : public Callback_Ellipse_setCy_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Ellipse_setCy(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Ellipse_setCyPtr
newCallback_Ellipse_setCy(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Ellipse_setCy<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Ellipse_setCyPtr
newCallback_Ellipse_setCy(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Ellipse_setCy<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Ellipse_setCyPtr
newCallback_Ellipse_setCy(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Ellipse_setCy<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Ellipse_setCyPtr
newCallback_Ellipse_setCy(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Ellipse_setCy<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Ellipse_getRx : public Callback_Ellipse_getRx_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RDoublePtr&);

    CallbackNC_Ellipse_getRx(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::EllipsePrx __proxy = ::omero::model::EllipsePrx::uncheckedCast(__result->getProxy());
        ::omero::RDoublePtr __ret;
        try
        {
            __ret = __proxy->end_getRx(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Ellipse_getRxPtr
newCallback_Ellipse_getRx(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RDoublePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Ellipse_getRx<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Ellipse_getRxPtr
newCallback_Ellipse_getRx(T* instance, void (T::*cb)(const ::omero::RDoublePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Ellipse_getRx<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Ellipse_getRx : public Callback_Ellipse_getRx_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RDoublePtr&, const CT&);

    Callback_Ellipse_getRx(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::EllipsePrx __proxy = ::omero::model::EllipsePrx::uncheckedCast(__result->getProxy());
        ::omero::RDoublePtr __ret;
        try
        {
            __ret = __proxy->end_getRx(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Ellipse_getRxPtr
newCallback_Ellipse_getRx(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RDoublePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Ellipse_getRx<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Ellipse_getRxPtr
newCallback_Ellipse_getRx(T* instance, void (T::*cb)(const ::omero::RDoublePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Ellipse_getRx<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Ellipse_setRx : public Callback_Ellipse_setRx_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Ellipse_setRx(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Ellipse_setRxPtr
newCallback_Ellipse_setRx(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Ellipse_setRx<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Ellipse_setRxPtr
newCallback_Ellipse_setRx(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Ellipse_setRx<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Ellipse_setRxPtr
newCallback_Ellipse_setRx(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Ellipse_setRx<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Ellipse_setRxPtr
newCallback_Ellipse_setRx(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Ellipse_setRx<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Ellipse_setRx : public Callback_Ellipse_setRx_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Ellipse_setRx(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Ellipse_setRxPtr
newCallback_Ellipse_setRx(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Ellipse_setRx<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Ellipse_setRxPtr
newCallback_Ellipse_setRx(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Ellipse_setRx<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Ellipse_setRxPtr
newCallback_Ellipse_setRx(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Ellipse_setRx<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Ellipse_setRxPtr
newCallback_Ellipse_setRx(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Ellipse_setRx<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Ellipse_getRy : public Callback_Ellipse_getRy_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RDoublePtr&);

    CallbackNC_Ellipse_getRy(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::EllipsePrx __proxy = ::omero::model::EllipsePrx::uncheckedCast(__result->getProxy());
        ::omero::RDoublePtr __ret;
        try
        {
            __ret = __proxy->end_getRy(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Ellipse_getRyPtr
newCallback_Ellipse_getRy(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RDoublePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Ellipse_getRy<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Ellipse_getRyPtr
newCallback_Ellipse_getRy(T* instance, void (T::*cb)(const ::omero::RDoublePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Ellipse_getRy<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Ellipse_getRy : public Callback_Ellipse_getRy_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RDoublePtr&, const CT&);

    Callback_Ellipse_getRy(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::EllipsePrx __proxy = ::omero::model::EllipsePrx::uncheckedCast(__result->getProxy());
        ::omero::RDoublePtr __ret;
        try
        {
            __ret = __proxy->end_getRy(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Ellipse_getRyPtr
newCallback_Ellipse_getRy(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RDoublePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Ellipse_getRy<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Ellipse_getRyPtr
newCallback_Ellipse_getRy(T* instance, void (T::*cb)(const ::omero::RDoublePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Ellipse_getRy<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Ellipse_setRy : public Callback_Ellipse_setRy_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Ellipse_setRy(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Ellipse_setRyPtr
newCallback_Ellipse_setRy(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Ellipse_setRy<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Ellipse_setRyPtr
newCallback_Ellipse_setRy(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Ellipse_setRy<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Ellipse_setRyPtr
newCallback_Ellipse_setRy(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Ellipse_setRy<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Ellipse_setRyPtr
newCallback_Ellipse_setRy(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Ellipse_setRy<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Ellipse_setRy : public Callback_Ellipse_setRy_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Ellipse_setRy(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Ellipse_setRyPtr
newCallback_Ellipse_setRy(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Ellipse_setRy<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Ellipse_setRyPtr
newCallback_Ellipse_setRy(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Ellipse_setRy<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Ellipse_setRyPtr
newCallback_Ellipse_setRy(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Ellipse_setRy<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Ellipse_setRyPtr
newCallback_Ellipse_setRy(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Ellipse_setRy<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Ellipse_getTextValue : public Callback_Ellipse_getTextValue_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_Ellipse_getTextValue(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::EllipsePrx __proxy = ::omero::model::EllipsePrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getTextValue(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Ellipse_getTextValuePtr
newCallback_Ellipse_getTextValue(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Ellipse_getTextValue<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Ellipse_getTextValuePtr
newCallback_Ellipse_getTextValue(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Ellipse_getTextValue<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Ellipse_getTextValue : public Callback_Ellipse_getTextValue_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_Ellipse_getTextValue(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::EllipsePrx __proxy = ::omero::model::EllipsePrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getTextValue(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Ellipse_getTextValuePtr
newCallback_Ellipse_getTextValue(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Ellipse_getTextValue<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Ellipse_getTextValuePtr
newCallback_Ellipse_getTextValue(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Ellipse_getTextValue<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Ellipse_setTextValue : public Callback_Ellipse_setTextValue_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Ellipse_setTextValue(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Ellipse_setTextValuePtr
newCallback_Ellipse_setTextValue(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Ellipse_setTextValue<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Ellipse_setTextValuePtr
newCallback_Ellipse_setTextValue(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Ellipse_setTextValue<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Ellipse_setTextValuePtr
newCallback_Ellipse_setTextValue(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Ellipse_setTextValue<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Ellipse_setTextValuePtr
newCallback_Ellipse_setTextValue(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Ellipse_setTextValue<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Ellipse_setTextValue : public Callback_Ellipse_setTextValue_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Ellipse_setTextValue(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Ellipse_setTextValuePtr
newCallback_Ellipse_setTextValue(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Ellipse_setTextValue<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Ellipse_setTextValuePtr
newCallback_Ellipse_setTextValue(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Ellipse_setTextValue<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Ellipse_setTextValuePtr
newCallback_Ellipse_setTextValue(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Ellipse_setTextValue<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Ellipse_setTextValuePtr
newCallback_Ellipse_setTextValue(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Ellipse_setTextValue<T, CT>(instance, 0, excb, sentcb);
}

}

}

#endif
