// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Experiment.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_Experiment_h__
#define __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_Experiment_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <omero/model/IObject.h>
#include <omero/RTypes.h>
#include <omero/System.h>
#include <omero/Collections.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace omero
{

namespace model
{

class ExperimentType;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::ExperimentType>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::ExperimentType*);

class MicrobeamManipulation;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::MicrobeamManipulation>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::MicrobeamManipulation*);

class Details;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Details>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Details*);

class Experiment;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Experiment>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Experiment*);

}

}

}

namespace omero
{

namespace model
{

class ExperimentType;
bool operator==(const ExperimentType&, const ExperimentType&);
bool operator<(const ExperimentType&, const ExperimentType&);
::Ice::Object* upCast(::omero::model::ExperimentType*);
typedef ::IceInternal::Handle< ::omero::model::ExperimentType> ExperimentTypePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::ExperimentType> ExperimentTypePrx;
void __patch(ExperimentTypePtr&, const ::Ice::ObjectPtr&);

class MicrobeamManipulation;
bool operator==(const MicrobeamManipulation&, const MicrobeamManipulation&);
bool operator<(const MicrobeamManipulation&, const MicrobeamManipulation&);
::Ice::Object* upCast(::omero::model::MicrobeamManipulation*);
typedef ::IceInternal::Handle< ::omero::model::MicrobeamManipulation> MicrobeamManipulationPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::MicrobeamManipulation> MicrobeamManipulationPrx;
void __patch(MicrobeamManipulationPtr&, const ::Ice::ObjectPtr&);

class Details;
bool operator==(const Details&, const Details&);
bool operator<(const Details&, const Details&);
::Ice::Object* upCast(::omero::model::Details*);
typedef ::IceInternal::Handle< ::omero::model::Details> DetailsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Details> DetailsPrx;
void __patch(DetailsPtr&, const ::Ice::ObjectPtr&);

class Experiment;
bool operator==(const Experiment&, const Experiment&);
bool operator<(const Experiment&, const Experiment&);
::Ice::Object* upCast(::omero::model::Experiment*);
typedef ::IceInternal::Handle< ::omero::model::Experiment> ExperimentPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Experiment> ExperimentPrx;
void __patch(ExperimentPtr&, const ::Ice::ObjectPtr&);

}

}

namespace omero
{

namespace model
{

typedef ::std::vector< ::omero::model::MicrobeamManipulationPtr> ExperimentMicrobeamManipulationSeq;

}

}

namespace omero
{

namespace model
{

class Callback_Experiment_getVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Experiment_getVersion_Base> Callback_Experiment_getVersionPtr;

class Callback_Experiment_setVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Experiment_setVersion_Base> Callback_Experiment_setVersionPtr;

class Callback_Experiment_getType_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Experiment_getType_Base> Callback_Experiment_getTypePtr;

class Callback_Experiment_setType_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Experiment_setType_Base> Callback_Experiment_setTypePtr;

class Callback_Experiment_unloadMicrobeamManipulation_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Experiment_unloadMicrobeamManipulation_Base> Callback_Experiment_unloadMicrobeamManipulationPtr;

class Callback_Experiment_sizeOfMicrobeamManipulation_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Experiment_sizeOfMicrobeamManipulation_Base> Callback_Experiment_sizeOfMicrobeamManipulationPtr;

class Callback_Experiment_copyMicrobeamManipulation_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Experiment_copyMicrobeamManipulation_Base> Callback_Experiment_copyMicrobeamManipulationPtr;

class Callback_Experiment_addMicrobeamManipulation_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Experiment_addMicrobeamManipulation_Base> Callback_Experiment_addMicrobeamManipulationPtr;

class Callback_Experiment_addAllMicrobeamManipulationSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Experiment_addAllMicrobeamManipulationSet_Base> Callback_Experiment_addAllMicrobeamManipulationSetPtr;

class Callback_Experiment_removeMicrobeamManipulation_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Experiment_removeMicrobeamManipulation_Base> Callback_Experiment_removeMicrobeamManipulationPtr;

class Callback_Experiment_removeAllMicrobeamManipulationSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Experiment_removeAllMicrobeamManipulationSet_Base> Callback_Experiment_removeAllMicrobeamManipulationSetPtr;

class Callback_Experiment_clearMicrobeamManipulation_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Experiment_clearMicrobeamManipulation_Base> Callback_Experiment_clearMicrobeamManipulationPtr;

class Callback_Experiment_reloadMicrobeamManipulation_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Experiment_reloadMicrobeamManipulation_Base> Callback_Experiment_reloadMicrobeamManipulationPtr;

class Callback_Experiment_getDescription_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Experiment_getDescription_Base> Callback_Experiment_getDescriptionPtr;

class Callback_Experiment_setDescription_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Experiment_setDescription_Base> Callback_Experiment_setDescriptionPtr;

}

}

namespace IceProxy
{

namespace omero
{

namespace model
{

class Experiment : virtual public ::IceProxy::omero::model::IObject
{
public:

    ::omero::RIntPtr getVersion()
    {
        return getVersion(0);
    }
    ::omero::RIntPtr getVersion(const ::Ice::Context& __ctx)
    {
        return getVersion(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getVersion(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getVersion(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getVersion(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getVersion(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getVersion(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RIntPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::ExperimentPrx __proxy = ::omero::model::ExperimentPrx::uncheckedCast(__result->getProxy());
                ::omero::RIntPtr __ret;
                try
                {
                    __ret = __proxy->end_getVersion(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RIntPtr&)> _response;
        };
        return begin_getVersion(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getVersion()
    {
        return begin_getVersion(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx)
    {
        return begin_getVersion(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::omero::model::Callback_Experiment_getVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx, const ::omero::model::Callback_Experiment_getVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(&__ctx, __del, __cookie);
    }

    ::omero::RIntPtr end_getVersion(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RIntPtr getVersion(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setVersion(const ::omero::RIntPtr& theVersion)
    {
        setVersion(theVersion, 0);
    }
    void setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx)
    {
        setVersion(theVersion, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setVersion(const ::omero::RIntPtr& theVersion, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setVersion(theVersion, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setVersion(const ::omero::RIntPtr& theVersion, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setVersion(theVersion, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setVersion(theVersion, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setVersion(theVersion, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion)
    {
        return begin_setVersion(theVersion, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx)
    {
        return begin_setVersion(theVersion, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::omero::model::Callback_Experiment_setVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::omero::model::Callback_Experiment_setVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, &__ctx, __del, __cookie);
    }

    void end_setVersion(const ::Ice::AsyncResultPtr&);
    
private:

    void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::ExperimentTypePtr getType()
    {
        return getType(0);
    }
    ::omero::model::ExperimentTypePtr getType(const ::Ice::Context& __ctx)
    {
        return getType(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getType(const ::IceInternal::Function<void (const ::omero::model::ExperimentTypePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getType(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getType(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getType(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getType(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::ExperimentTypePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getType(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getType(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getType(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getType(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::ExperimentTypePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::ExperimentTypePtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::ExperimentPrx __proxy = ::omero::model::ExperimentPrx::uncheckedCast(__result->getProxy());
                ::omero::model::ExperimentTypePtr __ret;
                try
                {
                    __ret = __proxy->end_getType(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::ExperimentTypePtr&)> _response;
        };
        return begin_getType(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getType()
    {
        return begin_getType(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getType(const ::Ice::Context& __ctx)
    {
        return begin_getType(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getType(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getType(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getType(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getType(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getType(const ::omero::model::Callback_Experiment_getTypePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getType(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getType(const ::Ice::Context& __ctx, const ::omero::model::Callback_Experiment_getTypePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getType(&__ctx, __del, __cookie);
    }

    ::omero::model::ExperimentTypePtr end_getType(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::ExperimentTypePtr getType(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getType(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setType(const ::omero::model::ExperimentTypePtr& theType)
    {
        setType(theType, 0);
    }
    void setType(const ::omero::model::ExperimentTypePtr& theType, const ::Ice::Context& __ctx)
    {
        setType(theType, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setType(const ::omero::model::ExperimentTypePtr& theType, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setType(theType, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setType(const ::omero::model::ExperimentTypePtr& theType, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setType(theType, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setType(const ::omero::model::ExperimentTypePtr& theType, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setType(theType, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setType(const ::omero::model::ExperimentTypePtr& theType, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setType(theType, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setType(const ::omero::model::ExperimentTypePtr& theType)
    {
        return begin_setType(theType, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setType(const ::omero::model::ExperimentTypePtr& theType, const ::Ice::Context& __ctx)
    {
        return begin_setType(theType, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setType(const ::omero::model::ExperimentTypePtr& theType, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setType(theType, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setType(const ::omero::model::ExperimentTypePtr& theType, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setType(theType, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setType(const ::omero::model::ExperimentTypePtr& theType, const ::omero::model::Callback_Experiment_setTypePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setType(theType, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setType(const ::omero::model::ExperimentTypePtr& theType, const ::Ice::Context& __ctx, const ::omero::model::Callback_Experiment_setTypePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setType(theType, &__ctx, __del, __cookie);
    }

    void end_setType(const ::Ice::AsyncResultPtr&);
    
private:

    void setType(const ::omero::model::ExperimentTypePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setType(const ::omero::model::ExperimentTypePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unloadMicrobeamManipulation()
    {
        unloadMicrobeamManipulation(0);
    }
    void unloadMicrobeamManipulation(const ::Ice::Context& __ctx)
    {
        unloadMicrobeamManipulation(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_unloadMicrobeamManipulation(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unloadMicrobeamManipulation(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_unloadMicrobeamManipulation(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unloadMicrobeamManipulation(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unloadMicrobeamManipulation(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unloadMicrobeamManipulation(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unloadMicrobeamManipulation(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unloadMicrobeamManipulation(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_unloadMicrobeamManipulation()
    {
        return begin_unloadMicrobeamManipulation(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadMicrobeamManipulation(const ::Ice::Context& __ctx)
    {
        return begin_unloadMicrobeamManipulation(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadMicrobeamManipulation(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadMicrobeamManipulation(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadMicrobeamManipulation(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadMicrobeamManipulation(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadMicrobeamManipulation(const ::omero::model::Callback_Experiment_unloadMicrobeamManipulationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadMicrobeamManipulation(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadMicrobeamManipulation(const ::Ice::Context& __ctx, const ::omero::model::Callback_Experiment_unloadMicrobeamManipulationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadMicrobeamManipulation(&__ctx, __del, __cookie);
    }

    void end_unloadMicrobeamManipulation(const ::Ice::AsyncResultPtr&);
    
private:

    void unloadMicrobeamManipulation(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unloadMicrobeamManipulation(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int sizeOfMicrobeamManipulation()
    {
        return sizeOfMicrobeamManipulation(0);
    }
    ::Ice::Int sizeOfMicrobeamManipulation(const ::Ice::Context& __ctx)
    {
        return sizeOfMicrobeamManipulation(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_sizeOfMicrobeamManipulation(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sizeOfMicrobeamManipulation(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfMicrobeamManipulation(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sizeOfMicrobeamManipulation(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfMicrobeamManipulation(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sizeOfMicrobeamManipulation(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfMicrobeamManipulation(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sizeOfMicrobeamManipulation(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_sizeOfMicrobeamManipulation(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::ExperimentPrx __proxy = ::omero::model::ExperimentPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_sizeOfMicrobeamManipulation(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_sizeOfMicrobeamManipulation(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_sizeOfMicrobeamManipulation()
    {
        return begin_sizeOfMicrobeamManipulation(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfMicrobeamManipulation(const ::Ice::Context& __ctx)
    {
        return begin_sizeOfMicrobeamManipulation(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfMicrobeamManipulation(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfMicrobeamManipulation(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfMicrobeamManipulation(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfMicrobeamManipulation(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfMicrobeamManipulation(const ::omero::model::Callback_Experiment_sizeOfMicrobeamManipulationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfMicrobeamManipulation(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfMicrobeamManipulation(const ::Ice::Context& __ctx, const ::omero::model::Callback_Experiment_sizeOfMicrobeamManipulationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfMicrobeamManipulation(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_sizeOfMicrobeamManipulation(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int sizeOfMicrobeamManipulation(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sizeOfMicrobeamManipulation(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::ExperimentMicrobeamManipulationSeq copyMicrobeamManipulation()
    {
        return copyMicrobeamManipulation(0);
    }
    ::omero::model::ExperimentMicrobeamManipulationSeq copyMicrobeamManipulation(const ::Ice::Context& __ctx)
    {
        return copyMicrobeamManipulation(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_copyMicrobeamManipulation(const ::IceInternal::Function<void (const ::omero::model::ExperimentMicrobeamManipulationSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_copyMicrobeamManipulation(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_copyMicrobeamManipulation(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_copyMicrobeamManipulation(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_copyMicrobeamManipulation(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::ExperimentMicrobeamManipulationSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_copyMicrobeamManipulation(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_copyMicrobeamManipulation(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_copyMicrobeamManipulation(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_copyMicrobeamManipulation(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::ExperimentMicrobeamManipulationSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::ExperimentMicrobeamManipulationSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::ExperimentPrx __proxy = ::omero::model::ExperimentPrx::uncheckedCast(__result->getProxy());
                ::omero::model::ExperimentMicrobeamManipulationSeq __ret;
                try
                {
                    __ret = __proxy->end_copyMicrobeamManipulation(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::ExperimentMicrobeamManipulationSeq&)> _response;
        };
        return begin_copyMicrobeamManipulation(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_copyMicrobeamManipulation()
    {
        return begin_copyMicrobeamManipulation(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyMicrobeamManipulation(const ::Ice::Context& __ctx)
    {
        return begin_copyMicrobeamManipulation(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyMicrobeamManipulation(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyMicrobeamManipulation(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyMicrobeamManipulation(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyMicrobeamManipulation(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyMicrobeamManipulation(const ::omero::model::Callback_Experiment_copyMicrobeamManipulationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyMicrobeamManipulation(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyMicrobeamManipulation(const ::Ice::Context& __ctx, const ::omero::model::Callback_Experiment_copyMicrobeamManipulationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyMicrobeamManipulation(&__ctx, __del, __cookie);
    }

    ::omero::model::ExperimentMicrobeamManipulationSeq end_copyMicrobeamManipulation(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::ExperimentMicrobeamManipulationSeq copyMicrobeamManipulation(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_copyMicrobeamManipulation(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addMicrobeamManipulation(const ::omero::model::MicrobeamManipulationPtr& target)
    {
        addMicrobeamManipulation(target, 0);
    }
    void addMicrobeamManipulation(const ::omero::model::MicrobeamManipulationPtr& target, const ::Ice::Context& __ctx)
    {
        addMicrobeamManipulation(target, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addMicrobeamManipulation(const ::omero::model::MicrobeamManipulationPtr& target, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addMicrobeamManipulation(target, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addMicrobeamManipulation(const ::omero::model::MicrobeamManipulationPtr& target, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addMicrobeamManipulation(target, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addMicrobeamManipulation(const ::omero::model::MicrobeamManipulationPtr& target, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addMicrobeamManipulation(target, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addMicrobeamManipulation(const ::omero::model::MicrobeamManipulationPtr& target, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addMicrobeamManipulation(target, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addMicrobeamManipulation(const ::omero::model::MicrobeamManipulationPtr& target)
    {
        return begin_addMicrobeamManipulation(target, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addMicrobeamManipulation(const ::omero::model::MicrobeamManipulationPtr& target, const ::Ice::Context& __ctx)
    {
        return begin_addMicrobeamManipulation(target, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addMicrobeamManipulation(const ::omero::model::MicrobeamManipulationPtr& target, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addMicrobeamManipulation(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addMicrobeamManipulation(const ::omero::model::MicrobeamManipulationPtr& target, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addMicrobeamManipulation(target, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addMicrobeamManipulation(const ::omero::model::MicrobeamManipulationPtr& target, const ::omero::model::Callback_Experiment_addMicrobeamManipulationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addMicrobeamManipulation(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addMicrobeamManipulation(const ::omero::model::MicrobeamManipulationPtr& target, const ::Ice::Context& __ctx, const ::omero::model::Callback_Experiment_addMicrobeamManipulationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addMicrobeamManipulation(target, &__ctx, __del, __cookie);
    }

    void end_addMicrobeamManipulation(const ::Ice::AsyncResultPtr&);
    
private:

    void addMicrobeamManipulation(const ::omero::model::MicrobeamManipulationPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addMicrobeamManipulation(const ::omero::model::MicrobeamManipulationPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addAllMicrobeamManipulationSet(const ::omero::model::ExperimentMicrobeamManipulationSeq& targets)
    {
        addAllMicrobeamManipulationSet(targets, 0);
    }
    void addAllMicrobeamManipulationSet(const ::omero::model::ExperimentMicrobeamManipulationSeq& targets, const ::Ice::Context& __ctx)
    {
        addAllMicrobeamManipulationSet(targets, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addAllMicrobeamManipulationSet(const ::omero::model::ExperimentMicrobeamManipulationSeq& targets, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addAllMicrobeamManipulationSet(targets, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addAllMicrobeamManipulationSet(const ::omero::model::ExperimentMicrobeamManipulationSeq& targets, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addAllMicrobeamManipulationSet(targets, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addAllMicrobeamManipulationSet(const ::omero::model::ExperimentMicrobeamManipulationSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addAllMicrobeamManipulationSet(targets, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addAllMicrobeamManipulationSet(const ::omero::model::ExperimentMicrobeamManipulationSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addAllMicrobeamManipulationSet(targets, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addAllMicrobeamManipulationSet(const ::omero::model::ExperimentMicrobeamManipulationSeq& targets)
    {
        return begin_addAllMicrobeamManipulationSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllMicrobeamManipulationSet(const ::omero::model::ExperimentMicrobeamManipulationSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_addAllMicrobeamManipulationSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllMicrobeamManipulationSet(const ::omero::model::ExperimentMicrobeamManipulationSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllMicrobeamManipulationSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllMicrobeamManipulationSet(const ::omero::model::ExperimentMicrobeamManipulationSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllMicrobeamManipulationSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllMicrobeamManipulationSet(const ::omero::model::ExperimentMicrobeamManipulationSeq& targets, const ::omero::model::Callback_Experiment_addAllMicrobeamManipulationSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllMicrobeamManipulationSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllMicrobeamManipulationSet(const ::omero::model::ExperimentMicrobeamManipulationSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Experiment_addAllMicrobeamManipulationSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllMicrobeamManipulationSet(targets, &__ctx, __del, __cookie);
    }

    void end_addAllMicrobeamManipulationSet(const ::Ice::AsyncResultPtr&);
    
private:

    void addAllMicrobeamManipulationSet(const ::omero::model::ExperimentMicrobeamManipulationSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addAllMicrobeamManipulationSet(const ::omero::model::ExperimentMicrobeamManipulationSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeMicrobeamManipulation(const ::omero::model::MicrobeamManipulationPtr& theTarget)
    {
        removeMicrobeamManipulation(theTarget, 0);
    }
    void removeMicrobeamManipulation(const ::omero::model::MicrobeamManipulationPtr& theTarget, const ::Ice::Context& __ctx)
    {
        removeMicrobeamManipulation(theTarget, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeMicrobeamManipulation(const ::omero::model::MicrobeamManipulationPtr& theTarget, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeMicrobeamManipulation(theTarget, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeMicrobeamManipulation(const ::omero::model::MicrobeamManipulationPtr& theTarget, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeMicrobeamManipulation(theTarget, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeMicrobeamManipulation(const ::omero::model::MicrobeamManipulationPtr& theTarget, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeMicrobeamManipulation(theTarget, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeMicrobeamManipulation(const ::omero::model::MicrobeamManipulationPtr& theTarget, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeMicrobeamManipulation(theTarget, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeMicrobeamManipulation(const ::omero::model::MicrobeamManipulationPtr& theTarget)
    {
        return begin_removeMicrobeamManipulation(theTarget, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeMicrobeamManipulation(const ::omero::model::MicrobeamManipulationPtr& theTarget, const ::Ice::Context& __ctx)
    {
        return begin_removeMicrobeamManipulation(theTarget, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeMicrobeamManipulation(const ::omero::model::MicrobeamManipulationPtr& theTarget, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeMicrobeamManipulation(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeMicrobeamManipulation(const ::omero::model::MicrobeamManipulationPtr& theTarget, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeMicrobeamManipulation(theTarget, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeMicrobeamManipulation(const ::omero::model::MicrobeamManipulationPtr& theTarget, const ::omero::model::Callback_Experiment_removeMicrobeamManipulationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeMicrobeamManipulation(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeMicrobeamManipulation(const ::omero::model::MicrobeamManipulationPtr& theTarget, const ::Ice::Context& __ctx, const ::omero::model::Callback_Experiment_removeMicrobeamManipulationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeMicrobeamManipulation(theTarget, &__ctx, __del, __cookie);
    }

    void end_removeMicrobeamManipulation(const ::Ice::AsyncResultPtr&);
    
private:

    void removeMicrobeamManipulation(const ::omero::model::MicrobeamManipulationPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeMicrobeamManipulation(const ::omero::model::MicrobeamManipulationPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeAllMicrobeamManipulationSet(const ::omero::model::ExperimentMicrobeamManipulationSeq& targets)
    {
        removeAllMicrobeamManipulationSet(targets, 0);
    }
    void removeAllMicrobeamManipulationSet(const ::omero::model::ExperimentMicrobeamManipulationSeq& targets, const ::Ice::Context& __ctx)
    {
        removeAllMicrobeamManipulationSet(targets, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeAllMicrobeamManipulationSet(const ::omero::model::ExperimentMicrobeamManipulationSeq& targets, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeAllMicrobeamManipulationSet(targets, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeAllMicrobeamManipulationSet(const ::omero::model::ExperimentMicrobeamManipulationSeq& targets, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeAllMicrobeamManipulationSet(targets, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeAllMicrobeamManipulationSet(const ::omero::model::ExperimentMicrobeamManipulationSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeAllMicrobeamManipulationSet(targets, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeAllMicrobeamManipulationSet(const ::omero::model::ExperimentMicrobeamManipulationSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeAllMicrobeamManipulationSet(targets, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeAllMicrobeamManipulationSet(const ::omero::model::ExperimentMicrobeamManipulationSeq& targets)
    {
        return begin_removeAllMicrobeamManipulationSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllMicrobeamManipulationSet(const ::omero::model::ExperimentMicrobeamManipulationSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_removeAllMicrobeamManipulationSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllMicrobeamManipulationSet(const ::omero::model::ExperimentMicrobeamManipulationSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllMicrobeamManipulationSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllMicrobeamManipulationSet(const ::omero::model::ExperimentMicrobeamManipulationSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllMicrobeamManipulationSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllMicrobeamManipulationSet(const ::omero::model::ExperimentMicrobeamManipulationSeq& targets, const ::omero::model::Callback_Experiment_removeAllMicrobeamManipulationSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllMicrobeamManipulationSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllMicrobeamManipulationSet(const ::omero::model::ExperimentMicrobeamManipulationSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Experiment_removeAllMicrobeamManipulationSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllMicrobeamManipulationSet(targets, &__ctx, __del, __cookie);
    }

    void end_removeAllMicrobeamManipulationSet(const ::Ice::AsyncResultPtr&);
    
private:

    void removeAllMicrobeamManipulationSet(const ::omero::model::ExperimentMicrobeamManipulationSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeAllMicrobeamManipulationSet(const ::omero::model::ExperimentMicrobeamManipulationSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void clearMicrobeamManipulation()
    {
        clearMicrobeamManipulation(0);
    }
    void clearMicrobeamManipulation(const ::Ice::Context& __ctx)
    {
        clearMicrobeamManipulation(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_clearMicrobeamManipulation(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_clearMicrobeamManipulation(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_clearMicrobeamManipulation(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_clearMicrobeamManipulation(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_clearMicrobeamManipulation(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_clearMicrobeamManipulation(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_clearMicrobeamManipulation(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_clearMicrobeamManipulation(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_clearMicrobeamManipulation()
    {
        return begin_clearMicrobeamManipulation(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearMicrobeamManipulation(const ::Ice::Context& __ctx)
    {
        return begin_clearMicrobeamManipulation(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearMicrobeamManipulation(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearMicrobeamManipulation(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearMicrobeamManipulation(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearMicrobeamManipulation(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearMicrobeamManipulation(const ::omero::model::Callback_Experiment_clearMicrobeamManipulationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearMicrobeamManipulation(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearMicrobeamManipulation(const ::Ice::Context& __ctx, const ::omero::model::Callback_Experiment_clearMicrobeamManipulationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearMicrobeamManipulation(&__ctx, __del, __cookie);
    }

    void end_clearMicrobeamManipulation(const ::Ice::AsyncResultPtr&);
    
private:

    void clearMicrobeamManipulation(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_clearMicrobeamManipulation(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reloadMicrobeamManipulation(const ::omero::model::ExperimentPtr& toCopy)
    {
        reloadMicrobeamManipulation(toCopy, 0);
    }
    void reloadMicrobeamManipulation(const ::omero::model::ExperimentPtr& toCopy, const ::Ice::Context& __ctx)
    {
        reloadMicrobeamManipulation(toCopy, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_reloadMicrobeamManipulation(const ::omero::model::ExperimentPtr& toCopy, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reloadMicrobeamManipulation(toCopy, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_reloadMicrobeamManipulation(const ::omero::model::ExperimentPtr& toCopy, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reloadMicrobeamManipulation(toCopy, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reloadMicrobeamManipulation(const ::omero::model::ExperimentPtr& toCopy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reloadMicrobeamManipulation(toCopy, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reloadMicrobeamManipulation(const ::omero::model::ExperimentPtr& toCopy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reloadMicrobeamManipulation(toCopy, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_reloadMicrobeamManipulation(const ::omero::model::ExperimentPtr& toCopy)
    {
        return begin_reloadMicrobeamManipulation(toCopy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadMicrobeamManipulation(const ::omero::model::ExperimentPtr& toCopy, const ::Ice::Context& __ctx)
    {
        return begin_reloadMicrobeamManipulation(toCopy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadMicrobeamManipulation(const ::omero::model::ExperimentPtr& toCopy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadMicrobeamManipulation(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadMicrobeamManipulation(const ::omero::model::ExperimentPtr& toCopy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadMicrobeamManipulation(toCopy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadMicrobeamManipulation(const ::omero::model::ExperimentPtr& toCopy, const ::omero::model::Callback_Experiment_reloadMicrobeamManipulationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadMicrobeamManipulation(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadMicrobeamManipulation(const ::omero::model::ExperimentPtr& toCopy, const ::Ice::Context& __ctx, const ::omero::model::Callback_Experiment_reloadMicrobeamManipulationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadMicrobeamManipulation(toCopy, &__ctx, __del, __cookie);
    }

    void end_reloadMicrobeamManipulation(const ::Ice::AsyncResultPtr&);
    
private:

    void reloadMicrobeamManipulation(const ::omero::model::ExperimentPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reloadMicrobeamManipulation(const ::omero::model::ExperimentPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getDescription()
    {
        return getDescription(0);
    }
    ::omero::RStringPtr getDescription(const ::Ice::Context& __ctx)
    {
        return getDescription(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getDescription(const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getDescription(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getDescription(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getDescription(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getDescription(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getDescription(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getDescription(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getDescription(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getDescription(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RStringPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::ExperimentPrx __proxy = ::omero::model::ExperimentPrx::uncheckedCast(__result->getProxy());
                ::omero::RStringPtr __ret;
                try
                {
                    __ret = __proxy->end_getDescription(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RStringPtr&)> _response;
        };
        return begin_getDescription(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getDescription()
    {
        return begin_getDescription(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDescription(const ::Ice::Context& __ctx)
    {
        return begin_getDescription(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDescription(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDescription(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDescription(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDescription(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDescription(const ::omero::model::Callback_Experiment_getDescriptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDescription(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDescription(const ::Ice::Context& __ctx, const ::omero::model::Callback_Experiment_getDescriptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDescription(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getDescription(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getDescription(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getDescription(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setDescription(const ::omero::RStringPtr& theDescription)
    {
        setDescription(theDescription, 0);
    }
    void setDescription(const ::omero::RStringPtr& theDescription, const ::Ice::Context& __ctx)
    {
        setDescription(theDescription, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setDescription(const ::omero::RStringPtr& theDescription, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setDescription(theDescription, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setDescription(const ::omero::RStringPtr& theDescription, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setDescription(theDescription, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setDescription(const ::omero::RStringPtr& theDescription, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setDescription(theDescription, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setDescription(const ::omero::RStringPtr& theDescription, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setDescription(theDescription, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setDescription(const ::omero::RStringPtr& theDescription)
    {
        return begin_setDescription(theDescription, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setDescription(const ::omero::RStringPtr& theDescription, const ::Ice::Context& __ctx)
    {
        return begin_setDescription(theDescription, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setDescription(const ::omero::RStringPtr& theDescription, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDescription(theDescription, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDescription(const ::omero::RStringPtr& theDescription, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDescription(theDescription, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDescription(const ::omero::RStringPtr& theDescription, const ::omero::model::Callback_Experiment_setDescriptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDescription(theDescription, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDescription(const ::omero::RStringPtr& theDescription, const ::Ice::Context& __ctx, const ::omero::model::Callback_Experiment_setDescriptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDescription(theDescription, &__ctx, __del, __cookie);
    }

    void end_setDescription(const ::Ice::AsyncResultPtr&);
    
private:

    void setDescription(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setDescription(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Experiment> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Experiment*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Experiment> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Experiment*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Experiment> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Experiment*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Experiment> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Experiment*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Experiment> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Experiment*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Experiment> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Experiment*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Experiment> ice_secure(bool __secure) const
    {
        return dynamic_cast<Experiment*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Experiment> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Experiment*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Experiment> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Experiment*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Experiment> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Experiment*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Experiment> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Experiment*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Experiment> ice_twoway() const
    {
        return dynamic_cast<Experiment*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Experiment> ice_oneway() const
    {
        return dynamic_cast<Experiment*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Experiment> ice_batchOneway() const
    {
        return dynamic_cast<Experiment*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Experiment> ice_datagram() const
    {
        return dynamic_cast<Experiment*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Experiment> ice_batchDatagram() const
    {
        return dynamic_cast<Experiment*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Experiment> ice_compress(bool __compress) const
    {
        return dynamic_cast<Experiment*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Experiment> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Experiment*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Experiment> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Experiment*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Experiment> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Experiment*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

namespace IceDelegate
{

namespace omero
{

namespace model
{

class Experiment : virtual public ::IceDelegate::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::ExperimentTypePtr getType(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setType(const ::omero::model::ExperimentTypePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void unloadMicrobeamManipulation(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int sizeOfMicrobeamManipulation(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::ExperimentMicrobeamManipulationSeq copyMicrobeamManipulation(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addMicrobeamManipulation(const ::omero::model::MicrobeamManipulationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addAllMicrobeamManipulationSet(const ::omero::model::ExperimentMicrobeamManipulationSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeMicrobeamManipulation(const ::omero::model::MicrobeamManipulationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeAllMicrobeamManipulationSet(const ::omero::model::ExperimentMicrobeamManipulationSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void clearMicrobeamManipulation(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void reloadMicrobeamManipulation(const ::omero::model::ExperimentPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RStringPtr getDescription(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setDescription(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

}

namespace IceDelegateM
{

namespace omero
{

namespace model
{

class Experiment : virtual public ::IceDelegate::omero::model::Experiment,
                   virtual public ::IceDelegateM::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::ExperimentTypePtr getType(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setType(const ::omero::model::ExperimentTypePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unloadMicrobeamManipulation(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int sizeOfMicrobeamManipulation(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::ExperimentMicrobeamManipulationSeq copyMicrobeamManipulation(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addMicrobeamManipulation(const ::omero::model::MicrobeamManipulationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addAllMicrobeamManipulationSet(const ::omero::model::ExperimentMicrobeamManipulationSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeMicrobeamManipulation(const ::omero::model::MicrobeamManipulationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeAllMicrobeamManipulationSet(const ::omero::model::ExperimentMicrobeamManipulationSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void clearMicrobeamManipulation(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void reloadMicrobeamManipulation(const ::omero::model::ExperimentPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getDescription(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setDescription(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace IceDelegateD
{

namespace omero
{

namespace model
{

class Experiment : virtual public ::IceDelegate::omero::model::Experiment,
                   virtual public ::IceDelegateD::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::ExperimentTypePtr getType(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setType(const ::omero::model::ExperimentTypePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unloadMicrobeamManipulation(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int sizeOfMicrobeamManipulation(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::ExperimentMicrobeamManipulationSeq copyMicrobeamManipulation(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addMicrobeamManipulation(const ::omero::model::MicrobeamManipulationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addAllMicrobeamManipulationSet(const ::omero::model::ExperimentMicrobeamManipulationSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeMicrobeamManipulation(const ::omero::model::MicrobeamManipulationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeAllMicrobeamManipulationSet(const ::omero::model::ExperimentMicrobeamManipulationSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void clearMicrobeamManipulation(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void reloadMicrobeamManipulation(const ::omero::model::ExperimentPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getDescription(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setDescription(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace omero
{

namespace model
{

class Experiment : public ::omero::model::IObject
{
public:

    typedef ExperimentPrx ProxyType;
    typedef ExperimentPtr PointerType;

    Experiment()
    {
    }

    Experiment(const ::omero::RLongPtr& __ice_id, const ::omero::model::DetailsPtr& __ice_details, bool __ice_loaded, const ::omero::RIntPtr& __ice_version, const ::omero::model::ExperimentTypePtr& __ice_type, const ::omero::model::ExperimentMicrobeamManipulationSeq& __ice_microbeamManipulationSeq, bool __ice_microbeamManipulationLoaded, const ::omero::RStringPtr& __ice_description) :
        ::omero::model::IObject(__ice_id, __ice_details, __ice_loaded)
        ,
        version(__ice_version),
        type(__ice_type),
        microbeamManipulationSeq(__ice_microbeamManipulationSeq),
        microbeamManipulationLoaded(__ice_microbeamManipulationLoaded),
        description(__ice_description)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    virtual ::omero::RIntPtr getVersion(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::ExperimentTypePtr getType(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getType(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setType(const ::omero::model::ExperimentTypePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setType(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unloadMicrobeamManipulation(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unloadMicrobeamManipulation(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int sizeOfMicrobeamManipulation(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sizeOfMicrobeamManipulation(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::ExperimentMicrobeamManipulationSeq copyMicrobeamManipulation(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___copyMicrobeamManipulation(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addMicrobeamManipulation(const ::omero::model::MicrobeamManipulationPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addMicrobeamManipulation(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addAllMicrobeamManipulationSet(const ::omero::model::ExperimentMicrobeamManipulationSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addAllMicrobeamManipulationSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeMicrobeamManipulation(const ::omero::model::MicrobeamManipulationPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeMicrobeamManipulation(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeAllMicrobeamManipulationSet(const ::omero::model::ExperimentMicrobeamManipulationSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeAllMicrobeamManipulationSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void clearMicrobeamManipulation(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___clearMicrobeamManipulation(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reloadMicrobeamManipulation(const ::omero::model::ExperimentPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reloadMicrobeamManipulation(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getDescription(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getDescription(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setDescription(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setDescription(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::model::IObject::__writeImpl;
    using ::omero::model::IObject::__readImpl;
    #endif

    ::omero::RIntPtr version;

    ::omero::model::ExperimentTypePtr type;

    ::omero::model::ExperimentMicrobeamManipulationSeq microbeamManipulationSeq;

    bool microbeamManipulationLoaded;

    ::omero::RStringPtr description;
};

inline bool operator==(const Experiment& l, const Experiment& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Experiment& l, const Experiment& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

}

namespace omero
{

namespace model
{

template<class T>
class CallbackNC_Experiment_getVersion : public Callback_Experiment_getVersion_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RIntPtr&);

    CallbackNC_Experiment_getVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ExperimentPrx __proxy = ::omero::model::ExperimentPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Experiment_getVersionPtr
newCallback_Experiment_getVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Experiment_getVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Experiment_getVersionPtr
newCallback_Experiment_getVersion(T* instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Experiment_getVersion<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Experiment_getVersion : public Callback_Experiment_getVersion_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RIntPtr&, const CT&);

    Callback_Experiment_getVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ExperimentPrx __proxy = ::omero::model::ExperimentPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Experiment_getVersionPtr
newCallback_Experiment_getVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Experiment_getVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Experiment_getVersionPtr
newCallback_Experiment_getVersion(T* instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Experiment_getVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Experiment_setVersion : public Callback_Experiment_setVersion_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Experiment_setVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Experiment_setVersionPtr
newCallback_Experiment_setVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Experiment_setVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Experiment_setVersionPtr
newCallback_Experiment_setVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Experiment_setVersion<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Experiment_setVersionPtr
newCallback_Experiment_setVersion(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Experiment_setVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Experiment_setVersionPtr
newCallback_Experiment_setVersion(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Experiment_setVersion<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Experiment_setVersion : public Callback_Experiment_setVersion_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Experiment_setVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Experiment_setVersionPtr
newCallback_Experiment_setVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Experiment_setVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Experiment_setVersionPtr
newCallback_Experiment_setVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Experiment_setVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Experiment_setVersionPtr
newCallback_Experiment_setVersion(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Experiment_setVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Experiment_setVersionPtr
newCallback_Experiment_setVersion(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Experiment_setVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Experiment_getType : public Callback_Experiment_getType_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::ExperimentTypePtr&);

    CallbackNC_Experiment_getType(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ExperimentPrx __proxy = ::omero::model::ExperimentPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ExperimentTypePtr __ret;
        try
        {
            __ret = __proxy->end_getType(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Experiment_getTypePtr
newCallback_Experiment_getType(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ExperimentTypePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Experiment_getType<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Experiment_getTypePtr
newCallback_Experiment_getType(T* instance, void (T::*cb)(const ::omero::model::ExperimentTypePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Experiment_getType<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Experiment_getType : public Callback_Experiment_getType_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::ExperimentTypePtr&, const CT&);

    Callback_Experiment_getType(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ExperimentPrx __proxy = ::omero::model::ExperimentPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ExperimentTypePtr __ret;
        try
        {
            __ret = __proxy->end_getType(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Experiment_getTypePtr
newCallback_Experiment_getType(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ExperimentTypePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Experiment_getType<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Experiment_getTypePtr
newCallback_Experiment_getType(T* instance, void (T::*cb)(const ::omero::model::ExperimentTypePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Experiment_getType<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Experiment_setType : public Callback_Experiment_setType_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Experiment_setType(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Experiment_setTypePtr
newCallback_Experiment_setType(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Experiment_setType<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Experiment_setTypePtr
newCallback_Experiment_setType(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Experiment_setType<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Experiment_setTypePtr
newCallback_Experiment_setType(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Experiment_setType<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Experiment_setTypePtr
newCallback_Experiment_setType(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Experiment_setType<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Experiment_setType : public Callback_Experiment_setType_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Experiment_setType(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Experiment_setTypePtr
newCallback_Experiment_setType(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Experiment_setType<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Experiment_setTypePtr
newCallback_Experiment_setType(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Experiment_setType<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Experiment_setTypePtr
newCallback_Experiment_setType(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Experiment_setType<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Experiment_setTypePtr
newCallback_Experiment_setType(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Experiment_setType<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Experiment_unloadMicrobeamManipulation : public Callback_Experiment_unloadMicrobeamManipulation_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Experiment_unloadMicrobeamManipulation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Experiment_unloadMicrobeamManipulationPtr
newCallback_Experiment_unloadMicrobeamManipulation(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Experiment_unloadMicrobeamManipulation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Experiment_unloadMicrobeamManipulationPtr
newCallback_Experiment_unloadMicrobeamManipulation(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Experiment_unloadMicrobeamManipulation<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Experiment_unloadMicrobeamManipulationPtr
newCallback_Experiment_unloadMicrobeamManipulation(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Experiment_unloadMicrobeamManipulation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Experiment_unloadMicrobeamManipulationPtr
newCallback_Experiment_unloadMicrobeamManipulation(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Experiment_unloadMicrobeamManipulation<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Experiment_unloadMicrobeamManipulation : public Callback_Experiment_unloadMicrobeamManipulation_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Experiment_unloadMicrobeamManipulation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Experiment_unloadMicrobeamManipulationPtr
newCallback_Experiment_unloadMicrobeamManipulation(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Experiment_unloadMicrobeamManipulation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Experiment_unloadMicrobeamManipulationPtr
newCallback_Experiment_unloadMicrobeamManipulation(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Experiment_unloadMicrobeamManipulation<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Experiment_unloadMicrobeamManipulationPtr
newCallback_Experiment_unloadMicrobeamManipulation(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Experiment_unloadMicrobeamManipulation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Experiment_unloadMicrobeamManipulationPtr
newCallback_Experiment_unloadMicrobeamManipulation(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Experiment_unloadMicrobeamManipulation<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Experiment_sizeOfMicrobeamManipulation : public Callback_Experiment_sizeOfMicrobeamManipulation_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Experiment_sizeOfMicrobeamManipulation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ExperimentPrx __proxy = ::omero::model::ExperimentPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfMicrobeamManipulation(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Experiment_sizeOfMicrobeamManipulationPtr
newCallback_Experiment_sizeOfMicrobeamManipulation(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Experiment_sizeOfMicrobeamManipulation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Experiment_sizeOfMicrobeamManipulationPtr
newCallback_Experiment_sizeOfMicrobeamManipulation(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Experiment_sizeOfMicrobeamManipulation<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Experiment_sizeOfMicrobeamManipulation : public Callback_Experiment_sizeOfMicrobeamManipulation_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Experiment_sizeOfMicrobeamManipulation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ExperimentPrx __proxy = ::omero::model::ExperimentPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfMicrobeamManipulation(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Experiment_sizeOfMicrobeamManipulationPtr
newCallback_Experiment_sizeOfMicrobeamManipulation(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Experiment_sizeOfMicrobeamManipulation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Experiment_sizeOfMicrobeamManipulationPtr
newCallback_Experiment_sizeOfMicrobeamManipulation(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Experiment_sizeOfMicrobeamManipulation<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Experiment_copyMicrobeamManipulation : public Callback_Experiment_copyMicrobeamManipulation_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::ExperimentMicrobeamManipulationSeq&);

    CallbackNC_Experiment_copyMicrobeamManipulation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ExperimentPrx __proxy = ::omero::model::ExperimentPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ExperimentMicrobeamManipulationSeq __ret;
        try
        {
            __ret = __proxy->end_copyMicrobeamManipulation(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Experiment_copyMicrobeamManipulationPtr
newCallback_Experiment_copyMicrobeamManipulation(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ExperimentMicrobeamManipulationSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Experiment_copyMicrobeamManipulation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Experiment_copyMicrobeamManipulationPtr
newCallback_Experiment_copyMicrobeamManipulation(T* instance, void (T::*cb)(const ::omero::model::ExperimentMicrobeamManipulationSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Experiment_copyMicrobeamManipulation<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Experiment_copyMicrobeamManipulation : public Callback_Experiment_copyMicrobeamManipulation_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::ExperimentMicrobeamManipulationSeq&, const CT&);

    Callback_Experiment_copyMicrobeamManipulation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ExperimentPrx __proxy = ::omero::model::ExperimentPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ExperimentMicrobeamManipulationSeq __ret;
        try
        {
            __ret = __proxy->end_copyMicrobeamManipulation(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Experiment_copyMicrobeamManipulationPtr
newCallback_Experiment_copyMicrobeamManipulation(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ExperimentMicrobeamManipulationSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Experiment_copyMicrobeamManipulation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Experiment_copyMicrobeamManipulationPtr
newCallback_Experiment_copyMicrobeamManipulation(T* instance, void (T::*cb)(const ::omero::model::ExperimentMicrobeamManipulationSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Experiment_copyMicrobeamManipulation<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Experiment_addMicrobeamManipulation : public Callback_Experiment_addMicrobeamManipulation_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Experiment_addMicrobeamManipulation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Experiment_addMicrobeamManipulationPtr
newCallback_Experiment_addMicrobeamManipulation(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Experiment_addMicrobeamManipulation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Experiment_addMicrobeamManipulationPtr
newCallback_Experiment_addMicrobeamManipulation(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Experiment_addMicrobeamManipulation<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Experiment_addMicrobeamManipulationPtr
newCallback_Experiment_addMicrobeamManipulation(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Experiment_addMicrobeamManipulation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Experiment_addMicrobeamManipulationPtr
newCallback_Experiment_addMicrobeamManipulation(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Experiment_addMicrobeamManipulation<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Experiment_addMicrobeamManipulation : public Callback_Experiment_addMicrobeamManipulation_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Experiment_addMicrobeamManipulation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Experiment_addMicrobeamManipulationPtr
newCallback_Experiment_addMicrobeamManipulation(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Experiment_addMicrobeamManipulation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Experiment_addMicrobeamManipulationPtr
newCallback_Experiment_addMicrobeamManipulation(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Experiment_addMicrobeamManipulation<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Experiment_addMicrobeamManipulationPtr
newCallback_Experiment_addMicrobeamManipulation(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Experiment_addMicrobeamManipulation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Experiment_addMicrobeamManipulationPtr
newCallback_Experiment_addMicrobeamManipulation(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Experiment_addMicrobeamManipulation<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Experiment_addAllMicrobeamManipulationSet : public Callback_Experiment_addAllMicrobeamManipulationSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Experiment_addAllMicrobeamManipulationSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Experiment_addAllMicrobeamManipulationSetPtr
newCallback_Experiment_addAllMicrobeamManipulationSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Experiment_addAllMicrobeamManipulationSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Experiment_addAllMicrobeamManipulationSetPtr
newCallback_Experiment_addAllMicrobeamManipulationSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Experiment_addAllMicrobeamManipulationSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Experiment_addAllMicrobeamManipulationSetPtr
newCallback_Experiment_addAllMicrobeamManipulationSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Experiment_addAllMicrobeamManipulationSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Experiment_addAllMicrobeamManipulationSetPtr
newCallback_Experiment_addAllMicrobeamManipulationSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Experiment_addAllMicrobeamManipulationSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Experiment_addAllMicrobeamManipulationSet : public Callback_Experiment_addAllMicrobeamManipulationSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Experiment_addAllMicrobeamManipulationSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Experiment_addAllMicrobeamManipulationSetPtr
newCallback_Experiment_addAllMicrobeamManipulationSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Experiment_addAllMicrobeamManipulationSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Experiment_addAllMicrobeamManipulationSetPtr
newCallback_Experiment_addAllMicrobeamManipulationSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Experiment_addAllMicrobeamManipulationSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Experiment_addAllMicrobeamManipulationSetPtr
newCallback_Experiment_addAllMicrobeamManipulationSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Experiment_addAllMicrobeamManipulationSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Experiment_addAllMicrobeamManipulationSetPtr
newCallback_Experiment_addAllMicrobeamManipulationSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Experiment_addAllMicrobeamManipulationSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Experiment_removeMicrobeamManipulation : public Callback_Experiment_removeMicrobeamManipulation_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Experiment_removeMicrobeamManipulation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Experiment_removeMicrobeamManipulationPtr
newCallback_Experiment_removeMicrobeamManipulation(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Experiment_removeMicrobeamManipulation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Experiment_removeMicrobeamManipulationPtr
newCallback_Experiment_removeMicrobeamManipulation(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Experiment_removeMicrobeamManipulation<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Experiment_removeMicrobeamManipulationPtr
newCallback_Experiment_removeMicrobeamManipulation(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Experiment_removeMicrobeamManipulation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Experiment_removeMicrobeamManipulationPtr
newCallback_Experiment_removeMicrobeamManipulation(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Experiment_removeMicrobeamManipulation<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Experiment_removeMicrobeamManipulation : public Callback_Experiment_removeMicrobeamManipulation_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Experiment_removeMicrobeamManipulation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Experiment_removeMicrobeamManipulationPtr
newCallback_Experiment_removeMicrobeamManipulation(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Experiment_removeMicrobeamManipulation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Experiment_removeMicrobeamManipulationPtr
newCallback_Experiment_removeMicrobeamManipulation(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Experiment_removeMicrobeamManipulation<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Experiment_removeMicrobeamManipulationPtr
newCallback_Experiment_removeMicrobeamManipulation(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Experiment_removeMicrobeamManipulation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Experiment_removeMicrobeamManipulationPtr
newCallback_Experiment_removeMicrobeamManipulation(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Experiment_removeMicrobeamManipulation<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Experiment_removeAllMicrobeamManipulationSet : public Callback_Experiment_removeAllMicrobeamManipulationSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Experiment_removeAllMicrobeamManipulationSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Experiment_removeAllMicrobeamManipulationSetPtr
newCallback_Experiment_removeAllMicrobeamManipulationSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Experiment_removeAllMicrobeamManipulationSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Experiment_removeAllMicrobeamManipulationSetPtr
newCallback_Experiment_removeAllMicrobeamManipulationSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Experiment_removeAllMicrobeamManipulationSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Experiment_removeAllMicrobeamManipulationSetPtr
newCallback_Experiment_removeAllMicrobeamManipulationSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Experiment_removeAllMicrobeamManipulationSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Experiment_removeAllMicrobeamManipulationSetPtr
newCallback_Experiment_removeAllMicrobeamManipulationSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Experiment_removeAllMicrobeamManipulationSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Experiment_removeAllMicrobeamManipulationSet : public Callback_Experiment_removeAllMicrobeamManipulationSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Experiment_removeAllMicrobeamManipulationSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Experiment_removeAllMicrobeamManipulationSetPtr
newCallback_Experiment_removeAllMicrobeamManipulationSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Experiment_removeAllMicrobeamManipulationSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Experiment_removeAllMicrobeamManipulationSetPtr
newCallback_Experiment_removeAllMicrobeamManipulationSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Experiment_removeAllMicrobeamManipulationSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Experiment_removeAllMicrobeamManipulationSetPtr
newCallback_Experiment_removeAllMicrobeamManipulationSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Experiment_removeAllMicrobeamManipulationSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Experiment_removeAllMicrobeamManipulationSetPtr
newCallback_Experiment_removeAllMicrobeamManipulationSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Experiment_removeAllMicrobeamManipulationSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Experiment_clearMicrobeamManipulation : public Callback_Experiment_clearMicrobeamManipulation_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Experiment_clearMicrobeamManipulation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Experiment_clearMicrobeamManipulationPtr
newCallback_Experiment_clearMicrobeamManipulation(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Experiment_clearMicrobeamManipulation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Experiment_clearMicrobeamManipulationPtr
newCallback_Experiment_clearMicrobeamManipulation(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Experiment_clearMicrobeamManipulation<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Experiment_clearMicrobeamManipulationPtr
newCallback_Experiment_clearMicrobeamManipulation(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Experiment_clearMicrobeamManipulation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Experiment_clearMicrobeamManipulationPtr
newCallback_Experiment_clearMicrobeamManipulation(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Experiment_clearMicrobeamManipulation<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Experiment_clearMicrobeamManipulation : public Callback_Experiment_clearMicrobeamManipulation_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Experiment_clearMicrobeamManipulation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Experiment_clearMicrobeamManipulationPtr
newCallback_Experiment_clearMicrobeamManipulation(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Experiment_clearMicrobeamManipulation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Experiment_clearMicrobeamManipulationPtr
newCallback_Experiment_clearMicrobeamManipulation(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Experiment_clearMicrobeamManipulation<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Experiment_clearMicrobeamManipulationPtr
newCallback_Experiment_clearMicrobeamManipulation(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Experiment_clearMicrobeamManipulation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Experiment_clearMicrobeamManipulationPtr
newCallback_Experiment_clearMicrobeamManipulation(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Experiment_clearMicrobeamManipulation<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Experiment_reloadMicrobeamManipulation : public Callback_Experiment_reloadMicrobeamManipulation_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Experiment_reloadMicrobeamManipulation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Experiment_reloadMicrobeamManipulationPtr
newCallback_Experiment_reloadMicrobeamManipulation(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Experiment_reloadMicrobeamManipulation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Experiment_reloadMicrobeamManipulationPtr
newCallback_Experiment_reloadMicrobeamManipulation(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Experiment_reloadMicrobeamManipulation<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Experiment_reloadMicrobeamManipulationPtr
newCallback_Experiment_reloadMicrobeamManipulation(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Experiment_reloadMicrobeamManipulation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Experiment_reloadMicrobeamManipulationPtr
newCallback_Experiment_reloadMicrobeamManipulation(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Experiment_reloadMicrobeamManipulation<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Experiment_reloadMicrobeamManipulation : public Callback_Experiment_reloadMicrobeamManipulation_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Experiment_reloadMicrobeamManipulation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Experiment_reloadMicrobeamManipulationPtr
newCallback_Experiment_reloadMicrobeamManipulation(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Experiment_reloadMicrobeamManipulation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Experiment_reloadMicrobeamManipulationPtr
newCallback_Experiment_reloadMicrobeamManipulation(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Experiment_reloadMicrobeamManipulation<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Experiment_reloadMicrobeamManipulationPtr
newCallback_Experiment_reloadMicrobeamManipulation(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Experiment_reloadMicrobeamManipulation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Experiment_reloadMicrobeamManipulationPtr
newCallback_Experiment_reloadMicrobeamManipulation(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Experiment_reloadMicrobeamManipulation<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Experiment_getDescription : public Callback_Experiment_getDescription_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_Experiment_getDescription(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ExperimentPrx __proxy = ::omero::model::ExperimentPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getDescription(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Experiment_getDescriptionPtr
newCallback_Experiment_getDescription(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Experiment_getDescription<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Experiment_getDescriptionPtr
newCallback_Experiment_getDescription(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Experiment_getDescription<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Experiment_getDescription : public Callback_Experiment_getDescription_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_Experiment_getDescription(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ExperimentPrx __proxy = ::omero::model::ExperimentPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getDescription(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Experiment_getDescriptionPtr
newCallback_Experiment_getDescription(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Experiment_getDescription<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Experiment_getDescriptionPtr
newCallback_Experiment_getDescription(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Experiment_getDescription<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Experiment_setDescription : public Callback_Experiment_setDescription_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Experiment_setDescription(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Experiment_setDescriptionPtr
newCallback_Experiment_setDescription(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Experiment_setDescription<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Experiment_setDescriptionPtr
newCallback_Experiment_setDescription(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Experiment_setDescription<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Experiment_setDescriptionPtr
newCallback_Experiment_setDescription(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Experiment_setDescription<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Experiment_setDescriptionPtr
newCallback_Experiment_setDescription(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Experiment_setDescription<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Experiment_setDescription : public Callback_Experiment_setDescription_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Experiment_setDescription(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Experiment_setDescriptionPtr
newCallback_Experiment_setDescription(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Experiment_setDescription<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Experiment_setDescriptionPtr
newCallback_Experiment_setDescription(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Experiment_setDescription<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Experiment_setDescriptionPtr
newCallback_Experiment_setDescription(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Experiment_setDescription<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Experiment_setDescriptionPtr
newCallback_Experiment_setDescription(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Experiment_setDescription<T, CT>(instance, 0, excb, sentcb);
}

}

}

#endif
