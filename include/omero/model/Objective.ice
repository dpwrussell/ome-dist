   /*
   **   Generated by blitz/templates/resouces/combined.vm
   **   See ../../README.ice for information on these types.
   **
   **   Copyright 2007, 2008 Glencoe Software, Inc. All rights reserved.
   **   Use is subject to license terms supplied in LICENSE.txt
   **
   */
#ifndef OBJECTIVE_ICE
#define OBJECTIVE_ICE
#include <omero/model/IObject.ice>
#include <omero/RTypes.ice>
#include <omero/System.ice>
#include <omero/Collections.ice>
module omero {
  module model {
    class Immersion;
    class Correction;
    class Instrument;
    class Details;
    ["protected"] class Objective
    extends omero::model::IObject
    {
      omero::RInt version;
      omero::RInt getVersion();
      void setVersion(omero::RInt theVersion);
      omero::RString manufacturer;
      omero::RString getManufacturer();
      void setManufacturer(omero::RString theManufacturer);
      omero::RString model;
      omero::RString getModel();
      void setModel(omero::RString theModel);
      omero::RString lotNumber;
      omero::RString getLotNumber();
      void setLotNumber(omero::RString theLotNumber);
      omero::RString serialNumber;
      omero::RString getSerialNumber();
      void setSerialNumber(omero::RString theSerialNumber);
      omero::RDouble nominalMagnification;
      omero::RDouble getNominalMagnification();
      void setNominalMagnification(omero::RDouble theNominalMagnification);
      omero::RDouble calibratedMagnification;
      omero::RDouble getCalibratedMagnification();
      void setCalibratedMagnification(omero::RDouble theCalibratedMagnification);
      omero::RDouble lensNA;
      omero::RDouble getLensNA();
      void setLensNA(omero::RDouble theLensNA);
      omero::model::Immersion immersion;
      omero::model::Immersion getImmersion();
      void setImmersion(omero::model::Immersion theImmersion);
      omero::model::Correction correction;
      omero::model::Correction getCorrection();
      void setCorrection(omero::model::Correction theCorrection);
      omero::RDouble workingDistance;
      omero::RDouble getWorkingDistance();
      void setWorkingDistance(omero::RDouble theWorkingDistance);
      omero::RBool iris;
      omero::RBool getIris();
      void setIris(omero::RBool theIris);
      omero::model::Instrument instrument;
      omero::model::Instrument getInstrument();
      void setInstrument(omero::model::Instrument theInstrument);
    };
  };
};
#endif // OBJECTIVE_ICE
