// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `OTF.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_OTF_h__
#define __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_OTF_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <omero/model/IObject.h>
#include <omero/RTypes.h>
#include <omero/System.h>
#include <omero/Collections.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace omero
{

namespace model
{

class PixelsType;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::PixelsType>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::PixelsType*);

class FilterSet;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::FilterSet>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::FilterSet*);

class Objective;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Objective>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Objective*);

class Instrument;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Instrument>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Instrument*);

class Details;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Details>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Details*);

class OTF;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::OTF>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::OTF*);

}

}

}

namespace omero
{

namespace model
{

class PixelsType;
bool operator==(const PixelsType&, const PixelsType&);
bool operator<(const PixelsType&, const PixelsType&);
::Ice::Object* upCast(::omero::model::PixelsType*);
typedef ::IceInternal::Handle< ::omero::model::PixelsType> PixelsTypePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::PixelsType> PixelsTypePrx;
void __patch(PixelsTypePtr&, const ::Ice::ObjectPtr&);

class FilterSet;
bool operator==(const FilterSet&, const FilterSet&);
bool operator<(const FilterSet&, const FilterSet&);
::Ice::Object* upCast(::omero::model::FilterSet*);
typedef ::IceInternal::Handle< ::omero::model::FilterSet> FilterSetPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::FilterSet> FilterSetPrx;
void __patch(FilterSetPtr&, const ::Ice::ObjectPtr&);

class Objective;
bool operator==(const Objective&, const Objective&);
bool operator<(const Objective&, const Objective&);
::Ice::Object* upCast(::omero::model::Objective*);
typedef ::IceInternal::Handle< ::omero::model::Objective> ObjectivePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Objective> ObjectivePrx;
void __patch(ObjectivePtr&, const ::Ice::ObjectPtr&);

class Instrument;
bool operator==(const Instrument&, const Instrument&);
bool operator<(const Instrument&, const Instrument&);
::Ice::Object* upCast(::omero::model::Instrument*);
typedef ::IceInternal::Handle< ::omero::model::Instrument> InstrumentPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Instrument> InstrumentPrx;
void __patch(InstrumentPtr&, const ::Ice::ObjectPtr&);

class Details;
bool operator==(const Details&, const Details&);
bool operator<(const Details&, const Details&);
::Ice::Object* upCast(::omero::model::Details*);
typedef ::IceInternal::Handle< ::omero::model::Details> DetailsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Details> DetailsPrx;
void __patch(DetailsPtr&, const ::Ice::ObjectPtr&);

class OTF;
bool operator==(const OTF&, const OTF&);
bool operator<(const OTF&, const OTF&);
::Ice::Object* upCast(::omero::model::OTF*);
typedef ::IceInternal::Handle< ::omero::model::OTF> OTFPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::OTF> OTFPrx;
void __patch(OTFPtr&, const ::Ice::ObjectPtr&);

}

}

namespace omero
{

namespace model
{

class Callback_OTF_getVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OTF_getVersion_Base> Callback_OTF_getVersionPtr;

class Callback_OTF_setVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OTF_setVersion_Base> Callback_OTF_setVersionPtr;

class Callback_OTF_getSizeX_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OTF_getSizeX_Base> Callback_OTF_getSizeXPtr;

class Callback_OTF_setSizeX_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OTF_setSizeX_Base> Callback_OTF_setSizeXPtr;

class Callback_OTF_getSizeY_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OTF_getSizeY_Base> Callback_OTF_getSizeYPtr;

class Callback_OTF_setSizeY_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OTF_setSizeY_Base> Callback_OTF_setSizeYPtr;

class Callback_OTF_getOpticalAxisAveraged_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OTF_getOpticalAxisAveraged_Base> Callback_OTF_getOpticalAxisAveragedPtr;

class Callback_OTF_setOpticalAxisAveraged_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OTF_setOpticalAxisAveraged_Base> Callback_OTF_setOpticalAxisAveragedPtr;

class Callback_OTF_getPixelsType_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OTF_getPixelsType_Base> Callback_OTF_getPixelsTypePtr;

class Callback_OTF_setPixelsType_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OTF_setPixelsType_Base> Callback_OTF_setPixelsTypePtr;

class Callback_OTF_getPath_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OTF_getPath_Base> Callback_OTF_getPathPtr;

class Callback_OTF_setPath_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OTF_setPath_Base> Callback_OTF_setPathPtr;

class Callback_OTF_getFilterSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OTF_getFilterSet_Base> Callback_OTF_getFilterSetPtr;

class Callback_OTF_setFilterSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OTF_setFilterSet_Base> Callback_OTF_setFilterSetPtr;

class Callback_OTF_getObjective_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OTF_getObjective_Base> Callback_OTF_getObjectivePtr;

class Callback_OTF_setObjective_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OTF_setObjective_Base> Callback_OTF_setObjectivePtr;

class Callback_OTF_getInstrument_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OTF_getInstrument_Base> Callback_OTF_getInstrumentPtr;

class Callback_OTF_setInstrument_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OTF_setInstrument_Base> Callback_OTF_setInstrumentPtr;

}

}

namespace IceProxy
{

namespace omero
{

namespace model
{

class OTF : virtual public ::IceProxy::omero::model::IObject
{
public:

    ::omero::RIntPtr getVersion()
    {
        return getVersion(0);
    }
    ::omero::RIntPtr getVersion(const ::Ice::Context& __ctx)
    {
        return getVersion(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getVersion(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getVersion(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getVersion(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getVersion(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getVersion(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RIntPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::OTFPrx __proxy = ::omero::model::OTFPrx::uncheckedCast(__result->getProxy());
                ::omero::RIntPtr __ret;
                try
                {
                    __ret = __proxy->end_getVersion(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RIntPtr&)> _response;
        };
        return begin_getVersion(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getVersion()
    {
        return begin_getVersion(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx)
    {
        return begin_getVersion(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::omero::model::Callback_OTF_getVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx, const ::omero::model::Callback_OTF_getVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(&__ctx, __del, __cookie);
    }

    ::omero::RIntPtr end_getVersion(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RIntPtr getVersion(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setVersion(const ::omero::RIntPtr& theVersion)
    {
        setVersion(theVersion, 0);
    }
    void setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx)
    {
        setVersion(theVersion, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setVersion(const ::omero::RIntPtr& theVersion, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setVersion(theVersion, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setVersion(const ::omero::RIntPtr& theVersion, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setVersion(theVersion, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setVersion(theVersion, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setVersion(theVersion, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion)
    {
        return begin_setVersion(theVersion, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx)
    {
        return begin_setVersion(theVersion, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::omero::model::Callback_OTF_setVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::omero::model::Callback_OTF_setVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, &__ctx, __del, __cookie);
    }

    void end_setVersion(const ::Ice::AsyncResultPtr&);
    
private:

    void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RIntPtr getSizeX()
    {
        return getSizeX(0);
    }
    ::omero::RIntPtr getSizeX(const ::Ice::Context& __ctx)
    {
        return getSizeX(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getSizeX(const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getSizeX(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getSizeX(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getSizeX(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getSizeX(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getSizeX(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getSizeX(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getSizeX(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getSizeX(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RIntPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::OTFPrx __proxy = ::omero::model::OTFPrx::uncheckedCast(__result->getProxy());
                ::omero::RIntPtr __ret;
                try
                {
                    __ret = __proxy->end_getSizeX(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RIntPtr&)> _response;
        };
        return begin_getSizeX(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getSizeX()
    {
        return begin_getSizeX(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSizeX(const ::Ice::Context& __ctx)
    {
        return begin_getSizeX(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSizeX(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSizeX(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSizeX(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSizeX(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSizeX(const ::omero::model::Callback_OTF_getSizeXPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSizeX(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSizeX(const ::Ice::Context& __ctx, const ::omero::model::Callback_OTF_getSizeXPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSizeX(&__ctx, __del, __cookie);
    }

    ::omero::RIntPtr end_getSizeX(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RIntPtr getSizeX(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getSizeX(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setSizeX(const ::omero::RIntPtr& theSizeX)
    {
        setSizeX(theSizeX, 0);
    }
    void setSizeX(const ::omero::RIntPtr& theSizeX, const ::Ice::Context& __ctx)
    {
        setSizeX(theSizeX, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setSizeX(const ::omero::RIntPtr& theSizeX, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setSizeX(theSizeX, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setSizeX(const ::omero::RIntPtr& theSizeX, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setSizeX(theSizeX, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setSizeX(const ::omero::RIntPtr& theSizeX, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setSizeX(theSizeX, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setSizeX(const ::omero::RIntPtr& theSizeX, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setSizeX(theSizeX, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setSizeX(const ::omero::RIntPtr& theSizeX)
    {
        return begin_setSizeX(theSizeX, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setSizeX(const ::omero::RIntPtr& theSizeX, const ::Ice::Context& __ctx)
    {
        return begin_setSizeX(theSizeX, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setSizeX(const ::omero::RIntPtr& theSizeX, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSizeX(theSizeX, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSizeX(const ::omero::RIntPtr& theSizeX, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSizeX(theSizeX, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSizeX(const ::omero::RIntPtr& theSizeX, const ::omero::model::Callback_OTF_setSizeXPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSizeX(theSizeX, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSizeX(const ::omero::RIntPtr& theSizeX, const ::Ice::Context& __ctx, const ::omero::model::Callback_OTF_setSizeXPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSizeX(theSizeX, &__ctx, __del, __cookie);
    }

    void end_setSizeX(const ::Ice::AsyncResultPtr&);
    
private:

    void setSizeX(const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setSizeX(const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RIntPtr getSizeY()
    {
        return getSizeY(0);
    }
    ::omero::RIntPtr getSizeY(const ::Ice::Context& __ctx)
    {
        return getSizeY(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getSizeY(const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getSizeY(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getSizeY(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getSizeY(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getSizeY(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getSizeY(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getSizeY(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getSizeY(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getSizeY(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RIntPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::OTFPrx __proxy = ::omero::model::OTFPrx::uncheckedCast(__result->getProxy());
                ::omero::RIntPtr __ret;
                try
                {
                    __ret = __proxy->end_getSizeY(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RIntPtr&)> _response;
        };
        return begin_getSizeY(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getSizeY()
    {
        return begin_getSizeY(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSizeY(const ::Ice::Context& __ctx)
    {
        return begin_getSizeY(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSizeY(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSizeY(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSizeY(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSizeY(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSizeY(const ::omero::model::Callback_OTF_getSizeYPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSizeY(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSizeY(const ::Ice::Context& __ctx, const ::omero::model::Callback_OTF_getSizeYPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSizeY(&__ctx, __del, __cookie);
    }

    ::omero::RIntPtr end_getSizeY(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RIntPtr getSizeY(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getSizeY(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setSizeY(const ::omero::RIntPtr& theSizeY)
    {
        setSizeY(theSizeY, 0);
    }
    void setSizeY(const ::omero::RIntPtr& theSizeY, const ::Ice::Context& __ctx)
    {
        setSizeY(theSizeY, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setSizeY(const ::omero::RIntPtr& theSizeY, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setSizeY(theSizeY, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setSizeY(const ::omero::RIntPtr& theSizeY, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setSizeY(theSizeY, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setSizeY(const ::omero::RIntPtr& theSizeY, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setSizeY(theSizeY, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setSizeY(const ::omero::RIntPtr& theSizeY, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setSizeY(theSizeY, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setSizeY(const ::omero::RIntPtr& theSizeY)
    {
        return begin_setSizeY(theSizeY, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setSizeY(const ::omero::RIntPtr& theSizeY, const ::Ice::Context& __ctx)
    {
        return begin_setSizeY(theSizeY, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setSizeY(const ::omero::RIntPtr& theSizeY, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSizeY(theSizeY, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSizeY(const ::omero::RIntPtr& theSizeY, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSizeY(theSizeY, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSizeY(const ::omero::RIntPtr& theSizeY, const ::omero::model::Callback_OTF_setSizeYPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSizeY(theSizeY, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSizeY(const ::omero::RIntPtr& theSizeY, const ::Ice::Context& __ctx, const ::omero::model::Callback_OTF_setSizeYPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSizeY(theSizeY, &__ctx, __del, __cookie);
    }

    void end_setSizeY(const ::Ice::AsyncResultPtr&);
    
private:

    void setSizeY(const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setSizeY(const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RBoolPtr getOpticalAxisAveraged()
    {
        return getOpticalAxisAveraged(0);
    }
    ::omero::RBoolPtr getOpticalAxisAveraged(const ::Ice::Context& __ctx)
    {
        return getOpticalAxisAveraged(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getOpticalAxisAveraged(const ::IceInternal::Function<void (const ::omero::RBoolPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getOpticalAxisAveraged(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getOpticalAxisAveraged(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getOpticalAxisAveraged(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getOpticalAxisAveraged(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RBoolPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getOpticalAxisAveraged(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getOpticalAxisAveraged(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getOpticalAxisAveraged(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getOpticalAxisAveraged(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RBoolPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RBoolPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::OTFPrx __proxy = ::omero::model::OTFPrx::uncheckedCast(__result->getProxy());
                ::omero::RBoolPtr __ret;
                try
                {
                    __ret = __proxy->end_getOpticalAxisAveraged(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RBoolPtr&)> _response;
        };
        return begin_getOpticalAxisAveraged(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getOpticalAxisAveraged()
    {
        return begin_getOpticalAxisAveraged(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getOpticalAxisAveraged(const ::Ice::Context& __ctx)
    {
        return begin_getOpticalAxisAveraged(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getOpticalAxisAveraged(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getOpticalAxisAveraged(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getOpticalAxisAveraged(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getOpticalAxisAveraged(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getOpticalAxisAveraged(const ::omero::model::Callback_OTF_getOpticalAxisAveragedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getOpticalAxisAveraged(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getOpticalAxisAveraged(const ::Ice::Context& __ctx, const ::omero::model::Callback_OTF_getOpticalAxisAveragedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getOpticalAxisAveraged(&__ctx, __del, __cookie);
    }

    ::omero::RBoolPtr end_getOpticalAxisAveraged(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RBoolPtr getOpticalAxisAveraged(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getOpticalAxisAveraged(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setOpticalAxisAveraged(const ::omero::RBoolPtr& theOpticalAxisAveraged)
    {
        setOpticalAxisAveraged(theOpticalAxisAveraged, 0);
    }
    void setOpticalAxisAveraged(const ::omero::RBoolPtr& theOpticalAxisAveraged, const ::Ice::Context& __ctx)
    {
        setOpticalAxisAveraged(theOpticalAxisAveraged, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setOpticalAxisAveraged(const ::omero::RBoolPtr& theOpticalAxisAveraged, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setOpticalAxisAveraged(theOpticalAxisAveraged, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setOpticalAxisAveraged(const ::omero::RBoolPtr& theOpticalAxisAveraged, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setOpticalAxisAveraged(theOpticalAxisAveraged, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setOpticalAxisAveraged(const ::omero::RBoolPtr& theOpticalAxisAveraged, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setOpticalAxisAveraged(theOpticalAxisAveraged, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setOpticalAxisAveraged(const ::omero::RBoolPtr& theOpticalAxisAveraged, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setOpticalAxisAveraged(theOpticalAxisAveraged, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setOpticalAxisAveraged(const ::omero::RBoolPtr& theOpticalAxisAveraged)
    {
        return begin_setOpticalAxisAveraged(theOpticalAxisAveraged, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setOpticalAxisAveraged(const ::omero::RBoolPtr& theOpticalAxisAveraged, const ::Ice::Context& __ctx)
    {
        return begin_setOpticalAxisAveraged(theOpticalAxisAveraged, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setOpticalAxisAveraged(const ::omero::RBoolPtr& theOpticalAxisAveraged, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setOpticalAxisAveraged(theOpticalAxisAveraged, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setOpticalAxisAveraged(const ::omero::RBoolPtr& theOpticalAxisAveraged, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setOpticalAxisAveraged(theOpticalAxisAveraged, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setOpticalAxisAveraged(const ::omero::RBoolPtr& theOpticalAxisAveraged, const ::omero::model::Callback_OTF_setOpticalAxisAveragedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setOpticalAxisAveraged(theOpticalAxisAveraged, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setOpticalAxisAveraged(const ::omero::RBoolPtr& theOpticalAxisAveraged, const ::Ice::Context& __ctx, const ::omero::model::Callback_OTF_setOpticalAxisAveragedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setOpticalAxisAveraged(theOpticalAxisAveraged, &__ctx, __del, __cookie);
    }

    void end_setOpticalAxisAveraged(const ::Ice::AsyncResultPtr&);
    
private:

    void setOpticalAxisAveraged(const ::omero::RBoolPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setOpticalAxisAveraged(const ::omero::RBoolPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::PixelsTypePtr getPixelsType()
    {
        return getPixelsType(0);
    }
    ::omero::model::PixelsTypePtr getPixelsType(const ::Ice::Context& __ctx)
    {
        return getPixelsType(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getPixelsType(const ::IceInternal::Function<void (const ::omero::model::PixelsTypePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPixelsType(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPixelsType(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPixelsType(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getPixelsType(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::PixelsTypePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPixelsType(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPixelsType(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPixelsType(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getPixelsType(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::PixelsTypePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::PixelsTypePtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::OTFPrx __proxy = ::omero::model::OTFPrx::uncheckedCast(__result->getProxy());
                ::omero::model::PixelsTypePtr __ret;
                try
                {
                    __ret = __proxy->end_getPixelsType(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::PixelsTypePtr&)> _response;
        };
        return begin_getPixelsType(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getPixelsType()
    {
        return begin_getPixelsType(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPixelsType(const ::Ice::Context& __ctx)
    {
        return begin_getPixelsType(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPixelsType(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPixelsType(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPixelsType(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPixelsType(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPixelsType(const ::omero::model::Callback_OTF_getPixelsTypePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPixelsType(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPixelsType(const ::Ice::Context& __ctx, const ::omero::model::Callback_OTF_getPixelsTypePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPixelsType(&__ctx, __del, __cookie);
    }

    ::omero::model::PixelsTypePtr end_getPixelsType(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::PixelsTypePtr getPixelsType(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getPixelsType(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setPixelsType(const ::omero::model::PixelsTypePtr& thePixelsType)
    {
        setPixelsType(thePixelsType, 0);
    }
    void setPixelsType(const ::omero::model::PixelsTypePtr& thePixelsType, const ::Ice::Context& __ctx)
    {
        setPixelsType(thePixelsType, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setPixelsType(const ::omero::model::PixelsTypePtr& thePixelsType, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setPixelsType(thePixelsType, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setPixelsType(const ::omero::model::PixelsTypePtr& thePixelsType, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPixelsType(thePixelsType, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setPixelsType(const ::omero::model::PixelsTypePtr& thePixelsType, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setPixelsType(thePixelsType, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setPixelsType(const ::omero::model::PixelsTypePtr& thePixelsType, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPixelsType(thePixelsType, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setPixelsType(const ::omero::model::PixelsTypePtr& thePixelsType)
    {
        return begin_setPixelsType(thePixelsType, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPixelsType(const ::omero::model::PixelsTypePtr& thePixelsType, const ::Ice::Context& __ctx)
    {
        return begin_setPixelsType(thePixelsType, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPixelsType(const ::omero::model::PixelsTypePtr& thePixelsType, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPixelsType(thePixelsType, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPixelsType(const ::omero::model::PixelsTypePtr& thePixelsType, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPixelsType(thePixelsType, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPixelsType(const ::omero::model::PixelsTypePtr& thePixelsType, const ::omero::model::Callback_OTF_setPixelsTypePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPixelsType(thePixelsType, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPixelsType(const ::omero::model::PixelsTypePtr& thePixelsType, const ::Ice::Context& __ctx, const ::omero::model::Callback_OTF_setPixelsTypePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPixelsType(thePixelsType, &__ctx, __del, __cookie);
    }

    void end_setPixelsType(const ::Ice::AsyncResultPtr&);
    
private:

    void setPixelsType(const ::omero::model::PixelsTypePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setPixelsType(const ::omero::model::PixelsTypePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getPath()
    {
        return getPath(0);
    }
    ::omero::RStringPtr getPath(const ::Ice::Context& __ctx)
    {
        return getPath(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getPath(const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPath(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPath(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPath(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getPath(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPath(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPath(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPath(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getPath(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RStringPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::OTFPrx __proxy = ::omero::model::OTFPrx::uncheckedCast(__result->getProxy());
                ::omero::RStringPtr __ret;
                try
                {
                    __ret = __proxy->end_getPath(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RStringPtr&)> _response;
        };
        return begin_getPath(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getPath()
    {
        return begin_getPath(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPath(const ::Ice::Context& __ctx)
    {
        return begin_getPath(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPath(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPath(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPath(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPath(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPath(const ::omero::model::Callback_OTF_getPathPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPath(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPath(const ::Ice::Context& __ctx, const ::omero::model::Callback_OTF_getPathPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPath(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getPath(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getPath(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getPath(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setPath(const ::omero::RStringPtr& thePath)
    {
        setPath(thePath, 0);
    }
    void setPath(const ::omero::RStringPtr& thePath, const ::Ice::Context& __ctx)
    {
        setPath(thePath, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setPath(const ::omero::RStringPtr& thePath, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setPath(thePath, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setPath(const ::omero::RStringPtr& thePath, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPath(thePath, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setPath(const ::omero::RStringPtr& thePath, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setPath(thePath, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setPath(const ::omero::RStringPtr& thePath, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPath(thePath, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setPath(const ::omero::RStringPtr& thePath)
    {
        return begin_setPath(thePath, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPath(const ::omero::RStringPtr& thePath, const ::Ice::Context& __ctx)
    {
        return begin_setPath(thePath, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPath(const ::omero::RStringPtr& thePath, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPath(thePath, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPath(const ::omero::RStringPtr& thePath, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPath(thePath, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPath(const ::omero::RStringPtr& thePath, const ::omero::model::Callback_OTF_setPathPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPath(thePath, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPath(const ::omero::RStringPtr& thePath, const ::Ice::Context& __ctx, const ::omero::model::Callback_OTF_setPathPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPath(thePath, &__ctx, __del, __cookie);
    }

    void end_setPath(const ::Ice::AsyncResultPtr&);
    
private:

    void setPath(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setPath(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::FilterSetPtr getFilterSet()
    {
        return getFilterSet(0);
    }
    ::omero::model::FilterSetPtr getFilterSet(const ::Ice::Context& __ctx)
    {
        return getFilterSet(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getFilterSet(const ::IceInternal::Function<void (const ::omero::model::FilterSetPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getFilterSet(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getFilterSet(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getFilterSet(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getFilterSet(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::FilterSetPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getFilterSet(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getFilterSet(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getFilterSet(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getFilterSet(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::FilterSetPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::FilterSetPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::OTFPrx __proxy = ::omero::model::OTFPrx::uncheckedCast(__result->getProxy());
                ::omero::model::FilterSetPtr __ret;
                try
                {
                    __ret = __proxy->end_getFilterSet(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::FilterSetPtr&)> _response;
        };
        return begin_getFilterSet(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getFilterSet()
    {
        return begin_getFilterSet(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getFilterSet(const ::Ice::Context& __ctx)
    {
        return begin_getFilterSet(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getFilterSet(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFilterSet(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getFilterSet(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFilterSet(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getFilterSet(const ::omero::model::Callback_OTF_getFilterSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFilterSet(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getFilterSet(const ::Ice::Context& __ctx, const ::omero::model::Callback_OTF_getFilterSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFilterSet(&__ctx, __del, __cookie);
    }

    ::omero::model::FilterSetPtr end_getFilterSet(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::FilterSetPtr getFilterSet(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getFilterSet(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setFilterSet(const ::omero::model::FilterSetPtr& theFilterSet)
    {
        setFilterSet(theFilterSet, 0);
    }
    void setFilterSet(const ::omero::model::FilterSetPtr& theFilterSet, const ::Ice::Context& __ctx)
    {
        setFilterSet(theFilterSet, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setFilterSet(const ::omero::model::FilterSetPtr& theFilterSet, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setFilterSet(theFilterSet, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setFilterSet(const ::omero::model::FilterSetPtr& theFilterSet, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setFilterSet(theFilterSet, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setFilterSet(const ::omero::model::FilterSetPtr& theFilterSet, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setFilterSet(theFilterSet, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setFilterSet(const ::omero::model::FilterSetPtr& theFilterSet, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setFilterSet(theFilterSet, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setFilterSet(const ::omero::model::FilterSetPtr& theFilterSet)
    {
        return begin_setFilterSet(theFilterSet, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setFilterSet(const ::omero::model::FilterSetPtr& theFilterSet, const ::Ice::Context& __ctx)
    {
        return begin_setFilterSet(theFilterSet, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setFilterSet(const ::omero::model::FilterSetPtr& theFilterSet, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setFilterSet(theFilterSet, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setFilterSet(const ::omero::model::FilterSetPtr& theFilterSet, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setFilterSet(theFilterSet, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setFilterSet(const ::omero::model::FilterSetPtr& theFilterSet, const ::omero::model::Callback_OTF_setFilterSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setFilterSet(theFilterSet, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setFilterSet(const ::omero::model::FilterSetPtr& theFilterSet, const ::Ice::Context& __ctx, const ::omero::model::Callback_OTF_setFilterSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setFilterSet(theFilterSet, &__ctx, __del, __cookie);
    }

    void end_setFilterSet(const ::Ice::AsyncResultPtr&);
    
private:

    void setFilterSet(const ::omero::model::FilterSetPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setFilterSet(const ::omero::model::FilterSetPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::ObjectivePtr getObjective()
    {
        return getObjective(0);
    }
    ::omero::model::ObjectivePtr getObjective(const ::Ice::Context& __ctx)
    {
        return getObjective(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getObjective(const ::IceInternal::Function<void (const ::omero::model::ObjectivePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getObjective(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getObjective(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getObjective(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getObjective(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::ObjectivePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getObjective(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getObjective(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getObjective(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getObjective(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::ObjectivePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::ObjectivePtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::OTFPrx __proxy = ::omero::model::OTFPrx::uncheckedCast(__result->getProxy());
                ::omero::model::ObjectivePtr __ret;
                try
                {
                    __ret = __proxy->end_getObjective(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::ObjectivePtr&)> _response;
        };
        return begin_getObjective(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getObjective()
    {
        return begin_getObjective(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getObjective(const ::Ice::Context& __ctx)
    {
        return begin_getObjective(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getObjective(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getObjective(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getObjective(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getObjective(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getObjective(const ::omero::model::Callback_OTF_getObjectivePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getObjective(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getObjective(const ::Ice::Context& __ctx, const ::omero::model::Callback_OTF_getObjectivePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getObjective(&__ctx, __del, __cookie);
    }

    ::omero::model::ObjectivePtr end_getObjective(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::ObjectivePtr getObjective(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getObjective(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setObjective(const ::omero::model::ObjectivePtr& theObjective)
    {
        setObjective(theObjective, 0);
    }
    void setObjective(const ::omero::model::ObjectivePtr& theObjective, const ::Ice::Context& __ctx)
    {
        setObjective(theObjective, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setObjective(const ::omero::model::ObjectivePtr& theObjective, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setObjective(theObjective, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setObjective(const ::omero::model::ObjectivePtr& theObjective, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setObjective(theObjective, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setObjective(const ::omero::model::ObjectivePtr& theObjective, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setObjective(theObjective, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setObjective(const ::omero::model::ObjectivePtr& theObjective, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setObjective(theObjective, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setObjective(const ::omero::model::ObjectivePtr& theObjective)
    {
        return begin_setObjective(theObjective, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setObjective(const ::omero::model::ObjectivePtr& theObjective, const ::Ice::Context& __ctx)
    {
        return begin_setObjective(theObjective, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setObjective(const ::omero::model::ObjectivePtr& theObjective, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setObjective(theObjective, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setObjective(const ::omero::model::ObjectivePtr& theObjective, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setObjective(theObjective, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setObjective(const ::omero::model::ObjectivePtr& theObjective, const ::omero::model::Callback_OTF_setObjectivePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setObjective(theObjective, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setObjective(const ::omero::model::ObjectivePtr& theObjective, const ::Ice::Context& __ctx, const ::omero::model::Callback_OTF_setObjectivePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setObjective(theObjective, &__ctx, __del, __cookie);
    }

    void end_setObjective(const ::Ice::AsyncResultPtr&);
    
private:

    void setObjective(const ::omero::model::ObjectivePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setObjective(const ::omero::model::ObjectivePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::InstrumentPtr getInstrument()
    {
        return getInstrument(0);
    }
    ::omero::model::InstrumentPtr getInstrument(const ::Ice::Context& __ctx)
    {
        return getInstrument(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getInstrument(const ::IceInternal::Function<void (const ::omero::model::InstrumentPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getInstrument(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getInstrument(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getInstrument(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getInstrument(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::InstrumentPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getInstrument(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getInstrument(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getInstrument(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getInstrument(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::InstrumentPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::InstrumentPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::OTFPrx __proxy = ::omero::model::OTFPrx::uncheckedCast(__result->getProxy());
                ::omero::model::InstrumentPtr __ret;
                try
                {
                    __ret = __proxy->end_getInstrument(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::InstrumentPtr&)> _response;
        };
        return begin_getInstrument(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getInstrument()
    {
        return begin_getInstrument(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getInstrument(const ::Ice::Context& __ctx)
    {
        return begin_getInstrument(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getInstrument(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getInstrument(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getInstrument(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getInstrument(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getInstrument(const ::omero::model::Callback_OTF_getInstrumentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getInstrument(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getInstrument(const ::Ice::Context& __ctx, const ::omero::model::Callback_OTF_getInstrumentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getInstrument(&__ctx, __del, __cookie);
    }

    ::omero::model::InstrumentPtr end_getInstrument(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::InstrumentPtr getInstrument(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getInstrument(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setInstrument(const ::omero::model::InstrumentPtr& theInstrument)
    {
        setInstrument(theInstrument, 0);
    }
    void setInstrument(const ::omero::model::InstrumentPtr& theInstrument, const ::Ice::Context& __ctx)
    {
        setInstrument(theInstrument, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setInstrument(const ::omero::model::InstrumentPtr& theInstrument, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setInstrument(theInstrument, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setInstrument(const ::omero::model::InstrumentPtr& theInstrument, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setInstrument(theInstrument, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setInstrument(const ::omero::model::InstrumentPtr& theInstrument, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setInstrument(theInstrument, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setInstrument(const ::omero::model::InstrumentPtr& theInstrument, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setInstrument(theInstrument, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setInstrument(const ::omero::model::InstrumentPtr& theInstrument)
    {
        return begin_setInstrument(theInstrument, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setInstrument(const ::omero::model::InstrumentPtr& theInstrument, const ::Ice::Context& __ctx)
    {
        return begin_setInstrument(theInstrument, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setInstrument(const ::omero::model::InstrumentPtr& theInstrument, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setInstrument(theInstrument, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setInstrument(const ::omero::model::InstrumentPtr& theInstrument, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setInstrument(theInstrument, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setInstrument(const ::omero::model::InstrumentPtr& theInstrument, const ::omero::model::Callback_OTF_setInstrumentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setInstrument(theInstrument, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setInstrument(const ::omero::model::InstrumentPtr& theInstrument, const ::Ice::Context& __ctx, const ::omero::model::Callback_OTF_setInstrumentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setInstrument(theInstrument, &__ctx, __del, __cookie);
    }

    void end_setInstrument(const ::Ice::AsyncResultPtr&);
    
private:

    void setInstrument(const ::omero::model::InstrumentPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setInstrument(const ::omero::model::InstrumentPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<OTF> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<OTF*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<OTF> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<OTF*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<OTF> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<OTF*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<OTF> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<OTF*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<OTF> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<OTF*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<OTF> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<OTF*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<OTF> ice_secure(bool __secure) const
    {
        return dynamic_cast<OTF*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<OTF> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<OTF*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<OTF> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<OTF*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<OTF> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<OTF*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<OTF> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<OTF*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<OTF> ice_twoway() const
    {
        return dynamic_cast<OTF*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<OTF> ice_oneway() const
    {
        return dynamic_cast<OTF*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<OTF> ice_batchOneway() const
    {
        return dynamic_cast<OTF*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<OTF> ice_datagram() const
    {
        return dynamic_cast<OTF*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<OTF> ice_batchDatagram() const
    {
        return dynamic_cast<OTF*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<OTF> ice_compress(bool __compress) const
    {
        return dynamic_cast<OTF*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<OTF> ice_timeout(int __timeout) const
    {
        return dynamic_cast<OTF*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<OTF> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<OTF*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<OTF> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<OTF*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

namespace IceDelegate
{

namespace omero
{

namespace model
{

class OTF : virtual public ::IceDelegate::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RIntPtr getSizeX(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setSizeX(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RIntPtr getSizeY(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setSizeY(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RBoolPtr getOpticalAxisAveraged(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setOpticalAxisAveraged(const ::omero::RBoolPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::PixelsTypePtr getPixelsType(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setPixelsType(const ::omero::model::PixelsTypePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RStringPtr getPath(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setPath(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::FilterSetPtr getFilterSet(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setFilterSet(const ::omero::model::FilterSetPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::ObjectivePtr getObjective(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setObjective(const ::omero::model::ObjectivePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::InstrumentPtr getInstrument(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setInstrument(const ::omero::model::InstrumentPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

}

namespace IceDelegateM
{

namespace omero
{

namespace model
{

class OTF : virtual public ::IceDelegate::omero::model::OTF,
            virtual public ::IceDelegateM::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RIntPtr getSizeX(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setSizeX(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RIntPtr getSizeY(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setSizeY(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RBoolPtr getOpticalAxisAveraged(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setOpticalAxisAveraged(const ::omero::RBoolPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::PixelsTypePtr getPixelsType(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setPixelsType(const ::omero::model::PixelsTypePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getPath(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setPath(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::FilterSetPtr getFilterSet(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setFilterSet(const ::omero::model::FilterSetPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::ObjectivePtr getObjective(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setObjective(const ::omero::model::ObjectivePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::InstrumentPtr getInstrument(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setInstrument(const ::omero::model::InstrumentPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace IceDelegateD
{

namespace omero
{

namespace model
{

class OTF : virtual public ::IceDelegate::omero::model::OTF,
            virtual public ::IceDelegateD::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RIntPtr getSizeX(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setSizeX(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RIntPtr getSizeY(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setSizeY(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RBoolPtr getOpticalAxisAveraged(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setOpticalAxisAveraged(const ::omero::RBoolPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::PixelsTypePtr getPixelsType(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setPixelsType(const ::omero::model::PixelsTypePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getPath(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setPath(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::FilterSetPtr getFilterSet(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setFilterSet(const ::omero::model::FilterSetPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::ObjectivePtr getObjective(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setObjective(const ::omero::model::ObjectivePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::InstrumentPtr getInstrument(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setInstrument(const ::omero::model::InstrumentPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace omero
{

namespace model
{

class OTF : public ::omero::model::IObject
{
public:

    typedef OTFPrx ProxyType;
    typedef OTFPtr PointerType;

    OTF()
    {
    }

    OTF(const ::omero::RLongPtr& __ice_id, const ::omero::model::DetailsPtr& __ice_details, bool __ice_loaded, const ::omero::RIntPtr& __ice_version, const ::omero::RIntPtr& __ice_sizeX, const ::omero::RIntPtr& __ice_sizeY, const ::omero::RBoolPtr& __ice_opticalAxisAveraged, const ::omero::model::PixelsTypePtr& __ice_pixelsType, const ::omero::RStringPtr& __ice_path, const ::omero::model::FilterSetPtr& __ice_filterSet, const ::omero::model::ObjectivePtr& __ice_objective, const ::omero::model::InstrumentPtr& __ice_instrument) :
        ::omero::model::IObject(__ice_id, __ice_details, __ice_loaded)
        ,
        version(__ice_version),
        sizeX(__ice_sizeX),
        sizeY(__ice_sizeY),
        opticalAxisAveraged(__ice_opticalAxisAveraged),
        pixelsType(__ice_pixelsType),
        path(__ice_path),
        filterSet(__ice_filterSet),
        objective(__ice_objective),
        instrument(__ice_instrument)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    virtual ::omero::RIntPtr getVersion(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RIntPtr getSizeX(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getSizeX(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setSizeX(const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setSizeX(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RIntPtr getSizeY(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getSizeY(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setSizeY(const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setSizeY(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RBoolPtr getOpticalAxisAveraged(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getOpticalAxisAveraged(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setOpticalAxisAveraged(const ::omero::RBoolPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setOpticalAxisAveraged(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::PixelsTypePtr getPixelsType(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getPixelsType(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setPixelsType(const ::omero::model::PixelsTypePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setPixelsType(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getPath(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getPath(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setPath(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setPath(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::FilterSetPtr getFilterSet(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getFilterSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setFilterSet(const ::omero::model::FilterSetPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setFilterSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::ObjectivePtr getObjective(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getObjective(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setObjective(const ::omero::model::ObjectivePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setObjective(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::InstrumentPtr getInstrument(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getInstrument(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setInstrument(const ::omero::model::InstrumentPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setInstrument(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::model::IObject::__writeImpl;
    using ::omero::model::IObject::__readImpl;
    #endif

    ::omero::RIntPtr version;

    ::omero::RIntPtr sizeX;

    ::omero::RIntPtr sizeY;

    ::omero::RBoolPtr opticalAxisAveraged;

    ::omero::model::PixelsTypePtr pixelsType;

    ::omero::RStringPtr path;

    ::omero::model::FilterSetPtr filterSet;

    ::omero::model::ObjectivePtr objective;

    ::omero::model::InstrumentPtr instrument;
};

inline bool operator==(const OTF& l, const OTF& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const OTF& l, const OTF& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

}

namespace omero
{

namespace model
{

template<class T>
class CallbackNC_OTF_getVersion : public Callback_OTF_getVersion_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RIntPtr&);

    CallbackNC_OTF_getVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::OTFPrx __proxy = ::omero::model::OTFPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_OTF_getVersionPtr
newCallback_OTF_getVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OTF_getVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OTF_getVersionPtr
newCallback_OTF_getVersion(T* instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OTF_getVersion<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_OTF_getVersion : public Callback_OTF_getVersion_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RIntPtr&, const CT&);

    Callback_OTF_getVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::OTFPrx __proxy = ::omero::model::OTFPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_OTF_getVersionPtr
newCallback_OTF_getVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OTF_getVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OTF_getVersionPtr
newCallback_OTF_getVersion(T* instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OTF_getVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_OTF_setVersion : public Callback_OTF_setVersion_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_OTF_setVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_OTF_setVersionPtr
newCallback_OTF_setVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OTF_setVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OTF_setVersionPtr
newCallback_OTF_setVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OTF_setVersion<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_OTF_setVersionPtr
newCallback_OTF_setVersion(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OTF_setVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OTF_setVersionPtr
newCallback_OTF_setVersion(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OTF_setVersion<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_OTF_setVersion : public Callback_OTF_setVersion_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_OTF_setVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_OTF_setVersionPtr
newCallback_OTF_setVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OTF_setVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OTF_setVersionPtr
newCallback_OTF_setVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OTF_setVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_OTF_setVersionPtr
newCallback_OTF_setVersion(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OTF_setVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OTF_setVersionPtr
newCallback_OTF_setVersion(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OTF_setVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_OTF_getSizeX : public Callback_OTF_getSizeX_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RIntPtr&);

    CallbackNC_OTF_getSizeX(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::OTFPrx __proxy = ::omero::model::OTFPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getSizeX(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_OTF_getSizeXPtr
newCallback_OTF_getSizeX(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OTF_getSizeX<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OTF_getSizeXPtr
newCallback_OTF_getSizeX(T* instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OTF_getSizeX<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_OTF_getSizeX : public Callback_OTF_getSizeX_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RIntPtr&, const CT&);

    Callback_OTF_getSizeX(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::OTFPrx __proxy = ::omero::model::OTFPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getSizeX(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_OTF_getSizeXPtr
newCallback_OTF_getSizeX(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OTF_getSizeX<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OTF_getSizeXPtr
newCallback_OTF_getSizeX(T* instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OTF_getSizeX<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_OTF_setSizeX : public Callback_OTF_setSizeX_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_OTF_setSizeX(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_OTF_setSizeXPtr
newCallback_OTF_setSizeX(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OTF_setSizeX<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OTF_setSizeXPtr
newCallback_OTF_setSizeX(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OTF_setSizeX<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_OTF_setSizeXPtr
newCallback_OTF_setSizeX(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OTF_setSizeX<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OTF_setSizeXPtr
newCallback_OTF_setSizeX(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OTF_setSizeX<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_OTF_setSizeX : public Callback_OTF_setSizeX_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_OTF_setSizeX(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_OTF_setSizeXPtr
newCallback_OTF_setSizeX(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OTF_setSizeX<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OTF_setSizeXPtr
newCallback_OTF_setSizeX(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OTF_setSizeX<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_OTF_setSizeXPtr
newCallback_OTF_setSizeX(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OTF_setSizeX<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OTF_setSizeXPtr
newCallback_OTF_setSizeX(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OTF_setSizeX<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_OTF_getSizeY : public Callback_OTF_getSizeY_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RIntPtr&);

    CallbackNC_OTF_getSizeY(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::OTFPrx __proxy = ::omero::model::OTFPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getSizeY(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_OTF_getSizeYPtr
newCallback_OTF_getSizeY(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OTF_getSizeY<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OTF_getSizeYPtr
newCallback_OTF_getSizeY(T* instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OTF_getSizeY<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_OTF_getSizeY : public Callback_OTF_getSizeY_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RIntPtr&, const CT&);

    Callback_OTF_getSizeY(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::OTFPrx __proxy = ::omero::model::OTFPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getSizeY(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_OTF_getSizeYPtr
newCallback_OTF_getSizeY(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OTF_getSizeY<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OTF_getSizeYPtr
newCallback_OTF_getSizeY(T* instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OTF_getSizeY<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_OTF_setSizeY : public Callback_OTF_setSizeY_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_OTF_setSizeY(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_OTF_setSizeYPtr
newCallback_OTF_setSizeY(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OTF_setSizeY<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OTF_setSizeYPtr
newCallback_OTF_setSizeY(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OTF_setSizeY<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_OTF_setSizeYPtr
newCallback_OTF_setSizeY(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OTF_setSizeY<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OTF_setSizeYPtr
newCallback_OTF_setSizeY(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OTF_setSizeY<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_OTF_setSizeY : public Callback_OTF_setSizeY_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_OTF_setSizeY(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_OTF_setSizeYPtr
newCallback_OTF_setSizeY(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OTF_setSizeY<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OTF_setSizeYPtr
newCallback_OTF_setSizeY(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OTF_setSizeY<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_OTF_setSizeYPtr
newCallback_OTF_setSizeY(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OTF_setSizeY<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OTF_setSizeYPtr
newCallback_OTF_setSizeY(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OTF_setSizeY<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_OTF_getOpticalAxisAveraged : public Callback_OTF_getOpticalAxisAveraged_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RBoolPtr&);

    CallbackNC_OTF_getOpticalAxisAveraged(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::OTFPrx __proxy = ::omero::model::OTFPrx::uncheckedCast(__result->getProxy());
        ::omero::RBoolPtr __ret;
        try
        {
            __ret = __proxy->end_getOpticalAxisAveraged(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_OTF_getOpticalAxisAveragedPtr
newCallback_OTF_getOpticalAxisAveraged(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RBoolPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OTF_getOpticalAxisAveraged<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OTF_getOpticalAxisAveragedPtr
newCallback_OTF_getOpticalAxisAveraged(T* instance, void (T::*cb)(const ::omero::RBoolPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OTF_getOpticalAxisAveraged<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_OTF_getOpticalAxisAveraged : public Callback_OTF_getOpticalAxisAveraged_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RBoolPtr&, const CT&);

    Callback_OTF_getOpticalAxisAveraged(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::OTFPrx __proxy = ::omero::model::OTFPrx::uncheckedCast(__result->getProxy());
        ::omero::RBoolPtr __ret;
        try
        {
            __ret = __proxy->end_getOpticalAxisAveraged(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_OTF_getOpticalAxisAveragedPtr
newCallback_OTF_getOpticalAxisAveraged(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RBoolPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OTF_getOpticalAxisAveraged<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OTF_getOpticalAxisAveragedPtr
newCallback_OTF_getOpticalAxisAveraged(T* instance, void (T::*cb)(const ::omero::RBoolPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OTF_getOpticalAxisAveraged<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_OTF_setOpticalAxisAveraged : public Callback_OTF_setOpticalAxisAveraged_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_OTF_setOpticalAxisAveraged(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_OTF_setOpticalAxisAveragedPtr
newCallback_OTF_setOpticalAxisAveraged(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OTF_setOpticalAxisAveraged<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OTF_setOpticalAxisAveragedPtr
newCallback_OTF_setOpticalAxisAveraged(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OTF_setOpticalAxisAveraged<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_OTF_setOpticalAxisAveragedPtr
newCallback_OTF_setOpticalAxisAveraged(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OTF_setOpticalAxisAveraged<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OTF_setOpticalAxisAveragedPtr
newCallback_OTF_setOpticalAxisAveraged(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OTF_setOpticalAxisAveraged<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_OTF_setOpticalAxisAveraged : public Callback_OTF_setOpticalAxisAveraged_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_OTF_setOpticalAxisAveraged(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_OTF_setOpticalAxisAveragedPtr
newCallback_OTF_setOpticalAxisAveraged(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OTF_setOpticalAxisAveraged<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OTF_setOpticalAxisAveragedPtr
newCallback_OTF_setOpticalAxisAveraged(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OTF_setOpticalAxisAveraged<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_OTF_setOpticalAxisAveragedPtr
newCallback_OTF_setOpticalAxisAveraged(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OTF_setOpticalAxisAveraged<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OTF_setOpticalAxisAveragedPtr
newCallback_OTF_setOpticalAxisAveraged(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OTF_setOpticalAxisAveraged<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_OTF_getPixelsType : public Callback_OTF_getPixelsType_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::PixelsTypePtr&);

    CallbackNC_OTF_getPixelsType(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::OTFPrx __proxy = ::omero::model::OTFPrx::uncheckedCast(__result->getProxy());
        ::omero::model::PixelsTypePtr __ret;
        try
        {
            __ret = __proxy->end_getPixelsType(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_OTF_getPixelsTypePtr
newCallback_OTF_getPixelsType(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PixelsTypePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OTF_getPixelsType<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OTF_getPixelsTypePtr
newCallback_OTF_getPixelsType(T* instance, void (T::*cb)(const ::omero::model::PixelsTypePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OTF_getPixelsType<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_OTF_getPixelsType : public Callback_OTF_getPixelsType_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::PixelsTypePtr&, const CT&);

    Callback_OTF_getPixelsType(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::OTFPrx __proxy = ::omero::model::OTFPrx::uncheckedCast(__result->getProxy());
        ::omero::model::PixelsTypePtr __ret;
        try
        {
            __ret = __proxy->end_getPixelsType(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_OTF_getPixelsTypePtr
newCallback_OTF_getPixelsType(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PixelsTypePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OTF_getPixelsType<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OTF_getPixelsTypePtr
newCallback_OTF_getPixelsType(T* instance, void (T::*cb)(const ::omero::model::PixelsTypePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OTF_getPixelsType<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_OTF_setPixelsType : public Callback_OTF_setPixelsType_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_OTF_setPixelsType(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_OTF_setPixelsTypePtr
newCallback_OTF_setPixelsType(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OTF_setPixelsType<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OTF_setPixelsTypePtr
newCallback_OTF_setPixelsType(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OTF_setPixelsType<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_OTF_setPixelsTypePtr
newCallback_OTF_setPixelsType(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OTF_setPixelsType<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OTF_setPixelsTypePtr
newCallback_OTF_setPixelsType(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OTF_setPixelsType<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_OTF_setPixelsType : public Callback_OTF_setPixelsType_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_OTF_setPixelsType(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_OTF_setPixelsTypePtr
newCallback_OTF_setPixelsType(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OTF_setPixelsType<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OTF_setPixelsTypePtr
newCallback_OTF_setPixelsType(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OTF_setPixelsType<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_OTF_setPixelsTypePtr
newCallback_OTF_setPixelsType(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OTF_setPixelsType<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OTF_setPixelsTypePtr
newCallback_OTF_setPixelsType(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OTF_setPixelsType<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_OTF_getPath : public Callback_OTF_getPath_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_OTF_getPath(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::OTFPrx __proxy = ::omero::model::OTFPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getPath(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_OTF_getPathPtr
newCallback_OTF_getPath(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OTF_getPath<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OTF_getPathPtr
newCallback_OTF_getPath(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OTF_getPath<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_OTF_getPath : public Callback_OTF_getPath_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_OTF_getPath(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::OTFPrx __proxy = ::omero::model::OTFPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getPath(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_OTF_getPathPtr
newCallback_OTF_getPath(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OTF_getPath<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OTF_getPathPtr
newCallback_OTF_getPath(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OTF_getPath<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_OTF_setPath : public Callback_OTF_setPath_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_OTF_setPath(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_OTF_setPathPtr
newCallback_OTF_setPath(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OTF_setPath<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OTF_setPathPtr
newCallback_OTF_setPath(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OTF_setPath<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_OTF_setPathPtr
newCallback_OTF_setPath(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OTF_setPath<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OTF_setPathPtr
newCallback_OTF_setPath(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OTF_setPath<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_OTF_setPath : public Callback_OTF_setPath_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_OTF_setPath(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_OTF_setPathPtr
newCallback_OTF_setPath(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OTF_setPath<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OTF_setPathPtr
newCallback_OTF_setPath(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OTF_setPath<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_OTF_setPathPtr
newCallback_OTF_setPath(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OTF_setPath<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OTF_setPathPtr
newCallback_OTF_setPath(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OTF_setPath<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_OTF_getFilterSet : public Callback_OTF_getFilterSet_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::FilterSetPtr&);

    CallbackNC_OTF_getFilterSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::OTFPrx __proxy = ::omero::model::OTFPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilterSetPtr __ret;
        try
        {
            __ret = __proxy->end_getFilterSet(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_OTF_getFilterSetPtr
newCallback_OTF_getFilterSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilterSetPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OTF_getFilterSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OTF_getFilterSetPtr
newCallback_OTF_getFilterSet(T* instance, void (T::*cb)(const ::omero::model::FilterSetPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OTF_getFilterSet<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_OTF_getFilterSet : public Callback_OTF_getFilterSet_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::FilterSetPtr&, const CT&);

    Callback_OTF_getFilterSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::OTFPrx __proxy = ::omero::model::OTFPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilterSetPtr __ret;
        try
        {
            __ret = __proxy->end_getFilterSet(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_OTF_getFilterSetPtr
newCallback_OTF_getFilterSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilterSetPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OTF_getFilterSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OTF_getFilterSetPtr
newCallback_OTF_getFilterSet(T* instance, void (T::*cb)(const ::omero::model::FilterSetPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OTF_getFilterSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_OTF_setFilterSet : public Callback_OTF_setFilterSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_OTF_setFilterSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_OTF_setFilterSetPtr
newCallback_OTF_setFilterSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OTF_setFilterSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OTF_setFilterSetPtr
newCallback_OTF_setFilterSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OTF_setFilterSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_OTF_setFilterSetPtr
newCallback_OTF_setFilterSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OTF_setFilterSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OTF_setFilterSetPtr
newCallback_OTF_setFilterSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OTF_setFilterSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_OTF_setFilterSet : public Callback_OTF_setFilterSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_OTF_setFilterSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_OTF_setFilterSetPtr
newCallback_OTF_setFilterSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OTF_setFilterSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OTF_setFilterSetPtr
newCallback_OTF_setFilterSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OTF_setFilterSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_OTF_setFilterSetPtr
newCallback_OTF_setFilterSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OTF_setFilterSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OTF_setFilterSetPtr
newCallback_OTF_setFilterSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OTF_setFilterSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_OTF_getObjective : public Callback_OTF_getObjective_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::ObjectivePtr&);

    CallbackNC_OTF_getObjective(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::OTFPrx __proxy = ::omero::model::OTFPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ObjectivePtr __ret;
        try
        {
            __ret = __proxy->end_getObjective(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_OTF_getObjectivePtr
newCallback_OTF_getObjective(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ObjectivePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OTF_getObjective<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OTF_getObjectivePtr
newCallback_OTF_getObjective(T* instance, void (T::*cb)(const ::omero::model::ObjectivePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OTF_getObjective<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_OTF_getObjective : public Callback_OTF_getObjective_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::ObjectivePtr&, const CT&);

    Callback_OTF_getObjective(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::OTFPrx __proxy = ::omero::model::OTFPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ObjectivePtr __ret;
        try
        {
            __ret = __proxy->end_getObjective(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_OTF_getObjectivePtr
newCallback_OTF_getObjective(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ObjectivePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OTF_getObjective<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OTF_getObjectivePtr
newCallback_OTF_getObjective(T* instance, void (T::*cb)(const ::omero::model::ObjectivePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OTF_getObjective<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_OTF_setObjective : public Callback_OTF_setObjective_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_OTF_setObjective(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_OTF_setObjectivePtr
newCallback_OTF_setObjective(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OTF_setObjective<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OTF_setObjectivePtr
newCallback_OTF_setObjective(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OTF_setObjective<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_OTF_setObjectivePtr
newCallback_OTF_setObjective(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OTF_setObjective<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OTF_setObjectivePtr
newCallback_OTF_setObjective(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OTF_setObjective<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_OTF_setObjective : public Callback_OTF_setObjective_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_OTF_setObjective(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_OTF_setObjectivePtr
newCallback_OTF_setObjective(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OTF_setObjective<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OTF_setObjectivePtr
newCallback_OTF_setObjective(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OTF_setObjective<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_OTF_setObjectivePtr
newCallback_OTF_setObjective(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OTF_setObjective<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OTF_setObjectivePtr
newCallback_OTF_setObjective(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OTF_setObjective<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_OTF_getInstrument : public Callback_OTF_getInstrument_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::InstrumentPtr&);

    CallbackNC_OTF_getInstrument(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::OTFPrx __proxy = ::omero::model::OTFPrx::uncheckedCast(__result->getProxy());
        ::omero::model::InstrumentPtr __ret;
        try
        {
            __ret = __proxy->end_getInstrument(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_OTF_getInstrumentPtr
newCallback_OTF_getInstrument(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::InstrumentPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OTF_getInstrument<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OTF_getInstrumentPtr
newCallback_OTF_getInstrument(T* instance, void (T::*cb)(const ::omero::model::InstrumentPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OTF_getInstrument<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_OTF_getInstrument : public Callback_OTF_getInstrument_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::InstrumentPtr&, const CT&);

    Callback_OTF_getInstrument(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::OTFPrx __proxy = ::omero::model::OTFPrx::uncheckedCast(__result->getProxy());
        ::omero::model::InstrumentPtr __ret;
        try
        {
            __ret = __proxy->end_getInstrument(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_OTF_getInstrumentPtr
newCallback_OTF_getInstrument(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::InstrumentPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OTF_getInstrument<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OTF_getInstrumentPtr
newCallback_OTF_getInstrument(T* instance, void (T::*cb)(const ::omero::model::InstrumentPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OTF_getInstrument<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_OTF_setInstrument : public Callback_OTF_setInstrument_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_OTF_setInstrument(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_OTF_setInstrumentPtr
newCallback_OTF_setInstrument(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OTF_setInstrument<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OTF_setInstrumentPtr
newCallback_OTF_setInstrument(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OTF_setInstrument<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_OTF_setInstrumentPtr
newCallback_OTF_setInstrument(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OTF_setInstrument<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OTF_setInstrumentPtr
newCallback_OTF_setInstrument(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OTF_setInstrument<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_OTF_setInstrument : public Callback_OTF_setInstrument_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_OTF_setInstrument(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_OTF_setInstrumentPtr
newCallback_OTF_setInstrument(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OTF_setInstrument<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OTF_setInstrumentPtr
newCallback_OTF_setInstrument(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OTF_setInstrument<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_OTF_setInstrumentPtr
newCallback_OTF_setInstrument(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OTF_setInstrument<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OTF_setInstrumentPtr
newCallback_OTF_setInstrument(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OTF_setInstrument<T, CT>(instance, 0, excb, sentcb);
}

}

}

#endif
