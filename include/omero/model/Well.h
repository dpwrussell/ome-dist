// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `Well.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_Well_h__
#define __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_Well_h__

#include <Ice/LocalObjectF.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/StreamF.h>
#include <omero/model/IObject.h>
#include <omero/RTypes.h>
#include <omero/System.h>
#include <omero/Collections.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace omero
{

namespace model
{

class WellReagentLink;

class Reagent;

class WellSample;

class Plate;

class WellAnnotationLink;

class Annotation;

class Details;

class Well;

}

}

}

namespace omero
{

namespace model
{

class WellReagentLink;
bool operator==(const WellReagentLink&, const WellReagentLink&);
bool operator<(const WellReagentLink&, const WellReagentLink&);

class Reagent;
bool operator==(const Reagent&, const Reagent&);
bool operator<(const Reagent&, const Reagent&);

class WellSample;
bool operator==(const WellSample&, const WellSample&);
bool operator<(const WellSample&, const WellSample&);

class Plate;
bool operator==(const Plate&, const Plate&);
bool operator<(const Plate&, const Plate&);

class WellAnnotationLink;
bool operator==(const WellAnnotationLink&, const WellAnnotationLink&);
bool operator<(const WellAnnotationLink&, const WellAnnotationLink&);

class Annotation;
bool operator==(const Annotation&, const Annotation&);
bool operator<(const Annotation&, const Annotation&);

class Details;
bool operator==(const Details&, const Details&);
bool operator<(const Details&, const Details&);

class Well;
bool operator==(const Well&, const Well&);
bool operator<(const Well&, const Well&);

}

}

namespace IceInternal
{

::Ice::Object* upCast(::omero::model::WellReagentLink*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::WellReagentLink*);

::Ice::Object* upCast(::omero::model::Reagent*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Reagent*);

::Ice::Object* upCast(::omero::model::WellSample*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::WellSample*);

::Ice::Object* upCast(::omero::model::Plate*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Plate*);

::Ice::Object* upCast(::omero::model::WellAnnotationLink*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::WellAnnotationLink*);

::Ice::Object* upCast(::omero::model::Annotation*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Annotation*);

::Ice::Object* upCast(::omero::model::Details*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Details*);

::Ice::Object* upCast(::omero::model::Well*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Well*);

}

namespace omero
{

namespace model
{

typedef ::IceInternal::Handle< ::omero::model::WellReagentLink> WellReagentLinkPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::WellReagentLink> WellReagentLinkPrx;

void __read(::IceInternal::BasicStream*, WellReagentLinkPrx&);
void __patch__WellReagentLinkPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::Reagent> ReagentPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Reagent> ReagentPrx;

void __read(::IceInternal::BasicStream*, ReagentPrx&);
void __patch__ReagentPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::WellSample> WellSamplePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::WellSample> WellSamplePrx;

void __read(::IceInternal::BasicStream*, WellSamplePrx&);
void __patch__WellSamplePtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::Plate> PlatePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Plate> PlatePrx;

void __read(::IceInternal::BasicStream*, PlatePrx&);
void __patch__PlatePtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::WellAnnotationLink> WellAnnotationLinkPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::WellAnnotationLink> WellAnnotationLinkPrx;

void __read(::IceInternal::BasicStream*, WellAnnotationLinkPrx&);
void __patch__WellAnnotationLinkPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::Annotation> AnnotationPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Annotation> AnnotationPrx;

void __read(::IceInternal::BasicStream*, AnnotationPrx&);
void __patch__AnnotationPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::Details> DetailsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Details> DetailsPrx;

void __read(::IceInternal::BasicStream*, DetailsPrx&);
void __patch__DetailsPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::Well> WellPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Well> WellPrx;

void __read(::IceInternal::BasicStream*, WellPrx&);
void __patch__WellPtr(void*, ::Ice::ObjectPtr&);

}

}

namespace omero
{

namespace model
{

typedef ::std::vector< ::omero::model::WellReagentLinkPtr> WellReagentLinksSeq;
void __writeWellReagentLinksSeq(::IceInternal::BasicStream*, const ::omero::model::WellReagentLinkPtr*, const ::omero::model::WellReagentLinkPtr*);
void __readWellReagentLinksSeq(::IceInternal::BasicStream*, WellReagentLinksSeq&);

typedef ::std::vector< ::omero::model::ReagentPtr> WellLinkedReagentSeq;
void __writeWellLinkedReagentSeq(::IceInternal::BasicStream*, const ::omero::model::ReagentPtr*, const ::omero::model::ReagentPtr*);
void __readWellLinkedReagentSeq(::IceInternal::BasicStream*, WellLinkedReagentSeq&);

typedef ::std::vector< ::omero::model::WellSamplePtr> WellWellSamplesSeq;
void __writeWellWellSamplesSeq(::IceInternal::BasicStream*, const ::omero::model::WellSamplePtr*, const ::omero::model::WellSamplePtr*);
void __readWellWellSamplesSeq(::IceInternal::BasicStream*, WellWellSamplesSeq&);

typedef ::std::vector< ::omero::model::WellAnnotationLinkPtr> WellAnnotationLinksSeq;
void __writeWellAnnotationLinksSeq(::IceInternal::BasicStream*, const ::omero::model::WellAnnotationLinkPtr*, const ::omero::model::WellAnnotationLinkPtr*);
void __readWellAnnotationLinksSeq(::IceInternal::BasicStream*, WellAnnotationLinksSeq&);

typedef ::std::vector< ::omero::model::AnnotationPtr> WellLinkedAnnotationSeq;
void __writeWellLinkedAnnotationSeq(::IceInternal::BasicStream*, const ::omero::model::AnnotationPtr*, const ::omero::model::AnnotationPtr*);
void __readWellLinkedAnnotationSeq(::IceInternal::BasicStream*, WellLinkedAnnotationSeq&);

}

}

namespace omero
{

namespace model
{

class Callback_Well_getVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_getVersion_Base> Callback_Well_getVersionPtr;

class Callback_Well_setVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_setVersion_Base> Callback_Well_setVersionPtr;

class Callback_Well_getStatus_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_getStatus_Base> Callback_Well_getStatusPtr;

class Callback_Well_setStatus_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_setStatus_Base> Callback_Well_setStatusPtr;

class Callback_Well_getColumn_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_getColumn_Base> Callback_Well_getColumnPtr;

class Callback_Well_setColumn_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_setColumn_Base> Callback_Well_setColumnPtr;

class Callback_Well_getRow_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_getRow_Base> Callback_Well_getRowPtr;

class Callback_Well_setRow_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_setRow_Base> Callback_Well_setRowPtr;

class Callback_Well_getRed_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_getRed_Base> Callback_Well_getRedPtr;

class Callback_Well_setRed_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_setRed_Base> Callback_Well_setRedPtr;

class Callback_Well_getGreen_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_getGreen_Base> Callback_Well_getGreenPtr;

class Callback_Well_setGreen_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_setGreen_Base> Callback_Well_setGreenPtr;

class Callback_Well_getBlue_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_getBlue_Base> Callback_Well_getBluePtr;

class Callback_Well_setBlue_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_setBlue_Base> Callback_Well_setBluePtr;

class Callback_Well_getAlpha_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_getAlpha_Base> Callback_Well_getAlphaPtr;

class Callback_Well_setAlpha_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_setAlpha_Base> Callback_Well_setAlphaPtr;

class Callback_Well_unloadReagentLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_unloadReagentLinks_Base> Callback_Well_unloadReagentLinksPtr;

class Callback_Well_sizeOfReagentLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_sizeOfReagentLinks_Base> Callback_Well_sizeOfReagentLinksPtr;

class Callback_Well_copyReagentLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_copyReagentLinks_Base> Callback_Well_copyReagentLinksPtr;

class Callback_Well_addWellReagentLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_addWellReagentLink_Base> Callback_Well_addWellReagentLinkPtr;

class Callback_Well_addAllWellReagentLinkSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_addAllWellReagentLinkSet_Base> Callback_Well_addAllWellReagentLinkSetPtr;

class Callback_Well_removeWellReagentLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_removeWellReagentLink_Base> Callback_Well_removeWellReagentLinkPtr;

class Callback_Well_removeAllWellReagentLinkSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_removeAllWellReagentLinkSet_Base> Callback_Well_removeAllWellReagentLinkSetPtr;

class Callback_Well_clearReagentLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_clearReagentLinks_Base> Callback_Well_clearReagentLinksPtr;

class Callback_Well_reloadReagentLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_reloadReagentLinks_Base> Callback_Well_reloadReagentLinksPtr;

class Callback_Well_getReagentLinksCountPerOwner_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_getReagentLinksCountPerOwner_Base> Callback_Well_getReagentLinksCountPerOwnerPtr;

class Callback_Well_linkReagent_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_linkReagent_Base> Callback_Well_linkReagentPtr;

class Callback_Well_addWellReagentLinkToBoth_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_addWellReagentLinkToBoth_Base> Callback_Well_addWellReagentLinkToBothPtr;

class Callback_Well_findWellReagentLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_findWellReagentLink_Base> Callback_Well_findWellReagentLinkPtr;

class Callback_Well_unlinkReagent_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_unlinkReagent_Base> Callback_Well_unlinkReagentPtr;

class Callback_Well_removeWellReagentLinkFromBoth_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_removeWellReagentLinkFromBoth_Base> Callback_Well_removeWellReagentLinkFromBothPtr;

class Callback_Well_linkedReagentList_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_linkedReagentList_Base> Callback_Well_linkedReagentListPtr;

class Callback_Well_getExternalDescription_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_getExternalDescription_Base> Callback_Well_getExternalDescriptionPtr;

class Callback_Well_setExternalDescription_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_setExternalDescription_Base> Callback_Well_setExternalDescriptionPtr;

class Callback_Well_getExternalIdentifier_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_getExternalIdentifier_Base> Callback_Well_getExternalIdentifierPtr;

class Callback_Well_setExternalIdentifier_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_setExternalIdentifier_Base> Callback_Well_setExternalIdentifierPtr;

class Callback_Well_getType_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_getType_Base> Callback_Well_getTypePtr;

class Callback_Well_setType_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_setType_Base> Callback_Well_setTypePtr;

class Callback_Well_unloadWellSamples_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_unloadWellSamples_Base> Callback_Well_unloadWellSamplesPtr;

class Callback_Well_sizeOfWellSamples_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_sizeOfWellSamples_Base> Callback_Well_sizeOfWellSamplesPtr;

class Callback_Well_copyWellSamples_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_copyWellSamples_Base> Callback_Well_copyWellSamplesPtr;

class Callback_Well_addWellSample_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_addWellSample_Base> Callback_Well_addWellSamplePtr;

class Callback_Well_addAllWellSampleSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_addAllWellSampleSet_Base> Callback_Well_addAllWellSampleSetPtr;

class Callback_Well_removeWellSample_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_removeWellSample_Base> Callback_Well_removeWellSamplePtr;

class Callback_Well_removeAllWellSampleSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_removeAllWellSampleSet_Base> Callback_Well_removeAllWellSampleSetPtr;

class Callback_Well_clearWellSamples_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_clearWellSamples_Base> Callback_Well_clearWellSamplesPtr;

class Callback_Well_reloadWellSamples_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_reloadWellSamples_Base> Callback_Well_reloadWellSamplesPtr;

class Callback_Well_getWellSample_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_getWellSample_Base> Callback_Well_getWellSamplePtr;

class Callback_Well_setWellSample_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_setWellSample_Base> Callback_Well_setWellSamplePtr;

class Callback_Well_getPrimaryWellSample_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_getPrimaryWellSample_Base> Callback_Well_getPrimaryWellSamplePtr;

class Callback_Well_setPrimaryWellSample_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_setPrimaryWellSample_Base> Callback_Well_setPrimaryWellSamplePtr;

class Callback_Well_getPlate_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_getPlate_Base> Callback_Well_getPlatePtr;

class Callback_Well_setPlate_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_setPlate_Base> Callback_Well_setPlatePtr;

class Callback_Well_unloadAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_unloadAnnotationLinks_Base> Callback_Well_unloadAnnotationLinksPtr;

class Callback_Well_sizeOfAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_sizeOfAnnotationLinks_Base> Callback_Well_sizeOfAnnotationLinksPtr;

class Callback_Well_copyAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_copyAnnotationLinks_Base> Callback_Well_copyAnnotationLinksPtr;

class Callback_Well_addWellAnnotationLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_addWellAnnotationLink_Base> Callback_Well_addWellAnnotationLinkPtr;

class Callback_Well_addAllWellAnnotationLinkSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_addAllWellAnnotationLinkSet_Base> Callback_Well_addAllWellAnnotationLinkSetPtr;

class Callback_Well_removeWellAnnotationLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_removeWellAnnotationLink_Base> Callback_Well_removeWellAnnotationLinkPtr;

class Callback_Well_removeAllWellAnnotationLinkSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_removeAllWellAnnotationLinkSet_Base> Callback_Well_removeAllWellAnnotationLinkSetPtr;

class Callback_Well_clearAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_clearAnnotationLinks_Base> Callback_Well_clearAnnotationLinksPtr;

class Callback_Well_reloadAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_reloadAnnotationLinks_Base> Callback_Well_reloadAnnotationLinksPtr;

class Callback_Well_getAnnotationLinksCountPerOwner_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_getAnnotationLinksCountPerOwner_Base> Callback_Well_getAnnotationLinksCountPerOwnerPtr;

class Callback_Well_linkAnnotation_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_linkAnnotation_Base> Callback_Well_linkAnnotationPtr;

class Callback_Well_addWellAnnotationLinkToBoth_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_addWellAnnotationLinkToBoth_Base> Callback_Well_addWellAnnotationLinkToBothPtr;

class Callback_Well_findWellAnnotationLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_findWellAnnotationLink_Base> Callback_Well_findWellAnnotationLinkPtr;

class Callback_Well_unlinkAnnotation_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_unlinkAnnotation_Base> Callback_Well_unlinkAnnotationPtr;

class Callback_Well_removeWellAnnotationLinkFromBoth_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_removeWellAnnotationLinkFromBoth_Base> Callback_Well_removeWellAnnotationLinkFromBothPtr;

class Callback_Well_linkedAnnotationList_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Well_linkedAnnotationList_Base> Callback_Well_linkedAnnotationListPtr;

}

}

namespace IceProxy
{

namespace omero
{

namespace model
{

class Well : virtual public ::IceProxy::omero::model::IObject
{
public:

    ::omero::RIntPtr getVersion()
    {
        return getVersion(0);
    }
    ::omero::RIntPtr getVersion(const ::Ice::Context& __ctx)
    {
        return getVersion(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getVersion()
    {
        return begin_getVersion(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx)
    {
        return begin_getVersion(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::omero::model::Callback_Well_getVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_getVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(&__ctx, __del, __cookie);
    }

    ::omero::RIntPtr end_getVersion(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RIntPtr getVersion(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setVersion(const ::omero::RIntPtr& theVersion)
    {
        setVersion(theVersion, 0);
    }
    void setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx)
    {
        setVersion(theVersion, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion)
    {
        return begin_setVersion(theVersion, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx)
    {
        return begin_setVersion(theVersion, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::omero::model::Callback_Well_setVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_setVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, &__ctx, __del, __cookie);
    }

    void end_setVersion(const ::Ice::AsyncResultPtr&);
    
private:

    void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getStatus()
    {
        return getStatus(0);
    }
    ::omero::RStringPtr getStatus(const ::Ice::Context& __ctx)
    {
        return getStatus(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getStatus()
    {
        return begin_getStatus(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getStatus(const ::Ice::Context& __ctx)
    {
        return begin_getStatus(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getStatus(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStatus(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getStatus(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStatus(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getStatus(const ::omero::model::Callback_Well_getStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStatus(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getStatus(const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_getStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStatus(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getStatus(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getStatus(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getStatus(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setStatus(const ::omero::RStringPtr& theStatus)
    {
        setStatus(theStatus, 0);
    }
    void setStatus(const ::omero::RStringPtr& theStatus, const ::Ice::Context& __ctx)
    {
        setStatus(theStatus, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setStatus(const ::omero::RStringPtr& theStatus)
    {
        return begin_setStatus(theStatus, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setStatus(const ::omero::RStringPtr& theStatus, const ::Ice::Context& __ctx)
    {
        return begin_setStatus(theStatus, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setStatus(const ::omero::RStringPtr& theStatus, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setStatus(theStatus, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setStatus(const ::omero::RStringPtr& theStatus, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setStatus(theStatus, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setStatus(const ::omero::RStringPtr& theStatus, const ::omero::model::Callback_Well_setStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setStatus(theStatus, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setStatus(const ::omero::RStringPtr& theStatus, const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_setStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setStatus(theStatus, &__ctx, __del, __cookie);
    }

    void end_setStatus(const ::Ice::AsyncResultPtr&);
    
private:

    void setStatus(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setStatus(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RIntPtr getColumn()
    {
        return getColumn(0);
    }
    ::omero::RIntPtr getColumn(const ::Ice::Context& __ctx)
    {
        return getColumn(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getColumn()
    {
        return begin_getColumn(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getColumn(const ::Ice::Context& __ctx)
    {
        return begin_getColumn(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getColumn(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getColumn(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getColumn(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getColumn(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getColumn(const ::omero::model::Callback_Well_getColumnPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getColumn(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getColumn(const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_getColumnPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getColumn(&__ctx, __del, __cookie);
    }

    ::omero::RIntPtr end_getColumn(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RIntPtr getColumn(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getColumn(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setColumn(const ::omero::RIntPtr& theColumn)
    {
        setColumn(theColumn, 0);
    }
    void setColumn(const ::omero::RIntPtr& theColumn, const ::Ice::Context& __ctx)
    {
        setColumn(theColumn, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setColumn(const ::omero::RIntPtr& theColumn)
    {
        return begin_setColumn(theColumn, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setColumn(const ::omero::RIntPtr& theColumn, const ::Ice::Context& __ctx)
    {
        return begin_setColumn(theColumn, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setColumn(const ::omero::RIntPtr& theColumn, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setColumn(theColumn, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setColumn(const ::omero::RIntPtr& theColumn, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setColumn(theColumn, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setColumn(const ::omero::RIntPtr& theColumn, const ::omero::model::Callback_Well_setColumnPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setColumn(theColumn, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setColumn(const ::omero::RIntPtr& theColumn, const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_setColumnPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setColumn(theColumn, &__ctx, __del, __cookie);
    }

    void end_setColumn(const ::Ice::AsyncResultPtr&);
    
private:

    void setColumn(const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setColumn(const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RIntPtr getRow()
    {
        return getRow(0);
    }
    ::omero::RIntPtr getRow(const ::Ice::Context& __ctx)
    {
        return getRow(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getRow()
    {
        return begin_getRow(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRow(const ::Ice::Context& __ctx)
    {
        return begin_getRow(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRow(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRow(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRow(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRow(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRow(const ::omero::model::Callback_Well_getRowPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRow(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRow(const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_getRowPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRow(&__ctx, __del, __cookie);
    }

    ::omero::RIntPtr end_getRow(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RIntPtr getRow(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getRow(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setRow(const ::omero::RIntPtr& theRow)
    {
        setRow(theRow, 0);
    }
    void setRow(const ::omero::RIntPtr& theRow, const ::Ice::Context& __ctx)
    {
        setRow(theRow, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setRow(const ::omero::RIntPtr& theRow)
    {
        return begin_setRow(theRow, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setRow(const ::omero::RIntPtr& theRow, const ::Ice::Context& __ctx)
    {
        return begin_setRow(theRow, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setRow(const ::omero::RIntPtr& theRow, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setRow(theRow, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setRow(const ::omero::RIntPtr& theRow, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setRow(theRow, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setRow(const ::omero::RIntPtr& theRow, const ::omero::model::Callback_Well_setRowPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setRow(theRow, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setRow(const ::omero::RIntPtr& theRow, const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_setRowPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setRow(theRow, &__ctx, __del, __cookie);
    }

    void end_setRow(const ::Ice::AsyncResultPtr&);
    
private:

    void setRow(const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setRow(const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RIntPtr getRed()
    {
        return getRed(0);
    }
    ::omero::RIntPtr getRed(const ::Ice::Context& __ctx)
    {
        return getRed(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getRed()
    {
        return begin_getRed(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRed(const ::Ice::Context& __ctx)
    {
        return begin_getRed(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRed(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRed(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRed(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRed(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRed(const ::omero::model::Callback_Well_getRedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRed(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRed(const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_getRedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRed(&__ctx, __del, __cookie);
    }

    ::omero::RIntPtr end_getRed(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RIntPtr getRed(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getRed(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setRed(const ::omero::RIntPtr& theRed)
    {
        setRed(theRed, 0);
    }
    void setRed(const ::omero::RIntPtr& theRed, const ::Ice::Context& __ctx)
    {
        setRed(theRed, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setRed(const ::omero::RIntPtr& theRed)
    {
        return begin_setRed(theRed, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setRed(const ::omero::RIntPtr& theRed, const ::Ice::Context& __ctx)
    {
        return begin_setRed(theRed, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setRed(const ::omero::RIntPtr& theRed, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setRed(theRed, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setRed(const ::omero::RIntPtr& theRed, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setRed(theRed, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setRed(const ::omero::RIntPtr& theRed, const ::omero::model::Callback_Well_setRedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setRed(theRed, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setRed(const ::omero::RIntPtr& theRed, const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_setRedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setRed(theRed, &__ctx, __del, __cookie);
    }

    void end_setRed(const ::Ice::AsyncResultPtr&);
    
private:

    void setRed(const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setRed(const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RIntPtr getGreen()
    {
        return getGreen(0);
    }
    ::omero::RIntPtr getGreen(const ::Ice::Context& __ctx)
    {
        return getGreen(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getGreen()
    {
        return begin_getGreen(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getGreen(const ::Ice::Context& __ctx)
    {
        return begin_getGreen(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getGreen(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getGreen(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getGreen(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getGreen(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getGreen(const ::omero::model::Callback_Well_getGreenPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getGreen(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getGreen(const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_getGreenPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getGreen(&__ctx, __del, __cookie);
    }

    ::omero::RIntPtr end_getGreen(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RIntPtr getGreen(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getGreen(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setGreen(const ::omero::RIntPtr& theGreen)
    {
        setGreen(theGreen, 0);
    }
    void setGreen(const ::omero::RIntPtr& theGreen, const ::Ice::Context& __ctx)
    {
        setGreen(theGreen, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setGreen(const ::omero::RIntPtr& theGreen)
    {
        return begin_setGreen(theGreen, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setGreen(const ::omero::RIntPtr& theGreen, const ::Ice::Context& __ctx)
    {
        return begin_setGreen(theGreen, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setGreen(const ::omero::RIntPtr& theGreen, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setGreen(theGreen, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setGreen(const ::omero::RIntPtr& theGreen, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setGreen(theGreen, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setGreen(const ::omero::RIntPtr& theGreen, const ::omero::model::Callback_Well_setGreenPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setGreen(theGreen, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setGreen(const ::omero::RIntPtr& theGreen, const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_setGreenPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setGreen(theGreen, &__ctx, __del, __cookie);
    }

    void end_setGreen(const ::Ice::AsyncResultPtr&);
    
private:

    void setGreen(const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setGreen(const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RIntPtr getBlue()
    {
        return getBlue(0);
    }
    ::omero::RIntPtr getBlue(const ::Ice::Context& __ctx)
    {
        return getBlue(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getBlue()
    {
        return begin_getBlue(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getBlue(const ::Ice::Context& __ctx)
    {
        return begin_getBlue(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getBlue(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBlue(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBlue(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBlue(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBlue(const ::omero::model::Callback_Well_getBluePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBlue(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBlue(const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_getBluePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBlue(&__ctx, __del, __cookie);
    }

    ::omero::RIntPtr end_getBlue(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RIntPtr getBlue(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getBlue(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setBlue(const ::omero::RIntPtr& theBlue)
    {
        setBlue(theBlue, 0);
    }
    void setBlue(const ::omero::RIntPtr& theBlue, const ::Ice::Context& __ctx)
    {
        setBlue(theBlue, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setBlue(const ::omero::RIntPtr& theBlue)
    {
        return begin_setBlue(theBlue, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setBlue(const ::omero::RIntPtr& theBlue, const ::Ice::Context& __ctx)
    {
        return begin_setBlue(theBlue, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setBlue(const ::omero::RIntPtr& theBlue, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setBlue(theBlue, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setBlue(const ::omero::RIntPtr& theBlue, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setBlue(theBlue, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setBlue(const ::omero::RIntPtr& theBlue, const ::omero::model::Callback_Well_setBluePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setBlue(theBlue, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setBlue(const ::omero::RIntPtr& theBlue, const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_setBluePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setBlue(theBlue, &__ctx, __del, __cookie);
    }

    void end_setBlue(const ::Ice::AsyncResultPtr&);
    
private:

    void setBlue(const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setBlue(const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RIntPtr getAlpha()
    {
        return getAlpha(0);
    }
    ::omero::RIntPtr getAlpha(const ::Ice::Context& __ctx)
    {
        return getAlpha(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getAlpha()
    {
        return begin_getAlpha(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAlpha(const ::Ice::Context& __ctx)
    {
        return begin_getAlpha(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAlpha(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAlpha(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAlpha(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAlpha(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAlpha(const ::omero::model::Callback_Well_getAlphaPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAlpha(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAlpha(const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_getAlphaPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAlpha(&__ctx, __del, __cookie);
    }

    ::omero::RIntPtr end_getAlpha(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RIntPtr getAlpha(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getAlpha(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setAlpha(const ::omero::RIntPtr& theAlpha)
    {
        setAlpha(theAlpha, 0);
    }
    void setAlpha(const ::omero::RIntPtr& theAlpha, const ::Ice::Context& __ctx)
    {
        setAlpha(theAlpha, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setAlpha(const ::omero::RIntPtr& theAlpha)
    {
        return begin_setAlpha(theAlpha, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setAlpha(const ::omero::RIntPtr& theAlpha, const ::Ice::Context& __ctx)
    {
        return begin_setAlpha(theAlpha, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setAlpha(const ::omero::RIntPtr& theAlpha, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setAlpha(theAlpha, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setAlpha(const ::omero::RIntPtr& theAlpha, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setAlpha(theAlpha, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setAlpha(const ::omero::RIntPtr& theAlpha, const ::omero::model::Callback_Well_setAlphaPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setAlpha(theAlpha, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setAlpha(const ::omero::RIntPtr& theAlpha, const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_setAlphaPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setAlpha(theAlpha, &__ctx, __del, __cookie);
    }

    void end_setAlpha(const ::Ice::AsyncResultPtr&);
    
private:

    void setAlpha(const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setAlpha(const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unloadReagentLinks()
    {
        unloadReagentLinks(0);
    }
    void unloadReagentLinks(const ::Ice::Context& __ctx)
    {
        unloadReagentLinks(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_unloadReagentLinks()
    {
        return begin_unloadReagentLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadReagentLinks(const ::Ice::Context& __ctx)
    {
        return begin_unloadReagentLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadReagentLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadReagentLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadReagentLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadReagentLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadReagentLinks(const ::omero::model::Callback_Well_unloadReagentLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadReagentLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadReagentLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_unloadReagentLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadReagentLinks(&__ctx, __del, __cookie);
    }

    void end_unloadReagentLinks(const ::Ice::AsyncResultPtr&);
    
private:

    void unloadReagentLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unloadReagentLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int sizeOfReagentLinks()
    {
        return sizeOfReagentLinks(0);
    }
    ::Ice::Int sizeOfReagentLinks(const ::Ice::Context& __ctx)
    {
        return sizeOfReagentLinks(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_sizeOfReagentLinks()
    {
        return begin_sizeOfReagentLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfReagentLinks(const ::Ice::Context& __ctx)
    {
        return begin_sizeOfReagentLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfReagentLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfReagentLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfReagentLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfReagentLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfReagentLinks(const ::omero::model::Callback_Well_sizeOfReagentLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfReagentLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfReagentLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_sizeOfReagentLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfReagentLinks(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_sizeOfReagentLinks(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int sizeOfReagentLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sizeOfReagentLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::WellReagentLinksSeq copyReagentLinks()
    {
        return copyReagentLinks(0);
    }
    ::omero::model::WellReagentLinksSeq copyReagentLinks(const ::Ice::Context& __ctx)
    {
        return copyReagentLinks(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_copyReagentLinks()
    {
        return begin_copyReagentLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyReagentLinks(const ::Ice::Context& __ctx)
    {
        return begin_copyReagentLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyReagentLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyReagentLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyReagentLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyReagentLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyReagentLinks(const ::omero::model::Callback_Well_copyReagentLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyReagentLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyReagentLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_copyReagentLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyReagentLinks(&__ctx, __del, __cookie);
    }

    ::omero::model::WellReagentLinksSeq end_copyReagentLinks(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::WellReagentLinksSeq copyReagentLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_copyReagentLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addWellReagentLink(const ::omero::model::WellReagentLinkPtr& target)
    {
        addWellReagentLink(target, 0);
    }
    void addWellReagentLink(const ::omero::model::WellReagentLinkPtr& target, const ::Ice::Context& __ctx)
    {
        addWellReagentLink(target, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addWellReagentLink(const ::omero::model::WellReagentLinkPtr& target)
    {
        return begin_addWellReagentLink(target, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addWellReagentLink(const ::omero::model::WellReagentLinkPtr& target, const ::Ice::Context& __ctx)
    {
        return begin_addWellReagentLink(target, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addWellReagentLink(const ::omero::model::WellReagentLinkPtr& target, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addWellReagentLink(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addWellReagentLink(const ::omero::model::WellReagentLinkPtr& target, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addWellReagentLink(target, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addWellReagentLink(const ::omero::model::WellReagentLinkPtr& target, const ::omero::model::Callback_Well_addWellReagentLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addWellReagentLink(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addWellReagentLink(const ::omero::model::WellReagentLinkPtr& target, const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_addWellReagentLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addWellReagentLink(target, &__ctx, __del, __cookie);
    }

    void end_addWellReagentLink(const ::Ice::AsyncResultPtr&);
    
private:

    void addWellReagentLink(const ::omero::model::WellReagentLinkPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addWellReagentLink(const ::omero::model::WellReagentLinkPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addAllWellReagentLinkSet(const ::omero::model::WellReagentLinksSeq& targets)
    {
        addAllWellReagentLinkSet(targets, 0);
    }
    void addAllWellReagentLinkSet(const ::omero::model::WellReagentLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        addAllWellReagentLinkSet(targets, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addAllWellReagentLinkSet(const ::omero::model::WellReagentLinksSeq& targets)
    {
        return begin_addAllWellReagentLinkSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllWellReagentLinkSet(const ::omero::model::WellReagentLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_addAllWellReagentLinkSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllWellReagentLinkSet(const ::omero::model::WellReagentLinksSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllWellReagentLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllWellReagentLinkSet(const ::omero::model::WellReagentLinksSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllWellReagentLinkSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllWellReagentLinkSet(const ::omero::model::WellReagentLinksSeq& targets, const ::omero::model::Callback_Well_addAllWellReagentLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllWellReagentLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllWellReagentLinkSet(const ::omero::model::WellReagentLinksSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_addAllWellReagentLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllWellReagentLinkSet(targets, &__ctx, __del, __cookie);
    }

    void end_addAllWellReagentLinkSet(const ::Ice::AsyncResultPtr&);
    
private:

    void addAllWellReagentLinkSet(const ::omero::model::WellReagentLinksSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addAllWellReagentLinkSet(const ::omero::model::WellReagentLinksSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeWellReagentLink(const ::omero::model::WellReagentLinkPtr& theTarget)
    {
        removeWellReagentLink(theTarget, 0);
    }
    void removeWellReagentLink(const ::omero::model::WellReagentLinkPtr& theTarget, const ::Ice::Context& __ctx)
    {
        removeWellReagentLink(theTarget, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removeWellReagentLink(const ::omero::model::WellReagentLinkPtr& theTarget)
    {
        return begin_removeWellReagentLink(theTarget, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeWellReagentLink(const ::omero::model::WellReagentLinkPtr& theTarget, const ::Ice::Context& __ctx)
    {
        return begin_removeWellReagentLink(theTarget, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeWellReagentLink(const ::omero::model::WellReagentLinkPtr& theTarget, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeWellReagentLink(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeWellReagentLink(const ::omero::model::WellReagentLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeWellReagentLink(theTarget, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeWellReagentLink(const ::omero::model::WellReagentLinkPtr& theTarget, const ::omero::model::Callback_Well_removeWellReagentLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeWellReagentLink(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeWellReagentLink(const ::omero::model::WellReagentLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_removeWellReagentLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeWellReagentLink(theTarget, &__ctx, __del, __cookie);
    }

    void end_removeWellReagentLink(const ::Ice::AsyncResultPtr&);
    
private:

    void removeWellReagentLink(const ::omero::model::WellReagentLinkPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeWellReagentLink(const ::omero::model::WellReagentLinkPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeAllWellReagentLinkSet(const ::omero::model::WellReagentLinksSeq& targets)
    {
        removeAllWellReagentLinkSet(targets, 0);
    }
    void removeAllWellReagentLinkSet(const ::omero::model::WellReagentLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        removeAllWellReagentLinkSet(targets, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removeAllWellReagentLinkSet(const ::omero::model::WellReagentLinksSeq& targets)
    {
        return begin_removeAllWellReagentLinkSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllWellReagentLinkSet(const ::omero::model::WellReagentLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_removeAllWellReagentLinkSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllWellReagentLinkSet(const ::omero::model::WellReagentLinksSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllWellReagentLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllWellReagentLinkSet(const ::omero::model::WellReagentLinksSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllWellReagentLinkSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllWellReagentLinkSet(const ::omero::model::WellReagentLinksSeq& targets, const ::omero::model::Callback_Well_removeAllWellReagentLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllWellReagentLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllWellReagentLinkSet(const ::omero::model::WellReagentLinksSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_removeAllWellReagentLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllWellReagentLinkSet(targets, &__ctx, __del, __cookie);
    }

    void end_removeAllWellReagentLinkSet(const ::Ice::AsyncResultPtr&);
    
private:

    void removeAllWellReagentLinkSet(const ::omero::model::WellReagentLinksSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeAllWellReagentLinkSet(const ::omero::model::WellReagentLinksSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void clearReagentLinks()
    {
        clearReagentLinks(0);
    }
    void clearReagentLinks(const ::Ice::Context& __ctx)
    {
        clearReagentLinks(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_clearReagentLinks()
    {
        return begin_clearReagentLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearReagentLinks(const ::Ice::Context& __ctx)
    {
        return begin_clearReagentLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearReagentLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearReagentLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearReagentLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearReagentLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearReagentLinks(const ::omero::model::Callback_Well_clearReagentLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearReagentLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearReagentLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_clearReagentLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearReagentLinks(&__ctx, __del, __cookie);
    }

    void end_clearReagentLinks(const ::Ice::AsyncResultPtr&);
    
private:

    void clearReagentLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_clearReagentLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reloadReagentLinks(const ::omero::model::WellPtr& toCopy)
    {
        reloadReagentLinks(toCopy, 0);
    }
    void reloadReagentLinks(const ::omero::model::WellPtr& toCopy, const ::Ice::Context& __ctx)
    {
        reloadReagentLinks(toCopy, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_reloadReagentLinks(const ::omero::model::WellPtr& toCopy)
    {
        return begin_reloadReagentLinks(toCopy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadReagentLinks(const ::omero::model::WellPtr& toCopy, const ::Ice::Context& __ctx)
    {
        return begin_reloadReagentLinks(toCopy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadReagentLinks(const ::omero::model::WellPtr& toCopy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadReagentLinks(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadReagentLinks(const ::omero::model::WellPtr& toCopy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadReagentLinks(toCopy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadReagentLinks(const ::omero::model::WellPtr& toCopy, const ::omero::model::Callback_Well_reloadReagentLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadReagentLinks(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadReagentLinks(const ::omero::model::WellPtr& toCopy, const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_reloadReagentLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadReagentLinks(toCopy, &__ctx, __del, __cookie);
    }

    void end_reloadReagentLinks(const ::Ice::AsyncResultPtr&);
    
private:

    void reloadReagentLinks(const ::omero::model::WellPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reloadReagentLinks(const ::omero::model::WellPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::sys::CountMap getReagentLinksCountPerOwner()
    {
        return getReagentLinksCountPerOwner(0);
    }
    ::omero::sys::CountMap getReagentLinksCountPerOwner(const ::Ice::Context& __ctx)
    {
        return getReagentLinksCountPerOwner(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getReagentLinksCountPerOwner()
    {
        return begin_getReagentLinksCountPerOwner(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getReagentLinksCountPerOwner(const ::Ice::Context& __ctx)
    {
        return begin_getReagentLinksCountPerOwner(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getReagentLinksCountPerOwner(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getReagentLinksCountPerOwner(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getReagentLinksCountPerOwner(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getReagentLinksCountPerOwner(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getReagentLinksCountPerOwner(const ::omero::model::Callback_Well_getReagentLinksCountPerOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getReagentLinksCountPerOwner(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getReagentLinksCountPerOwner(const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_getReagentLinksCountPerOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getReagentLinksCountPerOwner(&__ctx, __del, __cookie);
    }

    ::omero::sys::CountMap end_getReagentLinksCountPerOwner(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::sys::CountMap getReagentLinksCountPerOwner(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getReagentLinksCountPerOwner(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::WellReagentLinkPtr linkReagent(const ::omero::model::ReagentPtr& addition)
    {
        return linkReagent(addition, 0);
    }
    ::omero::model::WellReagentLinkPtr linkReagent(const ::omero::model::ReagentPtr& addition, const ::Ice::Context& __ctx)
    {
        return linkReagent(addition, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_linkReagent(const ::omero::model::ReagentPtr& addition)
    {
        return begin_linkReagent(addition, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkReagent(const ::omero::model::ReagentPtr& addition, const ::Ice::Context& __ctx)
    {
        return begin_linkReagent(addition, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkReagent(const ::omero::model::ReagentPtr& addition, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkReagent(addition, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkReagent(const ::omero::model::ReagentPtr& addition, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkReagent(addition, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkReagent(const ::omero::model::ReagentPtr& addition, const ::omero::model::Callback_Well_linkReagentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkReagent(addition, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkReagent(const ::omero::model::ReagentPtr& addition, const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_linkReagentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkReagent(addition, &__ctx, __del, __cookie);
    }

    ::omero::model::WellReagentLinkPtr end_linkReagent(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::WellReagentLinkPtr linkReagent(const ::omero::model::ReagentPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_linkReagent(const ::omero::model::ReagentPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addWellReagentLinkToBoth(const ::omero::model::WellReagentLinkPtr& link, bool bothSides)
    {
        addWellReagentLinkToBoth(link, bothSides, 0);
    }
    void addWellReagentLinkToBoth(const ::omero::model::WellReagentLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        addWellReagentLinkToBoth(link, bothSides, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addWellReagentLinkToBoth(const ::omero::model::WellReagentLinkPtr& link, bool bothSides)
    {
        return begin_addWellReagentLinkToBoth(link, bothSides, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addWellReagentLinkToBoth(const ::omero::model::WellReagentLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        return begin_addWellReagentLinkToBoth(link, bothSides, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addWellReagentLinkToBoth(const ::omero::model::WellReagentLinkPtr& link, bool bothSides, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addWellReagentLinkToBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addWellReagentLinkToBoth(const ::omero::model::WellReagentLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addWellReagentLinkToBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addWellReagentLinkToBoth(const ::omero::model::WellReagentLinkPtr& link, bool bothSides, const ::omero::model::Callback_Well_addWellReagentLinkToBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addWellReagentLinkToBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addWellReagentLinkToBoth(const ::omero::model::WellReagentLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_addWellReagentLinkToBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addWellReagentLinkToBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    void end_addWellReagentLinkToBoth(const ::Ice::AsyncResultPtr&);
    
private:

    void addWellReagentLinkToBoth(const ::omero::model::WellReagentLinkPtr&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addWellReagentLinkToBoth(const ::omero::model::WellReagentLinkPtr&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::WellReagentLinksSeq findWellReagentLink(const ::omero::model::ReagentPtr& removal)
    {
        return findWellReagentLink(removal, 0);
    }
    ::omero::model::WellReagentLinksSeq findWellReagentLink(const ::omero::model::ReagentPtr& removal, const ::Ice::Context& __ctx)
    {
        return findWellReagentLink(removal, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_findWellReagentLink(const ::omero::model::ReagentPtr& removal)
    {
        return begin_findWellReagentLink(removal, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findWellReagentLink(const ::omero::model::ReagentPtr& removal, const ::Ice::Context& __ctx)
    {
        return begin_findWellReagentLink(removal, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findWellReagentLink(const ::omero::model::ReagentPtr& removal, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findWellReagentLink(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findWellReagentLink(const ::omero::model::ReagentPtr& removal, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findWellReagentLink(removal, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findWellReagentLink(const ::omero::model::ReagentPtr& removal, const ::omero::model::Callback_Well_findWellReagentLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findWellReagentLink(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findWellReagentLink(const ::omero::model::ReagentPtr& removal, const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_findWellReagentLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findWellReagentLink(removal, &__ctx, __del, __cookie);
    }

    ::omero::model::WellReagentLinksSeq end_findWellReagentLink(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::WellReagentLinksSeq findWellReagentLink(const ::omero::model::ReagentPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_findWellReagentLink(const ::omero::model::ReagentPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unlinkReagent(const ::omero::model::ReagentPtr& removal)
    {
        unlinkReagent(removal, 0);
    }
    void unlinkReagent(const ::omero::model::ReagentPtr& removal, const ::Ice::Context& __ctx)
    {
        unlinkReagent(removal, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_unlinkReagent(const ::omero::model::ReagentPtr& removal)
    {
        return begin_unlinkReagent(removal, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unlinkReagent(const ::omero::model::ReagentPtr& removal, const ::Ice::Context& __ctx)
    {
        return begin_unlinkReagent(removal, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unlinkReagent(const ::omero::model::ReagentPtr& removal, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkReagent(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkReagent(const ::omero::model::ReagentPtr& removal, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkReagent(removal, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkReagent(const ::omero::model::ReagentPtr& removal, const ::omero::model::Callback_Well_unlinkReagentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkReagent(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkReagent(const ::omero::model::ReagentPtr& removal, const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_unlinkReagentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkReagent(removal, &__ctx, __del, __cookie);
    }

    void end_unlinkReagent(const ::Ice::AsyncResultPtr&);
    
private:

    void unlinkReagent(const ::omero::model::ReagentPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unlinkReagent(const ::omero::model::ReagentPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeWellReagentLinkFromBoth(const ::omero::model::WellReagentLinkPtr& link, bool bothSides)
    {
        removeWellReagentLinkFromBoth(link, bothSides, 0);
    }
    void removeWellReagentLinkFromBoth(const ::omero::model::WellReagentLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        removeWellReagentLinkFromBoth(link, bothSides, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removeWellReagentLinkFromBoth(const ::omero::model::WellReagentLinkPtr& link, bool bothSides)
    {
        return begin_removeWellReagentLinkFromBoth(link, bothSides, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeWellReagentLinkFromBoth(const ::omero::model::WellReagentLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        return begin_removeWellReagentLinkFromBoth(link, bothSides, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeWellReagentLinkFromBoth(const ::omero::model::WellReagentLinkPtr& link, bool bothSides, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeWellReagentLinkFromBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeWellReagentLinkFromBoth(const ::omero::model::WellReagentLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeWellReagentLinkFromBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeWellReagentLinkFromBoth(const ::omero::model::WellReagentLinkPtr& link, bool bothSides, const ::omero::model::Callback_Well_removeWellReagentLinkFromBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeWellReagentLinkFromBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeWellReagentLinkFromBoth(const ::omero::model::WellReagentLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_removeWellReagentLinkFromBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeWellReagentLinkFromBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    void end_removeWellReagentLinkFromBoth(const ::Ice::AsyncResultPtr&);
    
private:

    void removeWellReagentLinkFromBoth(const ::omero::model::WellReagentLinkPtr&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeWellReagentLinkFromBoth(const ::omero::model::WellReagentLinkPtr&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::WellLinkedReagentSeq linkedReagentList()
    {
        return linkedReagentList(0);
    }
    ::omero::model::WellLinkedReagentSeq linkedReagentList(const ::Ice::Context& __ctx)
    {
        return linkedReagentList(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_linkedReagentList()
    {
        return begin_linkedReagentList(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkedReagentList(const ::Ice::Context& __ctx)
    {
        return begin_linkedReagentList(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkedReagentList(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedReagentList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedReagentList(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedReagentList(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedReagentList(const ::omero::model::Callback_Well_linkedReagentListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedReagentList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedReagentList(const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_linkedReagentListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedReagentList(&__ctx, __del, __cookie);
    }

    ::omero::model::WellLinkedReagentSeq end_linkedReagentList(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::WellLinkedReagentSeq linkedReagentList(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_linkedReagentList(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getExternalDescription()
    {
        return getExternalDescription(0);
    }
    ::omero::RStringPtr getExternalDescription(const ::Ice::Context& __ctx)
    {
        return getExternalDescription(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getExternalDescription()
    {
        return begin_getExternalDescription(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getExternalDescription(const ::Ice::Context& __ctx)
    {
        return begin_getExternalDescription(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getExternalDescription(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getExternalDescription(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getExternalDescription(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getExternalDescription(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getExternalDescription(const ::omero::model::Callback_Well_getExternalDescriptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getExternalDescription(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getExternalDescription(const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_getExternalDescriptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getExternalDescription(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getExternalDescription(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getExternalDescription(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getExternalDescription(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setExternalDescription(const ::omero::RStringPtr& theExternalDescription)
    {
        setExternalDescription(theExternalDescription, 0);
    }
    void setExternalDescription(const ::omero::RStringPtr& theExternalDescription, const ::Ice::Context& __ctx)
    {
        setExternalDescription(theExternalDescription, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setExternalDescription(const ::omero::RStringPtr& theExternalDescription)
    {
        return begin_setExternalDescription(theExternalDescription, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setExternalDescription(const ::omero::RStringPtr& theExternalDescription, const ::Ice::Context& __ctx)
    {
        return begin_setExternalDescription(theExternalDescription, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setExternalDescription(const ::omero::RStringPtr& theExternalDescription, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setExternalDescription(theExternalDescription, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setExternalDescription(const ::omero::RStringPtr& theExternalDescription, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setExternalDescription(theExternalDescription, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setExternalDescription(const ::omero::RStringPtr& theExternalDescription, const ::omero::model::Callback_Well_setExternalDescriptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setExternalDescription(theExternalDescription, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setExternalDescription(const ::omero::RStringPtr& theExternalDescription, const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_setExternalDescriptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setExternalDescription(theExternalDescription, &__ctx, __del, __cookie);
    }

    void end_setExternalDescription(const ::Ice::AsyncResultPtr&);
    
private:

    void setExternalDescription(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setExternalDescription(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getExternalIdentifier()
    {
        return getExternalIdentifier(0);
    }
    ::omero::RStringPtr getExternalIdentifier(const ::Ice::Context& __ctx)
    {
        return getExternalIdentifier(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getExternalIdentifier()
    {
        return begin_getExternalIdentifier(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getExternalIdentifier(const ::Ice::Context& __ctx)
    {
        return begin_getExternalIdentifier(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getExternalIdentifier(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getExternalIdentifier(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getExternalIdentifier(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getExternalIdentifier(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getExternalIdentifier(const ::omero::model::Callback_Well_getExternalIdentifierPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getExternalIdentifier(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getExternalIdentifier(const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_getExternalIdentifierPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getExternalIdentifier(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getExternalIdentifier(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getExternalIdentifier(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getExternalIdentifier(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setExternalIdentifier(const ::omero::RStringPtr& theExternalIdentifier)
    {
        setExternalIdentifier(theExternalIdentifier, 0);
    }
    void setExternalIdentifier(const ::omero::RStringPtr& theExternalIdentifier, const ::Ice::Context& __ctx)
    {
        setExternalIdentifier(theExternalIdentifier, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setExternalIdentifier(const ::omero::RStringPtr& theExternalIdentifier)
    {
        return begin_setExternalIdentifier(theExternalIdentifier, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setExternalIdentifier(const ::omero::RStringPtr& theExternalIdentifier, const ::Ice::Context& __ctx)
    {
        return begin_setExternalIdentifier(theExternalIdentifier, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setExternalIdentifier(const ::omero::RStringPtr& theExternalIdentifier, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setExternalIdentifier(theExternalIdentifier, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setExternalIdentifier(const ::omero::RStringPtr& theExternalIdentifier, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setExternalIdentifier(theExternalIdentifier, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setExternalIdentifier(const ::omero::RStringPtr& theExternalIdentifier, const ::omero::model::Callback_Well_setExternalIdentifierPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setExternalIdentifier(theExternalIdentifier, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setExternalIdentifier(const ::omero::RStringPtr& theExternalIdentifier, const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_setExternalIdentifierPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setExternalIdentifier(theExternalIdentifier, &__ctx, __del, __cookie);
    }

    void end_setExternalIdentifier(const ::Ice::AsyncResultPtr&);
    
private:

    void setExternalIdentifier(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setExternalIdentifier(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getType()
    {
        return getType(0);
    }
    ::omero::RStringPtr getType(const ::Ice::Context& __ctx)
    {
        return getType(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getType()
    {
        return begin_getType(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getType(const ::Ice::Context& __ctx)
    {
        return begin_getType(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getType(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getType(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getType(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getType(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getType(const ::omero::model::Callback_Well_getTypePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getType(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getType(const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_getTypePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getType(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getType(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getType(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getType(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setType(const ::omero::RStringPtr& theType)
    {
        setType(theType, 0);
    }
    void setType(const ::omero::RStringPtr& theType, const ::Ice::Context& __ctx)
    {
        setType(theType, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setType(const ::omero::RStringPtr& theType)
    {
        return begin_setType(theType, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setType(const ::omero::RStringPtr& theType, const ::Ice::Context& __ctx)
    {
        return begin_setType(theType, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setType(const ::omero::RStringPtr& theType, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setType(theType, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setType(const ::omero::RStringPtr& theType, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setType(theType, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setType(const ::omero::RStringPtr& theType, const ::omero::model::Callback_Well_setTypePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setType(theType, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setType(const ::omero::RStringPtr& theType, const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_setTypePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setType(theType, &__ctx, __del, __cookie);
    }

    void end_setType(const ::Ice::AsyncResultPtr&);
    
private:

    void setType(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setType(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unloadWellSamples()
    {
        unloadWellSamples(0);
    }
    void unloadWellSamples(const ::Ice::Context& __ctx)
    {
        unloadWellSamples(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_unloadWellSamples()
    {
        return begin_unloadWellSamples(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadWellSamples(const ::Ice::Context& __ctx)
    {
        return begin_unloadWellSamples(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadWellSamples(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadWellSamples(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadWellSamples(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadWellSamples(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadWellSamples(const ::omero::model::Callback_Well_unloadWellSamplesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadWellSamples(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadWellSamples(const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_unloadWellSamplesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadWellSamples(&__ctx, __del, __cookie);
    }

    void end_unloadWellSamples(const ::Ice::AsyncResultPtr&);
    
private:

    void unloadWellSamples(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unloadWellSamples(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int sizeOfWellSamples()
    {
        return sizeOfWellSamples(0);
    }
    ::Ice::Int sizeOfWellSamples(const ::Ice::Context& __ctx)
    {
        return sizeOfWellSamples(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_sizeOfWellSamples()
    {
        return begin_sizeOfWellSamples(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfWellSamples(const ::Ice::Context& __ctx)
    {
        return begin_sizeOfWellSamples(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfWellSamples(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfWellSamples(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfWellSamples(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfWellSamples(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfWellSamples(const ::omero::model::Callback_Well_sizeOfWellSamplesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfWellSamples(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfWellSamples(const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_sizeOfWellSamplesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfWellSamples(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_sizeOfWellSamples(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int sizeOfWellSamples(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sizeOfWellSamples(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::WellWellSamplesSeq copyWellSamples()
    {
        return copyWellSamples(0);
    }
    ::omero::model::WellWellSamplesSeq copyWellSamples(const ::Ice::Context& __ctx)
    {
        return copyWellSamples(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_copyWellSamples()
    {
        return begin_copyWellSamples(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyWellSamples(const ::Ice::Context& __ctx)
    {
        return begin_copyWellSamples(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyWellSamples(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyWellSamples(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyWellSamples(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyWellSamples(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyWellSamples(const ::omero::model::Callback_Well_copyWellSamplesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyWellSamples(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyWellSamples(const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_copyWellSamplesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyWellSamples(&__ctx, __del, __cookie);
    }

    ::omero::model::WellWellSamplesSeq end_copyWellSamples(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::WellWellSamplesSeq copyWellSamples(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_copyWellSamples(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addWellSample(const ::omero::model::WellSamplePtr& target)
    {
        addWellSample(target, 0);
    }
    void addWellSample(const ::omero::model::WellSamplePtr& target, const ::Ice::Context& __ctx)
    {
        addWellSample(target, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addWellSample(const ::omero::model::WellSamplePtr& target)
    {
        return begin_addWellSample(target, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addWellSample(const ::omero::model::WellSamplePtr& target, const ::Ice::Context& __ctx)
    {
        return begin_addWellSample(target, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addWellSample(const ::omero::model::WellSamplePtr& target, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addWellSample(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addWellSample(const ::omero::model::WellSamplePtr& target, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addWellSample(target, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addWellSample(const ::omero::model::WellSamplePtr& target, const ::omero::model::Callback_Well_addWellSamplePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addWellSample(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addWellSample(const ::omero::model::WellSamplePtr& target, const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_addWellSamplePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addWellSample(target, &__ctx, __del, __cookie);
    }

    void end_addWellSample(const ::Ice::AsyncResultPtr&);
    
private:

    void addWellSample(const ::omero::model::WellSamplePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addWellSample(const ::omero::model::WellSamplePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addAllWellSampleSet(const ::omero::model::WellWellSamplesSeq& targets)
    {
        addAllWellSampleSet(targets, 0);
    }
    void addAllWellSampleSet(const ::omero::model::WellWellSamplesSeq& targets, const ::Ice::Context& __ctx)
    {
        addAllWellSampleSet(targets, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addAllWellSampleSet(const ::omero::model::WellWellSamplesSeq& targets)
    {
        return begin_addAllWellSampleSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllWellSampleSet(const ::omero::model::WellWellSamplesSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_addAllWellSampleSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllWellSampleSet(const ::omero::model::WellWellSamplesSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllWellSampleSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllWellSampleSet(const ::omero::model::WellWellSamplesSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllWellSampleSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllWellSampleSet(const ::omero::model::WellWellSamplesSeq& targets, const ::omero::model::Callback_Well_addAllWellSampleSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllWellSampleSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllWellSampleSet(const ::omero::model::WellWellSamplesSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_addAllWellSampleSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllWellSampleSet(targets, &__ctx, __del, __cookie);
    }

    void end_addAllWellSampleSet(const ::Ice::AsyncResultPtr&);
    
private:

    void addAllWellSampleSet(const ::omero::model::WellWellSamplesSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addAllWellSampleSet(const ::omero::model::WellWellSamplesSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeWellSample(const ::omero::model::WellSamplePtr& theTarget)
    {
        removeWellSample(theTarget, 0);
    }
    void removeWellSample(const ::omero::model::WellSamplePtr& theTarget, const ::Ice::Context& __ctx)
    {
        removeWellSample(theTarget, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removeWellSample(const ::omero::model::WellSamplePtr& theTarget)
    {
        return begin_removeWellSample(theTarget, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeWellSample(const ::omero::model::WellSamplePtr& theTarget, const ::Ice::Context& __ctx)
    {
        return begin_removeWellSample(theTarget, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeWellSample(const ::omero::model::WellSamplePtr& theTarget, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeWellSample(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeWellSample(const ::omero::model::WellSamplePtr& theTarget, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeWellSample(theTarget, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeWellSample(const ::omero::model::WellSamplePtr& theTarget, const ::omero::model::Callback_Well_removeWellSamplePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeWellSample(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeWellSample(const ::omero::model::WellSamplePtr& theTarget, const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_removeWellSamplePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeWellSample(theTarget, &__ctx, __del, __cookie);
    }

    void end_removeWellSample(const ::Ice::AsyncResultPtr&);
    
private:

    void removeWellSample(const ::omero::model::WellSamplePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeWellSample(const ::omero::model::WellSamplePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeAllWellSampleSet(const ::omero::model::WellWellSamplesSeq& targets)
    {
        removeAllWellSampleSet(targets, 0);
    }
    void removeAllWellSampleSet(const ::omero::model::WellWellSamplesSeq& targets, const ::Ice::Context& __ctx)
    {
        removeAllWellSampleSet(targets, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removeAllWellSampleSet(const ::omero::model::WellWellSamplesSeq& targets)
    {
        return begin_removeAllWellSampleSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllWellSampleSet(const ::omero::model::WellWellSamplesSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_removeAllWellSampleSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllWellSampleSet(const ::omero::model::WellWellSamplesSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllWellSampleSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllWellSampleSet(const ::omero::model::WellWellSamplesSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllWellSampleSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllWellSampleSet(const ::omero::model::WellWellSamplesSeq& targets, const ::omero::model::Callback_Well_removeAllWellSampleSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllWellSampleSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllWellSampleSet(const ::omero::model::WellWellSamplesSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_removeAllWellSampleSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllWellSampleSet(targets, &__ctx, __del, __cookie);
    }

    void end_removeAllWellSampleSet(const ::Ice::AsyncResultPtr&);
    
private:

    void removeAllWellSampleSet(const ::omero::model::WellWellSamplesSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeAllWellSampleSet(const ::omero::model::WellWellSamplesSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void clearWellSamples()
    {
        clearWellSamples(0);
    }
    void clearWellSamples(const ::Ice::Context& __ctx)
    {
        clearWellSamples(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_clearWellSamples()
    {
        return begin_clearWellSamples(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearWellSamples(const ::Ice::Context& __ctx)
    {
        return begin_clearWellSamples(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearWellSamples(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearWellSamples(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearWellSamples(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearWellSamples(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearWellSamples(const ::omero::model::Callback_Well_clearWellSamplesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearWellSamples(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearWellSamples(const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_clearWellSamplesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearWellSamples(&__ctx, __del, __cookie);
    }

    void end_clearWellSamples(const ::Ice::AsyncResultPtr&);
    
private:

    void clearWellSamples(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_clearWellSamples(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reloadWellSamples(const ::omero::model::WellPtr& toCopy)
    {
        reloadWellSamples(toCopy, 0);
    }
    void reloadWellSamples(const ::omero::model::WellPtr& toCopy, const ::Ice::Context& __ctx)
    {
        reloadWellSamples(toCopy, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_reloadWellSamples(const ::omero::model::WellPtr& toCopy)
    {
        return begin_reloadWellSamples(toCopy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadWellSamples(const ::omero::model::WellPtr& toCopy, const ::Ice::Context& __ctx)
    {
        return begin_reloadWellSamples(toCopy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadWellSamples(const ::omero::model::WellPtr& toCopy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadWellSamples(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadWellSamples(const ::omero::model::WellPtr& toCopy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadWellSamples(toCopy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadWellSamples(const ::omero::model::WellPtr& toCopy, const ::omero::model::Callback_Well_reloadWellSamplesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadWellSamples(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadWellSamples(const ::omero::model::WellPtr& toCopy, const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_reloadWellSamplesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadWellSamples(toCopy, &__ctx, __del, __cookie);
    }

    void end_reloadWellSamples(const ::Ice::AsyncResultPtr&);
    
private:

    void reloadWellSamples(const ::omero::model::WellPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reloadWellSamples(const ::omero::model::WellPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::WellSamplePtr getWellSample(::Ice::Int index)
    {
        return getWellSample(index, 0);
    }
    ::omero::model::WellSamplePtr getWellSample(::Ice::Int index, const ::Ice::Context& __ctx)
    {
        return getWellSample(index, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_getWellSample(::Ice::Int index)
    {
        return begin_getWellSample(index, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getWellSample(::Ice::Int index, const ::Ice::Context& __ctx)
    {
        return begin_getWellSample(index, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getWellSample(::Ice::Int index, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getWellSample(index, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getWellSample(::Ice::Int index, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getWellSample(index, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getWellSample(::Ice::Int index, const ::omero::model::Callback_Well_getWellSamplePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getWellSample(index, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getWellSample(::Ice::Int index, const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_getWellSamplePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getWellSample(index, &__ctx, __del, __cookie);
    }

    ::omero::model::WellSamplePtr end_getWellSample(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::WellSamplePtr getWellSample(::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getWellSample(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::WellSamplePtr setWellSample(::Ice::Int index, const ::omero::model::WellSamplePtr& theElement)
    {
        return setWellSample(index, theElement, 0);
    }
    ::omero::model::WellSamplePtr setWellSample(::Ice::Int index, const ::omero::model::WellSamplePtr& theElement, const ::Ice::Context& __ctx)
    {
        return setWellSample(index, theElement, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setWellSample(::Ice::Int index, const ::omero::model::WellSamplePtr& theElement)
    {
        return begin_setWellSample(index, theElement, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setWellSample(::Ice::Int index, const ::omero::model::WellSamplePtr& theElement, const ::Ice::Context& __ctx)
    {
        return begin_setWellSample(index, theElement, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setWellSample(::Ice::Int index, const ::omero::model::WellSamplePtr& theElement, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setWellSample(index, theElement, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setWellSample(::Ice::Int index, const ::omero::model::WellSamplePtr& theElement, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setWellSample(index, theElement, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setWellSample(::Ice::Int index, const ::omero::model::WellSamplePtr& theElement, const ::omero::model::Callback_Well_setWellSamplePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setWellSample(index, theElement, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setWellSample(::Ice::Int index, const ::omero::model::WellSamplePtr& theElement, const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_setWellSamplePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setWellSample(index, theElement, &__ctx, __del, __cookie);
    }

    ::omero::model::WellSamplePtr end_setWellSample(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::WellSamplePtr setWellSample(::Ice::Int, const ::omero::model::WellSamplePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setWellSample(::Ice::Int, const ::omero::model::WellSamplePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::WellSamplePtr getPrimaryWellSample()
    {
        return getPrimaryWellSample(0);
    }
    ::omero::model::WellSamplePtr getPrimaryWellSample(const ::Ice::Context& __ctx)
    {
        return getPrimaryWellSample(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getPrimaryWellSample()
    {
        return begin_getPrimaryWellSample(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPrimaryWellSample(const ::Ice::Context& __ctx)
    {
        return begin_getPrimaryWellSample(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPrimaryWellSample(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPrimaryWellSample(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPrimaryWellSample(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPrimaryWellSample(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPrimaryWellSample(const ::omero::model::Callback_Well_getPrimaryWellSamplePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPrimaryWellSample(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPrimaryWellSample(const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_getPrimaryWellSamplePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPrimaryWellSample(&__ctx, __del, __cookie);
    }

    ::omero::model::WellSamplePtr end_getPrimaryWellSample(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::WellSamplePtr getPrimaryWellSample(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getPrimaryWellSample(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::WellSamplePtr setPrimaryWellSample(const ::omero::model::WellSamplePtr& theElement)
    {
        return setPrimaryWellSample(theElement, 0);
    }
    ::omero::model::WellSamplePtr setPrimaryWellSample(const ::omero::model::WellSamplePtr& theElement, const ::Ice::Context& __ctx)
    {
        return setPrimaryWellSample(theElement, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setPrimaryWellSample(const ::omero::model::WellSamplePtr& theElement)
    {
        return begin_setPrimaryWellSample(theElement, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPrimaryWellSample(const ::omero::model::WellSamplePtr& theElement, const ::Ice::Context& __ctx)
    {
        return begin_setPrimaryWellSample(theElement, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPrimaryWellSample(const ::omero::model::WellSamplePtr& theElement, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPrimaryWellSample(theElement, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPrimaryWellSample(const ::omero::model::WellSamplePtr& theElement, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPrimaryWellSample(theElement, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPrimaryWellSample(const ::omero::model::WellSamplePtr& theElement, const ::omero::model::Callback_Well_setPrimaryWellSamplePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPrimaryWellSample(theElement, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPrimaryWellSample(const ::omero::model::WellSamplePtr& theElement, const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_setPrimaryWellSamplePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPrimaryWellSample(theElement, &__ctx, __del, __cookie);
    }

    ::omero::model::WellSamplePtr end_setPrimaryWellSample(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::WellSamplePtr setPrimaryWellSample(const ::omero::model::WellSamplePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setPrimaryWellSample(const ::omero::model::WellSamplePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::PlatePtr getPlate()
    {
        return getPlate(0);
    }
    ::omero::model::PlatePtr getPlate(const ::Ice::Context& __ctx)
    {
        return getPlate(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getPlate()
    {
        return begin_getPlate(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPlate(const ::Ice::Context& __ctx)
    {
        return begin_getPlate(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPlate(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPlate(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPlate(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPlate(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPlate(const ::omero::model::Callback_Well_getPlatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPlate(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPlate(const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_getPlatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPlate(&__ctx, __del, __cookie);
    }

    ::omero::model::PlatePtr end_getPlate(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::PlatePtr getPlate(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getPlate(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setPlate(const ::omero::model::PlatePtr& thePlate)
    {
        setPlate(thePlate, 0);
    }
    void setPlate(const ::omero::model::PlatePtr& thePlate, const ::Ice::Context& __ctx)
    {
        setPlate(thePlate, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setPlate(const ::omero::model::PlatePtr& thePlate)
    {
        return begin_setPlate(thePlate, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPlate(const ::omero::model::PlatePtr& thePlate, const ::Ice::Context& __ctx)
    {
        return begin_setPlate(thePlate, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPlate(const ::omero::model::PlatePtr& thePlate, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPlate(thePlate, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPlate(const ::omero::model::PlatePtr& thePlate, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPlate(thePlate, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPlate(const ::omero::model::PlatePtr& thePlate, const ::omero::model::Callback_Well_setPlatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPlate(thePlate, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPlate(const ::omero::model::PlatePtr& thePlate, const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_setPlatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPlate(thePlate, &__ctx, __del, __cookie);
    }

    void end_setPlate(const ::Ice::AsyncResultPtr&);
    
private:

    void setPlate(const ::omero::model::PlatePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setPlate(const ::omero::model::PlatePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unloadAnnotationLinks()
    {
        unloadAnnotationLinks(0);
    }
    void unloadAnnotationLinks(const ::Ice::Context& __ctx)
    {
        unloadAnnotationLinks(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks()
    {
        return begin_unloadAnnotationLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return begin_unloadAnnotationLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::omero::model::Callback_Well_unloadAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_unloadAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadAnnotationLinks(&__ctx, __del, __cookie);
    }

    void end_unloadAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    void unloadAnnotationLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int sizeOfAnnotationLinks()
    {
        return sizeOfAnnotationLinks(0);
    }
    ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return sizeOfAnnotationLinks(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks()
    {
        return begin_sizeOfAnnotationLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return begin_sizeOfAnnotationLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::omero::model::Callback_Well_sizeOfAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_sizeOfAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_sizeOfAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::WellAnnotationLinksSeq copyAnnotationLinks()
    {
        return copyAnnotationLinks(0);
    }
    ::omero::model::WellAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return copyAnnotationLinks(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks()
    {
        return begin_copyAnnotationLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return begin_copyAnnotationLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::omero::model::Callback_Well_copyAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_copyAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::omero::model::WellAnnotationLinksSeq end_copyAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::WellAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addWellAnnotationLink(const ::omero::model::WellAnnotationLinkPtr& target)
    {
        addWellAnnotationLink(target, 0);
    }
    void addWellAnnotationLink(const ::omero::model::WellAnnotationLinkPtr& target, const ::Ice::Context& __ctx)
    {
        addWellAnnotationLink(target, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addWellAnnotationLink(const ::omero::model::WellAnnotationLinkPtr& target)
    {
        return begin_addWellAnnotationLink(target, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addWellAnnotationLink(const ::omero::model::WellAnnotationLinkPtr& target, const ::Ice::Context& __ctx)
    {
        return begin_addWellAnnotationLink(target, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addWellAnnotationLink(const ::omero::model::WellAnnotationLinkPtr& target, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addWellAnnotationLink(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addWellAnnotationLink(const ::omero::model::WellAnnotationLinkPtr& target, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addWellAnnotationLink(target, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addWellAnnotationLink(const ::omero::model::WellAnnotationLinkPtr& target, const ::omero::model::Callback_Well_addWellAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addWellAnnotationLink(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addWellAnnotationLink(const ::omero::model::WellAnnotationLinkPtr& target, const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_addWellAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addWellAnnotationLink(target, &__ctx, __del, __cookie);
    }

    void end_addWellAnnotationLink(const ::Ice::AsyncResultPtr&);
    
private:

    void addWellAnnotationLink(const ::omero::model::WellAnnotationLinkPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addWellAnnotationLink(const ::omero::model::WellAnnotationLinkPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addAllWellAnnotationLinkSet(const ::omero::model::WellAnnotationLinksSeq& targets)
    {
        addAllWellAnnotationLinkSet(targets, 0);
    }
    void addAllWellAnnotationLinkSet(const ::omero::model::WellAnnotationLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        addAllWellAnnotationLinkSet(targets, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addAllWellAnnotationLinkSet(const ::omero::model::WellAnnotationLinksSeq& targets)
    {
        return begin_addAllWellAnnotationLinkSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllWellAnnotationLinkSet(const ::omero::model::WellAnnotationLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_addAllWellAnnotationLinkSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllWellAnnotationLinkSet(const ::omero::model::WellAnnotationLinksSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllWellAnnotationLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllWellAnnotationLinkSet(const ::omero::model::WellAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllWellAnnotationLinkSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllWellAnnotationLinkSet(const ::omero::model::WellAnnotationLinksSeq& targets, const ::omero::model::Callback_Well_addAllWellAnnotationLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllWellAnnotationLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllWellAnnotationLinkSet(const ::omero::model::WellAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_addAllWellAnnotationLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllWellAnnotationLinkSet(targets, &__ctx, __del, __cookie);
    }

    void end_addAllWellAnnotationLinkSet(const ::Ice::AsyncResultPtr&);
    
private:

    void addAllWellAnnotationLinkSet(const ::omero::model::WellAnnotationLinksSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addAllWellAnnotationLinkSet(const ::omero::model::WellAnnotationLinksSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeWellAnnotationLink(const ::omero::model::WellAnnotationLinkPtr& theTarget)
    {
        removeWellAnnotationLink(theTarget, 0);
    }
    void removeWellAnnotationLink(const ::omero::model::WellAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx)
    {
        removeWellAnnotationLink(theTarget, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removeWellAnnotationLink(const ::omero::model::WellAnnotationLinkPtr& theTarget)
    {
        return begin_removeWellAnnotationLink(theTarget, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeWellAnnotationLink(const ::omero::model::WellAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx)
    {
        return begin_removeWellAnnotationLink(theTarget, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeWellAnnotationLink(const ::omero::model::WellAnnotationLinkPtr& theTarget, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeWellAnnotationLink(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeWellAnnotationLink(const ::omero::model::WellAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeWellAnnotationLink(theTarget, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeWellAnnotationLink(const ::omero::model::WellAnnotationLinkPtr& theTarget, const ::omero::model::Callback_Well_removeWellAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeWellAnnotationLink(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeWellAnnotationLink(const ::omero::model::WellAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_removeWellAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeWellAnnotationLink(theTarget, &__ctx, __del, __cookie);
    }

    void end_removeWellAnnotationLink(const ::Ice::AsyncResultPtr&);
    
private:

    void removeWellAnnotationLink(const ::omero::model::WellAnnotationLinkPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeWellAnnotationLink(const ::omero::model::WellAnnotationLinkPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeAllWellAnnotationLinkSet(const ::omero::model::WellAnnotationLinksSeq& targets)
    {
        removeAllWellAnnotationLinkSet(targets, 0);
    }
    void removeAllWellAnnotationLinkSet(const ::omero::model::WellAnnotationLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        removeAllWellAnnotationLinkSet(targets, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removeAllWellAnnotationLinkSet(const ::omero::model::WellAnnotationLinksSeq& targets)
    {
        return begin_removeAllWellAnnotationLinkSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllWellAnnotationLinkSet(const ::omero::model::WellAnnotationLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_removeAllWellAnnotationLinkSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllWellAnnotationLinkSet(const ::omero::model::WellAnnotationLinksSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllWellAnnotationLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllWellAnnotationLinkSet(const ::omero::model::WellAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllWellAnnotationLinkSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllWellAnnotationLinkSet(const ::omero::model::WellAnnotationLinksSeq& targets, const ::omero::model::Callback_Well_removeAllWellAnnotationLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllWellAnnotationLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllWellAnnotationLinkSet(const ::omero::model::WellAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_removeAllWellAnnotationLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllWellAnnotationLinkSet(targets, &__ctx, __del, __cookie);
    }

    void end_removeAllWellAnnotationLinkSet(const ::Ice::AsyncResultPtr&);
    
private:

    void removeAllWellAnnotationLinkSet(const ::omero::model::WellAnnotationLinksSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeAllWellAnnotationLinkSet(const ::omero::model::WellAnnotationLinksSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void clearAnnotationLinks()
    {
        clearAnnotationLinks(0);
    }
    void clearAnnotationLinks(const ::Ice::Context& __ctx)
    {
        clearAnnotationLinks(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks()
    {
        return begin_clearAnnotationLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return begin_clearAnnotationLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::omero::model::Callback_Well_clearAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_clearAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearAnnotationLinks(&__ctx, __del, __cookie);
    }

    void end_clearAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    void clearAnnotationLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reloadAnnotationLinks(const ::omero::model::WellPtr& toCopy)
    {
        reloadAnnotationLinks(toCopy, 0);
    }
    void reloadAnnotationLinks(const ::omero::model::WellPtr& toCopy, const ::Ice::Context& __ctx)
    {
        reloadAnnotationLinks(toCopy, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::WellPtr& toCopy)
    {
        return begin_reloadAnnotationLinks(toCopy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::WellPtr& toCopy, const ::Ice::Context& __ctx)
    {
        return begin_reloadAnnotationLinks(toCopy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::WellPtr& toCopy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadAnnotationLinks(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::WellPtr& toCopy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadAnnotationLinks(toCopy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::WellPtr& toCopy, const ::omero::model::Callback_Well_reloadAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadAnnotationLinks(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::WellPtr& toCopy, const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_reloadAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadAnnotationLinks(toCopy, &__ctx, __del, __cookie);
    }

    void end_reloadAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    void reloadAnnotationLinks(const ::omero::model::WellPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::WellPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::sys::CountMap getAnnotationLinksCountPerOwner()
    {
        return getAnnotationLinksCountPerOwner(0);
    }
    ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx)
    {
        return getAnnotationLinksCountPerOwner(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner()
    {
        return begin_getAnnotationLinksCountPerOwner(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx)
    {
        return begin_getAnnotationLinksCountPerOwner(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAnnotationLinksCountPerOwner(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAnnotationLinksCountPerOwner(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::omero::model::Callback_Well_getAnnotationLinksCountPerOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAnnotationLinksCountPerOwner(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_getAnnotationLinksCountPerOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAnnotationLinksCountPerOwner(&__ctx, __del, __cookie);
    }

    ::omero::sys::CountMap end_getAnnotationLinksCountPerOwner(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::WellAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr& addition)
    {
        return linkAnnotation(addition, 0);
    }
    ::omero::model::WellAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx)
    {
        return linkAnnotation(addition, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition)
    {
        return begin_linkAnnotation(addition, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx)
    {
        return begin_linkAnnotation(addition, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkAnnotation(addition, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkAnnotation(addition, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::omero::model::Callback_Well_linkAnnotationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkAnnotation(addition, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_linkAnnotationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkAnnotation(addition, &__ctx, __del, __cookie);
    }

    ::omero::model::WellAnnotationLinkPtr end_linkAnnotation(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::WellAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addWellAnnotationLinkToBoth(const ::omero::model::WellAnnotationLinkPtr& link, bool bothSides)
    {
        addWellAnnotationLinkToBoth(link, bothSides, 0);
    }
    void addWellAnnotationLinkToBoth(const ::omero::model::WellAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        addWellAnnotationLinkToBoth(link, bothSides, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addWellAnnotationLinkToBoth(const ::omero::model::WellAnnotationLinkPtr& link, bool bothSides)
    {
        return begin_addWellAnnotationLinkToBoth(link, bothSides, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addWellAnnotationLinkToBoth(const ::omero::model::WellAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        return begin_addWellAnnotationLinkToBoth(link, bothSides, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addWellAnnotationLinkToBoth(const ::omero::model::WellAnnotationLinkPtr& link, bool bothSides, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addWellAnnotationLinkToBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addWellAnnotationLinkToBoth(const ::omero::model::WellAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addWellAnnotationLinkToBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addWellAnnotationLinkToBoth(const ::omero::model::WellAnnotationLinkPtr& link, bool bothSides, const ::omero::model::Callback_Well_addWellAnnotationLinkToBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addWellAnnotationLinkToBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addWellAnnotationLinkToBoth(const ::omero::model::WellAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_addWellAnnotationLinkToBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addWellAnnotationLinkToBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    void end_addWellAnnotationLinkToBoth(const ::Ice::AsyncResultPtr&);
    
private:

    void addWellAnnotationLinkToBoth(const ::omero::model::WellAnnotationLinkPtr&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addWellAnnotationLinkToBoth(const ::omero::model::WellAnnotationLinkPtr&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::WellAnnotationLinksSeq findWellAnnotationLink(const ::omero::model::AnnotationPtr& removal)
    {
        return findWellAnnotationLink(removal, 0);
    }
    ::omero::model::WellAnnotationLinksSeq findWellAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx)
    {
        return findWellAnnotationLink(removal, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_findWellAnnotationLink(const ::omero::model::AnnotationPtr& removal)
    {
        return begin_findWellAnnotationLink(removal, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findWellAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx)
    {
        return begin_findWellAnnotationLink(removal, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findWellAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findWellAnnotationLink(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findWellAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findWellAnnotationLink(removal, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findWellAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::omero::model::Callback_Well_findWellAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findWellAnnotationLink(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findWellAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_findWellAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findWellAnnotationLink(removal, &__ctx, __del, __cookie);
    }

    ::omero::model::WellAnnotationLinksSeq end_findWellAnnotationLink(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::WellAnnotationLinksSeq findWellAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_findWellAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unlinkAnnotation(const ::omero::model::AnnotationPtr& removal)
    {
        unlinkAnnotation(removal, 0);
    }
    void unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx)
    {
        unlinkAnnotation(removal, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal)
    {
        return begin_unlinkAnnotation(removal, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx)
    {
        return begin_unlinkAnnotation(removal, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkAnnotation(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkAnnotation(removal, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::omero::model::Callback_Well_unlinkAnnotationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkAnnotation(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_unlinkAnnotationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkAnnotation(removal, &__ctx, __del, __cookie);
    }

    void end_unlinkAnnotation(const ::Ice::AsyncResultPtr&);
    
private:

    void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeWellAnnotationLinkFromBoth(const ::omero::model::WellAnnotationLinkPtr& link, bool bothSides)
    {
        removeWellAnnotationLinkFromBoth(link, bothSides, 0);
    }
    void removeWellAnnotationLinkFromBoth(const ::omero::model::WellAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        removeWellAnnotationLinkFromBoth(link, bothSides, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removeWellAnnotationLinkFromBoth(const ::omero::model::WellAnnotationLinkPtr& link, bool bothSides)
    {
        return begin_removeWellAnnotationLinkFromBoth(link, bothSides, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeWellAnnotationLinkFromBoth(const ::omero::model::WellAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        return begin_removeWellAnnotationLinkFromBoth(link, bothSides, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeWellAnnotationLinkFromBoth(const ::omero::model::WellAnnotationLinkPtr& link, bool bothSides, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeWellAnnotationLinkFromBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeWellAnnotationLinkFromBoth(const ::omero::model::WellAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeWellAnnotationLinkFromBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeWellAnnotationLinkFromBoth(const ::omero::model::WellAnnotationLinkPtr& link, bool bothSides, const ::omero::model::Callback_Well_removeWellAnnotationLinkFromBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeWellAnnotationLinkFromBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeWellAnnotationLinkFromBoth(const ::omero::model::WellAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_removeWellAnnotationLinkFromBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeWellAnnotationLinkFromBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    void end_removeWellAnnotationLinkFromBoth(const ::Ice::AsyncResultPtr&);
    
private:

    void removeWellAnnotationLinkFromBoth(const ::omero::model::WellAnnotationLinkPtr&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeWellAnnotationLinkFromBoth(const ::omero::model::WellAnnotationLinkPtr&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::WellLinkedAnnotationSeq linkedAnnotationList()
    {
        return linkedAnnotationList(0);
    }
    ::omero::model::WellLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context& __ctx)
    {
        return linkedAnnotationList(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList()
    {
        return begin_linkedAnnotationList(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::Context& __ctx)
    {
        return begin_linkedAnnotationList(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedAnnotationList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedAnnotationList(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::omero::model::Callback_Well_linkedAnnotationListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedAnnotationList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::Context& __ctx, const ::omero::model::Callback_Well_linkedAnnotationListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedAnnotationList(&__ctx, __del, __cookie);
    }

    ::omero::model::WellLinkedAnnotationSeq end_linkedAnnotationList(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::WellLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Well> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Well*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<Well*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Well> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Well*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<Well*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Well> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Well*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<Well*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Well> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Well*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<Well*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Well> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Well*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<Well*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Well> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Well*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<Well*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Well> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Well*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<Well*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Well> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Well*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<Well*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Well> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Well*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<Well*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Well> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Well*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<Well*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Well> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Well*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<Well*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Well> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Well*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<Well*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Well> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Well*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<Well*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Well> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Well*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<Well*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Well> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Well*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<Well*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Well> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Well*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<Well*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Well> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Well*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<Well*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Well> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Well*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<Well*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Well> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Well*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<Well*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

namespace IceDelegate
{

namespace omero
{

namespace model
{

class Well : virtual public ::IceDelegate::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*) = 0;

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::RStringPtr getStatus(const ::Ice::Context*) = 0;

    virtual void setStatus(const ::omero::RStringPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::RIntPtr getColumn(const ::Ice::Context*) = 0;

    virtual void setColumn(const ::omero::RIntPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::RIntPtr getRow(const ::Ice::Context*) = 0;

    virtual void setRow(const ::omero::RIntPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::RIntPtr getRed(const ::Ice::Context*) = 0;

    virtual void setRed(const ::omero::RIntPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::RIntPtr getGreen(const ::Ice::Context*) = 0;

    virtual void setGreen(const ::omero::RIntPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::RIntPtr getBlue(const ::Ice::Context*) = 0;

    virtual void setBlue(const ::omero::RIntPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::RIntPtr getAlpha(const ::Ice::Context*) = 0;

    virtual void setAlpha(const ::omero::RIntPtr&, const ::Ice::Context*) = 0;

    virtual void unloadReagentLinks(const ::Ice::Context*) = 0;

    virtual ::Ice::Int sizeOfReagentLinks(const ::Ice::Context*) = 0;

    virtual ::omero::model::WellReagentLinksSeq copyReagentLinks(const ::Ice::Context*) = 0;

    virtual void addWellReagentLink(const ::omero::model::WellReagentLinkPtr&, const ::Ice::Context*) = 0;

    virtual void addAllWellReagentLinkSet(const ::omero::model::WellReagentLinksSeq&, const ::Ice::Context*) = 0;

    virtual void removeWellReagentLink(const ::omero::model::WellReagentLinkPtr&, const ::Ice::Context*) = 0;

    virtual void removeAllWellReagentLinkSet(const ::omero::model::WellReagentLinksSeq&, const ::Ice::Context*) = 0;

    virtual void clearReagentLinks(const ::Ice::Context*) = 0;

    virtual void reloadReagentLinks(const ::omero::model::WellPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::sys::CountMap getReagentLinksCountPerOwner(const ::Ice::Context*) = 0;

    virtual ::omero::model::WellReagentLinkPtr linkReagent(const ::omero::model::ReagentPtr&, const ::Ice::Context*) = 0;

    virtual void addWellReagentLinkToBoth(const ::omero::model::WellReagentLinkPtr&, bool, const ::Ice::Context*) = 0;

    virtual ::omero::model::WellReagentLinksSeq findWellReagentLink(const ::omero::model::ReagentPtr&, const ::Ice::Context*) = 0;

    virtual void unlinkReagent(const ::omero::model::ReagentPtr&, const ::Ice::Context*) = 0;

    virtual void removeWellReagentLinkFromBoth(const ::omero::model::WellReagentLinkPtr&, bool, const ::Ice::Context*) = 0;

    virtual ::omero::model::WellLinkedReagentSeq linkedReagentList(const ::Ice::Context*) = 0;

    virtual ::omero::RStringPtr getExternalDescription(const ::Ice::Context*) = 0;

    virtual void setExternalDescription(const ::omero::RStringPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::RStringPtr getExternalIdentifier(const ::Ice::Context*) = 0;

    virtual void setExternalIdentifier(const ::omero::RStringPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::RStringPtr getType(const ::Ice::Context*) = 0;

    virtual void setType(const ::omero::RStringPtr&, const ::Ice::Context*) = 0;

    virtual void unloadWellSamples(const ::Ice::Context*) = 0;

    virtual ::Ice::Int sizeOfWellSamples(const ::Ice::Context*) = 0;

    virtual ::omero::model::WellWellSamplesSeq copyWellSamples(const ::Ice::Context*) = 0;

    virtual void addWellSample(const ::omero::model::WellSamplePtr&, const ::Ice::Context*) = 0;

    virtual void addAllWellSampleSet(const ::omero::model::WellWellSamplesSeq&, const ::Ice::Context*) = 0;

    virtual void removeWellSample(const ::omero::model::WellSamplePtr&, const ::Ice::Context*) = 0;

    virtual void removeAllWellSampleSet(const ::omero::model::WellWellSamplesSeq&, const ::Ice::Context*) = 0;

    virtual void clearWellSamples(const ::Ice::Context*) = 0;

    virtual void reloadWellSamples(const ::omero::model::WellPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::model::WellSamplePtr getWellSample(::Ice::Int, const ::Ice::Context*) = 0;

    virtual ::omero::model::WellSamplePtr setWellSample(::Ice::Int, const ::omero::model::WellSamplePtr&, const ::Ice::Context*) = 0;

    virtual ::omero::model::WellSamplePtr getPrimaryWellSample(const ::Ice::Context*) = 0;

    virtual ::omero::model::WellSamplePtr setPrimaryWellSample(const ::omero::model::WellSamplePtr&, const ::Ice::Context*) = 0;

    virtual ::omero::model::PlatePtr getPlate(const ::Ice::Context*) = 0;

    virtual void setPlate(const ::omero::model::PlatePtr&, const ::Ice::Context*) = 0;

    virtual void unloadAnnotationLinks(const ::Ice::Context*) = 0;

    virtual ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context*) = 0;

    virtual ::omero::model::WellAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context*) = 0;

    virtual void addWellAnnotationLink(const ::omero::model::WellAnnotationLinkPtr&, const ::Ice::Context*) = 0;

    virtual void addAllWellAnnotationLinkSet(const ::omero::model::WellAnnotationLinksSeq&, const ::Ice::Context*) = 0;

    virtual void removeWellAnnotationLink(const ::omero::model::WellAnnotationLinkPtr&, const ::Ice::Context*) = 0;

    virtual void removeAllWellAnnotationLinkSet(const ::omero::model::WellAnnotationLinksSeq&, const ::Ice::Context*) = 0;

    virtual void clearAnnotationLinks(const ::Ice::Context*) = 0;

    virtual void reloadAnnotationLinks(const ::omero::model::WellPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context*) = 0;

    virtual ::omero::model::WellAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*) = 0;

    virtual void addWellAnnotationLinkToBoth(const ::omero::model::WellAnnotationLinkPtr&, bool, const ::Ice::Context*) = 0;

    virtual ::omero::model::WellAnnotationLinksSeq findWellAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*) = 0;

    virtual void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*) = 0;

    virtual void removeWellAnnotationLinkFromBoth(const ::omero::model::WellAnnotationLinkPtr&, bool, const ::Ice::Context*) = 0;

    virtual ::omero::model::WellLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context*) = 0;
};

}

}

}

namespace IceDelegateM
{

namespace omero
{

namespace model
{

class Well : virtual public ::IceDelegate::omero::model::Well,
             virtual public ::IceDelegateM::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::RStringPtr getStatus(const ::Ice::Context*);

    virtual void setStatus(const ::omero::RStringPtr&, const ::Ice::Context*);

    virtual ::omero::RIntPtr getColumn(const ::Ice::Context*);

    virtual void setColumn(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::RIntPtr getRow(const ::Ice::Context*);

    virtual void setRow(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::RIntPtr getRed(const ::Ice::Context*);

    virtual void setRed(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::RIntPtr getGreen(const ::Ice::Context*);

    virtual void setGreen(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::RIntPtr getBlue(const ::Ice::Context*);

    virtual void setBlue(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::RIntPtr getAlpha(const ::Ice::Context*);

    virtual void setAlpha(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual void unloadReagentLinks(const ::Ice::Context*);

    virtual ::Ice::Int sizeOfReagentLinks(const ::Ice::Context*);

    virtual ::omero::model::WellReagentLinksSeq copyReagentLinks(const ::Ice::Context*);

    virtual void addWellReagentLink(const ::omero::model::WellReagentLinkPtr&, const ::Ice::Context*);

    virtual void addAllWellReagentLinkSet(const ::omero::model::WellReagentLinksSeq&, const ::Ice::Context*);

    virtual void removeWellReagentLink(const ::omero::model::WellReagentLinkPtr&, const ::Ice::Context*);

    virtual void removeAllWellReagentLinkSet(const ::omero::model::WellReagentLinksSeq&, const ::Ice::Context*);

    virtual void clearReagentLinks(const ::Ice::Context*);

    virtual void reloadReagentLinks(const ::omero::model::WellPtr&, const ::Ice::Context*);

    virtual ::omero::sys::CountMap getReagentLinksCountPerOwner(const ::Ice::Context*);

    virtual ::omero::model::WellReagentLinkPtr linkReagent(const ::omero::model::ReagentPtr&, const ::Ice::Context*);

    virtual void addWellReagentLinkToBoth(const ::omero::model::WellReagentLinkPtr&, bool, const ::Ice::Context*);

    virtual ::omero::model::WellReagentLinksSeq findWellReagentLink(const ::omero::model::ReagentPtr&, const ::Ice::Context*);

    virtual void unlinkReagent(const ::omero::model::ReagentPtr&, const ::Ice::Context*);

    virtual void removeWellReagentLinkFromBoth(const ::omero::model::WellReagentLinkPtr&, bool, const ::Ice::Context*);

    virtual ::omero::model::WellLinkedReagentSeq linkedReagentList(const ::Ice::Context*);

    virtual ::omero::RStringPtr getExternalDescription(const ::Ice::Context*);

    virtual void setExternalDescription(const ::omero::RStringPtr&, const ::Ice::Context*);

    virtual ::omero::RStringPtr getExternalIdentifier(const ::Ice::Context*);

    virtual void setExternalIdentifier(const ::omero::RStringPtr&, const ::Ice::Context*);

    virtual ::omero::RStringPtr getType(const ::Ice::Context*);

    virtual void setType(const ::omero::RStringPtr&, const ::Ice::Context*);

    virtual void unloadWellSamples(const ::Ice::Context*);

    virtual ::Ice::Int sizeOfWellSamples(const ::Ice::Context*);

    virtual ::omero::model::WellWellSamplesSeq copyWellSamples(const ::Ice::Context*);

    virtual void addWellSample(const ::omero::model::WellSamplePtr&, const ::Ice::Context*);

    virtual void addAllWellSampleSet(const ::omero::model::WellWellSamplesSeq&, const ::Ice::Context*);

    virtual void removeWellSample(const ::omero::model::WellSamplePtr&, const ::Ice::Context*);

    virtual void removeAllWellSampleSet(const ::omero::model::WellWellSamplesSeq&, const ::Ice::Context*);

    virtual void clearWellSamples(const ::Ice::Context*);

    virtual void reloadWellSamples(const ::omero::model::WellPtr&, const ::Ice::Context*);

    virtual ::omero::model::WellSamplePtr getWellSample(::Ice::Int, const ::Ice::Context*);

    virtual ::omero::model::WellSamplePtr setWellSample(::Ice::Int, const ::omero::model::WellSamplePtr&, const ::Ice::Context*);

    virtual ::omero::model::WellSamplePtr getPrimaryWellSample(const ::Ice::Context*);

    virtual ::omero::model::WellSamplePtr setPrimaryWellSample(const ::omero::model::WellSamplePtr&, const ::Ice::Context*);

    virtual ::omero::model::PlatePtr getPlate(const ::Ice::Context*);

    virtual void setPlate(const ::omero::model::PlatePtr&, const ::Ice::Context*);

    virtual void unloadAnnotationLinks(const ::Ice::Context*);

    virtual ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context*);

    virtual ::omero::model::WellAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context*);

    virtual void addWellAnnotationLink(const ::omero::model::WellAnnotationLinkPtr&, const ::Ice::Context*);

    virtual void addAllWellAnnotationLinkSet(const ::omero::model::WellAnnotationLinksSeq&, const ::Ice::Context*);

    virtual void removeWellAnnotationLink(const ::omero::model::WellAnnotationLinkPtr&, const ::Ice::Context*);

    virtual void removeAllWellAnnotationLinkSet(const ::omero::model::WellAnnotationLinksSeq&, const ::Ice::Context*);

    virtual void clearAnnotationLinks(const ::Ice::Context*);

    virtual void reloadAnnotationLinks(const ::omero::model::WellPtr&, const ::Ice::Context*);

    virtual ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context*);

    virtual ::omero::model::WellAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);

    virtual void addWellAnnotationLinkToBoth(const ::omero::model::WellAnnotationLinkPtr&, bool, const ::Ice::Context*);

    virtual ::omero::model::WellAnnotationLinksSeq findWellAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);

    virtual void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);

    virtual void removeWellAnnotationLinkFromBoth(const ::omero::model::WellAnnotationLinkPtr&, bool, const ::Ice::Context*);

    virtual ::omero::model::WellLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context*);
};

}

}

}

namespace IceDelegateD
{

namespace omero
{

namespace model
{

class Well : virtual public ::IceDelegate::omero::model::Well,
             virtual public ::IceDelegateD::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::RStringPtr getStatus(const ::Ice::Context*);

    virtual void setStatus(const ::omero::RStringPtr&, const ::Ice::Context*);

    virtual ::omero::RIntPtr getColumn(const ::Ice::Context*);

    virtual void setColumn(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::RIntPtr getRow(const ::Ice::Context*);

    virtual void setRow(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::RIntPtr getRed(const ::Ice::Context*);

    virtual void setRed(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::RIntPtr getGreen(const ::Ice::Context*);

    virtual void setGreen(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::RIntPtr getBlue(const ::Ice::Context*);

    virtual void setBlue(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::RIntPtr getAlpha(const ::Ice::Context*);

    virtual void setAlpha(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual void unloadReagentLinks(const ::Ice::Context*);

    virtual ::Ice::Int sizeOfReagentLinks(const ::Ice::Context*);

    virtual ::omero::model::WellReagentLinksSeq copyReagentLinks(const ::Ice::Context*);

    virtual void addWellReagentLink(const ::omero::model::WellReagentLinkPtr&, const ::Ice::Context*);

    virtual void addAllWellReagentLinkSet(const ::omero::model::WellReagentLinksSeq&, const ::Ice::Context*);

    virtual void removeWellReagentLink(const ::omero::model::WellReagentLinkPtr&, const ::Ice::Context*);

    virtual void removeAllWellReagentLinkSet(const ::omero::model::WellReagentLinksSeq&, const ::Ice::Context*);

    virtual void clearReagentLinks(const ::Ice::Context*);

    virtual void reloadReagentLinks(const ::omero::model::WellPtr&, const ::Ice::Context*);

    virtual ::omero::sys::CountMap getReagentLinksCountPerOwner(const ::Ice::Context*);

    virtual ::omero::model::WellReagentLinkPtr linkReagent(const ::omero::model::ReagentPtr&, const ::Ice::Context*);

    virtual void addWellReagentLinkToBoth(const ::omero::model::WellReagentLinkPtr&, bool, const ::Ice::Context*);

    virtual ::omero::model::WellReagentLinksSeq findWellReagentLink(const ::omero::model::ReagentPtr&, const ::Ice::Context*);

    virtual void unlinkReagent(const ::omero::model::ReagentPtr&, const ::Ice::Context*);

    virtual void removeWellReagentLinkFromBoth(const ::omero::model::WellReagentLinkPtr&, bool, const ::Ice::Context*);

    virtual ::omero::model::WellLinkedReagentSeq linkedReagentList(const ::Ice::Context*);

    virtual ::omero::RStringPtr getExternalDescription(const ::Ice::Context*);

    virtual void setExternalDescription(const ::omero::RStringPtr&, const ::Ice::Context*);

    virtual ::omero::RStringPtr getExternalIdentifier(const ::Ice::Context*);

    virtual void setExternalIdentifier(const ::omero::RStringPtr&, const ::Ice::Context*);

    virtual ::omero::RStringPtr getType(const ::Ice::Context*);

    virtual void setType(const ::omero::RStringPtr&, const ::Ice::Context*);

    virtual void unloadWellSamples(const ::Ice::Context*);

    virtual ::Ice::Int sizeOfWellSamples(const ::Ice::Context*);

    virtual ::omero::model::WellWellSamplesSeq copyWellSamples(const ::Ice::Context*);

    virtual void addWellSample(const ::omero::model::WellSamplePtr&, const ::Ice::Context*);

    virtual void addAllWellSampleSet(const ::omero::model::WellWellSamplesSeq&, const ::Ice::Context*);

    virtual void removeWellSample(const ::omero::model::WellSamplePtr&, const ::Ice::Context*);

    virtual void removeAllWellSampleSet(const ::omero::model::WellWellSamplesSeq&, const ::Ice::Context*);

    virtual void clearWellSamples(const ::Ice::Context*);

    virtual void reloadWellSamples(const ::omero::model::WellPtr&, const ::Ice::Context*);

    virtual ::omero::model::WellSamplePtr getWellSample(::Ice::Int, const ::Ice::Context*);

    virtual ::omero::model::WellSamplePtr setWellSample(::Ice::Int, const ::omero::model::WellSamplePtr&, const ::Ice::Context*);

    virtual ::omero::model::WellSamplePtr getPrimaryWellSample(const ::Ice::Context*);

    virtual ::omero::model::WellSamplePtr setPrimaryWellSample(const ::omero::model::WellSamplePtr&, const ::Ice::Context*);

    virtual ::omero::model::PlatePtr getPlate(const ::Ice::Context*);

    virtual void setPlate(const ::omero::model::PlatePtr&, const ::Ice::Context*);

    virtual void unloadAnnotationLinks(const ::Ice::Context*);

    virtual ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context*);

    virtual ::omero::model::WellAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context*);

    virtual void addWellAnnotationLink(const ::omero::model::WellAnnotationLinkPtr&, const ::Ice::Context*);

    virtual void addAllWellAnnotationLinkSet(const ::omero::model::WellAnnotationLinksSeq&, const ::Ice::Context*);

    virtual void removeWellAnnotationLink(const ::omero::model::WellAnnotationLinkPtr&, const ::Ice::Context*);

    virtual void removeAllWellAnnotationLinkSet(const ::omero::model::WellAnnotationLinksSeq&, const ::Ice::Context*);

    virtual void clearAnnotationLinks(const ::Ice::Context*);

    virtual void reloadAnnotationLinks(const ::omero::model::WellPtr&, const ::Ice::Context*);

    virtual ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context*);

    virtual ::omero::model::WellAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);

    virtual void addWellAnnotationLinkToBoth(const ::omero::model::WellAnnotationLinkPtr&, bool, const ::Ice::Context*);

    virtual ::omero::model::WellAnnotationLinksSeq findWellAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);

    virtual void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);

    virtual void removeWellAnnotationLinkFromBoth(const ::omero::model::WellAnnotationLinkPtr&, bool, const ::Ice::Context*);

    virtual ::omero::model::WellLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context*);
};

}

}

}

namespace omero
{

namespace model
{

class Well : public ::omero::model::IObject
{
public:

    typedef WellPrx ProxyType;
    typedef WellPtr PointerType;
    
    Well() {}
    Well(const ::omero::RLongPtr&, const ::omero::model::DetailsPtr&, bool, const ::omero::RIntPtr&, const ::omero::RStringPtr&, const ::omero::RIntPtr&, const ::omero::RIntPtr&, const ::omero::RIntPtr&, const ::omero::RIntPtr&, const ::omero::RIntPtr&, const ::omero::RIntPtr&, const ::omero::model::WellReagentLinksSeq&, bool, const ::omero::sys::CountMap&, const ::omero::RStringPtr&, const ::omero::RStringPtr&, const ::omero::RStringPtr&, const ::omero::model::WellWellSamplesSeq&, bool, const ::omero::model::PlatePtr&, const ::omero::model::WellAnnotationLinksSeq&, bool, const ::omero::sys::CountMap&);
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    virtual ::omero::RIntPtr getVersion(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getStatus(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getStatus(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setStatus(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setStatus(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RIntPtr getColumn(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getColumn(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setColumn(const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setColumn(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RIntPtr getRow(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getRow(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setRow(const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setRow(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RIntPtr getRed(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getRed(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setRed(const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setRed(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RIntPtr getGreen(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getGreen(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setGreen(const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setGreen(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RIntPtr getBlue(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getBlue(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setBlue(const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setBlue(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RIntPtr getAlpha(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getAlpha(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setAlpha(const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setAlpha(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unloadReagentLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unloadReagentLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int sizeOfReagentLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sizeOfReagentLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::WellReagentLinksSeq copyReagentLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___copyReagentLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addWellReagentLink(const ::omero::model::WellReagentLinkPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addWellReagentLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addAllWellReagentLinkSet(const ::omero::model::WellReagentLinksSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addAllWellReagentLinkSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeWellReagentLink(const ::omero::model::WellReagentLinkPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeWellReagentLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeAllWellReagentLinkSet(const ::omero::model::WellReagentLinksSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeAllWellReagentLinkSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void clearReagentLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___clearReagentLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reloadReagentLinks(const ::omero::model::WellPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reloadReagentLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::sys::CountMap getReagentLinksCountPerOwner(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getReagentLinksCountPerOwner(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::WellReagentLinkPtr linkReagent(const ::omero::model::ReagentPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___linkReagent(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addWellReagentLinkToBoth(const ::omero::model::WellReagentLinkPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addWellReagentLinkToBoth(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::WellReagentLinksSeq findWellReagentLink(const ::omero::model::ReagentPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___findWellReagentLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unlinkReagent(const ::omero::model::ReagentPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unlinkReagent(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeWellReagentLinkFromBoth(const ::omero::model::WellReagentLinkPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeWellReagentLinkFromBoth(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::WellLinkedReagentSeq linkedReagentList(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___linkedReagentList(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getExternalDescription(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getExternalDescription(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setExternalDescription(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setExternalDescription(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getExternalIdentifier(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getExternalIdentifier(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setExternalIdentifier(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setExternalIdentifier(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getType(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getType(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setType(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setType(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unloadWellSamples(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unloadWellSamples(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int sizeOfWellSamples(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sizeOfWellSamples(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::WellWellSamplesSeq copyWellSamples(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___copyWellSamples(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addWellSample(const ::omero::model::WellSamplePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addWellSample(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addAllWellSampleSet(const ::omero::model::WellWellSamplesSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addAllWellSampleSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeWellSample(const ::omero::model::WellSamplePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeWellSample(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeAllWellSampleSet(const ::omero::model::WellWellSamplesSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeAllWellSampleSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void clearWellSamples(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___clearWellSamples(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reloadWellSamples(const ::omero::model::WellPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reloadWellSamples(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::WellSamplePtr getWellSample(::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getWellSample(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::WellSamplePtr setWellSample(::Ice::Int, const ::omero::model::WellSamplePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setWellSample(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::WellSamplePtr getPrimaryWellSample(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getPrimaryWellSample(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::WellSamplePtr setPrimaryWellSample(const ::omero::model::WellSamplePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setPrimaryWellSample(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::PlatePtr getPlate(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getPlate(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setPlate(const ::omero::model::PlatePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setPlate(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unloadAnnotationLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unloadAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sizeOfAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::WellAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___copyAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addWellAnnotationLink(const ::omero::model::WellAnnotationLinkPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addWellAnnotationLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addAllWellAnnotationLinkSet(const ::omero::model::WellAnnotationLinksSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addAllWellAnnotationLinkSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeWellAnnotationLink(const ::omero::model::WellAnnotationLinkPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeWellAnnotationLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeAllWellAnnotationLinkSet(const ::omero::model::WellAnnotationLinksSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeAllWellAnnotationLinkSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void clearAnnotationLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___clearAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reloadAnnotationLinks(const ::omero::model::WellPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reloadAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getAnnotationLinksCountPerOwner(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::WellAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___linkAnnotation(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addWellAnnotationLinkToBoth(const ::omero::model::WellAnnotationLinkPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addWellAnnotationLinkToBoth(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::WellAnnotationLinksSeq findWellAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___findWellAnnotationLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unlinkAnnotation(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeWellAnnotationLinkFromBoth(const ::omero::model::WellAnnotationLinkPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeWellAnnotationLinkFromBoth(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::WellLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___linkedAnnotationList(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif

protected:

    ::omero::RIntPtr version;

    ::omero::RStringPtr status;

    ::omero::RIntPtr column;

    ::omero::RIntPtr row;

    ::omero::RIntPtr red;

    ::omero::RIntPtr green;

    ::omero::RIntPtr blue;

    ::omero::RIntPtr alpha;

    ::omero::model::WellReagentLinksSeq reagentLinksSeq;

    bool reagentLinksLoaded;

    ::omero::sys::CountMap reagentLinksCountPerOwner;

    ::omero::RStringPtr externalDescription;

    ::omero::RStringPtr externalIdentifier;

    ::omero::RStringPtr type;

    ::omero::model::WellWellSamplesSeq wellSamplesSeq;

    bool wellSamplesLoaded;

    ::omero::model::PlatePtr plate;

    ::omero::model::WellAnnotationLinksSeq annotationLinksSeq;

    bool annotationLinksLoaded;

    ::omero::sys::CountMap annotationLinksCountPerOwner;
};

inline bool operator==(const Well& l, const Well& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Well& l, const Well& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

}

namespace omero
{

namespace model
{

template<class T>
class CallbackNC_Well_getVersion : public Callback_Well_getVersion_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RIntPtr&);

    CallbackNC_Well_getVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellPrx __proxy = ::omero::model::WellPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Well_getVersionPtr
newCallback_Well_getVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_getVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_getVersionPtr
newCallback_Well_getVersion(T* instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_getVersion<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_getVersion : public Callback_Well_getVersion_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RIntPtr&, const CT&);

    Callback_Well_getVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellPrx __proxy = ::omero::model::WellPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Well_getVersionPtr
newCallback_Well_getVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_getVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_getVersionPtr
newCallback_Well_getVersion(T* instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_getVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Well_setVersion : public Callback_Well_setVersion_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Well_setVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Well_setVersionPtr
newCallback_Well_setVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_setVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_setVersionPtr
newCallback_Well_setVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_setVersion<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Well_setVersionPtr
newCallback_Well_setVersion(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_setVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_setVersionPtr
newCallback_Well_setVersion(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_setVersion<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_setVersion : public Callback_Well_setVersion_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Well_setVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Well_setVersionPtr
newCallback_Well_setVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_setVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_setVersionPtr
newCallback_Well_setVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_setVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Well_setVersionPtr
newCallback_Well_setVersion(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_setVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_setVersionPtr
newCallback_Well_setVersion(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_setVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Well_getStatus : public Callback_Well_getStatus_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_Well_getStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellPrx __proxy = ::omero::model::WellPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getStatus(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Well_getStatusPtr
newCallback_Well_getStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_getStatus<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_getStatusPtr
newCallback_Well_getStatus(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_getStatus<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_getStatus : public Callback_Well_getStatus_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_Well_getStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellPrx __proxy = ::omero::model::WellPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getStatus(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Well_getStatusPtr
newCallback_Well_getStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_getStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_getStatusPtr
newCallback_Well_getStatus(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_getStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Well_setStatus : public Callback_Well_setStatus_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Well_setStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Well_setStatusPtr
newCallback_Well_setStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_setStatus<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_setStatusPtr
newCallback_Well_setStatus(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_setStatus<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Well_setStatusPtr
newCallback_Well_setStatus(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_setStatus<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_setStatusPtr
newCallback_Well_setStatus(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_setStatus<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_setStatus : public Callback_Well_setStatus_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Well_setStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Well_setStatusPtr
newCallback_Well_setStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_setStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_setStatusPtr
newCallback_Well_setStatus(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_setStatus<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Well_setStatusPtr
newCallback_Well_setStatus(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_setStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_setStatusPtr
newCallback_Well_setStatus(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_setStatus<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Well_getColumn : public Callback_Well_getColumn_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RIntPtr&);

    CallbackNC_Well_getColumn(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellPrx __proxy = ::omero::model::WellPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getColumn(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Well_getColumnPtr
newCallback_Well_getColumn(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_getColumn<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_getColumnPtr
newCallback_Well_getColumn(T* instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_getColumn<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_getColumn : public Callback_Well_getColumn_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RIntPtr&, const CT&);

    Callback_Well_getColumn(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellPrx __proxy = ::omero::model::WellPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getColumn(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Well_getColumnPtr
newCallback_Well_getColumn(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_getColumn<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_getColumnPtr
newCallback_Well_getColumn(T* instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_getColumn<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Well_setColumn : public Callback_Well_setColumn_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Well_setColumn(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Well_setColumnPtr
newCallback_Well_setColumn(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_setColumn<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_setColumnPtr
newCallback_Well_setColumn(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_setColumn<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Well_setColumnPtr
newCallback_Well_setColumn(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_setColumn<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_setColumnPtr
newCallback_Well_setColumn(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_setColumn<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_setColumn : public Callback_Well_setColumn_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Well_setColumn(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Well_setColumnPtr
newCallback_Well_setColumn(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_setColumn<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_setColumnPtr
newCallback_Well_setColumn(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_setColumn<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Well_setColumnPtr
newCallback_Well_setColumn(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_setColumn<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_setColumnPtr
newCallback_Well_setColumn(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_setColumn<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Well_getRow : public Callback_Well_getRow_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RIntPtr&);

    CallbackNC_Well_getRow(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellPrx __proxy = ::omero::model::WellPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getRow(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Well_getRowPtr
newCallback_Well_getRow(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_getRow<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_getRowPtr
newCallback_Well_getRow(T* instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_getRow<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_getRow : public Callback_Well_getRow_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RIntPtr&, const CT&);

    Callback_Well_getRow(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellPrx __proxy = ::omero::model::WellPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getRow(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Well_getRowPtr
newCallback_Well_getRow(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_getRow<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_getRowPtr
newCallback_Well_getRow(T* instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_getRow<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Well_setRow : public Callback_Well_setRow_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Well_setRow(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Well_setRowPtr
newCallback_Well_setRow(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_setRow<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_setRowPtr
newCallback_Well_setRow(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_setRow<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Well_setRowPtr
newCallback_Well_setRow(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_setRow<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_setRowPtr
newCallback_Well_setRow(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_setRow<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_setRow : public Callback_Well_setRow_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Well_setRow(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Well_setRowPtr
newCallback_Well_setRow(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_setRow<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_setRowPtr
newCallback_Well_setRow(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_setRow<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Well_setRowPtr
newCallback_Well_setRow(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_setRow<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_setRowPtr
newCallback_Well_setRow(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_setRow<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Well_getRed : public Callback_Well_getRed_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RIntPtr&);

    CallbackNC_Well_getRed(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellPrx __proxy = ::omero::model::WellPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getRed(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Well_getRedPtr
newCallback_Well_getRed(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_getRed<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_getRedPtr
newCallback_Well_getRed(T* instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_getRed<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_getRed : public Callback_Well_getRed_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RIntPtr&, const CT&);

    Callback_Well_getRed(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellPrx __proxy = ::omero::model::WellPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getRed(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Well_getRedPtr
newCallback_Well_getRed(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_getRed<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_getRedPtr
newCallback_Well_getRed(T* instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_getRed<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Well_setRed : public Callback_Well_setRed_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Well_setRed(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Well_setRedPtr
newCallback_Well_setRed(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_setRed<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_setRedPtr
newCallback_Well_setRed(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_setRed<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Well_setRedPtr
newCallback_Well_setRed(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_setRed<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_setRedPtr
newCallback_Well_setRed(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_setRed<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_setRed : public Callback_Well_setRed_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Well_setRed(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Well_setRedPtr
newCallback_Well_setRed(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_setRed<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_setRedPtr
newCallback_Well_setRed(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_setRed<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Well_setRedPtr
newCallback_Well_setRed(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_setRed<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_setRedPtr
newCallback_Well_setRed(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_setRed<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Well_getGreen : public Callback_Well_getGreen_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RIntPtr&);

    CallbackNC_Well_getGreen(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellPrx __proxy = ::omero::model::WellPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getGreen(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Well_getGreenPtr
newCallback_Well_getGreen(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_getGreen<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_getGreenPtr
newCallback_Well_getGreen(T* instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_getGreen<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_getGreen : public Callback_Well_getGreen_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RIntPtr&, const CT&);

    Callback_Well_getGreen(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellPrx __proxy = ::omero::model::WellPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getGreen(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Well_getGreenPtr
newCallback_Well_getGreen(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_getGreen<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_getGreenPtr
newCallback_Well_getGreen(T* instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_getGreen<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Well_setGreen : public Callback_Well_setGreen_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Well_setGreen(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Well_setGreenPtr
newCallback_Well_setGreen(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_setGreen<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_setGreenPtr
newCallback_Well_setGreen(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_setGreen<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Well_setGreenPtr
newCallback_Well_setGreen(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_setGreen<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_setGreenPtr
newCallback_Well_setGreen(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_setGreen<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_setGreen : public Callback_Well_setGreen_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Well_setGreen(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Well_setGreenPtr
newCallback_Well_setGreen(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_setGreen<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_setGreenPtr
newCallback_Well_setGreen(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_setGreen<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Well_setGreenPtr
newCallback_Well_setGreen(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_setGreen<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_setGreenPtr
newCallback_Well_setGreen(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_setGreen<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Well_getBlue : public Callback_Well_getBlue_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RIntPtr&);

    CallbackNC_Well_getBlue(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellPrx __proxy = ::omero::model::WellPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getBlue(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Well_getBluePtr
newCallback_Well_getBlue(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_getBlue<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_getBluePtr
newCallback_Well_getBlue(T* instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_getBlue<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_getBlue : public Callback_Well_getBlue_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RIntPtr&, const CT&);

    Callback_Well_getBlue(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellPrx __proxy = ::omero::model::WellPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getBlue(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Well_getBluePtr
newCallback_Well_getBlue(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_getBlue<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_getBluePtr
newCallback_Well_getBlue(T* instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_getBlue<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Well_setBlue : public Callback_Well_setBlue_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Well_setBlue(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Well_setBluePtr
newCallback_Well_setBlue(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_setBlue<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_setBluePtr
newCallback_Well_setBlue(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_setBlue<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Well_setBluePtr
newCallback_Well_setBlue(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_setBlue<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_setBluePtr
newCallback_Well_setBlue(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_setBlue<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_setBlue : public Callback_Well_setBlue_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Well_setBlue(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Well_setBluePtr
newCallback_Well_setBlue(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_setBlue<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_setBluePtr
newCallback_Well_setBlue(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_setBlue<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Well_setBluePtr
newCallback_Well_setBlue(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_setBlue<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_setBluePtr
newCallback_Well_setBlue(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_setBlue<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Well_getAlpha : public Callback_Well_getAlpha_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RIntPtr&);

    CallbackNC_Well_getAlpha(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellPrx __proxy = ::omero::model::WellPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getAlpha(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Well_getAlphaPtr
newCallback_Well_getAlpha(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_getAlpha<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_getAlphaPtr
newCallback_Well_getAlpha(T* instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_getAlpha<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_getAlpha : public Callback_Well_getAlpha_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RIntPtr&, const CT&);

    Callback_Well_getAlpha(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellPrx __proxy = ::omero::model::WellPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getAlpha(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Well_getAlphaPtr
newCallback_Well_getAlpha(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_getAlpha<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_getAlphaPtr
newCallback_Well_getAlpha(T* instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_getAlpha<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Well_setAlpha : public Callback_Well_setAlpha_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Well_setAlpha(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Well_setAlphaPtr
newCallback_Well_setAlpha(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_setAlpha<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_setAlphaPtr
newCallback_Well_setAlpha(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_setAlpha<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Well_setAlphaPtr
newCallback_Well_setAlpha(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_setAlpha<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_setAlphaPtr
newCallback_Well_setAlpha(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_setAlpha<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_setAlpha : public Callback_Well_setAlpha_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Well_setAlpha(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Well_setAlphaPtr
newCallback_Well_setAlpha(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_setAlpha<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_setAlphaPtr
newCallback_Well_setAlpha(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_setAlpha<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Well_setAlphaPtr
newCallback_Well_setAlpha(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_setAlpha<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_setAlphaPtr
newCallback_Well_setAlpha(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_setAlpha<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Well_unloadReagentLinks : public Callback_Well_unloadReagentLinks_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Well_unloadReagentLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Well_unloadReagentLinksPtr
newCallback_Well_unloadReagentLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_unloadReagentLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_unloadReagentLinksPtr
newCallback_Well_unloadReagentLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_unloadReagentLinks<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Well_unloadReagentLinksPtr
newCallback_Well_unloadReagentLinks(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_unloadReagentLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_unloadReagentLinksPtr
newCallback_Well_unloadReagentLinks(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_unloadReagentLinks<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_unloadReagentLinks : public Callback_Well_unloadReagentLinks_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Well_unloadReagentLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Well_unloadReagentLinksPtr
newCallback_Well_unloadReagentLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_unloadReagentLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_unloadReagentLinksPtr
newCallback_Well_unloadReagentLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_unloadReagentLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Well_unloadReagentLinksPtr
newCallback_Well_unloadReagentLinks(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_unloadReagentLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_unloadReagentLinksPtr
newCallback_Well_unloadReagentLinks(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_unloadReagentLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Well_sizeOfReagentLinks : public Callback_Well_sizeOfReagentLinks_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Well_sizeOfReagentLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellPrx __proxy = ::omero::model::WellPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfReagentLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Well_sizeOfReagentLinksPtr
newCallback_Well_sizeOfReagentLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_sizeOfReagentLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_sizeOfReagentLinksPtr
newCallback_Well_sizeOfReagentLinks(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_sizeOfReagentLinks<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_sizeOfReagentLinks : public Callback_Well_sizeOfReagentLinks_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Well_sizeOfReagentLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellPrx __proxy = ::omero::model::WellPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfReagentLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Well_sizeOfReagentLinksPtr
newCallback_Well_sizeOfReagentLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_sizeOfReagentLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_sizeOfReagentLinksPtr
newCallback_Well_sizeOfReagentLinks(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_sizeOfReagentLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Well_copyReagentLinks : public Callback_Well_copyReagentLinks_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::WellReagentLinksSeq&);

    CallbackNC_Well_copyReagentLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellPrx __proxy = ::omero::model::WellPrx::uncheckedCast(__result->getProxy());
        ::omero::model::WellReagentLinksSeq __ret;
        try
        {
            __ret = __proxy->end_copyReagentLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Well_copyReagentLinksPtr
newCallback_Well_copyReagentLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::WellReagentLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_copyReagentLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_copyReagentLinksPtr
newCallback_Well_copyReagentLinks(T* instance, void (T::*cb)(const ::omero::model::WellReagentLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_copyReagentLinks<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_copyReagentLinks : public Callback_Well_copyReagentLinks_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::WellReagentLinksSeq&, const CT&);

    Callback_Well_copyReagentLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellPrx __proxy = ::omero::model::WellPrx::uncheckedCast(__result->getProxy());
        ::omero::model::WellReagentLinksSeq __ret;
        try
        {
            __ret = __proxy->end_copyReagentLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Well_copyReagentLinksPtr
newCallback_Well_copyReagentLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::WellReagentLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_copyReagentLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_copyReagentLinksPtr
newCallback_Well_copyReagentLinks(T* instance, void (T::*cb)(const ::omero::model::WellReagentLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_copyReagentLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Well_addWellReagentLink : public Callback_Well_addWellReagentLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Well_addWellReagentLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Well_addWellReagentLinkPtr
newCallback_Well_addWellReagentLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_addWellReagentLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_addWellReagentLinkPtr
newCallback_Well_addWellReagentLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_addWellReagentLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Well_addWellReagentLinkPtr
newCallback_Well_addWellReagentLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_addWellReagentLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_addWellReagentLinkPtr
newCallback_Well_addWellReagentLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_addWellReagentLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_addWellReagentLink : public Callback_Well_addWellReagentLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Well_addWellReagentLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Well_addWellReagentLinkPtr
newCallback_Well_addWellReagentLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_addWellReagentLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_addWellReagentLinkPtr
newCallback_Well_addWellReagentLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_addWellReagentLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Well_addWellReagentLinkPtr
newCallback_Well_addWellReagentLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_addWellReagentLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_addWellReagentLinkPtr
newCallback_Well_addWellReagentLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_addWellReagentLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Well_addAllWellReagentLinkSet : public Callback_Well_addAllWellReagentLinkSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Well_addAllWellReagentLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Well_addAllWellReagentLinkSetPtr
newCallback_Well_addAllWellReagentLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_addAllWellReagentLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_addAllWellReagentLinkSetPtr
newCallback_Well_addAllWellReagentLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_addAllWellReagentLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Well_addAllWellReagentLinkSetPtr
newCallback_Well_addAllWellReagentLinkSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_addAllWellReagentLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_addAllWellReagentLinkSetPtr
newCallback_Well_addAllWellReagentLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_addAllWellReagentLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_addAllWellReagentLinkSet : public Callback_Well_addAllWellReagentLinkSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Well_addAllWellReagentLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Well_addAllWellReagentLinkSetPtr
newCallback_Well_addAllWellReagentLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_addAllWellReagentLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_addAllWellReagentLinkSetPtr
newCallback_Well_addAllWellReagentLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_addAllWellReagentLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Well_addAllWellReagentLinkSetPtr
newCallback_Well_addAllWellReagentLinkSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_addAllWellReagentLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_addAllWellReagentLinkSetPtr
newCallback_Well_addAllWellReagentLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_addAllWellReagentLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Well_removeWellReagentLink : public Callback_Well_removeWellReagentLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Well_removeWellReagentLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Well_removeWellReagentLinkPtr
newCallback_Well_removeWellReagentLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_removeWellReagentLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_removeWellReagentLinkPtr
newCallback_Well_removeWellReagentLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_removeWellReagentLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Well_removeWellReagentLinkPtr
newCallback_Well_removeWellReagentLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_removeWellReagentLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_removeWellReagentLinkPtr
newCallback_Well_removeWellReagentLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_removeWellReagentLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_removeWellReagentLink : public Callback_Well_removeWellReagentLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Well_removeWellReagentLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Well_removeWellReagentLinkPtr
newCallback_Well_removeWellReagentLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_removeWellReagentLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_removeWellReagentLinkPtr
newCallback_Well_removeWellReagentLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_removeWellReagentLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Well_removeWellReagentLinkPtr
newCallback_Well_removeWellReagentLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_removeWellReagentLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_removeWellReagentLinkPtr
newCallback_Well_removeWellReagentLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_removeWellReagentLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Well_removeAllWellReagentLinkSet : public Callback_Well_removeAllWellReagentLinkSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Well_removeAllWellReagentLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Well_removeAllWellReagentLinkSetPtr
newCallback_Well_removeAllWellReagentLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_removeAllWellReagentLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_removeAllWellReagentLinkSetPtr
newCallback_Well_removeAllWellReagentLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_removeAllWellReagentLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Well_removeAllWellReagentLinkSetPtr
newCallback_Well_removeAllWellReagentLinkSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_removeAllWellReagentLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_removeAllWellReagentLinkSetPtr
newCallback_Well_removeAllWellReagentLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_removeAllWellReagentLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_removeAllWellReagentLinkSet : public Callback_Well_removeAllWellReagentLinkSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Well_removeAllWellReagentLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Well_removeAllWellReagentLinkSetPtr
newCallback_Well_removeAllWellReagentLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_removeAllWellReagentLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_removeAllWellReagentLinkSetPtr
newCallback_Well_removeAllWellReagentLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_removeAllWellReagentLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Well_removeAllWellReagentLinkSetPtr
newCallback_Well_removeAllWellReagentLinkSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_removeAllWellReagentLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_removeAllWellReagentLinkSetPtr
newCallback_Well_removeAllWellReagentLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_removeAllWellReagentLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Well_clearReagentLinks : public Callback_Well_clearReagentLinks_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Well_clearReagentLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Well_clearReagentLinksPtr
newCallback_Well_clearReagentLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_clearReagentLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_clearReagentLinksPtr
newCallback_Well_clearReagentLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_clearReagentLinks<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Well_clearReagentLinksPtr
newCallback_Well_clearReagentLinks(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_clearReagentLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_clearReagentLinksPtr
newCallback_Well_clearReagentLinks(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_clearReagentLinks<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_clearReagentLinks : public Callback_Well_clearReagentLinks_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Well_clearReagentLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Well_clearReagentLinksPtr
newCallback_Well_clearReagentLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_clearReagentLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_clearReagentLinksPtr
newCallback_Well_clearReagentLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_clearReagentLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Well_clearReagentLinksPtr
newCallback_Well_clearReagentLinks(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_clearReagentLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_clearReagentLinksPtr
newCallback_Well_clearReagentLinks(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_clearReagentLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Well_reloadReagentLinks : public Callback_Well_reloadReagentLinks_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Well_reloadReagentLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Well_reloadReagentLinksPtr
newCallback_Well_reloadReagentLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_reloadReagentLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_reloadReagentLinksPtr
newCallback_Well_reloadReagentLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_reloadReagentLinks<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Well_reloadReagentLinksPtr
newCallback_Well_reloadReagentLinks(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_reloadReagentLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_reloadReagentLinksPtr
newCallback_Well_reloadReagentLinks(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_reloadReagentLinks<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_reloadReagentLinks : public Callback_Well_reloadReagentLinks_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Well_reloadReagentLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Well_reloadReagentLinksPtr
newCallback_Well_reloadReagentLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_reloadReagentLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_reloadReagentLinksPtr
newCallback_Well_reloadReagentLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_reloadReagentLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Well_reloadReagentLinksPtr
newCallback_Well_reloadReagentLinks(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_reloadReagentLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_reloadReagentLinksPtr
newCallback_Well_reloadReagentLinks(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_reloadReagentLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Well_getReagentLinksCountPerOwner : public Callback_Well_getReagentLinksCountPerOwner_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::sys::CountMap&);

    CallbackNC_Well_getReagentLinksCountPerOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellPrx __proxy = ::omero::model::WellPrx::uncheckedCast(__result->getProxy());
        ::omero::sys::CountMap __ret;
        try
        {
            __ret = __proxy->end_getReagentLinksCountPerOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Well_getReagentLinksCountPerOwnerPtr
newCallback_Well_getReagentLinksCountPerOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::CountMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_getReagentLinksCountPerOwner<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_getReagentLinksCountPerOwnerPtr
newCallback_Well_getReagentLinksCountPerOwner(T* instance, void (T::*cb)(const ::omero::sys::CountMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_getReagentLinksCountPerOwner<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_getReagentLinksCountPerOwner : public Callback_Well_getReagentLinksCountPerOwner_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::sys::CountMap&, const CT&);

    Callback_Well_getReagentLinksCountPerOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellPrx __proxy = ::omero::model::WellPrx::uncheckedCast(__result->getProxy());
        ::omero::sys::CountMap __ret;
        try
        {
            __ret = __proxy->end_getReagentLinksCountPerOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Well_getReagentLinksCountPerOwnerPtr
newCallback_Well_getReagentLinksCountPerOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::CountMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_getReagentLinksCountPerOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_getReagentLinksCountPerOwnerPtr
newCallback_Well_getReagentLinksCountPerOwner(T* instance, void (T::*cb)(const ::omero::sys::CountMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_getReagentLinksCountPerOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Well_linkReagent : public Callback_Well_linkReagent_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::WellReagentLinkPtr&);

    CallbackNC_Well_linkReagent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellPrx __proxy = ::omero::model::WellPrx::uncheckedCast(__result->getProxy());
        ::omero::model::WellReagentLinkPtr __ret;
        try
        {
            __ret = __proxy->end_linkReagent(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Well_linkReagentPtr
newCallback_Well_linkReagent(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::WellReagentLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_linkReagent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_linkReagentPtr
newCallback_Well_linkReagent(T* instance, void (T::*cb)(const ::omero::model::WellReagentLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_linkReagent<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_linkReagent : public Callback_Well_linkReagent_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::WellReagentLinkPtr&, const CT&);

    Callback_Well_linkReagent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellPrx __proxy = ::omero::model::WellPrx::uncheckedCast(__result->getProxy());
        ::omero::model::WellReagentLinkPtr __ret;
        try
        {
            __ret = __proxy->end_linkReagent(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Well_linkReagentPtr
newCallback_Well_linkReagent(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::WellReagentLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_linkReagent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_linkReagentPtr
newCallback_Well_linkReagent(T* instance, void (T::*cb)(const ::omero::model::WellReagentLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_linkReagent<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Well_addWellReagentLinkToBoth : public Callback_Well_addWellReagentLinkToBoth_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Well_addWellReagentLinkToBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Well_addWellReagentLinkToBothPtr
newCallback_Well_addWellReagentLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_addWellReagentLinkToBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_addWellReagentLinkToBothPtr
newCallback_Well_addWellReagentLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_addWellReagentLinkToBoth<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Well_addWellReagentLinkToBothPtr
newCallback_Well_addWellReagentLinkToBoth(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_addWellReagentLinkToBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_addWellReagentLinkToBothPtr
newCallback_Well_addWellReagentLinkToBoth(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_addWellReagentLinkToBoth<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_addWellReagentLinkToBoth : public Callback_Well_addWellReagentLinkToBoth_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Well_addWellReagentLinkToBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Well_addWellReagentLinkToBothPtr
newCallback_Well_addWellReagentLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_addWellReagentLinkToBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_addWellReagentLinkToBothPtr
newCallback_Well_addWellReagentLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_addWellReagentLinkToBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Well_addWellReagentLinkToBothPtr
newCallback_Well_addWellReagentLinkToBoth(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_addWellReagentLinkToBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_addWellReagentLinkToBothPtr
newCallback_Well_addWellReagentLinkToBoth(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_addWellReagentLinkToBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Well_findWellReagentLink : public Callback_Well_findWellReagentLink_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::WellReagentLinksSeq&);

    CallbackNC_Well_findWellReagentLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellPrx __proxy = ::omero::model::WellPrx::uncheckedCast(__result->getProxy());
        ::omero::model::WellReagentLinksSeq __ret;
        try
        {
            __ret = __proxy->end_findWellReagentLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Well_findWellReagentLinkPtr
newCallback_Well_findWellReagentLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::WellReagentLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_findWellReagentLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_findWellReagentLinkPtr
newCallback_Well_findWellReagentLink(T* instance, void (T::*cb)(const ::omero::model::WellReagentLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_findWellReagentLink<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_findWellReagentLink : public Callback_Well_findWellReagentLink_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::WellReagentLinksSeq&, const CT&);

    Callback_Well_findWellReagentLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellPrx __proxy = ::omero::model::WellPrx::uncheckedCast(__result->getProxy());
        ::omero::model::WellReagentLinksSeq __ret;
        try
        {
            __ret = __proxy->end_findWellReagentLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Well_findWellReagentLinkPtr
newCallback_Well_findWellReagentLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::WellReagentLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_findWellReagentLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_findWellReagentLinkPtr
newCallback_Well_findWellReagentLink(T* instance, void (T::*cb)(const ::omero::model::WellReagentLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_findWellReagentLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Well_unlinkReagent : public Callback_Well_unlinkReagent_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Well_unlinkReagent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Well_unlinkReagentPtr
newCallback_Well_unlinkReagent(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_unlinkReagent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_unlinkReagentPtr
newCallback_Well_unlinkReagent(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_unlinkReagent<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Well_unlinkReagentPtr
newCallback_Well_unlinkReagent(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_unlinkReagent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_unlinkReagentPtr
newCallback_Well_unlinkReagent(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_unlinkReagent<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_unlinkReagent : public Callback_Well_unlinkReagent_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Well_unlinkReagent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Well_unlinkReagentPtr
newCallback_Well_unlinkReagent(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_unlinkReagent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_unlinkReagentPtr
newCallback_Well_unlinkReagent(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_unlinkReagent<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Well_unlinkReagentPtr
newCallback_Well_unlinkReagent(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_unlinkReagent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_unlinkReagentPtr
newCallback_Well_unlinkReagent(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_unlinkReagent<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Well_removeWellReagentLinkFromBoth : public Callback_Well_removeWellReagentLinkFromBoth_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Well_removeWellReagentLinkFromBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Well_removeWellReagentLinkFromBothPtr
newCallback_Well_removeWellReagentLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_removeWellReagentLinkFromBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_removeWellReagentLinkFromBothPtr
newCallback_Well_removeWellReagentLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_removeWellReagentLinkFromBoth<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Well_removeWellReagentLinkFromBothPtr
newCallback_Well_removeWellReagentLinkFromBoth(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_removeWellReagentLinkFromBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_removeWellReagentLinkFromBothPtr
newCallback_Well_removeWellReagentLinkFromBoth(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_removeWellReagentLinkFromBoth<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_removeWellReagentLinkFromBoth : public Callback_Well_removeWellReagentLinkFromBoth_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Well_removeWellReagentLinkFromBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Well_removeWellReagentLinkFromBothPtr
newCallback_Well_removeWellReagentLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_removeWellReagentLinkFromBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_removeWellReagentLinkFromBothPtr
newCallback_Well_removeWellReagentLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_removeWellReagentLinkFromBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Well_removeWellReagentLinkFromBothPtr
newCallback_Well_removeWellReagentLinkFromBoth(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_removeWellReagentLinkFromBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_removeWellReagentLinkFromBothPtr
newCallback_Well_removeWellReagentLinkFromBoth(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_removeWellReagentLinkFromBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Well_linkedReagentList : public Callback_Well_linkedReagentList_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::WellLinkedReagentSeq&);

    CallbackNC_Well_linkedReagentList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellPrx __proxy = ::omero::model::WellPrx::uncheckedCast(__result->getProxy());
        ::omero::model::WellLinkedReagentSeq __ret;
        try
        {
            __ret = __proxy->end_linkedReagentList(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Well_linkedReagentListPtr
newCallback_Well_linkedReagentList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::WellLinkedReagentSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_linkedReagentList<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_linkedReagentListPtr
newCallback_Well_linkedReagentList(T* instance, void (T::*cb)(const ::omero::model::WellLinkedReagentSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_linkedReagentList<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_linkedReagentList : public Callback_Well_linkedReagentList_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::WellLinkedReagentSeq&, const CT&);

    Callback_Well_linkedReagentList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellPrx __proxy = ::omero::model::WellPrx::uncheckedCast(__result->getProxy());
        ::omero::model::WellLinkedReagentSeq __ret;
        try
        {
            __ret = __proxy->end_linkedReagentList(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Well_linkedReagentListPtr
newCallback_Well_linkedReagentList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::WellLinkedReagentSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_linkedReagentList<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_linkedReagentListPtr
newCallback_Well_linkedReagentList(T* instance, void (T::*cb)(const ::omero::model::WellLinkedReagentSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_linkedReagentList<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Well_getExternalDescription : public Callback_Well_getExternalDescription_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_Well_getExternalDescription(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellPrx __proxy = ::omero::model::WellPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getExternalDescription(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Well_getExternalDescriptionPtr
newCallback_Well_getExternalDescription(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_getExternalDescription<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_getExternalDescriptionPtr
newCallback_Well_getExternalDescription(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_getExternalDescription<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_getExternalDescription : public Callback_Well_getExternalDescription_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_Well_getExternalDescription(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellPrx __proxy = ::omero::model::WellPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getExternalDescription(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Well_getExternalDescriptionPtr
newCallback_Well_getExternalDescription(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_getExternalDescription<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_getExternalDescriptionPtr
newCallback_Well_getExternalDescription(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_getExternalDescription<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Well_setExternalDescription : public Callback_Well_setExternalDescription_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Well_setExternalDescription(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Well_setExternalDescriptionPtr
newCallback_Well_setExternalDescription(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_setExternalDescription<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_setExternalDescriptionPtr
newCallback_Well_setExternalDescription(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_setExternalDescription<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Well_setExternalDescriptionPtr
newCallback_Well_setExternalDescription(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_setExternalDescription<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_setExternalDescriptionPtr
newCallback_Well_setExternalDescription(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_setExternalDescription<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_setExternalDescription : public Callback_Well_setExternalDescription_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Well_setExternalDescription(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Well_setExternalDescriptionPtr
newCallback_Well_setExternalDescription(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_setExternalDescription<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_setExternalDescriptionPtr
newCallback_Well_setExternalDescription(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_setExternalDescription<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Well_setExternalDescriptionPtr
newCallback_Well_setExternalDescription(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_setExternalDescription<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_setExternalDescriptionPtr
newCallback_Well_setExternalDescription(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_setExternalDescription<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Well_getExternalIdentifier : public Callback_Well_getExternalIdentifier_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_Well_getExternalIdentifier(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellPrx __proxy = ::omero::model::WellPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getExternalIdentifier(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Well_getExternalIdentifierPtr
newCallback_Well_getExternalIdentifier(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_getExternalIdentifier<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_getExternalIdentifierPtr
newCallback_Well_getExternalIdentifier(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_getExternalIdentifier<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_getExternalIdentifier : public Callback_Well_getExternalIdentifier_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_Well_getExternalIdentifier(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellPrx __proxy = ::omero::model::WellPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getExternalIdentifier(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Well_getExternalIdentifierPtr
newCallback_Well_getExternalIdentifier(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_getExternalIdentifier<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_getExternalIdentifierPtr
newCallback_Well_getExternalIdentifier(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_getExternalIdentifier<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Well_setExternalIdentifier : public Callback_Well_setExternalIdentifier_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Well_setExternalIdentifier(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Well_setExternalIdentifierPtr
newCallback_Well_setExternalIdentifier(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_setExternalIdentifier<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_setExternalIdentifierPtr
newCallback_Well_setExternalIdentifier(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_setExternalIdentifier<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Well_setExternalIdentifierPtr
newCallback_Well_setExternalIdentifier(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_setExternalIdentifier<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_setExternalIdentifierPtr
newCallback_Well_setExternalIdentifier(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_setExternalIdentifier<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_setExternalIdentifier : public Callback_Well_setExternalIdentifier_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Well_setExternalIdentifier(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Well_setExternalIdentifierPtr
newCallback_Well_setExternalIdentifier(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_setExternalIdentifier<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_setExternalIdentifierPtr
newCallback_Well_setExternalIdentifier(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_setExternalIdentifier<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Well_setExternalIdentifierPtr
newCallback_Well_setExternalIdentifier(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_setExternalIdentifier<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_setExternalIdentifierPtr
newCallback_Well_setExternalIdentifier(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_setExternalIdentifier<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Well_getType : public Callback_Well_getType_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_Well_getType(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellPrx __proxy = ::omero::model::WellPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getType(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Well_getTypePtr
newCallback_Well_getType(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_getType<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_getTypePtr
newCallback_Well_getType(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_getType<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_getType : public Callback_Well_getType_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_Well_getType(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellPrx __proxy = ::omero::model::WellPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getType(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Well_getTypePtr
newCallback_Well_getType(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_getType<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_getTypePtr
newCallback_Well_getType(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_getType<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Well_setType : public Callback_Well_setType_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Well_setType(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Well_setTypePtr
newCallback_Well_setType(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_setType<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_setTypePtr
newCallback_Well_setType(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_setType<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Well_setTypePtr
newCallback_Well_setType(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_setType<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_setTypePtr
newCallback_Well_setType(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_setType<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_setType : public Callback_Well_setType_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Well_setType(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Well_setTypePtr
newCallback_Well_setType(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_setType<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_setTypePtr
newCallback_Well_setType(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_setType<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Well_setTypePtr
newCallback_Well_setType(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_setType<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_setTypePtr
newCallback_Well_setType(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_setType<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Well_unloadWellSamples : public Callback_Well_unloadWellSamples_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Well_unloadWellSamples(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Well_unloadWellSamplesPtr
newCallback_Well_unloadWellSamples(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_unloadWellSamples<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_unloadWellSamplesPtr
newCallback_Well_unloadWellSamples(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_unloadWellSamples<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Well_unloadWellSamplesPtr
newCallback_Well_unloadWellSamples(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_unloadWellSamples<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_unloadWellSamplesPtr
newCallback_Well_unloadWellSamples(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_unloadWellSamples<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_unloadWellSamples : public Callback_Well_unloadWellSamples_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Well_unloadWellSamples(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Well_unloadWellSamplesPtr
newCallback_Well_unloadWellSamples(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_unloadWellSamples<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_unloadWellSamplesPtr
newCallback_Well_unloadWellSamples(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_unloadWellSamples<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Well_unloadWellSamplesPtr
newCallback_Well_unloadWellSamples(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_unloadWellSamples<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_unloadWellSamplesPtr
newCallback_Well_unloadWellSamples(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_unloadWellSamples<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Well_sizeOfWellSamples : public Callback_Well_sizeOfWellSamples_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Well_sizeOfWellSamples(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellPrx __proxy = ::omero::model::WellPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfWellSamples(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Well_sizeOfWellSamplesPtr
newCallback_Well_sizeOfWellSamples(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_sizeOfWellSamples<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_sizeOfWellSamplesPtr
newCallback_Well_sizeOfWellSamples(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_sizeOfWellSamples<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_sizeOfWellSamples : public Callback_Well_sizeOfWellSamples_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Well_sizeOfWellSamples(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellPrx __proxy = ::omero::model::WellPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfWellSamples(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Well_sizeOfWellSamplesPtr
newCallback_Well_sizeOfWellSamples(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_sizeOfWellSamples<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_sizeOfWellSamplesPtr
newCallback_Well_sizeOfWellSamples(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_sizeOfWellSamples<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Well_copyWellSamples : public Callback_Well_copyWellSamples_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::WellWellSamplesSeq&);

    CallbackNC_Well_copyWellSamples(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellPrx __proxy = ::omero::model::WellPrx::uncheckedCast(__result->getProxy());
        ::omero::model::WellWellSamplesSeq __ret;
        try
        {
            __ret = __proxy->end_copyWellSamples(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Well_copyWellSamplesPtr
newCallback_Well_copyWellSamples(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::WellWellSamplesSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_copyWellSamples<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_copyWellSamplesPtr
newCallback_Well_copyWellSamples(T* instance, void (T::*cb)(const ::omero::model::WellWellSamplesSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_copyWellSamples<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_copyWellSamples : public Callback_Well_copyWellSamples_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::WellWellSamplesSeq&, const CT&);

    Callback_Well_copyWellSamples(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellPrx __proxy = ::omero::model::WellPrx::uncheckedCast(__result->getProxy());
        ::omero::model::WellWellSamplesSeq __ret;
        try
        {
            __ret = __proxy->end_copyWellSamples(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Well_copyWellSamplesPtr
newCallback_Well_copyWellSamples(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::WellWellSamplesSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_copyWellSamples<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_copyWellSamplesPtr
newCallback_Well_copyWellSamples(T* instance, void (T::*cb)(const ::omero::model::WellWellSamplesSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_copyWellSamples<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Well_addWellSample : public Callback_Well_addWellSample_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Well_addWellSample(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Well_addWellSamplePtr
newCallback_Well_addWellSample(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_addWellSample<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_addWellSamplePtr
newCallback_Well_addWellSample(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_addWellSample<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Well_addWellSamplePtr
newCallback_Well_addWellSample(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_addWellSample<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_addWellSamplePtr
newCallback_Well_addWellSample(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_addWellSample<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_addWellSample : public Callback_Well_addWellSample_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Well_addWellSample(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Well_addWellSamplePtr
newCallback_Well_addWellSample(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_addWellSample<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_addWellSamplePtr
newCallback_Well_addWellSample(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_addWellSample<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Well_addWellSamplePtr
newCallback_Well_addWellSample(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_addWellSample<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_addWellSamplePtr
newCallback_Well_addWellSample(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_addWellSample<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Well_addAllWellSampleSet : public Callback_Well_addAllWellSampleSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Well_addAllWellSampleSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Well_addAllWellSampleSetPtr
newCallback_Well_addAllWellSampleSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_addAllWellSampleSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_addAllWellSampleSetPtr
newCallback_Well_addAllWellSampleSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_addAllWellSampleSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Well_addAllWellSampleSetPtr
newCallback_Well_addAllWellSampleSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_addAllWellSampleSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_addAllWellSampleSetPtr
newCallback_Well_addAllWellSampleSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_addAllWellSampleSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_addAllWellSampleSet : public Callback_Well_addAllWellSampleSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Well_addAllWellSampleSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Well_addAllWellSampleSetPtr
newCallback_Well_addAllWellSampleSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_addAllWellSampleSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_addAllWellSampleSetPtr
newCallback_Well_addAllWellSampleSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_addAllWellSampleSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Well_addAllWellSampleSetPtr
newCallback_Well_addAllWellSampleSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_addAllWellSampleSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_addAllWellSampleSetPtr
newCallback_Well_addAllWellSampleSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_addAllWellSampleSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Well_removeWellSample : public Callback_Well_removeWellSample_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Well_removeWellSample(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Well_removeWellSamplePtr
newCallback_Well_removeWellSample(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_removeWellSample<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_removeWellSamplePtr
newCallback_Well_removeWellSample(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_removeWellSample<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Well_removeWellSamplePtr
newCallback_Well_removeWellSample(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_removeWellSample<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_removeWellSamplePtr
newCallback_Well_removeWellSample(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_removeWellSample<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_removeWellSample : public Callback_Well_removeWellSample_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Well_removeWellSample(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Well_removeWellSamplePtr
newCallback_Well_removeWellSample(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_removeWellSample<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_removeWellSamplePtr
newCallback_Well_removeWellSample(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_removeWellSample<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Well_removeWellSamplePtr
newCallback_Well_removeWellSample(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_removeWellSample<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_removeWellSamplePtr
newCallback_Well_removeWellSample(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_removeWellSample<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Well_removeAllWellSampleSet : public Callback_Well_removeAllWellSampleSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Well_removeAllWellSampleSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Well_removeAllWellSampleSetPtr
newCallback_Well_removeAllWellSampleSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_removeAllWellSampleSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_removeAllWellSampleSetPtr
newCallback_Well_removeAllWellSampleSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_removeAllWellSampleSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Well_removeAllWellSampleSetPtr
newCallback_Well_removeAllWellSampleSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_removeAllWellSampleSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_removeAllWellSampleSetPtr
newCallback_Well_removeAllWellSampleSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_removeAllWellSampleSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_removeAllWellSampleSet : public Callback_Well_removeAllWellSampleSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Well_removeAllWellSampleSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Well_removeAllWellSampleSetPtr
newCallback_Well_removeAllWellSampleSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_removeAllWellSampleSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_removeAllWellSampleSetPtr
newCallback_Well_removeAllWellSampleSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_removeAllWellSampleSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Well_removeAllWellSampleSetPtr
newCallback_Well_removeAllWellSampleSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_removeAllWellSampleSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_removeAllWellSampleSetPtr
newCallback_Well_removeAllWellSampleSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_removeAllWellSampleSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Well_clearWellSamples : public Callback_Well_clearWellSamples_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Well_clearWellSamples(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Well_clearWellSamplesPtr
newCallback_Well_clearWellSamples(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_clearWellSamples<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_clearWellSamplesPtr
newCallback_Well_clearWellSamples(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_clearWellSamples<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Well_clearWellSamplesPtr
newCallback_Well_clearWellSamples(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_clearWellSamples<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_clearWellSamplesPtr
newCallback_Well_clearWellSamples(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_clearWellSamples<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_clearWellSamples : public Callback_Well_clearWellSamples_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Well_clearWellSamples(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Well_clearWellSamplesPtr
newCallback_Well_clearWellSamples(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_clearWellSamples<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_clearWellSamplesPtr
newCallback_Well_clearWellSamples(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_clearWellSamples<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Well_clearWellSamplesPtr
newCallback_Well_clearWellSamples(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_clearWellSamples<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_clearWellSamplesPtr
newCallback_Well_clearWellSamples(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_clearWellSamples<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Well_reloadWellSamples : public Callback_Well_reloadWellSamples_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Well_reloadWellSamples(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Well_reloadWellSamplesPtr
newCallback_Well_reloadWellSamples(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_reloadWellSamples<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_reloadWellSamplesPtr
newCallback_Well_reloadWellSamples(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_reloadWellSamples<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Well_reloadWellSamplesPtr
newCallback_Well_reloadWellSamples(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_reloadWellSamples<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_reloadWellSamplesPtr
newCallback_Well_reloadWellSamples(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_reloadWellSamples<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_reloadWellSamples : public Callback_Well_reloadWellSamples_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Well_reloadWellSamples(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Well_reloadWellSamplesPtr
newCallback_Well_reloadWellSamples(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_reloadWellSamples<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_reloadWellSamplesPtr
newCallback_Well_reloadWellSamples(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_reloadWellSamples<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Well_reloadWellSamplesPtr
newCallback_Well_reloadWellSamples(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_reloadWellSamples<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_reloadWellSamplesPtr
newCallback_Well_reloadWellSamples(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_reloadWellSamples<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Well_getWellSample : public Callback_Well_getWellSample_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::WellSamplePtr&);

    CallbackNC_Well_getWellSample(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellPrx __proxy = ::omero::model::WellPrx::uncheckedCast(__result->getProxy());
        ::omero::model::WellSamplePtr __ret;
        try
        {
            __ret = __proxy->end_getWellSample(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Well_getWellSamplePtr
newCallback_Well_getWellSample(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::WellSamplePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_getWellSample<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_getWellSamplePtr
newCallback_Well_getWellSample(T* instance, void (T::*cb)(const ::omero::model::WellSamplePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_getWellSample<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_getWellSample : public Callback_Well_getWellSample_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::WellSamplePtr&, const CT&);

    Callback_Well_getWellSample(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellPrx __proxy = ::omero::model::WellPrx::uncheckedCast(__result->getProxy());
        ::omero::model::WellSamplePtr __ret;
        try
        {
            __ret = __proxy->end_getWellSample(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Well_getWellSamplePtr
newCallback_Well_getWellSample(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::WellSamplePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_getWellSample<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_getWellSamplePtr
newCallback_Well_getWellSample(T* instance, void (T::*cb)(const ::omero::model::WellSamplePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_getWellSample<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Well_setWellSample : public Callback_Well_setWellSample_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::WellSamplePtr&);

    CallbackNC_Well_setWellSample(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellPrx __proxy = ::omero::model::WellPrx::uncheckedCast(__result->getProxy());
        ::omero::model::WellSamplePtr __ret;
        try
        {
            __ret = __proxy->end_setWellSample(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Well_setWellSamplePtr
newCallback_Well_setWellSample(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::WellSamplePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_setWellSample<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_setWellSamplePtr
newCallback_Well_setWellSample(T* instance, void (T::*cb)(const ::omero::model::WellSamplePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_setWellSample<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_setWellSample : public Callback_Well_setWellSample_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::WellSamplePtr&, const CT&);

    Callback_Well_setWellSample(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellPrx __proxy = ::omero::model::WellPrx::uncheckedCast(__result->getProxy());
        ::omero::model::WellSamplePtr __ret;
        try
        {
            __ret = __proxy->end_setWellSample(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Well_setWellSamplePtr
newCallback_Well_setWellSample(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::WellSamplePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_setWellSample<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_setWellSamplePtr
newCallback_Well_setWellSample(T* instance, void (T::*cb)(const ::omero::model::WellSamplePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_setWellSample<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Well_getPrimaryWellSample : public Callback_Well_getPrimaryWellSample_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::WellSamplePtr&);

    CallbackNC_Well_getPrimaryWellSample(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellPrx __proxy = ::omero::model::WellPrx::uncheckedCast(__result->getProxy());
        ::omero::model::WellSamplePtr __ret;
        try
        {
            __ret = __proxy->end_getPrimaryWellSample(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Well_getPrimaryWellSamplePtr
newCallback_Well_getPrimaryWellSample(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::WellSamplePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_getPrimaryWellSample<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_getPrimaryWellSamplePtr
newCallback_Well_getPrimaryWellSample(T* instance, void (T::*cb)(const ::omero::model::WellSamplePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_getPrimaryWellSample<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_getPrimaryWellSample : public Callback_Well_getPrimaryWellSample_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::WellSamplePtr&, const CT&);

    Callback_Well_getPrimaryWellSample(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellPrx __proxy = ::omero::model::WellPrx::uncheckedCast(__result->getProxy());
        ::omero::model::WellSamplePtr __ret;
        try
        {
            __ret = __proxy->end_getPrimaryWellSample(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Well_getPrimaryWellSamplePtr
newCallback_Well_getPrimaryWellSample(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::WellSamplePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_getPrimaryWellSample<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_getPrimaryWellSamplePtr
newCallback_Well_getPrimaryWellSample(T* instance, void (T::*cb)(const ::omero::model::WellSamplePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_getPrimaryWellSample<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Well_setPrimaryWellSample : public Callback_Well_setPrimaryWellSample_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::WellSamplePtr&);

    CallbackNC_Well_setPrimaryWellSample(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellPrx __proxy = ::omero::model::WellPrx::uncheckedCast(__result->getProxy());
        ::omero::model::WellSamplePtr __ret;
        try
        {
            __ret = __proxy->end_setPrimaryWellSample(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Well_setPrimaryWellSamplePtr
newCallback_Well_setPrimaryWellSample(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::WellSamplePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_setPrimaryWellSample<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_setPrimaryWellSamplePtr
newCallback_Well_setPrimaryWellSample(T* instance, void (T::*cb)(const ::omero::model::WellSamplePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_setPrimaryWellSample<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_setPrimaryWellSample : public Callback_Well_setPrimaryWellSample_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::WellSamplePtr&, const CT&);

    Callback_Well_setPrimaryWellSample(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellPrx __proxy = ::omero::model::WellPrx::uncheckedCast(__result->getProxy());
        ::omero::model::WellSamplePtr __ret;
        try
        {
            __ret = __proxy->end_setPrimaryWellSample(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Well_setPrimaryWellSamplePtr
newCallback_Well_setPrimaryWellSample(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::WellSamplePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_setPrimaryWellSample<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_setPrimaryWellSamplePtr
newCallback_Well_setPrimaryWellSample(T* instance, void (T::*cb)(const ::omero::model::WellSamplePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_setPrimaryWellSample<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Well_getPlate : public Callback_Well_getPlate_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::PlatePtr&);

    CallbackNC_Well_getPlate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellPrx __proxy = ::omero::model::WellPrx::uncheckedCast(__result->getProxy());
        ::omero::model::PlatePtr __ret;
        try
        {
            __ret = __proxy->end_getPlate(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Well_getPlatePtr
newCallback_Well_getPlate(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PlatePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_getPlate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_getPlatePtr
newCallback_Well_getPlate(T* instance, void (T::*cb)(const ::omero::model::PlatePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_getPlate<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_getPlate : public Callback_Well_getPlate_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::PlatePtr&, const CT&);

    Callback_Well_getPlate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellPrx __proxy = ::omero::model::WellPrx::uncheckedCast(__result->getProxy());
        ::omero::model::PlatePtr __ret;
        try
        {
            __ret = __proxy->end_getPlate(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Well_getPlatePtr
newCallback_Well_getPlate(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PlatePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_getPlate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_getPlatePtr
newCallback_Well_getPlate(T* instance, void (T::*cb)(const ::omero::model::PlatePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_getPlate<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Well_setPlate : public Callback_Well_setPlate_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Well_setPlate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Well_setPlatePtr
newCallback_Well_setPlate(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_setPlate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_setPlatePtr
newCallback_Well_setPlate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_setPlate<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Well_setPlatePtr
newCallback_Well_setPlate(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_setPlate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_setPlatePtr
newCallback_Well_setPlate(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_setPlate<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_setPlate : public Callback_Well_setPlate_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Well_setPlate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Well_setPlatePtr
newCallback_Well_setPlate(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_setPlate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_setPlatePtr
newCallback_Well_setPlate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_setPlate<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Well_setPlatePtr
newCallback_Well_setPlate(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_setPlate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_setPlatePtr
newCallback_Well_setPlate(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_setPlate<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Well_unloadAnnotationLinks : public Callback_Well_unloadAnnotationLinks_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Well_unloadAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Well_unloadAnnotationLinksPtr
newCallback_Well_unloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_unloadAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_unloadAnnotationLinksPtr
newCallback_Well_unloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_unloadAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Well_unloadAnnotationLinksPtr
newCallback_Well_unloadAnnotationLinks(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_unloadAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_unloadAnnotationLinksPtr
newCallback_Well_unloadAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_unloadAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_unloadAnnotationLinks : public Callback_Well_unloadAnnotationLinks_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Well_unloadAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Well_unloadAnnotationLinksPtr
newCallback_Well_unloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_unloadAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_unloadAnnotationLinksPtr
newCallback_Well_unloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_unloadAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Well_unloadAnnotationLinksPtr
newCallback_Well_unloadAnnotationLinks(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_unloadAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_unloadAnnotationLinksPtr
newCallback_Well_unloadAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_unloadAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Well_sizeOfAnnotationLinks : public Callback_Well_sizeOfAnnotationLinks_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Well_sizeOfAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellPrx __proxy = ::omero::model::WellPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfAnnotationLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Well_sizeOfAnnotationLinksPtr
newCallback_Well_sizeOfAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_sizeOfAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_sizeOfAnnotationLinksPtr
newCallback_Well_sizeOfAnnotationLinks(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_sizeOfAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_sizeOfAnnotationLinks : public Callback_Well_sizeOfAnnotationLinks_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Well_sizeOfAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellPrx __proxy = ::omero::model::WellPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfAnnotationLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Well_sizeOfAnnotationLinksPtr
newCallback_Well_sizeOfAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_sizeOfAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_sizeOfAnnotationLinksPtr
newCallback_Well_sizeOfAnnotationLinks(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_sizeOfAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Well_copyAnnotationLinks : public Callback_Well_copyAnnotationLinks_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::WellAnnotationLinksSeq&);

    CallbackNC_Well_copyAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellPrx __proxy = ::omero::model::WellPrx::uncheckedCast(__result->getProxy());
        ::omero::model::WellAnnotationLinksSeq __ret;
        try
        {
            __ret = __proxy->end_copyAnnotationLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Well_copyAnnotationLinksPtr
newCallback_Well_copyAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::WellAnnotationLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_copyAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_copyAnnotationLinksPtr
newCallback_Well_copyAnnotationLinks(T* instance, void (T::*cb)(const ::omero::model::WellAnnotationLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_copyAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_copyAnnotationLinks : public Callback_Well_copyAnnotationLinks_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::WellAnnotationLinksSeq&, const CT&);

    Callback_Well_copyAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellPrx __proxy = ::omero::model::WellPrx::uncheckedCast(__result->getProxy());
        ::omero::model::WellAnnotationLinksSeq __ret;
        try
        {
            __ret = __proxy->end_copyAnnotationLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Well_copyAnnotationLinksPtr
newCallback_Well_copyAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::WellAnnotationLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_copyAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_copyAnnotationLinksPtr
newCallback_Well_copyAnnotationLinks(T* instance, void (T::*cb)(const ::omero::model::WellAnnotationLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_copyAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Well_addWellAnnotationLink : public Callback_Well_addWellAnnotationLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Well_addWellAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Well_addWellAnnotationLinkPtr
newCallback_Well_addWellAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_addWellAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_addWellAnnotationLinkPtr
newCallback_Well_addWellAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_addWellAnnotationLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Well_addWellAnnotationLinkPtr
newCallback_Well_addWellAnnotationLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_addWellAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_addWellAnnotationLinkPtr
newCallback_Well_addWellAnnotationLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_addWellAnnotationLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_addWellAnnotationLink : public Callback_Well_addWellAnnotationLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Well_addWellAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Well_addWellAnnotationLinkPtr
newCallback_Well_addWellAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_addWellAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_addWellAnnotationLinkPtr
newCallback_Well_addWellAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_addWellAnnotationLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Well_addWellAnnotationLinkPtr
newCallback_Well_addWellAnnotationLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_addWellAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_addWellAnnotationLinkPtr
newCallback_Well_addWellAnnotationLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_addWellAnnotationLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Well_addAllWellAnnotationLinkSet : public Callback_Well_addAllWellAnnotationLinkSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Well_addAllWellAnnotationLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Well_addAllWellAnnotationLinkSetPtr
newCallback_Well_addAllWellAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_addAllWellAnnotationLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_addAllWellAnnotationLinkSetPtr
newCallback_Well_addAllWellAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_addAllWellAnnotationLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Well_addAllWellAnnotationLinkSetPtr
newCallback_Well_addAllWellAnnotationLinkSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_addAllWellAnnotationLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_addAllWellAnnotationLinkSetPtr
newCallback_Well_addAllWellAnnotationLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_addAllWellAnnotationLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_addAllWellAnnotationLinkSet : public Callback_Well_addAllWellAnnotationLinkSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Well_addAllWellAnnotationLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Well_addAllWellAnnotationLinkSetPtr
newCallback_Well_addAllWellAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_addAllWellAnnotationLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_addAllWellAnnotationLinkSetPtr
newCallback_Well_addAllWellAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_addAllWellAnnotationLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Well_addAllWellAnnotationLinkSetPtr
newCallback_Well_addAllWellAnnotationLinkSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_addAllWellAnnotationLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_addAllWellAnnotationLinkSetPtr
newCallback_Well_addAllWellAnnotationLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_addAllWellAnnotationLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Well_removeWellAnnotationLink : public Callback_Well_removeWellAnnotationLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Well_removeWellAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Well_removeWellAnnotationLinkPtr
newCallback_Well_removeWellAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_removeWellAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_removeWellAnnotationLinkPtr
newCallback_Well_removeWellAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_removeWellAnnotationLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Well_removeWellAnnotationLinkPtr
newCallback_Well_removeWellAnnotationLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_removeWellAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_removeWellAnnotationLinkPtr
newCallback_Well_removeWellAnnotationLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_removeWellAnnotationLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_removeWellAnnotationLink : public Callback_Well_removeWellAnnotationLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Well_removeWellAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Well_removeWellAnnotationLinkPtr
newCallback_Well_removeWellAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_removeWellAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_removeWellAnnotationLinkPtr
newCallback_Well_removeWellAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_removeWellAnnotationLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Well_removeWellAnnotationLinkPtr
newCallback_Well_removeWellAnnotationLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_removeWellAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_removeWellAnnotationLinkPtr
newCallback_Well_removeWellAnnotationLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_removeWellAnnotationLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Well_removeAllWellAnnotationLinkSet : public Callback_Well_removeAllWellAnnotationLinkSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Well_removeAllWellAnnotationLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Well_removeAllWellAnnotationLinkSetPtr
newCallback_Well_removeAllWellAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_removeAllWellAnnotationLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_removeAllWellAnnotationLinkSetPtr
newCallback_Well_removeAllWellAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_removeAllWellAnnotationLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Well_removeAllWellAnnotationLinkSetPtr
newCallback_Well_removeAllWellAnnotationLinkSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_removeAllWellAnnotationLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_removeAllWellAnnotationLinkSetPtr
newCallback_Well_removeAllWellAnnotationLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_removeAllWellAnnotationLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_removeAllWellAnnotationLinkSet : public Callback_Well_removeAllWellAnnotationLinkSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Well_removeAllWellAnnotationLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Well_removeAllWellAnnotationLinkSetPtr
newCallback_Well_removeAllWellAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_removeAllWellAnnotationLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_removeAllWellAnnotationLinkSetPtr
newCallback_Well_removeAllWellAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_removeAllWellAnnotationLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Well_removeAllWellAnnotationLinkSetPtr
newCallback_Well_removeAllWellAnnotationLinkSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_removeAllWellAnnotationLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_removeAllWellAnnotationLinkSetPtr
newCallback_Well_removeAllWellAnnotationLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_removeAllWellAnnotationLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Well_clearAnnotationLinks : public Callback_Well_clearAnnotationLinks_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Well_clearAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Well_clearAnnotationLinksPtr
newCallback_Well_clearAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_clearAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_clearAnnotationLinksPtr
newCallback_Well_clearAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_clearAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Well_clearAnnotationLinksPtr
newCallback_Well_clearAnnotationLinks(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_clearAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_clearAnnotationLinksPtr
newCallback_Well_clearAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_clearAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_clearAnnotationLinks : public Callback_Well_clearAnnotationLinks_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Well_clearAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Well_clearAnnotationLinksPtr
newCallback_Well_clearAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_clearAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_clearAnnotationLinksPtr
newCallback_Well_clearAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_clearAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Well_clearAnnotationLinksPtr
newCallback_Well_clearAnnotationLinks(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_clearAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_clearAnnotationLinksPtr
newCallback_Well_clearAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_clearAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Well_reloadAnnotationLinks : public Callback_Well_reloadAnnotationLinks_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Well_reloadAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Well_reloadAnnotationLinksPtr
newCallback_Well_reloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_reloadAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_reloadAnnotationLinksPtr
newCallback_Well_reloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_reloadAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Well_reloadAnnotationLinksPtr
newCallback_Well_reloadAnnotationLinks(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_reloadAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_reloadAnnotationLinksPtr
newCallback_Well_reloadAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_reloadAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_reloadAnnotationLinks : public Callback_Well_reloadAnnotationLinks_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Well_reloadAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Well_reloadAnnotationLinksPtr
newCallback_Well_reloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_reloadAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_reloadAnnotationLinksPtr
newCallback_Well_reloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_reloadAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Well_reloadAnnotationLinksPtr
newCallback_Well_reloadAnnotationLinks(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_reloadAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_reloadAnnotationLinksPtr
newCallback_Well_reloadAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_reloadAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Well_getAnnotationLinksCountPerOwner : public Callback_Well_getAnnotationLinksCountPerOwner_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::sys::CountMap&);

    CallbackNC_Well_getAnnotationLinksCountPerOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellPrx __proxy = ::omero::model::WellPrx::uncheckedCast(__result->getProxy());
        ::omero::sys::CountMap __ret;
        try
        {
            __ret = __proxy->end_getAnnotationLinksCountPerOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Well_getAnnotationLinksCountPerOwnerPtr
newCallback_Well_getAnnotationLinksCountPerOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::CountMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_getAnnotationLinksCountPerOwner<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_getAnnotationLinksCountPerOwnerPtr
newCallback_Well_getAnnotationLinksCountPerOwner(T* instance, void (T::*cb)(const ::omero::sys::CountMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_getAnnotationLinksCountPerOwner<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_getAnnotationLinksCountPerOwner : public Callback_Well_getAnnotationLinksCountPerOwner_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::sys::CountMap&, const CT&);

    Callback_Well_getAnnotationLinksCountPerOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellPrx __proxy = ::omero::model::WellPrx::uncheckedCast(__result->getProxy());
        ::omero::sys::CountMap __ret;
        try
        {
            __ret = __proxy->end_getAnnotationLinksCountPerOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Well_getAnnotationLinksCountPerOwnerPtr
newCallback_Well_getAnnotationLinksCountPerOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::CountMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_getAnnotationLinksCountPerOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_getAnnotationLinksCountPerOwnerPtr
newCallback_Well_getAnnotationLinksCountPerOwner(T* instance, void (T::*cb)(const ::omero::sys::CountMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_getAnnotationLinksCountPerOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Well_linkAnnotation : public Callback_Well_linkAnnotation_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::WellAnnotationLinkPtr&);

    CallbackNC_Well_linkAnnotation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellPrx __proxy = ::omero::model::WellPrx::uncheckedCast(__result->getProxy());
        ::omero::model::WellAnnotationLinkPtr __ret;
        try
        {
            __ret = __proxy->end_linkAnnotation(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Well_linkAnnotationPtr
newCallback_Well_linkAnnotation(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::WellAnnotationLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_linkAnnotation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_linkAnnotationPtr
newCallback_Well_linkAnnotation(T* instance, void (T::*cb)(const ::omero::model::WellAnnotationLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_linkAnnotation<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_linkAnnotation : public Callback_Well_linkAnnotation_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::WellAnnotationLinkPtr&, const CT&);

    Callback_Well_linkAnnotation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellPrx __proxy = ::omero::model::WellPrx::uncheckedCast(__result->getProxy());
        ::omero::model::WellAnnotationLinkPtr __ret;
        try
        {
            __ret = __proxy->end_linkAnnotation(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Well_linkAnnotationPtr
newCallback_Well_linkAnnotation(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::WellAnnotationLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_linkAnnotation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_linkAnnotationPtr
newCallback_Well_linkAnnotation(T* instance, void (T::*cb)(const ::omero::model::WellAnnotationLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_linkAnnotation<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Well_addWellAnnotationLinkToBoth : public Callback_Well_addWellAnnotationLinkToBoth_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Well_addWellAnnotationLinkToBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Well_addWellAnnotationLinkToBothPtr
newCallback_Well_addWellAnnotationLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_addWellAnnotationLinkToBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_addWellAnnotationLinkToBothPtr
newCallback_Well_addWellAnnotationLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_addWellAnnotationLinkToBoth<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Well_addWellAnnotationLinkToBothPtr
newCallback_Well_addWellAnnotationLinkToBoth(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_addWellAnnotationLinkToBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_addWellAnnotationLinkToBothPtr
newCallback_Well_addWellAnnotationLinkToBoth(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_addWellAnnotationLinkToBoth<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_addWellAnnotationLinkToBoth : public Callback_Well_addWellAnnotationLinkToBoth_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Well_addWellAnnotationLinkToBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Well_addWellAnnotationLinkToBothPtr
newCallback_Well_addWellAnnotationLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_addWellAnnotationLinkToBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_addWellAnnotationLinkToBothPtr
newCallback_Well_addWellAnnotationLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_addWellAnnotationLinkToBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Well_addWellAnnotationLinkToBothPtr
newCallback_Well_addWellAnnotationLinkToBoth(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_addWellAnnotationLinkToBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_addWellAnnotationLinkToBothPtr
newCallback_Well_addWellAnnotationLinkToBoth(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_addWellAnnotationLinkToBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Well_findWellAnnotationLink : public Callback_Well_findWellAnnotationLink_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::WellAnnotationLinksSeq&);

    CallbackNC_Well_findWellAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellPrx __proxy = ::omero::model::WellPrx::uncheckedCast(__result->getProxy());
        ::omero::model::WellAnnotationLinksSeq __ret;
        try
        {
            __ret = __proxy->end_findWellAnnotationLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Well_findWellAnnotationLinkPtr
newCallback_Well_findWellAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::WellAnnotationLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_findWellAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_findWellAnnotationLinkPtr
newCallback_Well_findWellAnnotationLink(T* instance, void (T::*cb)(const ::omero::model::WellAnnotationLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_findWellAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_findWellAnnotationLink : public Callback_Well_findWellAnnotationLink_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::WellAnnotationLinksSeq&, const CT&);

    Callback_Well_findWellAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellPrx __proxy = ::omero::model::WellPrx::uncheckedCast(__result->getProxy());
        ::omero::model::WellAnnotationLinksSeq __ret;
        try
        {
            __ret = __proxy->end_findWellAnnotationLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Well_findWellAnnotationLinkPtr
newCallback_Well_findWellAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::WellAnnotationLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_findWellAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_findWellAnnotationLinkPtr
newCallback_Well_findWellAnnotationLink(T* instance, void (T::*cb)(const ::omero::model::WellAnnotationLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_findWellAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Well_unlinkAnnotation : public Callback_Well_unlinkAnnotation_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Well_unlinkAnnotation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Well_unlinkAnnotationPtr
newCallback_Well_unlinkAnnotation(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_unlinkAnnotation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_unlinkAnnotationPtr
newCallback_Well_unlinkAnnotation(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_unlinkAnnotation<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Well_unlinkAnnotationPtr
newCallback_Well_unlinkAnnotation(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_unlinkAnnotation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_unlinkAnnotationPtr
newCallback_Well_unlinkAnnotation(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_unlinkAnnotation<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_unlinkAnnotation : public Callback_Well_unlinkAnnotation_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Well_unlinkAnnotation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Well_unlinkAnnotationPtr
newCallback_Well_unlinkAnnotation(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_unlinkAnnotation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_unlinkAnnotationPtr
newCallback_Well_unlinkAnnotation(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_unlinkAnnotation<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Well_unlinkAnnotationPtr
newCallback_Well_unlinkAnnotation(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_unlinkAnnotation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_unlinkAnnotationPtr
newCallback_Well_unlinkAnnotation(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_unlinkAnnotation<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Well_removeWellAnnotationLinkFromBoth : public Callback_Well_removeWellAnnotationLinkFromBoth_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Well_removeWellAnnotationLinkFromBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Well_removeWellAnnotationLinkFromBothPtr
newCallback_Well_removeWellAnnotationLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_removeWellAnnotationLinkFromBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_removeWellAnnotationLinkFromBothPtr
newCallback_Well_removeWellAnnotationLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_removeWellAnnotationLinkFromBoth<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Well_removeWellAnnotationLinkFromBothPtr
newCallback_Well_removeWellAnnotationLinkFromBoth(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_removeWellAnnotationLinkFromBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_removeWellAnnotationLinkFromBothPtr
newCallback_Well_removeWellAnnotationLinkFromBoth(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_removeWellAnnotationLinkFromBoth<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_removeWellAnnotationLinkFromBoth : public Callback_Well_removeWellAnnotationLinkFromBoth_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Well_removeWellAnnotationLinkFromBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Well_removeWellAnnotationLinkFromBothPtr
newCallback_Well_removeWellAnnotationLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_removeWellAnnotationLinkFromBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_removeWellAnnotationLinkFromBothPtr
newCallback_Well_removeWellAnnotationLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_removeWellAnnotationLinkFromBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Well_removeWellAnnotationLinkFromBothPtr
newCallback_Well_removeWellAnnotationLinkFromBoth(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_removeWellAnnotationLinkFromBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_removeWellAnnotationLinkFromBothPtr
newCallback_Well_removeWellAnnotationLinkFromBoth(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_removeWellAnnotationLinkFromBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Well_linkedAnnotationList : public Callback_Well_linkedAnnotationList_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::WellLinkedAnnotationSeq&);

    CallbackNC_Well_linkedAnnotationList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellPrx __proxy = ::omero::model::WellPrx::uncheckedCast(__result->getProxy());
        ::omero::model::WellLinkedAnnotationSeq __ret;
        try
        {
            __ret = __proxy->end_linkedAnnotationList(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Well_linkedAnnotationListPtr
newCallback_Well_linkedAnnotationList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::WellLinkedAnnotationSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_linkedAnnotationList<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Well_linkedAnnotationListPtr
newCallback_Well_linkedAnnotationList(T* instance, void (T::*cb)(const ::omero::model::WellLinkedAnnotationSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Well_linkedAnnotationList<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Well_linkedAnnotationList : public Callback_Well_linkedAnnotationList_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::WellLinkedAnnotationSeq&, const CT&);

    Callback_Well_linkedAnnotationList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellPrx __proxy = ::omero::model::WellPrx::uncheckedCast(__result->getProxy());
        ::omero::model::WellLinkedAnnotationSeq __ret;
        try
        {
            __ret = __proxy->end_linkedAnnotationList(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Well_linkedAnnotationListPtr
newCallback_Well_linkedAnnotationList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::WellLinkedAnnotationSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_linkedAnnotationList<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Well_linkedAnnotationListPtr
newCallback_Well_linkedAnnotationList(T* instance, void (T::*cb)(const ::omero::model::WellLinkedAnnotationSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Well_linkedAnnotationList<T, CT>(instance, cb, excb, sentcb);
}

}

}

#endif
