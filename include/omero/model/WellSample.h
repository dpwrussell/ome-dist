// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `WellSample.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_WellSample_h__
#define __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_WellSample_h__

#include <Ice/LocalObjectF.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/StreamF.h>
#include <omero/model/IObject.h>
#include <omero/RTypes.h>
#include <omero/System.h>
#include <omero/Collections.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace omero
{

namespace model
{

class PlateAcquisition;

class Well;

class Image;

class WellSampleAnnotationLink;

class Annotation;

class Details;

class WellSample;

}

}

}

namespace omero
{

namespace model
{

class PlateAcquisition;
bool operator==(const PlateAcquisition&, const PlateAcquisition&);
bool operator<(const PlateAcquisition&, const PlateAcquisition&);

class Well;
bool operator==(const Well&, const Well&);
bool operator<(const Well&, const Well&);

class Image;
bool operator==(const Image&, const Image&);
bool operator<(const Image&, const Image&);

class WellSampleAnnotationLink;
bool operator==(const WellSampleAnnotationLink&, const WellSampleAnnotationLink&);
bool operator<(const WellSampleAnnotationLink&, const WellSampleAnnotationLink&);

class Annotation;
bool operator==(const Annotation&, const Annotation&);
bool operator<(const Annotation&, const Annotation&);

class Details;
bool operator==(const Details&, const Details&);
bool operator<(const Details&, const Details&);

class WellSample;
bool operator==(const WellSample&, const WellSample&);
bool operator<(const WellSample&, const WellSample&);

}

}

namespace IceInternal
{

::Ice::Object* upCast(::omero::model::PlateAcquisition*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::PlateAcquisition*);

::Ice::Object* upCast(::omero::model::Well*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Well*);

::Ice::Object* upCast(::omero::model::Image*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Image*);

::Ice::Object* upCast(::omero::model::WellSampleAnnotationLink*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::WellSampleAnnotationLink*);

::Ice::Object* upCast(::omero::model::Annotation*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Annotation*);

::Ice::Object* upCast(::omero::model::Details*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Details*);

::Ice::Object* upCast(::omero::model::WellSample*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::WellSample*);

}

namespace omero
{

namespace model
{

typedef ::IceInternal::Handle< ::omero::model::PlateAcquisition> PlateAcquisitionPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::PlateAcquisition> PlateAcquisitionPrx;

void __read(::IceInternal::BasicStream*, PlateAcquisitionPrx&);
void __patch__PlateAcquisitionPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::Well> WellPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Well> WellPrx;

void __read(::IceInternal::BasicStream*, WellPrx&);
void __patch__WellPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::Image> ImagePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Image> ImagePrx;

void __read(::IceInternal::BasicStream*, ImagePrx&);
void __patch__ImagePtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::WellSampleAnnotationLink> WellSampleAnnotationLinkPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::WellSampleAnnotationLink> WellSampleAnnotationLinkPrx;

void __read(::IceInternal::BasicStream*, WellSampleAnnotationLinkPrx&);
void __patch__WellSampleAnnotationLinkPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::Annotation> AnnotationPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Annotation> AnnotationPrx;

void __read(::IceInternal::BasicStream*, AnnotationPrx&);
void __patch__AnnotationPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::Details> DetailsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Details> DetailsPrx;

void __read(::IceInternal::BasicStream*, DetailsPrx&);
void __patch__DetailsPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::WellSample> WellSamplePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::WellSample> WellSamplePrx;

void __read(::IceInternal::BasicStream*, WellSamplePrx&);
void __patch__WellSamplePtr(void*, ::Ice::ObjectPtr&);

}

}

namespace omero
{

namespace model
{

typedef ::std::vector< ::omero::model::WellSampleAnnotationLinkPtr> WellSampleAnnotationLinksSeq;
void __writeWellSampleAnnotationLinksSeq(::IceInternal::BasicStream*, const ::omero::model::WellSampleAnnotationLinkPtr*, const ::omero::model::WellSampleAnnotationLinkPtr*);
void __readWellSampleAnnotationLinksSeq(::IceInternal::BasicStream*, WellSampleAnnotationLinksSeq&);

typedef ::std::vector< ::omero::model::AnnotationPtr> WellSampleLinkedAnnotationSeq;
void __writeWellSampleLinkedAnnotationSeq(::IceInternal::BasicStream*, const ::omero::model::AnnotationPtr*, const ::omero::model::AnnotationPtr*);
void __readWellSampleLinkedAnnotationSeq(::IceInternal::BasicStream*, WellSampleLinkedAnnotationSeq&);

}

}

namespace omero
{

namespace model
{

class Callback_WellSample_getVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_WellSample_getVersion_Base> Callback_WellSample_getVersionPtr;

class Callback_WellSample_setVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_WellSample_setVersion_Base> Callback_WellSample_setVersionPtr;

class Callback_WellSample_getPosX_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_WellSample_getPosX_Base> Callback_WellSample_getPosXPtr;

class Callback_WellSample_setPosX_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_WellSample_setPosX_Base> Callback_WellSample_setPosXPtr;

class Callback_WellSample_getPosY_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_WellSample_getPosY_Base> Callback_WellSample_getPosYPtr;

class Callback_WellSample_setPosY_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_WellSample_setPosY_Base> Callback_WellSample_setPosYPtr;

class Callback_WellSample_getTimepoint_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_WellSample_getTimepoint_Base> Callback_WellSample_getTimepointPtr;

class Callback_WellSample_setTimepoint_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_WellSample_setTimepoint_Base> Callback_WellSample_setTimepointPtr;

class Callback_WellSample_getPlateAcquisition_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_WellSample_getPlateAcquisition_Base> Callback_WellSample_getPlateAcquisitionPtr;

class Callback_WellSample_setPlateAcquisition_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_WellSample_setPlateAcquisition_Base> Callback_WellSample_setPlateAcquisitionPtr;

class Callback_WellSample_getWell_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_WellSample_getWell_Base> Callback_WellSample_getWellPtr;

class Callback_WellSample_setWell_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_WellSample_setWell_Base> Callback_WellSample_setWellPtr;

class Callback_WellSample_getImage_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_WellSample_getImage_Base> Callback_WellSample_getImagePtr;

class Callback_WellSample_setImage_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_WellSample_setImage_Base> Callback_WellSample_setImagePtr;

class Callback_WellSample_unloadAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_WellSample_unloadAnnotationLinks_Base> Callback_WellSample_unloadAnnotationLinksPtr;

class Callback_WellSample_sizeOfAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_WellSample_sizeOfAnnotationLinks_Base> Callback_WellSample_sizeOfAnnotationLinksPtr;

class Callback_WellSample_copyAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_WellSample_copyAnnotationLinks_Base> Callback_WellSample_copyAnnotationLinksPtr;

class Callback_WellSample_addWellSampleAnnotationLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_WellSample_addWellSampleAnnotationLink_Base> Callback_WellSample_addWellSampleAnnotationLinkPtr;

class Callback_WellSample_addAllWellSampleAnnotationLinkSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_WellSample_addAllWellSampleAnnotationLinkSet_Base> Callback_WellSample_addAllWellSampleAnnotationLinkSetPtr;

class Callback_WellSample_removeWellSampleAnnotationLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_WellSample_removeWellSampleAnnotationLink_Base> Callback_WellSample_removeWellSampleAnnotationLinkPtr;

class Callback_WellSample_removeAllWellSampleAnnotationLinkSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_WellSample_removeAllWellSampleAnnotationLinkSet_Base> Callback_WellSample_removeAllWellSampleAnnotationLinkSetPtr;

class Callback_WellSample_clearAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_WellSample_clearAnnotationLinks_Base> Callback_WellSample_clearAnnotationLinksPtr;

class Callback_WellSample_reloadAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_WellSample_reloadAnnotationLinks_Base> Callback_WellSample_reloadAnnotationLinksPtr;

class Callback_WellSample_getAnnotationLinksCountPerOwner_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_WellSample_getAnnotationLinksCountPerOwner_Base> Callback_WellSample_getAnnotationLinksCountPerOwnerPtr;

class Callback_WellSample_linkAnnotation_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_WellSample_linkAnnotation_Base> Callback_WellSample_linkAnnotationPtr;

class Callback_WellSample_addWellSampleAnnotationLinkToBoth_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_WellSample_addWellSampleAnnotationLinkToBoth_Base> Callback_WellSample_addWellSampleAnnotationLinkToBothPtr;

class Callback_WellSample_findWellSampleAnnotationLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_WellSample_findWellSampleAnnotationLink_Base> Callback_WellSample_findWellSampleAnnotationLinkPtr;

class Callback_WellSample_unlinkAnnotation_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_WellSample_unlinkAnnotation_Base> Callback_WellSample_unlinkAnnotationPtr;

class Callback_WellSample_removeWellSampleAnnotationLinkFromBoth_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_WellSample_removeWellSampleAnnotationLinkFromBoth_Base> Callback_WellSample_removeWellSampleAnnotationLinkFromBothPtr;

class Callback_WellSample_linkedAnnotationList_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_WellSample_linkedAnnotationList_Base> Callback_WellSample_linkedAnnotationListPtr;

}

}

namespace IceProxy
{

namespace omero
{

namespace model
{

class WellSample : virtual public ::IceProxy::omero::model::IObject
{
public:

    ::omero::RIntPtr getVersion()
    {
        return getVersion(0);
    }
    ::omero::RIntPtr getVersion(const ::Ice::Context& __ctx)
    {
        return getVersion(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getVersion()
    {
        return begin_getVersion(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx)
    {
        return begin_getVersion(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::omero::model::Callback_WellSample_getVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx, const ::omero::model::Callback_WellSample_getVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(&__ctx, __del, __cookie);
    }

    ::omero::RIntPtr end_getVersion(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RIntPtr getVersion(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setVersion(const ::omero::RIntPtr& theVersion)
    {
        setVersion(theVersion, 0);
    }
    void setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx)
    {
        setVersion(theVersion, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion)
    {
        return begin_setVersion(theVersion, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx)
    {
        return begin_setVersion(theVersion, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::omero::model::Callback_WellSample_setVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::omero::model::Callback_WellSample_setVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, &__ctx, __del, __cookie);
    }

    void end_setVersion(const ::Ice::AsyncResultPtr&);
    
private:

    void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RDoublePtr getPosX()
    {
        return getPosX(0);
    }
    ::omero::RDoublePtr getPosX(const ::Ice::Context& __ctx)
    {
        return getPosX(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getPosX()
    {
        return begin_getPosX(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPosX(const ::Ice::Context& __ctx)
    {
        return begin_getPosX(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPosX(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPosX(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPosX(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPosX(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPosX(const ::omero::model::Callback_WellSample_getPosXPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPosX(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPosX(const ::Ice::Context& __ctx, const ::omero::model::Callback_WellSample_getPosXPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPosX(&__ctx, __del, __cookie);
    }

    ::omero::RDoublePtr end_getPosX(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RDoublePtr getPosX(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getPosX(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setPosX(const ::omero::RDoublePtr& thePosX)
    {
        setPosX(thePosX, 0);
    }
    void setPosX(const ::omero::RDoublePtr& thePosX, const ::Ice::Context& __ctx)
    {
        setPosX(thePosX, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setPosX(const ::omero::RDoublePtr& thePosX)
    {
        return begin_setPosX(thePosX, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPosX(const ::omero::RDoublePtr& thePosX, const ::Ice::Context& __ctx)
    {
        return begin_setPosX(thePosX, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPosX(const ::omero::RDoublePtr& thePosX, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPosX(thePosX, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPosX(const ::omero::RDoublePtr& thePosX, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPosX(thePosX, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPosX(const ::omero::RDoublePtr& thePosX, const ::omero::model::Callback_WellSample_setPosXPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPosX(thePosX, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPosX(const ::omero::RDoublePtr& thePosX, const ::Ice::Context& __ctx, const ::omero::model::Callback_WellSample_setPosXPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPosX(thePosX, &__ctx, __del, __cookie);
    }

    void end_setPosX(const ::Ice::AsyncResultPtr&);
    
private:

    void setPosX(const ::omero::RDoublePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setPosX(const ::omero::RDoublePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RDoublePtr getPosY()
    {
        return getPosY(0);
    }
    ::omero::RDoublePtr getPosY(const ::Ice::Context& __ctx)
    {
        return getPosY(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getPosY()
    {
        return begin_getPosY(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPosY(const ::Ice::Context& __ctx)
    {
        return begin_getPosY(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPosY(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPosY(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPosY(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPosY(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPosY(const ::omero::model::Callback_WellSample_getPosYPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPosY(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPosY(const ::Ice::Context& __ctx, const ::omero::model::Callback_WellSample_getPosYPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPosY(&__ctx, __del, __cookie);
    }

    ::omero::RDoublePtr end_getPosY(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RDoublePtr getPosY(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getPosY(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setPosY(const ::omero::RDoublePtr& thePosY)
    {
        setPosY(thePosY, 0);
    }
    void setPosY(const ::omero::RDoublePtr& thePosY, const ::Ice::Context& __ctx)
    {
        setPosY(thePosY, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setPosY(const ::omero::RDoublePtr& thePosY)
    {
        return begin_setPosY(thePosY, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPosY(const ::omero::RDoublePtr& thePosY, const ::Ice::Context& __ctx)
    {
        return begin_setPosY(thePosY, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPosY(const ::omero::RDoublePtr& thePosY, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPosY(thePosY, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPosY(const ::omero::RDoublePtr& thePosY, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPosY(thePosY, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPosY(const ::omero::RDoublePtr& thePosY, const ::omero::model::Callback_WellSample_setPosYPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPosY(thePosY, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPosY(const ::omero::RDoublePtr& thePosY, const ::Ice::Context& __ctx, const ::omero::model::Callback_WellSample_setPosYPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPosY(thePosY, &__ctx, __del, __cookie);
    }

    void end_setPosY(const ::Ice::AsyncResultPtr&);
    
private:

    void setPosY(const ::omero::RDoublePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setPosY(const ::omero::RDoublePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RTimePtr getTimepoint()
    {
        return getTimepoint(0);
    }
    ::omero::RTimePtr getTimepoint(const ::Ice::Context& __ctx)
    {
        return getTimepoint(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getTimepoint()
    {
        return begin_getTimepoint(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getTimepoint(const ::Ice::Context& __ctx)
    {
        return begin_getTimepoint(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getTimepoint(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTimepoint(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTimepoint(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTimepoint(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTimepoint(const ::omero::model::Callback_WellSample_getTimepointPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTimepoint(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTimepoint(const ::Ice::Context& __ctx, const ::omero::model::Callback_WellSample_getTimepointPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTimepoint(&__ctx, __del, __cookie);
    }

    ::omero::RTimePtr end_getTimepoint(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RTimePtr getTimepoint(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getTimepoint(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setTimepoint(const ::omero::RTimePtr& theTimepoint)
    {
        setTimepoint(theTimepoint, 0);
    }
    void setTimepoint(const ::omero::RTimePtr& theTimepoint, const ::Ice::Context& __ctx)
    {
        setTimepoint(theTimepoint, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setTimepoint(const ::omero::RTimePtr& theTimepoint)
    {
        return begin_setTimepoint(theTimepoint, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setTimepoint(const ::omero::RTimePtr& theTimepoint, const ::Ice::Context& __ctx)
    {
        return begin_setTimepoint(theTimepoint, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setTimepoint(const ::omero::RTimePtr& theTimepoint, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTimepoint(theTimepoint, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setTimepoint(const ::omero::RTimePtr& theTimepoint, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTimepoint(theTimepoint, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setTimepoint(const ::omero::RTimePtr& theTimepoint, const ::omero::model::Callback_WellSample_setTimepointPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTimepoint(theTimepoint, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setTimepoint(const ::omero::RTimePtr& theTimepoint, const ::Ice::Context& __ctx, const ::omero::model::Callback_WellSample_setTimepointPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTimepoint(theTimepoint, &__ctx, __del, __cookie);
    }

    void end_setTimepoint(const ::Ice::AsyncResultPtr&);
    
private:

    void setTimepoint(const ::omero::RTimePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setTimepoint(const ::omero::RTimePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::PlateAcquisitionPtr getPlateAcquisition()
    {
        return getPlateAcquisition(0);
    }
    ::omero::model::PlateAcquisitionPtr getPlateAcquisition(const ::Ice::Context& __ctx)
    {
        return getPlateAcquisition(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getPlateAcquisition()
    {
        return begin_getPlateAcquisition(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPlateAcquisition(const ::Ice::Context& __ctx)
    {
        return begin_getPlateAcquisition(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPlateAcquisition(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPlateAcquisition(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPlateAcquisition(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPlateAcquisition(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPlateAcquisition(const ::omero::model::Callback_WellSample_getPlateAcquisitionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPlateAcquisition(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPlateAcquisition(const ::Ice::Context& __ctx, const ::omero::model::Callback_WellSample_getPlateAcquisitionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPlateAcquisition(&__ctx, __del, __cookie);
    }

    ::omero::model::PlateAcquisitionPtr end_getPlateAcquisition(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::PlateAcquisitionPtr getPlateAcquisition(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getPlateAcquisition(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setPlateAcquisition(const ::omero::model::PlateAcquisitionPtr& thePlateAcquisition)
    {
        setPlateAcquisition(thePlateAcquisition, 0);
    }
    void setPlateAcquisition(const ::omero::model::PlateAcquisitionPtr& thePlateAcquisition, const ::Ice::Context& __ctx)
    {
        setPlateAcquisition(thePlateAcquisition, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setPlateAcquisition(const ::omero::model::PlateAcquisitionPtr& thePlateAcquisition)
    {
        return begin_setPlateAcquisition(thePlateAcquisition, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPlateAcquisition(const ::omero::model::PlateAcquisitionPtr& thePlateAcquisition, const ::Ice::Context& __ctx)
    {
        return begin_setPlateAcquisition(thePlateAcquisition, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPlateAcquisition(const ::omero::model::PlateAcquisitionPtr& thePlateAcquisition, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPlateAcquisition(thePlateAcquisition, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPlateAcquisition(const ::omero::model::PlateAcquisitionPtr& thePlateAcquisition, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPlateAcquisition(thePlateAcquisition, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPlateAcquisition(const ::omero::model::PlateAcquisitionPtr& thePlateAcquisition, const ::omero::model::Callback_WellSample_setPlateAcquisitionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPlateAcquisition(thePlateAcquisition, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPlateAcquisition(const ::omero::model::PlateAcquisitionPtr& thePlateAcquisition, const ::Ice::Context& __ctx, const ::omero::model::Callback_WellSample_setPlateAcquisitionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPlateAcquisition(thePlateAcquisition, &__ctx, __del, __cookie);
    }

    void end_setPlateAcquisition(const ::Ice::AsyncResultPtr&);
    
private:

    void setPlateAcquisition(const ::omero::model::PlateAcquisitionPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setPlateAcquisition(const ::omero::model::PlateAcquisitionPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::WellPtr getWell()
    {
        return getWell(0);
    }
    ::omero::model::WellPtr getWell(const ::Ice::Context& __ctx)
    {
        return getWell(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getWell()
    {
        return begin_getWell(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getWell(const ::Ice::Context& __ctx)
    {
        return begin_getWell(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getWell(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getWell(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getWell(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getWell(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getWell(const ::omero::model::Callback_WellSample_getWellPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getWell(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getWell(const ::Ice::Context& __ctx, const ::omero::model::Callback_WellSample_getWellPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getWell(&__ctx, __del, __cookie);
    }

    ::omero::model::WellPtr end_getWell(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::WellPtr getWell(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getWell(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setWell(const ::omero::model::WellPtr& theWell)
    {
        setWell(theWell, 0);
    }
    void setWell(const ::omero::model::WellPtr& theWell, const ::Ice::Context& __ctx)
    {
        setWell(theWell, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setWell(const ::omero::model::WellPtr& theWell)
    {
        return begin_setWell(theWell, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setWell(const ::omero::model::WellPtr& theWell, const ::Ice::Context& __ctx)
    {
        return begin_setWell(theWell, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setWell(const ::omero::model::WellPtr& theWell, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setWell(theWell, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setWell(const ::omero::model::WellPtr& theWell, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setWell(theWell, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setWell(const ::omero::model::WellPtr& theWell, const ::omero::model::Callback_WellSample_setWellPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setWell(theWell, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setWell(const ::omero::model::WellPtr& theWell, const ::Ice::Context& __ctx, const ::omero::model::Callback_WellSample_setWellPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setWell(theWell, &__ctx, __del, __cookie);
    }

    void end_setWell(const ::Ice::AsyncResultPtr&);
    
private:

    void setWell(const ::omero::model::WellPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setWell(const ::omero::model::WellPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::ImagePtr getImage()
    {
        return getImage(0);
    }
    ::omero::model::ImagePtr getImage(const ::Ice::Context& __ctx)
    {
        return getImage(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getImage()
    {
        return begin_getImage(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getImage(const ::Ice::Context& __ctx)
    {
        return begin_getImage(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getImage(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getImage(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getImage(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getImage(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getImage(const ::omero::model::Callback_WellSample_getImagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getImage(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getImage(const ::Ice::Context& __ctx, const ::omero::model::Callback_WellSample_getImagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getImage(&__ctx, __del, __cookie);
    }

    ::omero::model::ImagePtr end_getImage(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::ImagePtr getImage(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getImage(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setImage(const ::omero::model::ImagePtr& theImage)
    {
        setImage(theImage, 0);
    }
    void setImage(const ::omero::model::ImagePtr& theImage, const ::Ice::Context& __ctx)
    {
        setImage(theImage, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setImage(const ::omero::model::ImagePtr& theImage)
    {
        return begin_setImage(theImage, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setImage(const ::omero::model::ImagePtr& theImage, const ::Ice::Context& __ctx)
    {
        return begin_setImage(theImage, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setImage(const ::omero::model::ImagePtr& theImage, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setImage(theImage, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setImage(const ::omero::model::ImagePtr& theImage, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setImage(theImage, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setImage(const ::omero::model::ImagePtr& theImage, const ::omero::model::Callback_WellSample_setImagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setImage(theImage, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setImage(const ::omero::model::ImagePtr& theImage, const ::Ice::Context& __ctx, const ::omero::model::Callback_WellSample_setImagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setImage(theImage, &__ctx, __del, __cookie);
    }

    void end_setImage(const ::Ice::AsyncResultPtr&);
    
private:

    void setImage(const ::omero::model::ImagePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setImage(const ::omero::model::ImagePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unloadAnnotationLinks()
    {
        unloadAnnotationLinks(0);
    }
    void unloadAnnotationLinks(const ::Ice::Context& __ctx)
    {
        unloadAnnotationLinks(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks()
    {
        return begin_unloadAnnotationLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return begin_unloadAnnotationLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::omero::model::Callback_WellSample_unloadAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_WellSample_unloadAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadAnnotationLinks(&__ctx, __del, __cookie);
    }

    void end_unloadAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    void unloadAnnotationLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int sizeOfAnnotationLinks()
    {
        return sizeOfAnnotationLinks(0);
    }
    ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return sizeOfAnnotationLinks(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks()
    {
        return begin_sizeOfAnnotationLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return begin_sizeOfAnnotationLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::omero::model::Callback_WellSample_sizeOfAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_WellSample_sizeOfAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_sizeOfAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::WellSampleAnnotationLinksSeq copyAnnotationLinks()
    {
        return copyAnnotationLinks(0);
    }
    ::omero::model::WellSampleAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return copyAnnotationLinks(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks()
    {
        return begin_copyAnnotationLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return begin_copyAnnotationLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::omero::model::Callback_WellSample_copyAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_WellSample_copyAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::omero::model::WellSampleAnnotationLinksSeq end_copyAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::WellSampleAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addWellSampleAnnotationLink(const ::omero::model::WellSampleAnnotationLinkPtr& target)
    {
        addWellSampleAnnotationLink(target, 0);
    }
    void addWellSampleAnnotationLink(const ::omero::model::WellSampleAnnotationLinkPtr& target, const ::Ice::Context& __ctx)
    {
        addWellSampleAnnotationLink(target, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addWellSampleAnnotationLink(const ::omero::model::WellSampleAnnotationLinkPtr& target)
    {
        return begin_addWellSampleAnnotationLink(target, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addWellSampleAnnotationLink(const ::omero::model::WellSampleAnnotationLinkPtr& target, const ::Ice::Context& __ctx)
    {
        return begin_addWellSampleAnnotationLink(target, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addWellSampleAnnotationLink(const ::omero::model::WellSampleAnnotationLinkPtr& target, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addWellSampleAnnotationLink(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addWellSampleAnnotationLink(const ::omero::model::WellSampleAnnotationLinkPtr& target, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addWellSampleAnnotationLink(target, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addWellSampleAnnotationLink(const ::omero::model::WellSampleAnnotationLinkPtr& target, const ::omero::model::Callback_WellSample_addWellSampleAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addWellSampleAnnotationLink(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addWellSampleAnnotationLink(const ::omero::model::WellSampleAnnotationLinkPtr& target, const ::Ice::Context& __ctx, const ::omero::model::Callback_WellSample_addWellSampleAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addWellSampleAnnotationLink(target, &__ctx, __del, __cookie);
    }

    void end_addWellSampleAnnotationLink(const ::Ice::AsyncResultPtr&);
    
private:

    void addWellSampleAnnotationLink(const ::omero::model::WellSampleAnnotationLinkPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addWellSampleAnnotationLink(const ::omero::model::WellSampleAnnotationLinkPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addAllWellSampleAnnotationLinkSet(const ::omero::model::WellSampleAnnotationLinksSeq& targets)
    {
        addAllWellSampleAnnotationLinkSet(targets, 0);
    }
    void addAllWellSampleAnnotationLinkSet(const ::omero::model::WellSampleAnnotationLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        addAllWellSampleAnnotationLinkSet(targets, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addAllWellSampleAnnotationLinkSet(const ::omero::model::WellSampleAnnotationLinksSeq& targets)
    {
        return begin_addAllWellSampleAnnotationLinkSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllWellSampleAnnotationLinkSet(const ::omero::model::WellSampleAnnotationLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_addAllWellSampleAnnotationLinkSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllWellSampleAnnotationLinkSet(const ::omero::model::WellSampleAnnotationLinksSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllWellSampleAnnotationLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllWellSampleAnnotationLinkSet(const ::omero::model::WellSampleAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllWellSampleAnnotationLinkSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllWellSampleAnnotationLinkSet(const ::omero::model::WellSampleAnnotationLinksSeq& targets, const ::omero::model::Callback_WellSample_addAllWellSampleAnnotationLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllWellSampleAnnotationLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllWellSampleAnnotationLinkSet(const ::omero::model::WellSampleAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_WellSample_addAllWellSampleAnnotationLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllWellSampleAnnotationLinkSet(targets, &__ctx, __del, __cookie);
    }

    void end_addAllWellSampleAnnotationLinkSet(const ::Ice::AsyncResultPtr&);
    
private:

    void addAllWellSampleAnnotationLinkSet(const ::omero::model::WellSampleAnnotationLinksSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addAllWellSampleAnnotationLinkSet(const ::omero::model::WellSampleAnnotationLinksSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeWellSampleAnnotationLink(const ::omero::model::WellSampleAnnotationLinkPtr& theTarget)
    {
        removeWellSampleAnnotationLink(theTarget, 0);
    }
    void removeWellSampleAnnotationLink(const ::omero::model::WellSampleAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx)
    {
        removeWellSampleAnnotationLink(theTarget, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removeWellSampleAnnotationLink(const ::omero::model::WellSampleAnnotationLinkPtr& theTarget)
    {
        return begin_removeWellSampleAnnotationLink(theTarget, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeWellSampleAnnotationLink(const ::omero::model::WellSampleAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx)
    {
        return begin_removeWellSampleAnnotationLink(theTarget, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeWellSampleAnnotationLink(const ::omero::model::WellSampleAnnotationLinkPtr& theTarget, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeWellSampleAnnotationLink(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeWellSampleAnnotationLink(const ::omero::model::WellSampleAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeWellSampleAnnotationLink(theTarget, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeWellSampleAnnotationLink(const ::omero::model::WellSampleAnnotationLinkPtr& theTarget, const ::omero::model::Callback_WellSample_removeWellSampleAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeWellSampleAnnotationLink(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeWellSampleAnnotationLink(const ::omero::model::WellSampleAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::omero::model::Callback_WellSample_removeWellSampleAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeWellSampleAnnotationLink(theTarget, &__ctx, __del, __cookie);
    }

    void end_removeWellSampleAnnotationLink(const ::Ice::AsyncResultPtr&);
    
private:

    void removeWellSampleAnnotationLink(const ::omero::model::WellSampleAnnotationLinkPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeWellSampleAnnotationLink(const ::omero::model::WellSampleAnnotationLinkPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeAllWellSampleAnnotationLinkSet(const ::omero::model::WellSampleAnnotationLinksSeq& targets)
    {
        removeAllWellSampleAnnotationLinkSet(targets, 0);
    }
    void removeAllWellSampleAnnotationLinkSet(const ::omero::model::WellSampleAnnotationLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        removeAllWellSampleAnnotationLinkSet(targets, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removeAllWellSampleAnnotationLinkSet(const ::omero::model::WellSampleAnnotationLinksSeq& targets)
    {
        return begin_removeAllWellSampleAnnotationLinkSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllWellSampleAnnotationLinkSet(const ::omero::model::WellSampleAnnotationLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_removeAllWellSampleAnnotationLinkSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllWellSampleAnnotationLinkSet(const ::omero::model::WellSampleAnnotationLinksSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllWellSampleAnnotationLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllWellSampleAnnotationLinkSet(const ::omero::model::WellSampleAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllWellSampleAnnotationLinkSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllWellSampleAnnotationLinkSet(const ::omero::model::WellSampleAnnotationLinksSeq& targets, const ::omero::model::Callback_WellSample_removeAllWellSampleAnnotationLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllWellSampleAnnotationLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllWellSampleAnnotationLinkSet(const ::omero::model::WellSampleAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_WellSample_removeAllWellSampleAnnotationLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllWellSampleAnnotationLinkSet(targets, &__ctx, __del, __cookie);
    }

    void end_removeAllWellSampleAnnotationLinkSet(const ::Ice::AsyncResultPtr&);
    
private:

    void removeAllWellSampleAnnotationLinkSet(const ::omero::model::WellSampleAnnotationLinksSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeAllWellSampleAnnotationLinkSet(const ::omero::model::WellSampleAnnotationLinksSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void clearAnnotationLinks()
    {
        clearAnnotationLinks(0);
    }
    void clearAnnotationLinks(const ::Ice::Context& __ctx)
    {
        clearAnnotationLinks(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks()
    {
        return begin_clearAnnotationLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return begin_clearAnnotationLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::omero::model::Callback_WellSample_clearAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_WellSample_clearAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearAnnotationLinks(&__ctx, __del, __cookie);
    }

    void end_clearAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    void clearAnnotationLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reloadAnnotationLinks(const ::omero::model::WellSamplePtr& toCopy)
    {
        reloadAnnotationLinks(toCopy, 0);
    }
    void reloadAnnotationLinks(const ::omero::model::WellSamplePtr& toCopy, const ::Ice::Context& __ctx)
    {
        reloadAnnotationLinks(toCopy, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::WellSamplePtr& toCopy)
    {
        return begin_reloadAnnotationLinks(toCopy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::WellSamplePtr& toCopy, const ::Ice::Context& __ctx)
    {
        return begin_reloadAnnotationLinks(toCopy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::WellSamplePtr& toCopy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadAnnotationLinks(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::WellSamplePtr& toCopy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadAnnotationLinks(toCopy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::WellSamplePtr& toCopy, const ::omero::model::Callback_WellSample_reloadAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadAnnotationLinks(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::WellSamplePtr& toCopy, const ::Ice::Context& __ctx, const ::omero::model::Callback_WellSample_reloadAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadAnnotationLinks(toCopy, &__ctx, __del, __cookie);
    }

    void end_reloadAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    void reloadAnnotationLinks(const ::omero::model::WellSamplePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::WellSamplePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::sys::CountMap getAnnotationLinksCountPerOwner()
    {
        return getAnnotationLinksCountPerOwner(0);
    }
    ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx)
    {
        return getAnnotationLinksCountPerOwner(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner()
    {
        return begin_getAnnotationLinksCountPerOwner(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx)
    {
        return begin_getAnnotationLinksCountPerOwner(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAnnotationLinksCountPerOwner(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAnnotationLinksCountPerOwner(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::omero::model::Callback_WellSample_getAnnotationLinksCountPerOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAnnotationLinksCountPerOwner(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx, const ::omero::model::Callback_WellSample_getAnnotationLinksCountPerOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAnnotationLinksCountPerOwner(&__ctx, __del, __cookie);
    }

    ::omero::sys::CountMap end_getAnnotationLinksCountPerOwner(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::WellSampleAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr& addition)
    {
        return linkAnnotation(addition, 0);
    }
    ::omero::model::WellSampleAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx)
    {
        return linkAnnotation(addition, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition)
    {
        return begin_linkAnnotation(addition, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx)
    {
        return begin_linkAnnotation(addition, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkAnnotation(addition, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkAnnotation(addition, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::omero::model::Callback_WellSample_linkAnnotationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkAnnotation(addition, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx, const ::omero::model::Callback_WellSample_linkAnnotationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkAnnotation(addition, &__ctx, __del, __cookie);
    }

    ::omero::model::WellSampleAnnotationLinkPtr end_linkAnnotation(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::WellSampleAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addWellSampleAnnotationLinkToBoth(const ::omero::model::WellSampleAnnotationLinkPtr& link, bool bothSides)
    {
        addWellSampleAnnotationLinkToBoth(link, bothSides, 0);
    }
    void addWellSampleAnnotationLinkToBoth(const ::omero::model::WellSampleAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        addWellSampleAnnotationLinkToBoth(link, bothSides, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addWellSampleAnnotationLinkToBoth(const ::omero::model::WellSampleAnnotationLinkPtr& link, bool bothSides)
    {
        return begin_addWellSampleAnnotationLinkToBoth(link, bothSides, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addWellSampleAnnotationLinkToBoth(const ::omero::model::WellSampleAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        return begin_addWellSampleAnnotationLinkToBoth(link, bothSides, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addWellSampleAnnotationLinkToBoth(const ::omero::model::WellSampleAnnotationLinkPtr& link, bool bothSides, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addWellSampleAnnotationLinkToBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addWellSampleAnnotationLinkToBoth(const ::omero::model::WellSampleAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addWellSampleAnnotationLinkToBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addWellSampleAnnotationLinkToBoth(const ::omero::model::WellSampleAnnotationLinkPtr& link, bool bothSides, const ::omero::model::Callback_WellSample_addWellSampleAnnotationLinkToBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addWellSampleAnnotationLinkToBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addWellSampleAnnotationLinkToBoth(const ::omero::model::WellSampleAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::omero::model::Callback_WellSample_addWellSampleAnnotationLinkToBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addWellSampleAnnotationLinkToBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    void end_addWellSampleAnnotationLinkToBoth(const ::Ice::AsyncResultPtr&);
    
private:

    void addWellSampleAnnotationLinkToBoth(const ::omero::model::WellSampleAnnotationLinkPtr&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addWellSampleAnnotationLinkToBoth(const ::omero::model::WellSampleAnnotationLinkPtr&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::WellSampleAnnotationLinksSeq findWellSampleAnnotationLink(const ::omero::model::AnnotationPtr& removal)
    {
        return findWellSampleAnnotationLink(removal, 0);
    }
    ::omero::model::WellSampleAnnotationLinksSeq findWellSampleAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx)
    {
        return findWellSampleAnnotationLink(removal, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_findWellSampleAnnotationLink(const ::omero::model::AnnotationPtr& removal)
    {
        return begin_findWellSampleAnnotationLink(removal, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findWellSampleAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx)
    {
        return begin_findWellSampleAnnotationLink(removal, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findWellSampleAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findWellSampleAnnotationLink(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findWellSampleAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findWellSampleAnnotationLink(removal, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findWellSampleAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::omero::model::Callback_WellSample_findWellSampleAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findWellSampleAnnotationLink(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findWellSampleAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::omero::model::Callback_WellSample_findWellSampleAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findWellSampleAnnotationLink(removal, &__ctx, __del, __cookie);
    }

    ::omero::model::WellSampleAnnotationLinksSeq end_findWellSampleAnnotationLink(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::WellSampleAnnotationLinksSeq findWellSampleAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_findWellSampleAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unlinkAnnotation(const ::omero::model::AnnotationPtr& removal)
    {
        unlinkAnnotation(removal, 0);
    }
    void unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx)
    {
        unlinkAnnotation(removal, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal)
    {
        return begin_unlinkAnnotation(removal, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx)
    {
        return begin_unlinkAnnotation(removal, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkAnnotation(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkAnnotation(removal, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::omero::model::Callback_WellSample_unlinkAnnotationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkAnnotation(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::omero::model::Callback_WellSample_unlinkAnnotationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkAnnotation(removal, &__ctx, __del, __cookie);
    }

    void end_unlinkAnnotation(const ::Ice::AsyncResultPtr&);
    
private:

    void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeWellSampleAnnotationLinkFromBoth(const ::omero::model::WellSampleAnnotationLinkPtr& link, bool bothSides)
    {
        removeWellSampleAnnotationLinkFromBoth(link, bothSides, 0);
    }
    void removeWellSampleAnnotationLinkFromBoth(const ::omero::model::WellSampleAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        removeWellSampleAnnotationLinkFromBoth(link, bothSides, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removeWellSampleAnnotationLinkFromBoth(const ::omero::model::WellSampleAnnotationLinkPtr& link, bool bothSides)
    {
        return begin_removeWellSampleAnnotationLinkFromBoth(link, bothSides, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeWellSampleAnnotationLinkFromBoth(const ::omero::model::WellSampleAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        return begin_removeWellSampleAnnotationLinkFromBoth(link, bothSides, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeWellSampleAnnotationLinkFromBoth(const ::omero::model::WellSampleAnnotationLinkPtr& link, bool bothSides, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeWellSampleAnnotationLinkFromBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeWellSampleAnnotationLinkFromBoth(const ::omero::model::WellSampleAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeWellSampleAnnotationLinkFromBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeWellSampleAnnotationLinkFromBoth(const ::omero::model::WellSampleAnnotationLinkPtr& link, bool bothSides, const ::omero::model::Callback_WellSample_removeWellSampleAnnotationLinkFromBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeWellSampleAnnotationLinkFromBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeWellSampleAnnotationLinkFromBoth(const ::omero::model::WellSampleAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::omero::model::Callback_WellSample_removeWellSampleAnnotationLinkFromBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeWellSampleAnnotationLinkFromBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    void end_removeWellSampleAnnotationLinkFromBoth(const ::Ice::AsyncResultPtr&);
    
private:

    void removeWellSampleAnnotationLinkFromBoth(const ::omero::model::WellSampleAnnotationLinkPtr&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeWellSampleAnnotationLinkFromBoth(const ::omero::model::WellSampleAnnotationLinkPtr&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::WellSampleLinkedAnnotationSeq linkedAnnotationList()
    {
        return linkedAnnotationList(0);
    }
    ::omero::model::WellSampleLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context& __ctx)
    {
        return linkedAnnotationList(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList()
    {
        return begin_linkedAnnotationList(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::Context& __ctx)
    {
        return begin_linkedAnnotationList(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedAnnotationList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedAnnotationList(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::omero::model::Callback_WellSample_linkedAnnotationListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedAnnotationList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::Context& __ctx, const ::omero::model::Callback_WellSample_linkedAnnotationListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedAnnotationList(&__ctx, __del, __cookie);
    }

    ::omero::model::WellSampleLinkedAnnotationSeq end_linkedAnnotationList(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::WellSampleLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<WellSample> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<WellSample*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<WellSample*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<WellSample> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<WellSample*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<WellSample*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<WellSample> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<WellSample*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<WellSample*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<WellSample> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<WellSample*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<WellSample*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<WellSample> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<WellSample*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<WellSample*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<WellSample> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<WellSample*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<WellSample*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<WellSample> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<WellSample*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<WellSample*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<WellSample> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<WellSample*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<WellSample*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<WellSample> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<WellSample*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<WellSample*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<WellSample> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<WellSample*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<WellSample*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<WellSample> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<WellSample*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<WellSample*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<WellSample> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<WellSample*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<WellSample*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<WellSample> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<WellSample*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<WellSample*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<WellSample> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<WellSample*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<WellSample*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<WellSample> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<WellSample*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<WellSample*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<WellSample> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<WellSample*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<WellSample*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<WellSample> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<WellSample*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<WellSample*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<WellSample> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<WellSample*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<WellSample*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<WellSample> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<WellSample*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<WellSample*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

namespace IceDelegate
{

namespace omero
{

namespace model
{

class WellSample : virtual public ::IceDelegate::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*) = 0;

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::RDoublePtr getPosX(const ::Ice::Context*) = 0;

    virtual void setPosX(const ::omero::RDoublePtr&, const ::Ice::Context*) = 0;

    virtual ::omero::RDoublePtr getPosY(const ::Ice::Context*) = 0;

    virtual void setPosY(const ::omero::RDoublePtr&, const ::Ice::Context*) = 0;

    virtual ::omero::RTimePtr getTimepoint(const ::Ice::Context*) = 0;

    virtual void setTimepoint(const ::omero::RTimePtr&, const ::Ice::Context*) = 0;

    virtual ::omero::model::PlateAcquisitionPtr getPlateAcquisition(const ::Ice::Context*) = 0;

    virtual void setPlateAcquisition(const ::omero::model::PlateAcquisitionPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::model::WellPtr getWell(const ::Ice::Context*) = 0;

    virtual void setWell(const ::omero::model::WellPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::model::ImagePtr getImage(const ::Ice::Context*) = 0;

    virtual void setImage(const ::omero::model::ImagePtr&, const ::Ice::Context*) = 0;

    virtual void unloadAnnotationLinks(const ::Ice::Context*) = 0;

    virtual ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context*) = 0;

    virtual ::omero::model::WellSampleAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context*) = 0;

    virtual void addWellSampleAnnotationLink(const ::omero::model::WellSampleAnnotationLinkPtr&, const ::Ice::Context*) = 0;

    virtual void addAllWellSampleAnnotationLinkSet(const ::omero::model::WellSampleAnnotationLinksSeq&, const ::Ice::Context*) = 0;

    virtual void removeWellSampleAnnotationLink(const ::omero::model::WellSampleAnnotationLinkPtr&, const ::Ice::Context*) = 0;

    virtual void removeAllWellSampleAnnotationLinkSet(const ::omero::model::WellSampleAnnotationLinksSeq&, const ::Ice::Context*) = 0;

    virtual void clearAnnotationLinks(const ::Ice::Context*) = 0;

    virtual void reloadAnnotationLinks(const ::omero::model::WellSamplePtr&, const ::Ice::Context*) = 0;

    virtual ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context*) = 0;

    virtual ::omero::model::WellSampleAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*) = 0;

    virtual void addWellSampleAnnotationLinkToBoth(const ::omero::model::WellSampleAnnotationLinkPtr&, bool, const ::Ice::Context*) = 0;

    virtual ::omero::model::WellSampleAnnotationLinksSeq findWellSampleAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*) = 0;

    virtual void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*) = 0;

    virtual void removeWellSampleAnnotationLinkFromBoth(const ::omero::model::WellSampleAnnotationLinkPtr&, bool, const ::Ice::Context*) = 0;

    virtual ::omero::model::WellSampleLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context*) = 0;
};

}

}

}

namespace IceDelegateM
{

namespace omero
{

namespace model
{

class WellSample : virtual public ::IceDelegate::omero::model::WellSample,
                   virtual public ::IceDelegateM::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::RDoublePtr getPosX(const ::Ice::Context*);

    virtual void setPosX(const ::omero::RDoublePtr&, const ::Ice::Context*);

    virtual ::omero::RDoublePtr getPosY(const ::Ice::Context*);

    virtual void setPosY(const ::omero::RDoublePtr&, const ::Ice::Context*);

    virtual ::omero::RTimePtr getTimepoint(const ::Ice::Context*);

    virtual void setTimepoint(const ::omero::RTimePtr&, const ::Ice::Context*);

    virtual ::omero::model::PlateAcquisitionPtr getPlateAcquisition(const ::Ice::Context*);

    virtual void setPlateAcquisition(const ::omero::model::PlateAcquisitionPtr&, const ::Ice::Context*);

    virtual ::omero::model::WellPtr getWell(const ::Ice::Context*);

    virtual void setWell(const ::omero::model::WellPtr&, const ::Ice::Context*);

    virtual ::omero::model::ImagePtr getImage(const ::Ice::Context*);

    virtual void setImage(const ::omero::model::ImagePtr&, const ::Ice::Context*);

    virtual void unloadAnnotationLinks(const ::Ice::Context*);

    virtual ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context*);

    virtual ::omero::model::WellSampleAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context*);

    virtual void addWellSampleAnnotationLink(const ::omero::model::WellSampleAnnotationLinkPtr&, const ::Ice::Context*);

    virtual void addAllWellSampleAnnotationLinkSet(const ::omero::model::WellSampleAnnotationLinksSeq&, const ::Ice::Context*);

    virtual void removeWellSampleAnnotationLink(const ::omero::model::WellSampleAnnotationLinkPtr&, const ::Ice::Context*);

    virtual void removeAllWellSampleAnnotationLinkSet(const ::omero::model::WellSampleAnnotationLinksSeq&, const ::Ice::Context*);

    virtual void clearAnnotationLinks(const ::Ice::Context*);

    virtual void reloadAnnotationLinks(const ::omero::model::WellSamplePtr&, const ::Ice::Context*);

    virtual ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context*);

    virtual ::omero::model::WellSampleAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);

    virtual void addWellSampleAnnotationLinkToBoth(const ::omero::model::WellSampleAnnotationLinkPtr&, bool, const ::Ice::Context*);

    virtual ::omero::model::WellSampleAnnotationLinksSeq findWellSampleAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);

    virtual void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);

    virtual void removeWellSampleAnnotationLinkFromBoth(const ::omero::model::WellSampleAnnotationLinkPtr&, bool, const ::Ice::Context*);

    virtual ::omero::model::WellSampleLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context*);
};

}

}

}

namespace IceDelegateD
{

namespace omero
{

namespace model
{

class WellSample : virtual public ::IceDelegate::omero::model::WellSample,
                   virtual public ::IceDelegateD::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::RDoublePtr getPosX(const ::Ice::Context*);

    virtual void setPosX(const ::omero::RDoublePtr&, const ::Ice::Context*);

    virtual ::omero::RDoublePtr getPosY(const ::Ice::Context*);

    virtual void setPosY(const ::omero::RDoublePtr&, const ::Ice::Context*);

    virtual ::omero::RTimePtr getTimepoint(const ::Ice::Context*);

    virtual void setTimepoint(const ::omero::RTimePtr&, const ::Ice::Context*);

    virtual ::omero::model::PlateAcquisitionPtr getPlateAcquisition(const ::Ice::Context*);

    virtual void setPlateAcquisition(const ::omero::model::PlateAcquisitionPtr&, const ::Ice::Context*);

    virtual ::omero::model::WellPtr getWell(const ::Ice::Context*);

    virtual void setWell(const ::omero::model::WellPtr&, const ::Ice::Context*);

    virtual ::omero::model::ImagePtr getImage(const ::Ice::Context*);

    virtual void setImage(const ::omero::model::ImagePtr&, const ::Ice::Context*);

    virtual void unloadAnnotationLinks(const ::Ice::Context*);

    virtual ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context*);

    virtual ::omero::model::WellSampleAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context*);

    virtual void addWellSampleAnnotationLink(const ::omero::model::WellSampleAnnotationLinkPtr&, const ::Ice::Context*);

    virtual void addAllWellSampleAnnotationLinkSet(const ::omero::model::WellSampleAnnotationLinksSeq&, const ::Ice::Context*);

    virtual void removeWellSampleAnnotationLink(const ::omero::model::WellSampleAnnotationLinkPtr&, const ::Ice::Context*);

    virtual void removeAllWellSampleAnnotationLinkSet(const ::omero::model::WellSampleAnnotationLinksSeq&, const ::Ice::Context*);

    virtual void clearAnnotationLinks(const ::Ice::Context*);

    virtual void reloadAnnotationLinks(const ::omero::model::WellSamplePtr&, const ::Ice::Context*);

    virtual ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context*);

    virtual ::omero::model::WellSampleAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);

    virtual void addWellSampleAnnotationLinkToBoth(const ::omero::model::WellSampleAnnotationLinkPtr&, bool, const ::Ice::Context*);

    virtual ::omero::model::WellSampleAnnotationLinksSeq findWellSampleAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);

    virtual void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);

    virtual void removeWellSampleAnnotationLinkFromBoth(const ::omero::model::WellSampleAnnotationLinkPtr&, bool, const ::Ice::Context*);

    virtual ::omero::model::WellSampleLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context*);
};

}

}

}

namespace omero
{

namespace model
{

class WellSample : public ::omero::model::IObject
{
public:

    typedef WellSamplePrx ProxyType;
    typedef WellSamplePtr PointerType;
    
    WellSample() {}
    WellSample(const ::omero::RLongPtr&, const ::omero::model::DetailsPtr&, bool, const ::omero::RIntPtr&, const ::omero::RDoublePtr&, const ::omero::RDoublePtr&, const ::omero::RTimePtr&, const ::omero::model::PlateAcquisitionPtr&, const ::omero::model::WellPtr&, const ::omero::model::ImagePtr&, const ::omero::model::WellSampleAnnotationLinksSeq&, bool, const ::omero::sys::CountMap&);
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    virtual ::omero::RIntPtr getVersion(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RDoublePtr getPosX(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getPosX(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setPosX(const ::omero::RDoublePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setPosX(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RDoublePtr getPosY(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getPosY(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setPosY(const ::omero::RDoublePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setPosY(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RTimePtr getTimepoint(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getTimepoint(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setTimepoint(const ::omero::RTimePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setTimepoint(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::PlateAcquisitionPtr getPlateAcquisition(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getPlateAcquisition(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setPlateAcquisition(const ::omero::model::PlateAcquisitionPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setPlateAcquisition(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::WellPtr getWell(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getWell(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setWell(const ::omero::model::WellPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setWell(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::ImagePtr getImage(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getImage(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setImage(const ::omero::model::ImagePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setImage(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unloadAnnotationLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unloadAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sizeOfAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::WellSampleAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___copyAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addWellSampleAnnotationLink(const ::omero::model::WellSampleAnnotationLinkPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addWellSampleAnnotationLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addAllWellSampleAnnotationLinkSet(const ::omero::model::WellSampleAnnotationLinksSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addAllWellSampleAnnotationLinkSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeWellSampleAnnotationLink(const ::omero::model::WellSampleAnnotationLinkPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeWellSampleAnnotationLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeAllWellSampleAnnotationLinkSet(const ::omero::model::WellSampleAnnotationLinksSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeAllWellSampleAnnotationLinkSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void clearAnnotationLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___clearAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reloadAnnotationLinks(const ::omero::model::WellSamplePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reloadAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getAnnotationLinksCountPerOwner(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::WellSampleAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___linkAnnotation(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addWellSampleAnnotationLinkToBoth(const ::omero::model::WellSampleAnnotationLinkPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addWellSampleAnnotationLinkToBoth(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::WellSampleAnnotationLinksSeq findWellSampleAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___findWellSampleAnnotationLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unlinkAnnotation(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeWellSampleAnnotationLinkFromBoth(const ::omero::model::WellSampleAnnotationLinkPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeWellSampleAnnotationLinkFromBoth(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::WellSampleLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___linkedAnnotationList(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif

protected:

    ::omero::RIntPtr version;

    ::omero::RDoublePtr posX;

    ::omero::RDoublePtr posY;

    ::omero::RTimePtr timepoint;

    ::omero::model::PlateAcquisitionPtr plateAcquisition;

    ::omero::model::WellPtr well;

    ::omero::model::ImagePtr image;

    ::omero::model::WellSampleAnnotationLinksSeq annotationLinksSeq;

    bool annotationLinksLoaded;

    ::omero::sys::CountMap annotationLinksCountPerOwner;
};

inline bool operator==(const WellSample& l, const WellSample& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const WellSample& l, const WellSample& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

}

namespace omero
{

namespace model
{

template<class T>
class CallbackNC_WellSample_getVersion : public Callback_WellSample_getVersion_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RIntPtr&);

    CallbackNC_WellSample_getVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellSamplePrx __proxy = ::omero::model::WellSamplePrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_WellSample_getVersionPtr
newCallback_WellSample_getVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_getVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WellSample_getVersionPtr
newCallback_WellSample_getVersion(T* instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_getVersion<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_WellSample_getVersion : public Callback_WellSample_getVersion_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RIntPtr&, const CT&);

    Callback_WellSample_getVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellSamplePrx __proxy = ::omero::model::WellSamplePrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_WellSample_getVersionPtr
newCallback_WellSample_getVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_getVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WellSample_getVersionPtr
newCallback_WellSample_getVersion(T* instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_getVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_WellSample_setVersion : public Callback_WellSample_setVersion_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_WellSample_setVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_WellSample_setVersionPtr
newCallback_WellSample_setVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_setVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WellSample_setVersionPtr
newCallback_WellSample_setVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_setVersion<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_WellSample_setVersionPtr
newCallback_WellSample_setVersion(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_setVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WellSample_setVersionPtr
newCallback_WellSample_setVersion(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_setVersion<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_WellSample_setVersion : public Callback_WellSample_setVersion_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_WellSample_setVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_WellSample_setVersionPtr
newCallback_WellSample_setVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_setVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WellSample_setVersionPtr
newCallback_WellSample_setVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_setVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_WellSample_setVersionPtr
newCallback_WellSample_setVersion(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_setVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WellSample_setVersionPtr
newCallback_WellSample_setVersion(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_setVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_WellSample_getPosX : public Callback_WellSample_getPosX_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RDoublePtr&);

    CallbackNC_WellSample_getPosX(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellSamplePrx __proxy = ::omero::model::WellSamplePrx::uncheckedCast(__result->getProxy());
        ::omero::RDoublePtr __ret;
        try
        {
            __ret = __proxy->end_getPosX(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_WellSample_getPosXPtr
newCallback_WellSample_getPosX(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RDoublePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_getPosX<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WellSample_getPosXPtr
newCallback_WellSample_getPosX(T* instance, void (T::*cb)(const ::omero::RDoublePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_getPosX<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_WellSample_getPosX : public Callback_WellSample_getPosX_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RDoublePtr&, const CT&);

    Callback_WellSample_getPosX(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellSamplePrx __proxy = ::omero::model::WellSamplePrx::uncheckedCast(__result->getProxy());
        ::omero::RDoublePtr __ret;
        try
        {
            __ret = __proxy->end_getPosX(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_WellSample_getPosXPtr
newCallback_WellSample_getPosX(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RDoublePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_getPosX<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WellSample_getPosXPtr
newCallback_WellSample_getPosX(T* instance, void (T::*cb)(const ::omero::RDoublePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_getPosX<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_WellSample_setPosX : public Callback_WellSample_setPosX_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_WellSample_setPosX(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_WellSample_setPosXPtr
newCallback_WellSample_setPosX(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_setPosX<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WellSample_setPosXPtr
newCallback_WellSample_setPosX(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_setPosX<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_WellSample_setPosXPtr
newCallback_WellSample_setPosX(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_setPosX<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WellSample_setPosXPtr
newCallback_WellSample_setPosX(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_setPosX<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_WellSample_setPosX : public Callback_WellSample_setPosX_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_WellSample_setPosX(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_WellSample_setPosXPtr
newCallback_WellSample_setPosX(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_setPosX<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WellSample_setPosXPtr
newCallback_WellSample_setPosX(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_setPosX<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_WellSample_setPosXPtr
newCallback_WellSample_setPosX(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_setPosX<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WellSample_setPosXPtr
newCallback_WellSample_setPosX(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_setPosX<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_WellSample_getPosY : public Callback_WellSample_getPosY_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RDoublePtr&);

    CallbackNC_WellSample_getPosY(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellSamplePrx __proxy = ::omero::model::WellSamplePrx::uncheckedCast(__result->getProxy());
        ::omero::RDoublePtr __ret;
        try
        {
            __ret = __proxy->end_getPosY(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_WellSample_getPosYPtr
newCallback_WellSample_getPosY(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RDoublePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_getPosY<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WellSample_getPosYPtr
newCallback_WellSample_getPosY(T* instance, void (T::*cb)(const ::omero::RDoublePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_getPosY<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_WellSample_getPosY : public Callback_WellSample_getPosY_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RDoublePtr&, const CT&);

    Callback_WellSample_getPosY(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellSamplePrx __proxy = ::omero::model::WellSamplePrx::uncheckedCast(__result->getProxy());
        ::omero::RDoublePtr __ret;
        try
        {
            __ret = __proxy->end_getPosY(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_WellSample_getPosYPtr
newCallback_WellSample_getPosY(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RDoublePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_getPosY<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WellSample_getPosYPtr
newCallback_WellSample_getPosY(T* instance, void (T::*cb)(const ::omero::RDoublePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_getPosY<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_WellSample_setPosY : public Callback_WellSample_setPosY_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_WellSample_setPosY(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_WellSample_setPosYPtr
newCallback_WellSample_setPosY(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_setPosY<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WellSample_setPosYPtr
newCallback_WellSample_setPosY(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_setPosY<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_WellSample_setPosYPtr
newCallback_WellSample_setPosY(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_setPosY<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WellSample_setPosYPtr
newCallback_WellSample_setPosY(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_setPosY<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_WellSample_setPosY : public Callback_WellSample_setPosY_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_WellSample_setPosY(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_WellSample_setPosYPtr
newCallback_WellSample_setPosY(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_setPosY<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WellSample_setPosYPtr
newCallback_WellSample_setPosY(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_setPosY<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_WellSample_setPosYPtr
newCallback_WellSample_setPosY(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_setPosY<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WellSample_setPosYPtr
newCallback_WellSample_setPosY(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_setPosY<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_WellSample_getTimepoint : public Callback_WellSample_getTimepoint_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RTimePtr&);

    CallbackNC_WellSample_getTimepoint(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellSamplePrx __proxy = ::omero::model::WellSamplePrx::uncheckedCast(__result->getProxy());
        ::omero::RTimePtr __ret;
        try
        {
            __ret = __proxy->end_getTimepoint(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_WellSample_getTimepointPtr
newCallback_WellSample_getTimepoint(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RTimePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_getTimepoint<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WellSample_getTimepointPtr
newCallback_WellSample_getTimepoint(T* instance, void (T::*cb)(const ::omero::RTimePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_getTimepoint<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_WellSample_getTimepoint : public Callback_WellSample_getTimepoint_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RTimePtr&, const CT&);

    Callback_WellSample_getTimepoint(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellSamplePrx __proxy = ::omero::model::WellSamplePrx::uncheckedCast(__result->getProxy());
        ::omero::RTimePtr __ret;
        try
        {
            __ret = __proxy->end_getTimepoint(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_WellSample_getTimepointPtr
newCallback_WellSample_getTimepoint(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RTimePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_getTimepoint<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WellSample_getTimepointPtr
newCallback_WellSample_getTimepoint(T* instance, void (T::*cb)(const ::omero::RTimePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_getTimepoint<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_WellSample_setTimepoint : public Callback_WellSample_setTimepoint_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_WellSample_setTimepoint(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_WellSample_setTimepointPtr
newCallback_WellSample_setTimepoint(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_setTimepoint<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WellSample_setTimepointPtr
newCallback_WellSample_setTimepoint(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_setTimepoint<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_WellSample_setTimepointPtr
newCallback_WellSample_setTimepoint(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_setTimepoint<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WellSample_setTimepointPtr
newCallback_WellSample_setTimepoint(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_setTimepoint<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_WellSample_setTimepoint : public Callback_WellSample_setTimepoint_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_WellSample_setTimepoint(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_WellSample_setTimepointPtr
newCallback_WellSample_setTimepoint(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_setTimepoint<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WellSample_setTimepointPtr
newCallback_WellSample_setTimepoint(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_setTimepoint<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_WellSample_setTimepointPtr
newCallback_WellSample_setTimepoint(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_setTimepoint<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WellSample_setTimepointPtr
newCallback_WellSample_setTimepoint(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_setTimepoint<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_WellSample_getPlateAcquisition : public Callback_WellSample_getPlateAcquisition_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::PlateAcquisitionPtr&);

    CallbackNC_WellSample_getPlateAcquisition(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellSamplePrx __proxy = ::omero::model::WellSamplePrx::uncheckedCast(__result->getProxy());
        ::omero::model::PlateAcquisitionPtr __ret;
        try
        {
            __ret = __proxy->end_getPlateAcquisition(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_WellSample_getPlateAcquisitionPtr
newCallback_WellSample_getPlateAcquisition(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PlateAcquisitionPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_getPlateAcquisition<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WellSample_getPlateAcquisitionPtr
newCallback_WellSample_getPlateAcquisition(T* instance, void (T::*cb)(const ::omero::model::PlateAcquisitionPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_getPlateAcquisition<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_WellSample_getPlateAcquisition : public Callback_WellSample_getPlateAcquisition_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::PlateAcquisitionPtr&, const CT&);

    Callback_WellSample_getPlateAcquisition(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellSamplePrx __proxy = ::omero::model::WellSamplePrx::uncheckedCast(__result->getProxy());
        ::omero::model::PlateAcquisitionPtr __ret;
        try
        {
            __ret = __proxy->end_getPlateAcquisition(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_WellSample_getPlateAcquisitionPtr
newCallback_WellSample_getPlateAcquisition(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PlateAcquisitionPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_getPlateAcquisition<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WellSample_getPlateAcquisitionPtr
newCallback_WellSample_getPlateAcquisition(T* instance, void (T::*cb)(const ::omero::model::PlateAcquisitionPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_getPlateAcquisition<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_WellSample_setPlateAcquisition : public Callback_WellSample_setPlateAcquisition_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_WellSample_setPlateAcquisition(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_WellSample_setPlateAcquisitionPtr
newCallback_WellSample_setPlateAcquisition(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_setPlateAcquisition<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WellSample_setPlateAcquisitionPtr
newCallback_WellSample_setPlateAcquisition(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_setPlateAcquisition<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_WellSample_setPlateAcquisitionPtr
newCallback_WellSample_setPlateAcquisition(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_setPlateAcquisition<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WellSample_setPlateAcquisitionPtr
newCallback_WellSample_setPlateAcquisition(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_setPlateAcquisition<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_WellSample_setPlateAcquisition : public Callback_WellSample_setPlateAcquisition_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_WellSample_setPlateAcquisition(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_WellSample_setPlateAcquisitionPtr
newCallback_WellSample_setPlateAcquisition(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_setPlateAcquisition<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WellSample_setPlateAcquisitionPtr
newCallback_WellSample_setPlateAcquisition(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_setPlateAcquisition<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_WellSample_setPlateAcquisitionPtr
newCallback_WellSample_setPlateAcquisition(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_setPlateAcquisition<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WellSample_setPlateAcquisitionPtr
newCallback_WellSample_setPlateAcquisition(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_setPlateAcquisition<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_WellSample_getWell : public Callback_WellSample_getWell_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::WellPtr&);

    CallbackNC_WellSample_getWell(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellSamplePrx __proxy = ::omero::model::WellSamplePrx::uncheckedCast(__result->getProxy());
        ::omero::model::WellPtr __ret;
        try
        {
            __ret = __proxy->end_getWell(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_WellSample_getWellPtr
newCallback_WellSample_getWell(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::WellPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_getWell<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WellSample_getWellPtr
newCallback_WellSample_getWell(T* instance, void (T::*cb)(const ::omero::model::WellPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_getWell<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_WellSample_getWell : public Callback_WellSample_getWell_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::WellPtr&, const CT&);

    Callback_WellSample_getWell(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellSamplePrx __proxy = ::omero::model::WellSamplePrx::uncheckedCast(__result->getProxy());
        ::omero::model::WellPtr __ret;
        try
        {
            __ret = __proxy->end_getWell(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_WellSample_getWellPtr
newCallback_WellSample_getWell(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::WellPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_getWell<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WellSample_getWellPtr
newCallback_WellSample_getWell(T* instance, void (T::*cb)(const ::omero::model::WellPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_getWell<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_WellSample_setWell : public Callback_WellSample_setWell_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_WellSample_setWell(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_WellSample_setWellPtr
newCallback_WellSample_setWell(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_setWell<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WellSample_setWellPtr
newCallback_WellSample_setWell(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_setWell<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_WellSample_setWellPtr
newCallback_WellSample_setWell(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_setWell<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WellSample_setWellPtr
newCallback_WellSample_setWell(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_setWell<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_WellSample_setWell : public Callback_WellSample_setWell_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_WellSample_setWell(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_WellSample_setWellPtr
newCallback_WellSample_setWell(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_setWell<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WellSample_setWellPtr
newCallback_WellSample_setWell(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_setWell<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_WellSample_setWellPtr
newCallback_WellSample_setWell(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_setWell<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WellSample_setWellPtr
newCallback_WellSample_setWell(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_setWell<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_WellSample_getImage : public Callback_WellSample_getImage_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::ImagePtr&);

    CallbackNC_WellSample_getImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellSamplePrx __proxy = ::omero::model::WellSamplePrx::uncheckedCast(__result->getProxy());
        ::omero::model::ImagePtr __ret;
        try
        {
            __ret = __proxy->end_getImage(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_WellSample_getImagePtr
newCallback_WellSample_getImage(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ImagePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_getImage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WellSample_getImagePtr
newCallback_WellSample_getImage(T* instance, void (T::*cb)(const ::omero::model::ImagePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_getImage<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_WellSample_getImage : public Callback_WellSample_getImage_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::ImagePtr&, const CT&);

    Callback_WellSample_getImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellSamplePrx __proxy = ::omero::model::WellSamplePrx::uncheckedCast(__result->getProxy());
        ::omero::model::ImagePtr __ret;
        try
        {
            __ret = __proxy->end_getImage(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_WellSample_getImagePtr
newCallback_WellSample_getImage(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ImagePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_getImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WellSample_getImagePtr
newCallback_WellSample_getImage(T* instance, void (T::*cb)(const ::omero::model::ImagePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_getImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_WellSample_setImage : public Callback_WellSample_setImage_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_WellSample_setImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_WellSample_setImagePtr
newCallback_WellSample_setImage(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_setImage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WellSample_setImagePtr
newCallback_WellSample_setImage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_setImage<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_WellSample_setImagePtr
newCallback_WellSample_setImage(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_setImage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WellSample_setImagePtr
newCallback_WellSample_setImage(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_setImage<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_WellSample_setImage : public Callback_WellSample_setImage_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_WellSample_setImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_WellSample_setImagePtr
newCallback_WellSample_setImage(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_setImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WellSample_setImagePtr
newCallback_WellSample_setImage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_setImage<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_WellSample_setImagePtr
newCallback_WellSample_setImage(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_setImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WellSample_setImagePtr
newCallback_WellSample_setImage(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_setImage<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_WellSample_unloadAnnotationLinks : public Callback_WellSample_unloadAnnotationLinks_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_WellSample_unloadAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_WellSample_unloadAnnotationLinksPtr
newCallback_WellSample_unloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_unloadAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WellSample_unloadAnnotationLinksPtr
newCallback_WellSample_unloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_unloadAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_WellSample_unloadAnnotationLinksPtr
newCallback_WellSample_unloadAnnotationLinks(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_unloadAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WellSample_unloadAnnotationLinksPtr
newCallback_WellSample_unloadAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_unloadAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_WellSample_unloadAnnotationLinks : public Callback_WellSample_unloadAnnotationLinks_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_WellSample_unloadAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_WellSample_unloadAnnotationLinksPtr
newCallback_WellSample_unloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_unloadAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WellSample_unloadAnnotationLinksPtr
newCallback_WellSample_unloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_unloadAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_WellSample_unloadAnnotationLinksPtr
newCallback_WellSample_unloadAnnotationLinks(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_unloadAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WellSample_unloadAnnotationLinksPtr
newCallback_WellSample_unloadAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_unloadAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_WellSample_sizeOfAnnotationLinks : public Callback_WellSample_sizeOfAnnotationLinks_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_WellSample_sizeOfAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellSamplePrx __proxy = ::omero::model::WellSamplePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfAnnotationLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_WellSample_sizeOfAnnotationLinksPtr
newCallback_WellSample_sizeOfAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_sizeOfAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WellSample_sizeOfAnnotationLinksPtr
newCallback_WellSample_sizeOfAnnotationLinks(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_sizeOfAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_WellSample_sizeOfAnnotationLinks : public Callback_WellSample_sizeOfAnnotationLinks_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_WellSample_sizeOfAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellSamplePrx __proxy = ::omero::model::WellSamplePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfAnnotationLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_WellSample_sizeOfAnnotationLinksPtr
newCallback_WellSample_sizeOfAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_sizeOfAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WellSample_sizeOfAnnotationLinksPtr
newCallback_WellSample_sizeOfAnnotationLinks(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_sizeOfAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_WellSample_copyAnnotationLinks : public Callback_WellSample_copyAnnotationLinks_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::WellSampleAnnotationLinksSeq&);

    CallbackNC_WellSample_copyAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellSamplePrx __proxy = ::omero::model::WellSamplePrx::uncheckedCast(__result->getProxy());
        ::omero::model::WellSampleAnnotationLinksSeq __ret;
        try
        {
            __ret = __proxy->end_copyAnnotationLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_WellSample_copyAnnotationLinksPtr
newCallback_WellSample_copyAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::WellSampleAnnotationLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_copyAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WellSample_copyAnnotationLinksPtr
newCallback_WellSample_copyAnnotationLinks(T* instance, void (T::*cb)(const ::omero::model::WellSampleAnnotationLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_copyAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_WellSample_copyAnnotationLinks : public Callback_WellSample_copyAnnotationLinks_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::WellSampleAnnotationLinksSeq&, const CT&);

    Callback_WellSample_copyAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellSamplePrx __proxy = ::omero::model::WellSamplePrx::uncheckedCast(__result->getProxy());
        ::omero::model::WellSampleAnnotationLinksSeq __ret;
        try
        {
            __ret = __proxy->end_copyAnnotationLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_WellSample_copyAnnotationLinksPtr
newCallback_WellSample_copyAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::WellSampleAnnotationLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_copyAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WellSample_copyAnnotationLinksPtr
newCallback_WellSample_copyAnnotationLinks(T* instance, void (T::*cb)(const ::omero::model::WellSampleAnnotationLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_copyAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_WellSample_addWellSampleAnnotationLink : public Callback_WellSample_addWellSampleAnnotationLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_WellSample_addWellSampleAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_WellSample_addWellSampleAnnotationLinkPtr
newCallback_WellSample_addWellSampleAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_addWellSampleAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WellSample_addWellSampleAnnotationLinkPtr
newCallback_WellSample_addWellSampleAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_addWellSampleAnnotationLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_WellSample_addWellSampleAnnotationLinkPtr
newCallback_WellSample_addWellSampleAnnotationLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_addWellSampleAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WellSample_addWellSampleAnnotationLinkPtr
newCallback_WellSample_addWellSampleAnnotationLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_addWellSampleAnnotationLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_WellSample_addWellSampleAnnotationLink : public Callback_WellSample_addWellSampleAnnotationLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_WellSample_addWellSampleAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_WellSample_addWellSampleAnnotationLinkPtr
newCallback_WellSample_addWellSampleAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_addWellSampleAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WellSample_addWellSampleAnnotationLinkPtr
newCallback_WellSample_addWellSampleAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_addWellSampleAnnotationLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_WellSample_addWellSampleAnnotationLinkPtr
newCallback_WellSample_addWellSampleAnnotationLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_addWellSampleAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WellSample_addWellSampleAnnotationLinkPtr
newCallback_WellSample_addWellSampleAnnotationLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_addWellSampleAnnotationLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_WellSample_addAllWellSampleAnnotationLinkSet : public Callback_WellSample_addAllWellSampleAnnotationLinkSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_WellSample_addAllWellSampleAnnotationLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_WellSample_addAllWellSampleAnnotationLinkSetPtr
newCallback_WellSample_addAllWellSampleAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_addAllWellSampleAnnotationLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WellSample_addAllWellSampleAnnotationLinkSetPtr
newCallback_WellSample_addAllWellSampleAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_addAllWellSampleAnnotationLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_WellSample_addAllWellSampleAnnotationLinkSetPtr
newCallback_WellSample_addAllWellSampleAnnotationLinkSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_addAllWellSampleAnnotationLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WellSample_addAllWellSampleAnnotationLinkSetPtr
newCallback_WellSample_addAllWellSampleAnnotationLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_addAllWellSampleAnnotationLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_WellSample_addAllWellSampleAnnotationLinkSet : public Callback_WellSample_addAllWellSampleAnnotationLinkSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_WellSample_addAllWellSampleAnnotationLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_WellSample_addAllWellSampleAnnotationLinkSetPtr
newCallback_WellSample_addAllWellSampleAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_addAllWellSampleAnnotationLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WellSample_addAllWellSampleAnnotationLinkSetPtr
newCallback_WellSample_addAllWellSampleAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_addAllWellSampleAnnotationLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_WellSample_addAllWellSampleAnnotationLinkSetPtr
newCallback_WellSample_addAllWellSampleAnnotationLinkSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_addAllWellSampleAnnotationLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WellSample_addAllWellSampleAnnotationLinkSetPtr
newCallback_WellSample_addAllWellSampleAnnotationLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_addAllWellSampleAnnotationLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_WellSample_removeWellSampleAnnotationLink : public Callback_WellSample_removeWellSampleAnnotationLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_WellSample_removeWellSampleAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_WellSample_removeWellSampleAnnotationLinkPtr
newCallback_WellSample_removeWellSampleAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_removeWellSampleAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WellSample_removeWellSampleAnnotationLinkPtr
newCallback_WellSample_removeWellSampleAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_removeWellSampleAnnotationLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_WellSample_removeWellSampleAnnotationLinkPtr
newCallback_WellSample_removeWellSampleAnnotationLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_removeWellSampleAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WellSample_removeWellSampleAnnotationLinkPtr
newCallback_WellSample_removeWellSampleAnnotationLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_removeWellSampleAnnotationLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_WellSample_removeWellSampleAnnotationLink : public Callback_WellSample_removeWellSampleAnnotationLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_WellSample_removeWellSampleAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_WellSample_removeWellSampleAnnotationLinkPtr
newCallback_WellSample_removeWellSampleAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_removeWellSampleAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WellSample_removeWellSampleAnnotationLinkPtr
newCallback_WellSample_removeWellSampleAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_removeWellSampleAnnotationLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_WellSample_removeWellSampleAnnotationLinkPtr
newCallback_WellSample_removeWellSampleAnnotationLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_removeWellSampleAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WellSample_removeWellSampleAnnotationLinkPtr
newCallback_WellSample_removeWellSampleAnnotationLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_removeWellSampleAnnotationLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_WellSample_removeAllWellSampleAnnotationLinkSet : public Callback_WellSample_removeAllWellSampleAnnotationLinkSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_WellSample_removeAllWellSampleAnnotationLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_WellSample_removeAllWellSampleAnnotationLinkSetPtr
newCallback_WellSample_removeAllWellSampleAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_removeAllWellSampleAnnotationLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WellSample_removeAllWellSampleAnnotationLinkSetPtr
newCallback_WellSample_removeAllWellSampleAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_removeAllWellSampleAnnotationLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_WellSample_removeAllWellSampleAnnotationLinkSetPtr
newCallback_WellSample_removeAllWellSampleAnnotationLinkSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_removeAllWellSampleAnnotationLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WellSample_removeAllWellSampleAnnotationLinkSetPtr
newCallback_WellSample_removeAllWellSampleAnnotationLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_removeAllWellSampleAnnotationLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_WellSample_removeAllWellSampleAnnotationLinkSet : public Callback_WellSample_removeAllWellSampleAnnotationLinkSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_WellSample_removeAllWellSampleAnnotationLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_WellSample_removeAllWellSampleAnnotationLinkSetPtr
newCallback_WellSample_removeAllWellSampleAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_removeAllWellSampleAnnotationLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WellSample_removeAllWellSampleAnnotationLinkSetPtr
newCallback_WellSample_removeAllWellSampleAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_removeAllWellSampleAnnotationLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_WellSample_removeAllWellSampleAnnotationLinkSetPtr
newCallback_WellSample_removeAllWellSampleAnnotationLinkSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_removeAllWellSampleAnnotationLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WellSample_removeAllWellSampleAnnotationLinkSetPtr
newCallback_WellSample_removeAllWellSampleAnnotationLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_removeAllWellSampleAnnotationLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_WellSample_clearAnnotationLinks : public Callback_WellSample_clearAnnotationLinks_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_WellSample_clearAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_WellSample_clearAnnotationLinksPtr
newCallback_WellSample_clearAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_clearAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WellSample_clearAnnotationLinksPtr
newCallback_WellSample_clearAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_clearAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_WellSample_clearAnnotationLinksPtr
newCallback_WellSample_clearAnnotationLinks(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_clearAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WellSample_clearAnnotationLinksPtr
newCallback_WellSample_clearAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_clearAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_WellSample_clearAnnotationLinks : public Callback_WellSample_clearAnnotationLinks_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_WellSample_clearAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_WellSample_clearAnnotationLinksPtr
newCallback_WellSample_clearAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_clearAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WellSample_clearAnnotationLinksPtr
newCallback_WellSample_clearAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_clearAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_WellSample_clearAnnotationLinksPtr
newCallback_WellSample_clearAnnotationLinks(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_clearAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WellSample_clearAnnotationLinksPtr
newCallback_WellSample_clearAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_clearAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_WellSample_reloadAnnotationLinks : public Callback_WellSample_reloadAnnotationLinks_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_WellSample_reloadAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_WellSample_reloadAnnotationLinksPtr
newCallback_WellSample_reloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_reloadAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WellSample_reloadAnnotationLinksPtr
newCallback_WellSample_reloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_reloadAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_WellSample_reloadAnnotationLinksPtr
newCallback_WellSample_reloadAnnotationLinks(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_reloadAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WellSample_reloadAnnotationLinksPtr
newCallback_WellSample_reloadAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_reloadAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_WellSample_reloadAnnotationLinks : public Callback_WellSample_reloadAnnotationLinks_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_WellSample_reloadAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_WellSample_reloadAnnotationLinksPtr
newCallback_WellSample_reloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_reloadAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WellSample_reloadAnnotationLinksPtr
newCallback_WellSample_reloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_reloadAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_WellSample_reloadAnnotationLinksPtr
newCallback_WellSample_reloadAnnotationLinks(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_reloadAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WellSample_reloadAnnotationLinksPtr
newCallback_WellSample_reloadAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_reloadAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_WellSample_getAnnotationLinksCountPerOwner : public Callback_WellSample_getAnnotationLinksCountPerOwner_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::sys::CountMap&);

    CallbackNC_WellSample_getAnnotationLinksCountPerOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellSamplePrx __proxy = ::omero::model::WellSamplePrx::uncheckedCast(__result->getProxy());
        ::omero::sys::CountMap __ret;
        try
        {
            __ret = __proxy->end_getAnnotationLinksCountPerOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_WellSample_getAnnotationLinksCountPerOwnerPtr
newCallback_WellSample_getAnnotationLinksCountPerOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::CountMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_getAnnotationLinksCountPerOwner<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WellSample_getAnnotationLinksCountPerOwnerPtr
newCallback_WellSample_getAnnotationLinksCountPerOwner(T* instance, void (T::*cb)(const ::omero::sys::CountMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_getAnnotationLinksCountPerOwner<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_WellSample_getAnnotationLinksCountPerOwner : public Callback_WellSample_getAnnotationLinksCountPerOwner_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::sys::CountMap&, const CT&);

    Callback_WellSample_getAnnotationLinksCountPerOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellSamplePrx __proxy = ::omero::model::WellSamplePrx::uncheckedCast(__result->getProxy());
        ::omero::sys::CountMap __ret;
        try
        {
            __ret = __proxy->end_getAnnotationLinksCountPerOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_WellSample_getAnnotationLinksCountPerOwnerPtr
newCallback_WellSample_getAnnotationLinksCountPerOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::CountMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_getAnnotationLinksCountPerOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WellSample_getAnnotationLinksCountPerOwnerPtr
newCallback_WellSample_getAnnotationLinksCountPerOwner(T* instance, void (T::*cb)(const ::omero::sys::CountMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_getAnnotationLinksCountPerOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_WellSample_linkAnnotation : public Callback_WellSample_linkAnnotation_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::WellSampleAnnotationLinkPtr&);

    CallbackNC_WellSample_linkAnnotation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellSamplePrx __proxy = ::omero::model::WellSamplePrx::uncheckedCast(__result->getProxy());
        ::omero::model::WellSampleAnnotationLinkPtr __ret;
        try
        {
            __ret = __proxy->end_linkAnnotation(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_WellSample_linkAnnotationPtr
newCallback_WellSample_linkAnnotation(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::WellSampleAnnotationLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_linkAnnotation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WellSample_linkAnnotationPtr
newCallback_WellSample_linkAnnotation(T* instance, void (T::*cb)(const ::omero::model::WellSampleAnnotationLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_linkAnnotation<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_WellSample_linkAnnotation : public Callback_WellSample_linkAnnotation_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::WellSampleAnnotationLinkPtr&, const CT&);

    Callback_WellSample_linkAnnotation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellSamplePrx __proxy = ::omero::model::WellSamplePrx::uncheckedCast(__result->getProxy());
        ::omero::model::WellSampleAnnotationLinkPtr __ret;
        try
        {
            __ret = __proxy->end_linkAnnotation(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_WellSample_linkAnnotationPtr
newCallback_WellSample_linkAnnotation(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::WellSampleAnnotationLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_linkAnnotation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WellSample_linkAnnotationPtr
newCallback_WellSample_linkAnnotation(T* instance, void (T::*cb)(const ::omero::model::WellSampleAnnotationLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_linkAnnotation<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_WellSample_addWellSampleAnnotationLinkToBoth : public Callback_WellSample_addWellSampleAnnotationLinkToBoth_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_WellSample_addWellSampleAnnotationLinkToBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_WellSample_addWellSampleAnnotationLinkToBothPtr
newCallback_WellSample_addWellSampleAnnotationLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_addWellSampleAnnotationLinkToBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WellSample_addWellSampleAnnotationLinkToBothPtr
newCallback_WellSample_addWellSampleAnnotationLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_addWellSampleAnnotationLinkToBoth<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_WellSample_addWellSampleAnnotationLinkToBothPtr
newCallback_WellSample_addWellSampleAnnotationLinkToBoth(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_addWellSampleAnnotationLinkToBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WellSample_addWellSampleAnnotationLinkToBothPtr
newCallback_WellSample_addWellSampleAnnotationLinkToBoth(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_addWellSampleAnnotationLinkToBoth<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_WellSample_addWellSampleAnnotationLinkToBoth : public Callback_WellSample_addWellSampleAnnotationLinkToBoth_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_WellSample_addWellSampleAnnotationLinkToBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_WellSample_addWellSampleAnnotationLinkToBothPtr
newCallback_WellSample_addWellSampleAnnotationLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_addWellSampleAnnotationLinkToBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WellSample_addWellSampleAnnotationLinkToBothPtr
newCallback_WellSample_addWellSampleAnnotationLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_addWellSampleAnnotationLinkToBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_WellSample_addWellSampleAnnotationLinkToBothPtr
newCallback_WellSample_addWellSampleAnnotationLinkToBoth(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_addWellSampleAnnotationLinkToBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WellSample_addWellSampleAnnotationLinkToBothPtr
newCallback_WellSample_addWellSampleAnnotationLinkToBoth(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_addWellSampleAnnotationLinkToBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_WellSample_findWellSampleAnnotationLink : public Callback_WellSample_findWellSampleAnnotationLink_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::WellSampleAnnotationLinksSeq&);

    CallbackNC_WellSample_findWellSampleAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellSamplePrx __proxy = ::omero::model::WellSamplePrx::uncheckedCast(__result->getProxy());
        ::omero::model::WellSampleAnnotationLinksSeq __ret;
        try
        {
            __ret = __proxy->end_findWellSampleAnnotationLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_WellSample_findWellSampleAnnotationLinkPtr
newCallback_WellSample_findWellSampleAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::WellSampleAnnotationLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_findWellSampleAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WellSample_findWellSampleAnnotationLinkPtr
newCallback_WellSample_findWellSampleAnnotationLink(T* instance, void (T::*cb)(const ::omero::model::WellSampleAnnotationLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_findWellSampleAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_WellSample_findWellSampleAnnotationLink : public Callback_WellSample_findWellSampleAnnotationLink_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::WellSampleAnnotationLinksSeq&, const CT&);

    Callback_WellSample_findWellSampleAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellSamplePrx __proxy = ::omero::model::WellSamplePrx::uncheckedCast(__result->getProxy());
        ::omero::model::WellSampleAnnotationLinksSeq __ret;
        try
        {
            __ret = __proxy->end_findWellSampleAnnotationLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_WellSample_findWellSampleAnnotationLinkPtr
newCallback_WellSample_findWellSampleAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::WellSampleAnnotationLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_findWellSampleAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WellSample_findWellSampleAnnotationLinkPtr
newCallback_WellSample_findWellSampleAnnotationLink(T* instance, void (T::*cb)(const ::omero::model::WellSampleAnnotationLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_findWellSampleAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_WellSample_unlinkAnnotation : public Callback_WellSample_unlinkAnnotation_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_WellSample_unlinkAnnotation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_WellSample_unlinkAnnotationPtr
newCallback_WellSample_unlinkAnnotation(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_unlinkAnnotation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WellSample_unlinkAnnotationPtr
newCallback_WellSample_unlinkAnnotation(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_unlinkAnnotation<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_WellSample_unlinkAnnotationPtr
newCallback_WellSample_unlinkAnnotation(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_unlinkAnnotation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WellSample_unlinkAnnotationPtr
newCallback_WellSample_unlinkAnnotation(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_unlinkAnnotation<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_WellSample_unlinkAnnotation : public Callback_WellSample_unlinkAnnotation_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_WellSample_unlinkAnnotation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_WellSample_unlinkAnnotationPtr
newCallback_WellSample_unlinkAnnotation(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_unlinkAnnotation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WellSample_unlinkAnnotationPtr
newCallback_WellSample_unlinkAnnotation(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_unlinkAnnotation<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_WellSample_unlinkAnnotationPtr
newCallback_WellSample_unlinkAnnotation(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_unlinkAnnotation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WellSample_unlinkAnnotationPtr
newCallback_WellSample_unlinkAnnotation(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_unlinkAnnotation<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_WellSample_removeWellSampleAnnotationLinkFromBoth : public Callback_WellSample_removeWellSampleAnnotationLinkFromBoth_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_WellSample_removeWellSampleAnnotationLinkFromBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_WellSample_removeWellSampleAnnotationLinkFromBothPtr
newCallback_WellSample_removeWellSampleAnnotationLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_removeWellSampleAnnotationLinkFromBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WellSample_removeWellSampleAnnotationLinkFromBothPtr
newCallback_WellSample_removeWellSampleAnnotationLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_removeWellSampleAnnotationLinkFromBoth<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_WellSample_removeWellSampleAnnotationLinkFromBothPtr
newCallback_WellSample_removeWellSampleAnnotationLinkFromBoth(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_removeWellSampleAnnotationLinkFromBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WellSample_removeWellSampleAnnotationLinkFromBothPtr
newCallback_WellSample_removeWellSampleAnnotationLinkFromBoth(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_removeWellSampleAnnotationLinkFromBoth<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_WellSample_removeWellSampleAnnotationLinkFromBoth : public Callback_WellSample_removeWellSampleAnnotationLinkFromBoth_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_WellSample_removeWellSampleAnnotationLinkFromBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_WellSample_removeWellSampleAnnotationLinkFromBothPtr
newCallback_WellSample_removeWellSampleAnnotationLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_removeWellSampleAnnotationLinkFromBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WellSample_removeWellSampleAnnotationLinkFromBothPtr
newCallback_WellSample_removeWellSampleAnnotationLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_removeWellSampleAnnotationLinkFromBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_WellSample_removeWellSampleAnnotationLinkFromBothPtr
newCallback_WellSample_removeWellSampleAnnotationLinkFromBoth(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_removeWellSampleAnnotationLinkFromBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WellSample_removeWellSampleAnnotationLinkFromBothPtr
newCallback_WellSample_removeWellSampleAnnotationLinkFromBoth(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_removeWellSampleAnnotationLinkFromBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_WellSample_linkedAnnotationList : public Callback_WellSample_linkedAnnotationList_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::WellSampleLinkedAnnotationSeq&);

    CallbackNC_WellSample_linkedAnnotationList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellSamplePrx __proxy = ::omero::model::WellSamplePrx::uncheckedCast(__result->getProxy());
        ::omero::model::WellSampleLinkedAnnotationSeq __ret;
        try
        {
            __ret = __proxy->end_linkedAnnotationList(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_WellSample_linkedAnnotationListPtr
newCallback_WellSample_linkedAnnotationList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::WellSampleLinkedAnnotationSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_linkedAnnotationList<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WellSample_linkedAnnotationListPtr
newCallback_WellSample_linkedAnnotationList(T* instance, void (T::*cb)(const ::omero::model::WellSampleLinkedAnnotationSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WellSample_linkedAnnotationList<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_WellSample_linkedAnnotationList : public Callback_WellSample_linkedAnnotationList_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::WellSampleLinkedAnnotationSeq&, const CT&);

    Callback_WellSample_linkedAnnotationList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::WellSamplePrx __proxy = ::omero::model::WellSamplePrx::uncheckedCast(__result->getProxy());
        ::omero::model::WellSampleLinkedAnnotationSeq __ret;
        try
        {
            __ret = __proxy->end_linkedAnnotationList(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_WellSample_linkedAnnotationListPtr
newCallback_WellSample_linkedAnnotationList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::WellSampleLinkedAnnotationSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_linkedAnnotationList<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WellSample_linkedAnnotationListPtr
newCallback_WellSample_linkedAnnotationList(T* instance, void (T::*cb)(const ::omero::model::WellSampleLinkedAnnotationSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WellSample_linkedAnnotationList<T, CT>(instance, cb, excb, sentcb);
}

}

}

#endif
