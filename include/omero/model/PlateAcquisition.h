// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `PlateAcquisition.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_PlateAcquisition_h__
#define __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_PlateAcquisition_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <omero/model/IObject.h>
#include <omero/RTypes.h>
#include <omero/System.h>
#include <omero/Collections.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace omero
{

namespace model
{

class Plate;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Plate>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Plate*);

class WellSample;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::WellSample>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::WellSample*);

class PlateAcquisitionAnnotationLink;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::PlateAcquisitionAnnotationLink>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::PlateAcquisitionAnnotationLink*);

class Annotation;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Annotation>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Annotation*);

class Details;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Details>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Details*);

class PlateAcquisition;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::PlateAcquisition>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::PlateAcquisition*);

}

}

}

namespace omero
{

namespace model
{

class Plate;
bool operator==(const Plate&, const Plate&);
bool operator<(const Plate&, const Plate&);
::Ice::Object* upCast(::omero::model::Plate*);
typedef ::IceInternal::Handle< ::omero::model::Plate> PlatePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Plate> PlatePrx;
void __patch(PlatePtr&, const ::Ice::ObjectPtr&);

class WellSample;
bool operator==(const WellSample&, const WellSample&);
bool operator<(const WellSample&, const WellSample&);
::Ice::Object* upCast(::omero::model::WellSample*);
typedef ::IceInternal::Handle< ::omero::model::WellSample> WellSamplePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::WellSample> WellSamplePrx;
void __patch(WellSamplePtr&, const ::Ice::ObjectPtr&);

class PlateAcquisitionAnnotationLink;
bool operator==(const PlateAcquisitionAnnotationLink&, const PlateAcquisitionAnnotationLink&);
bool operator<(const PlateAcquisitionAnnotationLink&, const PlateAcquisitionAnnotationLink&);
::Ice::Object* upCast(::omero::model::PlateAcquisitionAnnotationLink*);
typedef ::IceInternal::Handle< ::omero::model::PlateAcquisitionAnnotationLink> PlateAcquisitionAnnotationLinkPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::PlateAcquisitionAnnotationLink> PlateAcquisitionAnnotationLinkPrx;
void __patch(PlateAcquisitionAnnotationLinkPtr&, const ::Ice::ObjectPtr&);

class Annotation;
bool operator==(const Annotation&, const Annotation&);
bool operator<(const Annotation&, const Annotation&);
::Ice::Object* upCast(::omero::model::Annotation*);
typedef ::IceInternal::Handle< ::omero::model::Annotation> AnnotationPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Annotation> AnnotationPrx;
void __patch(AnnotationPtr&, const ::Ice::ObjectPtr&);

class Details;
bool operator==(const Details&, const Details&);
bool operator<(const Details&, const Details&);
::Ice::Object* upCast(::omero::model::Details*);
typedef ::IceInternal::Handle< ::omero::model::Details> DetailsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Details> DetailsPrx;
void __patch(DetailsPtr&, const ::Ice::ObjectPtr&);

class PlateAcquisition;
bool operator==(const PlateAcquisition&, const PlateAcquisition&);
bool operator<(const PlateAcquisition&, const PlateAcquisition&);
::Ice::Object* upCast(::omero::model::PlateAcquisition*);
typedef ::IceInternal::Handle< ::omero::model::PlateAcquisition> PlateAcquisitionPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::PlateAcquisition> PlateAcquisitionPrx;
void __patch(PlateAcquisitionPtr&, const ::Ice::ObjectPtr&);

}

}

namespace omero
{

namespace model
{

typedef ::std::vector< ::omero::model::WellSamplePtr> PlateAcquisitionWellSampleSeq;

typedef ::std::vector< ::omero::model::PlateAcquisitionAnnotationLinkPtr> PlateAcquisitionAnnotationLinksSeq;

typedef ::std::vector< ::omero::model::AnnotationPtr> PlateAcquisitionLinkedAnnotationSeq;

}

}

namespace omero
{

namespace model
{

class Callback_PlateAcquisition_getVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlateAcquisition_getVersion_Base> Callback_PlateAcquisition_getVersionPtr;

class Callback_PlateAcquisition_setVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlateAcquisition_setVersion_Base> Callback_PlateAcquisition_setVersionPtr;

class Callback_PlateAcquisition_getName_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlateAcquisition_getName_Base> Callback_PlateAcquisition_getNamePtr;

class Callback_PlateAcquisition_setName_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlateAcquisition_setName_Base> Callback_PlateAcquisition_setNamePtr;

class Callback_PlateAcquisition_getStartTime_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlateAcquisition_getStartTime_Base> Callback_PlateAcquisition_getStartTimePtr;

class Callback_PlateAcquisition_setStartTime_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlateAcquisition_setStartTime_Base> Callback_PlateAcquisition_setStartTimePtr;

class Callback_PlateAcquisition_getEndTime_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlateAcquisition_getEndTime_Base> Callback_PlateAcquisition_getEndTimePtr;

class Callback_PlateAcquisition_setEndTime_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlateAcquisition_setEndTime_Base> Callback_PlateAcquisition_setEndTimePtr;

class Callback_PlateAcquisition_getMaximumFieldCount_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlateAcquisition_getMaximumFieldCount_Base> Callback_PlateAcquisition_getMaximumFieldCountPtr;

class Callback_PlateAcquisition_setMaximumFieldCount_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlateAcquisition_setMaximumFieldCount_Base> Callback_PlateAcquisition_setMaximumFieldCountPtr;

class Callback_PlateAcquisition_getPlate_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlateAcquisition_getPlate_Base> Callback_PlateAcquisition_getPlatePtr;

class Callback_PlateAcquisition_setPlate_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlateAcquisition_setPlate_Base> Callback_PlateAcquisition_setPlatePtr;

class Callback_PlateAcquisition_unloadWellSample_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlateAcquisition_unloadWellSample_Base> Callback_PlateAcquisition_unloadWellSamplePtr;

class Callback_PlateAcquisition_sizeOfWellSample_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlateAcquisition_sizeOfWellSample_Base> Callback_PlateAcquisition_sizeOfWellSamplePtr;

class Callback_PlateAcquisition_copyWellSample_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlateAcquisition_copyWellSample_Base> Callback_PlateAcquisition_copyWellSamplePtr;

class Callback_PlateAcquisition_addWellSample_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlateAcquisition_addWellSample_Base> Callback_PlateAcquisition_addWellSamplePtr;

class Callback_PlateAcquisition_addAllWellSampleSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlateAcquisition_addAllWellSampleSet_Base> Callback_PlateAcquisition_addAllWellSampleSetPtr;

class Callback_PlateAcquisition_removeWellSample_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlateAcquisition_removeWellSample_Base> Callback_PlateAcquisition_removeWellSamplePtr;

class Callback_PlateAcquisition_removeAllWellSampleSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlateAcquisition_removeAllWellSampleSet_Base> Callback_PlateAcquisition_removeAllWellSampleSetPtr;

class Callback_PlateAcquisition_clearWellSample_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlateAcquisition_clearWellSample_Base> Callback_PlateAcquisition_clearWellSamplePtr;

class Callback_PlateAcquisition_reloadWellSample_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlateAcquisition_reloadWellSample_Base> Callback_PlateAcquisition_reloadWellSamplePtr;

class Callback_PlateAcquisition_unloadAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlateAcquisition_unloadAnnotationLinks_Base> Callback_PlateAcquisition_unloadAnnotationLinksPtr;

class Callback_PlateAcquisition_sizeOfAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlateAcquisition_sizeOfAnnotationLinks_Base> Callback_PlateAcquisition_sizeOfAnnotationLinksPtr;

class Callback_PlateAcquisition_copyAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlateAcquisition_copyAnnotationLinks_Base> Callback_PlateAcquisition_copyAnnotationLinksPtr;

class Callback_PlateAcquisition_addPlateAcquisitionAnnotationLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlateAcquisition_addPlateAcquisitionAnnotationLink_Base> Callback_PlateAcquisition_addPlateAcquisitionAnnotationLinkPtr;

class Callback_PlateAcquisition_addAllPlateAcquisitionAnnotationLinkSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlateAcquisition_addAllPlateAcquisitionAnnotationLinkSet_Base> Callback_PlateAcquisition_addAllPlateAcquisitionAnnotationLinkSetPtr;

class Callback_PlateAcquisition_removePlateAcquisitionAnnotationLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlateAcquisition_removePlateAcquisitionAnnotationLink_Base> Callback_PlateAcquisition_removePlateAcquisitionAnnotationLinkPtr;

class Callback_PlateAcquisition_removeAllPlateAcquisitionAnnotationLinkSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlateAcquisition_removeAllPlateAcquisitionAnnotationLinkSet_Base> Callback_PlateAcquisition_removeAllPlateAcquisitionAnnotationLinkSetPtr;

class Callback_PlateAcquisition_clearAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlateAcquisition_clearAnnotationLinks_Base> Callback_PlateAcquisition_clearAnnotationLinksPtr;

class Callback_PlateAcquisition_reloadAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlateAcquisition_reloadAnnotationLinks_Base> Callback_PlateAcquisition_reloadAnnotationLinksPtr;

class Callback_PlateAcquisition_getAnnotationLinksCountPerOwner_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlateAcquisition_getAnnotationLinksCountPerOwner_Base> Callback_PlateAcquisition_getAnnotationLinksCountPerOwnerPtr;

class Callback_PlateAcquisition_linkAnnotation_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlateAcquisition_linkAnnotation_Base> Callback_PlateAcquisition_linkAnnotationPtr;

class Callback_PlateAcquisition_addPlateAcquisitionAnnotationLinkToBoth_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlateAcquisition_addPlateAcquisitionAnnotationLinkToBoth_Base> Callback_PlateAcquisition_addPlateAcquisitionAnnotationLinkToBothPtr;

class Callback_PlateAcquisition_findPlateAcquisitionAnnotationLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlateAcquisition_findPlateAcquisitionAnnotationLink_Base> Callback_PlateAcquisition_findPlateAcquisitionAnnotationLinkPtr;

class Callback_PlateAcquisition_unlinkAnnotation_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlateAcquisition_unlinkAnnotation_Base> Callback_PlateAcquisition_unlinkAnnotationPtr;

class Callback_PlateAcquisition_removePlateAcquisitionAnnotationLinkFromBoth_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlateAcquisition_removePlateAcquisitionAnnotationLinkFromBoth_Base> Callback_PlateAcquisition_removePlateAcquisitionAnnotationLinkFromBothPtr;

class Callback_PlateAcquisition_linkedAnnotationList_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlateAcquisition_linkedAnnotationList_Base> Callback_PlateAcquisition_linkedAnnotationListPtr;

class Callback_PlateAcquisition_getDescription_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlateAcquisition_getDescription_Base> Callback_PlateAcquisition_getDescriptionPtr;

class Callback_PlateAcquisition_setDescription_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlateAcquisition_setDescription_Base> Callback_PlateAcquisition_setDescriptionPtr;

}

}

namespace IceProxy
{

namespace omero
{

namespace model
{

class PlateAcquisition : virtual public ::IceProxy::omero::model::IObject
{
public:

    ::omero::RIntPtr getVersion()
    {
        return getVersion(0);
    }
    ::omero::RIntPtr getVersion(const ::Ice::Context& __ctx)
    {
        return getVersion(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getVersion(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getVersion(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getVersion(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getVersion(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getVersion(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RIntPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PlateAcquisitionPrx __proxy = ::omero::model::PlateAcquisitionPrx::uncheckedCast(__result->getProxy());
                ::omero::RIntPtr __ret;
                try
                {
                    __ret = __proxy->end_getVersion(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RIntPtr&)> _response;
        };
        return begin_getVersion(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getVersion()
    {
        return begin_getVersion(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx)
    {
        return begin_getVersion(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::omero::model::Callback_PlateAcquisition_getVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx, const ::omero::model::Callback_PlateAcquisition_getVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(&__ctx, __del, __cookie);
    }

    ::omero::RIntPtr end_getVersion(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RIntPtr getVersion(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setVersion(const ::omero::RIntPtr& theVersion)
    {
        setVersion(theVersion, 0);
    }
    void setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx)
    {
        setVersion(theVersion, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setVersion(const ::omero::RIntPtr& theVersion, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setVersion(theVersion, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setVersion(const ::omero::RIntPtr& theVersion, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setVersion(theVersion, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setVersion(theVersion, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setVersion(theVersion, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion)
    {
        return begin_setVersion(theVersion, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx)
    {
        return begin_setVersion(theVersion, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::omero::model::Callback_PlateAcquisition_setVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::omero::model::Callback_PlateAcquisition_setVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, &__ctx, __del, __cookie);
    }

    void end_setVersion(const ::Ice::AsyncResultPtr&);
    
private:

    void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getName()
    {
        return getName(0);
    }
    ::omero::RStringPtr getName(const ::Ice::Context& __ctx)
    {
        return getName(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getName(const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getName(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getName(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getName(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getName(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getName(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getName(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getName(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getName(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RStringPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PlateAcquisitionPrx __proxy = ::omero::model::PlateAcquisitionPrx::uncheckedCast(__result->getProxy());
                ::omero::RStringPtr __ret;
                try
                {
                    __ret = __proxy->end_getName(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RStringPtr&)> _response;
        };
        return begin_getName(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getName()
    {
        return begin_getName(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& __ctx)
    {
        return begin_getName(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getName(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getName(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::omero::model::Callback_PlateAcquisition_getNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getName(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& __ctx, const ::omero::model::Callback_PlateAcquisition_getNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getName(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getName(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getName(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setName(const ::omero::RStringPtr& theName)
    {
        setName(theName, 0);
    }
    void setName(const ::omero::RStringPtr& theName, const ::Ice::Context& __ctx)
    {
        setName(theName, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setName(const ::omero::RStringPtr& theName, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setName(theName, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setName(const ::omero::RStringPtr& theName, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setName(theName, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setName(const ::omero::RStringPtr& theName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setName(theName, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setName(const ::omero::RStringPtr& theName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setName(theName, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setName(const ::omero::RStringPtr& theName)
    {
        return begin_setName(theName, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setName(const ::omero::RStringPtr& theName, const ::Ice::Context& __ctx)
    {
        return begin_setName(theName, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setName(const ::omero::RStringPtr& theName, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setName(theName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setName(const ::omero::RStringPtr& theName, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setName(theName, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setName(const ::omero::RStringPtr& theName, const ::omero::model::Callback_PlateAcquisition_setNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setName(theName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setName(const ::omero::RStringPtr& theName, const ::Ice::Context& __ctx, const ::omero::model::Callback_PlateAcquisition_setNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setName(theName, &__ctx, __del, __cookie);
    }

    void end_setName(const ::Ice::AsyncResultPtr&);
    
private:

    void setName(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setName(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RTimePtr getStartTime()
    {
        return getStartTime(0);
    }
    ::omero::RTimePtr getStartTime(const ::Ice::Context& __ctx)
    {
        return getStartTime(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getStartTime(const ::IceInternal::Function<void (const ::omero::RTimePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getStartTime(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getStartTime(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getStartTime(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getStartTime(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RTimePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getStartTime(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getStartTime(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getStartTime(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getStartTime(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RTimePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RTimePtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PlateAcquisitionPrx __proxy = ::omero::model::PlateAcquisitionPrx::uncheckedCast(__result->getProxy());
                ::omero::RTimePtr __ret;
                try
                {
                    __ret = __proxy->end_getStartTime(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RTimePtr&)> _response;
        };
        return begin_getStartTime(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getStartTime()
    {
        return begin_getStartTime(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getStartTime(const ::Ice::Context& __ctx)
    {
        return begin_getStartTime(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getStartTime(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStartTime(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getStartTime(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStartTime(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getStartTime(const ::omero::model::Callback_PlateAcquisition_getStartTimePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStartTime(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getStartTime(const ::Ice::Context& __ctx, const ::omero::model::Callback_PlateAcquisition_getStartTimePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStartTime(&__ctx, __del, __cookie);
    }

    ::omero::RTimePtr end_getStartTime(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RTimePtr getStartTime(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getStartTime(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setStartTime(const ::omero::RTimePtr& theStartTime)
    {
        setStartTime(theStartTime, 0);
    }
    void setStartTime(const ::omero::RTimePtr& theStartTime, const ::Ice::Context& __ctx)
    {
        setStartTime(theStartTime, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setStartTime(const ::omero::RTimePtr& theStartTime, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setStartTime(theStartTime, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setStartTime(const ::omero::RTimePtr& theStartTime, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setStartTime(theStartTime, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setStartTime(const ::omero::RTimePtr& theStartTime, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setStartTime(theStartTime, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setStartTime(const ::omero::RTimePtr& theStartTime, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setStartTime(theStartTime, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setStartTime(const ::omero::RTimePtr& theStartTime)
    {
        return begin_setStartTime(theStartTime, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setStartTime(const ::omero::RTimePtr& theStartTime, const ::Ice::Context& __ctx)
    {
        return begin_setStartTime(theStartTime, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setStartTime(const ::omero::RTimePtr& theStartTime, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setStartTime(theStartTime, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setStartTime(const ::omero::RTimePtr& theStartTime, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setStartTime(theStartTime, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setStartTime(const ::omero::RTimePtr& theStartTime, const ::omero::model::Callback_PlateAcquisition_setStartTimePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setStartTime(theStartTime, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setStartTime(const ::omero::RTimePtr& theStartTime, const ::Ice::Context& __ctx, const ::omero::model::Callback_PlateAcquisition_setStartTimePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setStartTime(theStartTime, &__ctx, __del, __cookie);
    }

    void end_setStartTime(const ::Ice::AsyncResultPtr&);
    
private:

    void setStartTime(const ::omero::RTimePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setStartTime(const ::omero::RTimePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RTimePtr getEndTime()
    {
        return getEndTime(0);
    }
    ::omero::RTimePtr getEndTime(const ::Ice::Context& __ctx)
    {
        return getEndTime(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getEndTime(const ::IceInternal::Function<void (const ::omero::RTimePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getEndTime(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getEndTime(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getEndTime(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getEndTime(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RTimePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getEndTime(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getEndTime(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getEndTime(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getEndTime(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RTimePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RTimePtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PlateAcquisitionPrx __proxy = ::omero::model::PlateAcquisitionPrx::uncheckedCast(__result->getProxy());
                ::omero::RTimePtr __ret;
                try
                {
                    __ret = __proxy->end_getEndTime(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RTimePtr&)> _response;
        };
        return begin_getEndTime(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getEndTime()
    {
        return begin_getEndTime(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getEndTime(const ::Ice::Context& __ctx)
    {
        return begin_getEndTime(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getEndTime(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getEndTime(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getEndTime(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getEndTime(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getEndTime(const ::omero::model::Callback_PlateAcquisition_getEndTimePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getEndTime(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getEndTime(const ::Ice::Context& __ctx, const ::omero::model::Callback_PlateAcquisition_getEndTimePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getEndTime(&__ctx, __del, __cookie);
    }

    ::omero::RTimePtr end_getEndTime(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RTimePtr getEndTime(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getEndTime(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setEndTime(const ::omero::RTimePtr& theEndTime)
    {
        setEndTime(theEndTime, 0);
    }
    void setEndTime(const ::omero::RTimePtr& theEndTime, const ::Ice::Context& __ctx)
    {
        setEndTime(theEndTime, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setEndTime(const ::omero::RTimePtr& theEndTime, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setEndTime(theEndTime, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setEndTime(const ::omero::RTimePtr& theEndTime, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setEndTime(theEndTime, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setEndTime(const ::omero::RTimePtr& theEndTime, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setEndTime(theEndTime, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setEndTime(const ::omero::RTimePtr& theEndTime, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setEndTime(theEndTime, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setEndTime(const ::omero::RTimePtr& theEndTime)
    {
        return begin_setEndTime(theEndTime, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setEndTime(const ::omero::RTimePtr& theEndTime, const ::Ice::Context& __ctx)
    {
        return begin_setEndTime(theEndTime, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setEndTime(const ::omero::RTimePtr& theEndTime, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setEndTime(theEndTime, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setEndTime(const ::omero::RTimePtr& theEndTime, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setEndTime(theEndTime, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setEndTime(const ::omero::RTimePtr& theEndTime, const ::omero::model::Callback_PlateAcquisition_setEndTimePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setEndTime(theEndTime, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setEndTime(const ::omero::RTimePtr& theEndTime, const ::Ice::Context& __ctx, const ::omero::model::Callback_PlateAcquisition_setEndTimePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setEndTime(theEndTime, &__ctx, __del, __cookie);
    }

    void end_setEndTime(const ::Ice::AsyncResultPtr&);
    
private:

    void setEndTime(const ::omero::RTimePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setEndTime(const ::omero::RTimePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RIntPtr getMaximumFieldCount()
    {
        return getMaximumFieldCount(0);
    }
    ::omero::RIntPtr getMaximumFieldCount(const ::Ice::Context& __ctx)
    {
        return getMaximumFieldCount(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getMaximumFieldCount(const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getMaximumFieldCount(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getMaximumFieldCount(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getMaximumFieldCount(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getMaximumFieldCount(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getMaximumFieldCount(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getMaximumFieldCount(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getMaximumFieldCount(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getMaximumFieldCount(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RIntPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PlateAcquisitionPrx __proxy = ::omero::model::PlateAcquisitionPrx::uncheckedCast(__result->getProxy());
                ::omero::RIntPtr __ret;
                try
                {
                    __ret = __proxy->end_getMaximumFieldCount(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RIntPtr&)> _response;
        };
        return begin_getMaximumFieldCount(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getMaximumFieldCount()
    {
        return begin_getMaximumFieldCount(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getMaximumFieldCount(const ::Ice::Context& __ctx)
    {
        return begin_getMaximumFieldCount(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getMaximumFieldCount(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMaximumFieldCount(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMaximumFieldCount(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMaximumFieldCount(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMaximumFieldCount(const ::omero::model::Callback_PlateAcquisition_getMaximumFieldCountPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMaximumFieldCount(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMaximumFieldCount(const ::Ice::Context& __ctx, const ::omero::model::Callback_PlateAcquisition_getMaximumFieldCountPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMaximumFieldCount(&__ctx, __del, __cookie);
    }

    ::omero::RIntPtr end_getMaximumFieldCount(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RIntPtr getMaximumFieldCount(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getMaximumFieldCount(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setMaximumFieldCount(const ::omero::RIntPtr& theMaximumFieldCount)
    {
        setMaximumFieldCount(theMaximumFieldCount, 0);
    }
    void setMaximumFieldCount(const ::omero::RIntPtr& theMaximumFieldCount, const ::Ice::Context& __ctx)
    {
        setMaximumFieldCount(theMaximumFieldCount, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setMaximumFieldCount(const ::omero::RIntPtr& theMaximumFieldCount, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setMaximumFieldCount(theMaximumFieldCount, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setMaximumFieldCount(const ::omero::RIntPtr& theMaximumFieldCount, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setMaximumFieldCount(theMaximumFieldCount, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setMaximumFieldCount(const ::omero::RIntPtr& theMaximumFieldCount, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setMaximumFieldCount(theMaximumFieldCount, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setMaximumFieldCount(const ::omero::RIntPtr& theMaximumFieldCount, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setMaximumFieldCount(theMaximumFieldCount, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setMaximumFieldCount(const ::omero::RIntPtr& theMaximumFieldCount)
    {
        return begin_setMaximumFieldCount(theMaximumFieldCount, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setMaximumFieldCount(const ::omero::RIntPtr& theMaximumFieldCount, const ::Ice::Context& __ctx)
    {
        return begin_setMaximumFieldCount(theMaximumFieldCount, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setMaximumFieldCount(const ::omero::RIntPtr& theMaximumFieldCount, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setMaximumFieldCount(theMaximumFieldCount, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setMaximumFieldCount(const ::omero::RIntPtr& theMaximumFieldCount, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setMaximumFieldCount(theMaximumFieldCount, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setMaximumFieldCount(const ::omero::RIntPtr& theMaximumFieldCount, const ::omero::model::Callback_PlateAcquisition_setMaximumFieldCountPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setMaximumFieldCount(theMaximumFieldCount, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setMaximumFieldCount(const ::omero::RIntPtr& theMaximumFieldCount, const ::Ice::Context& __ctx, const ::omero::model::Callback_PlateAcquisition_setMaximumFieldCountPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setMaximumFieldCount(theMaximumFieldCount, &__ctx, __del, __cookie);
    }

    void end_setMaximumFieldCount(const ::Ice::AsyncResultPtr&);
    
private:

    void setMaximumFieldCount(const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setMaximumFieldCount(const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::PlatePtr getPlate()
    {
        return getPlate(0);
    }
    ::omero::model::PlatePtr getPlate(const ::Ice::Context& __ctx)
    {
        return getPlate(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getPlate(const ::IceInternal::Function<void (const ::omero::model::PlatePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPlate(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPlate(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPlate(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getPlate(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::PlatePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPlate(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPlate(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPlate(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getPlate(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::PlatePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::PlatePtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PlateAcquisitionPrx __proxy = ::omero::model::PlateAcquisitionPrx::uncheckedCast(__result->getProxy());
                ::omero::model::PlatePtr __ret;
                try
                {
                    __ret = __proxy->end_getPlate(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::PlatePtr&)> _response;
        };
        return begin_getPlate(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getPlate()
    {
        return begin_getPlate(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPlate(const ::Ice::Context& __ctx)
    {
        return begin_getPlate(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPlate(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPlate(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPlate(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPlate(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPlate(const ::omero::model::Callback_PlateAcquisition_getPlatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPlate(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPlate(const ::Ice::Context& __ctx, const ::omero::model::Callback_PlateAcquisition_getPlatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPlate(&__ctx, __del, __cookie);
    }

    ::omero::model::PlatePtr end_getPlate(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::PlatePtr getPlate(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getPlate(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setPlate(const ::omero::model::PlatePtr& thePlate)
    {
        setPlate(thePlate, 0);
    }
    void setPlate(const ::omero::model::PlatePtr& thePlate, const ::Ice::Context& __ctx)
    {
        setPlate(thePlate, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setPlate(const ::omero::model::PlatePtr& thePlate, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setPlate(thePlate, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setPlate(const ::omero::model::PlatePtr& thePlate, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPlate(thePlate, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setPlate(const ::omero::model::PlatePtr& thePlate, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setPlate(thePlate, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setPlate(const ::omero::model::PlatePtr& thePlate, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPlate(thePlate, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setPlate(const ::omero::model::PlatePtr& thePlate)
    {
        return begin_setPlate(thePlate, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPlate(const ::omero::model::PlatePtr& thePlate, const ::Ice::Context& __ctx)
    {
        return begin_setPlate(thePlate, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPlate(const ::omero::model::PlatePtr& thePlate, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPlate(thePlate, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPlate(const ::omero::model::PlatePtr& thePlate, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPlate(thePlate, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPlate(const ::omero::model::PlatePtr& thePlate, const ::omero::model::Callback_PlateAcquisition_setPlatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPlate(thePlate, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPlate(const ::omero::model::PlatePtr& thePlate, const ::Ice::Context& __ctx, const ::omero::model::Callback_PlateAcquisition_setPlatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPlate(thePlate, &__ctx, __del, __cookie);
    }

    void end_setPlate(const ::Ice::AsyncResultPtr&);
    
private:

    void setPlate(const ::omero::model::PlatePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setPlate(const ::omero::model::PlatePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unloadWellSample()
    {
        unloadWellSample(0);
    }
    void unloadWellSample(const ::Ice::Context& __ctx)
    {
        unloadWellSample(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_unloadWellSample(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unloadWellSample(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_unloadWellSample(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unloadWellSample(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unloadWellSample(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unloadWellSample(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unloadWellSample(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unloadWellSample(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_unloadWellSample()
    {
        return begin_unloadWellSample(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadWellSample(const ::Ice::Context& __ctx)
    {
        return begin_unloadWellSample(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadWellSample(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadWellSample(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadWellSample(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadWellSample(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadWellSample(const ::omero::model::Callback_PlateAcquisition_unloadWellSamplePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadWellSample(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadWellSample(const ::Ice::Context& __ctx, const ::omero::model::Callback_PlateAcquisition_unloadWellSamplePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadWellSample(&__ctx, __del, __cookie);
    }

    void end_unloadWellSample(const ::Ice::AsyncResultPtr&);
    
private:

    void unloadWellSample(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unloadWellSample(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int sizeOfWellSample()
    {
        return sizeOfWellSample(0);
    }
    ::Ice::Int sizeOfWellSample(const ::Ice::Context& __ctx)
    {
        return sizeOfWellSample(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_sizeOfWellSample(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sizeOfWellSample(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfWellSample(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sizeOfWellSample(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfWellSample(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sizeOfWellSample(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfWellSample(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sizeOfWellSample(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_sizeOfWellSample(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PlateAcquisitionPrx __proxy = ::omero::model::PlateAcquisitionPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_sizeOfWellSample(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_sizeOfWellSample(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_sizeOfWellSample()
    {
        return begin_sizeOfWellSample(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfWellSample(const ::Ice::Context& __ctx)
    {
        return begin_sizeOfWellSample(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfWellSample(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfWellSample(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfWellSample(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfWellSample(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfWellSample(const ::omero::model::Callback_PlateAcquisition_sizeOfWellSamplePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfWellSample(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfWellSample(const ::Ice::Context& __ctx, const ::omero::model::Callback_PlateAcquisition_sizeOfWellSamplePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfWellSample(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_sizeOfWellSample(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int sizeOfWellSample(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sizeOfWellSample(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::PlateAcquisitionWellSampleSeq copyWellSample()
    {
        return copyWellSample(0);
    }
    ::omero::model::PlateAcquisitionWellSampleSeq copyWellSample(const ::Ice::Context& __ctx)
    {
        return copyWellSample(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_copyWellSample(const ::IceInternal::Function<void (const ::omero::model::PlateAcquisitionWellSampleSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_copyWellSample(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_copyWellSample(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_copyWellSample(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_copyWellSample(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::PlateAcquisitionWellSampleSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_copyWellSample(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_copyWellSample(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_copyWellSample(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_copyWellSample(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::PlateAcquisitionWellSampleSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::PlateAcquisitionWellSampleSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PlateAcquisitionPrx __proxy = ::omero::model::PlateAcquisitionPrx::uncheckedCast(__result->getProxy());
                ::omero::model::PlateAcquisitionWellSampleSeq __ret;
                try
                {
                    __ret = __proxy->end_copyWellSample(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::PlateAcquisitionWellSampleSeq&)> _response;
        };
        return begin_copyWellSample(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_copyWellSample()
    {
        return begin_copyWellSample(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyWellSample(const ::Ice::Context& __ctx)
    {
        return begin_copyWellSample(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyWellSample(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyWellSample(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyWellSample(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyWellSample(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyWellSample(const ::omero::model::Callback_PlateAcquisition_copyWellSamplePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyWellSample(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyWellSample(const ::Ice::Context& __ctx, const ::omero::model::Callback_PlateAcquisition_copyWellSamplePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyWellSample(&__ctx, __del, __cookie);
    }

    ::omero::model::PlateAcquisitionWellSampleSeq end_copyWellSample(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::PlateAcquisitionWellSampleSeq copyWellSample(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_copyWellSample(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addWellSample(const ::omero::model::WellSamplePtr& target)
    {
        addWellSample(target, 0);
    }
    void addWellSample(const ::omero::model::WellSamplePtr& target, const ::Ice::Context& __ctx)
    {
        addWellSample(target, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addWellSample(const ::omero::model::WellSamplePtr& target, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addWellSample(target, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addWellSample(const ::omero::model::WellSamplePtr& target, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addWellSample(target, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addWellSample(const ::omero::model::WellSamplePtr& target, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addWellSample(target, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addWellSample(const ::omero::model::WellSamplePtr& target, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addWellSample(target, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addWellSample(const ::omero::model::WellSamplePtr& target)
    {
        return begin_addWellSample(target, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addWellSample(const ::omero::model::WellSamplePtr& target, const ::Ice::Context& __ctx)
    {
        return begin_addWellSample(target, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addWellSample(const ::omero::model::WellSamplePtr& target, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addWellSample(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addWellSample(const ::omero::model::WellSamplePtr& target, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addWellSample(target, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addWellSample(const ::omero::model::WellSamplePtr& target, const ::omero::model::Callback_PlateAcquisition_addWellSamplePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addWellSample(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addWellSample(const ::omero::model::WellSamplePtr& target, const ::Ice::Context& __ctx, const ::omero::model::Callback_PlateAcquisition_addWellSamplePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addWellSample(target, &__ctx, __del, __cookie);
    }

    void end_addWellSample(const ::Ice::AsyncResultPtr&);
    
private:

    void addWellSample(const ::omero::model::WellSamplePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addWellSample(const ::omero::model::WellSamplePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addAllWellSampleSet(const ::omero::model::PlateAcquisitionWellSampleSeq& targets)
    {
        addAllWellSampleSet(targets, 0);
    }
    void addAllWellSampleSet(const ::omero::model::PlateAcquisitionWellSampleSeq& targets, const ::Ice::Context& __ctx)
    {
        addAllWellSampleSet(targets, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addAllWellSampleSet(const ::omero::model::PlateAcquisitionWellSampleSeq& targets, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addAllWellSampleSet(targets, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addAllWellSampleSet(const ::omero::model::PlateAcquisitionWellSampleSeq& targets, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addAllWellSampleSet(targets, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addAllWellSampleSet(const ::omero::model::PlateAcquisitionWellSampleSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addAllWellSampleSet(targets, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addAllWellSampleSet(const ::omero::model::PlateAcquisitionWellSampleSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addAllWellSampleSet(targets, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addAllWellSampleSet(const ::omero::model::PlateAcquisitionWellSampleSeq& targets)
    {
        return begin_addAllWellSampleSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllWellSampleSet(const ::omero::model::PlateAcquisitionWellSampleSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_addAllWellSampleSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllWellSampleSet(const ::omero::model::PlateAcquisitionWellSampleSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllWellSampleSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllWellSampleSet(const ::omero::model::PlateAcquisitionWellSampleSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllWellSampleSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllWellSampleSet(const ::omero::model::PlateAcquisitionWellSampleSeq& targets, const ::omero::model::Callback_PlateAcquisition_addAllWellSampleSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllWellSampleSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllWellSampleSet(const ::omero::model::PlateAcquisitionWellSampleSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_PlateAcquisition_addAllWellSampleSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllWellSampleSet(targets, &__ctx, __del, __cookie);
    }

    void end_addAllWellSampleSet(const ::Ice::AsyncResultPtr&);
    
private:

    void addAllWellSampleSet(const ::omero::model::PlateAcquisitionWellSampleSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addAllWellSampleSet(const ::omero::model::PlateAcquisitionWellSampleSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeWellSample(const ::omero::model::WellSamplePtr& theTarget)
    {
        removeWellSample(theTarget, 0);
    }
    void removeWellSample(const ::omero::model::WellSamplePtr& theTarget, const ::Ice::Context& __ctx)
    {
        removeWellSample(theTarget, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeWellSample(const ::omero::model::WellSamplePtr& theTarget, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeWellSample(theTarget, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeWellSample(const ::omero::model::WellSamplePtr& theTarget, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeWellSample(theTarget, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeWellSample(const ::omero::model::WellSamplePtr& theTarget, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeWellSample(theTarget, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeWellSample(const ::omero::model::WellSamplePtr& theTarget, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeWellSample(theTarget, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeWellSample(const ::omero::model::WellSamplePtr& theTarget)
    {
        return begin_removeWellSample(theTarget, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeWellSample(const ::omero::model::WellSamplePtr& theTarget, const ::Ice::Context& __ctx)
    {
        return begin_removeWellSample(theTarget, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeWellSample(const ::omero::model::WellSamplePtr& theTarget, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeWellSample(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeWellSample(const ::omero::model::WellSamplePtr& theTarget, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeWellSample(theTarget, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeWellSample(const ::omero::model::WellSamplePtr& theTarget, const ::omero::model::Callback_PlateAcquisition_removeWellSamplePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeWellSample(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeWellSample(const ::omero::model::WellSamplePtr& theTarget, const ::Ice::Context& __ctx, const ::omero::model::Callback_PlateAcquisition_removeWellSamplePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeWellSample(theTarget, &__ctx, __del, __cookie);
    }

    void end_removeWellSample(const ::Ice::AsyncResultPtr&);
    
private:

    void removeWellSample(const ::omero::model::WellSamplePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeWellSample(const ::omero::model::WellSamplePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeAllWellSampleSet(const ::omero::model::PlateAcquisitionWellSampleSeq& targets)
    {
        removeAllWellSampleSet(targets, 0);
    }
    void removeAllWellSampleSet(const ::omero::model::PlateAcquisitionWellSampleSeq& targets, const ::Ice::Context& __ctx)
    {
        removeAllWellSampleSet(targets, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeAllWellSampleSet(const ::omero::model::PlateAcquisitionWellSampleSeq& targets, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeAllWellSampleSet(targets, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeAllWellSampleSet(const ::omero::model::PlateAcquisitionWellSampleSeq& targets, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeAllWellSampleSet(targets, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeAllWellSampleSet(const ::omero::model::PlateAcquisitionWellSampleSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeAllWellSampleSet(targets, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeAllWellSampleSet(const ::omero::model::PlateAcquisitionWellSampleSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeAllWellSampleSet(targets, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeAllWellSampleSet(const ::omero::model::PlateAcquisitionWellSampleSeq& targets)
    {
        return begin_removeAllWellSampleSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllWellSampleSet(const ::omero::model::PlateAcquisitionWellSampleSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_removeAllWellSampleSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllWellSampleSet(const ::omero::model::PlateAcquisitionWellSampleSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllWellSampleSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllWellSampleSet(const ::omero::model::PlateAcquisitionWellSampleSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllWellSampleSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllWellSampleSet(const ::omero::model::PlateAcquisitionWellSampleSeq& targets, const ::omero::model::Callback_PlateAcquisition_removeAllWellSampleSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllWellSampleSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllWellSampleSet(const ::omero::model::PlateAcquisitionWellSampleSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_PlateAcquisition_removeAllWellSampleSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllWellSampleSet(targets, &__ctx, __del, __cookie);
    }

    void end_removeAllWellSampleSet(const ::Ice::AsyncResultPtr&);
    
private:

    void removeAllWellSampleSet(const ::omero::model::PlateAcquisitionWellSampleSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeAllWellSampleSet(const ::omero::model::PlateAcquisitionWellSampleSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void clearWellSample()
    {
        clearWellSample(0);
    }
    void clearWellSample(const ::Ice::Context& __ctx)
    {
        clearWellSample(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_clearWellSample(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_clearWellSample(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_clearWellSample(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_clearWellSample(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_clearWellSample(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_clearWellSample(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_clearWellSample(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_clearWellSample(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_clearWellSample()
    {
        return begin_clearWellSample(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearWellSample(const ::Ice::Context& __ctx)
    {
        return begin_clearWellSample(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearWellSample(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearWellSample(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearWellSample(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearWellSample(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearWellSample(const ::omero::model::Callback_PlateAcquisition_clearWellSamplePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearWellSample(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearWellSample(const ::Ice::Context& __ctx, const ::omero::model::Callback_PlateAcquisition_clearWellSamplePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearWellSample(&__ctx, __del, __cookie);
    }

    void end_clearWellSample(const ::Ice::AsyncResultPtr&);
    
private:

    void clearWellSample(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_clearWellSample(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reloadWellSample(const ::omero::model::PlateAcquisitionPtr& toCopy)
    {
        reloadWellSample(toCopy, 0);
    }
    void reloadWellSample(const ::omero::model::PlateAcquisitionPtr& toCopy, const ::Ice::Context& __ctx)
    {
        reloadWellSample(toCopy, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_reloadWellSample(const ::omero::model::PlateAcquisitionPtr& toCopy, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reloadWellSample(toCopy, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_reloadWellSample(const ::omero::model::PlateAcquisitionPtr& toCopy, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reloadWellSample(toCopy, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reloadWellSample(const ::omero::model::PlateAcquisitionPtr& toCopy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reloadWellSample(toCopy, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reloadWellSample(const ::omero::model::PlateAcquisitionPtr& toCopy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reloadWellSample(toCopy, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_reloadWellSample(const ::omero::model::PlateAcquisitionPtr& toCopy)
    {
        return begin_reloadWellSample(toCopy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadWellSample(const ::omero::model::PlateAcquisitionPtr& toCopy, const ::Ice::Context& __ctx)
    {
        return begin_reloadWellSample(toCopy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadWellSample(const ::omero::model::PlateAcquisitionPtr& toCopy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadWellSample(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadWellSample(const ::omero::model::PlateAcquisitionPtr& toCopy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadWellSample(toCopy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadWellSample(const ::omero::model::PlateAcquisitionPtr& toCopy, const ::omero::model::Callback_PlateAcquisition_reloadWellSamplePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadWellSample(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadWellSample(const ::omero::model::PlateAcquisitionPtr& toCopy, const ::Ice::Context& __ctx, const ::omero::model::Callback_PlateAcquisition_reloadWellSamplePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadWellSample(toCopy, &__ctx, __del, __cookie);
    }

    void end_reloadWellSample(const ::Ice::AsyncResultPtr&);
    
private:

    void reloadWellSample(const ::omero::model::PlateAcquisitionPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reloadWellSample(const ::omero::model::PlateAcquisitionPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unloadAnnotationLinks()
    {
        unloadAnnotationLinks(0);
    }
    void unloadAnnotationLinks(const ::Ice::Context& __ctx)
    {
        unloadAnnotationLinks(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_unloadAnnotationLinks(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unloadAnnotationLinks(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_unloadAnnotationLinks(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unloadAnnotationLinks(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unloadAnnotationLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unloadAnnotationLinks(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unloadAnnotationLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unloadAnnotationLinks(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks()
    {
        return begin_unloadAnnotationLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return begin_unloadAnnotationLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::omero::model::Callback_PlateAcquisition_unloadAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_PlateAcquisition_unloadAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadAnnotationLinks(&__ctx, __del, __cookie);
    }

    void end_unloadAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    void unloadAnnotationLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int sizeOfAnnotationLinks()
    {
        return sizeOfAnnotationLinks(0);
    }
    ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return sizeOfAnnotationLinks(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_sizeOfAnnotationLinks(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sizeOfAnnotationLinks(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfAnnotationLinks(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sizeOfAnnotationLinks(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfAnnotationLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sizeOfAnnotationLinks(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfAnnotationLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sizeOfAnnotationLinks(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_sizeOfAnnotationLinks(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PlateAcquisitionPrx __proxy = ::omero::model::PlateAcquisitionPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_sizeOfAnnotationLinks(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_sizeOfAnnotationLinks(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks()
    {
        return begin_sizeOfAnnotationLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return begin_sizeOfAnnotationLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::omero::model::Callback_PlateAcquisition_sizeOfAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_PlateAcquisition_sizeOfAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_sizeOfAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::PlateAcquisitionAnnotationLinksSeq copyAnnotationLinks()
    {
        return copyAnnotationLinks(0);
    }
    ::omero::model::PlateAcquisitionAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return copyAnnotationLinks(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_copyAnnotationLinks(const ::IceInternal::Function<void (const ::omero::model::PlateAcquisitionAnnotationLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_copyAnnotationLinks(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_copyAnnotationLinks(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_copyAnnotationLinks(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_copyAnnotationLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::PlateAcquisitionAnnotationLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_copyAnnotationLinks(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_copyAnnotationLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_copyAnnotationLinks(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_copyAnnotationLinks(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::PlateAcquisitionAnnotationLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::PlateAcquisitionAnnotationLinksSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PlateAcquisitionPrx __proxy = ::omero::model::PlateAcquisitionPrx::uncheckedCast(__result->getProxy());
                ::omero::model::PlateAcquisitionAnnotationLinksSeq __ret;
                try
                {
                    __ret = __proxy->end_copyAnnotationLinks(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::PlateAcquisitionAnnotationLinksSeq&)> _response;
        };
        return begin_copyAnnotationLinks(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks()
    {
        return begin_copyAnnotationLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return begin_copyAnnotationLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::omero::model::Callback_PlateAcquisition_copyAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_PlateAcquisition_copyAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::omero::model::PlateAcquisitionAnnotationLinksSeq end_copyAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::PlateAcquisitionAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addPlateAcquisitionAnnotationLink(const ::omero::model::PlateAcquisitionAnnotationLinkPtr& target)
    {
        addPlateAcquisitionAnnotationLink(target, 0);
    }
    void addPlateAcquisitionAnnotationLink(const ::omero::model::PlateAcquisitionAnnotationLinkPtr& target, const ::Ice::Context& __ctx)
    {
        addPlateAcquisitionAnnotationLink(target, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addPlateAcquisitionAnnotationLink(const ::omero::model::PlateAcquisitionAnnotationLinkPtr& target, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addPlateAcquisitionAnnotationLink(target, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addPlateAcquisitionAnnotationLink(const ::omero::model::PlateAcquisitionAnnotationLinkPtr& target, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addPlateAcquisitionAnnotationLink(target, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addPlateAcquisitionAnnotationLink(const ::omero::model::PlateAcquisitionAnnotationLinkPtr& target, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addPlateAcquisitionAnnotationLink(target, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addPlateAcquisitionAnnotationLink(const ::omero::model::PlateAcquisitionAnnotationLinkPtr& target, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addPlateAcquisitionAnnotationLink(target, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addPlateAcquisitionAnnotationLink(const ::omero::model::PlateAcquisitionAnnotationLinkPtr& target)
    {
        return begin_addPlateAcquisitionAnnotationLink(target, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addPlateAcquisitionAnnotationLink(const ::omero::model::PlateAcquisitionAnnotationLinkPtr& target, const ::Ice::Context& __ctx)
    {
        return begin_addPlateAcquisitionAnnotationLink(target, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addPlateAcquisitionAnnotationLink(const ::omero::model::PlateAcquisitionAnnotationLinkPtr& target, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPlateAcquisitionAnnotationLink(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addPlateAcquisitionAnnotationLink(const ::omero::model::PlateAcquisitionAnnotationLinkPtr& target, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPlateAcquisitionAnnotationLink(target, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addPlateAcquisitionAnnotationLink(const ::omero::model::PlateAcquisitionAnnotationLinkPtr& target, const ::omero::model::Callback_PlateAcquisition_addPlateAcquisitionAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPlateAcquisitionAnnotationLink(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addPlateAcquisitionAnnotationLink(const ::omero::model::PlateAcquisitionAnnotationLinkPtr& target, const ::Ice::Context& __ctx, const ::omero::model::Callback_PlateAcquisition_addPlateAcquisitionAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPlateAcquisitionAnnotationLink(target, &__ctx, __del, __cookie);
    }

    void end_addPlateAcquisitionAnnotationLink(const ::Ice::AsyncResultPtr&);
    
private:

    void addPlateAcquisitionAnnotationLink(const ::omero::model::PlateAcquisitionAnnotationLinkPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addPlateAcquisitionAnnotationLink(const ::omero::model::PlateAcquisitionAnnotationLinkPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addAllPlateAcquisitionAnnotationLinkSet(const ::omero::model::PlateAcquisitionAnnotationLinksSeq& targets)
    {
        addAllPlateAcquisitionAnnotationLinkSet(targets, 0);
    }
    void addAllPlateAcquisitionAnnotationLinkSet(const ::omero::model::PlateAcquisitionAnnotationLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        addAllPlateAcquisitionAnnotationLinkSet(targets, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addAllPlateAcquisitionAnnotationLinkSet(const ::omero::model::PlateAcquisitionAnnotationLinksSeq& targets, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addAllPlateAcquisitionAnnotationLinkSet(targets, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addAllPlateAcquisitionAnnotationLinkSet(const ::omero::model::PlateAcquisitionAnnotationLinksSeq& targets, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addAllPlateAcquisitionAnnotationLinkSet(targets, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addAllPlateAcquisitionAnnotationLinkSet(const ::omero::model::PlateAcquisitionAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addAllPlateAcquisitionAnnotationLinkSet(targets, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addAllPlateAcquisitionAnnotationLinkSet(const ::omero::model::PlateAcquisitionAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addAllPlateAcquisitionAnnotationLinkSet(targets, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addAllPlateAcquisitionAnnotationLinkSet(const ::omero::model::PlateAcquisitionAnnotationLinksSeq& targets)
    {
        return begin_addAllPlateAcquisitionAnnotationLinkSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllPlateAcquisitionAnnotationLinkSet(const ::omero::model::PlateAcquisitionAnnotationLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_addAllPlateAcquisitionAnnotationLinkSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllPlateAcquisitionAnnotationLinkSet(const ::omero::model::PlateAcquisitionAnnotationLinksSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllPlateAcquisitionAnnotationLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllPlateAcquisitionAnnotationLinkSet(const ::omero::model::PlateAcquisitionAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllPlateAcquisitionAnnotationLinkSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllPlateAcquisitionAnnotationLinkSet(const ::omero::model::PlateAcquisitionAnnotationLinksSeq& targets, const ::omero::model::Callback_PlateAcquisition_addAllPlateAcquisitionAnnotationLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllPlateAcquisitionAnnotationLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllPlateAcquisitionAnnotationLinkSet(const ::omero::model::PlateAcquisitionAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_PlateAcquisition_addAllPlateAcquisitionAnnotationLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllPlateAcquisitionAnnotationLinkSet(targets, &__ctx, __del, __cookie);
    }

    void end_addAllPlateAcquisitionAnnotationLinkSet(const ::Ice::AsyncResultPtr&);
    
private:

    void addAllPlateAcquisitionAnnotationLinkSet(const ::omero::model::PlateAcquisitionAnnotationLinksSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addAllPlateAcquisitionAnnotationLinkSet(const ::omero::model::PlateAcquisitionAnnotationLinksSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removePlateAcquisitionAnnotationLink(const ::omero::model::PlateAcquisitionAnnotationLinkPtr& theTarget)
    {
        removePlateAcquisitionAnnotationLink(theTarget, 0);
    }
    void removePlateAcquisitionAnnotationLink(const ::omero::model::PlateAcquisitionAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx)
    {
        removePlateAcquisitionAnnotationLink(theTarget, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removePlateAcquisitionAnnotationLink(const ::omero::model::PlateAcquisitionAnnotationLinkPtr& theTarget, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removePlateAcquisitionAnnotationLink(theTarget, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removePlateAcquisitionAnnotationLink(const ::omero::model::PlateAcquisitionAnnotationLinkPtr& theTarget, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removePlateAcquisitionAnnotationLink(theTarget, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removePlateAcquisitionAnnotationLink(const ::omero::model::PlateAcquisitionAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removePlateAcquisitionAnnotationLink(theTarget, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removePlateAcquisitionAnnotationLink(const ::omero::model::PlateAcquisitionAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removePlateAcquisitionAnnotationLink(theTarget, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removePlateAcquisitionAnnotationLink(const ::omero::model::PlateAcquisitionAnnotationLinkPtr& theTarget)
    {
        return begin_removePlateAcquisitionAnnotationLink(theTarget, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removePlateAcquisitionAnnotationLink(const ::omero::model::PlateAcquisitionAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx)
    {
        return begin_removePlateAcquisitionAnnotationLink(theTarget, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removePlateAcquisitionAnnotationLink(const ::omero::model::PlateAcquisitionAnnotationLinkPtr& theTarget, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removePlateAcquisitionAnnotationLink(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removePlateAcquisitionAnnotationLink(const ::omero::model::PlateAcquisitionAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removePlateAcquisitionAnnotationLink(theTarget, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removePlateAcquisitionAnnotationLink(const ::omero::model::PlateAcquisitionAnnotationLinkPtr& theTarget, const ::omero::model::Callback_PlateAcquisition_removePlateAcquisitionAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removePlateAcquisitionAnnotationLink(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removePlateAcquisitionAnnotationLink(const ::omero::model::PlateAcquisitionAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::omero::model::Callback_PlateAcquisition_removePlateAcquisitionAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removePlateAcquisitionAnnotationLink(theTarget, &__ctx, __del, __cookie);
    }

    void end_removePlateAcquisitionAnnotationLink(const ::Ice::AsyncResultPtr&);
    
private:

    void removePlateAcquisitionAnnotationLink(const ::omero::model::PlateAcquisitionAnnotationLinkPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removePlateAcquisitionAnnotationLink(const ::omero::model::PlateAcquisitionAnnotationLinkPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeAllPlateAcquisitionAnnotationLinkSet(const ::omero::model::PlateAcquisitionAnnotationLinksSeq& targets)
    {
        removeAllPlateAcquisitionAnnotationLinkSet(targets, 0);
    }
    void removeAllPlateAcquisitionAnnotationLinkSet(const ::omero::model::PlateAcquisitionAnnotationLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        removeAllPlateAcquisitionAnnotationLinkSet(targets, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeAllPlateAcquisitionAnnotationLinkSet(const ::omero::model::PlateAcquisitionAnnotationLinksSeq& targets, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeAllPlateAcquisitionAnnotationLinkSet(targets, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeAllPlateAcquisitionAnnotationLinkSet(const ::omero::model::PlateAcquisitionAnnotationLinksSeq& targets, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeAllPlateAcquisitionAnnotationLinkSet(targets, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeAllPlateAcquisitionAnnotationLinkSet(const ::omero::model::PlateAcquisitionAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeAllPlateAcquisitionAnnotationLinkSet(targets, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeAllPlateAcquisitionAnnotationLinkSet(const ::omero::model::PlateAcquisitionAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeAllPlateAcquisitionAnnotationLinkSet(targets, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeAllPlateAcquisitionAnnotationLinkSet(const ::omero::model::PlateAcquisitionAnnotationLinksSeq& targets)
    {
        return begin_removeAllPlateAcquisitionAnnotationLinkSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllPlateAcquisitionAnnotationLinkSet(const ::omero::model::PlateAcquisitionAnnotationLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_removeAllPlateAcquisitionAnnotationLinkSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllPlateAcquisitionAnnotationLinkSet(const ::omero::model::PlateAcquisitionAnnotationLinksSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllPlateAcquisitionAnnotationLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllPlateAcquisitionAnnotationLinkSet(const ::omero::model::PlateAcquisitionAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllPlateAcquisitionAnnotationLinkSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllPlateAcquisitionAnnotationLinkSet(const ::omero::model::PlateAcquisitionAnnotationLinksSeq& targets, const ::omero::model::Callback_PlateAcquisition_removeAllPlateAcquisitionAnnotationLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllPlateAcquisitionAnnotationLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllPlateAcquisitionAnnotationLinkSet(const ::omero::model::PlateAcquisitionAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_PlateAcquisition_removeAllPlateAcquisitionAnnotationLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllPlateAcquisitionAnnotationLinkSet(targets, &__ctx, __del, __cookie);
    }

    void end_removeAllPlateAcquisitionAnnotationLinkSet(const ::Ice::AsyncResultPtr&);
    
private:

    void removeAllPlateAcquisitionAnnotationLinkSet(const ::omero::model::PlateAcquisitionAnnotationLinksSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeAllPlateAcquisitionAnnotationLinkSet(const ::omero::model::PlateAcquisitionAnnotationLinksSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void clearAnnotationLinks()
    {
        clearAnnotationLinks(0);
    }
    void clearAnnotationLinks(const ::Ice::Context& __ctx)
    {
        clearAnnotationLinks(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_clearAnnotationLinks(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_clearAnnotationLinks(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_clearAnnotationLinks(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_clearAnnotationLinks(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_clearAnnotationLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_clearAnnotationLinks(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_clearAnnotationLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_clearAnnotationLinks(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks()
    {
        return begin_clearAnnotationLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return begin_clearAnnotationLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::omero::model::Callback_PlateAcquisition_clearAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_PlateAcquisition_clearAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearAnnotationLinks(&__ctx, __del, __cookie);
    }

    void end_clearAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    void clearAnnotationLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reloadAnnotationLinks(const ::omero::model::PlateAcquisitionPtr& toCopy)
    {
        reloadAnnotationLinks(toCopy, 0);
    }
    void reloadAnnotationLinks(const ::omero::model::PlateAcquisitionPtr& toCopy, const ::Ice::Context& __ctx)
    {
        reloadAnnotationLinks(toCopy, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_reloadAnnotationLinks(const ::omero::model::PlateAcquisitionPtr& toCopy, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reloadAnnotationLinks(toCopy, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_reloadAnnotationLinks(const ::omero::model::PlateAcquisitionPtr& toCopy, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reloadAnnotationLinks(toCopy, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reloadAnnotationLinks(const ::omero::model::PlateAcquisitionPtr& toCopy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reloadAnnotationLinks(toCopy, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reloadAnnotationLinks(const ::omero::model::PlateAcquisitionPtr& toCopy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reloadAnnotationLinks(toCopy, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::PlateAcquisitionPtr& toCopy)
    {
        return begin_reloadAnnotationLinks(toCopy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::PlateAcquisitionPtr& toCopy, const ::Ice::Context& __ctx)
    {
        return begin_reloadAnnotationLinks(toCopy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::PlateAcquisitionPtr& toCopy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadAnnotationLinks(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::PlateAcquisitionPtr& toCopy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadAnnotationLinks(toCopy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::PlateAcquisitionPtr& toCopy, const ::omero::model::Callback_PlateAcquisition_reloadAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadAnnotationLinks(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::PlateAcquisitionPtr& toCopy, const ::Ice::Context& __ctx, const ::omero::model::Callback_PlateAcquisition_reloadAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadAnnotationLinks(toCopy, &__ctx, __del, __cookie);
    }

    void end_reloadAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    void reloadAnnotationLinks(const ::omero::model::PlateAcquisitionPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::PlateAcquisitionPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::sys::CountMap getAnnotationLinksCountPerOwner()
    {
        return getAnnotationLinksCountPerOwner(0);
    }
    ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx)
    {
        return getAnnotationLinksCountPerOwner(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getAnnotationLinksCountPerOwner(const ::IceInternal::Function<void (const ::omero::sys::CountMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAnnotationLinksCountPerOwner(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAnnotationLinksCountPerOwner(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAnnotationLinksCountPerOwner(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::sys::CountMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAnnotationLinksCountPerOwner(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAnnotationLinksCountPerOwner(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getAnnotationLinksCountPerOwner(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::sys::CountMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::sys::CountMap&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PlateAcquisitionPrx __proxy = ::omero::model::PlateAcquisitionPrx::uncheckedCast(__result->getProxy());
                ::omero::sys::CountMap __ret;
                try
                {
                    __ret = __proxy->end_getAnnotationLinksCountPerOwner(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::sys::CountMap&)> _response;
        };
        return begin_getAnnotationLinksCountPerOwner(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner()
    {
        return begin_getAnnotationLinksCountPerOwner(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx)
    {
        return begin_getAnnotationLinksCountPerOwner(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAnnotationLinksCountPerOwner(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAnnotationLinksCountPerOwner(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::omero::model::Callback_PlateAcquisition_getAnnotationLinksCountPerOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAnnotationLinksCountPerOwner(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx, const ::omero::model::Callback_PlateAcquisition_getAnnotationLinksCountPerOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAnnotationLinksCountPerOwner(&__ctx, __del, __cookie);
    }

    ::omero::sys::CountMap end_getAnnotationLinksCountPerOwner(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::PlateAcquisitionAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr& addition)
    {
        return linkAnnotation(addition, 0);
    }
    ::omero::model::PlateAcquisitionAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx)
    {
        return linkAnnotation(addition, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::IceInternal::Function<void (const ::omero::model::PlateAcquisitionAnnotationLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_linkAnnotation(addition, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_linkAnnotation(addition, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::PlateAcquisitionAnnotationLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_linkAnnotation(addition, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_linkAnnotation(addition, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::PlateAcquisitionAnnotationLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::PlateAcquisitionAnnotationLinkPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PlateAcquisitionPrx __proxy = ::omero::model::PlateAcquisitionPrx::uncheckedCast(__result->getProxy());
                ::omero::model::PlateAcquisitionAnnotationLinkPtr __ret;
                try
                {
                    __ret = __proxy->end_linkAnnotation(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::PlateAcquisitionAnnotationLinkPtr&)> _response;
        };
        return begin_linkAnnotation(addition, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition)
    {
        return begin_linkAnnotation(addition, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx)
    {
        return begin_linkAnnotation(addition, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkAnnotation(addition, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkAnnotation(addition, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::omero::model::Callback_PlateAcquisition_linkAnnotationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkAnnotation(addition, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx, const ::omero::model::Callback_PlateAcquisition_linkAnnotationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkAnnotation(addition, &__ctx, __del, __cookie);
    }

    ::omero::model::PlateAcquisitionAnnotationLinkPtr end_linkAnnotation(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::PlateAcquisitionAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addPlateAcquisitionAnnotationLinkToBoth(const ::omero::model::PlateAcquisitionAnnotationLinkPtr& link, bool bothSides)
    {
        addPlateAcquisitionAnnotationLinkToBoth(link, bothSides, 0);
    }
    void addPlateAcquisitionAnnotationLinkToBoth(const ::omero::model::PlateAcquisitionAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        addPlateAcquisitionAnnotationLinkToBoth(link, bothSides, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addPlateAcquisitionAnnotationLinkToBoth(const ::omero::model::PlateAcquisitionAnnotationLinkPtr& link, bool bothSides, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addPlateAcquisitionAnnotationLinkToBoth(link, bothSides, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addPlateAcquisitionAnnotationLinkToBoth(const ::omero::model::PlateAcquisitionAnnotationLinkPtr& link, bool bothSides, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addPlateAcquisitionAnnotationLinkToBoth(link, bothSides, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addPlateAcquisitionAnnotationLinkToBoth(const ::omero::model::PlateAcquisitionAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addPlateAcquisitionAnnotationLinkToBoth(link, bothSides, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addPlateAcquisitionAnnotationLinkToBoth(const ::omero::model::PlateAcquisitionAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addPlateAcquisitionAnnotationLinkToBoth(link, bothSides, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addPlateAcquisitionAnnotationLinkToBoth(const ::omero::model::PlateAcquisitionAnnotationLinkPtr& link, bool bothSides)
    {
        return begin_addPlateAcquisitionAnnotationLinkToBoth(link, bothSides, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addPlateAcquisitionAnnotationLinkToBoth(const ::omero::model::PlateAcquisitionAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        return begin_addPlateAcquisitionAnnotationLinkToBoth(link, bothSides, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addPlateAcquisitionAnnotationLinkToBoth(const ::omero::model::PlateAcquisitionAnnotationLinkPtr& link, bool bothSides, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPlateAcquisitionAnnotationLinkToBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addPlateAcquisitionAnnotationLinkToBoth(const ::omero::model::PlateAcquisitionAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPlateAcquisitionAnnotationLinkToBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addPlateAcquisitionAnnotationLinkToBoth(const ::omero::model::PlateAcquisitionAnnotationLinkPtr& link, bool bothSides, const ::omero::model::Callback_PlateAcquisition_addPlateAcquisitionAnnotationLinkToBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPlateAcquisitionAnnotationLinkToBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addPlateAcquisitionAnnotationLinkToBoth(const ::omero::model::PlateAcquisitionAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::omero::model::Callback_PlateAcquisition_addPlateAcquisitionAnnotationLinkToBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPlateAcquisitionAnnotationLinkToBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    void end_addPlateAcquisitionAnnotationLinkToBoth(const ::Ice::AsyncResultPtr&);
    
private:

    void addPlateAcquisitionAnnotationLinkToBoth(const ::omero::model::PlateAcquisitionAnnotationLinkPtr&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addPlateAcquisitionAnnotationLinkToBoth(const ::omero::model::PlateAcquisitionAnnotationLinkPtr&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::PlateAcquisitionAnnotationLinksSeq findPlateAcquisitionAnnotationLink(const ::omero::model::AnnotationPtr& removal)
    {
        return findPlateAcquisitionAnnotationLink(removal, 0);
    }
    ::omero::model::PlateAcquisitionAnnotationLinksSeq findPlateAcquisitionAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx)
    {
        return findPlateAcquisitionAnnotationLink(removal, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_findPlateAcquisitionAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::IceInternal::Function<void (const ::omero::model::PlateAcquisitionAnnotationLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_findPlateAcquisitionAnnotationLink(removal, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_findPlateAcquisitionAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_findPlateAcquisitionAnnotationLink(removal, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_findPlateAcquisitionAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::PlateAcquisitionAnnotationLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_findPlateAcquisitionAnnotationLink(removal, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_findPlateAcquisitionAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_findPlateAcquisitionAnnotationLink(removal, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_findPlateAcquisitionAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::PlateAcquisitionAnnotationLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::PlateAcquisitionAnnotationLinksSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PlateAcquisitionPrx __proxy = ::omero::model::PlateAcquisitionPrx::uncheckedCast(__result->getProxy());
                ::omero::model::PlateAcquisitionAnnotationLinksSeq __ret;
                try
                {
                    __ret = __proxy->end_findPlateAcquisitionAnnotationLink(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::PlateAcquisitionAnnotationLinksSeq&)> _response;
        };
        return begin_findPlateAcquisitionAnnotationLink(removal, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_findPlateAcquisitionAnnotationLink(const ::omero::model::AnnotationPtr& removal)
    {
        return begin_findPlateAcquisitionAnnotationLink(removal, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findPlateAcquisitionAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx)
    {
        return begin_findPlateAcquisitionAnnotationLink(removal, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findPlateAcquisitionAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findPlateAcquisitionAnnotationLink(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findPlateAcquisitionAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findPlateAcquisitionAnnotationLink(removal, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findPlateAcquisitionAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::omero::model::Callback_PlateAcquisition_findPlateAcquisitionAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findPlateAcquisitionAnnotationLink(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findPlateAcquisitionAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::omero::model::Callback_PlateAcquisition_findPlateAcquisitionAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findPlateAcquisitionAnnotationLink(removal, &__ctx, __del, __cookie);
    }

    ::omero::model::PlateAcquisitionAnnotationLinksSeq end_findPlateAcquisitionAnnotationLink(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::PlateAcquisitionAnnotationLinksSeq findPlateAcquisitionAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_findPlateAcquisitionAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unlinkAnnotation(const ::omero::model::AnnotationPtr& removal)
    {
        unlinkAnnotation(removal, 0);
    }
    void unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx)
    {
        unlinkAnnotation(removal, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unlinkAnnotation(removal, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unlinkAnnotation(removal, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unlinkAnnotation(removal, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unlinkAnnotation(removal, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal)
    {
        return begin_unlinkAnnotation(removal, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx)
    {
        return begin_unlinkAnnotation(removal, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkAnnotation(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkAnnotation(removal, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::omero::model::Callback_PlateAcquisition_unlinkAnnotationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkAnnotation(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::omero::model::Callback_PlateAcquisition_unlinkAnnotationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkAnnotation(removal, &__ctx, __del, __cookie);
    }

    void end_unlinkAnnotation(const ::Ice::AsyncResultPtr&);
    
private:

    void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removePlateAcquisitionAnnotationLinkFromBoth(const ::omero::model::PlateAcquisitionAnnotationLinkPtr& link, bool bothSides)
    {
        removePlateAcquisitionAnnotationLinkFromBoth(link, bothSides, 0);
    }
    void removePlateAcquisitionAnnotationLinkFromBoth(const ::omero::model::PlateAcquisitionAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        removePlateAcquisitionAnnotationLinkFromBoth(link, bothSides, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removePlateAcquisitionAnnotationLinkFromBoth(const ::omero::model::PlateAcquisitionAnnotationLinkPtr& link, bool bothSides, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removePlateAcquisitionAnnotationLinkFromBoth(link, bothSides, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removePlateAcquisitionAnnotationLinkFromBoth(const ::omero::model::PlateAcquisitionAnnotationLinkPtr& link, bool bothSides, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removePlateAcquisitionAnnotationLinkFromBoth(link, bothSides, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removePlateAcquisitionAnnotationLinkFromBoth(const ::omero::model::PlateAcquisitionAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removePlateAcquisitionAnnotationLinkFromBoth(link, bothSides, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removePlateAcquisitionAnnotationLinkFromBoth(const ::omero::model::PlateAcquisitionAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removePlateAcquisitionAnnotationLinkFromBoth(link, bothSides, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removePlateAcquisitionAnnotationLinkFromBoth(const ::omero::model::PlateAcquisitionAnnotationLinkPtr& link, bool bothSides)
    {
        return begin_removePlateAcquisitionAnnotationLinkFromBoth(link, bothSides, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removePlateAcquisitionAnnotationLinkFromBoth(const ::omero::model::PlateAcquisitionAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        return begin_removePlateAcquisitionAnnotationLinkFromBoth(link, bothSides, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removePlateAcquisitionAnnotationLinkFromBoth(const ::omero::model::PlateAcquisitionAnnotationLinkPtr& link, bool bothSides, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removePlateAcquisitionAnnotationLinkFromBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removePlateAcquisitionAnnotationLinkFromBoth(const ::omero::model::PlateAcquisitionAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removePlateAcquisitionAnnotationLinkFromBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removePlateAcquisitionAnnotationLinkFromBoth(const ::omero::model::PlateAcquisitionAnnotationLinkPtr& link, bool bothSides, const ::omero::model::Callback_PlateAcquisition_removePlateAcquisitionAnnotationLinkFromBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removePlateAcquisitionAnnotationLinkFromBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removePlateAcquisitionAnnotationLinkFromBoth(const ::omero::model::PlateAcquisitionAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::omero::model::Callback_PlateAcquisition_removePlateAcquisitionAnnotationLinkFromBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removePlateAcquisitionAnnotationLinkFromBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    void end_removePlateAcquisitionAnnotationLinkFromBoth(const ::Ice::AsyncResultPtr&);
    
private:

    void removePlateAcquisitionAnnotationLinkFromBoth(const ::omero::model::PlateAcquisitionAnnotationLinkPtr&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removePlateAcquisitionAnnotationLinkFromBoth(const ::omero::model::PlateAcquisitionAnnotationLinkPtr&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::PlateAcquisitionLinkedAnnotationSeq linkedAnnotationList()
    {
        return linkedAnnotationList(0);
    }
    ::omero::model::PlateAcquisitionLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context& __ctx)
    {
        return linkedAnnotationList(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_linkedAnnotationList(const ::IceInternal::Function<void (const ::omero::model::PlateAcquisitionLinkedAnnotationSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_linkedAnnotationList(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_linkedAnnotationList(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_linkedAnnotationList(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_linkedAnnotationList(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::PlateAcquisitionLinkedAnnotationSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_linkedAnnotationList(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_linkedAnnotationList(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_linkedAnnotationList(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_linkedAnnotationList(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::PlateAcquisitionLinkedAnnotationSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::PlateAcquisitionLinkedAnnotationSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PlateAcquisitionPrx __proxy = ::omero::model::PlateAcquisitionPrx::uncheckedCast(__result->getProxy());
                ::omero::model::PlateAcquisitionLinkedAnnotationSeq __ret;
                try
                {
                    __ret = __proxy->end_linkedAnnotationList(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::PlateAcquisitionLinkedAnnotationSeq&)> _response;
        };
        return begin_linkedAnnotationList(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_linkedAnnotationList()
    {
        return begin_linkedAnnotationList(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::Context& __ctx)
    {
        return begin_linkedAnnotationList(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedAnnotationList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedAnnotationList(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::omero::model::Callback_PlateAcquisition_linkedAnnotationListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedAnnotationList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::Context& __ctx, const ::omero::model::Callback_PlateAcquisition_linkedAnnotationListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedAnnotationList(&__ctx, __del, __cookie);
    }

    ::omero::model::PlateAcquisitionLinkedAnnotationSeq end_linkedAnnotationList(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::PlateAcquisitionLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getDescription()
    {
        return getDescription(0);
    }
    ::omero::RStringPtr getDescription(const ::Ice::Context& __ctx)
    {
        return getDescription(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getDescription(const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getDescription(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getDescription(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getDescription(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getDescription(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getDescription(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getDescription(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getDescription(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getDescription(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RStringPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PlateAcquisitionPrx __proxy = ::omero::model::PlateAcquisitionPrx::uncheckedCast(__result->getProxy());
                ::omero::RStringPtr __ret;
                try
                {
                    __ret = __proxy->end_getDescription(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RStringPtr&)> _response;
        };
        return begin_getDescription(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getDescription()
    {
        return begin_getDescription(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDescription(const ::Ice::Context& __ctx)
    {
        return begin_getDescription(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDescription(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDescription(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDescription(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDescription(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDescription(const ::omero::model::Callback_PlateAcquisition_getDescriptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDescription(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDescription(const ::Ice::Context& __ctx, const ::omero::model::Callback_PlateAcquisition_getDescriptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDescription(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getDescription(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getDescription(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getDescription(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setDescription(const ::omero::RStringPtr& theDescription)
    {
        setDescription(theDescription, 0);
    }
    void setDescription(const ::omero::RStringPtr& theDescription, const ::Ice::Context& __ctx)
    {
        setDescription(theDescription, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setDescription(const ::omero::RStringPtr& theDescription, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setDescription(theDescription, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setDescription(const ::omero::RStringPtr& theDescription, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setDescription(theDescription, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setDescription(const ::omero::RStringPtr& theDescription, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setDescription(theDescription, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setDescription(const ::omero::RStringPtr& theDescription, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setDescription(theDescription, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setDescription(const ::omero::RStringPtr& theDescription)
    {
        return begin_setDescription(theDescription, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setDescription(const ::omero::RStringPtr& theDescription, const ::Ice::Context& __ctx)
    {
        return begin_setDescription(theDescription, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setDescription(const ::omero::RStringPtr& theDescription, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDescription(theDescription, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDescription(const ::omero::RStringPtr& theDescription, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDescription(theDescription, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDescription(const ::omero::RStringPtr& theDescription, const ::omero::model::Callback_PlateAcquisition_setDescriptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDescription(theDescription, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDescription(const ::omero::RStringPtr& theDescription, const ::Ice::Context& __ctx, const ::omero::model::Callback_PlateAcquisition_setDescriptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDescription(theDescription, &__ctx, __del, __cookie);
    }

    void end_setDescription(const ::Ice::AsyncResultPtr&);
    
private:

    void setDescription(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setDescription(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<PlateAcquisition> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<PlateAcquisition*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<PlateAcquisition> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<PlateAcquisition*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<PlateAcquisition> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<PlateAcquisition*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<PlateAcquisition> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<PlateAcquisition*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<PlateAcquisition> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<PlateAcquisition*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<PlateAcquisition> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<PlateAcquisition*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<PlateAcquisition> ice_secure(bool __secure) const
    {
        return dynamic_cast<PlateAcquisition*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<PlateAcquisition> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<PlateAcquisition*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<PlateAcquisition> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<PlateAcquisition*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<PlateAcquisition> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<PlateAcquisition*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<PlateAcquisition> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<PlateAcquisition*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<PlateAcquisition> ice_twoway() const
    {
        return dynamic_cast<PlateAcquisition*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<PlateAcquisition> ice_oneway() const
    {
        return dynamic_cast<PlateAcquisition*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<PlateAcquisition> ice_batchOneway() const
    {
        return dynamic_cast<PlateAcquisition*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<PlateAcquisition> ice_datagram() const
    {
        return dynamic_cast<PlateAcquisition*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<PlateAcquisition> ice_batchDatagram() const
    {
        return dynamic_cast<PlateAcquisition*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<PlateAcquisition> ice_compress(bool __compress) const
    {
        return dynamic_cast<PlateAcquisition*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<PlateAcquisition> ice_timeout(int __timeout) const
    {
        return dynamic_cast<PlateAcquisition*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<PlateAcquisition> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<PlateAcquisition*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<PlateAcquisition> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<PlateAcquisition*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

namespace IceDelegate
{

namespace omero
{

namespace model
{

class PlateAcquisition : virtual public ::IceDelegate::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RStringPtr getName(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setName(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RTimePtr getStartTime(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setStartTime(const ::omero::RTimePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RTimePtr getEndTime(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setEndTime(const ::omero::RTimePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RIntPtr getMaximumFieldCount(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setMaximumFieldCount(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::PlatePtr getPlate(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setPlate(const ::omero::model::PlatePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void unloadWellSample(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int sizeOfWellSample(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::PlateAcquisitionWellSampleSeq copyWellSample(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addWellSample(const ::omero::model::WellSamplePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addAllWellSampleSet(const ::omero::model::PlateAcquisitionWellSampleSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeWellSample(const ::omero::model::WellSamplePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeAllWellSampleSet(const ::omero::model::PlateAcquisitionWellSampleSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void clearWellSample(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void reloadWellSample(const ::omero::model::PlateAcquisitionPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void unloadAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::PlateAcquisitionAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addPlateAcquisitionAnnotationLink(const ::omero::model::PlateAcquisitionAnnotationLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addAllPlateAcquisitionAnnotationLinkSet(const ::omero::model::PlateAcquisitionAnnotationLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removePlateAcquisitionAnnotationLink(const ::omero::model::PlateAcquisitionAnnotationLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeAllPlateAcquisitionAnnotationLinkSet(const ::omero::model::PlateAcquisitionAnnotationLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void clearAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void reloadAnnotationLinks(const ::omero::model::PlateAcquisitionPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::PlateAcquisitionAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addPlateAcquisitionAnnotationLinkToBoth(const ::omero::model::PlateAcquisitionAnnotationLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::PlateAcquisitionAnnotationLinksSeq findPlateAcquisitionAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removePlateAcquisitionAnnotationLinkFromBoth(const ::omero::model::PlateAcquisitionAnnotationLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::PlateAcquisitionLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RStringPtr getDescription(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setDescription(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

}

namespace IceDelegateM
{

namespace omero
{

namespace model
{

class PlateAcquisition : virtual public ::IceDelegate::omero::model::PlateAcquisition,
                         virtual public ::IceDelegateM::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getName(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setName(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RTimePtr getStartTime(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setStartTime(const ::omero::RTimePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RTimePtr getEndTime(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setEndTime(const ::omero::RTimePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RIntPtr getMaximumFieldCount(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setMaximumFieldCount(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::PlatePtr getPlate(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setPlate(const ::omero::model::PlatePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unloadWellSample(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int sizeOfWellSample(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::PlateAcquisitionWellSampleSeq copyWellSample(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addWellSample(const ::omero::model::WellSamplePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addAllWellSampleSet(const ::omero::model::PlateAcquisitionWellSampleSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeWellSample(const ::omero::model::WellSamplePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeAllWellSampleSet(const ::omero::model::PlateAcquisitionWellSampleSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void clearWellSample(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void reloadWellSample(const ::omero::model::PlateAcquisitionPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unloadAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::PlateAcquisitionAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addPlateAcquisitionAnnotationLink(const ::omero::model::PlateAcquisitionAnnotationLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addAllPlateAcquisitionAnnotationLinkSet(const ::omero::model::PlateAcquisitionAnnotationLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removePlateAcquisitionAnnotationLink(const ::omero::model::PlateAcquisitionAnnotationLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeAllPlateAcquisitionAnnotationLinkSet(const ::omero::model::PlateAcquisitionAnnotationLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void clearAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void reloadAnnotationLinks(const ::omero::model::PlateAcquisitionPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::PlateAcquisitionAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addPlateAcquisitionAnnotationLinkToBoth(const ::omero::model::PlateAcquisitionAnnotationLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::PlateAcquisitionAnnotationLinksSeq findPlateAcquisitionAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removePlateAcquisitionAnnotationLinkFromBoth(const ::omero::model::PlateAcquisitionAnnotationLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::PlateAcquisitionLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getDescription(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setDescription(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace IceDelegateD
{

namespace omero
{

namespace model
{

class PlateAcquisition : virtual public ::IceDelegate::omero::model::PlateAcquisition,
                         virtual public ::IceDelegateD::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getName(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setName(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RTimePtr getStartTime(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setStartTime(const ::omero::RTimePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RTimePtr getEndTime(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setEndTime(const ::omero::RTimePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RIntPtr getMaximumFieldCount(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setMaximumFieldCount(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::PlatePtr getPlate(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setPlate(const ::omero::model::PlatePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unloadWellSample(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int sizeOfWellSample(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::PlateAcquisitionWellSampleSeq copyWellSample(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addWellSample(const ::omero::model::WellSamplePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addAllWellSampleSet(const ::omero::model::PlateAcquisitionWellSampleSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeWellSample(const ::omero::model::WellSamplePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeAllWellSampleSet(const ::omero::model::PlateAcquisitionWellSampleSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void clearWellSample(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void reloadWellSample(const ::omero::model::PlateAcquisitionPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unloadAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::PlateAcquisitionAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addPlateAcquisitionAnnotationLink(const ::omero::model::PlateAcquisitionAnnotationLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addAllPlateAcquisitionAnnotationLinkSet(const ::omero::model::PlateAcquisitionAnnotationLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removePlateAcquisitionAnnotationLink(const ::omero::model::PlateAcquisitionAnnotationLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeAllPlateAcquisitionAnnotationLinkSet(const ::omero::model::PlateAcquisitionAnnotationLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void clearAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void reloadAnnotationLinks(const ::omero::model::PlateAcquisitionPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::PlateAcquisitionAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addPlateAcquisitionAnnotationLinkToBoth(const ::omero::model::PlateAcquisitionAnnotationLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::PlateAcquisitionAnnotationLinksSeq findPlateAcquisitionAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removePlateAcquisitionAnnotationLinkFromBoth(const ::omero::model::PlateAcquisitionAnnotationLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::PlateAcquisitionLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getDescription(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setDescription(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace omero
{

namespace model
{

class PlateAcquisition : public ::omero::model::IObject
{
public:

    typedef PlateAcquisitionPrx ProxyType;
    typedef PlateAcquisitionPtr PointerType;

    PlateAcquisition()
    {
    }

    PlateAcquisition(const ::omero::RLongPtr& __ice_id, const ::omero::model::DetailsPtr& __ice_details, bool __ice_loaded, const ::omero::RIntPtr& __ice_version, const ::omero::RStringPtr& __ice_name, const ::omero::RTimePtr& __ice_startTime, const ::omero::RTimePtr& __ice_endTime, const ::omero::RIntPtr& __ice_maximumFieldCount, const ::omero::model::PlatePtr& __ice_plate, const ::omero::model::PlateAcquisitionWellSampleSeq& __ice_wellSampleSeq, bool __ice_wellSampleLoaded, const ::omero::model::PlateAcquisitionAnnotationLinksSeq& __ice_annotationLinksSeq, bool __ice_annotationLinksLoaded, const ::omero::sys::CountMap& __ice_annotationLinksCountPerOwner, const ::omero::RStringPtr& __ice_description) :
        ::omero::model::IObject(__ice_id, __ice_details, __ice_loaded)
        ,
        version(__ice_version),
        name(__ice_name),
        startTime(__ice_startTime),
        endTime(__ice_endTime),
        maximumFieldCount(__ice_maximumFieldCount),
        plate(__ice_plate),
        wellSampleSeq(__ice_wellSampleSeq),
        wellSampleLoaded(__ice_wellSampleLoaded),
        annotationLinksSeq(__ice_annotationLinksSeq),
        annotationLinksLoaded(__ice_annotationLinksLoaded),
        annotationLinksCountPerOwner(__ice_annotationLinksCountPerOwner),
        description(__ice_description)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    virtual ::omero::RIntPtr getVersion(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getName(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getName(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setName(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setName(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RTimePtr getStartTime(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getStartTime(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setStartTime(const ::omero::RTimePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setStartTime(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RTimePtr getEndTime(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getEndTime(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setEndTime(const ::omero::RTimePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setEndTime(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RIntPtr getMaximumFieldCount(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getMaximumFieldCount(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setMaximumFieldCount(const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setMaximumFieldCount(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::PlatePtr getPlate(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getPlate(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setPlate(const ::omero::model::PlatePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setPlate(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unloadWellSample(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unloadWellSample(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int sizeOfWellSample(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sizeOfWellSample(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::PlateAcquisitionWellSampleSeq copyWellSample(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___copyWellSample(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addWellSample(const ::omero::model::WellSamplePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addWellSample(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addAllWellSampleSet(const ::omero::model::PlateAcquisitionWellSampleSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addAllWellSampleSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeWellSample(const ::omero::model::WellSamplePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeWellSample(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeAllWellSampleSet(const ::omero::model::PlateAcquisitionWellSampleSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeAllWellSampleSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void clearWellSample(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___clearWellSample(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reloadWellSample(const ::omero::model::PlateAcquisitionPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reloadWellSample(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unloadAnnotationLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unloadAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sizeOfAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::PlateAcquisitionAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___copyAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addPlateAcquisitionAnnotationLink(const ::omero::model::PlateAcquisitionAnnotationLinkPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addPlateAcquisitionAnnotationLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addAllPlateAcquisitionAnnotationLinkSet(const ::omero::model::PlateAcquisitionAnnotationLinksSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addAllPlateAcquisitionAnnotationLinkSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removePlateAcquisitionAnnotationLink(const ::omero::model::PlateAcquisitionAnnotationLinkPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removePlateAcquisitionAnnotationLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeAllPlateAcquisitionAnnotationLinkSet(const ::omero::model::PlateAcquisitionAnnotationLinksSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeAllPlateAcquisitionAnnotationLinkSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void clearAnnotationLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___clearAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reloadAnnotationLinks(const ::omero::model::PlateAcquisitionPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reloadAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getAnnotationLinksCountPerOwner(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::PlateAcquisitionAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___linkAnnotation(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addPlateAcquisitionAnnotationLinkToBoth(const ::omero::model::PlateAcquisitionAnnotationLinkPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addPlateAcquisitionAnnotationLinkToBoth(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::PlateAcquisitionAnnotationLinksSeq findPlateAcquisitionAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___findPlateAcquisitionAnnotationLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unlinkAnnotation(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removePlateAcquisitionAnnotationLinkFromBoth(const ::omero::model::PlateAcquisitionAnnotationLinkPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removePlateAcquisitionAnnotationLinkFromBoth(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::PlateAcquisitionLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___linkedAnnotationList(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getDescription(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getDescription(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setDescription(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setDescription(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::model::IObject::__writeImpl;
    using ::omero::model::IObject::__readImpl;
    #endif

    ::omero::RIntPtr version;

    ::omero::RStringPtr name;

    ::omero::RTimePtr startTime;

    ::omero::RTimePtr endTime;

    ::omero::RIntPtr maximumFieldCount;

    ::omero::model::PlatePtr plate;

    ::omero::model::PlateAcquisitionWellSampleSeq wellSampleSeq;

    bool wellSampleLoaded;

    ::omero::model::PlateAcquisitionAnnotationLinksSeq annotationLinksSeq;

    bool annotationLinksLoaded;

    ::omero::sys::CountMap annotationLinksCountPerOwner;

    ::omero::RStringPtr description;
};

inline bool operator==(const PlateAcquisition& l, const PlateAcquisition& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const PlateAcquisition& l, const PlateAcquisition& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

}

namespace omero
{

namespace model
{

template<class T>
class CallbackNC_PlateAcquisition_getVersion : public Callback_PlateAcquisition_getVersion_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RIntPtr&);

    CallbackNC_PlateAcquisition_getVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlateAcquisitionPrx __proxy = ::omero::model::PlateAcquisitionPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_PlateAcquisition_getVersionPtr
newCallback_PlateAcquisition_getVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_getVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_getVersionPtr
newCallback_PlateAcquisition_getVersion(T* instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_getVersion<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlateAcquisition_getVersion : public Callback_PlateAcquisition_getVersion_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RIntPtr&, const CT&);

    Callback_PlateAcquisition_getVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlateAcquisitionPrx __proxy = ::omero::model::PlateAcquisitionPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PlateAcquisition_getVersionPtr
newCallback_PlateAcquisition_getVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_getVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_getVersionPtr
newCallback_PlateAcquisition_getVersion(T* instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_getVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PlateAcquisition_setVersion : public Callback_PlateAcquisition_setVersion_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PlateAcquisition_setVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PlateAcquisition_setVersionPtr
newCallback_PlateAcquisition_setVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_setVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_setVersionPtr
newCallback_PlateAcquisition_setVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_setVersion<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_setVersionPtr
newCallback_PlateAcquisition_setVersion(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_setVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_setVersionPtr
newCallback_PlateAcquisition_setVersion(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_setVersion<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlateAcquisition_setVersion : public Callback_PlateAcquisition_setVersion_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PlateAcquisition_setVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PlateAcquisition_setVersionPtr
newCallback_PlateAcquisition_setVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_setVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_setVersionPtr
newCallback_PlateAcquisition_setVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_setVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_setVersionPtr
newCallback_PlateAcquisition_setVersion(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_setVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_setVersionPtr
newCallback_PlateAcquisition_setVersion(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_setVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PlateAcquisition_getName : public Callback_PlateAcquisition_getName_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_PlateAcquisition_getName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlateAcquisitionPrx __proxy = ::omero::model::PlateAcquisitionPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getName(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_PlateAcquisition_getNamePtr
newCallback_PlateAcquisition_getName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_getName<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_getNamePtr
newCallback_PlateAcquisition_getName(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_getName<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlateAcquisition_getName : public Callback_PlateAcquisition_getName_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_PlateAcquisition_getName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlateAcquisitionPrx __proxy = ::omero::model::PlateAcquisitionPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getName(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PlateAcquisition_getNamePtr
newCallback_PlateAcquisition_getName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_getName<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_getNamePtr
newCallback_PlateAcquisition_getName(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_getName<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PlateAcquisition_setName : public Callback_PlateAcquisition_setName_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PlateAcquisition_setName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PlateAcquisition_setNamePtr
newCallback_PlateAcquisition_setName(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_setName<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_setNamePtr
newCallback_PlateAcquisition_setName(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_setName<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_setNamePtr
newCallback_PlateAcquisition_setName(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_setName<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_setNamePtr
newCallback_PlateAcquisition_setName(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_setName<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlateAcquisition_setName : public Callback_PlateAcquisition_setName_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PlateAcquisition_setName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PlateAcquisition_setNamePtr
newCallback_PlateAcquisition_setName(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_setName<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_setNamePtr
newCallback_PlateAcquisition_setName(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_setName<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_setNamePtr
newCallback_PlateAcquisition_setName(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_setName<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_setNamePtr
newCallback_PlateAcquisition_setName(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_setName<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PlateAcquisition_getStartTime : public Callback_PlateAcquisition_getStartTime_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RTimePtr&);

    CallbackNC_PlateAcquisition_getStartTime(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlateAcquisitionPrx __proxy = ::omero::model::PlateAcquisitionPrx::uncheckedCast(__result->getProxy());
        ::omero::RTimePtr __ret;
        try
        {
            __ret = __proxy->end_getStartTime(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_PlateAcquisition_getStartTimePtr
newCallback_PlateAcquisition_getStartTime(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RTimePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_getStartTime<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_getStartTimePtr
newCallback_PlateAcquisition_getStartTime(T* instance, void (T::*cb)(const ::omero::RTimePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_getStartTime<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlateAcquisition_getStartTime : public Callback_PlateAcquisition_getStartTime_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RTimePtr&, const CT&);

    Callback_PlateAcquisition_getStartTime(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlateAcquisitionPrx __proxy = ::omero::model::PlateAcquisitionPrx::uncheckedCast(__result->getProxy());
        ::omero::RTimePtr __ret;
        try
        {
            __ret = __proxy->end_getStartTime(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PlateAcquisition_getStartTimePtr
newCallback_PlateAcquisition_getStartTime(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RTimePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_getStartTime<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_getStartTimePtr
newCallback_PlateAcquisition_getStartTime(T* instance, void (T::*cb)(const ::omero::RTimePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_getStartTime<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PlateAcquisition_setStartTime : public Callback_PlateAcquisition_setStartTime_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PlateAcquisition_setStartTime(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PlateAcquisition_setStartTimePtr
newCallback_PlateAcquisition_setStartTime(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_setStartTime<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_setStartTimePtr
newCallback_PlateAcquisition_setStartTime(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_setStartTime<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_setStartTimePtr
newCallback_PlateAcquisition_setStartTime(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_setStartTime<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_setStartTimePtr
newCallback_PlateAcquisition_setStartTime(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_setStartTime<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlateAcquisition_setStartTime : public Callback_PlateAcquisition_setStartTime_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PlateAcquisition_setStartTime(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PlateAcquisition_setStartTimePtr
newCallback_PlateAcquisition_setStartTime(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_setStartTime<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_setStartTimePtr
newCallback_PlateAcquisition_setStartTime(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_setStartTime<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_setStartTimePtr
newCallback_PlateAcquisition_setStartTime(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_setStartTime<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_setStartTimePtr
newCallback_PlateAcquisition_setStartTime(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_setStartTime<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PlateAcquisition_getEndTime : public Callback_PlateAcquisition_getEndTime_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RTimePtr&);

    CallbackNC_PlateAcquisition_getEndTime(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlateAcquisitionPrx __proxy = ::omero::model::PlateAcquisitionPrx::uncheckedCast(__result->getProxy());
        ::omero::RTimePtr __ret;
        try
        {
            __ret = __proxy->end_getEndTime(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_PlateAcquisition_getEndTimePtr
newCallback_PlateAcquisition_getEndTime(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RTimePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_getEndTime<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_getEndTimePtr
newCallback_PlateAcquisition_getEndTime(T* instance, void (T::*cb)(const ::omero::RTimePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_getEndTime<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlateAcquisition_getEndTime : public Callback_PlateAcquisition_getEndTime_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RTimePtr&, const CT&);

    Callback_PlateAcquisition_getEndTime(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlateAcquisitionPrx __proxy = ::omero::model::PlateAcquisitionPrx::uncheckedCast(__result->getProxy());
        ::omero::RTimePtr __ret;
        try
        {
            __ret = __proxy->end_getEndTime(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PlateAcquisition_getEndTimePtr
newCallback_PlateAcquisition_getEndTime(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RTimePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_getEndTime<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_getEndTimePtr
newCallback_PlateAcquisition_getEndTime(T* instance, void (T::*cb)(const ::omero::RTimePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_getEndTime<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PlateAcquisition_setEndTime : public Callback_PlateAcquisition_setEndTime_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PlateAcquisition_setEndTime(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PlateAcquisition_setEndTimePtr
newCallback_PlateAcquisition_setEndTime(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_setEndTime<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_setEndTimePtr
newCallback_PlateAcquisition_setEndTime(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_setEndTime<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_setEndTimePtr
newCallback_PlateAcquisition_setEndTime(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_setEndTime<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_setEndTimePtr
newCallback_PlateAcquisition_setEndTime(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_setEndTime<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlateAcquisition_setEndTime : public Callback_PlateAcquisition_setEndTime_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PlateAcquisition_setEndTime(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PlateAcquisition_setEndTimePtr
newCallback_PlateAcquisition_setEndTime(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_setEndTime<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_setEndTimePtr
newCallback_PlateAcquisition_setEndTime(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_setEndTime<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_setEndTimePtr
newCallback_PlateAcquisition_setEndTime(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_setEndTime<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_setEndTimePtr
newCallback_PlateAcquisition_setEndTime(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_setEndTime<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PlateAcquisition_getMaximumFieldCount : public Callback_PlateAcquisition_getMaximumFieldCount_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RIntPtr&);

    CallbackNC_PlateAcquisition_getMaximumFieldCount(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlateAcquisitionPrx __proxy = ::omero::model::PlateAcquisitionPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getMaximumFieldCount(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_PlateAcquisition_getMaximumFieldCountPtr
newCallback_PlateAcquisition_getMaximumFieldCount(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_getMaximumFieldCount<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_getMaximumFieldCountPtr
newCallback_PlateAcquisition_getMaximumFieldCount(T* instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_getMaximumFieldCount<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlateAcquisition_getMaximumFieldCount : public Callback_PlateAcquisition_getMaximumFieldCount_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RIntPtr&, const CT&);

    Callback_PlateAcquisition_getMaximumFieldCount(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlateAcquisitionPrx __proxy = ::omero::model::PlateAcquisitionPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getMaximumFieldCount(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PlateAcquisition_getMaximumFieldCountPtr
newCallback_PlateAcquisition_getMaximumFieldCount(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_getMaximumFieldCount<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_getMaximumFieldCountPtr
newCallback_PlateAcquisition_getMaximumFieldCount(T* instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_getMaximumFieldCount<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PlateAcquisition_setMaximumFieldCount : public Callback_PlateAcquisition_setMaximumFieldCount_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PlateAcquisition_setMaximumFieldCount(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PlateAcquisition_setMaximumFieldCountPtr
newCallback_PlateAcquisition_setMaximumFieldCount(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_setMaximumFieldCount<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_setMaximumFieldCountPtr
newCallback_PlateAcquisition_setMaximumFieldCount(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_setMaximumFieldCount<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_setMaximumFieldCountPtr
newCallback_PlateAcquisition_setMaximumFieldCount(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_setMaximumFieldCount<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_setMaximumFieldCountPtr
newCallback_PlateAcquisition_setMaximumFieldCount(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_setMaximumFieldCount<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlateAcquisition_setMaximumFieldCount : public Callback_PlateAcquisition_setMaximumFieldCount_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PlateAcquisition_setMaximumFieldCount(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PlateAcquisition_setMaximumFieldCountPtr
newCallback_PlateAcquisition_setMaximumFieldCount(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_setMaximumFieldCount<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_setMaximumFieldCountPtr
newCallback_PlateAcquisition_setMaximumFieldCount(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_setMaximumFieldCount<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_setMaximumFieldCountPtr
newCallback_PlateAcquisition_setMaximumFieldCount(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_setMaximumFieldCount<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_setMaximumFieldCountPtr
newCallback_PlateAcquisition_setMaximumFieldCount(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_setMaximumFieldCount<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PlateAcquisition_getPlate : public Callback_PlateAcquisition_getPlate_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::PlatePtr&);

    CallbackNC_PlateAcquisition_getPlate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlateAcquisitionPrx __proxy = ::omero::model::PlateAcquisitionPrx::uncheckedCast(__result->getProxy());
        ::omero::model::PlatePtr __ret;
        try
        {
            __ret = __proxy->end_getPlate(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_PlateAcquisition_getPlatePtr
newCallback_PlateAcquisition_getPlate(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PlatePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_getPlate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_getPlatePtr
newCallback_PlateAcquisition_getPlate(T* instance, void (T::*cb)(const ::omero::model::PlatePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_getPlate<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlateAcquisition_getPlate : public Callback_PlateAcquisition_getPlate_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::PlatePtr&, const CT&);

    Callback_PlateAcquisition_getPlate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlateAcquisitionPrx __proxy = ::omero::model::PlateAcquisitionPrx::uncheckedCast(__result->getProxy());
        ::omero::model::PlatePtr __ret;
        try
        {
            __ret = __proxy->end_getPlate(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PlateAcquisition_getPlatePtr
newCallback_PlateAcquisition_getPlate(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PlatePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_getPlate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_getPlatePtr
newCallback_PlateAcquisition_getPlate(T* instance, void (T::*cb)(const ::omero::model::PlatePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_getPlate<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PlateAcquisition_setPlate : public Callback_PlateAcquisition_setPlate_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PlateAcquisition_setPlate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PlateAcquisition_setPlatePtr
newCallback_PlateAcquisition_setPlate(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_setPlate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_setPlatePtr
newCallback_PlateAcquisition_setPlate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_setPlate<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_setPlatePtr
newCallback_PlateAcquisition_setPlate(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_setPlate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_setPlatePtr
newCallback_PlateAcquisition_setPlate(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_setPlate<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlateAcquisition_setPlate : public Callback_PlateAcquisition_setPlate_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PlateAcquisition_setPlate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PlateAcquisition_setPlatePtr
newCallback_PlateAcquisition_setPlate(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_setPlate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_setPlatePtr
newCallback_PlateAcquisition_setPlate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_setPlate<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_setPlatePtr
newCallback_PlateAcquisition_setPlate(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_setPlate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_setPlatePtr
newCallback_PlateAcquisition_setPlate(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_setPlate<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PlateAcquisition_unloadWellSample : public Callback_PlateAcquisition_unloadWellSample_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PlateAcquisition_unloadWellSample(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PlateAcquisition_unloadWellSamplePtr
newCallback_PlateAcquisition_unloadWellSample(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_unloadWellSample<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_unloadWellSamplePtr
newCallback_PlateAcquisition_unloadWellSample(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_unloadWellSample<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_unloadWellSamplePtr
newCallback_PlateAcquisition_unloadWellSample(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_unloadWellSample<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_unloadWellSamplePtr
newCallback_PlateAcquisition_unloadWellSample(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_unloadWellSample<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlateAcquisition_unloadWellSample : public Callback_PlateAcquisition_unloadWellSample_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PlateAcquisition_unloadWellSample(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PlateAcquisition_unloadWellSamplePtr
newCallback_PlateAcquisition_unloadWellSample(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_unloadWellSample<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_unloadWellSamplePtr
newCallback_PlateAcquisition_unloadWellSample(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_unloadWellSample<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_unloadWellSamplePtr
newCallback_PlateAcquisition_unloadWellSample(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_unloadWellSample<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_unloadWellSamplePtr
newCallback_PlateAcquisition_unloadWellSample(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_unloadWellSample<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PlateAcquisition_sizeOfWellSample : public Callback_PlateAcquisition_sizeOfWellSample_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_PlateAcquisition_sizeOfWellSample(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlateAcquisitionPrx __proxy = ::omero::model::PlateAcquisitionPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfWellSample(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_PlateAcquisition_sizeOfWellSamplePtr
newCallback_PlateAcquisition_sizeOfWellSample(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_sizeOfWellSample<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_sizeOfWellSamplePtr
newCallback_PlateAcquisition_sizeOfWellSample(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_sizeOfWellSample<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlateAcquisition_sizeOfWellSample : public Callback_PlateAcquisition_sizeOfWellSample_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_PlateAcquisition_sizeOfWellSample(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlateAcquisitionPrx __proxy = ::omero::model::PlateAcquisitionPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfWellSample(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PlateAcquisition_sizeOfWellSamplePtr
newCallback_PlateAcquisition_sizeOfWellSample(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_sizeOfWellSample<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_sizeOfWellSamplePtr
newCallback_PlateAcquisition_sizeOfWellSample(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_sizeOfWellSample<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PlateAcquisition_copyWellSample : public Callback_PlateAcquisition_copyWellSample_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::PlateAcquisitionWellSampleSeq&);

    CallbackNC_PlateAcquisition_copyWellSample(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlateAcquisitionPrx __proxy = ::omero::model::PlateAcquisitionPrx::uncheckedCast(__result->getProxy());
        ::omero::model::PlateAcquisitionWellSampleSeq __ret;
        try
        {
            __ret = __proxy->end_copyWellSample(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_PlateAcquisition_copyWellSamplePtr
newCallback_PlateAcquisition_copyWellSample(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PlateAcquisitionWellSampleSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_copyWellSample<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_copyWellSamplePtr
newCallback_PlateAcquisition_copyWellSample(T* instance, void (T::*cb)(const ::omero::model::PlateAcquisitionWellSampleSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_copyWellSample<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlateAcquisition_copyWellSample : public Callback_PlateAcquisition_copyWellSample_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::PlateAcquisitionWellSampleSeq&, const CT&);

    Callback_PlateAcquisition_copyWellSample(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlateAcquisitionPrx __proxy = ::omero::model::PlateAcquisitionPrx::uncheckedCast(__result->getProxy());
        ::omero::model::PlateAcquisitionWellSampleSeq __ret;
        try
        {
            __ret = __proxy->end_copyWellSample(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PlateAcquisition_copyWellSamplePtr
newCallback_PlateAcquisition_copyWellSample(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PlateAcquisitionWellSampleSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_copyWellSample<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_copyWellSamplePtr
newCallback_PlateAcquisition_copyWellSample(T* instance, void (T::*cb)(const ::omero::model::PlateAcquisitionWellSampleSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_copyWellSample<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PlateAcquisition_addWellSample : public Callback_PlateAcquisition_addWellSample_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PlateAcquisition_addWellSample(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PlateAcquisition_addWellSamplePtr
newCallback_PlateAcquisition_addWellSample(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_addWellSample<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_addWellSamplePtr
newCallback_PlateAcquisition_addWellSample(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_addWellSample<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_addWellSamplePtr
newCallback_PlateAcquisition_addWellSample(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_addWellSample<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_addWellSamplePtr
newCallback_PlateAcquisition_addWellSample(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_addWellSample<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlateAcquisition_addWellSample : public Callback_PlateAcquisition_addWellSample_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PlateAcquisition_addWellSample(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PlateAcquisition_addWellSamplePtr
newCallback_PlateAcquisition_addWellSample(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_addWellSample<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_addWellSamplePtr
newCallback_PlateAcquisition_addWellSample(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_addWellSample<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_addWellSamplePtr
newCallback_PlateAcquisition_addWellSample(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_addWellSample<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_addWellSamplePtr
newCallback_PlateAcquisition_addWellSample(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_addWellSample<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PlateAcquisition_addAllWellSampleSet : public Callback_PlateAcquisition_addAllWellSampleSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PlateAcquisition_addAllWellSampleSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PlateAcquisition_addAllWellSampleSetPtr
newCallback_PlateAcquisition_addAllWellSampleSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_addAllWellSampleSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_addAllWellSampleSetPtr
newCallback_PlateAcquisition_addAllWellSampleSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_addAllWellSampleSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_addAllWellSampleSetPtr
newCallback_PlateAcquisition_addAllWellSampleSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_addAllWellSampleSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_addAllWellSampleSetPtr
newCallback_PlateAcquisition_addAllWellSampleSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_addAllWellSampleSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlateAcquisition_addAllWellSampleSet : public Callback_PlateAcquisition_addAllWellSampleSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PlateAcquisition_addAllWellSampleSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PlateAcquisition_addAllWellSampleSetPtr
newCallback_PlateAcquisition_addAllWellSampleSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_addAllWellSampleSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_addAllWellSampleSetPtr
newCallback_PlateAcquisition_addAllWellSampleSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_addAllWellSampleSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_addAllWellSampleSetPtr
newCallback_PlateAcquisition_addAllWellSampleSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_addAllWellSampleSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_addAllWellSampleSetPtr
newCallback_PlateAcquisition_addAllWellSampleSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_addAllWellSampleSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PlateAcquisition_removeWellSample : public Callback_PlateAcquisition_removeWellSample_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PlateAcquisition_removeWellSample(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PlateAcquisition_removeWellSamplePtr
newCallback_PlateAcquisition_removeWellSample(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_removeWellSample<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_removeWellSamplePtr
newCallback_PlateAcquisition_removeWellSample(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_removeWellSample<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_removeWellSamplePtr
newCallback_PlateAcquisition_removeWellSample(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_removeWellSample<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_removeWellSamplePtr
newCallback_PlateAcquisition_removeWellSample(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_removeWellSample<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlateAcquisition_removeWellSample : public Callback_PlateAcquisition_removeWellSample_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PlateAcquisition_removeWellSample(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PlateAcquisition_removeWellSamplePtr
newCallback_PlateAcquisition_removeWellSample(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_removeWellSample<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_removeWellSamplePtr
newCallback_PlateAcquisition_removeWellSample(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_removeWellSample<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_removeWellSamplePtr
newCallback_PlateAcquisition_removeWellSample(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_removeWellSample<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_removeWellSamplePtr
newCallback_PlateAcquisition_removeWellSample(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_removeWellSample<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PlateAcquisition_removeAllWellSampleSet : public Callback_PlateAcquisition_removeAllWellSampleSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PlateAcquisition_removeAllWellSampleSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PlateAcquisition_removeAllWellSampleSetPtr
newCallback_PlateAcquisition_removeAllWellSampleSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_removeAllWellSampleSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_removeAllWellSampleSetPtr
newCallback_PlateAcquisition_removeAllWellSampleSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_removeAllWellSampleSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_removeAllWellSampleSetPtr
newCallback_PlateAcquisition_removeAllWellSampleSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_removeAllWellSampleSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_removeAllWellSampleSetPtr
newCallback_PlateAcquisition_removeAllWellSampleSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_removeAllWellSampleSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlateAcquisition_removeAllWellSampleSet : public Callback_PlateAcquisition_removeAllWellSampleSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PlateAcquisition_removeAllWellSampleSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PlateAcquisition_removeAllWellSampleSetPtr
newCallback_PlateAcquisition_removeAllWellSampleSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_removeAllWellSampleSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_removeAllWellSampleSetPtr
newCallback_PlateAcquisition_removeAllWellSampleSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_removeAllWellSampleSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_removeAllWellSampleSetPtr
newCallback_PlateAcquisition_removeAllWellSampleSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_removeAllWellSampleSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_removeAllWellSampleSetPtr
newCallback_PlateAcquisition_removeAllWellSampleSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_removeAllWellSampleSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PlateAcquisition_clearWellSample : public Callback_PlateAcquisition_clearWellSample_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PlateAcquisition_clearWellSample(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PlateAcquisition_clearWellSamplePtr
newCallback_PlateAcquisition_clearWellSample(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_clearWellSample<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_clearWellSamplePtr
newCallback_PlateAcquisition_clearWellSample(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_clearWellSample<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_clearWellSamplePtr
newCallback_PlateAcquisition_clearWellSample(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_clearWellSample<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_clearWellSamplePtr
newCallback_PlateAcquisition_clearWellSample(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_clearWellSample<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlateAcquisition_clearWellSample : public Callback_PlateAcquisition_clearWellSample_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PlateAcquisition_clearWellSample(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PlateAcquisition_clearWellSamplePtr
newCallback_PlateAcquisition_clearWellSample(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_clearWellSample<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_clearWellSamplePtr
newCallback_PlateAcquisition_clearWellSample(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_clearWellSample<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_clearWellSamplePtr
newCallback_PlateAcquisition_clearWellSample(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_clearWellSample<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_clearWellSamplePtr
newCallback_PlateAcquisition_clearWellSample(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_clearWellSample<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PlateAcquisition_reloadWellSample : public Callback_PlateAcquisition_reloadWellSample_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PlateAcquisition_reloadWellSample(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PlateAcquisition_reloadWellSamplePtr
newCallback_PlateAcquisition_reloadWellSample(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_reloadWellSample<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_reloadWellSamplePtr
newCallback_PlateAcquisition_reloadWellSample(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_reloadWellSample<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_reloadWellSamplePtr
newCallback_PlateAcquisition_reloadWellSample(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_reloadWellSample<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_reloadWellSamplePtr
newCallback_PlateAcquisition_reloadWellSample(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_reloadWellSample<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlateAcquisition_reloadWellSample : public Callback_PlateAcquisition_reloadWellSample_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PlateAcquisition_reloadWellSample(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PlateAcquisition_reloadWellSamplePtr
newCallback_PlateAcquisition_reloadWellSample(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_reloadWellSample<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_reloadWellSamplePtr
newCallback_PlateAcquisition_reloadWellSample(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_reloadWellSample<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_reloadWellSamplePtr
newCallback_PlateAcquisition_reloadWellSample(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_reloadWellSample<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_reloadWellSamplePtr
newCallback_PlateAcquisition_reloadWellSample(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_reloadWellSample<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PlateAcquisition_unloadAnnotationLinks : public Callback_PlateAcquisition_unloadAnnotationLinks_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PlateAcquisition_unloadAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PlateAcquisition_unloadAnnotationLinksPtr
newCallback_PlateAcquisition_unloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_unloadAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_unloadAnnotationLinksPtr
newCallback_PlateAcquisition_unloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_unloadAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_unloadAnnotationLinksPtr
newCallback_PlateAcquisition_unloadAnnotationLinks(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_unloadAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_unloadAnnotationLinksPtr
newCallback_PlateAcquisition_unloadAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_unloadAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlateAcquisition_unloadAnnotationLinks : public Callback_PlateAcquisition_unloadAnnotationLinks_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PlateAcquisition_unloadAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PlateAcquisition_unloadAnnotationLinksPtr
newCallback_PlateAcquisition_unloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_unloadAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_unloadAnnotationLinksPtr
newCallback_PlateAcquisition_unloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_unloadAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_unloadAnnotationLinksPtr
newCallback_PlateAcquisition_unloadAnnotationLinks(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_unloadAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_unloadAnnotationLinksPtr
newCallback_PlateAcquisition_unloadAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_unloadAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PlateAcquisition_sizeOfAnnotationLinks : public Callback_PlateAcquisition_sizeOfAnnotationLinks_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_PlateAcquisition_sizeOfAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlateAcquisitionPrx __proxy = ::omero::model::PlateAcquisitionPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfAnnotationLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_PlateAcquisition_sizeOfAnnotationLinksPtr
newCallback_PlateAcquisition_sizeOfAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_sizeOfAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_sizeOfAnnotationLinksPtr
newCallback_PlateAcquisition_sizeOfAnnotationLinks(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_sizeOfAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlateAcquisition_sizeOfAnnotationLinks : public Callback_PlateAcquisition_sizeOfAnnotationLinks_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_PlateAcquisition_sizeOfAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlateAcquisitionPrx __proxy = ::omero::model::PlateAcquisitionPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfAnnotationLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PlateAcquisition_sizeOfAnnotationLinksPtr
newCallback_PlateAcquisition_sizeOfAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_sizeOfAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_sizeOfAnnotationLinksPtr
newCallback_PlateAcquisition_sizeOfAnnotationLinks(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_sizeOfAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PlateAcquisition_copyAnnotationLinks : public Callback_PlateAcquisition_copyAnnotationLinks_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::PlateAcquisitionAnnotationLinksSeq&);

    CallbackNC_PlateAcquisition_copyAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlateAcquisitionPrx __proxy = ::omero::model::PlateAcquisitionPrx::uncheckedCast(__result->getProxy());
        ::omero::model::PlateAcquisitionAnnotationLinksSeq __ret;
        try
        {
            __ret = __proxy->end_copyAnnotationLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_PlateAcquisition_copyAnnotationLinksPtr
newCallback_PlateAcquisition_copyAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PlateAcquisitionAnnotationLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_copyAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_copyAnnotationLinksPtr
newCallback_PlateAcquisition_copyAnnotationLinks(T* instance, void (T::*cb)(const ::omero::model::PlateAcquisitionAnnotationLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_copyAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlateAcquisition_copyAnnotationLinks : public Callback_PlateAcquisition_copyAnnotationLinks_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::PlateAcquisitionAnnotationLinksSeq&, const CT&);

    Callback_PlateAcquisition_copyAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlateAcquisitionPrx __proxy = ::omero::model::PlateAcquisitionPrx::uncheckedCast(__result->getProxy());
        ::omero::model::PlateAcquisitionAnnotationLinksSeq __ret;
        try
        {
            __ret = __proxy->end_copyAnnotationLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PlateAcquisition_copyAnnotationLinksPtr
newCallback_PlateAcquisition_copyAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PlateAcquisitionAnnotationLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_copyAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_copyAnnotationLinksPtr
newCallback_PlateAcquisition_copyAnnotationLinks(T* instance, void (T::*cb)(const ::omero::model::PlateAcquisitionAnnotationLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_copyAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PlateAcquisition_addPlateAcquisitionAnnotationLink : public Callback_PlateAcquisition_addPlateAcquisitionAnnotationLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PlateAcquisition_addPlateAcquisitionAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PlateAcquisition_addPlateAcquisitionAnnotationLinkPtr
newCallback_PlateAcquisition_addPlateAcquisitionAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_addPlateAcquisitionAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_addPlateAcquisitionAnnotationLinkPtr
newCallback_PlateAcquisition_addPlateAcquisitionAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_addPlateAcquisitionAnnotationLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_addPlateAcquisitionAnnotationLinkPtr
newCallback_PlateAcquisition_addPlateAcquisitionAnnotationLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_addPlateAcquisitionAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_addPlateAcquisitionAnnotationLinkPtr
newCallback_PlateAcquisition_addPlateAcquisitionAnnotationLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_addPlateAcquisitionAnnotationLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlateAcquisition_addPlateAcquisitionAnnotationLink : public Callback_PlateAcquisition_addPlateAcquisitionAnnotationLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PlateAcquisition_addPlateAcquisitionAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PlateAcquisition_addPlateAcquisitionAnnotationLinkPtr
newCallback_PlateAcquisition_addPlateAcquisitionAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_addPlateAcquisitionAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_addPlateAcquisitionAnnotationLinkPtr
newCallback_PlateAcquisition_addPlateAcquisitionAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_addPlateAcquisitionAnnotationLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_addPlateAcquisitionAnnotationLinkPtr
newCallback_PlateAcquisition_addPlateAcquisitionAnnotationLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_addPlateAcquisitionAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_addPlateAcquisitionAnnotationLinkPtr
newCallback_PlateAcquisition_addPlateAcquisitionAnnotationLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_addPlateAcquisitionAnnotationLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PlateAcquisition_addAllPlateAcquisitionAnnotationLinkSet : public Callback_PlateAcquisition_addAllPlateAcquisitionAnnotationLinkSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PlateAcquisition_addAllPlateAcquisitionAnnotationLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PlateAcquisition_addAllPlateAcquisitionAnnotationLinkSetPtr
newCallback_PlateAcquisition_addAllPlateAcquisitionAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_addAllPlateAcquisitionAnnotationLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_addAllPlateAcquisitionAnnotationLinkSetPtr
newCallback_PlateAcquisition_addAllPlateAcquisitionAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_addAllPlateAcquisitionAnnotationLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_addAllPlateAcquisitionAnnotationLinkSetPtr
newCallback_PlateAcquisition_addAllPlateAcquisitionAnnotationLinkSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_addAllPlateAcquisitionAnnotationLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_addAllPlateAcquisitionAnnotationLinkSetPtr
newCallback_PlateAcquisition_addAllPlateAcquisitionAnnotationLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_addAllPlateAcquisitionAnnotationLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlateAcquisition_addAllPlateAcquisitionAnnotationLinkSet : public Callback_PlateAcquisition_addAllPlateAcquisitionAnnotationLinkSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PlateAcquisition_addAllPlateAcquisitionAnnotationLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PlateAcquisition_addAllPlateAcquisitionAnnotationLinkSetPtr
newCallback_PlateAcquisition_addAllPlateAcquisitionAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_addAllPlateAcquisitionAnnotationLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_addAllPlateAcquisitionAnnotationLinkSetPtr
newCallback_PlateAcquisition_addAllPlateAcquisitionAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_addAllPlateAcquisitionAnnotationLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_addAllPlateAcquisitionAnnotationLinkSetPtr
newCallback_PlateAcquisition_addAllPlateAcquisitionAnnotationLinkSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_addAllPlateAcquisitionAnnotationLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_addAllPlateAcquisitionAnnotationLinkSetPtr
newCallback_PlateAcquisition_addAllPlateAcquisitionAnnotationLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_addAllPlateAcquisitionAnnotationLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PlateAcquisition_removePlateAcquisitionAnnotationLink : public Callback_PlateAcquisition_removePlateAcquisitionAnnotationLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PlateAcquisition_removePlateAcquisitionAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PlateAcquisition_removePlateAcquisitionAnnotationLinkPtr
newCallback_PlateAcquisition_removePlateAcquisitionAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_removePlateAcquisitionAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_removePlateAcquisitionAnnotationLinkPtr
newCallback_PlateAcquisition_removePlateAcquisitionAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_removePlateAcquisitionAnnotationLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_removePlateAcquisitionAnnotationLinkPtr
newCallback_PlateAcquisition_removePlateAcquisitionAnnotationLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_removePlateAcquisitionAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_removePlateAcquisitionAnnotationLinkPtr
newCallback_PlateAcquisition_removePlateAcquisitionAnnotationLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_removePlateAcquisitionAnnotationLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlateAcquisition_removePlateAcquisitionAnnotationLink : public Callback_PlateAcquisition_removePlateAcquisitionAnnotationLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PlateAcquisition_removePlateAcquisitionAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PlateAcquisition_removePlateAcquisitionAnnotationLinkPtr
newCallback_PlateAcquisition_removePlateAcquisitionAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_removePlateAcquisitionAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_removePlateAcquisitionAnnotationLinkPtr
newCallback_PlateAcquisition_removePlateAcquisitionAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_removePlateAcquisitionAnnotationLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_removePlateAcquisitionAnnotationLinkPtr
newCallback_PlateAcquisition_removePlateAcquisitionAnnotationLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_removePlateAcquisitionAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_removePlateAcquisitionAnnotationLinkPtr
newCallback_PlateAcquisition_removePlateAcquisitionAnnotationLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_removePlateAcquisitionAnnotationLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PlateAcquisition_removeAllPlateAcquisitionAnnotationLinkSet : public Callback_PlateAcquisition_removeAllPlateAcquisitionAnnotationLinkSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PlateAcquisition_removeAllPlateAcquisitionAnnotationLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PlateAcquisition_removeAllPlateAcquisitionAnnotationLinkSetPtr
newCallback_PlateAcquisition_removeAllPlateAcquisitionAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_removeAllPlateAcquisitionAnnotationLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_removeAllPlateAcquisitionAnnotationLinkSetPtr
newCallback_PlateAcquisition_removeAllPlateAcquisitionAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_removeAllPlateAcquisitionAnnotationLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_removeAllPlateAcquisitionAnnotationLinkSetPtr
newCallback_PlateAcquisition_removeAllPlateAcquisitionAnnotationLinkSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_removeAllPlateAcquisitionAnnotationLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_removeAllPlateAcquisitionAnnotationLinkSetPtr
newCallback_PlateAcquisition_removeAllPlateAcquisitionAnnotationLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_removeAllPlateAcquisitionAnnotationLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlateAcquisition_removeAllPlateAcquisitionAnnotationLinkSet : public Callback_PlateAcquisition_removeAllPlateAcquisitionAnnotationLinkSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PlateAcquisition_removeAllPlateAcquisitionAnnotationLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PlateAcquisition_removeAllPlateAcquisitionAnnotationLinkSetPtr
newCallback_PlateAcquisition_removeAllPlateAcquisitionAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_removeAllPlateAcquisitionAnnotationLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_removeAllPlateAcquisitionAnnotationLinkSetPtr
newCallback_PlateAcquisition_removeAllPlateAcquisitionAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_removeAllPlateAcquisitionAnnotationLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_removeAllPlateAcquisitionAnnotationLinkSetPtr
newCallback_PlateAcquisition_removeAllPlateAcquisitionAnnotationLinkSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_removeAllPlateAcquisitionAnnotationLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_removeAllPlateAcquisitionAnnotationLinkSetPtr
newCallback_PlateAcquisition_removeAllPlateAcquisitionAnnotationLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_removeAllPlateAcquisitionAnnotationLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PlateAcquisition_clearAnnotationLinks : public Callback_PlateAcquisition_clearAnnotationLinks_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PlateAcquisition_clearAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PlateAcquisition_clearAnnotationLinksPtr
newCallback_PlateAcquisition_clearAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_clearAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_clearAnnotationLinksPtr
newCallback_PlateAcquisition_clearAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_clearAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_clearAnnotationLinksPtr
newCallback_PlateAcquisition_clearAnnotationLinks(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_clearAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_clearAnnotationLinksPtr
newCallback_PlateAcquisition_clearAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_clearAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlateAcquisition_clearAnnotationLinks : public Callback_PlateAcquisition_clearAnnotationLinks_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PlateAcquisition_clearAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PlateAcquisition_clearAnnotationLinksPtr
newCallback_PlateAcquisition_clearAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_clearAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_clearAnnotationLinksPtr
newCallback_PlateAcquisition_clearAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_clearAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_clearAnnotationLinksPtr
newCallback_PlateAcquisition_clearAnnotationLinks(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_clearAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_clearAnnotationLinksPtr
newCallback_PlateAcquisition_clearAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_clearAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PlateAcquisition_reloadAnnotationLinks : public Callback_PlateAcquisition_reloadAnnotationLinks_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PlateAcquisition_reloadAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PlateAcquisition_reloadAnnotationLinksPtr
newCallback_PlateAcquisition_reloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_reloadAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_reloadAnnotationLinksPtr
newCallback_PlateAcquisition_reloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_reloadAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_reloadAnnotationLinksPtr
newCallback_PlateAcquisition_reloadAnnotationLinks(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_reloadAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_reloadAnnotationLinksPtr
newCallback_PlateAcquisition_reloadAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_reloadAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlateAcquisition_reloadAnnotationLinks : public Callback_PlateAcquisition_reloadAnnotationLinks_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PlateAcquisition_reloadAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PlateAcquisition_reloadAnnotationLinksPtr
newCallback_PlateAcquisition_reloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_reloadAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_reloadAnnotationLinksPtr
newCallback_PlateAcquisition_reloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_reloadAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_reloadAnnotationLinksPtr
newCallback_PlateAcquisition_reloadAnnotationLinks(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_reloadAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_reloadAnnotationLinksPtr
newCallback_PlateAcquisition_reloadAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_reloadAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PlateAcquisition_getAnnotationLinksCountPerOwner : public Callback_PlateAcquisition_getAnnotationLinksCountPerOwner_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::sys::CountMap&);

    CallbackNC_PlateAcquisition_getAnnotationLinksCountPerOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlateAcquisitionPrx __proxy = ::omero::model::PlateAcquisitionPrx::uncheckedCast(__result->getProxy());
        ::omero::sys::CountMap __ret;
        try
        {
            __ret = __proxy->end_getAnnotationLinksCountPerOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_PlateAcquisition_getAnnotationLinksCountPerOwnerPtr
newCallback_PlateAcquisition_getAnnotationLinksCountPerOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::CountMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_getAnnotationLinksCountPerOwner<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_getAnnotationLinksCountPerOwnerPtr
newCallback_PlateAcquisition_getAnnotationLinksCountPerOwner(T* instance, void (T::*cb)(const ::omero::sys::CountMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_getAnnotationLinksCountPerOwner<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlateAcquisition_getAnnotationLinksCountPerOwner : public Callback_PlateAcquisition_getAnnotationLinksCountPerOwner_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::sys::CountMap&, const CT&);

    Callback_PlateAcquisition_getAnnotationLinksCountPerOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlateAcquisitionPrx __proxy = ::omero::model::PlateAcquisitionPrx::uncheckedCast(__result->getProxy());
        ::omero::sys::CountMap __ret;
        try
        {
            __ret = __proxy->end_getAnnotationLinksCountPerOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PlateAcquisition_getAnnotationLinksCountPerOwnerPtr
newCallback_PlateAcquisition_getAnnotationLinksCountPerOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::CountMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_getAnnotationLinksCountPerOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_getAnnotationLinksCountPerOwnerPtr
newCallback_PlateAcquisition_getAnnotationLinksCountPerOwner(T* instance, void (T::*cb)(const ::omero::sys::CountMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_getAnnotationLinksCountPerOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PlateAcquisition_linkAnnotation : public Callback_PlateAcquisition_linkAnnotation_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::PlateAcquisitionAnnotationLinkPtr&);

    CallbackNC_PlateAcquisition_linkAnnotation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlateAcquisitionPrx __proxy = ::omero::model::PlateAcquisitionPrx::uncheckedCast(__result->getProxy());
        ::omero::model::PlateAcquisitionAnnotationLinkPtr __ret;
        try
        {
            __ret = __proxy->end_linkAnnotation(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_PlateAcquisition_linkAnnotationPtr
newCallback_PlateAcquisition_linkAnnotation(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PlateAcquisitionAnnotationLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_linkAnnotation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_linkAnnotationPtr
newCallback_PlateAcquisition_linkAnnotation(T* instance, void (T::*cb)(const ::omero::model::PlateAcquisitionAnnotationLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_linkAnnotation<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlateAcquisition_linkAnnotation : public Callback_PlateAcquisition_linkAnnotation_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::PlateAcquisitionAnnotationLinkPtr&, const CT&);

    Callback_PlateAcquisition_linkAnnotation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlateAcquisitionPrx __proxy = ::omero::model::PlateAcquisitionPrx::uncheckedCast(__result->getProxy());
        ::omero::model::PlateAcquisitionAnnotationLinkPtr __ret;
        try
        {
            __ret = __proxy->end_linkAnnotation(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PlateAcquisition_linkAnnotationPtr
newCallback_PlateAcquisition_linkAnnotation(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PlateAcquisitionAnnotationLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_linkAnnotation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_linkAnnotationPtr
newCallback_PlateAcquisition_linkAnnotation(T* instance, void (T::*cb)(const ::omero::model::PlateAcquisitionAnnotationLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_linkAnnotation<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PlateAcquisition_addPlateAcquisitionAnnotationLinkToBoth : public Callback_PlateAcquisition_addPlateAcquisitionAnnotationLinkToBoth_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PlateAcquisition_addPlateAcquisitionAnnotationLinkToBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PlateAcquisition_addPlateAcquisitionAnnotationLinkToBothPtr
newCallback_PlateAcquisition_addPlateAcquisitionAnnotationLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_addPlateAcquisitionAnnotationLinkToBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_addPlateAcquisitionAnnotationLinkToBothPtr
newCallback_PlateAcquisition_addPlateAcquisitionAnnotationLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_addPlateAcquisitionAnnotationLinkToBoth<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_addPlateAcquisitionAnnotationLinkToBothPtr
newCallback_PlateAcquisition_addPlateAcquisitionAnnotationLinkToBoth(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_addPlateAcquisitionAnnotationLinkToBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_addPlateAcquisitionAnnotationLinkToBothPtr
newCallback_PlateAcquisition_addPlateAcquisitionAnnotationLinkToBoth(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_addPlateAcquisitionAnnotationLinkToBoth<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlateAcquisition_addPlateAcquisitionAnnotationLinkToBoth : public Callback_PlateAcquisition_addPlateAcquisitionAnnotationLinkToBoth_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PlateAcquisition_addPlateAcquisitionAnnotationLinkToBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PlateAcquisition_addPlateAcquisitionAnnotationLinkToBothPtr
newCallback_PlateAcquisition_addPlateAcquisitionAnnotationLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_addPlateAcquisitionAnnotationLinkToBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_addPlateAcquisitionAnnotationLinkToBothPtr
newCallback_PlateAcquisition_addPlateAcquisitionAnnotationLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_addPlateAcquisitionAnnotationLinkToBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_addPlateAcquisitionAnnotationLinkToBothPtr
newCallback_PlateAcquisition_addPlateAcquisitionAnnotationLinkToBoth(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_addPlateAcquisitionAnnotationLinkToBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_addPlateAcquisitionAnnotationLinkToBothPtr
newCallback_PlateAcquisition_addPlateAcquisitionAnnotationLinkToBoth(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_addPlateAcquisitionAnnotationLinkToBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PlateAcquisition_findPlateAcquisitionAnnotationLink : public Callback_PlateAcquisition_findPlateAcquisitionAnnotationLink_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::PlateAcquisitionAnnotationLinksSeq&);

    CallbackNC_PlateAcquisition_findPlateAcquisitionAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlateAcquisitionPrx __proxy = ::omero::model::PlateAcquisitionPrx::uncheckedCast(__result->getProxy());
        ::omero::model::PlateAcquisitionAnnotationLinksSeq __ret;
        try
        {
            __ret = __proxy->end_findPlateAcquisitionAnnotationLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_PlateAcquisition_findPlateAcquisitionAnnotationLinkPtr
newCallback_PlateAcquisition_findPlateAcquisitionAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PlateAcquisitionAnnotationLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_findPlateAcquisitionAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_findPlateAcquisitionAnnotationLinkPtr
newCallback_PlateAcquisition_findPlateAcquisitionAnnotationLink(T* instance, void (T::*cb)(const ::omero::model::PlateAcquisitionAnnotationLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_findPlateAcquisitionAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlateAcquisition_findPlateAcquisitionAnnotationLink : public Callback_PlateAcquisition_findPlateAcquisitionAnnotationLink_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::PlateAcquisitionAnnotationLinksSeq&, const CT&);

    Callback_PlateAcquisition_findPlateAcquisitionAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlateAcquisitionPrx __proxy = ::omero::model::PlateAcquisitionPrx::uncheckedCast(__result->getProxy());
        ::omero::model::PlateAcquisitionAnnotationLinksSeq __ret;
        try
        {
            __ret = __proxy->end_findPlateAcquisitionAnnotationLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PlateAcquisition_findPlateAcquisitionAnnotationLinkPtr
newCallback_PlateAcquisition_findPlateAcquisitionAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PlateAcquisitionAnnotationLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_findPlateAcquisitionAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_findPlateAcquisitionAnnotationLinkPtr
newCallback_PlateAcquisition_findPlateAcquisitionAnnotationLink(T* instance, void (T::*cb)(const ::omero::model::PlateAcquisitionAnnotationLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_findPlateAcquisitionAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PlateAcquisition_unlinkAnnotation : public Callback_PlateAcquisition_unlinkAnnotation_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PlateAcquisition_unlinkAnnotation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PlateAcquisition_unlinkAnnotationPtr
newCallback_PlateAcquisition_unlinkAnnotation(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_unlinkAnnotation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_unlinkAnnotationPtr
newCallback_PlateAcquisition_unlinkAnnotation(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_unlinkAnnotation<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_unlinkAnnotationPtr
newCallback_PlateAcquisition_unlinkAnnotation(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_unlinkAnnotation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_unlinkAnnotationPtr
newCallback_PlateAcquisition_unlinkAnnotation(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_unlinkAnnotation<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlateAcquisition_unlinkAnnotation : public Callback_PlateAcquisition_unlinkAnnotation_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PlateAcquisition_unlinkAnnotation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PlateAcquisition_unlinkAnnotationPtr
newCallback_PlateAcquisition_unlinkAnnotation(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_unlinkAnnotation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_unlinkAnnotationPtr
newCallback_PlateAcquisition_unlinkAnnotation(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_unlinkAnnotation<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_unlinkAnnotationPtr
newCallback_PlateAcquisition_unlinkAnnotation(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_unlinkAnnotation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_unlinkAnnotationPtr
newCallback_PlateAcquisition_unlinkAnnotation(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_unlinkAnnotation<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PlateAcquisition_removePlateAcquisitionAnnotationLinkFromBoth : public Callback_PlateAcquisition_removePlateAcquisitionAnnotationLinkFromBoth_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PlateAcquisition_removePlateAcquisitionAnnotationLinkFromBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PlateAcquisition_removePlateAcquisitionAnnotationLinkFromBothPtr
newCallback_PlateAcquisition_removePlateAcquisitionAnnotationLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_removePlateAcquisitionAnnotationLinkFromBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_removePlateAcquisitionAnnotationLinkFromBothPtr
newCallback_PlateAcquisition_removePlateAcquisitionAnnotationLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_removePlateAcquisitionAnnotationLinkFromBoth<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_removePlateAcquisitionAnnotationLinkFromBothPtr
newCallback_PlateAcquisition_removePlateAcquisitionAnnotationLinkFromBoth(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_removePlateAcquisitionAnnotationLinkFromBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_removePlateAcquisitionAnnotationLinkFromBothPtr
newCallback_PlateAcquisition_removePlateAcquisitionAnnotationLinkFromBoth(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_removePlateAcquisitionAnnotationLinkFromBoth<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlateAcquisition_removePlateAcquisitionAnnotationLinkFromBoth : public Callback_PlateAcquisition_removePlateAcquisitionAnnotationLinkFromBoth_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PlateAcquisition_removePlateAcquisitionAnnotationLinkFromBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PlateAcquisition_removePlateAcquisitionAnnotationLinkFromBothPtr
newCallback_PlateAcquisition_removePlateAcquisitionAnnotationLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_removePlateAcquisitionAnnotationLinkFromBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_removePlateAcquisitionAnnotationLinkFromBothPtr
newCallback_PlateAcquisition_removePlateAcquisitionAnnotationLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_removePlateAcquisitionAnnotationLinkFromBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_removePlateAcquisitionAnnotationLinkFromBothPtr
newCallback_PlateAcquisition_removePlateAcquisitionAnnotationLinkFromBoth(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_removePlateAcquisitionAnnotationLinkFromBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_removePlateAcquisitionAnnotationLinkFromBothPtr
newCallback_PlateAcquisition_removePlateAcquisitionAnnotationLinkFromBoth(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_removePlateAcquisitionAnnotationLinkFromBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PlateAcquisition_linkedAnnotationList : public Callback_PlateAcquisition_linkedAnnotationList_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::PlateAcquisitionLinkedAnnotationSeq&);

    CallbackNC_PlateAcquisition_linkedAnnotationList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlateAcquisitionPrx __proxy = ::omero::model::PlateAcquisitionPrx::uncheckedCast(__result->getProxy());
        ::omero::model::PlateAcquisitionLinkedAnnotationSeq __ret;
        try
        {
            __ret = __proxy->end_linkedAnnotationList(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_PlateAcquisition_linkedAnnotationListPtr
newCallback_PlateAcquisition_linkedAnnotationList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PlateAcquisitionLinkedAnnotationSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_linkedAnnotationList<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_linkedAnnotationListPtr
newCallback_PlateAcquisition_linkedAnnotationList(T* instance, void (T::*cb)(const ::omero::model::PlateAcquisitionLinkedAnnotationSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_linkedAnnotationList<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlateAcquisition_linkedAnnotationList : public Callback_PlateAcquisition_linkedAnnotationList_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::PlateAcquisitionLinkedAnnotationSeq&, const CT&);

    Callback_PlateAcquisition_linkedAnnotationList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlateAcquisitionPrx __proxy = ::omero::model::PlateAcquisitionPrx::uncheckedCast(__result->getProxy());
        ::omero::model::PlateAcquisitionLinkedAnnotationSeq __ret;
        try
        {
            __ret = __proxy->end_linkedAnnotationList(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PlateAcquisition_linkedAnnotationListPtr
newCallback_PlateAcquisition_linkedAnnotationList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PlateAcquisitionLinkedAnnotationSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_linkedAnnotationList<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_linkedAnnotationListPtr
newCallback_PlateAcquisition_linkedAnnotationList(T* instance, void (T::*cb)(const ::omero::model::PlateAcquisitionLinkedAnnotationSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_linkedAnnotationList<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PlateAcquisition_getDescription : public Callback_PlateAcquisition_getDescription_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_PlateAcquisition_getDescription(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlateAcquisitionPrx __proxy = ::omero::model::PlateAcquisitionPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getDescription(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_PlateAcquisition_getDescriptionPtr
newCallback_PlateAcquisition_getDescription(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_getDescription<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_getDescriptionPtr
newCallback_PlateAcquisition_getDescription(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_getDescription<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlateAcquisition_getDescription : public Callback_PlateAcquisition_getDescription_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_PlateAcquisition_getDescription(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlateAcquisitionPrx __proxy = ::omero::model::PlateAcquisitionPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getDescription(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PlateAcquisition_getDescriptionPtr
newCallback_PlateAcquisition_getDescription(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_getDescription<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_getDescriptionPtr
newCallback_PlateAcquisition_getDescription(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_getDescription<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PlateAcquisition_setDescription : public Callback_PlateAcquisition_setDescription_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PlateAcquisition_setDescription(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PlateAcquisition_setDescriptionPtr
newCallback_PlateAcquisition_setDescription(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_setDescription<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_setDescriptionPtr
newCallback_PlateAcquisition_setDescription(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_setDescription<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_setDescriptionPtr
newCallback_PlateAcquisition_setDescription(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_setDescription<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlateAcquisition_setDescriptionPtr
newCallback_PlateAcquisition_setDescription(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlateAcquisition_setDescription<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlateAcquisition_setDescription : public Callback_PlateAcquisition_setDescription_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PlateAcquisition_setDescription(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PlateAcquisition_setDescriptionPtr
newCallback_PlateAcquisition_setDescription(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_setDescription<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_setDescriptionPtr
newCallback_PlateAcquisition_setDescription(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_setDescription<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_setDescriptionPtr
newCallback_PlateAcquisition_setDescription(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_setDescription<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlateAcquisition_setDescriptionPtr
newCallback_PlateAcquisition_setDescription(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlateAcquisition_setDescription<T, CT>(instance, 0, excb, sentcb);
}

}

}

#endif
