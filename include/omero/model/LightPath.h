// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `LightPath.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_LightPath_h__
#define __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_LightPath_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <omero/model/IObject.h>
#include <omero/RTypes.h>
#include <omero/System.h>
#include <omero/Collections.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace omero
{

namespace model
{

class LightPathExcitationFilterLink;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::LightPathExcitationFilterLink>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::LightPathExcitationFilterLink*);

class Filter;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Filter>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Filter*);

class Dichroic;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Dichroic>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Dichroic*);

class LightPathEmissionFilterLink;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::LightPathEmissionFilterLink>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::LightPathEmissionFilterLink*);

class Details;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Details>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Details*);

class LightPath;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::LightPath>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::LightPath*);

}

}

}

namespace omero
{

namespace model
{

class LightPathExcitationFilterLink;
bool operator==(const LightPathExcitationFilterLink&, const LightPathExcitationFilterLink&);
bool operator<(const LightPathExcitationFilterLink&, const LightPathExcitationFilterLink&);
::Ice::Object* upCast(::omero::model::LightPathExcitationFilterLink*);
typedef ::IceInternal::Handle< ::omero::model::LightPathExcitationFilterLink> LightPathExcitationFilterLinkPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::LightPathExcitationFilterLink> LightPathExcitationFilterLinkPrx;
void __patch(LightPathExcitationFilterLinkPtr&, const ::Ice::ObjectPtr&);

class Filter;
bool operator==(const Filter&, const Filter&);
bool operator<(const Filter&, const Filter&);
::Ice::Object* upCast(::omero::model::Filter*);
typedef ::IceInternal::Handle< ::omero::model::Filter> FilterPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Filter> FilterPrx;
void __patch(FilterPtr&, const ::Ice::ObjectPtr&);

class Dichroic;
bool operator==(const Dichroic&, const Dichroic&);
bool operator<(const Dichroic&, const Dichroic&);
::Ice::Object* upCast(::omero::model::Dichroic*);
typedef ::IceInternal::Handle< ::omero::model::Dichroic> DichroicPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Dichroic> DichroicPrx;
void __patch(DichroicPtr&, const ::Ice::ObjectPtr&);

class LightPathEmissionFilterLink;
bool operator==(const LightPathEmissionFilterLink&, const LightPathEmissionFilterLink&);
bool operator<(const LightPathEmissionFilterLink&, const LightPathEmissionFilterLink&);
::Ice::Object* upCast(::omero::model::LightPathEmissionFilterLink*);
typedef ::IceInternal::Handle< ::omero::model::LightPathEmissionFilterLink> LightPathEmissionFilterLinkPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::LightPathEmissionFilterLink> LightPathEmissionFilterLinkPrx;
void __patch(LightPathEmissionFilterLinkPtr&, const ::Ice::ObjectPtr&);

class Details;
bool operator==(const Details&, const Details&);
bool operator<(const Details&, const Details&);
::Ice::Object* upCast(::omero::model::Details*);
typedef ::IceInternal::Handle< ::omero::model::Details> DetailsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Details> DetailsPrx;
void __patch(DetailsPtr&, const ::Ice::ObjectPtr&);

class LightPath;
bool operator==(const LightPath&, const LightPath&);
bool operator<(const LightPath&, const LightPath&);
::Ice::Object* upCast(::omero::model::LightPath*);
typedef ::IceInternal::Handle< ::omero::model::LightPath> LightPathPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::LightPath> LightPathPrx;
void __patch(LightPathPtr&, const ::Ice::ObjectPtr&);

}

}

namespace omero
{

namespace model
{

typedef ::std::vector< ::omero::model::LightPathExcitationFilterLinkPtr> LightPathExcitationFilterLinkSeq;

typedef ::std::vector< ::omero::model::FilterPtr> LightPathLinkedExcitationFilterSeq;

typedef ::std::vector< ::omero::model::LightPathEmissionFilterLinkPtr> LightPathEmissionFilterLinkSeq;

typedef ::std::vector< ::omero::model::FilterPtr> LightPathLinkedEmissionFilterSeq;

}

}

namespace omero
{

namespace model
{

class Callback_LightPath_getVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LightPath_getVersion_Base> Callback_LightPath_getVersionPtr;

class Callback_LightPath_setVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LightPath_setVersion_Base> Callback_LightPath_setVersionPtr;

class Callback_LightPath_unloadExcitationFilterLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LightPath_unloadExcitationFilterLink_Base> Callback_LightPath_unloadExcitationFilterLinkPtr;

class Callback_LightPath_sizeOfExcitationFilterLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LightPath_sizeOfExcitationFilterLink_Base> Callback_LightPath_sizeOfExcitationFilterLinkPtr;

class Callback_LightPath_copyExcitationFilterLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LightPath_copyExcitationFilterLink_Base> Callback_LightPath_copyExcitationFilterLinkPtr;

class Callback_LightPath_addLightPathExcitationFilterLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LightPath_addLightPathExcitationFilterLink_Base> Callback_LightPath_addLightPathExcitationFilterLinkPtr;

class Callback_LightPath_addAllLightPathExcitationFilterLinkSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LightPath_addAllLightPathExcitationFilterLinkSet_Base> Callback_LightPath_addAllLightPathExcitationFilterLinkSetPtr;

class Callback_LightPath_removeLightPathExcitationFilterLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LightPath_removeLightPathExcitationFilterLink_Base> Callback_LightPath_removeLightPathExcitationFilterLinkPtr;

class Callback_LightPath_removeAllLightPathExcitationFilterLinkSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LightPath_removeAllLightPathExcitationFilterLinkSet_Base> Callback_LightPath_removeAllLightPathExcitationFilterLinkSetPtr;

class Callback_LightPath_clearExcitationFilterLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LightPath_clearExcitationFilterLink_Base> Callback_LightPath_clearExcitationFilterLinkPtr;

class Callback_LightPath_reloadExcitationFilterLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LightPath_reloadExcitationFilterLink_Base> Callback_LightPath_reloadExcitationFilterLinkPtr;

class Callback_LightPath_getLightPathExcitationFilterLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LightPath_getLightPathExcitationFilterLink_Base> Callback_LightPath_getLightPathExcitationFilterLinkPtr;

class Callback_LightPath_setLightPathExcitationFilterLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LightPath_setLightPathExcitationFilterLink_Base> Callback_LightPath_setLightPathExcitationFilterLinkPtr;

class Callback_LightPath_getPrimaryLightPathExcitationFilterLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LightPath_getPrimaryLightPathExcitationFilterLink_Base> Callback_LightPath_getPrimaryLightPathExcitationFilterLinkPtr;

class Callback_LightPath_setPrimaryLightPathExcitationFilterLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LightPath_setPrimaryLightPathExcitationFilterLink_Base> Callback_LightPath_setPrimaryLightPathExcitationFilterLinkPtr;

class Callback_LightPath_getExcitationFilterLinkCountPerOwner_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LightPath_getExcitationFilterLinkCountPerOwner_Base> Callback_LightPath_getExcitationFilterLinkCountPerOwnerPtr;

class Callback_LightPath_linkExcitationFilter_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LightPath_linkExcitationFilter_Base> Callback_LightPath_linkExcitationFilterPtr;

class Callback_LightPath_addLightPathExcitationFilterLinkToBoth_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LightPath_addLightPathExcitationFilterLinkToBoth_Base> Callback_LightPath_addLightPathExcitationFilterLinkToBothPtr;

class Callback_LightPath_findLightPathExcitationFilterLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LightPath_findLightPathExcitationFilterLink_Base> Callback_LightPath_findLightPathExcitationFilterLinkPtr;

class Callback_LightPath_unlinkExcitationFilter_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LightPath_unlinkExcitationFilter_Base> Callback_LightPath_unlinkExcitationFilterPtr;

class Callback_LightPath_removeLightPathExcitationFilterLinkFromBoth_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LightPath_removeLightPathExcitationFilterLinkFromBoth_Base> Callback_LightPath_removeLightPathExcitationFilterLinkFromBothPtr;

class Callback_LightPath_linkedExcitationFilterList_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LightPath_linkedExcitationFilterList_Base> Callback_LightPath_linkedExcitationFilterListPtr;

class Callback_LightPath_getDichroic_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LightPath_getDichroic_Base> Callback_LightPath_getDichroicPtr;

class Callback_LightPath_setDichroic_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LightPath_setDichroic_Base> Callback_LightPath_setDichroicPtr;

class Callback_LightPath_unloadEmissionFilterLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LightPath_unloadEmissionFilterLink_Base> Callback_LightPath_unloadEmissionFilterLinkPtr;

class Callback_LightPath_sizeOfEmissionFilterLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LightPath_sizeOfEmissionFilterLink_Base> Callback_LightPath_sizeOfEmissionFilterLinkPtr;

class Callback_LightPath_copyEmissionFilterLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LightPath_copyEmissionFilterLink_Base> Callback_LightPath_copyEmissionFilterLinkPtr;

class Callback_LightPath_addLightPathEmissionFilterLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LightPath_addLightPathEmissionFilterLink_Base> Callback_LightPath_addLightPathEmissionFilterLinkPtr;

class Callback_LightPath_addAllLightPathEmissionFilterLinkSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LightPath_addAllLightPathEmissionFilterLinkSet_Base> Callback_LightPath_addAllLightPathEmissionFilterLinkSetPtr;

class Callback_LightPath_removeLightPathEmissionFilterLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LightPath_removeLightPathEmissionFilterLink_Base> Callback_LightPath_removeLightPathEmissionFilterLinkPtr;

class Callback_LightPath_removeAllLightPathEmissionFilterLinkSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LightPath_removeAllLightPathEmissionFilterLinkSet_Base> Callback_LightPath_removeAllLightPathEmissionFilterLinkSetPtr;

class Callback_LightPath_clearEmissionFilterLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LightPath_clearEmissionFilterLink_Base> Callback_LightPath_clearEmissionFilterLinkPtr;

class Callback_LightPath_reloadEmissionFilterLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LightPath_reloadEmissionFilterLink_Base> Callback_LightPath_reloadEmissionFilterLinkPtr;

class Callback_LightPath_getEmissionFilterLinkCountPerOwner_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LightPath_getEmissionFilterLinkCountPerOwner_Base> Callback_LightPath_getEmissionFilterLinkCountPerOwnerPtr;

class Callback_LightPath_linkEmissionFilter_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LightPath_linkEmissionFilter_Base> Callback_LightPath_linkEmissionFilterPtr;

class Callback_LightPath_addLightPathEmissionFilterLinkToBoth_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LightPath_addLightPathEmissionFilterLinkToBoth_Base> Callback_LightPath_addLightPathEmissionFilterLinkToBothPtr;

class Callback_LightPath_findLightPathEmissionFilterLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LightPath_findLightPathEmissionFilterLink_Base> Callback_LightPath_findLightPathEmissionFilterLinkPtr;

class Callback_LightPath_unlinkEmissionFilter_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LightPath_unlinkEmissionFilter_Base> Callback_LightPath_unlinkEmissionFilterPtr;

class Callback_LightPath_removeLightPathEmissionFilterLinkFromBoth_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LightPath_removeLightPathEmissionFilterLinkFromBoth_Base> Callback_LightPath_removeLightPathEmissionFilterLinkFromBothPtr;

class Callback_LightPath_linkedEmissionFilterList_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LightPath_linkedEmissionFilterList_Base> Callback_LightPath_linkedEmissionFilterListPtr;

}

}

namespace IceProxy
{

namespace omero
{

namespace model
{

class LightPath : virtual public ::IceProxy::omero::model::IObject
{
public:

    ::omero::RIntPtr getVersion()
    {
        return getVersion(0);
    }
    ::omero::RIntPtr getVersion(const ::Ice::Context& __ctx)
    {
        return getVersion(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getVersion(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getVersion(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getVersion(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getVersion(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getVersion(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RIntPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::LightPathPrx __proxy = ::omero::model::LightPathPrx::uncheckedCast(__result->getProxy());
                ::omero::RIntPtr __ret;
                try
                {
                    __ret = __proxy->end_getVersion(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RIntPtr&)> _response;
        };
        return begin_getVersion(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getVersion()
    {
        return begin_getVersion(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx)
    {
        return begin_getVersion(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::omero::model::Callback_LightPath_getVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx, const ::omero::model::Callback_LightPath_getVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(&__ctx, __del, __cookie);
    }

    ::omero::RIntPtr end_getVersion(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RIntPtr getVersion(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setVersion(const ::omero::RIntPtr& theVersion)
    {
        setVersion(theVersion, 0);
    }
    void setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx)
    {
        setVersion(theVersion, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setVersion(const ::omero::RIntPtr& theVersion, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setVersion(theVersion, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setVersion(const ::omero::RIntPtr& theVersion, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setVersion(theVersion, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setVersion(theVersion, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setVersion(theVersion, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion)
    {
        return begin_setVersion(theVersion, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx)
    {
        return begin_setVersion(theVersion, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::omero::model::Callback_LightPath_setVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::omero::model::Callback_LightPath_setVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, &__ctx, __del, __cookie);
    }

    void end_setVersion(const ::Ice::AsyncResultPtr&);
    
private:

    void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unloadExcitationFilterLink()
    {
        unloadExcitationFilterLink(0);
    }
    void unloadExcitationFilterLink(const ::Ice::Context& __ctx)
    {
        unloadExcitationFilterLink(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_unloadExcitationFilterLink(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unloadExcitationFilterLink(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_unloadExcitationFilterLink(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unloadExcitationFilterLink(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unloadExcitationFilterLink(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unloadExcitationFilterLink(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unloadExcitationFilterLink(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unloadExcitationFilterLink(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_unloadExcitationFilterLink()
    {
        return begin_unloadExcitationFilterLink(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadExcitationFilterLink(const ::Ice::Context& __ctx)
    {
        return begin_unloadExcitationFilterLink(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadExcitationFilterLink(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadExcitationFilterLink(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadExcitationFilterLink(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadExcitationFilterLink(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadExcitationFilterLink(const ::omero::model::Callback_LightPath_unloadExcitationFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadExcitationFilterLink(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadExcitationFilterLink(const ::Ice::Context& __ctx, const ::omero::model::Callback_LightPath_unloadExcitationFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadExcitationFilterLink(&__ctx, __del, __cookie);
    }

    void end_unloadExcitationFilterLink(const ::Ice::AsyncResultPtr&);
    
private:

    void unloadExcitationFilterLink(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unloadExcitationFilterLink(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int sizeOfExcitationFilterLink()
    {
        return sizeOfExcitationFilterLink(0);
    }
    ::Ice::Int sizeOfExcitationFilterLink(const ::Ice::Context& __ctx)
    {
        return sizeOfExcitationFilterLink(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_sizeOfExcitationFilterLink(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sizeOfExcitationFilterLink(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfExcitationFilterLink(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sizeOfExcitationFilterLink(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfExcitationFilterLink(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sizeOfExcitationFilterLink(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfExcitationFilterLink(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sizeOfExcitationFilterLink(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_sizeOfExcitationFilterLink(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::LightPathPrx __proxy = ::omero::model::LightPathPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_sizeOfExcitationFilterLink(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_sizeOfExcitationFilterLink(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_sizeOfExcitationFilterLink()
    {
        return begin_sizeOfExcitationFilterLink(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfExcitationFilterLink(const ::Ice::Context& __ctx)
    {
        return begin_sizeOfExcitationFilterLink(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfExcitationFilterLink(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfExcitationFilterLink(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfExcitationFilterLink(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfExcitationFilterLink(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfExcitationFilterLink(const ::omero::model::Callback_LightPath_sizeOfExcitationFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfExcitationFilterLink(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfExcitationFilterLink(const ::Ice::Context& __ctx, const ::omero::model::Callback_LightPath_sizeOfExcitationFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfExcitationFilterLink(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_sizeOfExcitationFilterLink(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int sizeOfExcitationFilterLink(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sizeOfExcitationFilterLink(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::LightPathExcitationFilterLinkSeq copyExcitationFilterLink()
    {
        return copyExcitationFilterLink(0);
    }
    ::omero::model::LightPathExcitationFilterLinkSeq copyExcitationFilterLink(const ::Ice::Context& __ctx)
    {
        return copyExcitationFilterLink(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_copyExcitationFilterLink(const ::IceInternal::Function<void (const ::omero::model::LightPathExcitationFilterLinkSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_copyExcitationFilterLink(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_copyExcitationFilterLink(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_copyExcitationFilterLink(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_copyExcitationFilterLink(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::LightPathExcitationFilterLinkSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_copyExcitationFilterLink(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_copyExcitationFilterLink(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_copyExcitationFilterLink(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_copyExcitationFilterLink(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::LightPathExcitationFilterLinkSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::LightPathExcitationFilterLinkSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::LightPathPrx __proxy = ::omero::model::LightPathPrx::uncheckedCast(__result->getProxy());
                ::omero::model::LightPathExcitationFilterLinkSeq __ret;
                try
                {
                    __ret = __proxy->end_copyExcitationFilterLink(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::LightPathExcitationFilterLinkSeq&)> _response;
        };
        return begin_copyExcitationFilterLink(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_copyExcitationFilterLink()
    {
        return begin_copyExcitationFilterLink(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyExcitationFilterLink(const ::Ice::Context& __ctx)
    {
        return begin_copyExcitationFilterLink(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyExcitationFilterLink(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyExcitationFilterLink(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyExcitationFilterLink(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyExcitationFilterLink(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyExcitationFilterLink(const ::omero::model::Callback_LightPath_copyExcitationFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyExcitationFilterLink(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyExcitationFilterLink(const ::Ice::Context& __ctx, const ::omero::model::Callback_LightPath_copyExcitationFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyExcitationFilterLink(&__ctx, __del, __cookie);
    }

    ::omero::model::LightPathExcitationFilterLinkSeq end_copyExcitationFilterLink(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::LightPathExcitationFilterLinkSeq copyExcitationFilterLink(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_copyExcitationFilterLink(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addLightPathExcitationFilterLink(const ::omero::model::LightPathExcitationFilterLinkPtr& target)
    {
        addLightPathExcitationFilterLink(target, 0);
    }
    void addLightPathExcitationFilterLink(const ::omero::model::LightPathExcitationFilterLinkPtr& target, const ::Ice::Context& __ctx)
    {
        addLightPathExcitationFilterLink(target, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addLightPathExcitationFilterLink(const ::omero::model::LightPathExcitationFilterLinkPtr& target, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addLightPathExcitationFilterLink(target, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addLightPathExcitationFilterLink(const ::omero::model::LightPathExcitationFilterLinkPtr& target, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addLightPathExcitationFilterLink(target, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addLightPathExcitationFilterLink(const ::omero::model::LightPathExcitationFilterLinkPtr& target, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addLightPathExcitationFilterLink(target, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addLightPathExcitationFilterLink(const ::omero::model::LightPathExcitationFilterLinkPtr& target, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addLightPathExcitationFilterLink(target, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addLightPathExcitationFilterLink(const ::omero::model::LightPathExcitationFilterLinkPtr& target)
    {
        return begin_addLightPathExcitationFilterLink(target, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addLightPathExcitationFilterLink(const ::omero::model::LightPathExcitationFilterLinkPtr& target, const ::Ice::Context& __ctx)
    {
        return begin_addLightPathExcitationFilterLink(target, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addLightPathExcitationFilterLink(const ::omero::model::LightPathExcitationFilterLinkPtr& target, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addLightPathExcitationFilterLink(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addLightPathExcitationFilterLink(const ::omero::model::LightPathExcitationFilterLinkPtr& target, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addLightPathExcitationFilterLink(target, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addLightPathExcitationFilterLink(const ::omero::model::LightPathExcitationFilterLinkPtr& target, const ::omero::model::Callback_LightPath_addLightPathExcitationFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addLightPathExcitationFilterLink(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addLightPathExcitationFilterLink(const ::omero::model::LightPathExcitationFilterLinkPtr& target, const ::Ice::Context& __ctx, const ::omero::model::Callback_LightPath_addLightPathExcitationFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addLightPathExcitationFilterLink(target, &__ctx, __del, __cookie);
    }

    void end_addLightPathExcitationFilterLink(const ::Ice::AsyncResultPtr&);
    
private:

    void addLightPathExcitationFilterLink(const ::omero::model::LightPathExcitationFilterLinkPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addLightPathExcitationFilterLink(const ::omero::model::LightPathExcitationFilterLinkPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addAllLightPathExcitationFilterLinkSet(const ::omero::model::LightPathExcitationFilterLinkSeq& targets)
    {
        addAllLightPathExcitationFilterLinkSet(targets, 0);
    }
    void addAllLightPathExcitationFilterLinkSet(const ::omero::model::LightPathExcitationFilterLinkSeq& targets, const ::Ice::Context& __ctx)
    {
        addAllLightPathExcitationFilterLinkSet(targets, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addAllLightPathExcitationFilterLinkSet(const ::omero::model::LightPathExcitationFilterLinkSeq& targets, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addAllLightPathExcitationFilterLinkSet(targets, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addAllLightPathExcitationFilterLinkSet(const ::omero::model::LightPathExcitationFilterLinkSeq& targets, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addAllLightPathExcitationFilterLinkSet(targets, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addAllLightPathExcitationFilterLinkSet(const ::omero::model::LightPathExcitationFilterLinkSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addAllLightPathExcitationFilterLinkSet(targets, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addAllLightPathExcitationFilterLinkSet(const ::omero::model::LightPathExcitationFilterLinkSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addAllLightPathExcitationFilterLinkSet(targets, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addAllLightPathExcitationFilterLinkSet(const ::omero::model::LightPathExcitationFilterLinkSeq& targets)
    {
        return begin_addAllLightPathExcitationFilterLinkSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllLightPathExcitationFilterLinkSet(const ::omero::model::LightPathExcitationFilterLinkSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_addAllLightPathExcitationFilterLinkSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllLightPathExcitationFilterLinkSet(const ::omero::model::LightPathExcitationFilterLinkSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllLightPathExcitationFilterLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllLightPathExcitationFilterLinkSet(const ::omero::model::LightPathExcitationFilterLinkSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllLightPathExcitationFilterLinkSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllLightPathExcitationFilterLinkSet(const ::omero::model::LightPathExcitationFilterLinkSeq& targets, const ::omero::model::Callback_LightPath_addAllLightPathExcitationFilterLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllLightPathExcitationFilterLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllLightPathExcitationFilterLinkSet(const ::omero::model::LightPathExcitationFilterLinkSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_LightPath_addAllLightPathExcitationFilterLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllLightPathExcitationFilterLinkSet(targets, &__ctx, __del, __cookie);
    }

    void end_addAllLightPathExcitationFilterLinkSet(const ::Ice::AsyncResultPtr&);
    
private:

    void addAllLightPathExcitationFilterLinkSet(const ::omero::model::LightPathExcitationFilterLinkSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addAllLightPathExcitationFilterLinkSet(const ::omero::model::LightPathExcitationFilterLinkSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeLightPathExcitationFilterLink(const ::omero::model::LightPathExcitationFilterLinkPtr& theTarget)
    {
        removeLightPathExcitationFilterLink(theTarget, 0);
    }
    void removeLightPathExcitationFilterLink(const ::omero::model::LightPathExcitationFilterLinkPtr& theTarget, const ::Ice::Context& __ctx)
    {
        removeLightPathExcitationFilterLink(theTarget, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeLightPathExcitationFilterLink(const ::omero::model::LightPathExcitationFilterLinkPtr& theTarget, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeLightPathExcitationFilterLink(theTarget, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeLightPathExcitationFilterLink(const ::omero::model::LightPathExcitationFilterLinkPtr& theTarget, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeLightPathExcitationFilterLink(theTarget, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeLightPathExcitationFilterLink(const ::omero::model::LightPathExcitationFilterLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeLightPathExcitationFilterLink(theTarget, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeLightPathExcitationFilterLink(const ::omero::model::LightPathExcitationFilterLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeLightPathExcitationFilterLink(theTarget, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeLightPathExcitationFilterLink(const ::omero::model::LightPathExcitationFilterLinkPtr& theTarget)
    {
        return begin_removeLightPathExcitationFilterLink(theTarget, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeLightPathExcitationFilterLink(const ::omero::model::LightPathExcitationFilterLinkPtr& theTarget, const ::Ice::Context& __ctx)
    {
        return begin_removeLightPathExcitationFilterLink(theTarget, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeLightPathExcitationFilterLink(const ::omero::model::LightPathExcitationFilterLinkPtr& theTarget, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeLightPathExcitationFilterLink(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeLightPathExcitationFilterLink(const ::omero::model::LightPathExcitationFilterLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeLightPathExcitationFilterLink(theTarget, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeLightPathExcitationFilterLink(const ::omero::model::LightPathExcitationFilterLinkPtr& theTarget, const ::omero::model::Callback_LightPath_removeLightPathExcitationFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeLightPathExcitationFilterLink(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeLightPathExcitationFilterLink(const ::omero::model::LightPathExcitationFilterLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::omero::model::Callback_LightPath_removeLightPathExcitationFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeLightPathExcitationFilterLink(theTarget, &__ctx, __del, __cookie);
    }

    void end_removeLightPathExcitationFilterLink(const ::Ice::AsyncResultPtr&);
    
private:

    void removeLightPathExcitationFilterLink(const ::omero::model::LightPathExcitationFilterLinkPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeLightPathExcitationFilterLink(const ::omero::model::LightPathExcitationFilterLinkPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeAllLightPathExcitationFilterLinkSet(const ::omero::model::LightPathExcitationFilterLinkSeq& targets)
    {
        removeAllLightPathExcitationFilterLinkSet(targets, 0);
    }
    void removeAllLightPathExcitationFilterLinkSet(const ::omero::model::LightPathExcitationFilterLinkSeq& targets, const ::Ice::Context& __ctx)
    {
        removeAllLightPathExcitationFilterLinkSet(targets, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeAllLightPathExcitationFilterLinkSet(const ::omero::model::LightPathExcitationFilterLinkSeq& targets, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeAllLightPathExcitationFilterLinkSet(targets, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeAllLightPathExcitationFilterLinkSet(const ::omero::model::LightPathExcitationFilterLinkSeq& targets, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeAllLightPathExcitationFilterLinkSet(targets, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeAllLightPathExcitationFilterLinkSet(const ::omero::model::LightPathExcitationFilterLinkSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeAllLightPathExcitationFilterLinkSet(targets, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeAllLightPathExcitationFilterLinkSet(const ::omero::model::LightPathExcitationFilterLinkSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeAllLightPathExcitationFilterLinkSet(targets, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeAllLightPathExcitationFilterLinkSet(const ::omero::model::LightPathExcitationFilterLinkSeq& targets)
    {
        return begin_removeAllLightPathExcitationFilterLinkSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllLightPathExcitationFilterLinkSet(const ::omero::model::LightPathExcitationFilterLinkSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_removeAllLightPathExcitationFilterLinkSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllLightPathExcitationFilterLinkSet(const ::omero::model::LightPathExcitationFilterLinkSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllLightPathExcitationFilterLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllLightPathExcitationFilterLinkSet(const ::omero::model::LightPathExcitationFilterLinkSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllLightPathExcitationFilterLinkSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllLightPathExcitationFilterLinkSet(const ::omero::model::LightPathExcitationFilterLinkSeq& targets, const ::omero::model::Callback_LightPath_removeAllLightPathExcitationFilterLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllLightPathExcitationFilterLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllLightPathExcitationFilterLinkSet(const ::omero::model::LightPathExcitationFilterLinkSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_LightPath_removeAllLightPathExcitationFilterLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllLightPathExcitationFilterLinkSet(targets, &__ctx, __del, __cookie);
    }

    void end_removeAllLightPathExcitationFilterLinkSet(const ::Ice::AsyncResultPtr&);
    
private:

    void removeAllLightPathExcitationFilterLinkSet(const ::omero::model::LightPathExcitationFilterLinkSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeAllLightPathExcitationFilterLinkSet(const ::omero::model::LightPathExcitationFilterLinkSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void clearExcitationFilterLink()
    {
        clearExcitationFilterLink(0);
    }
    void clearExcitationFilterLink(const ::Ice::Context& __ctx)
    {
        clearExcitationFilterLink(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_clearExcitationFilterLink(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_clearExcitationFilterLink(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_clearExcitationFilterLink(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_clearExcitationFilterLink(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_clearExcitationFilterLink(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_clearExcitationFilterLink(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_clearExcitationFilterLink(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_clearExcitationFilterLink(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_clearExcitationFilterLink()
    {
        return begin_clearExcitationFilterLink(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearExcitationFilterLink(const ::Ice::Context& __ctx)
    {
        return begin_clearExcitationFilterLink(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearExcitationFilterLink(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearExcitationFilterLink(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearExcitationFilterLink(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearExcitationFilterLink(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearExcitationFilterLink(const ::omero::model::Callback_LightPath_clearExcitationFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearExcitationFilterLink(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearExcitationFilterLink(const ::Ice::Context& __ctx, const ::omero::model::Callback_LightPath_clearExcitationFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearExcitationFilterLink(&__ctx, __del, __cookie);
    }

    void end_clearExcitationFilterLink(const ::Ice::AsyncResultPtr&);
    
private:

    void clearExcitationFilterLink(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_clearExcitationFilterLink(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reloadExcitationFilterLink(const ::omero::model::LightPathPtr& toCopy)
    {
        reloadExcitationFilterLink(toCopy, 0);
    }
    void reloadExcitationFilterLink(const ::omero::model::LightPathPtr& toCopy, const ::Ice::Context& __ctx)
    {
        reloadExcitationFilterLink(toCopy, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_reloadExcitationFilterLink(const ::omero::model::LightPathPtr& toCopy, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reloadExcitationFilterLink(toCopy, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_reloadExcitationFilterLink(const ::omero::model::LightPathPtr& toCopy, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reloadExcitationFilterLink(toCopy, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reloadExcitationFilterLink(const ::omero::model::LightPathPtr& toCopy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reloadExcitationFilterLink(toCopy, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reloadExcitationFilterLink(const ::omero::model::LightPathPtr& toCopy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reloadExcitationFilterLink(toCopy, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_reloadExcitationFilterLink(const ::omero::model::LightPathPtr& toCopy)
    {
        return begin_reloadExcitationFilterLink(toCopy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadExcitationFilterLink(const ::omero::model::LightPathPtr& toCopy, const ::Ice::Context& __ctx)
    {
        return begin_reloadExcitationFilterLink(toCopy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadExcitationFilterLink(const ::omero::model::LightPathPtr& toCopy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadExcitationFilterLink(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadExcitationFilterLink(const ::omero::model::LightPathPtr& toCopy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadExcitationFilterLink(toCopy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadExcitationFilterLink(const ::omero::model::LightPathPtr& toCopy, const ::omero::model::Callback_LightPath_reloadExcitationFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadExcitationFilterLink(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadExcitationFilterLink(const ::omero::model::LightPathPtr& toCopy, const ::Ice::Context& __ctx, const ::omero::model::Callback_LightPath_reloadExcitationFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadExcitationFilterLink(toCopy, &__ctx, __del, __cookie);
    }

    void end_reloadExcitationFilterLink(const ::Ice::AsyncResultPtr&);
    
private:

    void reloadExcitationFilterLink(const ::omero::model::LightPathPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reloadExcitationFilterLink(const ::omero::model::LightPathPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::LightPathExcitationFilterLinkPtr getLightPathExcitationFilterLink(::Ice::Int index)
    {
        return getLightPathExcitationFilterLink(index, 0);
    }
    ::omero::model::LightPathExcitationFilterLinkPtr getLightPathExcitationFilterLink(::Ice::Int index, const ::Ice::Context& __ctx)
    {
        return getLightPathExcitationFilterLink(index, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getLightPathExcitationFilterLink(::Ice::Int index, const ::IceInternal::Function<void (const ::omero::model::LightPathExcitationFilterLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getLightPathExcitationFilterLink(index, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getLightPathExcitationFilterLink(::Ice::Int index, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getLightPathExcitationFilterLink(index, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getLightPathExcitationFilterLink(::Ice::Int index, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::LightPathExcitationFilterLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getLightPathExcitationFilterLink(index, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getLightPathExcitationFilterLink(::Ice::Int index, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getLightPathExcitationFilterLink(index, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getLightPathExcitationFilterLink(::Ice::Int index, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::LightPathExcitationFilterLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::LightPathExcitationFilterLinkPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::LightPathPrx __proxy = ::omero::model::LightPathPrx::uncheckedCast(__result->getProxy());
                ::omero::model::LightPathExcitationFilterLinkPtr __ret;
                try
                {
                    __ret = __proxy->end_getLightPathExcitationFilterLink(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::LightPathExcitationFilterLinkPtr&)> _response;
        };
        return begin_getLightPathExcitationFilterLink(index, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getLightPathExcitationFilterLink(::Ice::Int index)
    {
        return begin_getLightPathExcitationFilterLink(index, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getLightPathExcitationFilterLink(::Ice::Int index, const ::Ice::Context& __ctx)
    {
        return begin_getLightPathExcitationFilterLink(index, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getLightPathExcitationFilterLink(::Ice::Int index, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getLightPathExcitationFilterLink(index, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getLightPathExcitationFilterLink(::Ice::Int index, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getLightPathExcitationFilterLink(index, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getLightPathExcitationFilterLink(::Ice::Int index, const ::omero::model::Callback_LightPath_getLightPathExcitationFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getLightPathExcitationFilterLink(index, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getLightPathExcitationFilterLink(::Ice::Int index, const ::Ice::Context& __ctx, const ::omero::model::Callback_LightPath_getLightPathExcitationFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getLightPathExcitationFilterLink(index, &__ctx, __del, __cookie);
    }

    ::omero::model::LightPathExcitationFilterLinkPtr end_getLightPathExcitationFilterLink(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::LightPathExcitationFilterLinkPtr getLightPathExcitationFilterLink(::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getLightPathExcitationFilterLink(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::LightPathExcitationFilterLinkPtr setLightPathExcitationFilterLink(::Ice::Int index, const ::omero::model::LightPathExcitationFilterLinkPtr& theElement)
    {
        return setLightPathExcitationFilterLink(index, theElement, 0);
    }
    ::omero::model::LightPathExcitationFilterLinkPtr setLightPathExcitationFilterLink(::Ice::Int index, const ::omero::model::LightPathExcitationFilterLinkPtr& theElement, const ::Ice::Context& __ctx)
    {
        return setLightPathExcitationFilterLink(index, theElement, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setLightPathExcitationFilterLink(::Ice::Int index, const ::omero::model::LightPathExcitationFilterLinkPtr& theElement, const ::IceInternal::Function<void (const ::omero::model::LightPathExcitationFilterLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setLightPathExcitationFilterLink(index, theElement, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setLightPathExcitationFilterLink(::Ice::Int index, const ::omero::model::LightPathExcitationFilterLinkPtr& theElement, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setLightPathExcitationFilterLink(index, theElement, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setLightPathExcitationFilterLink(::Ice::Int index, const ::omero::model::LightPathExcitationFilterLinkPtr& theElement, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::LightPathExcitationFilterLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setLightPathExcitationFilterLink(index, theElement, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setLightPathExcitationFilterLink(::Ice::Int index, const ::omero::model::LightPathExcitationFilterLinkPtr& theElement, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setLightPathExcitationFilterLink(index, theElement, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setLightPathExcitationFilterLink(::Ice::Int index, const ::omero::model::LightPathExcitationFilterLinkPtr& theElement, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::LightPathExcitationFilterLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::LightPathExcitationFilterLinkPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::LightPathPrx __proxy = ::omero::model::LightPathPrx::uncheckedCast(__result->getProxy());
                ::omero::model::LightPathExcitationFilterLinkPtr __ret;
                try
                {
                    __ret = __proxy->end_setLightPathExcitationFilterLink(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::LightPathExcitationFilterLinkPtr&)> _response;
        };
        return begin_setLightPathExcitationFilterLink(index, theElement, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setLightPathExcitationFilterLink(::Ice::Int index, const ::omero::model::LightPathExcitationFilterLinkPtr& theElement)
    {
        return begin_setLightPathExcitationFilterLink(index, theElement, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setLightPathExcitationFilterLink(::Ice::Int index, const ::omero::model::LightPathExcitationFilterLinkPtr& theElement, const ::Ice::Context& __ctx)
    {
        return begin_setLightPathExcitationFilterLink(index, theElement, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setLightPathExcitationFilterLink(::Ice::Int index, const ::omero::model::LightPathExcitationFilterLinkPtr& theElement, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setLightPathExcitationFilterLink(index, theElement, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setLightPathExcitationFilterLink(::Ice::Int index, const ::omero::model::LightPathExcitationFilterLinkPtr& theElement, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setLightPathExcitationFilterLink(index, theElement, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setLightPathExcitationFilterLink(::Ice::Int index, const ::omero::model::LightPathExcitationFilterLinkPtr& theElement, const ::omero::model::Callback_LightPath_setLightPathExcitationFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setLightPathExcitationFilterLink(index, theElement, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setLightPathExcitationFilterLink(::Ice::Int index, const ::omero::model::LightPathExcitationFilterLinkPtr& theElement, const ::Ice::Context& __ctx, const ::omero::model::Callback_LightPath_setLightPathExcitationFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setLightPathExcitationFilterLink(index, theElement, &__ctx, __del, __cookie);
    }

    ::omero::model::LightPathExcitationFilterLinkPtr end_setLightPathExcitationFilterLink(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::LightPathExcitationFilterLinkPtr setLightPathExcitationFilterLink(::Ice::Int, const ::omero::model::LightPathExcitationFilterLinkPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setLightPathExcitationFilterLink(::Ice::Int, const ::omero::model::LightPathExcitationFilterLinkPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::LightPathExcitationFilterLinkPtr getPrimaryLightPathExcitationFilterLink()
    {
        return getPrimaryLightPathExcitationFilterLink(0);
    }
    ::omero::model::LightPathExcitationFilterLinkPtr getPrimaryLightPathExcitationFilterLink(const ::Ice::Context& __ctx)
    {
        return getPrimaryLightPathExcitationFilterLink(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getPrimaryLightPathExcitationFilterLink(const ::IceInternal::Function<void (const ::omero::model::LightPathExcitationFilterLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPrimaryLightPathExcitationFilterLink(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPrimaryLightPathExcitationFilterLink(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPrimaryLightPathExcitationFilterLink(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getPrimaryLightPathExcitationFilterLink(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::LightPathExcitationFilterLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPrimaryLightPathExcitationFilterLink(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPrimaryLightPathExcitationFilterLink(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPrimaryLightPathExcitationFilterLink(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getPrimaryLightPathExcitationFilterLink(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::LightPathExcitationFilterLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::LightPathExcitationFilterLinkPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::LightPathPrx __proxy = ::omero::model::LightPathPrx::uncheckedCast(__result->getProxy());
                ::omero::model::LightPathExcitationFilterLinkPtr __ret;
                try
                {
                    __ret = __proxy->end_getPrimaryLightPathExcitationFilterLink(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::LightPathExcitationFilterLinkPtr&)> _response;
        };
        return begin_getPrimaryLightPathExcitationFilterLink(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getPrimaryLightPathExcitationFilterLink()
    {
        return begin_getPrimaryLightPathExcitationFilterLink(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPrimaryLightPathExcitationFilterLink(const ::Ice::Context& __ctx)
    {
        return begin_getPrimaryLightPathExcitationFilterLink(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPrimaryLightPathExcitationFilterLink(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPrimaryLightPathExcitationFilterLink(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPrimaryLightPathExcitationFilterLink(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPrimaryLightPathExcitationFilterLink(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPrimaryLightPathExcitationFilterLink(const ::omero::model::Callback_LightPath_getPrimaryLightPathExcitationFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPrimaryLightPathExcitationFilterLink(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPrimaryLightPathExcitationFilterLink(const ::Ice::Context& __ctx, const ::omero::model::Callback_LightPath_getPrimaryLightPathExcitationFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPrimaryLightPathExcitationFilterLink(&__ctx, __del, __cookie);
    }

    ::omero::model::LightPathExcitationFilterLinkPtr end_getPrimaryLightPathExcitationFilterLink(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::LightPathExcitationFilterLinkPtr getPrimaryLightPathExcitationFilterLink(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getPrimaryLightPathExcitationFilterLink(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::LightPathExcitationFilterLinkPtr setPrimaryLightPathExcitationFilterLink(const ::omero::model::LightPathExcitationFilterLinkPtr& theElement)
    {
        return setPrimaryLightPathExcitationFilterLink(theElement, 0);
    }
    ::omero::model::LightPathExcitationFilterLinkPtr setPrimaryLightPathExcitationFilterLink(const ::omero::model::LightPathExcitationFilterLinkPtr& theElement, const ::Ice::Context& __ctx)
    {
        return setPrimaryLightPathExcitationFilterLink(theElement, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setPrimaryLightPathExcitationFilterLink(const ::omero::model::LightPathExcitationFilterLinkPtr& theElement, const ::IceInternal::Function<void (const ::omero::model::LightPathExcitationFilterLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setPrimaryLightPathExcitationFilterLink(theElement, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setPrimaryLightPathExcitationFilterLink(const ::omero::model::LightPathExcitationFilterLinkPtr& theElement, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPrimaryLightPathExcitationFilterLink(theElement, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setPrimaryLightPathExcitationFilterLink(const ::omero::model::LightPathExcitationFilterLinkPtr& theElement, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::LightPathExcitationFilterLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setPrimaryLightPathExcitationFilterLink(theElement, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setPrimaryLightPathExcitationFilterLink(const ::omero::model::LightPathExcitationFilterLinkPtr& theElement, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPrimaryLightPathExcitationFilterLink(theElement, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setPrimaryLightPathExcitationFilterLink(const ::omero::model::LightPathExcitationFilterLinkPtr& theElement, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::LightPathExcitationFilterLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::LightPathExcitationFilterLinkPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::LightPathPrx __proxy = ::omero::model::LightPathPrx::uncheckedCast(__result->getProxy());
                ::omero::model::LightPathExcitationFilterLinkPtr __ret;
                try
                {
                    __ret = __proxy->end_setPrimaryLightPathExcitationFilterLink(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::LightPathExcitationFilterLinkPtr&)> _response;
        };
        return begin_setPrimaryLightPathExcitationFilterLink(theElement, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setPrimaryLightPathExcitationFilterLink(const ::omero::model::LightPathExcitationFilterLinkPtr& theElement)
    {
        return begin_setPrimaryLightPathExcitationFilterLink(theElement, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPrimaryLightPathExcitationFilterLink(const ::omero::model::LightPathExcitationFilterLinkPtr& theElement, const ::Ice::Context& __ctx)
    {
        return begin_setPrimaryLightPathExcitationFilterLink(theElement, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPrimaryLightPathExcitationFilterLink(const ::omero::model::LightPathExcitationFilterLinkPtr& theElement, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPrimaryLightPathExcitationFilterLink(theElement, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPrimaryLightPathExcitationFilterLink(const ::omero::model::LightPathExcitationFilterLinkPtr& theElement, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPrimaryLightPathExcitationFilterLink(theElement, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPrimaryLightPathExcitationFilterLink(const ::omero::model::LightPathExcitationFilterLinkPtr& theElement, const ::omero::model::Callback_LightPath_setPrimaryLightPathExcitationFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPrimaryLightPathExcitationFilterLink(theElement, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPrimaryLightPathExcitationFilterLink(const ::omero::model::LightPathExcitationFilterLinkPtr& theElement, const ::Ice::Context& __ctx, const ::omero::model::Callback_LightPath_setPrimaryLightPathExcitationFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPrimaryLightPathExcitationFilterLink(theElement, &__ctx, __del, __cookie);
    }

    ::omero::model::LightPathExcitationFilterLinkPtr end_setPrimaryLightPathExcitationFilterLink(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::LightPathExcitationFilterLinkPtr setPrimaryLightPathExcitationFilterLink(const ::omero::model::LightPathExcitationFilterLinkPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setPrimaryLightPathExcitationFilterLink(const ::omero::model::LightPathExcitationFilterLinkPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::sys::CountMap getExcitationFilterLinkCountPerOwner()
    {
        return getExcitationFilterLinkCountPerOwner(0);
    }
    ::omero::sys::CountMap getExcitationFilterLinkCountPerOwner(const ::Ice::Context& __ctx)
    {
        return getExcitationFilterLinkCountPerOwner(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getExcitationFilterLinkCountPerOwner(const ::IceInternal::Function<void (const ::omero::sys::CountMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getExcitationFilterLinkCountPerOwner(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getExcitationFilterLinkCountPerOwner(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getExcitationFilterLinkCountPerOwner(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getExcitationFilterLinkCountPerOwner(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::sys::CountMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getExcitationFilterLinkCountPerOwner(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getExcitationFilterLinkCountPerOwner(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getExcitationFilterLinkCountPerOwner(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getExcitationFilterLinkCountPerOwner(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::sys::CountMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::sys::CountMap&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::LightPathPrx __proxy = ::omero::model::LightPathPrx::uncheckedCast(__result->getProxy());
                ::omero::sys::CountMap __ret;
                try
                {
                    __ret = __proxy->end_getExcitationFilterLinkCountPerOwner(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::sys::CountMap&)> _response;
        };
        return begin_getExcitationFilterLinkCountPerOwner(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getExcitationFilterLinkCountPerOwner()
    {
        return begin_getExcitationFilterLinkCountPerOwner(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getExcitationFilterLinkCountPerOwner(const ::Ice::Context& __ctx)
    {
        return begin_getExcitationFilterLinkCountPerOwner(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getExcitationFilterLinkCountPerOwner(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getExcitationFilterLinkCountPerOwner(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getExcitationFilterLinkCountPerOwner(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getExcitationFilterLinkCountPerOwner(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getExcitationFilterLinkCountPerOwner(const ::omero::model::Callback_LightPath_getExcitationFilterLinkCountPerOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getExcitationFilterLinkCountPerOwner(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getExcitationFilterLinkCountPerOwner(const ::Ice::Context& __ctx, const ::omero::model::Callback_LightPath_getExcitationFilterLinkCountPerOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getExcitationFilterLinkCountPerOwner(&__ctx, __del, __cookie);
    }

    ::omero::sys::CountMap end_getExcitationFilterLinkCountPerOwner(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::sys::CountMap getExcitationFilterLinkCountPerOwner(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getExcitationFilterLinkCountPerOwner(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::LightPathExcitationFilterLinkPtr linkExcitationFilter(const ::omero::model::FilterPtr& addition)
    {
        return linkExcitationFilter(addition, 0);
    }
    ::omero::model::LightPathExcitationFilterLinkPtr linkExcitationFilter(const ::omero::model::FilterPtr& addition, const ::Ice::Context& __ctx)
    {
        return linkExcitationFilter(addition, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_linkExcitationFilter(const ::omero::model::FilterPtr& addition, const ::IceInternal::Function<void (const ::omero::model::LightPathExcitationFilterLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_linkExcitationFilter(addition, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_linkExcitationFilter(const ::omero::model::FilterPtr& addition, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_linkExcitationFilter(addition, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_linkExcitationFilter(const ::omero::model::FilterPtr& addition, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::LightPathExcitationFilterLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_linkExcitationFilter(addition, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_linkExcitationFilter(const ::omero::model::FilterPtr& addition, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_linkExcitationFilter(addition, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_linkExcitationFilter(const ::omero::model::FilterPtr& addition, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::LightPathExcitationFilterLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::LightPathExcitationFilterLinkPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::LightPathPrx __proxy = ::omero::model::LightPathPrx::uncheckedCast(__result->getProxy());
                ::omero::model::LightPathExcitationFilterLinkPtr __ret;
                try
                {
                    __ret = __proxy->end_linkExcitationFilter(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::LightPathExcitationFilterLinkPtr&)> _response;
        };
        return begin_linkExcitationFilter(addition, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_linkExcitationFilter(const ::omero::model::FilterPtr& addition)
    {
        return begin_linkExcitationFilter(addition, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkExcitationFilter(const ::omero::model::FilterPtr& addition, const ::Ice::Context& __ctx)
    {
        return begin_linkExcitationFilter(addition, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkExcitationFilter(const ::omero::model::FilterPtr& addition, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkExcitationFilter(addition, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkExcitationFilter(const ::omero::model::FilterPtr& addition, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkExcitationFilter(addition, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkExcitationFilter(const ::omero::model::FilterPtr& addition, const ::omero::model::Callback_LightPath_linkExcitationFilterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkExcitationFilter(addition, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkExcitationFilter(const ::omero::model::FilterPtr& addition, const ::Ice::Context& __ctx, const ::omero::model::Callback_LightPath_linkExcitationFilterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkExcitationFilter(addition, &__ctx, __del, __cookie);
    }

    ::omero::model::LightPathExcitationFilterLinkPtr end_linkExcitationFilter(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::LightPathExcitationFilterLinkPtr linkExcitationFilter(const ::omero::model::FilterPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_linkExcitationFilter(const ::omero::model::FilterPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addLightPathExcitationFilterLinkToBoth(const ::omero::model::LightPathExcitationFilterLinkPtr& link, bool bothSides)
    {
        addLightPathExcitationFilterLinkToBoth(link, bothSides, 0);
    }
    void addLightPathExcitationFilterLinkToBoth(const ::omero::model::LightPathExcitationFilterLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        addLightPathExcitationFilterLinkToBoth(link, bothSides, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addLightPathExcitationFilterLinkToBoth(const ::omero::model::LightPathExcitationFilterLinkPtr& link, bool bothSides, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addLightPathExcitationFilterLinkToBoth(link, bothSides, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addLightPathExcitationFilterLinkToBoth(const ::omero::model::LightPathExcitationFilterLinkPtr& link, bool bothSides, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addLightPathExcitationFilterLinkToBoth(link, bothSides, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addLightPathExcitationFilterLinkToBoth(const ::omero::model::LightPathExcitationFilterLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addLightPathExcitationFilterLinkToBoth(link, bothSides, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addLightPathExcitationFilterLinkToBoth(const ::omero::model::LightPathExcitationFilterLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addLightPathExcitationFilterLinkToBoth(link, bothSides, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addLightPathExcitationFilterLinkToBoth(const ::omero::model::LightPathExcitationFilterLinkPtr& link, bool bothSides)
    {
        return begin_addLightPathExcitationFilterLinkToBoth(link, bothSides, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addLightPathExcitationFilterLinkToBoth(const ::omero::model::LightPathExcitationFilterLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        return begin_addLightPathExcitationFilterLinkToBoth(link, bothSides, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addLightPathExcitationFilterLinkToBoth(const ::omero::model::LightPathExcitationFilterLinkPtr& link, bool bothSides, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addLightPathExcitationFilterLinkToBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addLightPathExcitationFilterLinkToBoth(const ::omero::model::LightPathExcitationFilterLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addLightPathExcitationFilterLinkToBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addLightPathExcitationFilterLinkToBoth(const ::omero::model::LightPathExcitationFilterLinkPtr& link, bool bothSides, const ::omero::model::Callback_LightPath_addLightPathExcitationFilterLinkToBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addLightPathExcitationFilterLinkToBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addLightPathExcitationFilterLinkToBoth(const ::omero::model::LightPathExcitationFilterLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::omero::model::Callback_LightPath_addLightPathExcitationFilterLinkToBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addLightPathExcitationFilterLinkToBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    void end_addLightPathExcitationFilterLinkToBoth(const ::Ice::AsyncResultPtr&);
    
private:

    void addLightPathExcitationFilterLinkToBoth(const ::omero::model::LightPathExcitationFilterLinkPtr&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addLightPathExcitationFilterLinkToBoth(const ::omero::model::LightPathExcitationFilterLinkPtr&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::LightPathExcitationFilterLinkSeq findLightPathExcitationFilterLink(const ::omero::model::FilterPtr& removal)
    {
        return findLightPathExcitationFilterLink(removal, 0);
    }
    ::omero::model::LightPathExcitationFilterLinkSeq findLightPathExcitationFilterLink(const ::omero::model::FilterPtr& removal, const ::Ice::Context& __ctx)
    {
        return findLightPathExcitationFilterLink(removal, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_findLightPathExcitationFilterLink(const ::omero::model::FilterPtr& removal, const ::IceInternal::Function<void (const ::omero::model::LightPathExcitationFilterLinkSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_findLightPathExcitationFilterLink(removal, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_findLightPathExcitationFilterLink(const ::omero::model::FilterPtr& removal, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_findLightPathExcitationFilterLink(removal, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_findLightPathExcitationFilterLink(const ::omero::model::FilterPtr& removal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::LightPathExcitationFilterLinkSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_findLightPathExcitationFilterLink(removal, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_findLightPathExcitationFilterLink(const ::omero::model::FilterPtr& removal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_findLightPathExcitationFilterLink(removal, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_findLightPathExcitationFilterLink(const ::omero::model::FilterPtr& removal, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::LightPathExcitationFilterLinkSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::LightPathExcitationFilterLinkSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::LightPathPrx __proxy = ::omero::model::LightPathPrx::uncheckedCast(__result->getProxy());
                ::omero::model::LightPathExcitationFilterLinkSeq __ret;
                try
                {
                    __ret = __proxy->end_findLightPathExcitationFilterLink(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::LightPathExcitationFilterLinkSeq&)> _response;
        };
        return begin_findLightPathExcitationFilterLink(removal, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_findLightPathExcitationFilterLink(const ::omero::model::FilterPtr& removal)
    {
        return begin_findLightPathExcitationFilterLink(removal, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findLightPathExcitationFilterLink(const ::omero::model::FilterPtr& removal, const ::Ice::Context& __ctx)
    {
        return begin_findLightPathExcitationFilterLink(removal, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findLightPathExcitationFilterLink(const ::omero::model::FilterPtr& removal, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findLightPathExcitationFilterLink(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findLightPathExcitationFilterLink(const ::omero::model::FilterPtr& removal, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findLightPathExcitationFilterLink(removal, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findLightPathExcitationFilterLink(const ::omero::model::FilterPtr& removal, const ::omero::model::Callback_LightPath_findLightPathExcitationFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findLightPathExcitationFilterLink(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findLightPathExcitationFilterLink(const ::omero::model::FilterPtr& removal, const ::Ice::Context& __ctx, const ::omero::model::Callback_LightPath_findLightPathExcitationFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findLightPathExcitationFilterLink(removal, &__ctx, __del, __cookie);
    }

    ::omero::model::LightPathExcitationFilterLinkSeq end_findLightPathExcitationFilterLink(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::LightPathExcitationFilterLinkSeq findLightPathExcitationFilterLink(const ::omero::model::FilterPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_findLightPathExcitationFilterLink(const ::omero::model::FilterPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unlinkExcitationFilter(const ::omero::model::FilterPtr& removal)
    {
        unlinkExcitationFilter(removal, 0);
    }
    void unlinkExcitationFilter(const ::omero::model::FilterPtr& removal, const ::Ice::Context& __ctx)
    {
        unlinkExcitationFilter(removal, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_unlinkExcitationFilter(const ::omero::model::FilterPtr& removal, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unlinkExcitationFilter(removal, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_unlinkExcitationFilter(const ::omero::model::FilterPtr& removal, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unlinkExcitationFilter(removal, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unlinkExcitationFilter(const ::omero::model::FilterPtr& removal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unlinkExcitationFilter(removal, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unlinkExcitationFilter(const ::omero::model::FilterPtr& removal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unlinkExcitationFilter(removal, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_unlinkExcitationFilter(const ::omero::model::FilterPtr& removal)
    {
        return begin_unlinkExcitationFilter(removal, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unlinkExcitationFilter(const ::omero::model::FilterPtr& removal, const ::Ice::Context& __ctx)
    {
        return begin_unlinkExcitationFilter(removal, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unlinkExcitationFilter(const ::omero::model::FilterPtr& removal, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkExcitationFilter(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkExcitationFilter(const ::omero::model::FilterPtr& removal, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkExcitationFilter(removal, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkExcitationFilter(const ::omero::model::FilterPtr& removal, const ::omero::model::Callback_LightPath_unlinkExcitationFilterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkExcitationFilter(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkExcitationFilter(const ::omero::model::FilterPtr& removal, const ::Ice::Context& __ctx, const ::omero::model::Callback_LightPath_unlinkExcitationFilterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkExcitationFilter(removal, &__ctx, __del, __cookie);
    }

    void end_unlinkExcitationFilter(const ::Ice::AsyncResultPtr&);
    
private:

    void unlinkExcitationFilter(const ::omero::model::FilterPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unlinkExcitationFilter(const ::omero::model::FilterPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeLightPathExcitationFilterLinkFromBoth(const ::omero::model::LightPathExcitationFilterLinkPtr& link, bool bothSides)
    {
        removeLightPathExcitationFilterLinkFromBoth(link, bothSides, 0);
    }
    void removeLightPathExcitationFilterLinkFromBoth(const ::omero::model::LightPathExcitationFilterLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        removeLightPathExcitationFilterLinkFromBoth(link, bothSides, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeLightPathExcitationFilterLinkFromBoth(const ::omero::model::LightPathExcitationFilterLinkPtr& link, bool bothSides, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeLightPathExcitationFilterLinkFromBoth(link, bothSides, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeLightPathExcitationFilterLinkFromBoth(const ::omero::model::LightPathExcitationFilterLinkPtr& link, bool bothSides, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeLightPathExcitationFilterLinkFromBoth(link, bothSides, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeLightPathExcitationFilterLinkFromBoth(const ::omero::model::LightPathExcitationFilterLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeLightPathExcitationFilterLinkFromBoth(link, bothSides, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeLightPathExcitationFilterLinkFromBoth(const ::omero::model::LightPathExcitationFilterLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeLightPathExcitationFilterLinkFromBoth(link, bothSides, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeLightPathExcitationFilterLinkFromBoth(const ::omero::model::LightPathExcitationFilterLinkPtr& link, bool bothSides)
    {
        return begin_removeLightPathExcitationFilterLinkFromBoth(link, bothSides, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeLightPathExcitationFilterLinkFromBoth(const ::omero::model::LightPathExcitationFilterLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        return begin_removeLightPathExcitationFilterLinkFromBoth(link, bothSides, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeLightPathExcitationFilterLinkFromBoth(const ::omero::model::LightPathExcitationFilterLinkPtr& link, bool bothSides, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeLightPathExcitationFilterLinkFromBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeLightPathExcitationFilterLinkFromBoth(const ::omero::model::LightPathExcitationFilterLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeLightPathExcitationFilterLinkFromBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeLightPathExcitationFilterLinkFromBoth(const ::omero::model::LightPathExcitationFilterLinkPtr& link, bool bothSides, const ::omero::model::Callback_LightPath_removeLightPathExcitationFilterLinkFromBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeLightPathExcitationFilterLinkFromBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeLightPathExcitationFilterLinkFromBoth(const ::omero::model::LightPathExcitationFilterLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::omero::model::Callback_LightPath_removeLightPathExcitationFilterLinkFromBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeLightPathExcitationFilterLinkFromBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    void end_removeLightPathExcitationFilterLinkFromBoth(const ::Ice::AsyncResultPtr&);
    
private:

    void removeLightPathExcitationFilterLinkFromBoth(const ::omero::model::LightPathExcitationFilterLinkPtr&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeLightPathExcitationFilterLinkFromBoth(const ::omero::model::LightPathExcitationFilterLinkPtr&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::LightPathLinkedExcitationFilterSeq linkedExcitationFilterList()
    {
        return linkedExcitationFilterList(0);
    }
    ::omero::model::LightPathLinkedExcitationFilterSeq linkedExcitationFilterList(const ::Ice::Context& __ctx)
    {
        return linkedExcitationFilterList(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_linkedExcitationFilterList(const ::IceInternal::Function<void (const ::omero::model::LightPathLinkedExcitationFilterSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_linkedExcitationFilterList(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_linkedExcitationFilterList(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_linkedExcitationFilterList(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_linkedExcitationFilterList(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::LightPathLinkedExcitationFilterSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_linkedExcitationFilterList(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_linkedExcitationFilterList(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_linkedExcitationFilterList(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_linkedExcitationFilterList(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::LightPathLinkedExcitationFilterSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::LightPathLinkedExcitationFilterSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::LightPathPrx __proxy = ::omero::model::LightPathPrx::uncheckedCast(__result->getProxy());
                ::omero::model::LightPathLinkedExcitationFilterSeq __ret;
                try
                {
                    __ret = __proxy->end_linkedExcitationFilterList(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::LightPathLinkedExcitationFilterSeq&)> _response;
        };
        return begin_linkedExcitationFilterList(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_linkedExcitationFilterList()
    {
        return begin_linkedExcitationFilterList(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkedExcitationFilterList(const ::Ice::Context& __ctx)
    {
        return begin_linkedExcitationFilterList(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkedExcitationFilterList(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedExcitationFilterList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedExcitationFilterList(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedExcitationFilterList(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedExcitationFilterList(const ::omero::model::Callback_LightPath_linkedExcitationFilterListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedExcitationFilterList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedExcitationFilterList(const ::Ice::Context& __ctx, const ::omero::model::Callback_LightPath_linkedExcitationFilterListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedExcitationFilterList(&__ctx, __del, __cookie);
    }

    ::omero::model::LightPathLinkedExcitationFilterSeq end_linkedExcitationFilterList(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::LightPathLinkedExcitationFilterSeq linkedExcitationFilterList(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_linkedExcitationFilterList(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::DichroicPtr getDichroic()
    {
        return getDichroic(0);
    }
    ::omero::model::DichroicPtr getDichroic(const ::Ice::Context& __ctx)
    {
        return getDichroic(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getDichroic(const ::IceInternal::Function<void (const ::omero::model::DichroicPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getDichroic(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getDichroic(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getDichroic(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getDichroic(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::DichroicPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getDichroic(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getDichroic(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getDichroic(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getDichroic(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::DichroicPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::DichroicPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::LightPathPrx __proxy = ::omero::model::LightPathPrx::uncheckedCast(__result->getProxy());
                ::omero::model::DichroicPtr __ret;
                try
                {
                    __ret = __proxy->end_getDichroic(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::DichroicPtr&)> _response;
        };
        return begin_getDichroic(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getDichroic()
    {
        return begin_getDichroic(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDichroic(const ::Ice::Context& __ctx)
    {
        return begin_getDichroic(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDichroic(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDichroic(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDichroic(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDichroic(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDichroic(const ::omero::model::Callback_LightPath_getDichroicPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDichroic(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDichroic(const ::Ice::Context& __ctx, const ::omero::model::Callback_LightPath_getDichroicPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDichroic(&__ctx, __del, __cookie);
    }

    ::omero::model::DichroicPtr end_getDichroic(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::DichroicPtr getDichroic(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getDichroic(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setDichroic(const ::omero::model::DichroicPtr& theDichroic)
    {
        setDichroic(theDichroic, 0);
    }
    void setDichroic(const ::omero::model::DichroicPtr& theDichroic, const ::Ice::Context& __ctx)
    {
        setDichroic(theDichroic, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setDichroic(const ::omero::model::DichroicPtr& theDichroic, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setDichroic(theDichroic, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setDichroic(const ::omero::model::DichroicPtr& theDichroic, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setDichroic(theDichroic, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setDichroic(const ::omero::model::DichroicPtr& theDichroic, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setDichroic(theDichroic, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setDichroic(const ::omero::model::DichroicPtr& theDichroic, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setDichroic(theDichroic, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setDichroic(const ::omero::model::DichroicPtr& theDichroic)
    {
        return begin_setDichroic(theDichroic, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setDichroic(const ::omero::model::DichroicPtr& theDichroic, const ::Ice::Context& __ctx)
    {
        return begin_setDichroic(theDichroic, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setDichroic(const ::omero::model::DichroicPtr& theDichroic, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDichroic(theDichroic, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDichroic(const ::omero::model::DichroicPtr& theDichroic, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDichroic(theDichroic, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDichroic(const ::omero::model::DichroicPtr& theDichroic, const ::omero::model::Callback_LightPath_setDichroicPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDichroic(theDichroic, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDichroic(const ::omero::model::DichroicPtr& theDichroic, const ::Ice::Context& __ctx, const ::omero::model::Callback_LightPath_setDichroicPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDichroic(theDichroic, &__ctx, __del, __cookie);
    }

    void end_setDichroic(const ::Ice::AsyncResultPtr&);
    
private:

    void setDichroic(const ::omero::model::DichroicPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setDichroic(const ::omero::model::DichroicPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unloadEmissionFilterLink()
    {
        unloadEmissionFilterLink(0);
    }
    void unloadEmissionFilterLink(const ::Ice::Context& __ctx)
    {
        unloadEmissionFilterLink(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_unloadEmissionFilterLink(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unloadEmissionFilterLink(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_unloadEmissionFilterLink(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unloadEmissionFilterLink(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unloadEmissionFilterLink(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unloadEmissionFilterLink(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unloadEmissionFilterLink(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unloadEmissionFilterLink(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_unloadEmissionFilterLink()
    {
        return begin_unloadEmissionFilterLink(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadEmissionFilterLink(const ::Ice::Context& __ctx)
    {
        return begin_unloadEmissionFilterLink(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadEmissionFilterLink(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadEmissionFilterLink(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadEmissionFilterLink(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadEmissionFilterLink(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadEmissionFilterLink(const ::omero::model::Callback_LightPath_unloadEmissionFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadEmissionFilterLink(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadEmissionFilterLink(const ::Ice::Context& __ctx, const ::omero::model::Callback_LightPath_unloadEmissionFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadEmissionFilterLink(&__ctx, __del, __cookie);
    }

    void end_unloadEmissionFilterLink(const ::Ice::AsyncResultPtr&);
    
private:

    void unloadEmissionFilterLink(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unloadEmissionFilterLink(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int sizeOfEmissionFilterLink()
    {
        return sizeOfEmissionFilterLink(0);
    }
    ::Ice::Int sizeOfEmissionFilterLink(const ::Ice::Context& __ctx)
    {
        return sizeOfEmissionFilterLink(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_sizeOfEmissionFilterLink(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sizeOfEmissionFilterLink(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfEmissionFilterLink(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sizeOfEmissionFilterLink(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfEmissionFilterLink(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sizeOfEmissionFilterLink(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfEmissionFilterLink(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sizeOfEmissionFilterLink(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_sizeOfEmissionFilterLink(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::LightPathPrx __proxy = ::omero::model::LightPathPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_sizeOfEmissionFilterLink(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_sizeOfEmissionFilterLink(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_sizeOfEmissionFilterLink()
    {
        return begin_sizeOfEmissionFilterLink(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfEmissionFilterLink(const ::Ice::Context& __ctx)
    {
        return begin_sizeOfEmissionFilterLink(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfEmissionFilterLink(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfEmissionFilterLink(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfEmissionFilterLink(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfEmissionFilterLink(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfEmissionFilterLink(const ::omero::model::Callback_LightPath_sizeOfEmissionFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfEmissionFilterLink(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfEmissionFilterLink(const ::Ice::Context& __ctx, const ::omero::model::Callback_LightPath_sizeOfEmissionFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfEmissionFilterLink(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_sizeOfEmissionFilterLink(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int sizeOfEmissionFilterLink(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sizeOfEmissionFilterLink(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::LightPathEmissionFilterLinkSeq copyEmissionFilterLink()
    {
        return copyEmissionFilterLink(0);
    }
    ::omero::model::LightPathEmissionFilterLinkSeq copyEmissionFilterLink(const ::Ice::Context& __ctx)
    {
        return copyEmissionFilterLink(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_copyEmissionFilterLink(const ::IceInternal::Function<void (const ::omero::model::LightPathEmissionFilterLinkSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_copyEmissionFilterLink(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_copyEmissionFilterLink(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_copyEmissionFilterLink(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_copyEmissionFilterLink(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::LightPathEmissionFilterLinkSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_copyEmissionFilterLink(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_copyEmissionFilterLink(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_copyEmissionFilterLink(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_copyEmissionFilterLink(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::LightPathEmissionFilterLinkSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::LightPathEmissionFilterLinkSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::LightPathPrx __proxy = ::omero::model::LightPathPrx::uncheckedCast(__result->getProxy());
                ::omero::model::LightPathEmissionFilterLinkSeq __ret;
                try
                {
                    __ret = __proxy->end_copyEmissionFilterLink(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::LightPathEmissionFilterLinkSeq&)> _response;
        };
        return begin_copyEmissionFilterLink(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_copyEmissionFilterLink()
    {
        return begin_copyEmissionFilterLink(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyEmissionFilterLink(const ::Ice::Context& __ctx)
    {
        return begin_copyEmissionFilterLink(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyEmissionFilterLink(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyEmissionFilterLink(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyEmissionFilterLink(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyEmissionFilterLink(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyEmissionFilterLink(const ::omero::model::Callback_LightPath_copyEmissionFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyEmissionFilterLink(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyEmissionFilterLink(const ::Ice::Context& __ctx, const ::omero::model::Callback_LightPath_copyEmissionFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyEmissionFilterLink(&__ctx, __del, __cookie);
    }

    ::omero::model::LightPathEmissionFilterLinkSeq end_copyEmissionFilterLink(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::LightPathEmissionFilterLinkSeq copyEmissionFilterLink(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_copyEmissionFilterLink(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addLightPathEmissionFilterLink(const ::omero::model::LightPathEmissionFilterLinkPtr& target)
    {
        addLightPathEmissionFilterLink(target, 0);
    }
    void addLightPathEmissionFilterLink(const ::omero::model::LightPathEmissionFilterLinkPtr& target, const ::Ice::Context& __ctx)
    {
        addLightPathEmissionFilterLink(target, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addLightPathEmissionFilterLink(const ::omero::model::LightPathEmissionFilterLinkPtr& target, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addLightPathEmissionFilterLink(target, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addLightPathEmissionFilterLink(const ::omero::model::LightPathEmissionFilterLinkPtr& target, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addLightPathEmissionFilterLink(target, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addLightPathEmissionFilterLink(const ::omero::model::LightPathEmissionFilterLinkPtr& target, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addLightPathEmissionFilterLink(target, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addLightPathEmissionFilterLink(const ::omero::model::LightPathEmissionFilterLinkPtr& target, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addLightPathEmissionFilterLink(target, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addLightPathEmissionFilterLink(const ::omero::model::LightPathEmissionFilterLinkPtr& target)
    {
        return begin_addLightPathEmissionFilterLink(target, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addLightPathEmissionFilterLink(const ::omero::model::LightPathEmissionFilterLinkPtr& target, const ::Ice::Context& __ctx)
    {
        return begin_addLightPathEmissionFilterLink(target, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addLightPathEmissionFilterLink(const ::omero::model::LightPathEmissionFilterLinkPtr& target, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addLightPathEmissionFilterLink(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addLightPathEmissionFilterLink(const ::omero::model::LightPathEmissionFilterLinkPtr& target, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addLightPathEmissionFilterLink(target, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addLightPathEmissionFilterLink(const ::omero::model::LightPathEmissionFilterLinkPtr& target, const ::omero::model::Callback_LightPath_addLightPathEmissionFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addLightPathEmissionFilterLink(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addLightPathEmissionFilterLink(const ::omero::model::LightPathEmissionFilterLinkPtr& target, const ::Ice::Context& __ctx, const ::omero::model::Callback_LightPath_addLightPathEmissionFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addLightPathEmissionFilterLink(target, &__ctx, __del, __cookie);
    }

    void end_addLightPathEmissionFilterLink(const ::Ice::AsyncResultPtr&);
    
private:

    void addLightPathEmissionFilterLink(const ::omero::model::LightPathEmissionFilterLinkPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addLightPathEmissionFilterLink(const ::omero::model::LightPathEmissionFilterLinkPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addAllLightPathEmissionFilterLinkSet(const ::omero::model::LightPathEmissionFilterLinkSeq& targets)
    {
        addAllLightPathEmissionFilterLinkSet(targets, 0);
    }
    void addAllLightPathEmissionFilterLinkSet(const ::omero::model::LightPathEmissionFilterLinkSeq& targets, const ::Ice::Context& __ctx)
    {
        addAllLightPathEmissionFilterLinkSet(targets, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addAllLightPathEmissionFilterLinkSet(const ::omero::model::LightPathEmissionFilterLinkSeq& targets, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addAllLightPathEmissionFilterLinkSet(targets, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addAllLightPathEmissionFilterLinkSet(const ::omero::model::LightPathEmissionFilterLinkSeq& targets, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addAllLightPathEmissionFilterLinkSet(targets, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addAllLightPathEmissionFilterLinkSet(const ::omero::model::LightPathEmissionFilterLinkSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addAllLightPathEmissionFilterLinkSet(targets, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addAllLightPathEmissionFilterLinkSet(const ::omero::model::LightPathEmissionFilterLinkSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addAllLightPathEmissionFilterLinkSet(targets, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addAllLightPathEmissionFilterLinkSet(const ::omero::model::LightPathEmissionFilterLinkSeq& targets)
    {
        return begin_addAllLightPathEmissionFilterLinkSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllLightPathEmissionFilterLinkSet(const ::omero::model::LightPathEmissionFilterLinkSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_addAllLightPathEmissionFilterLinkSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllLightPathEmissionFilterLinkSet(const ::omero::model::LightPathEmissionFilterLinkSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllLightPathEmissionFilterLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllLightPathEmissionFilterLinkSet(const ::omero::model::LightPathEmissionFilterLinkSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllLightPathEmissionFilterLinkSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllLightPathEmissionFilterLinkSet(const ::omero::model::LightPathEmissionFilterLinkSeq& targets, const ::omero::model::Callback_LightPath_addAllLightPathEmissionFilterLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllLightPathEmissionFilterLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllLightPathEmissionFilterLinkSet(const ::omero::model::LightPathEmissionFilterLinkSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_LightPath_addAllLightPathEmissionFilterLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllLightPathEmissionFilterLinkSet(targets, &__ctx, __del, __cookie);
    }

    void end_addAllLightPathEmissionFilterLinkSet(const ::Ice::AsyncResultPtr&);
    
private:

    void addAllLightPathEmissionFilterLinkSet(const ::omero::model::LightPathEmissionFilterLinkSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addAllLightPathEmissionFilterLinkSet(const ::omero::model::LightPathEmissionFilterLinkSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeLightPathEmissionFilterLink(const ::omero::model::LightPathEmissionFilterLinkPtr& theTarget)
    {
        removeLightPathEmissionFilterLink(theTarget, 0);
    }
    void removeLightPathEmissionFilterLink(const ::omero::model::LightPathEmissionFilterLinkPtr& theTarget, const ::Ice::Context& __ctx)
    {
        removeLightPathEmissionFilterLink(theTarget, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeLightPathEmissionFilterLink(const ::omero::model::LightPathEmissionFilterLinkPtr& theTarget, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeLightPathEmissionFilterLink(theTarget, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeLightPathEmissionFilterLink(const ::omero::model::LightPathEmissionFilterLinkPtr& theTarget, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeLightPathEmissionFilterLink(theTarget, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeLightPathEmissionFilterLink(const ::omero::model::LightPathEmissionFilterLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeLightPathEmissionFilterLink(theTarget, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeLightPathEmissionFilterLink(const ::omero::model::LightPathEmissionFilterLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeLightPathEmissionFilterLink(theTarget, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeLightPathEmissionFilterLink(const ::omero::model::LightPathEmissionFilterLinkPtr& theTarget)
    {
        return begin_removeLightPathEmissionFilterLink(theTarget, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeLightPathEmissionFilterLink(const ::omero::model::LightPathEmissionFilterLinkPtr& theTarget, const ::Ice::Context& __ctx)
    {
        return begin_removeLightPathEmissionFilterLink(theTarget, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeLightPathEmissionFilterLink(const ::omero::model::LightPathEmissionFilterLinkPtr& theTarget, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeLightPathEmissionFilterLink(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeLightPathEmissionFilterLink(const ::omero::model::LightPathEmissionFilterLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeLightPathEmissionFilterLink(theTarget, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeLightPathEmissionFilterLink(const ::omero::model::LightPathEmissionFilterLinkPtr& theTarget, const ::omero::model::Callback_LightPath_removeLightPathEmissionFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeLightPathEmissionFilterLink(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeLightPathEmissionFilterLink(const ::omero::model::LightPathEmissionFilterLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::omero::model::Callback_LightPath_removeLightPathEmissionFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeLightPathEmissionFilterLink(theTarget, &__ctx, __del, __cookie);
    }

    void end_removeLightPathEmissionFilterLink(const ::Ice::AsyncResultPtr&);
    
private:

    void removeLightPathEmissionFilterLink(const ::omero::model::LightPathEmissionFilterLinkPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeLightPathEmissionFilterLink(const ::omero::model::LightPathEmissionFilterLinkPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeAllLightPathEmissionFilterLinkSet(const ::omero::model::LightPathEmissionFilterLinkSeq& targets)
    {
        removeAllLightPathEmissionFilterLinkSet(targets, 0);
    }
    void removeAllLightPathEmissionFilterLinkSet(const ::omero::model::LightPathEmissionFilterLinkSeq& targets, const ::Ice::Context& __ctx)
    {
        removeAllLightPathEmissionFilterLinkSet(targets, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeAllLightPathEmissionFilterLinkSet(const ::omero::model::LightPathEmissionFilterLinkSeq& targets, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeAllLightPathEmissionFilterLinkSet(targets, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeAllLightPathEmissionFilterLinkSet(const ::omero::model::LightPathEmissionFilterLinkSeq& targets, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeAllLightPathEmissionFilterLinkSet(targets, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeAllLightPathEmissionFilterLinkSet(const ::omero::model::LightPathEmissionFilterLinkSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeAllLightPathEmissionFilterLinkSet(targets, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeAllLightPathEmissionFilterLinkSet(const ::omero::model::LightPathEmissionFilterLinkSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeAllLightPathEmissionFilterLinkSet(targets, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeAllLightPathEmissionFilterLinkSet(const ::omero::model::LightPathEmissionFilterLinkSeq& targets)
    {
        return begin_removeAllLightPathEmissionFilterLinkSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllLightPathEmissionFilterLinkSet(const ::omero::model::LightPathEmissionFilterLinkSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_removeAllLightPathEmissionFilterLinkSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllLightPathEmissionFilterLinkSet(const ::omero::model::LightPathEmissionFilterLinkSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllLightPathEmissionFilterLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllLightPathEmissionFilterLinkSet(const ::omero::model::LightPathEmissionFilterLinkSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllLightPathEmissionFilterLinkSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllLightPathEmissionFilterLinkSet(const ::omero::model::LightPathEmissionFilterLinkSeq& targets, const ::omero::model::Callback_LightPath_removeAllLightPathEmissionFilterLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllLightPathEmissionFilterLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllLightPathEmissionFilterLinkSet(const ::omero::model::LightPathEmissionFilterLinkSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_LightPath_removeAllLightPathEmissionFilterLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllLightPathEmissionFilterLinkSet(targets, &__ctx, __del, __cookie);
    }

    void end_removeAllLightPathEmissionFilterLinkSet(const ::Ice::AsyncResultPtr&);
    
private:

    void removeAllLightPathEmissionFilterLinkSet(const ::omero::model::LightPathEmissionFilterLinkSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeAllLightPathEmissionFilterLinkSet(const ::omero::model::LightPathEmissionFilterLinkSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void clearEmissionFilterLink()
    {
        clearEmissionFilterLink(0);
    }
    void clearEmissionFilterLink(const ::Ice::Context& __ctx)
    {
        clearEmissionFilterLink(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_clearEmissionFilterLink(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_clearEmissionFilterLink(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_clearEmissionFilterLink(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_clearEmissionFilterLink(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_clearEmissionFilterLink(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_clearEmissionFilterLink(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_clearEmissionFilterLink(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_clearEmissionFilterLink(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_clearEmissionFilterLink()
    {
        return begin_clearEmissionFilterLink(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearEmissionFilterLink(const ::Ice::Context& __ctx)
    {
        return begin_clearEmissionFilterLink(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearEmissionFilterLink(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearEmissionFilterLink(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearEmissionFilterLink(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearEmissionFilterLink(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearEmissionFilterLink(const ::omero::model::Callback_LightPath_clearEmissionFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearEmissionFilterLink(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearEmissionFilterLink(const ::Ice::Context& __ctx, const ::omero::model::Callback_LightPath_clearEmissionFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearEmissionFilterLink(&__ctx, __del, __cookie);
    }

    void end_clearEmissionFilterLink(const ::Ice::AsyncResultPtr&);
    
private:

    void clearEmissionFilterLink(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_clearEmissionFilterLink(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reloadEmissionFilterLink(const ::omero::model::LightPathPtr& toCopy)
    {
        reloadEmissionFilterLink(toCopy, 0);
    }
    void reloadEmissionFilterLink(const ::omero::model::LightPathPtr& toCopy, const ::Ice::Context& __ctx)
    {
        reloadEmissionFilterLink(toCopy, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_reloadEmissionFilterLink(const ::omero::model::LightPathPtr& toCopy, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reloadEmissionFilterLink(toCopy, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_reloadEmissionFilterLink(const ::omero::model::LightPathPtr& toCopy, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reloadEmissionFilterLink(toCopy, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reloadEmissionFilterLink(const ::omero::model::LightPathPtr& toCopy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reloadEmissionFilterLink(toCopy, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reloadEmissionFilterLink(const ::omero::model::LightPathPtr& toCopy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reloadEmissionFilterLink(toCopy, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_reloadEmissionFilterLink(const ::omero::model::LightPathPtr& toCopy)
    {
        return begin_reloadEmissionFilterLink(toCopy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadEmissionFilterLink(const ::omero::model::LightPathPtr& toCopy, const ::Ice::Context& __ctx)
    {
        return begin_reloadEmissionFilterLink(toCopy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadEmissionFilterLink(const ::omero::model::LightPathPtr& toCopy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadEmissionFilterLink(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadEmissionFilterLink(const ::omero::model::LightPathPtr& toCopy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadEmissionFilterLink(toCopy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadEmissionFilterLink(const ::omero::model::LightPathPtr& toCopy, const ::omero::model::Callback_LightPath_reloadEmissionFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadEmissionFilterLink(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadEmissionFilterLink(const ::omero::model::LightPathPtr& toCopy, const ::Ice::Context& __ctx, const ::omero::model::Callback_LightPath_reloadEmissionFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadEmissionFilterLink(toCopy, &__ctx, __del, __cookie);
    }

    void end_reloadEmissionFilterLink(const ::Ice::AsyncResultPtr&);
    
private:

    void reloadEmissionFilterLink(const ::omero::model::LightPathPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reloadEmissionFilterLink(const ::omero::model::LightPathPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::sys::CountMap getEmissionFilterLinkCountPerOwner()
    {
        return getEmissionFilterLinkCountPerOwner(0);
    }
    ::omero::sys::CountMap getEmissionFilterLinkCountPerOwner(const ::Ice::Context& __ctx)
    {
        return getEmissionFilterLinkCountPerOwner(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getEmissionFilterLinkCountPerOwner(const ::IceInternal::Function<void (const ::omero::sys::CountMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getEmissionFilterLinkCountPerOwner(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getEmissionFilterLinkCountPerOwner(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getEmissionFilterLinkCountPerOwner(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getEmissionFilterLinkCountPerOwner(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::sys::CountMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getEmissionFilterLinkCountPerOwner(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getEmissionFilterLinkCountPerOwner(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getEmissionFilterLinkCountPerOwner(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getEmissionFilterLinkCountPerOwner(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::sys::CountMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::sys::CountMap&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::LightPathPrx __proxy = ::omero::model::LightPathPrx::uncheckedCast(__result->getProxy());
                ::omero::sys::CountMap __ret;
                try
                {
                    __ret = __proxy->end_getEmissionFilterLinkCountPerOwner(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::sys::CountMap&)> _response;
        };
        return begin_getEmissionFilterLinkCountPerOwner(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getEmissionFilterLinkCountPerOwner()
    {
        return begin_getEmissionFilterLinkCountPerOwner(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getEmissionFilterLinkCountPerOwner(const ::Ice::Context& __ctx)
    {
        return begin_getEmissionFilterLinkCountPerOwner(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getEmissionFilterLinkCountPerOwner(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getEmissionFilterLinkCountPerOwner(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getEmissionFilterLinkCountPerOwner(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getEmissionFilterLinkCountPerOwner(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getEmissionFilterLinkCountPerOwner(const ::omero::model::Callback_LightPath_getEmissionFilterLinkCountPerOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getEmissionFilterLinkCountPerOwner(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getEmissionFilterLinkCountPerOwner(const ::Ice::Context& __ctx, const ::omero::model::Callback_LightPath_getEmissionFilterLinkCountPerOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getEmissionFilterLinkCountPerOwner(&__ctx, __del, __cookie);
    }

    ::omero::sys::CountMap end_getEmissionFilterLinkCountPerOwner(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::sys::CountMap getEmissionFilterLinkCountPerOwner(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getEmissionFilterLinkCountPerOwner(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::LightPathEmissionFilterLinkPtr linkEmissionFilter(const ::omero::model::FilterPtr& addition)
    {
        return linkEmissionFilter(addition, 0);
    }
    ::omero::model::LightPathEmissionFilterLinkPtr linkEmissionFilter(const ::omero::model::FilterPtr& addition, const ::Ice::Context& __ctx)
    {
        return linkEmissionFilter(addition, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_linkEmissionFilter(const ::omero::model::FilterPtr& addition, const ::IceInternal::Function<void (const ::omero::model::LightPathEmissionFilterLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_linkEmissionFilter(addition, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_linkEmissionFilter(const ::omero::model::FilterPtr& addition, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_linkEmissionFilter(addition, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_linkEmissionFilter(const ::omero::model::FilterPtr& addition, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::LightPathEmissionFilterLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_linkEmissionFilter(addition, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_linkEmissionFilter(const ::omero::model::FilterPtr& addition, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_linkEmissionFilter(addition, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_linkEmissionFilter(const ::omero::model::FilterPtr& addition, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::LightPathEmissionFilterLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::LightPathEmissionFilterLinkPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::LightPathPrx __proxy = ::omero::model::LightPathPrx::uncheckedCast(__result->getProxy());
                ::omero::model::LightPathEmissionFilterLinkPtr __ret;
                try
                {
                    __ret = __proxy->end_linkEmissionFilter(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::LightPathEmissionFilterLinkPtr&)> _response;
        };
        return begin_linkEmissionFilter(addition, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_linkEmissionFilter(const ::omero::model::FilterPtr& addition)
    {
        return begin_linkEmissionFilter(addition, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkEmissionFilter(const ::omero::model::FilterPtr& addition, const ::Ice::Context& __ctx)
    {
        return begin_linkEmissionFilter(addition, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkEmissionFilter(const ::omero::model::FilterPtr& addition, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkEmissionFilter(addition, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkEmissionFilter(const ::omero::model::FilterPtr& addition, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkEmissionFilter(addition, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkEmissionFilter(const ::omero::model::FilterPtr& addition, const ::omero::model::Callback_LightPath_linkEmissionFilterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkEmissionFilter(addition, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkEmissionFilter(const ::omero::model::FilterPtr& addition, const ::Ice::Context& __ctx, const ::omero::model::Callback_LightPath_linkEmissionFilterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkEmissionFilter(addition, &__ctx, __del, __cookie);
    }

    ::omero::model::LightPathEmissionFilterLinkPtr end_linkEmissionFilter(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::LightPathEmissionFilterLinkPtr linkEmissionFilter(const ::omero::model::FilterPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_linkEmissionFilter(const ::omero::model::FilterPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addLightPathEmissionFilterLinkToBoth(const ::omero::model::LightPathEmissionFilterLinkPtr& link, bool bothSides)
    {
        addLightPathEmissionFilterLinkToBoth(link, bothSides, 0);
    }
    void addLightPathEmissionFilterLinkToBoth(const ::omero::model::LightPathEmissionFilterLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        addLightPathEmissionFilterLinkToBoth(link, bothSides, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addLightPathEmissionFilterLinkToBoth(const ::omero::model::LightPathEmissionFilterLinkPtr& link, bool bothSides, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addLightPathEmissionFilterLinkToBoth(link, bothSides, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addLightPathEmissionFilterLinkToBoth(const ::omero::model::LightPathEmissionFilterLinkPtr& link, bool bothSides, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addLightPathEmissionFilterLinkToBoth(link, bothSides, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addLightPathEmissionFilterLinkToBoth(const ::omero::model::LightPathEmissionFilterLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addLightPathEmissionFilterLinkToBoth(link, bothSides, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addLightPathEmissionFilterLinkToBoth(const ::omero::model::LightPathEmissionFilterLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addLightPathEmissionFilterLinkToBoth(link, bothSides, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addLightPathEmissionFilterLinkToBoth(const ::omero::model::LightPathEmissionFilterLinkPtr& link, bool bothSides)
    {
        return begin_addLightPathEmissionFilterLinkToBoth(link, bothSides, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addLightPathEmissionFilterLinkToBoth(const ::omero::model::LightPathEmissionFilterLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        return begin_addLightPathEmissionFilterLinkToBoth(link, bothSides, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addLightPathEmissionFilterLinkToBoth(const ::omero::model::LightPathEmissionFilterLinkPtr& link, bool bothSides, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addLightPathEmissionFilterLinkToBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addLightPathEmissionFilterLinkToBoth(const ::omero::model::LightPathEmissionFilterLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addLightPathEmissionFilterLinkToBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addLightPathEmissionFilterLinkToBoth(const ::omero::model::LightPathEmissionFilterLinkPtr& link, bool bothSides, const ::omero::model::Callback_LightPath_addLightPathEmissionFilterLinkToBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addLightPathEmissionFilterLinkToBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addLightPathEmissionFilterLinkToBoth(const ::omero::model::LightPathEmissionFilterLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::omero::model::Callback_LightPath_addLightPathEmissionFilterLinkToBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addLightPathEmissionFilterLinkToBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    void end_addLightPathEmissionFilterLinkToBoth(const ::Ice::AsyncResultPtr&);
    
private:

    void addLightPathEmissionFilterLinkToBoth(const ::omero::model::LightPathEmissionFilterLinkPtr&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addLightPathEmissionFilterLinkToBoth(const ::omero::model::LightPathEmissionFilterLinkPtr&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::LightPathEmissionFilterLinkSeq findLightPathEmissionFilterLink(const ::omero::model::FilterPtr& removal)
    {
        return findLightPathEmissionFilterLink(removal, 0);
    }
    ::omero::model::LightPathEmissionFilterLinkSeq findLightPathEmissionFilterLink(const ::omero::model::FilterPtr& removal, const ::Ice::Context& __ctx)
    {
        return findLightPathEmissionFilterLink(removal, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_findLightPathEmissionFilterLink(const ::omero::model::FilterPtr& removal, const ::IceInternal::Function<void (const ::omero::model::LightPathEmissionFilterLinkSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_findLightPathEmissionFilterLink(removal, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_findLightPathEmissionFilterLink(const ::omero::model::FilterPtr& removal, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_findLightPathEmissionFilterLink(removal, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_findLightPathEmissionFilterLink(const ::omero::model::FilterPtr& removal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::LightPathEmissionFilterLinkSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_findLightPathEmissionFilterLink(removal, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_findLightPathEmissionFilterLink(const ::omero::model::FilterPtr& removal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_findLightPathEmissionFilterLink(removal, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_findLightPathEmissionFilterLink(const ::omero::model::FilterPtr& removal, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::LightPathEmissionFilterLinkSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::LightPathEmissionFilterLinkSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::LightPathPrx __proxy = ::omero::model::LightPathPrx::uncheckedCast(__result->getProxy());
                ::omero::model::LightPathEmissionFilterLinkSeq __ret;
                try
                {
                    __ret = __proxy->end_findLightPathEmissionFilterLink(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::LightPathEmissionFilterLinkSeq&)> _response;
        };
        return begin_findLightPathEmissionFilterLink(removal, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_findLightPathEmissionFilterLink(const ::omero::model::FilterPtr& removal)
    {
        return begin_findLightPathEmissionFilterLink(removal, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findLightPathEmissionFilterLink(const ::omero::model::FilterPtr& removal, const ::Ice::Context& __ctx)
    {
        return begin_findLightPathEmissionFilterLink(removal, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findLightPathEmissionFilterLink(const ::omero::model::FilterPtr& removal, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findLightPathEmissionFilterLink(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findLightPathEmissionFilterLink(const ::omero::model::FilterPtr& removal, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findLightPathEmissionFilterLink(removal, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findLightPathEmissionFilterLink(const ::omero::model::FilterPtr& removal, const ::omero::model::Callback_LightPath_findLightPathEmissionFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findLightPathEmissionFilterLink(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findLightPathEmissionFilterLink(const ::omero::model::FilterPtr& removal, const ::Ice::Context& __ctx, const ::omero::model::Callback_LightPath_findLightPathEmissionFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findLightPathEmissionFilterLink(removal, &__ctx, __del, __cookie);
    }

    ::omero::model::LightPathEmissionFilterLinkSeq end_findLightPathEmissionFilterLink(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::LightPathEmissionFilterLinkSeq findLightPathEmissionFilterLink(const ::omero::model::FilterPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_findLightPathEmissionFilterLink(const ::omero::model::FilterPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unlinkEmissionFilter(const ::omero::model::FilterPtr& removal)
    {
        unlinkEmissionFilter(removal, 0);
    }
    void unlinkEmissionFilter(const ::omero::model::FilterPtr& removal, const ::Ice::Context& __ctx)
    {
        unlinkEmissionFilter(removal, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_unlinkEmissionFilter(const ::omero::model::FilterPtr& removal, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unlinkEmissionFilter(removal, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_unlinkEmissionFilter(const ::omero::model::FilterPtr& removal, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unlinkEmissionFilter(removal, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unlinkEmissionFilter(const ::omero::model::FilterPtr& removal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unlinkEmissionFilter(removal, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unlinkEmissionFilter(const ::omero::model::FilterPtr& removal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unlinkEmissionFilter(removal, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_unlinkEmissionFilter(const ::omero::model::FilterPtr& removal)
    {
        return begin_unlinkEmissionFilter(removal, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unlinkEmissionFilter(const ::omero::model::FilterPtr& removal, const ::Ice::Context& __ctx)
    {
        return begin_unlinkEmissionFilter(removal, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unlinkEmissionFilter(const ::omero::model::FilterPtr& removal, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkEmissionFilter(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkEmissionFilter(const ::omero::model::FilterPtr& removal, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkEmissionFilter(removal, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkEmissionFilter(const ::omero::model::FilterPtr& removal, const ::omero::model::Callback_LightPath_unlinkEmissionFilterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkEmissionFilter(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkEmissionFilter(const ::omero::model::FilterPtr& removal, const ::Ice::Context& __ctx, const ::omero::model::Callback_LightPath_unlinkEmissionFilterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkEmissionFilter(removal, &__ctx, __del, __cookie);
    }

    void end_unlinkEmissionFilter(const ::Ice::AsyncResultPtr&);
    
private:

    void unlinkEmissionFilter(const ::omero::model::FilterPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unlinkEmissionFilter(const ::omero::model::FilterPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeLightPathEmissionFilterLinkFromBoth(const ::omero::model::LightPathEmissionFilterLinkPtr& link, bool bothSides)
    {
        removeLightPathEmissionFilterLinkFromBoth(link, bothSides, 0);
    }
    void removeLightPathEmissionFilterLinkFromBoth(const ::omero::model::LightPathEmissionFilterLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        removeLightPathEmissionFilterLinkFromBoth(link, bothSides, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeLightPathEmissionFilterLinkFromBoth(const ::omero::model::LightPathEmissionFilterLinkPtr& link, bool bothSides, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeLightPathEmissionFilterLinkFromBoth(link, bothSides, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeLightPathEmissionFilterLinkFromBoth(const ::omero::model::LightPathEmissionFilterLinkPtr& link, bool bothSides, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeLightPathEmissionFilterLinkFromBoth(link, bothSides, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeLightPathEmissionFilterLinkFromBoth(const ::omero::model::LightPathEmissionFilterLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeLightPathEmissionFilterLinkFromBoth(link, bothSides, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeLightPathEmissionFilterLinkFromBoth(const ::omero::model::LightPathEmissionFilterLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeLightPathEmissionFilterLinkFromBoth(link, bothSides, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeLightPathEmissionFilterLinkFromBoth(const ::omero::model::LightPathEmissionFilterLinkPtr& link, bool bothSides)
    {
        return begin_removeLightPathEmissionFilterLinkFromBoth(link, bothSides, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeLightPathEmissionFilterLinkFromBoth(const ::omero::model::LightPathEmissionFilterLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        return begin_removeLightPathEmissionFilterLinkFromBoth(link, bothSides, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeLightPathEmissionFilterLinkFromBoth(const ::omero::model::LightPathEmissionFilterLinkPtr& link, bool bothSides, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeLightPathEmissionFilterLinkFromBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeLightPathEmissionFilterLinkFromBoth(const ::omero::model::LightPathEmissionFilterLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeLightPathEmissionFilterLinkFromBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeLightPathEmissionFilterLinkFromBoth(const ::omero::model::LightPathEmissionFilterLinkPtr& link, bool bothSides, const ::omero::model::Callback_LightPath_removeLightPathEmissionFilterLinkFromBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeLightPathEmissionFilterLinkFromBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeLightPathEmissionFilterLinkFromBoth(const ::omero::model::LightPathEmissionFilterLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::omero::model::Callback_LightPath_removeLightPathEmissionFilterLinkFromBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeLightPathEmissionFilterLinkFromBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    void end_removeLightPathEmissionFilterLinkFromBoth(const ::Ice::AsyncResultPtr&);
    
private:

    void removeLightPathEmissionFilterLinkFromBoth(const ::omero::model::LightPathEmissionFilterLinkPtr&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeLightPathEmissionFilterLinkFromBoth(const ::omero::model::LightPathEmissionFilterLinkPtr&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::LightPathLinkedEmissionFilterSeq linkedEmissionFilterList()
    {
        return linkedEmissionFilterList(0);
    }
    ::omero::model::LightPathLinkedEmissionFilterSeq linkedEmissionFilterList(const ::Ice::Context& __ctx)
    {
        return linkedEmissionFilterList(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_linkedEmissionFilterList(const ::IceInternal::Function<void (const ::omero::model::LightPathLinkedEmissionFilterSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_linkedEmissionFilterList(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_linkedEmissionFilterList(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_linkedEmissionFilterList(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_linkedEmissionFilterList(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::LightPathLinkedEmissionFilterSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_linkedEmissionFilterList(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_linkedEmissionFilterList(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_linkedEmissionFilterList(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_linkedEmissionFilterList(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::LightPathLinkedEmissionFilterSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::LightPathLinkedEmissionFilterSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::LightPathPrx __proxy = ::omero::model::LightPathPrx::uncheckedCast(__result->getProxy());
                ::omero::model::LightPathLinkedEmissionFilterSeq __ret;
                try
                {
                    __ret = __proxy->end_linkedEmissionFilterList(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::LightPathLinkedEmissionFilterSeq&)> _response;
        };
        return begin_linkedEmissionFilterList(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_linkedEmissionFilterList()
    {
        return begin_linkedEmissionFilterList(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkedEmissionFilterList(const ::Ice::Context& __ctx)
    {
        return begin_linkedEmissionFilterList(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkedEmissionFilterList(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedEmissionFilterList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedEmissionFilterList(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedEmissionFilterList(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedEmissionFilterList(const ::omero::model::Callback_LightPath_linkedEmissionFilterListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedEmissionFilterList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedEmissionFilterList(const ::Ice::Context& __ctx, const ::omero::model::Callback_LightPath_linkedEmissionFilterListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedEmissionFilterList(&__ctx, __del, __cookie);
    }

    ::omero::model::LightPathLinkedEmissionFilterSeq end_linkedEmissionFilterList(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::LightPathLinkedEmissionFilterSeq linkedEmissionFilterList(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_linkedEmissionFilterList(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<LightPath> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<LightPath*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<LightPath> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<LightPath*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<LightPath> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<LightPath*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<LightPath> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<LightPath*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<LightPath> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<LightPath*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<LightPath> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<LightPath*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<LightPath> ice_secure(bool __secure) const
    {
        return dynamic_cast<LightPath*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<LightPath> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<LightPath*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<LightPath> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<LightPath*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<LightPath> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<LightPath*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<LightPath> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<LightPath*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<LightPath> ice_twoway() const
    {
        return dynamic_cast<LightPath*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<LightPath> ice_oneway() const
    {
        return dynamic_cast<LightPath*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<LightPath> ice_batchOneway() const
    {
        return dynamic_cast<LightPath*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<LightPath> ice_datagram() const
    {
        return dynamic_cast<LightPath*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<LightPath> ice_batchDatagram() const
    {
        return dynamic_cast<LightPath*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<LightPath> ice_compress(bool __compress) const
    {
        return dynamic_cast<LightPath*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<LightPath> ice_timeout(int __timeout) const
    {
        return dynamic_cast<LightPath*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<LightPath> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<LightPath*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<LightPath> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<LightPath*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

namespace IceDelegate
{

namespace omero
{

namespace model
{

class LightPath : virtual public ::IceDelegate::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void unloadExcitationFilterLink(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int sizeOfExcitationFilterLink(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::LightPathExcitationFilterLinkSeq copyExcitationFilterLink(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addLightPathExcitationFilterLink(const ::omero::model::LightPathExcitationFilterLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addAllLightPathExcitationFilterLinkSet(const ::omero::model::LightPathExcitationFilterLinkSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeLightPathExcitationFilterLink(const ::omero::model::LightPathExcitationFilterLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeAllLightPathExcitationFilterLinkSet(const ::omero::model::LightPathExcitationFilterLinkSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void clearExcitationFilterLink(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void reloadExcitationFilterLink(const ::omero::model::LightPathPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::LightPathExcitationFilterLinkPtr getLightPathExcitationFilterLink(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::LightPathExcitationFilterLinkPtr setLightPathExcitationFilterLink(::Ice::Int, const ::omero::model::LightPathExcitationFilterLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::LightPathExcitationFilterLinkPtr getPrimaryLightPathExcitationFilterLink(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::LightPathExcitationFilterLinkPtr setPrimaryLightPathExcitationFilterLink(const ::omero::model::LightPathExcitationFilterLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::sys::CountMap getExcitationFilterLinkCountPerOwner(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::LightPathExcitationFilterLinkPtr linkExcitationFilter(const ::omero::model::FilterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addLightPathExcitationFilterLinkToBoth(const ::omero::model::LightPathExcitationFilterLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::LightPathExcitationFilterLinkSeq findLightPathExcitationFilterLink(const ::omero::model::FilterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void unlinkExcitationFilter(const ::omero::model::FilterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeLightPathExcitationFilterLinkFromBoth(const ::omero::model::LightPathExcitationFilterLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::LightPathLinkedExcitationFilterSeq linkedExcitationFilterList(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::DichroicPtr getDichroic(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setDichroic(const ::omero::model::DichroicPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void unloadEmissionFilterLink(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int sizeOfEmissionFilterLink(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::LightPathEmissionFilterLinkSeq copyEmissionFilterLink(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addLightPathEmissionFilterLink(const ::omero::model::LightPathEmissionFilterLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addAllLightPathEmissionFilterLinkSet(const ::omero::model::LightPathEmissionFilterLinkSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeLightPathEmissionFilterLink(const ::omero::model::LightPathEmissionFilterLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeAllLightPathEmissionFilterLinkSet(const ::omero::model::LightPathEmissionFilterLinkSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void clearEmissionFilterLink(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void reloadEmissionFilterLink(const ::omero::model::LightPathPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::sys::CountMap getEmissionFilterLinkCountPerOwner(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::LightPathEmissionFilterLinkPtr linkEmissionFilter(const ::omero::model::FilterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addLightPathEmissionFilterLinkToBoth(const ::omero::model::LightPathEmissionFilterLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::LightPathEmissionFilterLinkSeq findLightPathEmissionFilterLink(const ::omero::model::FilterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void unlinkEmissionFilter(const ::omero::model::FilterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeLightPathEmissionFilterLinkFromBoth(const ::omero::model::LightPathEmissionFilterLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::LightPathLinkedEmissionFilterSeq linkedEmissionFilterList(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

}

namespace IceDelegateM
{

namespace omero
{

namespace model
{

class LightPath : virtual public ::IceDelegate::omero::model::LightPath,
                  virtual public ::IceDelegateM::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unloadExcitationFilterLink(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int sizeOfExcitationFilterLink(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::LightPathExcitationFilterLinkSeq copyExcitationFilterLink(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addLightPathExcitationFilterLink(const ::omero::model::LightPathExcitationFilterLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addAllLightPathExcitationFilterLinkSet(const ::omero::model::LightPathExcitationFilterLinkSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeLightPathExcitationFilterLink(const ::omero::model::LightPathExcitationFilterLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeAllLightPathExcitationFilterLinkSet(const ::omero::model::LightPathExcitationFilterLinkSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void clearExcitationFilterLink(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void reloadExcitationFilterLink(const ::omero::model::LightPathPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::LightPathExcitationFilterLinkPtr getLightPathExcitationFilterLink(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::LightPathExcitationFilterLinkPtr setLightPathExcitationFilterLink(::Ice::Int, const ::omero::model::LightPathExcitationFilterLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::LightPathExcitationFilterLinkPtr getPrimaryLightPathExcitationFilterLink(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::LightPathExcitationFilterLinkPtr setPrimaryLightPathExcitationFilterLink(const ::omero::model::LightPathExcitationFilterLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::sys::CountMap getExcitationFilterLinkCountPerOwner(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::LightPathExcitationFilterLinkPtr linkExcitationFilter(const ::omero::model::FilterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addLightPathExcitationFilterLinkToBoth(const ::omero::model::LightPathExcitationFilterLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::LightPathExcitationFilterLinkSeq findLightPathExcitationFilterLink(const ::omero::model::FilterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unlinkExcitationFilter(const ::omero::model::FilterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeLightPathExcitationFilterLinkFromBoth(const ::omero::model::LightPathExcitationFilterLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::LightPathLinkedExcitationFilterSeq linkedExcitationFilterList(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::DichroicPtr getDichroic(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setDichroic(const ::omero::model::DichroicPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unloadEmissionFilterLink(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int sizeOfEmissionFilterLink(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::LightPathEmissionFilterLinkSeq copyEmissionFilterLink(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addLightPathEmissionFilterLink(const ::omero::model::LightPathEmissionFilterLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addAllLightPathEmissionFilterLinkSet(const ::omero::model::LightPathEmissionFilterLinkSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeLightPathEmissionFilterLink(const ::omero::model::LightPathEmissionFilterLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeAllLightPathEmissionFilterLinkSet(const ::omero::model::LightPathEmissionFilterLinkSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void clearEmissionFilterLink(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void reloadEmissionFilterLink(const ::omero::model::LightPathPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::sys::CountMap getEmissionFilterLinkCountPerOwner(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::LightPathEmissionFilterLinkPtr linkEmissionFilter(const ::omero::model::FilterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addLightPathEmissionFilterLinkToBoth(const ::omero::model::LightPathEmissionFilterLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::LightPathEmissionFilterLinkSeq findLightPathEmissionFilterLink(const ::omero::model::FilterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unlinkEmissionFilter(const ::omero::model::FilterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeLightPathEmissionFilterLinkFromBoth(const ::omero::model::LightPathEmissionFilterLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::LightPathLinkedEmissionFilterSeq linkedEmissionFilterList(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace IceDelegateD
{

namespace omero
{

namespace model
{

class LightPath : virtual public ::IceDelegate::omero::model::LightPath,
                  virtual public ::IceDelegateD::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unloadExcitationFilterLink(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int sizeOfExcitationFilterLink(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::LightPathExcitationFilterLinkSeq copyExcitationFilterLink(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addLightPathExcitationFilterLink(const ::omero::model::LightPathExcitationFilterLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addAllLightPathExcitationFilterLinkSet(const ::omero::model::LightPathExcitationFilterLinkSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeLightPathExcitationFilterLink(const ::omero::model::LightPathExcitationFilterLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeAllLightPathExcitationFilterLinkSet(const ::omero::model::LightPathExcitationFilterLinkSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void clearExcitationFilterLink(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void reloadExcitationFilterLink(const ::omero::model::LightPathPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::LightPathExcitationFilterLinkPtr getLightPathExcitationFilterLink(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::LightPathExcitationFilterLinkPtr setLightPathExcitationFilterLink(::Ice::Int, const ::omero::model::LightPathExcitationFilterLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::LightPathExcitationFilterLinkPtr getPrimaryLightPathExcitationFilterLink(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::LightPathExcitationFilterLinkPtr setPrimaryLightPathExcitationFilterLink(const ::omero::model::LightPathExcitationFilterLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::sys::CountMap getExcitationFilterLinkCountPerOwner(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::LightPathExcitationFilterLinkPtr linkExcitationFilter(const ::omero::model::FilterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addLightPathExcitationFilterLinkToBoth(const ::omero::model::LightPathExcitationFilterLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::LightPathExcitationFilterLinkSeq findLightPathExcitationFilterLink(const ::omero::model::FilterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unlinkExcitationFilter(const ::omero::model::FilterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeLightPathExcitationFilterLinkFromBoth(const ::omero::model::LightPathExcitationFilterLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::LightPathLinkedExcitationFilterSeq linkedExcitationFilterList(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::DichroicPtr getDichroic(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setDichroic(const ::omero::model::DichroicPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unloadEmissionFilterLink(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int sizeOfEmissionFilterLink(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::LightPathEmissionFilterLinkSeq copyEmissionFilterLink(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addLightPathEmissionFilterLink(const ::omero::model::LightPathEmissionFilterLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addAllLightPathEmissionFilterLinkSet(const ::omero::model::LightPathEmissionFilterLinkSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeLightPathEmissionFilterLink(const ::omero::model::LightPathEmissionFilterLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeAllLightPathEmissionFilterLinkSet(const ::omero::model::LightPathEmissionFilterLinkSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void clearEmissionFilterLink(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void reloadEmissionFilterLink(const ::omero::model::LightPathPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::sys::CountMap getEmissionFilterLinkCountPerOwner(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::LightPathEmissionFilterLinkPtr linkEmissionFilter(const ::omero::model::FilterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addLightPathEmissionFilterLinkToBoth(const ::omero::model::LightPathEmissionFilterLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::LightPathEmissionFilterLinkSeq findLightPathEmissionFilterLink(const ::omero::model::FilterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unlinkEmissionFilter(const ::omero::model::FilterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeLightPathEmissionFilterLinkFromBoth(const ::omero::model::LightPathEmissionFilterLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::LightPathLinkedEmissionFilterSeq linkedEmissionFilterList(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace omero
{

namespace model
{

class LightPath : public ::omero::model::IObject
{
public:

    typedef LightPathPrx ProxyType;
    typedef LightPathPtr PointerType;

    LightPath()
    {
    }

    LightPath(const ::omero::RLongPtr& __ice_id, const ::omero::model::DetailsPtr& __ice_details, bool __ice_loaded, const ::omero::RIntPtr& __ice_version, const ::omero::model::LightPathExcitationFilterLinkSeq& __ice_excitationFilterLinkSeq, bool __ice_excitationFilterLinkLoaded, const ::omero::sys::CountMap& __ice_excitationFilterLinkCountPerOwner, const ::omero::model::DichroicPtr& __ice_dichroic, const ::omero::model::LightPathEmissionFilterLinkSeq& __ice_emissionFilterLinkSeq, bool __ice_emissionFilterLinkLoaded, const ::omero::sys::CountMap& __ice_emissionFilterLinkCountPerOwner) :
        ::omero::model::IObject(__ice_id, __ice_details, __ice_loaded)
        ,
        version(__ice_version),
        excitationFilterLinkSeq(__ice_excitationFilterLinkSeq),
        excitationFilterLinkLoaded(__ice_excitationFilterLinkLoaded),
        excitationFilterLinkCountPerOwner(__ice_excitationFilterLinkCountPerOwner),
        dichroic(__ice_dichroic),
        emissionFilterLinkSeq(__ice_emissionFilterLinkSeq),
        emissionFilterLinkLoaded(__ice_emissionFilterLinkLoaded),
        emissionFilterLinkCountPerOwner(__ice_emissionFilterLinkCountPerOwner)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    virtual ::omero::RIntPtr getVersion(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unloadExcitationFilterLink(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unloadExcitationFilterLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int sizeOfExcitationFilterLink(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sizeOfExcitationFilterLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::LightPathExcitationFilterLinkSeq copyExcitationFilterLink(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___copyExcitationFilterLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addLightPathExcitationFilterLink(const ::omero::model::LightPathExcitationFilterLinkPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addLightPathExcitationFilterLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addAllLightPathExcitationFilterLinkSet(const ::omero::model::LightPathExcitationFilterLinkSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addAllLightPathExcitationFilterLinkSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeLightPathExcitationFilterLink(const ::omero::model::LightPathExcitationFilterLinkPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeLightPathExcitationFilterLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeAllLightPathExcitationFilterLinkSet(const ::omero::model::LightPathExcitationFilterLinkSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeAllLightPathExcitationFilterLinkSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void clearExcitationFilterLink(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___clearExcitationFilterLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reloadExcitationFilterLink(const ::omero::model::LightPathPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reloadExcitationFilterLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::LightPathExcitationFilterLinkPtr getLightPathExcitationFilterLink(::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getLightPathExcitationFilterLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::LightPathExcitationFilterLinkPtr setLightPathExcitationFilterLink(::Ice::Int, const ::omero::model::LightPathExcitationFilterLinkPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setLightPathExcitationFilterLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::LightPathExcitationFilterLinkPtr getPrimaryLightPathExcitationFilterLink(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getPrimaryLightPathExcitationFilterLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::LightPathExcitationFilterLinkPtr setPrimaryLightPathExcitationFilterLink(const ::omero::model::LightPathExcitationFilterLinkPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setPrimaryLightPathExcitationFilterLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::sys::CountMap getExcitationFilterLinkCountPerOwner(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getExcitationFilterLinkCountPerOwner(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::LightPathExcitationFilterLinkPtr linkExcitationFilter(const ::omero::model::FilterPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___linkExcitationFilter(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addLightPathExcitationFilterLinkToBoth(const ::omero::model::LightPathExcitationFilterLinkPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addLightPathExcitationFilterLinkToBoth(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::LightPathExcitationFilterLinkSeq findLightPathExcitationFilterLink(const ::omero::model::FilterPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___findLightPathExcitationFilterLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unlinkExcitationFilter(const ::omero::model::FilterPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unlinkExcitationFilter(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeLightPathExcitationFilterLinkFromBoth(const ::omero::model::LightPathExcitationFilterLinkPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeLightPathExcitationFilterLinkFromBoth(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::LightPathLinkedExcitationFilterSeq linkedExcitationFilterList(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___linkedExcitationFilterList(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::DichroicPtr getDichroic(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getDichroic(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setDichroic(const ::omero::model::DichroicPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setDichroic(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unloadEmissionFilterLink(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unloadEmissionFilterLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int sizeOfEmissionFilterLink(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sizeOfEmissionFilterLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::LightPathEmissionFilterLinkSeq copyEmissionFilterLink(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___copyEmissionFilterLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addLightPathEmissionFilterLink(const ::omero::model::LightPathEmissionFilterLinkPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addLightPathEmissionFilterLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addAllLightPathEmissionFilterLinkSet(const ::omero::model::LightPathEmissionFilterLinkSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addAllLightPathEmissionFilterLinkSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeLightPathEmissionFilterLink(const ::omero::model::LightPathEmissionFilterLinkPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeLightPathEmissionFilterLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeAllLightPathEmissionFilterLinkSet(const ::omero::model::LightPathEmissionFilterLinkSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeAllLightPathEmissionFilterLinkSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void clearEmissionFilterLink(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___clearEmissionFilterLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reloadEmissionFilterLink(const ::omero::model::LightPathPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reloadEmissionFilterLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::sys::CountMap getEmissionFilterLinkCountPerOwner(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getEmissionFilterLinkCountPerOwner(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::LightPathEmissionFilterLinkPtr linkEmissionFilter(const ::omero::model::FilterPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___linkEmissionFilter(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addLightPathEmissionFilterLinkToBoth(const ::omero::model::LightPathEmissionFilterLinkPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addLightPathEmissionFilterLinkToBoth(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::LightPathEmissionFilterLinkSeq findLightPathEmissionFilterLink(const ::omero::model::FilterPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___findLightPathEmissionFilterLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unlinkEmissionFilter(const ::omero::model::FilterPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unlinkEmissionFilter(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeLightPathEmissionFilterLinkFromBoth(const ::omero::model::LightPathEmissionFilterLinkPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeLightPathEmissionFilterLinkFromBoth(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::LightPathLinkedEmissionFilterSeq linkedEmissionFilterList(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___linkedEmissionFilterList(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::model::IObject::__writeImpl;
    using ::omero::model::IObject::__readImpl;
    #endif

    ::omero::RIntPtr version;

    ::omero::model::LightPathExcitationFilterLinkSeq excitationFilterLinkSeq;

    bool excitationFilterLinkLoaded;

    ::omero::sys::CountMap excitationFilterLinkCountPerOwner;

    ::omero::model::DichroicPtr dichroic;

    ::omero::model::LightPathEmissionFilterLinkSeq emissionFilterLinkSeq;

    bool emissionFilterLinkLoaded;

    ::omero::sys::CountMap emissionFilterLinkCountPerOwner;
};

inline bool operator==(const LightPath& l, const LightPath& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const LightPath& l, const LightPath& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

}

namespace omero
{

namespace model
{

template<class T>
class CallbackNC_LightPath_getVersion : public Callback_LightPath_getVersion_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RIntPtr&);

    CallbackNC_LightPath_getVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::LightPathPrx __proxy = ::omero::model::LightPathPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_LightPath_getVersionPtr
newCallback_LightPath_getVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_getVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightPath_getVersionPtr
newCallback_LightPath_getVersion(T* instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_getVersion<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_LightPath_getVersion : public Callback_LightPath_getVersion_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RIntPtr&, const CT&);

    Callback_LightPath_getVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::LightPathPrx __proxy = ::omero::model::LightPathPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_LightPath_getVersionPtr
newCallback_LightPath_getVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_getVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_getVersionPtr
newCallback_LightPath_getVersion(T* instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_getVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_LightPath_setVersion : public Callback_LightPath_setVersion_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_LightPath_setVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_LightPath_setVersionPtr
newCallback_LightPath_setVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_setVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightPath_setVersionPtr
newCallback_LightPath_setVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_setVersion<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_LightPath_setVersionPtr
newCallback_LightPath_setVersion(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_setVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightPath_setVersionPtr
newCallback_LightPath_setVersion(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_setVersion<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_LightPath_setVersion : public Callback_LightPath_setVersion_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_LightPath_setVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_LightPath_setVersionPtr
newCallback_LightPath_setVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_setVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_setVersionPtr
newCallback_LightPath_setVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_setVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_setVersionPtr
newCallback_LightPath_setVersion(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_setVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_setVersionPtr
newCallback_LightPath_setVersion(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_setVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_LightPath_unloadExcitationFilterLink : public Callback_LightPath_unloadExcitationFilterLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_LightPath_unloadExcitationFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_LightPath_unloadExcitationFilterLinkPtr
newCallback_LightPath_unloadExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_unloadExcitationFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightPath_unloadExcitationFilterLinkPtr
newCallback_LightPath_unloadExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_unloadExcitationFilterLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_LightPath_unloadExcitationFilterLinkPtr
newCallback_LightPath_unloadExcitationFilterLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_unloadExcitationFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightPath_unloadExcitationFilterLinkPtr
newCallback_LightPath_unloadExcitationFilterLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_unloadExcitationFilterLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_LightPath_unloadExcitationFilterLink : public Callback_LightPath_unloadExcitationFilterLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_LightPath_unloadExcitationFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_LightPath_unloadExcitationFilterLinkPtr
newCallback_LightPath_unloadExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_unloadExcitationFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_unloadExcitationFilterLinkPtr
newCallback_LightPath_unloadExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_unloadExcitationFilterLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_unloadExcitationFilterLinkPtr
newCallback_LightPath_unloadExcitationFilterLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_unloadExcitationFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_unloadExcitationFilterLinkPtr
newCallback_LightPath_unloadExcitationFilterLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_unloadExcitationFilterLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_LightPath_sizeOfExcitationFilterLink : public Callback_LightPath_sizeOfExcitationFilterLink_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_LightPath_sizeOfExcitationFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::LightPathPrx __proxy = ::omero::model::LightPathPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfExcitationFilterLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_LightPath_sizeOfExcitationFilterLinkPtr
newCallback_LightPath_sizeOfExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_sizeOfExcitationFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightPath_sizeOfExcitationFilterLinkPtr
newCallback_LightPath_sizeOfExcitationFilterLink(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_sizeOfExcitationFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_LightPath_sizeOfExcitationFilterLink : public Callback_LightPath_sizeOfExcitationFilterLink_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_LightPath_sizeOfExcitationFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::LightPathPrx __proxy = ::omero::model::LightPathPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfExcitationFilterLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_LightPath_sizeOfExcitationFilterLinkPtr
newCallback_LightPath_sizeOfExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_sizeOfExcitationFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_sizeOfExcitationFilterLinkPtr
newCallback_LightPath_sizeOfExcitationFilterLink(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_sizeOfExcitationFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_LightPath_copyExcitationFilterLink : public Callback_LightPath_copyExcitationFilterLink_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::LightPathExcitationFilterLinkSeq&);

    CallbackNC_LightPath_copyExcitationFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::LightPathPrx __proxy = ::omero::model::LightPathPrx::uncheckedCast(__result->getProxy());
        ::omero::model::LightPathExcitationFilterLinkSeq __ret;
        try
        {
            __ret = __proxy->end_copyExcitationFilterLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_LightPath_copyExcitationFilterLinkPtr
newCallback_LightPath_copyExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::LightPathExcitationFilterLinkSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_copyExcitationFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightPath_copyExcitationFilterLinkPtr
newCallback_LightPath_copyExcitationFilterLink(T* instance, void (T::*cb)(const ::omero::model::LightPathExcitationFilterLinkSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_copyExcitationFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_LightPath_copyExcitationFilterLink : public Callback_LightPath_copyExcitationFilterLink_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::LightPathExcitationFilterLinkSeq&, const CT&);

    Callback_LightPath_copyExcitationFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::LightPathPrx __proxy = ::omero::model::LightPathPrx::uncheckedCast(__result->getProxy());
        ::omero::model::LightPathExcitationFilterLinkSeq __ret;
        try
        {
            __ret = __proxy->end_copyExcitationFilterLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_LightPath_copyExcitationFilterLinkPtr
newCallback_LightPath_copyExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::LightPathExcitationFilterLinkSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_copyExcitationFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_copyExcitationFilterLinkPtr
newCallback_LightPath_copyExcitationFilterLink(T* instance, void (T::*cb)(const ::omero::model::LightPathExcitationFilterLinkSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_copyExcitationFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_LightPath_addLightPathExcitationFilterLink : public Callback_LightPath_addLightPathExcitationFilterLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_LightPath_addLightPathExcitationFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_LightPath_addLightPathExcitationFilterLinkPtr
newCallback_LightPath_addLightPathExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_addLightPathExcitationFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightPath_addLightPathExcitationFilterLinkPtr
newCallback_LightPath_addLightPathExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_addLightPathExcitationFilterLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_LightPath_addLightPathExcitationFilterLinkPtr
newCallback_LightPath_addLightPathExcitationFilterLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_addLightPathExcitationFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightPath_addLightPathExcitationFilterLinkPtr
newCallback_LightPath_addLightPathExcitationFilterLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_addLightPathExcitationFilterLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_LightPath_addLightPathExcitationFilterLink : public Callback_LightPath_addLightPathExcitationFilterLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_LightPath_addLightPathExcitationFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_LightPath_addLightPathExcitationFilterLinkPtr
newCallback_LightPath_addLightPathExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_addLightPathExcitationFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_addLightPathExcitationFilterLinkPtr
newCallback_LightPath_addLightPathExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_addLightPathExcitationFilterLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_addLightPathExcitationFilterLinkPtr
newCallback_LightPath_addLightPathExcitationFilterLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_addLightPathExcitationFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_addLightPathExcitationFilterLinkPtr
newCallback_LightPath_addLightPathExcitationFilterLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_addLightPathExcitationFilterLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_LightPath_addAllLightPathExcitationFilterLinkSet : public Callback_LightPath_addAllLightPathExcitationFilterLinkSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_LightPath_addAllLightPathExcitationFilterLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_LightPath_addAllLightPathExcitationFilterLinkSetPtr
newCallback_LightPath_addAllLightPathExcitationFilterLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_addAllLightPathExcitationFilterLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightPath_addAllLightPathExcitationFilterLinkSetPtr
newCallback_LightPath_addAllLightPathExcitationFilterLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_addAllLightPathExcitationFilterLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_LightPath_addAllLightPathExcitationFilterLinkSetPtr
newCallback_LightPath_addAllLightPathExcitationFilterLinkSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_addAllLightPathExcitationFilterLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightPath_addAllLightPathExcitationFilterLinkSetPtr
newCallback_LightPath_addAllLightPathExcitationFilterLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_addAllLightPathExcitationFilterLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_LightPath_addAllLightPathExcitationFilterLinkSet : public Callback_LightPath_addAllLightPathExcitationFilterLinkSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_LightPath_addAllLightPathExcitationFilterLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_LightPath_addAllLightPathExcitationFilterLinkSetPtr
newCallback_LightPath_addAllLightPathExcitationFilterLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_addAllLightPathExcitationFilterLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_addAllLightPathExcitationFilterLinkSetPtr
newCallback_LightPath_addAllLightPathExcitationFilterLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_addAllLightPathExcitationFilterLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_addAllLightPathExcitationFilterLinkSetPtr
newCallback_LightPath_addAllLightPathExcitationFilterLinkSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_addAllLightPathExcitationFilterLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_addAllLightPathExcitationFilterLinkSetPtr
newCallback_LightPath_addAllLightPathExcitationFilterLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_addAllLightPathExcitationFilterLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_LightPath_removeLightPathExcitationFilterLink : public Callback_LightPath_removeLightPathExcitationFilterLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_LightPath_removeLightPathExcitationFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_LightPath_removeLightPathExcitationFilterLinkPtr
newCallback_LightPath_removeLightPathExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_removeLightPathExcitationFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightPath_removeLightPathExcitationFilterLinkPtr
newCallback_LightPath_removeLightPathExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_removeLightPathExcitationFilterLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_LightPath_removeLightPathExcitationFilterLinkPtr
newCallback_LightPath_removeLightPathExcitationFilterLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_removeLightPathExcitationFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightPath_removeLightPathExcitationFilterLinkPtr
newCallback_LightPath_removeLightPathExcitationFilterLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_removeLightPathExcitationFilterLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_LightPath_removeLightPathExcitationFilterLink : public Callback_LightPath_removeLightPathExcitationFilterLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_LightPath_removeLightPathExcitationFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_LightPath_removeLightPathExcitationFilterLinkPtr
newCallback_LightPath_removeLightPathExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_removeLightPathExcitationFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_removeLightPathExcitationFilterLinkPtr
newCallback_LightPath_removeLightPathExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_removeLightPathExcitationFilterLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_removeLightPathExcitationFilterLinkPtr
newCallback_LightPath_removeLightPathExcitationFilterLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_removeLightPathExcitationFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_removeLightPathExcitationFilterLinkPtr
newCallback_LightPath_removeLightPathExcitationFilterLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_removeLightPathExcitationFilterLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_LightPath_removeAllLightPathExcitationFilterLinkSet : public Callback_LightPath_removeAllLightPathExcitationFilterLinkSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_LightPath_removeAllLightPathExcitationFilterLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_LightPath_removeAllLightPathExcitationFilterLinkSetPtr
newCallback_LightPath_removeAllLightPathExcitationFilterLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_removeAllLightPathExcitationFilterLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightPath_removeAllLightPathExcitationFilterLinkSetPtr
newCallback_LightPath_removeAllLightPathExcitationFilterLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_removeAllLightPathExcitationFilterLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_LightPath_removeAllLightPathExcitationFilterLinkSetPtr
newCallback_LightPath_removeAllLightPathExcitationFilterLinkSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_removeAllLightPathExcitationFilterLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightPath_removeAllLightPathExcitationFilterLinkSetPtr
newCallback_LightPath_removeAllLightPathExcitationFilterLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_removeAllLightPathExcitationFilterLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_LightPath_removeAllLightPathExcitationFilterLinkSet : public Callback_LightPath_removeAllLightPathExcitationFilterLinkSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_LightPath_removeAllLightPathExcitationFilterLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_LightPath_removeAllLightPathExcitationFilterLinkSetPtr
newCallback_LightPath_removeAllLightPathExcitationFilterLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_removeAllLightPathExcitationFilterLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_removeAllLightPathExcitationFilterLinkSetPtr
newCallback_LightPath_removeAllLightPathExcitationFilterLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_removeAllLightPathExcitationFilterLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_removeAllLightPathExcitationFilterLinkSetPtr
newCallback_LightPath_removeAllLightPathExcitationFilterLinkSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_removeAllLightPathExcitationFilterLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_removeAllLightPathExcitationFilterLinkSetPtr
newCallback_LightPath_removeAllLightPathExcitationFilterLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_removeAllLightPathExcitationFilterLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_LightPath_clearExcitationFilterLink : public Callback_LightPath_clearExcitationFilterLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_LightPath_clearExcitationFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_LightPath_clearExcitationFilterLinkPtr
newCallback_LightPath_clearExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_clearExcitationFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightPath_clearExcitationFilterLinkPtr
newCallback_LightPath_clearExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_clearExcitationFilterLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_LightPath_clearExcitationFilterLinkPtr
newCallback_LightPath_clearExcitationFilterLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_clearExcitationFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightPath_clearExcitationFilterLinkPtr
newCallback_LightPath_clearExcitationFilterLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_clearExcitationFilterLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_LightPath_clearExcitationFilterLink : public Callback_LightPath_clearExcitationFilterLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_LightPath_clearExcitationFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_LightPath_clearExcitationFilterLinkPtr
newCallback_LightPath_clearExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_clearExcitationFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_clearExcitationFilterLinkPtr
newCallback_LightPath_clearExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_clearExcitationFilterLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_clearExcitationFilterLinkPtr
newCallback_LightPath_clearExcitationFilterLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_clearExcitationFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_clearExcitationFilterLinkPtr
newCallback_LightPath_clearExcitationFilterLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_clearExcitationFilterLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_LightPath_reloadExcitationFilterLink : public Callback_LightPath_reloadExcitationFilterLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_LightPath_reloadExcitationFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_LightPath_reloadExcitationFilterLinkPtr
newCallback_LightPath_reloadExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_reloadExcitationFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightPath_reloadExcitationFilterLinkPtr
newCallback_LightPath_reloadExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_reloadExcitationFilterLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_LightPath_reloadExcitationFilterLinkPtr
newCallback_LightPath_reloadExcitationFilterLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_reloadExcitationFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightPath_reloadExcitationFilterLinkPtr
newCallback_LightPath_reloadExcitationFilterLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_reloadExcitationFilterLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_LightPath_reloadExcitationFilterLink : public Callback_LightPath_reloadExcitationFilterLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_LightPath_reloadExcitationFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_LightPath_reloadExcitationFilterLinkPtr
newCallback_LightPath_reloadExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_reloadExcitationFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_reloadExcitationFilterLinkPtr
newCallback_LightPath_reloadExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_reloadExcitationFilterLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_reloadExcitationFilterLinkPtr
newCallback_LightPath_reloadExcitationFilterLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_reloadExcitationFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_reloadExcitationFilterLinkPtr
newCallback_LightPath_reloadExcitationFilterLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_reloadExcitationFilterLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_LightPath_getLightPathExcitationFilterLink : public Callback_LightPath_getLightPathExcitationFilterLink_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::LightPathExcitationFilterLinkPtr&);

    CallbackNC_LightPath_getLightPathExcitationFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::LightPathPrx __proxy = ::omero::model::LightPathPrx::uncheckedCast(__result->getProxy());
        ::omero::model::LightPathExcitationFilterLinkPtr __ret;
        try
        {
            __ret = __proxy->end_getLightPathExcitationFilterLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_LightPath_getLightPathExcitationFilterLinkPtr
newCallback_LightPath_getLightPathExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::LightPathExcitationFilterLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_getLightPathExcitationFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightPath_getLightPathExcitationFilterLinkPtr
newCallback_LightPath_getLightPathExcitationFilterLink(T* instance, void (T::*cb)(const ::omero::model::LightPathExcitationFilterLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_getLightPathExcitationFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_LightPath_getLightPathExcitationFilterLink : public Callback_LightPath_getLightPathExcitationFilterLink_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::LightPathExcitationFilterLinkPtr&, const CT&);

    Callback_LightPath_getLightPathExcitationFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::LightPathPrx __proxy = ::omero::model::LightPathPrx::uncheckedCast(__result->getProxy());
        ::omero::model::LightPathExcitationFilterLinkPtr __ret;
        try
        {
            __ret = __proxy->end_getLightPathExcitationFilterLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_LightPath_getLightPathExcitationFilterLinkPtr
newCallback_LightPath_getLightPathExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::LightPathExcitationFilterLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_getLightPathExcitationFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_getLightPathExcitationFilterLinkPtr
newCallback_LightPath_getLightPathExcitationFilterLink(T* instance, void (T::*cb)(const ::omero::model::LightPathExcitationFilterLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_getLightPathExcitationFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_LightPath_setLightPathExcitationFilterLink : public Callback_LightPath_setLightPathExcitationFilterLink_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::LightPathExcitationFilterLinkPtr&);

    CallbackNC_LightPath_setLightPathExcitationFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::LightPathPrx __proxy = ::omero::model::LightPathPrx::uncheckedCast(__result->getProxy());
        ::omero::model::LightPathExcitationFilterLinkPtr __ret;
        try
        {
            __ret = __proxy->end_setLightPathExcitationFilterLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_LightPath_setLightPathExcitationFilterLinkPtr
newCallback_LightPath_setLightPathExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::LightPathExcitationFilterLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_setLightPathExcitationFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightPath_setLightPathExcitationFilterLinkPtr
newCallback_LightPath_setLightPathExcitationFilterLink(T* instance, void (T::*cb)(const ::omero::model::LightPathExcitationFilterLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_setLightPathExcitationFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_LightPath_setLightPathExcitationFilterLink : public Callback_LightPath_setLightPathExcitationFilterLink_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::LightPathExcitationFilterLinkPtr&, const CT&);

    Callback_LightPath_setLightPathExcitationFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::LightPathPrx __proxy = ::omero::model::LightPathPrx::uncheckedCast(__result->getProxy());
        ::omero::model::LightPathExcitationFilterLinkPtr __ret;
        try
        {
            __ret = __proxy->end_setLightPathExcitationFilterLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_LightPath_setLightPathExcitationFilterLinkPtr
newCallback_LightPath_setLightPathExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::LightPathExcitationFilterLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_setLightPathExcitationFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_setLightPathExcitationFilterLinkPtr
newCallback_LightPath_setLightPathExcitationFilterLink(T* instance, void (T::*cb)(const ::omero::model::LightPathExcitationFilterLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_setLightPathExcitationFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_LightPath_getPrimaryLightPathExcitationFilterLink : public Callback_LightPath_getPrimaryLightPathExcitationFilterLink_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::LightPathExcitationFilterLinkPtr&);

    CallbackNC_LightPath_getPrimaryLightPathExcitationFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::LightPathPrx __proxy = ::omero::model::LightPathPrx::uncheckedCast(__result->getProxy());
        ::omero::model::LightPathExcitationFilterLinkPtr __ret;
        try
        {
            __ret = __proxy->end_getPrimaryLightPathExcitationFilterLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_LightPath_getPrimaryLightPathExcitationFilterLinkPtr
newCallback_LightPath_getPrimaryLightPathExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::LightPathExcitationFilterLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_getPrimaryLightPathExcitationFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightPath_getPrimaryLightPathExcitationFilterLinkPtr
newCallback_LightPath_getPrimaryLightPathExcitationFilterLink(T* instance, void (T::*cb)(const ::omero::model::LightPathExcitationFilterLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_getPrimaryLightPathExcitationFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_LightPath_getPrimaryLightPathExcitationFilterLink : public Callback_LightPath_getPrimaryLightPathExcitationFilterLink_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::LightPathExcitationFilterLinkPtr&, const CT&);

    Callback_LightPath_getPrimaryLightPathExcitationFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::LightPathPrx __proxy = ::omero::model::LightPathPrx::uncheckedCast(__result->getProxy());
        ::omero::model::LightPathExcitationFilterLinkPtr __ret;
        try
        {
            __ret = __proxy->end_getPrimaryLightPathExcitationFilterLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_LightPath_getPrimaryLightPathExcitationFilterLinkPtr
newCallback_LightPath_getPrimaryLightPathExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::LightPathExcitationFilterLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_getPrimaryLightPathExcitationFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_getPrimaryLightPathExcitationFilterLinkPtr
newCallback_LightPath_getPrimaryLightPathExcitationFilterLink(T* instance, void (T::*cb)(const ::omero::model::LightPathExcitationFilterLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_getPrimaryLightPathExcitationFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_LightPath_setPrimaryLightPathExcitationFilterLink : public Callback_LightPath_setPrimaryLightPathExcitationFilterLink_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::LightPathExcitationFilterLinkPtr&);

    CallbackNC_LightPath_setPrimaryLightPathExcitationFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::LightPathPrx __proxy = ::omero::model::LightPathPrx::uncheckedCast(__result->getProxy());
        ::omero::model::LightPathExcitationFilterLinkPtr __ret;
        try
        {
            __ret = __proxy->end_setPrimaryLightPathExcitationFilterLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_LightPath_setPrimaryLightPathExcitationFilterLinkPtr
newCallback_LightPath_setPrimaryLightPathExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::LightPathExcitationFilterLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_setPrimaryLightPathExcitationFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightPath_setPrimaryLightPathExcitationFilterLinkPtr
newCallback_LightPath_setPrimaryLightPathExcitationFilterLink(T* instance, void (T::*cb)(const ::omero::model::LightPathExcitationFilterLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_setPrimaryLightPathExcitationFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_LightPath_setPrimaryLightPathExcitationFilterLink : public Callback_LightPath_setPrimaryLightPathExcitationFilterLink_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::LightPathExcitationFilterLinkPtr&, const CT&);

    Callback_LightPath_setPrimaryLightPathExcitationFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::LightPathPrx __proxy = ::omero::model::LightPathPrx::uncheckedCast(__result->getProxy());
        ::omero::model::LightPathExcitationFilterLinkPtr __ret;
        try
        {
            __ret = __proxy->end_setPrimaryLightPathExcitationFilterLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_LightPath_setPrimaryLightPathExcitationFilterLinkPtr
newCallback_LightPath_setPrimaryLightPathExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::LightPathExcitationFilterLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_setPrimaryLightPathExcitationFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_setPrimaryLightPathExcitationFilterLinkPtr
newCallback_LightPath_setPrimaryLightPathExcitationFilterLink(T* instance, void (T::*cb)(const ::omero::model::LightPathExcitationFilterLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_setPrimaryLightPathExcitationFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_LightPath_getExcitationFilterLinkCountPerOwner : public Callback_LightPath_getExcitationFilterLinkCountPerOwner_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::sys::CountMap&);

    CallbackNC_LightPath_getExcitationFilterLinkCountPerOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::LightPathPrx __proxy = ::omero::model::LightPathPrx::uncheckedCast(__result->getProxy());
        ::omero::sys::CountMap __ret;
        try
        {
            __ret = __proxy->end_getExcitationFilterLinkCountPerOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_LightPath_getExcitationFilterLinkCountPerOwnerPtr
newCallback_LightPath_getExcitationFilterLinkCountPerOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::CountMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_getExcitationFilterLinkCountPerOwner<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightPath_getExcitationFilterLinkCountPerOwnerPtr
newCallback_LightPath_getExcitationFilterLinkCountPerOwner(T* instance, void (T::*cb)(const ::omero::sys::CountMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_getExcitationFilterLinkCountPerOwner<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_LightPath_getExcitationFilterLinkCountPerOwner : public Callback_LightPath_getExcitationFilterLinkCountPerOwner_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::sys::CountMap&, const CT&);

    Callback_LightPath_getExcitationFilterLinkCountPerOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::LightPathPrx __proxy = ::omero::model::LightPathPrx::uncheckedCast(__result->getProxy());
        ::omero::sys::CountMap __ret;
        try
        {
            __ret = __proxy->end_getExcitationFilterLinkCountPerOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_LightPath_getExcitationFilterLinkCountPerOwnerPtr
newCallback_LightPath_getExcitationFilterLinkCountPerOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::CountMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_getExcitationFilterLinkCountPerOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_getExcitationFilterLinkCountPerOwnerPtr
newCallback_LightPath_getExcitationFilterLinkCountPerOwner(T* instance, void (T::*cb)(const ::omero::sys::CountMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_getExcitationFilterLinkCountPerOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_LightPath_linkExcitationFilter : public Callback_LightPath_linkExcitationFilter_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::LightPathExcitationFilterLinkPtr&);

    CallbackNC_LightPath_linkExcitationFilter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::LightPathPrx __proxy = ::omero::model::LightPathPrx::uncheckedCast(__result->getProxy());
        ::omero::model::LightPathExcitationFilterLinkPtr __ret;
        try
        {
            __ret = __proxy->end_linkExcitationFilter(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_LightPath_linkExcitationFilterPtr
newCallback_LightPath_linkExcitationFilter(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::LightPathExcitationFilterLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_linkExcitationFilter<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightPath_linkExcitationFilterPtr
newCallback_LightPath_linkExcitationFilter(T* instance, void (T::*cb)(const ::omero::model::LightPathExcitationFilterLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_linkExcitationFilter<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_LightPath_linkExcitationFilter : public Callback_LightPath_linkExcitationFilter_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::LightPathExcitationFilterLinkPtr&, const CT&);

    Callback_LightPath_linkExcitationFilter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::LightPathPrx __proxy = ::omero::model::LightPathPrx::uncheckedCast(__result->getProxy());
        ::omero::model::LightPathExcitationFilterLinkPtr __ret;
        try
        {
            __ret = __proxy->end_linkExcitationFilter(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_LightPath_linkExcitationFilterPtr
newCallback_LightPath_linkExcitationFilter(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::LightPathExcitationFilterLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_linkExcitationFilter<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_linkExcitationFilterPtr
newCallback_LightPath_linkExcitationFilter(T* instance, void (T::*cb)(const ::omero::model::LightPathExcitationFilterLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_linkExcitationFilter<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_LightPath_addLightPathExcitationFilterLinkToBoth : public Callback_LightPath_addLightPathExcitationFilterLinkToBoth_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_LightPath_addLightPathExcitationFilterLinkToBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_LightPath_addLightPathExcitationFilterLinkToBothPtr
newCallback_LightPath_addLightPathExcitationFilterLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_addLightPathExcitationFilterLinkToBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightPath_addLightPathExcitationFilterLinkToBothPtr
newCallback_LightPath_addLightPathExcitationFilterLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_addLightPathExcitationFilterLinkToBoth<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_LightPath_addLightPathExcitationFilterLinkToBothPtr
newCallback_LightPath_addLightPathExcitationFilterLinkToBoth(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_addLightPathExcitationFilterLinkToBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightPath_addLightPathExcitationFilterLinkToBothPtr
newCallback_LightPath_addLightPathExcitationFilterLinkToBoth(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_addLightPathExcitationFilterLinkToBoth<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_LightPath_addLightPathExcitationFilterLinkToBoth : public Callback_LightPath_addLightPathExcitationFilterLinkToBoth_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_LightPath_addLightPathExcitationFilterLinkToBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_LightPath_addLightPathExcitationFilterLinkToBothPtr
newCallback_LightPath_addLightPathExcitationFilterLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_addLightPathExcitationFilterLinkToBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_addLightPathExcitationFilterLinkToBothPtr
newCallback_LightPath_addLightPathExcitationFilterLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_addLightPathExcitationFilterLinkToBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_addLightPathExcitationFilterLinkToBothPtr
newCallback_LightPath_addLightPathExcitationFilterLinkToBoth(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_addLightPathExcitationFilterLinkToBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_addLightPathExcitationFilterLinkToBothPtr
newCallback_LightPath_addLightPathExcitationFilterLinkToBoth(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_addLightPathExcitationFilterLinkToBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_LightPath_findLightPathExcitationFilterLink : public Callback_LightPath_findLightPathExcitationFilterLink_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::LightPathExcitationFilterLinkSeq&);

    CallbackNC_LightPath_findLightPathExcitationFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::LightPathPrx __proxy = ::omero::model::LightPathPrx::uncheckedCast(__result->getProxy());
        ::omero::model::LightPathExcitationFilterLinkSeq __ret;
        try
        {
            __ret = __proxy->end_findLightPathExcitationFilterLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_LightPath_findLightPathExcitationFilterLinkPtr
newCallback_LightPath_findLightPathExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::LightPathExcitationFilterLinkSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_findLightPathExcitationFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightPath_findLightPathExcitationFilterLinkPtr
newCallback_LightPath_findLightPathExcitationFilterLink(T* instance, void (T::*cb)(const ::omero::model::LightPathExcitationFilterLinkSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_findLightPathExcitationFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_LightPath_findLightPathExcitationFilterLink : public Callback_LightPath_findLightPathExcitationFilterLink_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::LightPathExcitationFilterLinkSeq&, const CT&);

    Callback_LightPath_findLightPathExcitationFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::LightPathPrx __proxy = ::omero::model::LightPathPrx::uncheckedCast(__result->getProxy());
        ::omero::model::LightPathExcitationFilterLinkSeq __ret;
        try
        {
            __ret = __proxy->end_findLightPathExcitationFilterLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_LightPath_findLightPathExcitationFilterLinkPtr
newCallback_LightPath_findLightPathExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::LightPathExcitationFilterLinkSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_findLightPathExcitationFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_findLightPathExcitationFilterLinkPtr
newCallback_LightPath_findLightPathExcitationFilterLink(T* instance, void (T::*cb)(const ::omero::model::LightPathExcitationFilterLinkSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_findLightPathExcitationFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_LightPath_unlinkExcitationFilter : public Callback_LightPath_unlinkExcitationFilter_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_LightPath_unlinkExcitationFilter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_LightPath_unlinkExcitationFilterPtr
newCallback_LightPath_unlinkExcitationFilter(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_unlinkExcitationFilter<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightPath_unlinkExcitationFilterPtr
newCallback_LightPath_unlinkExcitationFilter(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_unlinkExcitationFilter<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_LightPath_unlinkExcitationFilterPtr
newCallback_LightPath_unlinkExcitationFilter(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_unlinkExcitationFilter<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightPath_unlinkExcitationFilterPtr
newCallback_LightPath_unlinkExcitationFilter(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_unlinkExcitationFilter<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_LightPath_unlinkExcitationFilter : public Callback_LightPath_unlinkExcitationFilter_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_LightPath_unlinkExcitationFilter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_LightPath_unlinkExcitationFilterPtr
newCallback_LightPath_unlinkExcitationFilter(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_unlinkExcitationFilter<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_unlinkExcitationFilterPtr
newCallback_LightPath_unlinkExcitationFilter(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_unlinkExcitationFilter<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_unlinkExcitationFilterPtr
newCallback_LightPath_unlinkExcitationFilter(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_unlinkExcitationFilter<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_unlinkExcitationFilterPtr
newCallback_LightPath_unlinkExcitationFilter(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_unlinkExcitationFilter<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_LightPath_removeLightPathExcitationFilterLinkFromBoth : public Callback_LightPath_removeLightPathExcitationFilterLinkFromBoth_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_LightPath_removeLightPathExcitationFilterLinkFromBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_LightPath_removeLightPathExcitationFilterLinkFromBothPtr
newCallback_LightPath_removeLightPathExcitationFilterLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_removeLightPathExcitationFilterLinkFromBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightPath_removeLightPathExcitationFilterLinkFromBothPtr
newCallback_LightPath_removeLightPathExcitationFilterLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_removeLightPathExcitationFilterLinkFromBoth<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_LightPath_removeLightPathExcitationFilterLinkFromBothPtr
newCallback_LightPath_removeLightPathExcitationFilterLinkFromBoth(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_removeLightPathExcitationFilterLinkFromBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightPath_removeLightPathExcitationFilterLinkFromBothPtr
newCallback_LightPath_removeLightPathExcitationFilterLinkFromBoth(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_removeLightPathExcitationFilterLinkFromBoth<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_LightPath_removeLightPathExcitationFilterLinkFromBoth : public Callback_LightPath_removeLightPathExcitationFilterLinkFromBoth_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_LightPath_removeLightPathExcitationFilterLinkFromBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_LightPath_removeLightPathExcitationFilterLinkFromBothPtr
newCallback_LightPath_removeLightPathExcitationFilterLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_removeLightPathExcitationFilterLinkFromBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_removeLightPathExcitationFilterLinkFromBothPtr
newCallback_LightPath_removeLightPathExcitationFilterLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_removeLightPathExcitationFilterLinkFromBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_removeLightPathExcitationFilterLinkFromBothPtr
newCallback_LightPath_removeLightPathExcitationFilterLinkFromBoth(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_removeLightPathExcitationFilterLinkFromBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_removeLightPathExcitationFilterLinkFromBothPtr
newCallback_LightPath_removeLightPathExcitationFilterLinkFromBoth(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_removeLightPathExcitationFilterLinkFromBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_LightPath_linkedExcitationFilterList : public Callback_LightPath_linkedExcitationFilterList_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::LightPathLinkedExcitationFilterSeq&);

    CallbackNC_LightPath_linkedExcitationFilterList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::LightPathPrx __proxy = ::omero::model::LightPathPrx::uncheckedCast(__result->getProxy());
        ::omero::model::LightPathLinkedExcitationFilterSeq __ret;
        try
        {
            __ret = __proxy->end_linkedExcitationFilterList(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_LightPath_linkedExcitationFilterListPtr
newCallback_LightPath_linkedExcitationFilterList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::LightPathLinkedExcitationFilterSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_linkedExcitationFilterList<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightPath_linkedExcitationFilterListPtr
newCallback_LightPath_linkedExcitationFilterList(T* instance, void (T::*cb)(const ::omero::model::LightPathLinkedExcitationFilterSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_linkedExcitationFilterList<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_LightPath_linkedExcitationFilterList : public Callback_LightPath_linkedExcitationFilterList_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::LightPathLinkedExcitationFilterSeq&, const CT&);

    Callback_LightPath_linkedExcitationFilterList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::LightPathPrx __proxy = ::omero::model::LightPathPrx::uncheckedCast(__result->getProxy());
        ::omero::model::LightPathLinkedExcitationFilterSeq __ret;
        try
        {
            __ret = __proxy->end_linkedExcitationFilterList(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_LightPath_linkedExcitationFilterListPtr
newCallback_LightPath_linkedExcitationFilterList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::LightPathLinkedExcitationFilterSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_linkedExcitationFilterList<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_linkedExcitationFilterListPtr
newCallback_LightPath_linkedExcitationFilterList(T* instance, void (T::*cb)(const ::omero::model::LightPathLinkedExcitationFilterSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_linkedExcitationFilterList<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_LightPath_getDichroic : public Callback_LightPath_getDichroic_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::DichroicPtr&);

    CallbackNC_LightPath_getDichroic(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::LightPathPrx __proxy = ::omero::model::LightPathPrx::uncheckedCast(__result->getProxy());
        ::omero::model::DichroicPtr __ret;
        try
        {
            __ret = __proxy->end_getDichroic(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_LightPath_getDichroicPtr
newCallback_LightPath_getDichroic(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::DichroicPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_getDichroic<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightPath_getDichroicPtr
newCallback_LightPath_getDichroic(T* instance, void (T::*cb)(const ::omero::model::DichroicPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_getDichroic<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_LightPath_getDichroic : public Callback_LightPath_getDichroic_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::DichroicPtr&, const CT&);

    Callback_LightPath_getDichroic(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::LightPathPrx __proxy = ::omero::model::LightPathPrx::uncheckedCast(__result->getProxy());
        ::omero::model::DichroicPtr __ret;
        try
        {
            __ret = __proxy->end_getDichroic(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_LightPath_getDichroicPtr
newCallback_LightPath_getDichroic(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::DichroicPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_getDichroic<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_getDichroicPtr
newCallback_LightPath_getDichroic(T* instance, void (T::*cb)(const ::omero::model::DichroicPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_getDichroic<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_LightPath_setDichroic : public Callback_LightPath_setDichroic_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_LightPath_setDichroic(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_LightPath_setDichroicPtr
newCallback_LightPath_setDichroic(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_setDichroic<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightPath_setDichroicPtr
newCallback_LightPath_setDichroic(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_setDichroic<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_LightPath_setDichroicPtr
newCallback_LightPath_setDichroic(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_setDichroic<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightPath_setDichroicPtr
newCallback_LightPath_setDichroic(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_setDichroic<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_LightPath_setDichroic : public Callback_LightPath_setDichroic_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_LightPath_setDichroic(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_LightPath_setDichroicPtr
newCallback_LightPath_setDichroic(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_setDichroic<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_setDichroicPtr
newCallback_LightPath_setDichroic(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_setDichroic<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_setDichroicPtr
newCallback_LightPath_setDichroic(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_setDichroic<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_setDichroicPtr
newCallback_LightPath_setDichroic(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_setDichroic<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_LightPath_unloadEmissionFilterLink : public Callback_LightPath_unloadEmissionFilterLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_LightPath_unloadEmissionFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_LightPath_unloadEmissionFilterLinkPtr
newCallback_LightPath_unloadEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_unloadEmissionFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightPath_unloadEmissionFilterLinkPtr
newCallback_LightPath_unloadEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_unloadEmissionFilterLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_LightPath_unloadEmissionFilterLinkPtr
newCallback_LightPath_unloadEmissionFilterLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_unloadEmissionFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightPath_unloadEmissionFilterLinkPtr
newCallback_LightPath_unloadEmissionFilterLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_unloadEmissionFilterLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_LightPath_unloadEmissionFilterLink : public Callback_LightPath_unloadEmissionFilterLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_LightPath_unloadEmissionFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_LightPath_unloadEmissionFilterLinkPtr
newCallback_LightPath_unloadEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_unloadEmissionFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_unloadEmissionFilterLinkPtr
newCallback_LightPath_unloadEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_unloadEmissionFilterLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_unloadEmissionFilterLinkPtr
newCallback_LightPath_unloadEmissionFilterLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_unloadEmissionFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_unloadEmissionFilterLinkPtr
newCallback_LightPath_unloadEmissionFilterLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_unloadEmissionFilterLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_LightPath_sizeOfEmissionFilterLink : public Callback_LightPath_sizeOfEmissionFilterLink_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_LightPath_sizeOfEmissionFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::LightPathPrx __proxy = ::omero::model::LightPathPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfEmissionFilterLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_LightPath_sizeOfEmissionFilterLinkPtr
newCallback_LightPath_sizeOfEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_sizeOfEmissionFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightPath_sizeOfEmissionFilterLinkPtr
newCallback_LightPath_sizeOfEmissionFilterLink(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_sizeOfEmissionFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_LightPath_sizeOfEmissionFilterLink : public Callback_LightPath_sizeOfEmissionFilterLink_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_LightPath_sizeOfEmissionFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::LightPathPrx __proxy = ::omero::model::LightPathPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfEmissionFilterLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_LightPath_sizeOfEmissionFilterLinkPtr
newCallback_LightPath_sizeOfEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_sizeOfEmissionFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_sizeOfEmissionFilterLinkPtr
newCallback_LightPath_sizeOfEmissionFilterLink(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_sizeOfEmissionFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_LightPath_copyEmissionFilterLink : public Callback_LightPath_copyEmissionFilterLink_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::LightPathEmissionFilterLinkSeq&);

    CallbackNC_LightPath_copyEmissionFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::LightPathPrx __proxy = ::omero::model::LightPathPrx::uncheckedCast(__result->getProxy());
        ::omero::model::LightPathEmissionFilterLinkSeq __ret;
        try
        {
            __ret = __proxy->end_copyEmissionFilterLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_LightPath_copyEmissionFilterLinkPtr
newCallback_LightPath_copyEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::LightPathEmissionFilterLinkSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_copyEmissionFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightPath_copyEmissionFilterLinkPtr
newCallback_LightPath_copyEmissionFilterLink(T* instance, void (T::*cb)(const ::omero::model::LightPathEmissionFilterLinkSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_copyEmissionFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_LightPath_copyEmissionFilterLink : public Callback_LightPath_copyEmissionFilterLink_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::LightPathEmissionFilterLinkSeq&, const CT&);

    Callback_LightPath_copyEmissionFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::LightPathPrx __proxy = ::omero::model::LightPathPrx::uncheckedCast(__result->getProxy());
        ::omero::model::LightPathEmissionFilterLinkSeq __ret;
        try
        {
            __ret = __proxy->end_copyEmissionFilterLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_LightPath_copyEmissionFilterLinkPtr
newCallback_LightPath_copyEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::LightPathEmissionFilterLinkSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_copyEmissionFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_copyEmissionFilterLinkPtr
newCallback_LightPath_copyEmissionFilterLink(T* instance, void (T::*cb)(const ::omero::model::LightPathEmissionFilterLinkSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_copyEmissionFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_LightPath_addLightPathEmissionFilterLink : public Callback_LightPath_addLightPathEmissionFilterLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_LightPath_addLightPathEmissionFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_LightPath_addLightPathEmissionFilterLinkPtr
newCallback_LightPath_addLightPathEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_addLightPathEmissionFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightPath_addLightPathEmissionFilterLinkPtr
newCallback_LightPath_addLightPathEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_addLightPathEmissionFilterLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_LightPath_addLightPathEmissionFilterLinkPtr
newCallback_LightPath_addLightPathEmissionFilterLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_addLightPathEmissionFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightPath_addLightPathEmissionFilterLinkPtr
newCallback_LightPath_addLightPathEmissionFilterLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_addLightPathEmissionFilterLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_LightPath_addLightPathEmissionFilterLink : public Callback_LightPath_addLightPathEmissionFilterLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_LightPath_addLightPathEmissionFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_LightPath_addLightPathEmissionFilterLinkPtr
newCallback_LightPath_addLightPathEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_addLightPathEmissionFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_addLightPathEmissionFilterLinkPtr
newCallback_LightPath_addLightPathEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_addLightPathEmissionFilterLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_addLightPathEmissionFilterLinkPtr
newCallback_LightPath_addLightPathEmissionFilterLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_addLightPathEmissionFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_addLightPathEmissionFilterLinkPtr
newCallback_LightPath_addLightPathEmissionFilterLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_addLightPathEmissionFilterLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_LightPath_addAllLightPathEmissionFilterLinkSet : public Callback_LightPath_addAllLightPathEmissionFilterLinkSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_LightPath_addAllLightPathEmissionFilterLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_LightPath_addAllLightPathEmissionFilterLinkSetPtr
newCallback_LightPath_addAllLightPathEmissionFilterLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_addAllLightPathEmissionFilterLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightPath_addAllLightPathEmissionFilterLinkSetPtr
newCallback_LightPath_addAllLightPathEmissionFilterLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_addAllLightPathEmissionFilterLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_LightPath_addAllLightPathEmissionFilterLinkSetPtr
newCallback_LightPath_addAllLightPathEmissionFilterLinkSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_addAllLightPathEmissionFilterLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightPath_addAllLightPathEmissionFilterLinkSetPtr
newCallback_LightPath_addAllLightPathEmissionFilterLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_addAllLightPathEmissionFilterLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_LightPath_addAllLightPathEmissionFilterLinkSet : public Callback_LightPath_addAllLightPathEmissionFilterLinkSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_LightPath_addAllLightPathEmissionFilterLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_LightPath_addAllLightPathEmissionFilterLinkSetPtr
newCallback_LightPath_addAllLightPathEmissionFilterLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_addAllLightPathEmissionFilterLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_addAllLightPathEmissionFilterLinkSetPtr
newCallback_LightPath_addAllLightPathEmissionFilterLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_addAllLightPathEmissionFilterLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_addAllLightPathEmissionFilterLinkSetPtr
newCallback_LightPath_addAllLightPathEmissionFilterLinkSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_addAllLightPathEmissionFilterLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_addAllLightPathEmissionFilterLinkSetPtr
newCallback_LightPath_addAllLightPathEmissionFilterLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_addAllLightPathEmissionFilterLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_LightPath_removeLightPathEmissionFilterLink : public Callback_LightPath_removeLightPathEmissionFilterLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_LightPath_removeLightPathEmissionFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_LightPath_removeLightPathEmissionFilterLinkPtr
newCallback_LightPath_removeLightPathEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_removeLightPathEmissionFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightPath_removeLightPathEmissionFilterLinkPtr
newCallback_LightPath_removeLightPathEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_removeLightPathEmissionFilterLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_LightPath_removeLightPathEmissionFilterLinkPtr
newCallback_LightPath_removeLightPathEmissionFilterLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_removeLightPathEmissionFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightPath_removeLightPathEmissionFilterLinkPtr
newCallback_LightPath_removeLightPathEmissionFilterLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_removeLightPathEmissionFilterLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_LightPath_removeLightPathEmissionFilterLink : public Callback_LightPath_removeLightPathEmissionFilterLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_LightPath_removeLightPathEmissionFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_LightPath_removeLightPathEmissionFilterLinkPtr
newCallback_LightPath_removeLightPathEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_removeLightPathEmissionFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_removeLightPathEmissionFilterLinkPtr
newCallback_LightPath_removeLightPathEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_removeLightPathEmissionFilterLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_removeLightPathEmissionFilterLinkPtr
newCallback_LightPath_removeLightPathEmissionFilterLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_removeLightPathEmissionFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_removeLightPathEmissionFilterLinkPtr
newCallback_LightPath_removeLightPathEmissionFilterLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_removeLightPathEmissionFilterLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_LightPath_removeAllLightPathEmissionFilterLinkSet : public Callback_LightPath_removeAllLightPathEmissionFilterLinkSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_LightPath_removeAllLightPathEmissionFilterLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_LightPath_removeAllLightPathEmissionFilterLinkSetPtr
newCallback_LightPath_removeAllLightPathEmissionFilterLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_removeAllLightPathEmissionFilterLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightPath_removeAllLightPathEmissionFilterLinkSetPtr
newCallback_LightPath_removeAllLightPathEmissionFilterLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_removeAllLightPathEmissionFilterLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_LightPath_removeAllLightPathEmissionFilterLinkSetPtr
newCallback_LightPath_removeAllLightPathEmissionFilterLinkSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_removeAllLightPathEmissionFilterLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightPath_removeAllLightPathEmissionFilterLinkSetPtr
newCallback_LightPath_removeAllLightPathEmissionFilterLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_removeAllLightPathEmissionFilterLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_LightPath_removeAllLightPathEmissionFilterLinkSet : public Callback_LightPath_removeAllLightPathEmissionFilterLinkSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_LightPath_removeAllLightPathEmissionFilterLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_LightPath_removeAllLightPathEmissionFilterLinkSetPtr
newCallback_LightPath_removeAllLightPathEmissionFilterLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_removeAllLightPathEmissionFilterLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_removeAllLightPathEmissionFilterLinkSetPtr
newCallback_LightPath_removeAllLightPathEmissionFilterLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_removeAllLightPathEmissionFilterLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_removeAllLightPathEmissionFilterLinkSetPtr
newCallback_LightPath_removeAllLightPathEmissionFilterLinkSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_removeAllLightPathEmissionFilterLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_removeAllLightPathEmissionFilterLinkSetPtr
newCallback_LightPath_removeAllLightPathEmissionFilterLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_removeAllLightPathEmissionFilterLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_LightPath_clearEmissionFilterLink : public Callback_LightPath_clearEmissionFilterLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_LightPath_clearEmissionFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_LightPath_clearEmissionFilterLinkPtr
newCallback_LightPath_clearEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_clearEmissionFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightPath_clearEmissionFilterLinkPtr
newCallback_LightPath_clearEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_clearEmissionFilterLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_LightPath_clearEmissionFilterLinkPtr
newCallback_LightPath_clearEmissionFilterLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_clearEmissionFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightPath_clearEmissionFilterLinkPtr
newCallback_LightPath_clearEmissionFilterLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_clearEmissionFilterLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_LightPath_clearEmissionFilterLink : public Callback_LightPath_clearEmissionFilterLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_LightPath_clearEmissionFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_LightPath_clearEmissionFilterLinkPtr
newCallback_LightPath_clearEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_clearEmissionFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_clearEmissionFilterLinkPtr
newCallback_LightPath_clearEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_clearEmissionFilterLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_clearEmissionFilterLinkPtr
newCallback_LightPath_clearEmissionFilterLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_clearEmissionFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_clearEmissionFilterLinkPtr
newCallback_LightPath_clearEmissionFilterLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_clearEmissionFilterLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_LightPath_reloadEmissionFilterLink : public Callback_LightPath_reloadEmissionFilterLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_LightPath_reloadEmissionFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_LightPath_reloadEmissionFilterLinkPtr
newCallback_LightPath_reloadEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_reloadEmissionFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightPath_reloadEmissionFilterLinkPtr
newCallback_LightPath_reloadEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_reloadEmissionFilterLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_LightPath_reloadEmissionFilterLinkPtr
newCallback_LightPath_reloadEmissionFilterLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_reloadEmissionFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightPath_reloadEmissionFilterLinkPtr
newCallback_LightPath_reloadEmissionFilterLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_reloadEmissionFilterLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_LightPath_reloadEmissionFilterLink : public Callback_LightPath_reloadEmissionFilterLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_LightPath_reloadEmissionFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_LightPath_reloadEmissionFilterLinkPtr
newCallback_LightPath_reloadEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_reloadEmissionFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_reloadEmissionFilterLinkPtr
newCallback_LightPath_reloadEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_reloadEmissionFilterLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_reloadEmissionFilterLinkPtr
newCallback_LightPath_reloadEmissionFilterLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_reloadEmissionFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_reloadEmissionFilterLinkPtr
newCallback_LightPath_reloadEmissionFilterLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_reloadEmissionFilterLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_LightPath_getEmissionFilterLinkCountPerOwner : public Callback_LightPath_getEmissionFilterLinkCountPerOwner_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::sys::CountMap&);

    CallbackNC_LightPath_getEmissionFilterLinkCountPerOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::LightPathPrx __proxy = ::omero::model::LightPathPrx::uncheckedCast(__result->getProxy());
        ::omero::sys::CountMap __ret;
        try
        {
            __ret = __proxy->end_getEmissionFilterLinkCountPerOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_LightPath_getEmissionFilterLinkCountPerOwnerPtr
newCallback_LightPath_getEmissionFilterLinkCountPerOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::CountMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_getEmissionFilterLinkCountPerOwner<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightPath_getEmissionFilterLinkCountPerOwnerPtr
newCallback_LightPath_getEmissionFilterLinkCountPerOwner(T* instance, void (T::*cb)(const ::omero::sys::CountMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_getEmissionFilterLinkCountPerOwner<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_LightPath_getEmissionFilterLinkCountPerOwner : public Callback_LightPath_getEmissionFilterLinkCountPerOwner_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::sys::CountMap&, const CT&);

    Callback_LightPath_getEmissionFilterLinkCountPerOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::LightPathPrx __proxy = ::omero::model::LightPathPrx::uncheckedCast(__result->getProxy());
        ::omero::sys::CountMap __ret;
        try
        {
            __ret = __proxy->end_getEmissionFilterLinkCountPerOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_LightPath_getEmissionFilterLinkCountPerOwnerPtr
newCallback_LightPath_getEmissionFilterLinkCountPerOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::CountMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_getEmissionFilterLinkCountPerOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_getEmissionFilterLinkCountPerOwnerPtr
newCallback_LightPath_getEmissionFilterLinkCountPerOwner(T* instance, void (T::*cb)(const ::omero::sys::CountMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_getEmissionFilterLinkCountPerOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_LightPath_linkEmissionFilter : public Callback_LightPath_linkEmissionFilter_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::LightPathEmissionFilterLinkPtr&);

    CallbackNC_LightPath_linkEmissionFilter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::LightPathPrx __proxy = ::omero::model::LightPathPrx::uncheckedCast(__result->getProxy());
        ::omero::model::LightPathEmissionFilterLinkPtr __ret;
        try
        {
            __ret = __proxy->end_linkEmissionFilter(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_LightPath_linkEmissionFilterPtr
newCallback_LightPath_linkEmissionFilter(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::LightPathEmissionFilterLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_linkEmissionFilter<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightPath_linkEmissionFilterPtr
newCallback_LightPath_linkEmissionFilter(T* instance, void (T::*cb)(const ::omero::model::LightPathEmissionFilterLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_linkEmissionFilter<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_LightPath_linkEmissionFilter : public Callback_LightPath_linkEmissionFilter_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::LightPathEmissionFilterLinkPtr&, const CT&);

    Callback_LightPath_linkEmissionFilter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::LightPathPrx __proxy = ::omero::model::LightPathPrx::uncheckedCast(__result->getProxy());
        ::omero::model::LightPathEmissionFilterLinkPtr __ret;
        try
        {
            __ret = __proxy->end_linkEmissionFilter(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_LightPath_linkEmissionFilterPtr
newCallback_LightPath_linkEmissionFilter(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::LightPathEmissionFilterLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_linkEmissionFilter<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_linkEmissionFilterPtr
newCallback_LightPath_linkEmissionFilter(T* instance, void (T::*cb)(const ::omero::model::LightPathEmissionFilterLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_linkEmissionFilter<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_LightPath_addLightPathEmissionFilterLinkToBoth : public Callback_LightPath_addLightPathEmissionFilterLinkToBoth_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_LightPath_addLightPathEmissionFilterLinkToBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_LightPath_addLightPathEmissionFilterLinkToBothPtr
newCallback_LightPath_addLightPathEmissionFilterLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_addLightPathEmissionFilterLinkToBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightPath_addLightPathEmissionFilterLinkToBothPtr
newCallback_LightPath_addLightPathEmissionFilterLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_addLightPathEmissionFilterLinkToBoth<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_LightPath_addLightPathEmissionFilterLinkToBothPtr
newCallback_LightPath_addLightPathEmissionFilterLinkToBoth(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_addLightPathEmissionFilterLinkToBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightPath_addLightPathEmissionFilterLinkToBothPtr
newCallback_LightPath_addLightPathEmissionFilterLinkToBoth(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_addLightPathEmissionFilterLinkToBoth<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_LightPath_addLightPathEmissionFilterLinkToBoth : public Callback_LightPath_addLightPathEmissionFilterLinkToBoth_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_LightPath_addLightPathEmissionFilterLinkToBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_LightPath_addLightPathEmissionFilterLinkToBothPtr
newCallback_LightPath_addLightPathEmissionFilterLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_addLightPathEmissionFilterLinkToBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_addLightPathEmissionFilterLinkToBothPtr
newCallback_LightPath_addLightPathEmissionFilterLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_addLightPathEmissionFilterLinkToBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_addLightPathEmissionFilterLinkToBothPtr
newCallback_LightPath_addLightPathEmissionFilterLinkToBoth(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_addLightPathEmissionFilterLinkToBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_addLightPathEmissionFilterLinkToBothPtr
newCallback_LightPath_addLightPathEmissionFilterLinkToBoth(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_addLightPathEmissionFilterLinkToBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_LightPath_findLightPathEmissionFilterLink : public Callback_LightPath_findLightPathEmissionFilterLink_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::LightPathEmissionFilterLinkSeq&);

    CallbackNC_LightPath_findLightPathEmissionFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::LightPathPrx __proxy = ::omero::model::LightPathPrx::uncheckedCast(__result->getProxy());
        ::omero::model::LightPathEmissionFilterLinkSeq __ret;
        try
        {
            __ret = __proxy->end_findLightPathEmissionFilterLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_LightPath_findLightPathEmissionFilterLinkPtr
newCallback_LightPath_findLightPathEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::LightPathEmissionFilterLinkSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_findLightPathEmissionFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightPath_findLightPathEmissionFilterLinkPtr
newCallback_LightPath_findLightPathEmissionFilterLink(T* instance, void (T::*cb)(const ::omero::model::LightPathEmissionFilterLinkSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_findLightPathEmissionFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_LightPath_findLightPathEmissionFilterLink : public Callback_LightPath_findLightPathEmissionFilterLink_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::LightPathEmissionFilterLinkSeq&, const CT&);

    Callback_LightPath_findLightPathEmissionFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::LightPathPrx __proxy = ::omero::model::LightPathPrx::uncheckedCast(__result->getProxy());
        ::omero::model::LightPathEmissionFilterLinkSeq __ret;
        try
        {
            __ret = __proxy->end_findLightPathEmissionFilterLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_LightPath_findLightPathEmissionFilterLinkPtr
newCallback_LightPath_findLightPathEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::LightPathEmissionFilterLinkSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_findLightPathEmissionFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_findLightPathEmissionFilterLinkPtr
newCallback_LightPath_findLightPathEmissionFilterLink(T* instance, void (T::*cb)(const ::omero::model::LightPathEmissionFilterLinkSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_findLightPathEmissionFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_LightPath_unlinkEmissionFilter : public Callback_LightPath_unlinkEmissionFilter_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_LightPath_unlinkEmissionFilter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_LightPath_unlinkEmissionFilterPtr
newCallback_LightPath_unlinkEmissionFilter(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_unlinkEmissionFilter<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightPath_unlinkEmissionFilterPtr
newCallback_LightPath_unlinkEmissionFilter(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_unlinkEmissionFilter<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_LightPath_unlinkEmissionFilterPtr
newCallback_LightPath_unlinkEmissionFilter(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_unlinkEmissionFilter<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightPath_unlinkEmissionFilterPtr
newCallback_LightPath_unlinkEmissionFilter(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_unlinkEmissionFilter<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_LightPath_unlinkEmissionFilter : public Callback_LightPath_unlinkEmissionFilter_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_LightPath_unlinkEmissionFilter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_LightPath_unlinkEmissionFilterPtr
newCallback_LightPath_unlinkEmissionFilter(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_unlinkEmissionFilter<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_unlinkEmissionFilterPtr
newCallback_LightPath_unlinkEmissionFilter(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_unlinkEmissionFilter<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_unlinkEmissionFilterPtr
newCallback_LightPath_unlinkEmissionFilter(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_unlinkEmissionFilter<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_unlinkEmissionFilterPtr
newCallback_LightPath_unlinkEmissionFilter(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_unlinkEmissionFilter<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_LightPath_removeLightPathEmissionFilterLinkFromBoth : public Callback_LightPath_removeLightPathEmissionFilterLinkFromBoth_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_LightPath_removeLightPathEmissionFilterLinkFromBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_LightPath_removeLightPathEmissionFilterLinkFromBothPtr
newCallback_LightPath_removeLightPathEmissionFilterLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_removeLightPathEmissionFilterLinkFromBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightPath_removeLightPathEmissionFilterLinkFromBothPtr
newCallback_LightPath_removeLightPathEmissionFilterLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_removeLightPathEmissionFilterLinkFromBoth<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_LightPath_removeLightPathEmissionFilterLinkFromBothPtr
newCallback_LightPath_removeLightPathEmissionFilterLinkFromBoth(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_removeLightPathEmissionFilterLinkFromBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightPath_removeLightPathEmissionFilterLinkFromBothPtr
newCallback_LightPath_removeLightPathEmissionFilterLinkFromBoth(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_removeLightPathEmissionFilterLinkFromBoth<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_LightPath_removeLightPathEmissionFilterLinkFromBoth : public Callback_LightPath_removeLightPathEmissionFilterLinkFromBoth_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_LightPath_removeLightPathEmissionFilterLinkFromBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_LightPath_removeLightPathEmissionFilterLinkFromBothPtr
newCallback_LightPath_removeLightPathEmissionFilterLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_removeLightPathEmissionFilterLinkFromBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_removeLightPathEmissionFilterLinkFromBothPtr
newCallback_LightPath_removeLightPathEmissionFilterLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_removeLightPathEmissionFilterLinkFromBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_removeLightPathEmissionFilterLinkFromBothPtr
newCallback_LightPath_removeLightPathEmissionFilterLinkFromBoth(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_removeLightPathEmissionFilterLinkFromBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_removeLightPathEmissionFilterLinkFromBothPtr
newCallback_LightPath_removeLightPathEmissionFilterLinkFromBoth(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_removeLightPathEmissionFilterLinkFromBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_LightPath_linkedEmissionFilterList : public Callback_LightPath_linkedEmissionFilterList_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::LightPathLinkedEmissionFilterSeq&);

    CallbackNC_LightPath_linkedEmissionFilterList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::LightPathPrx __proxy = ::omero::model::LightPathPrx::uncheckedCast(__result->getProxy());
        ::omero::model::LightPathLinkedEmissionFilterSeq __ret;
        try
        {
            __ret = __proxy->end_linkedEmissionFilterList(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_LightPath_linkedEmissionFilterListPtr
newCallback_LightPath_linkedEmissionFilterList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::LightPathLinkedEmissionFilterSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_linkedEmissionFilterList<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LightPath_linkedEmissionFilterListPtr
newCallback_LightPath_linkedEmissionFilterList(T* instance, void (T::*cb)(const ::omero::model::LightPathLinkedEmissionFilterSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LightPath_linkedEmissionFilterList<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_LightPath_linkedEmissionFilterList : public Callback_LightPath_linkedEmissionFilterList_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::LightPathLinkedEmissionFilterSeq&, const CT&);

    Callback_LightPath_linkedEmissionFilterList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::LightPathPrx __proxy = ::omero::model::LightPathPrx::uncheckedCast(__result->getProxy());
        ::omero::model::LightPathLinkedEmissionFilterSeq __ret;
        try
        {
            __ret = __proxy->end_linkedEmissionFilterList(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_LightPath_linkedEmissionFilterListPtr
newCallback_LightPath_linkedEmissionFilterList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::LightPathLinkedEmissionFilterSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_linkedEmissionFilterList<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LightPath_linkedEmissionFilterListPtr
newCallback_LightPath_linkedEmissionFilterList(T* instance, void (T::*cb)(const ::omero::model::LightPathLinkedEmissionFilterSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LightPath_linkedEmissionFilterList<T, CT>(instance, cb, excb, sentcb);
}

}

}

#endif
