// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Details.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_Details_h__
#define __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_Details_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <omero/model/IObject.h>
#include <omero/System.h>
#include <Ice/Current.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace omero
{

namespace model
{

class Details;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Details>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Details*);

}

}

}

namespace omero
{

namespace model
{

class Details;
bool operator==(const Details&, const Details&);
bool operator<(const Details&, const Details&);
::Ice::Object* upCast(::omero::model::Details*);
typedef ::IceInternal::Handle< ::omero::model::Details> DetailsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Details> DetailsPrx;
void __patch(DetailsPtr&, const ::Ice::ObjectPtr&);

}

}

namespace omero
{

namespace model
{

class Callback_Details_getOwner_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Details_getOwner_Base> Callback_Details_getOwnerPtr;

class Callback_Details_setOwner_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Details_setOwner_Base> Callback_Details_setOwnerPtr;

class Callback_Details_getGroup_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Details_getGroup_Base> Callback_Details_getGroupPtr;

class Callback_Details_setGroup_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Details_setGroup_Base> Callback_Details_setGroupPtr;

class Callback_Details_getCreationEvent_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Details_getCreationEvent_Base> Callback_Details_getCreationEventPtr;

class Callback_Details_setCreationEvent_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Details_setCreationEvent_Base> Callback_Details_setCreationEventPtr;

class Callback_Details_getUpdateEvent_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Details_getUpdateEvent_Base> Callback_Details_getUpdateEventPtr;

class Callback_Details_setUpdateEvent_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Details_setUpdateEvent_Base> Callback_Details_setUpdateEventPtr;

class Callback_Details_getPermissions_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Details_getPermissions_Base> Callback_Details_getPermissionsPtr;

class Callback_Details_setPermissions_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Details_setPermissions_Base> Callback_Details_setPermissionsPtr;

class Callback_Details_getExternalInfo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Details_getExternalInfo_Base> Callback_Details_getExternalInfoPtr;

class Callback_Details_setExternalInfo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Details_setExternalInfo_Base> Callback_Details_setExternalInfoPtr;

}

}

namespace IceProxy
{

namespace omero
{

namespace model
{

class Details : virtual public ::IceProxy::Ice::Object
{
public:

    ::omero::model::ExperimenterPtr getOwner()
    {
        return getOwner(0);
    }
    ::omero::model::ExperimenterPtr getOwner(const ::Ice::Context& __ctx)
    {
        return getOwner(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getOwner(const ::IceInternal::Function<void (const ::omero::model::ExperimenterPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getOwner(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getOwner(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getOwner(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getOwner(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::ExperimenterPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getOwner(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getOwner(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getOwner(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getOwner(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::ExperimenterPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::ExperimenterPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::DetailsPrx __proxy = ::omero::model::DetailsPrx::uncheckedCast(__result->getProxy());
                ::omero::model::ExperimenterPtr __ret;
                try
                {
                    __ret = __proxy->end_getOwner(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::ExperimenterPtr&)> _response;
        };
        return begin_getOwner(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getOwner()
    {
        return begin_getOwner(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getOwner(const ::Ice::Context& __ctx)
    {
        return begin_getOwner(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getOwner(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getOwner(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getOwner(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getOwner(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getOwner(const ::omero::model::Callback_Details_getOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getOwner(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getOwner(const ::Ice::Context& __ctx, const ::omero::model::Callback_Details_getOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getOwner(&__ctx, __del, __cookie);
    }

    ::omero::model::ExperimenterPtr end_getOwner(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::ExperimenterPtr getOwner(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getOwner(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setOwner(const ::omero::model::ExperimenterPtr& theOwner)
    {
        setOwner(theOwner, 0);
    }
    void setOwner(const ::omero::model::ExperimenterPtr& theOwner, const ::Ice::Context& __ctx)
    {
        setOwner(theOwner, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setOwner(const ::omero::model::ExperimenterPtr& theOwner, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setOwner(theOwner, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setOwner(const ::omero::model::ExperimenterPtr& theOwner, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setOwner(theOwner, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setOwner(const ::omero::model::ExperimenterPtr& theOwner, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setOwner(theOwner, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setOwner(const ::omero::model::ExperimenterPtr& theOwner, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setOwner(theOwner, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setOwner(const ::omero::model::ExperimenterPtr& theOwner)
    {
        return begin_setOwner(theOwner, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setOwner(const ::omero::model::ExperimenterPtr& theOwner, const ::Ice::Context& __ctx)
    {
        return begin_setOwner(theOwner, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setOwner(const ::omero::model::ExperimenterPtr& theOwner, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setOwner(theOwner, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setOwner(const ::omero::model::ExperimenterPtr& theOwner, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setOwner(theOwner, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setOwner(const ::omero::model::ExperimenterPtr& theOwner, const ::omero::model::Callback_Details_setOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setOwner(theOwner, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setOwner(const ::omero::model::ExperimenterPtr& theOwner, const ::Ice::Context& __ctx, const ::omero::model::Callback_Details_setOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setOwner(theOwner, &__ctx, __del, __cookie);
    }

    void end_setOwner(const ::Ice::AsyncResultPtr&);
    
private:

    void setOwner(const ::omero::model::ExperimenterPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setOwner(const ::omero::model::ExperimenterPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::ExperimenterGroupPtr getGroup()
    {
        return getGroup(0);
    }
    ::omero::model::ExperimenterGroupPtr getGroup(const ::Ice::Context& __ctx)
    {
        return getGroup(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getGroup(const ::IceInternal::Function<void (const ::omero::model::ExperimenterGroupPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getGroup(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getGroup(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getGroup(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getGroup(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::ExperimenterGroupPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getGroup(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getGroup(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getGroup(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getGroup(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::ExperimenterGroupPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::ExperimenterGroupPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::DetailsPrx __proxy = ::omero::model::DetailsPrx::uncheckedCast(__result->getProxy());
                ::omero::model::ExperimenterGroupPtr __ret;
                try
                {
                    __ret = __proxy->end_getGroup(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::ExperimenterGroupPtr&)> _response;
        };
        return begin_getGroup(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getGroup()
    {
        return begin_getGroup(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getGroup(const ::Ice::Context& __ctx)
    {
        return begin_getGroup(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getGroup(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getGroup(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getGroup(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getGroup(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getGroup(const ::omero::model::Callback_Details_getGroupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getGroup(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getGroup(const ::Ice::Context& __ctx, const ::omero::model::Callback_Details_getGroupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getGroup(&__ctx, __del, __cookie);
    }

    ::omero::model::ExperimenterGroupPtr end_getGroup(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::ExperimenterGroupPtr getGroup(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getGroup(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setGroup(const ::omero::model::ExperimenterGroupPtr& theGroup)
    {
        setGroup(theGroup, 0);
    }
    void setGroup(const ::omero::model::ExperimenterGroupPtr& theGroup, const ::Ice::Context& __ctx)
    {
        setGroup(theGroup, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setGroup(const ::omero::model::ExperimenterGroupPtr& theGroup, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setGroup(theGroup, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setGroup(const ::omero::model::ExperimenterGroupPtr& theGroup, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setGroup(theGroup, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setGroup(const ::omero::model::ExperimenterGroupPtr& theGroup, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setGroup(theGroup, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setGroup(const ::omero::model::ExperimenterGroupPtr& theGroup, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setGroup(theGroup, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setGroup(const ::omero::model::ExperimenterGroupPtr& theGroup)
    {
        return begin_setGroup(theGroup, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setGroup(const ::omero::model::ExperimenterGroupPtr& theGroup, const ::Ice::Context& __ctx)
    {
        return begin_setGroup(theGroup, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setGroup(const ::omero::model::ExperimenterGroupPtr& theGroup, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setGroup(theGroup, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setGroup(const ::omero::model::ExperimenterGroupPtr& theGroup, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setGroup(theGroup, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setGroup(const ::omero::model::ExperimenterGroupPtr& theGroup, const ::omero::model::Callback_Details_setGroupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setGroup(theGroup, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setGroup(const ::omero::model::ExperimenterGroupPtr& theGroup, const ::Ice::Context& __ctx, const ::omero::model::Callback_Details_setGroupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setGroup(theGroup, &__ctx, __del, __cookie);
    }

    void end_setGroup(const ::Ice::AsyncResultPtr&);
    
private:

    void setGroup(const ::omero::model::ExperimenterGroupPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setGroup(const ::omero::model::ExperimenterGroupPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::EventPtr getCreationEvent()
    {
        return getCreationEvent(0);
    }
    ::omero::model::EventPtr getCreationEvent(const ::Ice::Context& __ctx)
    {
        return getCreationEvent(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getCreationEvent(const ::IceInternal::Function<void (const ::omero::model::EventPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getCreationEvent(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getCreationEvent(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getCreationEvent(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getCreationEvent(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::EventPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getCreationEvent(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getCreationEvent(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getCreationEvent(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getCreationEvent(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::EventPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::EventPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::DetailsPrx __proxy = ::omero::model::DetailsPrx::uncheckedCast(__result->getProxy());
                ::omero::model::EventPtr __ret;
                try
                {
                    __ret = __proxy->end_getCreationEvent(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::EventPtr&)> _response;
        };
        return begin_getCreationEvent(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getCreationEvent()
    {
        return begin_getCreationEvent(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getCreationEvent(const ::Ice::Context& __ctx)
    {
        return begin_getCreationEvent(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getCreationEvent(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCreationEvent(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCreationEvent(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCreationEvent(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCreationEvent(const ::omero::model::Callback_Details_getCreationEventPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCreationEvent(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCreationEvent(const ::Ice::Context& __ctx, const ::omero::model::Callback_Details_getCreationEventPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCreationEvent(&__ctx, __del, __cookie);
    }

    ::omero::model::EventPtr end_getCreationEvent(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::EventPtr getCreationEvent(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getCreationEvent(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setCreationEvent(const ::omero::model::EventPtr& theCreationEvent)
    {
        setCreationEvent(theCreationEvent, 0);
    }
    void setCreationEvent(const ::omero::model::EventPtr& theCreationEvent, const ::Ice::Context& __ctx)
    {
        setCreationEvent(theCreationEvent, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setCreationEvent(const ::omero::model::EventPtr& theCreationEvent, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setCreationEvent(theCreationEvent, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setCreationEvent(const ::omero::model::EventPtr& theCreationEvent, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setCreationEvent(theCreationEvent, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setCreationEvent(const ::omero::model::EventPtr& theCreationEvent, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setCreationEvent(theCreationEvent, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setCreationEvent(const ::omero::model::EventPtr& theCreationEvent, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setCreationEvent(theCreationEvent, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setCreationEvent(const ::omero::model::EventPtr& theCreationEvent)
    {
        return begin_setCreationEvent(theCreationEvent, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setCreationEvent(const ::omero::model::EventPtr& theCreationEvent, const ::Ice::Context& __ctx)
    {
        return begin_setCreationEvent(theCreationEvent, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setCreationEvent(const ::omero::model::EventPtr& theCreationEvent, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCreationEvent(theCreationEvent, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setCreationEvent(const ::omero::model::EventPtr& theCreationEvent, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCreationEvent(theCreationEvent, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setCreationEvent(const ::omero::model::EventPtr& theCreationEvent, const ::omero::model::Callback_Details_setCreationEventPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCreationEvent(theCreationEvent, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setCreationEvent(const ::omero::model::EventPtr& theCreationEvent, const ::Ice::Context& __ctx, const ::omero::model::Callback_Details_setCreationEventPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCreationEvent(theCreationEvent, &__ctx, __del, __cookie);
    }

    void end_setCreationEvent(const ::Ice::AsyncResultPtr&);
    
private:

    void setCreationEvent(const ::omero::model::EventPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setCreationEvent(const ::omero::model::EventPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::EventPtr getUpdateEvent()
    {
        return getUpdateEvent(0);
    }
    ::omero::model::EventPtr getUpdateEvent(const ::Ice::Context& __ctx)
    {
        return getUpdateEvent(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getUpdateEvent(const ::IceInternal::Function<void (const ::omero::model::EventPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getUpdateEvent(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getUpdateEvent(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getUpdateEvent(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getUpdateEvent(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::EventPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getUpdateEvent(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getUpdateEvent(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getUpdateEvent(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getUpdateEvent(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::EventPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::EventPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::DetailsPrx __proxy = ::omero::model::DetailsPrx::uncheckedCast(__result->getProxy());
                ::omero::model::EventPtr __ret;
                try
                {
                    __ret = __proxy->end_getUpdateEvent(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::EventPtr&)> _response;
        };
        return begin_getUpdateEvent(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getUpdateEvent()
    {
        return begin_getUpdateEvent(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getUpdateEvent(const ::Ice::Context& __ctx)
    {
        return begin_getUpdateEvent(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getUpdateEvent(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getUpdateEvent(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getUpdateEvent(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getUpdateEvent(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getUpdateEvent(const ::omero::model::Callback_Details_getUpdateEventPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getUpdateEvent(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getUpdateEvent(const ::Ice::Context& __ctx, const ::omero::model::Callback_Details_getUpdateEventPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getUpdateEvent(&__ctx, __del, __cookie);
    }

    ::omero::model::EventPtr end_getUpdateEvent(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::EventPtr getUpdateEvent(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getUpdateEvent(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setUpdateEvent(const ::omero::model::EventPtr& theUpdateEvent)
    {
        setUpdateEvent(theUpdateEvent, 0);
    }
    void setUpdateEvent(const ::omero::model::EventPtr& theUpdateEvent, const ::Ice::Context& __ctx)
    {
        setUpdateEvent(theUpdateEvent, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setUpdateEvent(const ::omero::model::EventPtr& theUpdateEvent, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setUpdateEvent(theUpdateEvent, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setUpdateEvent(const ::omero::model::EventPtr& theUpdateEvent, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setUpdateEvent(theUpdateEvent, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setUpdateEvent(const ::omero::model::EventPtr& theUpdateEvent, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setUpdateEvent(theUpdateEvent, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setUpdateEvent(const ::omero::model::EventPtr& theUpdateEvent, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setUpdateEvent(theUpdateEvent, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setUpdateEvent(const ::omero::model::EventPtr& theUpdateEvent)
    {
        return begin_setUpdateEvent(theUpdateEvent, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setUpdateEvent(const ::omero::model::EventPtr& theUpdateEvent, const ::Ice::Context& __ctx)
    {
        return begin_setUpdateEvent(theUpdateEvent, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setUpdateEvent(const ::omero::model::EventPtr& theUpdateEvent, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setUpdateEvent(theUpdateEvent, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setUpdateEvent(const ::omero::model::EventPtr& theUpdateEvent, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setUpdateEvent(theUpdateEvent, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setUpdateEvent(const ::omero::model::EventPtr& theUpdateEvent, const ::omero::model::Callback_Details_setUpdateEventPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setUpdateEvent(theUpdateEvent, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setUpdateEvent(const ::omero::model::EventPtr& theUpdateEvent, const ::Ice::Context& __ctx, const ::omero::model::Callback_Details_setUpdateEventPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setUpdateEvent(theUpdateEvent, &__ctx, __del, __cookie);
    }

    void end_setUpdateEvent(const ::Ice::AsyncResultPtr&);
    
private:

    void setUpdateEvent(const ::omero::model::EventPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setUpdateEvent(const ::omero::model::EventPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::PermissionsPtr getPermissions()
    {
        return getPermissions(0);
    }
    ::omero::model::PermissionsPtr getPermissions(const ::Ice::Context& __ctx)
    {
        return getPermissions(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getPermissions(const ::IceInternal::Function<void (const ::omero::model::PermissionsPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPermissions(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPermissions(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPermissions(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getPermissions(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::PermissionsPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPermissions(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPermissions(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPermissions(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getPermissions(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::PermissionsPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::PermissionsPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::DetailsPrx __proxy = ::omero::model::DetailsPrx::uncheckedCast(__result->getProxy());
                ::omero::model::PermissionsPtr __ret;
                try
                {
                    __ret = __proxy->end_getPermissions(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::PermissionsPtr&)> _response;
        };
        return begin_getPermissions(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getPermissions()
    {
        return begin_getPermissions(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPermissions(const ::Ice::Context& __ctx)
    {
        return begin_getPermissions(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPermissions(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPermissions(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPermissions(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPermissions(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPermissions(const ::omero::model::Callback_Details_getPermissionsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPermissions(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPermissions(const ::Ice::Context& __ctx, const ::omero::model::Callback_Details_getPermissionsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPermissions(&__ctx, __del, __cookie);
    }

    ::omero::model::PermissionsPtr end_getPermissions(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::PermissionsPtr getPermissions(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getPermissions(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setPermissions(const ::omero::model::PermissionsPtr& thePermissions)
    {
        setPermissions(thePermissions, 0);
    }
    void setPermissions(const ::omero::model::PermissionsPtr& thePermissions, const ::Ice::Context& __ctx)
    {
        setPermissions(thePermissions, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setPermissions(const ::omero::model::PermissionsPtr& thePermissions, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setPermissions(thePermissions, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setPermissions(const ::omero::model::PermissionsPtr& thePermissions, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPermissions(thePermissions, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setPermissions(const ::omero::model::PermissionsPtr& thePermissions, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setPermissions(thePermissions, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setPermissions(const ::omero::model::PermissionsPtr& thePermissions, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPermissions(thePermissions, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setPermissions(const ::omero::model::PermissionsPtr& thePermissions)
    {
        return begin_setPermissions(thePermissions, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPermissions(const ::omero::model::PermissionsPtr& thePermissions, const ::Ice::Context& __ctx)
    {
        return begin_setPermissions(thePermissions, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPermissions(const ::omero::model::PermissionsPtr& thePermissions, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPermissions(thePermissions, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPermissions(const ::omero::model::PermissionsPtr& thePermissions, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPermissions(thePermissions, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPermissions(const ::omero::model::PermissionsPtr& thePermissions, const ::omero::model::Callback_Details_setPermissionsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPermissions(thePermissions, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPermissions(const ::omero::model::PermissionsPtr& thePermissions, const ::Ice::Context& __ctx, const ::omero::model::Callback_Details_setPermissionsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPermissions(thePermissions, &__ctx, __del, __cookie);
    }

    void end_setPermissions(const ::Ice::AsyncResultPtr&);
    
private:

    void setPermissions(const ::omero::model::PermissionsPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setPermissions(const ::omero::model::PermissionsPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::ExternalInfoPtr getExternalInfo()
    {
        return getExternalInfo(0);
    }
    ::omero::model::ExternalInfoPtr getExternalInfo(const ::Ice::Context& __ctx)
    {
        return getExternalInfo(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getExternalInfo(const ::IceInternal::Function<void (const ::omero::model::ExternalInfoPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getExternalInfo(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getExternalInfo(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getExternalInfo(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getExternalInfo(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::ExternalInfoPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getExternalInfo(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getExternalInfo(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getExternalInfo(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getExternalInfo(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::ExternalInfoPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::ExternalInfoPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::DetailsPrx __proxy = ::omero::model::DetailsPrx::uncheckedCast(__result->getProxy());
                ::omero::model::ExternalInfoPtr __ret;
                try
                {
                    __ret = __proxy->end_getExternalInfo(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::ExternalInfoPtr&)> _response;
        };
        return begin_getExternalInfo(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getExternalInfo()
    {
        return begin_getExternalInfo(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getExternalInfo(const ::Ice::Context& __ctx)
    {
        return begin_getExternalInfo(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getExternalInfo(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getExternalInfo(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getExternalInfo(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getExternalInfo(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getExternalInfo(const ::omero::model::Callback_Details_getExternalInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getExternalInfo(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getExternalInfo(const ::Ice::Context& __ctx, const ::omero::model::Callback_Details_getExternalInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getExternalInfo(&__ctx, __del, __cookie);
    }

    ::omero::model::ExternalInfoPtr end_getExternalInfo(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::ExternalInfoPtr getExternalInfo(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getExternalInfo(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setExternalInfo(const ::omero::model::ExternalInfoPtr& theExternalInfo)
    {
        setExternalInfo(theExternalInfo, 0);
    }
    void setExternalInfo(const ::omero::model::ExternalInfoPtr& theExternalInfo, const ::Ice::Context& __ctx)
    {
        setExternalInfo(theExternalInfo, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setExternalInfo(const ::omero::model::ExternalInfoPtr& theExternalInfo, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setExternalInfo(theExternalInfo, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setExternalInfo(const ::omero::model::ExternalInfoPtr& theExternalInfo, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setExternalInfo(theExternalInfo, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setExternalInfo(const ::omero::model::ExternalInfoPtr& theExternalInfo, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setExternalInfo(theExternalInfo, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setExternalInfo(const ::omero::model::ExternalInfoPtr& theExternalInfo, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setExternalInfo(theExternalInfo, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setExternalInfo(const ::omero::model::ExternalInfoPtr& theExternalInfo)
    {
        return begin_setExternalInfo(theExternalInfo, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setExternalInfo(const ::omero::model::ExternalInfoPtr& theExternalInfo, const ::Ice::Context& __ctx)
    {
        return begin_setExternalInfo(theExternalInfo, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setExternalInfo(const ::omero::model::ExternalInfoPtr& theExternalInfo, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setExternalInfo(theExternalInfo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setExternalInfo(const ::omero::model::ExternalInfoPtr& theExternalInfo, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setExternalInfo(theExternalInfo, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setExternalInfo(const ::omero::model::ExternalInfoPtr& theExternalInfo, const ::omero::model::Callback_Details_setExternalInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setExternalInfo(theExternalInfo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setExternalInfo(const ::omero::model::ExternalInfoPtr& theExternalInfo, const ::Ice::Context& __ctx, const ::omero::model::Callback_Details_setExternalInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setExternalInfo(theExternalInfo, &__ctx, __del, __cookie);
    }

    void end_setExternalInfo(const ::Ice::AsyncResultPtr&);
    
private:

    void setExternalInfo(const ::omero::model::ExternalInfoPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setExternalInfo(const ::omero::model::ExternalInfoPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Details> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Details*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Details> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Details*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Details> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Details*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Details> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Details*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Details> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Details*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Details> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Details*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Details> ice_secure(bool __secure) const
    {
        return dynamic_cast<Details*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Details> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Details*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Details> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Details*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Details> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Details*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Details> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Details*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Details> ice_twoway() const
    {
        return dynamic_cast<Details*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Details> ice_oneway() const
    {
        return dynamic_cast<Details*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Details> ice_batchOneway() const
    {
        return dynamic_cast<Details*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Details> ice_datagram() const
    {
        return dynamic_cast<Details*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Details> ice_batchDatagram() const
    {
        return dynamic_cast<Details*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Details> ice_compress(bool __compress) const
    {
        return dynamic_cast<Details*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Details> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Details*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Details> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Details*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Details> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Details*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

namespace IceDelegate
{

namespace omero
{

namespace model
{

class Details : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::omero::model::ExperimenterPtr getOwner(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setOwner(const ::omero::model::ExperimenterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::ExperimenterGroupPtr getGroup(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setGroup(const ::omero::model::ExperimenterGroupPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::EventPtr getCreationEvent(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setCreationEvent(const ::omero::model::EventPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::EventPtr getUpdateEvent(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setUpdateEvent(const ::omero::model::EventPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::PermissionsPtr getPermissions(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setPermissions(const ::omero::model::PermissionsPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::ExternalInfoPtr getExternalInfo(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setExternalInfo(const ::omero::model::ExternalInfoPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

}

namespace IceDelegateM
{

namespace omero
{

namespace model
{

class Details : virtual public ::IceDelegate::omero::model::Details,
                virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::omero::model::ExperimenterPtr getOwner(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setOwner(const ::omero::model::ExperimenterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::ExperimenterGroupPtr getGroup(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setGroup(const ::omero::model::ExperimenterGroupPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::EventPtr getCreationEvent(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setCreationEvent(const ::omero::model::EventPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::EventPtr getUpdateEvent(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setUpdateEvent(const ::omero::model::EventPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::PermissionsPtr getPermissions(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setPermissions(const ::omero::model::PermissionsPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::ExternalInfoPtr getExternalInfo(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setExternalInfo(const ::omero::model::ExternalInfoPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace IceDelegateD
{

namespace omero
{

namespace model
{

class Details : virtual public ::IceDelegate::omero::model::Details,
                virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::omero::model::ExperimenterPtr getOwner(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setOwner(const ::omero::model::ExperimenterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::ExperimenterGroupPtr getGroup(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setGroup(const ::omero::model::ExperimenterGroupPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::EventPtr getCreationEvent(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setCreationEvent(const ::omero::model::EventPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::EventPtr getUpdateEvent(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setUpdateEvent(const ::omero::model::EventPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::PermissionsPtr getPermissions(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setPermissions(const ::omero::model::PermissionsPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::ExternalInfoPtr getExternalInfo(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setExternalInfo(const ::omero::model::ExternalInfoPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace omero
{

namespace model
{

class Details : virtual public ::Ice::Object, public IceInternal::GCShared
{
public:

    typedef DetailsPrx ProxyType;
    typedef DetailsPtr PointerType;

    Details()
    {
    }

    Details(const ::omero::model::ExperimenterPtr& __ice_owner, const ::omero::model::ExperimenterGroupPtr& __ice_group, const ::omero::model::EventPtr& __ice_creationEvent, const ::omero::model::EventPtr& __ice_updateEvent, const ::omero::model::PermissionsPtr& __ice_permissions, const ::omero::model::ExternalInfoPtr& __ice_externalInfo, const ::Ice::Context& __ice_call, const ::omero::sys::EventContextPtr& __ice_event) :
        owner(__ice_owner),
        group(__ice_group),
        creationEvent(__ice_creationEvent),
        updateEvent(__ice_updateEvent),
        permissions(__ice_permissions),
        externalInfo(__ice_externalInfo),
        call(__ice_call),
        event(__ice_event)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __addObject(::IceInternal::GCCountMap&);
    virtual bool __usesGC();
    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    virtual ::omero::model::ExperimenterPtr getOwner(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getOwner(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setOwner(const ::omero::model::ExperimenterPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setOwner(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::ExperimenterGroupPtr getGroup(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getGroup(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setGroup(const ::omero::model::ExperimenterGroupPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setGroup(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::EventPtr getCreationEvent(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getCreationEvent(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setCreationEvent(const ::omero::model::EventPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setCreationEvent(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::EventPtr getUpdateEvent(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getUpdateEvent(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setUpdateEvent(const ::omero::model::EventPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setUpdateEvent(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::PermissionsPtr getPermissions(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getPermissions(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setPermissions(const ::omero::model::PermissionsPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setPermissions(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::ExternalInfoPtr getExternalInfo(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getExternalInfo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setExternalInfo(const ::omero::model::ExternalInfoPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setExternalInfo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif

    ::omero::model::ExperimenterPtr owner;

    ::omero::model::ExperimenterGroupPtr group;

    ::omero::model::EventPtr creationEvent;

    ::omero::model::EventPtr updateEvent;

    ::omero::model::PermissionsPtr permissions;

    ::omero::model::ExternalInfoPtr externalInfo;

    ::Ice::Context call;

    ::omero::sys::EventContextPtr event;
};

inline bool operator==(const Details& l, const Details& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Details& l, const Details& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

}

namespace omero
{

namespace model
{

template<class T>
class CallbackNC_Details_getOwner : public Callback_Details_getOwner_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::ExperimenterPtr&);

    CallbackNC_Details_getOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::DetailsPrx __proxy = ::omero::model::DetailsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ExperimenterPtr __ret;
        try
        {
            __ret = __proxy->end_getOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Details_getOwnerPtr
newCallback_Details_getOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ExperimenterPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Details_getOwner<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Details_getOwnerPtr
newCallback_Details_getOwner(T* instance, void (T::*cb)(const ::omero::model::ExperimenterPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Details_getOwner<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Details_getOwner : public Callback_Details_getOwner_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::ExperimenterPtr&, const CT&);

    Callback_Details_getOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::DetailsPrx __proxy = ::omero::model::DetailsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ExperimenterPtr __ret;
        try
        {
            __ret = __proxy->end_getOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Details_getOwnerPtr
newCallback_Details_getOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ExperimenterPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Details_getOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Details_getOwnerPtr
newCallback_Details_getOwner(T* instance, void (T::*cb)(const ::omero::model::ExperimenterPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Details_getOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Details_setOwner : public Callback_Details_setOwner_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Details_setOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Details_setOwnerPtr
newCallback_Details_setOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Details_setOwner<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Details_setOwnerPtr
newCallback_Details_setOwner(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Details_setOwner<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Details_setOwnerPtr
newCallback_Details_setOwner(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Details_setOwner<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Details_setOwnerPtr
newCallback_Details_setOwner(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Details_setOwner<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Details_setOwner : public Callback_Details_setOwner_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Details_setOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Details_setOwnerPtr
newCallback_Details_setOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Details_setOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Details_setOwnerPtr
newCallback_Details_setOwner(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Details_setOwner<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Details_setOwnerPtr
newCallback_Details_setOwner(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Details_setOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Details_setOwnerPtr
newCallback_Details_setOwner(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Details_setOwner<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Details_getGroup : public Callback_Details_getGroup_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::ExperimenterGroupPtr&);

    CallbackNC_Details_getGroup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::DetailsPrx __proxy = ::omero::model::DetailsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ExperimenterGroupPtr __ret;
        try
        {
            __ret = __proxy->end_getGroup(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Details_getGroupPtr
newCallback_Details_getGroup(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ExperimenterGroupPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Details_getGroup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Details_getGroupPtr
newCallback_Details_getGroup(T* instance, void (T::*cb)(const ::omero::model::ExperimenterGroupPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Details_getGroup<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Details_getGroup : public Callback_Details_getGroup_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::ExperimenterGroupPtr&, const CT&);

    Callback_Details_getGroup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::DetailsPrx __proxy = ::omero::model::DetailsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ExperimenterGroupPtr __ret;
        try
        {
            __ret = __proxy->end_getGroup(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Details_getGroupPtr
newCallback_Details_getGroup(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ExperimenterGroupPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Details_getGroup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Details_getGroupPtr
newCallback_Details_getGroup(T* instance, void (T::*cb)(const ::omero::model::ExperimenterGroupPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Details_getGroup<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Details_setGroup : public Callback_Details_setGroup_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Details_setGroup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Details_setGroupPtr
newCallback_Details_setGroup(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Details_setGroup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Details_setGroupPtr
newCallback_Details_setGroup(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Details_setGroup<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Details_setGroupPtr
newCallback_Details_setGroup(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Details_setGroup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Details_setGroupPtr
newCallback_Details_setGroup(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Details_setGroup<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Details_setGroup : public Callback_Details_setGroup_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Details_setGroup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Details_setGroupPtr
newCallback_Details_setGroup(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Details_setGroup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Details_setGroupPtr
newCallback_Details_setGroup(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Details_setGroup<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Details_setGroupPtr
newCallback_Details_setGroup(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Details_setGroup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Details_setGroupPtr
newCallback_Details_setGroup(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Details_setGroup<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Details_getCreationEvent : public Callback_Details_getCreationEvent_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::EventPtr&);

    CallbackNC_Details_getCreationEvent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::DetailsPrx __proxy = ::omero::model::DetailsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::EventPtr __ret;
        try
        {
            __ret = __proxy->end_getCreationEvent(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Details_getCreationEventPtr
newCallback_Details_getCreationEvent(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::EventPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Details_getCreationEvent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Details_getCreationEventPtr
newCallback_Details_getCreationEvent(T* instance, void (T::*cb)(const ::omero::model::EventPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Details_getCreationEvent<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Details_getCreationEvent : public Callback_Details_getCreationEvent_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::EventPtr&, const CT&);

    Callback_Details_getCreationEvent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::DetailsPrx __proxy = ::omero::model::DetailsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::EventPtr __ret;
        try
        {
            __ret = __proxy->end_getCreationEvent(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Details_getCreationEventPtr
newCallback_Details_getCreationEvent(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::EventPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Details_getCreationEvent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Details_getCreationEventPtr
newCallback_Details_getCreationEvent(T* instance, void (T::*cb)(const ::omero::model::EventPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Details_getCreationEvent<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Details_setCreationEvent : public Callback_Details_setCreationEvent_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Details_setCreationEvent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Details_setCreationEventPtr
newCallback_Details_setCreationEvent(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Details_setCreationEvent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Details_setCreationEventPtr
newCallback_Details_setCreationEvent(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Details_setCreationEvent<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Details_setCreationEventPtr
newCallback_Details_setCreationEvent(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Details_setCreationEvent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Details_setCreationEventPtr
newCallback_Details_setCreationEvent(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Details_setCreationEvent<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Details_setCreationEvent : public Callback_Details_setCreationEvent_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Details_setCreationEvent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Details_setCreationEventPtr
newCallback_Details_setCreationEvent(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Details_setCreationEvent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Details_setCreationEventPtr
newCallback_Details_setCreationEvent(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Details_setCreationEvent<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Details_setCreationEventPtr
newCallback_Details_setCreationEvent(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Details_setCreationEvent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Details_setCreationEventPtr
newCallback_Details_setCreationEvent(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Details_setCreationEvent<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Details_getUpdateEvent : public Callback_Details_getUpdateEvent_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::EventPtr&);

    CallbackNC_Details_getUpdateEvent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::DetailsPrx __proxy = ::omero::model::DetailsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::EventPtr __ret;
        try
        {
            __ret = __proxy->end_getUpdateEvent(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Details_getUpdateEventPtr
newCallback_Details_getUpdateEvent(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::EventPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Details_getUpdateEvent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Details_getUpdateEventPtr
newCallback_Details_getUpdateEvent(T* instance, void (T::*cb)(const ::omero::model::EventPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Details_getUpdateEvent<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Details_getUpdateEvent : public Callback_Details_getUpdateEvent_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::EventPtr&, const CT&);

    Callback_Details_getUpdateEvent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::DetailsPrx __proxy = ::omero::model::DetailsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::EventPtr __ret;
        try
        {
            __ret = __proxy->end_getUpdateEvent(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Details_getUpdateEventPtr
newCallback_Details_getUpdateEvent(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::EventPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Details_getUpdateEvent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Details_getUpdateEventPtr
newCallback_Details_getUpdateEvent(T* instance, void (T::*cb)(const ::omero::model::EventPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Details_getUpdateEvent<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Details_setUpdateEvent : public Callback_Details_setUpdateEvent_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Details_setUpdateEvent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Details_setUpdateEventPtr
newCallback_Details_setUpdateEvent(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Details_setUpdateEvent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Details_setUpdateEventPtr
newCallback_Details_setUpdateEvent(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Details_setUpdateEvent<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Details_setUpdateEventPtr
newCallback_Details_setUpdateEvent(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Details_setUpdateEvent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Details_setUpdateEventPtr
newCallback_Details_setUpdateEvent(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Details_setUpdateEvent<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Details_setUpdateEvent : public Callback_Details_setUpdateEvent_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Details_setUpdateEvent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Details_setUpdateEventPtr
newCallback_Details_setUpdateEvent(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Details_setUpdateEvent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Details_setUpdateEventPtr
newCallback_Details_setUpdateEvent(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Details_setUpdateEvent<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Details_setUpdateEventPtr
newCallback_Details_setUpdateEvent(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Details_setUpdateEvent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Details_setUpdateEventPtr
newCallback_Details_setUpdateEvent(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Details_setUpdateEvent<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Details_getPermissions : public Callback_Details_getPermissions_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::PermissionsPtr&);

    CallbackNC_Details_getPermissions(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::DetailsPrx __proxy = ::omero::model::DetailsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::PermissionsPtr __ret;
        try
        {
            __ret = __proxy->end_getPermissions(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Details_getPermissionsPtr
newCallback_Details_getPermissions(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PermissionsPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Details_getPermissions<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Details_getPermissionsPtr
newCallback_Details_getPermissions(T* instance, void (T::*cb)(const ::omero::model::PermissionsPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Details_getPermissions<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Details_getPermissions : public Callback_Details_getPermissions_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::PermissionsPtr&, const CT&);

    Callback_Details_getPermissions(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::DetailsPrx __proxy = ::omero::model::DetailsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::PermissionsPtr __ret;
        try
        {
            __ret = __proxy->end_getPermissions(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Details_getPermissionsPtr
newCallback_Details_getPermissions(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PermissionsPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Details_getPermissions<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Details_getPermissionsPtr
newCallback_Details_getPermissions(T* instance, void (T::*cb)(const ::omero::model::PermissionsPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Details_getPermissions<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Details_setPermissions : public Callback_Details_setPermissions_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Details_setPermissions(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Details_setPermissionsPtr
newCallback_Details_setPermissions(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Details_setPermissions<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Details_setPermissionsPtr
newCallback_Details_setPermissions(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Details_setPermissions<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Details_setPermissionsPtr
newCallback_Details_setPermissions(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Details_setPermissions<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Details_setPermissionsPtr
newCallback_Details_setPermissions(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Details_setPermissions<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Details_setPermissions : public Callback_Details_setPermissions_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Details_setPermissions(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Details_setPermissionsPtr
newCallback_Details_setPermissions(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Details_setPermissions<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Details_setPermissionsPtr
newCallback_Details_setPermissions(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Details_setPermissions<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Details_setPermissionsPtr
newCallback_Details_setPermissions(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Details_setPermissions<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Details_setPermissionsPtr
newCallback_Details_setPermissions(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Details_setPermissions<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Details_getExternalInfo : public Callback_Details_getExternalInfo_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::ExternalInfoPtr&);

    CallbackNC_Details_getExternalInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::DetailsPrx __proxy = ::omero::model::DetailsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ExternalInfoPtr __ret;
        try
        {
            __ret = __proxy->end_getExternalInfo(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Details_getExternalInfoPtr
newCallback_Details_getExternalInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ExternalInfoPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Details_getExternalInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Details_getExternalInfoPtr
newCallback_Details_getExternalInfo(T* instance, void (T::*cb)(const ::omero::model::ExternalInfoPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Details_getExternalInfo<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Details_getExternalInfo : public Callback_Details_getExternalInfo_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::ExternalInfoPtr&, const CT&);

    Callback_Details_getExternalInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::DetailsPrx __proxy = ::omero::model::DetailsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ExternalInfoPtr __ret;
        try
        {
            __ret = __proxy->end_getExternalInfo(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Details_getExternalInfoPtr
newCallback_Details_getExternalInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ExternalInfoPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Details_getExternalInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Details_getExternalInfoPtr
newCallback_Details_getExternalInfo(T* instance, void (T::*cb)(const ::omero::model::ExternalInfoPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Details_getExternalInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Details_setExternalInfo : public Callback_Details_setExternalInfo_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Details_setExternalInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Details_setExternalInfoPtr
newCallback_Details_setExternalInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Details_setExternalInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Details_setExternalInfoPtr
newCallback_Details_setExternalInfo(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Details_setExternalInfo<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Details_setExternalInfoPtr
newCallback_Details_setExternalInfo(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Details_setExternalInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Details_setExternalInfoPtr
newCallback_Details_setExternalInfo(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Details_setExternalInfo<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Details_setExternalInfo : public Callback_Details_setExternalInfo_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Details_setExternalInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Details_setExternalInfoPtr
newCallback_Details_setExternalInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Details_setExternalInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Details_setExternalInfoPtr
newCallback_Details_setExternalInfo(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Details_setExternalInfo<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Details_setExternalInfoPtr
newCallback_Details_setExternalInfo(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Details_setExternalInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Details_setExternalInfoPtr
newCallback_Details_setExternalInfo(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Details_setExternalInfo<T, CT>(instance, 0, excb, sentcb);
}

}

}

#endif
