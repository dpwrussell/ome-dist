// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `PlaneInfo.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_PlaneInfo_h__
#define __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_PlaneInfo_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <omero/model/IObject.h>
#include <omero/RTypes.h>
#include <omero/System.h>
#include <omero/Collections.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace omero
{

namespace model
{

class Pixels;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Pixels>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Pixels*);

class PlaneInfoAnnotationLink;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::PlaneInfoAnnotationLink>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::PlaneInfoAnnotationLink*);

class Annotation;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Annotation>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Annotation*);

class Details;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Details>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Details*);

class PlaneInfo;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::PlaneInfo>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::PlaneInfo*);

}

}

}

namespace omero
{

namespace model
{

class Pixels;
bool operator==(const Pixels&, const Pixels&);
bool operator<(const Pixels&, const Pixels&);
::Ice::Object* upCast(::omero::model::Pixels*);
typedef ::IceInternal::Handle< ::omero::model::Pixels> PixelsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Pixels> PixelsPrx;
void __patch(PixelsPtr&, const ::Ice::ObjectPtr&);

class PlaneInfoAnnotationLink;
bool operator==(const PlaneInfoAnnotationLink&, const PlaneInfoAnnotationLink&);
bool operator<(const PlaneInfoAnnotationLink&, const PlaneInfoAnnotationLink&);
::Ice::Object* upCast(::omero::model::PlaneInfoAnnotationLink*);
typedef ::IceInternal::Handle< ::omero::model::PlaneInfoAnnotationLink> PlaneInfoAnnotationLinkPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::PlaneInfoAnnotationLink> PlaneInfoAnnotationLinkPrx;
void __patch(PlaneInfoAnnotationLinkPtr&, const ::Ice::ObjectPtr&);

class Annotation;
bool operator==(const Annotation&, const Annotation&);
bool operator<(const Annotation&, const Annotation&);
::Ice::Object* upCast(::omero::model::Annotation*);
typedef ::IceInternal::Handle< ::omero::model::Annotation> AnnotationPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Annotation> AnnotationPrx;
void __patch(AnnotationPtr&, const ::Ice::ObjectPtr&);

class Details;
bool operator==(const Details&, const Details&);
bool operator<(const Details&, const Details&);
::Ice::Object* upCast(::omero::model::Details*);
typedef ::IceInternal::Handle< ::omero::model::Details> DetailsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Details> DetailsPrx;
void __patch(DetailsPtr&, const ::Ice::ObjectPtr&);

class PlaneInfo;
bool operator==(const PlaneInfo&, const PlaneInfo&);
bool operator<(const PlaneInfo&, const PlaneInfo&);
::Ice::Object* upCast(::omero::model::PlaneInfo*);
typedef ::IceInternal::Handle< ::omero::model::PlaneInfo> PlaneInfoPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::PlaneInfo> PlaneInfoPrx;
void __patch(PlaneInfoPtr&, const ::Ice::ObjectPtr&);

}

}

namespace omero
{

namespace model
{

typedef ::std::vector< ::omero::model::PlaneInfoAnnotationLinkPtr> PlaneInfoAnnotationLinksSeq;

typedef ::std::vector< ::omero::model::AnnotationPtr> PlaneInfoLinkedAnnotationSeq;

}

}

namespace omero
{

namespace model
{

class Callback_PlaneInfo_getVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlaneInfo_getVersion_Base> Callback_PlaneInfo_getVersionPtr;

class Callback_PlaneInfo_setVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlaneInfo_setVersion_Base> Callback_PlaneInfo_setVersionPtr;

class Callback_PlaneInfo_getPixels_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlaneInfo_getPixels_Base> Callback_PlaneInfo_getPixelsPtr;

class Callback_PlaneInfo_setPixels_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlaneInfo_setPixels_Base> Callback_PlaneInfo_setPixelsPtr;

class Callback_PlaneInfo_getTheZ_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlaneInfo_getTheZ_Base> Callback_PlaneInfo_getTheZPtr;

class Callback_PlaneInfo_setTheZ_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlaneInfo_setTheZ_Base> Callback_PlaneInfo_setTheZPtr;

class Callback_PlaneInfo_getTheC_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlaneInfo_getTheC_Base> Callback_PlaneInfo_getTheCPtr;

class Callback_PlaneInfo_setTheC_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlaneInfo_setTheC_Base> Callback_PlaneInfo_setTheCPtr;

class Callback_PlaneInfo_getTheT_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlaneInfo_getTheT_Base> Callback_PlaneInfo_getTheTPtr;

class Callback_PlaneInfo_setTheT_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlaneInfo_setTheT_Base> Callback_PlaneInfo_setTheTPtr;

class Callback_PlaneInfo_getDeltaT_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlaneInfo_getDeltaT_Base> Callback_PlaneInfo_getDeltaTPtr;

class Callback_PlaneInfo_setDeltaT_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlaneInfo_setDeltaT_Base> Callback_PlaneInfo_setDeltaTPtr;

class Callback_PlaneInfo_getPositionX_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlaneInfo_getPositionX_Base> Callback_PlaneInfo_getPositionXPtr;

class Callback_PlaneInfo_setPositionX_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlaneInfo_setPositionX_Base> Callback_PlaneInfo_setPositionXPtr;

class Callback_PlaneInfo_getPositionY_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlaneInfo_getPositionY_Base> Callback_PlaneInfo_getPositionYPtr;

class Callback_PlaneInfo_setPositionY_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlaneInfo_setPositionY_Base> Callback_PlaneInfo_setPositionYPtr;

class Callback_PlaneInfo_getPositionZ_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlaneInfo_getPositionZ_Base> Callback_PlaneInfo_getPositionZPtr;

class Callback_PlaneInfo_setPositionZ_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlaneInfo_setPositionZ_Base> Callback_PlaneInfo_setPositionZPtr;

class Callback_PlaneInfo_getExposureTime_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlaneInfo_getExposureTime_Base> Callback_PlaneInfo_getExposureTimePtr;

class Callback_PlaneInfo_setExposureTime_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlaneInfo_setExposureTime_Base> Callback_PlaneInfo_setExposureTimePtr;

class Callback_PlaneInfo_unloadAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlaneInfo_unloadAnnotationLinks_Base> Callback_PlaneInfo_unloadAnnotationLinksPtr;

class Callback_PlaneInfo_sizeOfAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlaneInfo_sizeOfAnnotationLinks_Base> Callback_PlaneInfo_sizeOfAnnotationLinksPtr;

class Callback_PlaneInfo_copyAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlaneInfo_copyAnnotationLinks_Base> Callback_PlaneInfo_copyAnnotationLinksPtr;

class Callback_PlaneInfo_addPlaneInfoAnnotationLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlaneInfo_addPlaneInfoAnnotationLink_Base> Callback_PlaneInfo_addPlaneInfoAnnotationLinkPtr;

class Callback_PlaneInfo_addAllPlaneInfoAnnotationLinkSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlaneInfo_addAllPlaneInfoAnnotationLinkSet_Base> Callback_PlaneInfo_addAllPlaneInfoAnnotationLinkSetPtr;

class Callback_PlaneInfo_removePlaneInfoAnnotationLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlaneInfo_removePlaneInfoAnnotationLink_Base> Callback_PlaneInfo_removePlaneInfoAnnotationLinkPtr;

class Callback_PlaneInfo_removeAllPlaneInfoAnnotationLinkSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlaneInfo_removeAllPlaneInfoAnnotationLinkSet_Base> Callback_PlaneInfo_removeAllPlaneInfoAnnotationLinkSetPtr;

class Callback_PlaneInfo_clearAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlaneInfo_clearAnnotationLinks_Base> Callback_PlaneInfo_clearAnnotationLinksPtr;

class Callback_PlaneInfo_reloadAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlaneInfo_reloadAnnotationLinks_Base> Callback_PlaneInfo_reloadAnnotationLinksPtr;

class Callback_PlaneInfo_getAnnotationLinksCountPerOwner_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlaneInfo_getAnnotationLinksCountPerOwner_Base> Callback_PlaneInfo_getAnnotationLinksCountPerOwnerPtr;

class Callback_PlaneInfo_linkAnnotation_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlaneInfo_linkAnnotation_Base> Callback_PlaneInfo_linkAnnotationPtr;

class Callback_PlaneInfo_addPlaneInfoAnnotationLinkToBoth_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlaneInfo_addPlaneInfoAnnotationLinkToBoth_Base> Callback_PlaneInfo_addPlaneInfoAnnotationLinkToBothPtr;

class Callback_PlaneInfo_findPlaneInfoAnnotationLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlaneInfo_findPlaneInfoAnnotationLink_Base> Callback_PlaneInfo_findPlaneInfoAnnotationLinkPtr;

class Callback_PlaneInfo_unlinkAnnotation_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlaneInfo_unlinkAnnotation_Base> Callback_PlaneInfo_unlinkAnnotationPtr;

class Callback_PlaneInfo_removePlaneInfoAnnotationLinkFromBoth_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlaneInfo_removePlaneInfoAnnotationLinkFromBoth_Base> Callback_PlaneInfo_removePlaneInfoAnnotationLinkFromBothPtr;

class Callback_PlaneInfo_linkedAnnotationList_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlaneInfo_linkedAnnotationList_Base> Callback_PlaneInfo_linkedAnnotationListPtr;

}

}

namespace IceProxy
{

namespace omero
{

namespace model
{

class PlaneInfo : virtual public ::IceProxy::omero::model::IObject
{
public:

    ::omero::RIntPtr getVersion()
    {
        return getVersion(0);
    }
    ::omero::RIntPtr getVersion(const ::Ice::Context& __ctx)
    {
        return getVersion(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getVersion(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getVersion(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getVersion(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getVersion(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getVersion(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RIntPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PlaneInfoPrx __proxy = ::omero::model::PlaneInfoPrx::uncheckedCast(__result->getProxy());
                ::omero::RIntPtr __ret;
                try
                {
                    __ret = __proxy->end_getVersion(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RIntPtr&)> _response;
        };
        return begin_getVersion(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getVersion()
    {
        return begin_getVersion(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx)
    {
        return begin_getVersion(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::omero::model::Callback_PlaneInfo_getVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx, const ::omero::model::Callback_PlaneInfo_getVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(&__ctx, __del, __cookie);
    }

    ::omero::RIntPtr end_getVersion(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RIntPtr getVersion(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setVersion(const ::omero::RIntPtr& theVersion)
    {
        setVersion(theVersion, 0);
    }
    void setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx)
    {
        setVersion(theVersion, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setVersion(const ::omero::RIntPtr& theVersion, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setVersion(theVersion, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setVersion(const ::omero::RIntPtr& theVersion, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setVersion(theVersion, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setVersion(theVersion, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setVersion(theVersion, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion)
    {
        return begin_setVersion(theVersion, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx)
    {
        return begin_setVersion(theVersion, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::omero::model::Callback_PlaneInfo_setVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::omero::model::Callback_PlaneInfo_setVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, &__ctx, __del, __cookie);
    }

    void end_setVersion(const ::Ice::AsyncResultPtr&);
    
private:

    void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::PixelsPtr getPixels()
    {
        return getPixels(0);
    }
    ::omero::model::PixelsPtr getPixels(const ::Ice::Context& __ctx)
    {
        return getPixels(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getPixels(const ::IceInternal::Function<void (const ::omero::model::PixelsPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPixels(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPixels(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPixels(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getPixels(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::PixelsPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPixels(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPixels(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPixels(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getPixels(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::PixelsPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::PixelsPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PlaneInfoPrx __proxy = ::omero::model::PlaneInfoPrx::uncheckedCast(__result->getProxy());
                ::omero::model::PixelsPtr __ret;
                try
                {
                    __ret = __proxy->end_getPixels(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::PixelsPtr&)> _response;
        };
        return begin_getPixels(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getPixels()
    {
        return begin_getPixels(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPixels(const ::Ice::Context& __ctx)
    {
        return begin_getPixels(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPixels(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPixels(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPixels(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPixels(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPixels(const ::omero::model::Callback_PlaneInfo_getPixelsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPixels(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPixels(const ::Ice::Context& __ctx, const ::omero::model::Callback_PlaneInfo_getPixelsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPixels(&__ctx, __del, __cookie);
    }

    ::omero::model::PixelsPtr end_getPixels(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::PixelsPtr getPixels(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getPixels(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setPixels(const ::omero::model::PixelsPtr& thePixels)
    {
        setPixels(thePixels, 0);
    }
    void setPixels(const ::omero::model::PixelsPtr& thePixels, const ::Ice::Context& __ctx)
    {
        setPixels(thePixels, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setPixels(const ::omero::model::PixelsPtr& thePixels, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setPixels(thePixels, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setPixels(const ::omero::model::PixelsPtr& thePixels, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPixels(thePixels, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setPixels(const ::omero::model::PixelsPtr& thePixels, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setPixels(thePixels, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setPixels(const ::omero::model::PixelsPtr& thePixels, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPixels(thePixels, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setPixels(const ::omero::model::PixelsPtr& thePixels)
    {
        return begin_setPixels(thePixels, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPixels(const ::omero::model::PixelsPtr& thePixels, const ::Ice::Context& __ctx)
    {
        return begin_setPixels(thePixels, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPixels(const ::omero::model::PixelsPtr& thePixels, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPixels(thePixels, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPixels(const ::omero::model::PixelsPtr& thePixels, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPixels(thePixels, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPixels(const ::omero::model::PixelsPtr& thePixels, const ::omero::model::Callback_PlaneInfo_setPixelsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPixels(thePixels, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPixels(const ::omero::model::PixelsPtr& thePixels, const ::Ice::Context& __ctx, const ::omero::model::Callback_PlaneInfo_setPixelsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPixels(thePixels, &__ctx, __del, __cookie);
    }

    void end_setPixels(const ::Ice::AsyncResultPtr&);
    
private:

    void setPixels(const ::omero::model::PixelsPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setPixels(const ::omero::model::PixelsPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RIntPtr getTheZ()
    {
        return getTheZ(0);
    }
    ::omero::RIntPtr getTheZ(const ::Ice::Context& __ctx)
    {
        return getTheZ(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getTheZ(const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getTheZ(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getTheZ(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getTheZ(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getTheZ(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getTheZ(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getTheZ(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getTheZ(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getTheZ(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RIntPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PlaneInfoPrx __proxy = ::omero::model::PlaneInfoPrx::uncheckedCast(__result->getProxy());
                ::omero::RIntPtr __ret;
                try
                {
                    __ret = __proxy->end_getTheZ(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RIntPtr&)> _response;
        };
        return begin_getTheZ(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getTheZ()
    {
        return begin_getTheZ(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getTheZ(const ::Ice::Context& __ctx)
    {
        return begin_getTheZ(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getTheZ(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTheZ(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTheZ(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTheZ(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTheZ(const ::omero::model::Callback_PlaneInfo_getTheZPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTheZ(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTheZ(const ::Ice::Context& __ctx, const ::omero::model::Callback_PlaneInfo_getTheZPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTheZ(&__ctx, __del, __cookie);
    }

    ::omero::RIntPtr end_getTheZ(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RIntPtr getTheZ(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getTheZ(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setTheZ(const ::omero::RIntPtr& theTheZ)
    {
        setTheZ(theTheZ, 0);
    }
    void setTheZ(const ::omero::RIntPtr& theTheZ, const ::Ice::Context& __ctx)
    {
        setTheZ(theTheZ, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setTheZ(const ::omero::RIntPtr& theTheZ, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setTheZ(theTheZ, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setTheZ(const ::omero::RIntPtr& theTheZ, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setTheZ(theTheZ, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setTheZ(const ::omero::RIntPtr& theTheZ, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setTheZ(theTheZ, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setTheZ(const ::omero::RIntPtr& theTheZ, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setTheZ(theTheZ, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setTheZ(const ::omero::RIntPtr& theTheZ)
    {
        return begin_setTheZ(theTheZ, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setTheZ(const ::omero::RIntPtr& theTheZ, const ::Ice::Context& __ctx)
    {
        return begin_setTheZ(theTheZ, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setTheZ(const ::omero::RIntPtr& theTheZ, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTheZ(theTheZ, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setTheZ(const ::omero::RIntPtr& theTheZ, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTheZ(theTheZ, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setTheZ(const ::omero::RIntPtr& theTheZ, const ::omero::model::Callback_PlaneInfo_setTheZPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTheZ(theTheZ, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setTheZ(const ::omero::RIntPtr& theTheZ, const ::Ice::Context& __ctx, const ::omero::model::Callback_PlaneInfo_setTheZPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTheZ(theTheZ, &__ctx, __del, __cookie);
    }

    void end_setTheZ(const ::Ice::AsyncResultPtr&);
    
private:

    void setTheZ(const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setTheZ(const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RIntPtr getTheC()
    {
        return getTheC(0);
    }
    ::omero::RIntPtr getTheC(const ::Ice::Context& __ctx)
    {
        return getTheC(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getTheC(const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getTheC(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getTheC(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getTheC(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getTheC(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getTheC(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getTheC(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getTheC(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getTheC(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RIntPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PlaneInfoPrx __proxy = ::omero::model::PlaneInfoPrx::uncheckedCast(__result->getProxy());
                ::omero::RIntPtr __ret;
                try
                {
                    __ret = __proxy->end_getTheC(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RIntPtr&)> _response;
        };
        return begin_getTheC(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getTheC()
    {
        return begin_getTheC(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getTheC(const ::Ice::Context& __ctx)
    {
        return begin_getTheC(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getTheC(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTheC(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTheC(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTheC(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTheC(const ::omero::model::Callback_PlaneInfo_getTheCPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTheC(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTheC(const ::Ice::Context& __ctx, const ::omero::model::Callback_PlaneInfo_getTheCPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTheC(&__ctx, __del, __cookie);
    }

    ::omero::RIntPtr end_getTheC(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RIntPtr getTheC(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getTheC(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setTheC(const ::omero::RIntPtr& theTheC)
    {
        setTheC(theTheC, 0);
    }
    void setTheC(const ::omero::RIntPtr& theTheC, const ::Ice::Context& __ctx)
    {
        setTheC(theTheC, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setTheC(const ::omero::RIntPtr& theTheC, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setTheC(theTheC, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setTheC(const ::omero::RIntPtr& theTheC, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setTheC(theTheC, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setTheC(const ::omero::RIntPtr& theTheC, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setTheC(theTheC, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setTheC(const ::omero::RIntPtr& theTheC, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setTheC(theTheC, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setTheC(const ::omero::RIntPtr& theTheC)
    {
        return begin_setTheC(theTheC, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setTheC(const ::omero::RIntPtr& theTheC, const ::Ice::Context& __ctx)
    {
        return begin_setTheC(theTheC, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setTheC(const ::omero::RIntPtr& theTheC, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTheC(theTheC, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setTheC(const ::omero::RIntPtr& theTheC, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTheC(theTheC, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setTheC(const ::omero::RIntPtr& theTheC, const ::omero::model::Callback_PlaneInfo_setTheCPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTheC(theTheC, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setTheC(const ::omero::RIntPtr& theTheC, const ::Ice::Context& __ctx, const ::omero::model::Callback_PlaneInfo_setTheCPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTheC(theTheC, &__ctx, __del, __cookie);
    }

    void end_setTheC(const ::Ice::AsyncResultPtr&);
    
private:

    void setTheC(const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setTheC(const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RIntPtr getTheT()
    {
        return getTheT(0);
    }
    ::omero::RIntPtr getTheT(const ::Ice::Context& __ctx)
    {
        return getTheT(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getTheT(const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getTheT(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getTheT(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getTheT(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getTheT(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getTheT(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getTheT(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getTheT(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getTheT(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RIntPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PlaneInfoPrx __proxy = ::omero::model::PlaneInfoPrx::uncheckedCast(__result->getProxy());
                ::omero::RIntPtr __ret;
                try
                {
                    __ret = __proxy->end_getTheT(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RIntPtr&)> _response;
        };
        return begin_getTheT(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getTheT()
    {
        return begin_getTheT(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getTheT(const ::Ice::Context& __ctx)
    {
        return begin_getTheT(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getTheT(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTheT(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTheT(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTheT(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTheT(const ::omero::model::Callback_PlaneInfo_getTheTPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTheT(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTheT(const ::Ice::Context& __ctx, const ::omero::model::Callback_PlaneInfo_getTheTPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTheT(&__ctx, __del, __cookie);
    }

    ::omero::RIntPtr end_getTheT(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RIntPtr getTheT(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getTheT(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setTheT(const ::omero::RIntPtr& theTheT)
    {
        setTheT(theTheT, 0);
    }
    void setTheT(const ::omero::RIntPtr& theTheT, const ::Ice::Context& __ctx)
    {
        setTheT(theTheT, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setTheT(const ::omero::RIntPtr& theTheT, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setTheT(theTheT, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setTheT(const ::omero::RIntPtr& theTheT, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setTheT(theTheT, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setTheT(const ::omero::RIntPtr& theTheT, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setTheT(theTheT, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setTheT(const ::omero::RIntPtr& theTheT, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setTheT(theTheT, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setTheT(const ::omero::RIntPtr& theTheT)
    {
        return begin_setTheT(theTheT, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setTheT(const ::omero::RIntPtr& theTheT, const ::Ice::Context& __ctx)
    {
        return begin_setTheT(theTheT, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setTheT(const ::omero::RIntPtr& theTheT, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTheT(theTheT, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setTheT(const ::omero::RIntPtr& theTheT, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTheT(theTheT, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setTheT(const ::omero::RIntPtr& theTheT, const ::omero::model::Callback_PlaneInfo_setTheTPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTheT(theTheT, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setTheT(const ::omero::RIntPtr& theTheT, const ::Ice::Context& __ctx, const ::omero::model::Callback_PlaneInfo_setTheTPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTheT(theTheT, &__ctx, __del, __cookie);
    }

    void end_setTheT(const ::Ice::AsyncResultPtr&);
    
private:

    void setTheT(const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setTheT(const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RDoublePtr getDeltaT()
    {
        return getDeltaT(0);
    }
    ::omero::RDoublePtr getDeltaT(const ::Ice::Context& __ctx)
    {
        return getDeltaT(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getDeltaT(const ::IceInternal::Function<void (const ::omero::RDoublePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getDeltaT(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getDeltaT(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getDeltaT(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getDeltaT(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RDoublePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getDeltaT(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getDeltaT(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getDeltaT(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getDeltaT(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RDoublePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RDoublePtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PlaneInfoPrx __proxy = ::omero::model::PlaneInfoPrx::uncheckedCast(__result->getProxy());
                ::omero::RDoublePtr __ret;
                try
                {
                    __ret = __proxy->end_getDeltaT(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RDoublePtr&)> _response;
        };
        return begin_getDeltaT(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getDeltaT()
    {
        return begin_getDeltaT(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDeltaT(const ::Ice::Context& __ctx)
    {
        return begin_getDeltaT(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDeltaT(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDeltaT(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDeltaT(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDeltaT(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDeltaT(const ::omero::model::Callback_PlaneInfo_getDeltaTPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDeltaT(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDeltaT(const ::Ice::Context& __ctx, const ::omero::model::Callback_PlaneInfo_getDeltaTPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDeltaT(&__ctx, __del, __cookie);
    }

    ::omero::RDoublePtr end_getDeltaT(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RDoublePtr getDeltaT(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getDeltaT(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setDeltaT(const ::omero::RDoublePtr& theDeltaT)
    {
        setDeltaT(theDeltaT, 0);
    }
    void setDeltaT(const ::omero::RDoublePtr& theDeltaT, const ::Ice::Context& __ctx)
    {
        setDeltaT(theDeltaT, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setDeltaT(const ::omero::RDoublePtr& theDeltaT, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setDeltaT(theDeltaT, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setDeltaT(const ::omero::RDoublePtr& theDeltaT, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setDeltaT(theDeltaT, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setDeltaT(const ::omero::RDoublePtr& theDeltaT, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setDeltaT(theDeltaT, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setDeltaT(const ::omero::RDoublePtr& theDeltaT, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setDeltaT(theDeltaT, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setDeltaT(const ::omero::RDoublePtr& theDeltaT)
    {
        return begin_setDeltaT(theDeltaT, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setDeltaT(const ::omero::RDoublePtr& theDeltaT, const ::Ice::Context& __ctx)
    {
        return begin_setDeltaT(theDeltaT, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setDeltaT(const ::omero::RDoublePtr& theDeltaT, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDeltaT(theDeltaT, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDeltaT(const ::omero::RDoublePtr& theDeltaT, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDeltaT(theDeltaT, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDeltaT(const ::omero::RDoublePtr& theDeltaT, const ::omero::model::Callback_PlaneInfo_setDeltaTPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDeltaT(theDeltaT, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDeltaT(const ::omero::RDoublePtr& theDeltaT, const ::Ice::Context& __ctx, const ::omero::model::Callback_PlaneInfo_setDeltaTPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDeltaT(theDeltaT, &__ctx, __del, __cookie);
    }

    void end_setDeltaT(const ::Ice::AsyncResultPtr&);
    
private:

    void setDeltaT(const ::omero::RDoublePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setDeltaT(const ::omero::RDoublePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RDoublePtr getPositionX()
    {
        return getPositionX(0);
    }
    ::omero::RDoublePtr getPositionX(const ::Ice::Context& __ctx)
    {
        return getPositionX(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getPositionX(const ::IceInternal::Function<void (const ::omero::RDoublePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPositionX(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPositionX(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPositionX(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getPositionX(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RDoublePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPositionX(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPositionX(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPositionX(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getPositionX(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RDoublePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RDoublePtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PlaneInfoPrx __proxy = ::omero::model::PlaneInfoPrx::uncheckedCast(__result->getProxy());
                ::omero::RDoublePtr __ret;
                try
                {
                    __ret = __proxy->end_getPositionX(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RDoublePtr&)> _response;
        };
        return begin_getPositionX(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getPositionX()
    {
        return begin_getPositionX(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPositionX(const ::Ice::Context& __ctx)
    {
        return begin_getPositionX(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPositionX(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPositionX(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPositionX(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPositionX(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPositionX(const ::omero::model::Callback_PlaneInfo_getPositionXPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPositionX(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPositionX(const ::Ice::Context& __ctx, const ::omero::model::Callback_PlaneInfo_getPositionXPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPositionX(&__ctx, __del, __cookie);
    }

    ::omero::RDoublePtr end_getPositionX(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RDoublePtr getPositionX(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getPositionX(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setPositionX(const ::omero::RDoublePtr& thePositionX)
    {
        setPositionX(thePositionX, 0);
    }
    void setPositionX(const ::omero::RDoublePtr& thePositionX, const ::Ice::Context& __ctx)
    {
        setPositionX(thePositionX, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setPositionX(const ::omero::RDoublePtr& thePositionX, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setPositionX(thePositionX, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setPositionX(const ::omero::RDoublePtr& thePositionX, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPositionX(thePositionX, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setPositionX(const ::omero::RDoublePtr& thePositionX, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setPositionX(thePositionX, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setPositionX(const ::omero::RDoublePtr& thePositionX, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPositionX(thePositionX, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setPositionX(const ::omero::RDoublePtr& thePositionX)
    {
        return begin_setPositionX(thePositionX, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPositionX(const ::omero::RDoublePtr& thePositionX, const ::Ice::Context& __ctx)
    {
        return begin_setPositionX(thePositionX, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPositionX(const ::omero::RDoublePtr& thePositionX, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPositionX(thePositionX, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPositionX(const ::omero::RDoublePtr& thePositionX, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPositionX(thePositionX, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPositionX(const ::omero::RDoublePtr& thePositionX, const ::omero::model::Callback_PlaneInfo_setPositionXPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPositionX(thePositionX, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPositionX(const ::omero::RDoublePtr& thePositionX, const ::Ice::Context& __ctx, const ::omero::model::Callback_PlaneInfo_setPositionXPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPositionX(thePositionX, &__ctx, __del, __cookie);
    }

    void end_setPositionX(const ::Ice::AsyncResultPtr&);
    
private:

    void setPositionX(const ::omero::RDoublePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setPositionX(const ::omero::RDoublePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RDoublePtr getPositionY()
    {
        return getPositionY(0);
    }
    ::omero::RDoublePtr getPositionY(const ::Ice::Context& __ctx)
    {
        return getPositionY(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getPositionY(const ::IceInternal::Function<void (const ::omero::RDoublePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPositionY(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPositionY(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPositionY(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getPositionY(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RDoublePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPositionY(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPositionY(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPositionY(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getPositionY(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RDoublePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RDoublePtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PlaneInfoPrx __proxy = ::omero::model::PlaneInfoPrx::uncheckedCast(__result->getProxy());
                ::omero::RDoublePtr __ret;
                try
                {
                    __ret = __proxy->end_getPositionY(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RDoublePtr&)> _response;
        };
        return begin_getPositionY(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getPositionY()
    {
        return begin_getPositionY(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPositionY(const ::Ice::Context& __ctx)
    {
        return begin_getPositionY(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPositionY(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPositionY(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPositionY(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPositionY(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPositionY(const ::omero::model::Callback_PlaneInfo_getPositionYPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPositionY(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPositionY(const ::Ice::Context& __ctx, const ::omero::model::Callback_PlaneInfo_getPositionYPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPositionY(&__ctx, __del, __cookie);
    }

    ::omero::RDoublePtr end_getPositionY(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RDoublePtr getPositionY(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getPositionY(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setPositionY(const ::omero::RDoublePtr& thePositionY)
    {
        setPositionY(thePositionY, 0);
    }
    void setPositionY(const ::omero::RDoublePtr& thePositionY, const ::Ice::Context& __ctx)
    {
        setPositionY(thePositionY, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setPositionY(const ::omero::RDoublePtr& thePositionY, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setPositionY(thePositionY, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setPositionY(const ::omero::RDoublePtr& thePositionY, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPositionY(thePositionY, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setPositionY(const ::omero::RDoublePtr& thePositionY, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setPositionY(thePositionY, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setPositionY(const ::omero::RDoublePtr& thePositionY, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPositionY(thePositionY, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setPositionY(const ::omero::RDoublePtr& thePositionY)
    {
        return begin_setPositionY(thePositionY, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPositionY(const ::omero::RDoublePtr& thePositionY, const ::Ice::Context& __ctx)
    {
        return begin_setPositionY(thePositionY, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPositionY(const ::omero::RDoublePtr& thePositionY, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPositionY(thePositionY, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPositionY(const ::omero::RDoublePtr& thePositionY, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPositionY(thePositionY, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPositionY(const ::omero::RDoublePtr& thePositionY, const ::omero::model::Callback_PlaneInfo_setPositionYPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPositionY(thePositionY, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPositionY(const ::omero::RDoublePtr& thePositionY, const ::Ice::Context& __ctx, const ::omero::model::Callback_PlaneInfo_setPositionYPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPositionY(thePositionY, &__ctx, __del, __cookie);
    }

    void end_setPositionY(const ::Ice::AsyncResultPtr&);
    
private:

    void setPositionY(const ::omero::RDoublePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setPositionY(const ::omero::RDoublePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RDoublePtr getPositionZ()
    {
        return getPositionZ(0);
    }
    ::omero::RDoublePtr getPositionZ(const ::Ice::Context& __ctx)
    {
        return getPositionZ(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getPositionZ(const ::IceInternal::Function<void (const ::omero::RDoublePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPositionZ(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPositionZ(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPositionZ(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getPositionZ(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RDoublePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPositionZ(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPositionZ(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPositionZ(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getPositionZ(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RDoublePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RDoublePtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PlaneInfoPrx __proxy = ::omero::model::PlaneInfoPrx::uncheckedCast(__result->getProxy());
                ::omero::RDoublePtr __ret;
                try
                {
                    __ret = __proxy->end_getPositionZ(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RDoublePtr&)> _response;
        };
        return begin_getPositionZ(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getPositionZ()
    {
        return begin_getPositionZ(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPositionZ(const ::Ice::Context& __ctx)
    {
        return begin_getPositionZ(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPositionZ(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPositionZ(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPositionZ(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPositionZ(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPositionZ(const ::omero::model::Callback_PlaneInfo_getPositionZPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPositionZ(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPositionZ(const ::Ice::Context& __ctx, const ::omero::model::Callback_PlaneInfo_getPositionZPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPositionZ(&__ctx, __del, __cookie);
    }

    ::omero::RDoublePtr end_getPositionZ(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RDoublePtr getPositionZ(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getPositionZ(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setPositionZ(const ::omero::RDoublePtr& thePositionZ)
    {
        setPositionZ(thePositionZ, 0);
    }
    void setPositionZ(const ::omero::RDoublePtr& thePositionZ, const ::Ice::Context& __ctx)
    {
        setPositionZ(thePositionZ, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setPositionZ(const ::omero::RDoublePtr& thePositionZ, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setPositionZ(thePositionZ, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setPositionZ(const ::omero::RDoublePtr& thePositionZ, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPositionZ(thePositionZ, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setPositionZ(const ::omero::RDoublePtr& thePositionZ, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setPositionZ(thePositionZ, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setPositionZ(const ::omero::RDoublePtr& thePositionZ, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPositionZ(thePositionZ, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setPositionZ(const ::omero::RDoublePtr& thePositionZ)
    {
        return begin_setPositionZ(thePositionZ, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPositionZ(const ::omero::RDoublePtr& thePositionZ, const ::Ice::Context& __ctx)
    {
        return begin_setPositionZ(thePositionZ, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPositionZ(const ::omero::RDoublePtr& thePositionZ, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPositionZ(thePositionZ, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPositionZ(const ::omero::RDoublePtr& thePositionZ, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPositionZ(thePositionZ, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPositionZ(const ::omero::RDoublePtr& thePositionZ, const ::omero::model::Callback_PlaneInfo_setPositionZPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPositionZ(thePositionZ, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPositionZ(const ::omero::RDoublePtr& thePositionZ, const ::Ice::Context& __ctx, const ::omero::model::Callback_PlaneInfo_setPositionZPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPositionZ(thePositionZ, &__ctx, __del, __cookie);
    }

    void end_setPositionZ(const ::Ice::AsyncResultPtr&);
    
private:

    void setPositionZ(const ::omero::RDoublePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setPositionZ(const ::omero::RDoublePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RDoublePtr getExposureTime()
    {
        return getExposureTime(0);
    }
    ::omero::RDoublePtr getExposureTime(const ::Ice::Context& __ctx)
    {
        return getExposureTime(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getExposureTime(const ::IceInternal::Function<void (const ::omero::RDoublePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getExposureTime(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getExposureTime(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getExposureTime(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getExposureTime(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RDoublePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getExposureTime(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getExposureTime(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getExposureTime(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getExposureTime(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RDoublePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RDoublePtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PlaneInfoPrx __proxy = ::omero::model::PlaneInfoPrx::uncheckedCast(__result->getProxy());
                ::omero::RDoublePtr __ret;
                try
                {
                    __ret = __proxy->end_getExposureTime(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RDoublePtr&)> _response;
        };
        return begin_getExposureTime(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getExposureTime()
    {
        return begin_getExposureTime(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getExposureTime(const ::Ice::Context& __ctx)
    {
        return begin_getExposureTime(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getExposureTime(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getExposureTime(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getExposureTime(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getExposureTime(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getExposureTime(const ::omero::model::Callback_PlaneInfo_getExposureTimePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getExposureTime(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getExposureTime(const ::Ice::Context& __ctx, const ::omero::model::Callback_PlaneInfo_getExposureTimePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getExposureTime(&__ctx, __del, __cookie);
    }

    ::omero::RDoublePtr end_getExposureTime(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RDoublePtr getExposureTime(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getExposureTime(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setExposureTime(const ::omero::RDoublePtr& theExposureTime)
    {
        setExposureTime(theExposureTime, 0);
    }
    void setExposureTime(const ::omero::RDoublePtr& theExposureTime, const ::Ice::Context& __ctx)
    {
        setExposureTime(theExposureTime, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setExposureTime(const ::omero::RDoublePtr& theExposureTime, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setExposureTime(theExposureTime, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setExposureTime(const ::omero::RDoublePtr& theExposureTime, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setExposureTime(theExposureTime, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setExposureTime(const ::omero::RDoublePtr& theExposureTime, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setExposureTime(theExposureTime, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setExposureTime(const ::omero::RDoublePtr& theExposureTime, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setExposureTime(theExposureTime, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setExposureTime(const ::omero::RDoublePtr& theExposureTime)
    {
        return begin_setExposureTime(theExposureTime, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setExposureTime(const ::omero::RDoublePtr& theExposureTime, const ::Ice::Context& __ctx)
    {
        return begin_setExposureTime(theExposureTime, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setExposureTime(const ::omero::RDoublePtr& theExposureTime, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setExposureTime(theExposureTime, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setExposureTime(const ::omero::RDoublePtr& theExposureTime, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setExposureTime(theExposureTime, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setExposureTime(const ::omero::RDoublePtr& theExposureTime, const ::omero::model::Callback_PlaneInfo_setExposureTimePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setExposureTime(theExposureTime, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setExposureTime(const ::omero::RDoublePtr& theExposureTime, const ::Ice::Context& __ctx, const ::omero::model::Callback_PlaneInfo_setExposureTimePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setExposureTime(theExposureTime, &__ctx, __del, __cookie);
    }

    void end_setExposureTime(const ::Ice::AsyncResultPtr&);
    
private:

    void setExposureTime(const ::omero::RDoublePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setExposureTime(const ::omero::RDoublePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unloadAnnotationLinks()
    {
        unloadAnnotationLinks(0);
    }
    void unloadAnnotationLinks(const ::Ice::Context& __ctx)
    {
        unloadAnnotationLinks(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_unloadAnnotationLinks(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unloadAnnotationLinks(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_unloadAnnotationLinks(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unloadAnnotationLinks(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unloadAnnotationLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unloadAnnotationLinks(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unloadAnnotationLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unloadAnnotationLinks(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks()
    {
        return begin_unloadAnnotationLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return begin_unloadAnnotationLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::omero::model::Callback_PlaneInfo_unloadAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_PlaneInfo_unloadAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadAnnotationLinks(&__ctx, __del, __cookie);
    }

    void end_unloadAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    void unloadAnnotationLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int sizeOfAnnotationLinks()
    {
        return sizeOfAnnotationLinks(0);
    }
    ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return sizeOfAnnotationLinks(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_sizeOfAnnotationLinks(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sizeOfAnnotationLinks(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfAnnotationLinks(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sizeOfAnnotationLinks(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfAnnotationLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sizeOfAnnotationLinks(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfAnnotationLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sizeOfAnnotationLinks(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_sizeOfAnnotationLinks(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PlaneInfoPrx __proxy = ::omero::model::PlaneInfoPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_sizeOfAnnotationLinks(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_sizeOfAnnotationLinks(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks()
    {
        return begin_sizeOfAnnotationLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return begin_sizeOfAnnotationLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::omero::model::Callback_PlaneInfo_sizeOfAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_PlaneInfo_sizeOfAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_sizeOfAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::PlaneInfoAnnotationLinksSeq copyAnnotationLinks()
    {
        return copyAnnotationLinks(0);
    }
    ::omero::model::PlaneInfoAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return copyAnnotationLinks(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_copyAnnotationLinks(const ::IceInternal::Function<void (const ::omero::model::PlaneInfoAnnotationLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_copyAnnotationLinks(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_copyAnnotationLinks(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_copyAnnotationLinks(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_copyAnnotationLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::PlaneInfoAnnotationLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_copyAnnotationLinks(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_copyAnnotationLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_copyAnnotationLinks(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_copyAnnotationLinks(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::PlaneInfoAnnotationLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::PlaneInfoAnnotationLinksSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PlaneInfoPrx __proxy = ::omero::model::PlaneInfoPrx::uncheckedCast(__result->getProxy());
                ::omero::model::PlaneInfoAnnotationLinksSeq __ret;
                try
                {
                    __ret = __proxy->end_copyAnnotationLinks(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::PlaneInfoAnnotationLinksSeq&)> _response;
        };
        return begin_copyAnnotationLinks(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks()
    {
        return begin_copyAnnotationLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return begin_copyAnnotationLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::omero::model::Callback_PlaneInfo_copyAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_PlaneInfo_copyAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::omero::model::PlaneInfoAnnotationLinksSeq end_copyAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::PlaneInfoAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addPlaneInfoAnnotationLink(const ::omero::model::PlaneInfoAnnotationLinkPtr& target)
    {
        addPlaneInfoAnnotationLink(target, 0);
    }
    void addPlaneInfoAnnotationLink(const ::omero::model::PlaneInfoAnnotationLinkPtr& target, const ::Ice::Context& __ctx)
    {
        addPlaneInfoAnnotationLink(target, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addPlaneInfoAnnotationLink(const ::omero::model::PlaneInfoAnnotationLinkPtr& target, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addPlaneInfoAnnotationLink(target, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addPlaneInfoAnnotationLink(const ::omero::model::PlaneInfoAnnotationLinkPtr& target, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addPlaneInfoAnnotationLink(target, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addPlaneInfoAnnotationLink(const ::omero::model::PlaneInfoAnnotationLinkPtr& target, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addPlaneInfoAnnotationLink(target, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addPlaneInfoAnnotationLink(const ::omero::model::PlaneInfoAnnotationLinkPtr& target, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addPlaneInfoAnnotationLink(target, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addPlaneInfoAnnotationLink(const ::omero::model::PlaneInfoAnnotationLinkPtr& target)
    {
        return begin_addPlaneInfoAnnotationLink(target, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addPlaneInfoAnnotationLink(const ::omero::model::PlaneInfoAnnotationLinkPtr& target, const ::Ice::Context& __ctx)
    {
        return begin_addPlaneInfoAnnotationLink(target, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addPlaneInfoAnnotationLink(const ::omero::model::PlaneInfoAnnotationLinkPtr& target, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPlaneInfoAnnotationLink(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addPlaneInfoAnnotationLink(const ::omero::model::PlaneInfoAnnotationLinkPtr& target, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPlaneInfoAnnotationLink(target, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addPlaneInfoAnnotationLink(const ::omero::model::PlaneInfoAnnotationLinkPtr& target, const ::omero::model::Callback_PlaneInfo_addPlaneInfoAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPlaneInfoAnnotationLink(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addPlaneInfoAnnotationLink(const ::omero::model::PlaneInfoAnnotationLinkPtr& target, const ::Ice::Context& __ctx, const ::omero::model::Callback_PlaneInfo_addPlaneInfoAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPlaneInfoAnnotationLink(target, &__ctx, __del, __cookie);
    }

    void end_addPlaneInfoAnnotationLink(const ::Ice::AsyncResultPtr&);
    
private:

    void addPlaneInfoAnnotationLink(const ::omero::model::PlaneInfoAnnotationLinkPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addPlaneInfoAnnotationLink(const ::omero::model::PlaneInfoAnnotationLinkPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addAllPlaneInfoAnnotationLinkSet(const ::omero::model::PlaneInfoAnnotationLinksSeq& targets)
    {
        addAllPlaneInfoAnnotationLinkSet(targets, 0);
    }
    void addAllPlaneInfoAnnotationLinkSet(const ::omero::model::PlaneInfoAnnotationLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        addAllPlaneInfoAnnotationLinkSet(targets, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addAllPlaneInfoAnnotationLinkSet(const ::omero::model::PlaneInfoAnnotationLinksSeq& targets, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addAllPlaneInfoAnnotationLinkSet(targets, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addAllPlaneInfoAnnotationLinkSet(const ::omero::model::PlaneInfoAnnotationLinksSeq& targets, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addAllPlaneInfoAnnotationLinkSet(targets, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addAllPlaneInfoAnnotationLinkSet(const ::omero::model::PlaneInfoAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addAllPlaneInfoAnnotationLinkSet(targets, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addAllPlaneInfoAnnotationLinkSet(const ::omero::model::PlaneInfoAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addAllPlaneInfoAnnotationLinkSet(targets, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addAllPlaneInfoAnnotationLinkSet(const ::omero::model::PlaneInfoAnnotationLinksSeq& targets)
    {
        return begin_addAllPlaneInfoAnnotationLinkSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllPlaneInfoAnnotationLinkSet(const ::omero::model::PlaneInfoAnnotationLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_addAllPlaneInfoAnnotationLinkSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllPlaneInfoAnnotationLinkSet(const ::omero::model::PlaneInfoAnnotationLinksSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllPlaneInfoAnnotationLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllPlaneInfoAnnotationLinkSet(const ::omero::model::PlaneInfoAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllPlaneInfoAnnotationLinkSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllPlaneInfoAnnotationLinkSet(const ::omero::model::PlaneInfoAnnotationLinksSeq& targets, const ::omero::model::Callback_PlaneInfo_addAllPlaneInfoAnnotationLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllPlaneInfoAnnotationLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllPlaneInfoAnnotationLinkSet(const ::omero::model::PlaneInfoAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_PlaneInfo_addAllPlaneInfoAnnotationLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllPlaneInfoAnnotationLinkSet(targets, &__ctx, __del, __cookie);
    }

    void end_addAllPlaneInfoAnnotationLinkSet(const ::Ice::AsyncResultPtr&);
    
private:

    void addAllPlaneInfoAnnotationLinkSet(const ::omero::model::PlaneInfoAnnotationLinksSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addAllPlaneInfoAnnotationLinkSet(const ::omero::model::PlaneInfoAnnotationLinksSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removePlaneInfoAnnotationLink(const ::omero::model::PlaneInfoAnnotationLinkPtr& theTarget)
    {
        removePlaneInfoAnnotationLink(theTarget, 0);
    }
    void removePlaneInfoAnnotationLink(const ::omero::model::PlaneInfoAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx)
    {
        removePlaneInfoAnnotationLink(theTarget, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removePlaneInfoAnnotationLink(const ::omero::model::PlaneInfoAnnotationLinkPtr& theTarget, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removePlaneInfoAnnotationLink(theTarget, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removePlaneInfoAnnotationLink(const ::omero::model::PlaneInfoAnnotationLinkPtr& theTarget, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removePlaneInfoAnnotationLink(theTarget, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removePlaneInfoAnnotationLink(const ::omero::model::PlaneInfoAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removePlaneInfoAnnotationLink(theTarget, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removePlaneInfoAnnotationLink(const ::omero::model::PlaneInfoAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removePlaneInfoAnnotationLink(theTarget, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removePlaneInfoAnnotationLink(const ::omero::model::PlaneInfoAnnotationLinkPtr& theTarget)
    {
        return begin_removePlaneInfoAnnotationLink(theTarget, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removePlaneInfoAnnotationLink(const ::omero::model::PlaneInfoAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx)
    {
        return begin_removePlaneInfoAnnotationLink(theTarget, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removePlaneInfoAnnotationLink(const ::omero::model::PlaneInfoAnnotationLinkPtr& theTarget, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removePlaneInfoAnnotationLink(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removePlaneInfoAnnotationLink(const ::omero::model::PlaneInfoAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removePlaneInfoAnnotationLink(theTarget, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removePlaneInfoAnnotationLink(const ::omero::model::PlaneInfoAnnotationLinkPtr& theTarget, const ::omero::model::Callback_PlaneInfo_removePlaneInfoAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removePlaneInfoAnnotationLink(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removePlaneInfoAnnotationLink(const ::omero::model::PlaneInfoAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::omero::model::Callback_PlaneInfo_removePlaneInfoAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removePlaneInfoAnnotationLink(theTarget, &__ctx, __del, __cookie);
    }

    void end_removePlaneInfoAnnotationLink(const ::Ice::AsyncResultPtr&);
    
private:

    void removePlaneInfoAnnotationLink(const ::omero::model::PlaneInfoAnnotationLinkPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removePlaneInfoAnnotationLink(const ::omero::model::PlaneInfoAnnotationLinkPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeAllPlaneInfoAnnotationLinkSet(const ::omero::model::PlaneInfoAnnotationLinksSeq& targets)
    {
        removeAllPlaneInfoAnnotationLinkSet(targets, 0);
    }
    void removeAllPlaneInfoAnnotationLinkSet(const ::omero::model::PlaneInfoAnnotationLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        removeAllPlaneInfoAnnotationLinkSet(targets, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeAllPlaneInfoAnnotationLinkSet(const ::omero::model::PlaneInfoAnnotationLinksSeq& targets, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeAllPlaneInfoAnnotationLinkSet(targets, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeAllPlaneInfoAnnotationLinkSet(const ::omero::model::PlaneInfoAnnotationLinksSeq& targets, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeAllPlaneInfoAnnotationLinkSet(targets, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeAllPlaneInfoAnnotationLinkSet(const ::omero::model::PlaneInfoAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeAllPlaneInfoAnnotationLinkSet(targets, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeAllPlaneInfoAnnotationLinkSet(const ::omero::model::PlaneInfoAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeAllPlaneInfoAnnotationLinkSet(targets, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeAllPlaneInfoAnnotationLinkSet(const ::omero::model::PlaneInfoAnnotationLinksSeq& targets)
    {
        return begin_removeAllPlaneInfoAnnotationLinkSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllPlaneInfoAnnotationLinkSet(const ::omero::model::PlaneInfoAnnotationLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_removeAllPlaneInfoAnnotationLinkSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllPlaneInfoAnnotationLinkSet(const ::omero::model::PlaneInfoAnnotationLinksSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllPlaneInfoAnnotationLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllPlaneInfoAnnotationLinkSet(const ::omero::model::PlaneInfoAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllPlaneInfoAnnotationLinkSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllPlaneInfoAnnotationLinkSet(const ::omero::model::PlaneInfoAnnotationLinksSeq& targets, const ::omero::model::Callback_PlaneInfo_removeAllPlaneInfoAnnotationLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllPlaneInfoAnnotationLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllPlaneInfoAnnotationLinkSet(const ::omero::model::PlaneInfoAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_PlaneInfo_removeAllPlaneInfoAnnotationLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllPlaneInfoAnnotationLinkSet(targets, &__ctx, __del, __cookie);
    }

    void end_removeAllPlaneInfoAnnotationLinkSet(const ::Ice::AsyncResultPtr&);
    
private:

    void removeAllPlaneInfoAnnotationLinkSet(const ::omero::model::PlaneInfoAnnotationLinksSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeAllPlaneInfoAnnotationLinkSet(const ::omero::model::PlaneInfoAnnotationLinksSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void clearAnnotationLinks()
    {
        clearAnnotationLinks(0);
    }
    void clearAnnotationLinks(const ::Ice::Context& __ctx)
    {
        clearAnnotationLinks(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_clearAnnotationLinks(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_clearAnnotationLinks(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_clearAnnotationLinks(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_clearAnnotationLinks(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_clearAnnotationLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_clearAnnotationLinks(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_clearAnnotationLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_clearAnnotationLinks(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks()
    {
        return begin_clearAnnotationLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return begin_clearAnnotationLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::omero::model::Callback_PlaneInfo_clearAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_PlaneInfo_clearAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearAnnotationLinks(&__ctx, __del, __cookie);
    }

    void end_clearAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    void clearAnnotationLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reloadAnnotationLinks(const ::omero::model::PlaneInfoPtr& toCopy)
    {
        reloadAnnotationLinks(toCopy, 0);
    }
    void reloadAnnotationLinks(const ::omero::model::PlaneInfoPtr& toCopy, const ::Ice::Context& __ctx)
    {
        reloadAnnotationLinks(toCopy, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_reloadAnnotationLinks(const ::omero::model::PlaneInfoPtr& toCopy, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reloadAnnotationLinks(toCopy, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_reloadAnnotationLinks(const ::omero::model::PlaneInfoPtr& toCopy, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reloadAnnotationLinks(toCopy, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reloadAnnotationLinks(const ::omero::model::PlaneInfoPtr& toCopy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reloadAnnotationLinks(toCopy, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reloadAnnotationLinks(const ::omero::model::PlaneInfoPtr& toCopy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reloadAnnotationLinks(toCopy, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::PlaneInfoPtr& toCopy)
    {
        return begin_reloadAnnotationLinks(toCopy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::PlaneInfoPtr& toCopy, const ::Ice::Context& __ctx)
    {
        return begin_reloadAnnotationLinks(toCopy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::PlaneInfoPtr& toCopy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadAnnotationLinks(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::PlaneInfoPtr& toCopy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadAnnotationLinks(toCopy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::PlaneInfoPtr& toCopy, const ::omero::model::Callback_PlaneInfo_reloadAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadAnnotationLinks(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::PlaneInfoPtr& toCopy, const ::Ice::Context& __ctx, const ::omero::model::Callback_PlaneInfo_reloadAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadAnnotationLinks(toCopy, &__ctx, __del, __cookie);
    }

    void end_reloadAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    void reloadAnnotationLinks(const ::omero::model::PlaneInfoPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::PlaneInfoPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::sys::CountMap getAnnotationLinksCountPerOwner()
    {
        return getAnnotationLinksCountPerOwner(0);
    }
    ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx)
    {
        return getAnnotationLinksCountPerOwner(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getAnnotationLinksCountPerOwner(const ::IceInternal::Function<void (const ::omero::sys::CountMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAnnotationLinksCountPerOwner(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAnnotationLinksCountPerOwner(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAnnotationLinksCountPerOwner(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::sys::CountMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAnnotationLinksCountPerOwner(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAnnotationLinksCountPerOwner(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getAnnotationLinksCountPerOwner(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::sys::CountMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::sys::CountMap&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PlaneInfoPrx __proxy = ::omero::model::PlaneInfoPrx::uncheckedCast(__result->getProxy());
                ::omero::sys::CountMap __ret;
                try
                {
                    __ret = __proxy->end_getAnnotationLinksCountPerOwner(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::sys::CountMap&)> _response;
        };
        return begin_getAnnotationLinksCountPerOwner(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner()
    {
        return begin_getAnnotationLinksCountPerOwner(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx)
    {
        return begin_getAnnotationLinksCountPerOwner(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAnnotationLinksCountPerOwner(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAnnotationLinksCountPerOwner(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::omero::model::Callback_PlaneInfo_getAnnotationLinksCountPerOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAnnotationLinksCountPerOwner(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx, const ::omero::model::Callback_PlaneInfo_getAnnotationLinksCountPerOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAnnotationLinksCountPerOwner(&__ctx, __del, __cookie);
    }

    ::omero::sys::CountMap end_getAnnotationLinksCountPerOwner(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::PlaneInfoAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr& addition)
    {
        return linkAnnotation(addition, 0);
    }
    ::omero::model::PlaneInfoAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx)
    {
        return linkAnnotation(addition, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::IceInternal::Function<void (const ::omero::model::PlaneInfoAnnotationLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_linkAnnotation(addition, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_linkAnnotation(addition, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::PlaneInfoAnnotationLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_linkAnnotation(addition, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_linkAnnotation(addition, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::PlaneInfoAnnotationLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::PlaneInfoAnnotationLinkPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PlaneInfoPrx __proxy = ::omero::model::PlaneInfoPrx::uncheckedCast(__result->getProxy());
                ::omero::model::PlaneInfoAnnotationLinkPtr __ret;
                try
                {
                    __ret = __proxy->end_linkAnnotation(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::PlaneInfoAnnotationLinkPtr&)> _response;
        };
        return begin_linkAnnotation(addition, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition)
    {
        return begin_linkAnnotation(addition, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx)
    {
        return begin_linkAnnotation(addition, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkAnnotation(addition, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkAnnotation(addition, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::omero::model::Callback_PlaneInfo_linkAnnotationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkAnnotation(addition, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx, const ::omero::model::Callback_PlaneInfo_linkAnnotationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkAnnotation(addition, &__ctx, __del, __cookie);
    }

    ::omero::model::PlaneInfoAnnotationLinkPtr end_linkAnnotation(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::PlaneInfoAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addPlaneInfoAnnotationLinkToBoth(const ::omero::model::PlaneInfoAnnotationLinkPtr& link, bool bothSides)
    {
        addPlaneInfoAnnotationLinkToBoth(link, bothSides, 0);
    }
    void addPlaneInfoAnnotationLinkToBoth(const ::omero::model::PlaneInfoAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        addPlaneInfoAnnotationLinkToBoth(link, bothSides, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addPlaneInfoAnnotationLinkToBoth(const ::omero::model::PlaneInfoAnnotationLinkPtr& link, bool bothSides, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addPlaneInfoAnnotationLinkToBoth(link, bothSides, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addPlaneInfoAnnotationLinkToBoth(const ::omero::model::PlaneInfoAnnotationLinkPtr& link, bool bothSides, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addPlaneInfoAnnotationLinkToBoth(link, bothSides, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addPlaneInfoAnnotationLinkToBoth(const ::omero::model::PlaneInfoAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addPlaneInfoAnnotationLinkToBoth(link, bothSides, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addPlaneInfoAnnotationLinkToBoth(const ::omero::model::PlaneInfoAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addPlaneInfoAnnotationLinkToBoth(link, bothSides, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addPlaneInfoAnnotationLinkToBoth(const ::omero::model::PlaneInfoAnnotationLinkPtr& link, bool bothSides)
    {
        return begin_addPlaneInfoAnnotationLinkToBoth(link, bothSides, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addPlaneInfoAnnotationLinkToBoth(const ::omero::model::PlaneInfoAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        return begin_addPlaneInfoAnnotationLinkToBoth(link, bothSides, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addPlaneInfoAnnotationLinkToBoth(const ::omero::model::PlaneInfoAnnotationLinkPtr& link, bool bothSides, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPlaneInfoAnnotationLinkToBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addPlaneInfoAnnotationLinkToBoth(const ::omero::model::PlaneInfoAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPlaneInfoAnnotationLinkToBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addPlaneInfoAnnotationLinkToBoth(const ::omero::model::PlaneInfoAnnotationLinkPtr& link, bool bothSides, const ::omero::model::Callback_PlaneInfo_addPlaneInfoAnnotationLinkToBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPlaneInfoAnnotationLinkToBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addPlaneInfoAnnotationLinkToBoth(const ::omero::model::PlaneInfoAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::omero::model::Callback_PlaneInfo_addPlaneInfoAnnotationLinkToBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPlaneInfoAnnotationLinkToBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    void end_addPlaneInfoAnnotationLinkToBoth(const ::Ice::AsyncResultPtr&);
    
private:

    void addPlaneInfoAnnotationLinkToBoth(const ::omero::model::PlaneInfoAnnotationLinkPtr&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addPlaneInfoAnnotationLinkToBoth(const ::omero::model::PlaneInfoAnnotationLinkPtr&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::PlaneInfoAnnotationLinksSeq findPlaneInfoAnnotationLink(const ::omero::model::AnnotationPtr& removal)
    {
        return findPlaneInfoAnnotationLink(removal, 0);
    }
    ::omero::model::PlaneInfoAnnotationLinksSeq findPlaneInfoAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx)
    {
        return findPlaneInfoAnnotationLink(removal, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_findPlaneInfoAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::IceInternal::Function<void (const ::omero::model::PlaneInfoAnnotationLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_findPlaneInfoAnnotationLink(removal, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_findPlaneInfoAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_findPlaneInfoAnnotationLink(removal, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_findPlaneInfoAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::PlaneInfoAnnotationLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_findPlaneInfoAnnotationLink(removal, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_findPlaneInfoAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_findPlaneInfoAnnotationLink(removal, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_findPlaneInfoAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::PlaneInfoAnnotationLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::PlaneInfoAnnotationLinksSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PlaneInfoPrx __proxy = ::omero::model::PlaneInfoPrx::uncheckedCast(__result->getProxy());
                ::omero::model::PlaneInfoAnnotationLinksSeq __ret;
                try
                {
                    __ret = __proxy->end_findPlaneInfoAnnotationLink(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::PlaneInfoAnnotationLinksSeq&)> _response;
        };
        return begin_findPlaneInfoAnnotationLink(removal, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_findPlaneInfoAnnotationLink(const ::omero::model::AnnotationPtr& removal)
    {
        return begin_findPlaneInfoAnnotationLink(removal, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findPlaneInfoAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx)
    {
        return begin_findPlaneInfoAnnotationLink(removal, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findPlaneInfoAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findPlaneInfoAnnotationLink(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findPlaneInfoAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findPlaneInfoAnnotationLink(removal, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findPlaneInfoAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::omero::model::Callback_PlaneInfo_findPlaneInfoAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findPlaneInfoAnnotationLink(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findPlaneInfoAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::omero::model::Callback_PlaneInfo_findPlaneInfoAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findPlaneInfoAnnotationLink(removal, &__ctx, __del, __cookie);
    }

    ::omero::model::PlaneInfoAnnotationLinksSeq end_findPlaneInfoAnnotationLink(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::PlaneInfoAnnotationLinksSeq findPlaneInfoAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_findPlaneInfoAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unlinkAnnotation(const ::omero::model::AnnotationPtr& removal)
    {
        unlinkAnnotation(removal, 0);
    }
    void unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx)
    {
        unlinkAnnotation(removal, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unlinkAnnotation(removal, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unlinkAnnotation(removal, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unlinkAnnotation(removal, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unlinkAnnotation(removal, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal)
    {
        return begin_unlinkAnnotation(removal, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx)
    {
        return begin_unlinkAnnotation(removal, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkAnnotation(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkAnnotation(removal, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::omero::model::Callback_PlaneInfo_unlinkAnnotationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkAnnotation(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::omero::model::Callback_PlaneInfo_unlinkAnnotationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkAnnotation(removal, &__ctx, __del, __cookie);
    }

    void end_unlinkAnnotation(const ::Ice::AsyncResultPtr&);
    
private:

    void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removePlaneInfoAnnotationLinkFromBoth(const ::omero::model::PlaneInfoAnnotationLinkPtr& link, bool bothSides)
    {
        removePlaneInfoAnnotationLinkFromBoth(link, bothSides, 0);
    }
    void removePlaneInfoAnnotationLinkFromBoth(const ::omero::model::PlaneInfoAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        removePlaneInfoAnnotationLinkFromBoth(link, bothSides, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removePlaneInfoAnnotationLinkFromBoth(const ::omero::model::PlaneInfoAnnotationLinkPtr& link, bool bothSides, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removePlaneInfoAnnotationLinkFromBoth(link, bothSides, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removePlaneInfoAnnotationLinkFromBoth(const ::omero::model::PlaneInfoAnnotationLinkPtr& link, bool bothSides, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removePlaneInfoAnnotationLinkFromBoth(link, bothSides, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removePlaneInfoAnnotationLinkFromBoth(const ::omero::model::PlaneInfoAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removePlaneInfoAnnotationLinkFromBoth(link, bothSides, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removePlaneInfoAnnotationLinkFromBoth(const ::omero::model::PlaneInfoAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removePlaneInfoAnnotationLinkFromBoth(link, bothSides, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removePlaneInfoAnnotationLinkFromBoth(const ::omero::model::PlaneInfoAnnotationLinkPtr& link, bool bothSides)
    {
        return begin_removePlaneInfoAnnotationLinkFromBoth(link, bothSides, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removePlaneInfoAnnotationLinkFromBoth(const ::omero::model::PlaneInfoAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        return begin_removePlaneInfoAnnotationLinkFromBoth(link, bothSides, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removePlaneInfoAnnotationLinkFromBoth(const ::omero::model::PlaneInfoAnnotationLinkPtr& link, bool bothSides, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removePlaneInfoAnnotationLinkFromBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removePlaneInfoAnnotationLinkFromBoth(const ::omero::model::PlaneInfoAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removePlaneInfoAnnotationLinkFromBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removePlaneInfoAnnotationLinkFromBoth(const ::omero::model::PlaneInfoAnnotationLinkPtr& link, bool bothSides, const ::omero::model::Callback_PlaneInfo_removePlaneInfoAnnotationLinkFromBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removePlaneInfoAnnotationLinkFromBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removePlaneInfoAnnotationLinkFromBoth(const ::omero::model::PlaneInfoAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::omero::model::Callback_PlaneInfo_removePlaneInfoAnnotationLinkFromBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removePlaneInfoAnnotationLinkFromBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    void end_removePlaneInfoAnnotationLinkFromBoth(const ::Ice::AsyncResultPtr&);
    
private:

    void removePlaneInfoAnnotationLinkFromBoth(const ::omero::model::PlaneInfoAnnotationLinkPtr&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removePlaneInfoAnnotationLinkFromBoth(const ::omero::model::PlaneInfoAnnotationLinkPtr&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::PlaneInfoLinkedAnnotationSeq linkedAnnotationList()
    {
        return linkedAnnotationList(0);
    }
    ::omero::model::PlaneInfoLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context& __ctx)
    {
        return linkedAnnotationList(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_linkedAnnotationList(const ::IceInternal::Function<void (const ::omero::model::PlaneInfoLinkedAnnotationSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_linkedAnnotationList(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_linkedAnnotationList(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_linkedAnnotationList(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_linkedAnnotationList(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::PlaneInfoLinkedAnnotationSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_linkedAnnotationList(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_linkedAnnotationList(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_linkedAnnotationList(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_linkedAnnotationList(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::PlaneInfoLinkedAnnotationSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::PlaneInfoLinkedAnnotationSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PlaneInfoPrx __proxy = ::omero::model::PlaneInfoPrx::uncheckedCast(__result->getProxy());
                ::omero::model::PlaneInfoLinkedAnnotationSeq __ret;
                try
                {
                    __ret = __proxy->end_linkedAnnotationList(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::PlaneInfoLinkedAnnotationSeq&)> _response;
        };
        return begin_linkedAnnotationList(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_linkedAnnotationList()
    {
        return begin_linkedAnnotationList(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::Context& __ctx)
    {
        return begin_linkedAnnotationList(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedAnnotationList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedAnnotationList(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::omero::model::Callback_PlaneInfo_linkedAnnotationListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedAnnotationList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::Context& __ctx, const ::omero::model::Callback_PlaneInfo_linkedAnnotationListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedAnnotationList(&__ctx, __del, __cookie);
    }

    ::omero::model::PlaneInfoLinkedAnnotationSeq end_linkedAnnotationList(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::PlaneInfoLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<PlaneInfo> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<PlaneInfo*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<PlaneInfo> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<PlaneInfo*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<PlaneInfo> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<PlaneInfo*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<PlaneInfo> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<PlaneInfo*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<PlaneInfo> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<PlaneInfo*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<PlaneInfo> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<PlaneInfo*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<PlaneInfo> ice_secure(bool __secure) const
    {
        return dynamic_cast<PlaneInfo*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<PlaneInfo> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<PlaneInfo*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<PlaneInfo> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<PlaneInfo*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<PlaneInfo> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<PlaneInfo*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<PlaneInfo> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<PlaneInfo*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<PlaneInfo> ice_twoway() const
    {
        return dynamic_cast<PlaneInfo*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<PlaneInfo> ice_oneway() const
    {
        return dynamic_cast<PlaneInfo*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<PlaneInfo> ice_batchOneway() const
    {
        return dynamic_cast<PlaneInfo*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<PlaneInfo> ice_datagram() const
    {
        return dynamic_cast<PlaneInfo*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<PlaneInfo> ice_batchDatagram() const
    {
        return dynamic_cast<PlaneInfo*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<PlaneInfo> ice_compress(bool __compress) const
    {
        return dynamic_cast<PlaneInfo*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<PlaneInfo> ice_timeout(int __timeout) const
    {
        return dynamic_cast<PlaneInfo*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<PlaneInfo> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<PlaneInfo*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<PlaneInfo> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<PlaneInfo*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

namespace IceDelegate
{

namespace omero
{

namespace model
{

class PlaneInfo : virtual public ::IceDelegate::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::PixelsPtr getPixels(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setPixels(const ::omero::model::PixelsPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RIntPtr getTheZ(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setTheZ(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RIntPtr getTheC(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setTheC(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RIntPtr getTheT(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setTheT(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RDoublePtr getDeltaT(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setDeltaT(const ::omero::RDoublePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RDoublePtr getPositionX(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setPositionX(const ::omero::RDoublePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RDoublePtr getPositionY(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setPositionY(const ::omero::RDoublePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RDoublePtr getPositionZ(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setPositionZ(const ::omero::RDoublePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RDoublePtr getExposureTime(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setExposureTime(const ::omero::RDoublePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void unloadAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::PlaneInfoAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addPlaneInfoAnnotationLink(const ::omero::model::PlaneInfoAnnotationLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addAllPlaneInfoAnnotationLinkSet(const ::omero::model::PlaneInfoAnnotationLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removePlaneInfoAnnotationLink(const ::omero::model::PlaneInfoAnnotationLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeAllPlaneInfoAnnotationLinkSet(const ::omero::model::PlaneInfoAnnotationLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void clearAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void reloadAnnotationLinks(const ::omero::model::PlaneInfoPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::PlaneInfoAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addPlaneInfoAnnotationLinkToBoth(const ::omero::model::PlaneInfoAnnotationLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::PlaneInfoAnnotationLinksSeq findPlaneInfoAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removePlaneInfoAnnotationLinkFromBoth(const ::omero::model::PlaneInfoAnnotationLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::PlaneInfoLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

}

namespace IceDelegateM
{

namespace omero
{

namespace model
{

class PlaneInfo : virtual public ::IceDelegate::omero::model::PlaneInfo,
                  virtual public ::IceDelegateM::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::PixelsPtr getPixels(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setPixels(const ::omero::model::PixelsPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RIntPtr getTheZ(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setTheZ(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RIntPtr getTheC(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setTheC(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RIntPtr getTheT(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setTheT(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RDoublePtr getDeltaT(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setDeltaT(const ::omero::RDoublePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RDoublePtr getPositionX(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setPositionX(const ::omero::RDoublePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RDoublePtr getPositionY(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setPositionY(const ::omero::RDoublePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RDoublePtr getPositionZ(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setPositionZ(const ::omero::RDoublePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RDoublePtr getExposureTime(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setExposureTime(const ::omero::RDoublePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unloadAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::PlaneInfoAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addPlaneInfoAnnotationLink(const ::omero::model::PlaneInfoAnnotationLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addAllPlaneInfoAnnotationLinkSet(const ::omero::model::PlaneInfoAnnotationLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removePlaneInfoAnnotationLink(const ::omero::model::PlaneInfoAnnotationLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeAllPlaneInfoAnnotationLinkSet(const ::omero::model::PlaneInfoAnnotationLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void clearAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void reloadAnnotationLinks(const ::omero::model::PlaneInfoPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::PlaneInfoAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addPlaneInfoAnnotationLinkToBoth(const ::omero::model::PlaneInfoAnnotationLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::PlaneInfoAnnotationLinksSeq findPlaneInfoAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removePlaneInfoAnnotationLinkFromBoth(const ::omero::model::PlaneInfoAnnotationLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::PlaneInfoLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace IceDelegateD
{

namespace omero
{

namespace model
{

class PlaneInfo : virtual public ::IceDelegate::omero::model::PlaneInfo,
                  virtual public ::IceDelegateD::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::PixelsPtr getPixels(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setPixels(const ::omero::model::PixelsPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RIntPtr getTheZ(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setTheZ(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RIntPtr getTheC(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setTheC(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RIntPtr getTheT(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setTheT(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RDoublePtr getDeltaT(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setDeltaT(const ::omero::RDoublePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RDoublePtr getPositionX(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setPositionX(const ::omero::RDoublePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RDoublePtr getPositionY(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setPositionY(const ::omero::RDoublePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RDoublePtr getPositionZ(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setPositionZ(const ::omero::RDoublePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RDoublePtr getExposureTime(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setExposureTime(const ::omero::RDoublePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unloadAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::PlaneInfoAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addPlaneInfoAnnotationLink(const ::omero::model::PlaneInfoAnnotationLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addAllPlaneInfoAnnotationLinkSet(const ::omero::model::PlaneInfoAnnotationLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removePlaneInfoAnnotationLink(const ::omero::model::PlaneInfoAnnotationLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeAllPlaneInfoAnnotationLinkSet(const ::omero::model::PlaneInfoAnnotationLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void clearAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void reloadAnnotationLinks(const ::omero::model::PlaneInfoPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::PlaneInfoAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addPlaneInfoAnnotationLinkToBoth(const ::omero::model::PlaneInfoAnnotationLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::PlaneInfoAnnotationLinksSeq findPlaneInfoAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removePlaneInfoAnnotationLinkFromBoth(const ::omero::model::PlaneInfoAnnotationLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::PlaneInfoLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace omero
{

namespace model
{

class PlaneInfo : public ::omero::model::IObject
{
public:

    typedef PlaneInfoPrx ProxyType;
    typedef PlaneInfoPtr PointerType;

    PlaneInfo()
    {
    }

    PlaneInfo(const ::omero::RLongPtr& __ice_id, const ::omero::model::DetailsPtr& __ice_details, bool __ice_loaded, const ::omero::RIntPtr& __ice_version, const ::omero::model::PixelsPtr& __ice_pixels, const ::omero::RIntPtr& __ice_theZ, const ::omero::RIntPtr& __ice_theC, const ::omero::RIntPtr& __ice_theT, const ::omero::RDoublePtr& __ice_deltaT, const ::omero::RDoublePtr& __ice_positionX, const ::omero::RDoublePtr& __ice_positionY, const ::omero::RDoublePtr& __ice_positionZ, const ::omero::RDoublePtr& __ice_exposureTime, const ::omero::model::PlaneInfoAnnotationLinksSeq& __ice_annotationLinksSeq, bool __ice_annotationLinksLoaded, const ::omero::sys::CountMap& __ice_annotationLinksCountPerOwner) :
        ::omero::model::IObject(__ice_id, __ice_details, __ice_loaded)
        ,
        version(__ice_version),
        pixels(__ice_pixels),
        theZ(__ice_theZ),
        theC(__ice_theC),
        theT(__ice_theT),
        deltaT(__ice_deltaT),
        positionX(__ice_positionX),
        positionY(__ice_positionY),
        positionZ(__ice_positionZ),
        exposureTime(__ice_exposureTime),
        annotationLinksSeq(__ice_annotationLinksSeq),
        annotationLinksLoaded(__ice_annotationLinksLoaded),
        annotationLinksCountPerOwner(__ice_annotationLinksCountPerOwner)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    virtual ::omero::RIntPtr getVersion(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::PixelsPtr getPixels(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getPixels(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setPixels(const ::omero::model::PixelsPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setPixels(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RIntPtr getTheZ(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getTheZ(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setTheZ(const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setTheZ(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RIntPtr getTheC(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getTheC(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setTheC(const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setTheC(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RIntPtr getTheT(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getTheT(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setTheT(const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setTheT(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RDoublePtr getDeltaT(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getDeltaT(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setDeltaT(const ::omero::RDoublePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setDeltaT(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RDoublePtr getPositionX(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getPositionX(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setPositionX(const ::omero::RDoublePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setPositionX(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RDoublePtr getPositionY(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getPositionY(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setPositionY(const ::omero::RDoublePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setPositionY(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RDoublePtr getPositionZ(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getPositionZ(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setPositionZ(const ::omero::RDoublePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setPositionZ(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RDoublePtr getExposureTime(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getExposureTime(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setExposureTime(const ::omero::RDoublePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setExposureTime(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unloadAnnotationLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unloadAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sizeOfAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::PlaneInfoAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___copyAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addPlaneInfoAnnotationLink(const ::omero::model::PlaneInfoAnnotationLinkPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addPlaneInfoAnnotationLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addAllPlaneInfoAnnotationLinkSet(const ::omero::model::PlaneInfoAnnotationLinksSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addAllPlaneInfoAnnotationLinkSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removePlaneInfoAnnotationLink(const ::omero::model::PlaneInfoAnnotationLinkPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removePlaneInfoAnnotationLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeAllPlaneInfoAnnotationLinkSet(const ::omero::model::PlaneInfoAnnotationLinksSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeAllPlaneInfoAnnotationLinkSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void clearAnnotationLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___clearAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reloadAnnotationLinks(const ::omero::model::PlaneInfoPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reloadAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getAnnotationLinksCountPerOwner(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::PlaneInfoAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___linkAnnotation(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addPlaneInfoAnnotationLinkToBoth(const ::omero::model::PlaneInfoAnnotationLinkPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addPlaneInfoAnnotationLinkToBoth(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::PlaneInfoAnnotationLinksSeq findPlaneInfoAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___findPlaneInfoAnnotationLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unlinkAnnotation(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removePlaneInfoAnnotationLinkFromBoth(const ::omero::model::PlaneInfoAnnotationLinkPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removePlaneInfoAnnotationLinkFromBoth(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::PlaneInfoLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___linkedAnnotationList(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::model::IObject::__writeImpl;
    using ::omero::model::IObject::__readImpl;
    #endif

    ::omero::RIntPtr version;

    ::omero::model::PixelsPtr pixels;

    ::omero::RIntPtr theZ;

    ::omero::RIntPtr theC;

    ::omero::RIntPtr theT;

    ::omero::RDoublePtr deltaT;

    ::omero::RDoublePtr positionX;

    ::omero::RDoublePtr positionY;

    ::omero::RDoublePtr positionZ;

    ::omero::RDoublePtr exposureTime;

    ::omero::model::PlaneInfoAnnotationLinksSeq annotationLinksSeq;

    bool annotationLinksLoaded;

    ::omero::sys::CountMap annotationLinksCountPerOwner;
};

inline bool operator==(const PlaneInfo& l, const PlaneInfo& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const PlaneInfo& l, const PlaneInfo& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

}

namespace omero
{

namespace model
{

template<class T>
class CallbackNC_PlaneInfo_getVersion : public Callback_PlaneInfo_getVersion_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RIntPtr&);

    CallbackNC_PlaneInfo_getVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlaneInfoPrx __proxy = ::omero::model::PlaneInfoPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_PlaneInfo_getVersionPtr
newCallback_PlaneInfo_getVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_getVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaneInfo_getVersionPtr
newCallback_PlaneInfo_getVersion(T* instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_getVersion<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlaneInfo_getVersion : public Callback_PlaneInfo_getVersion_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RIntPtr&, const CT&);

    Callback_PlaneInfo_getVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlaneInfoPrx __proxy = ::omero::model::PlaneInfoPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PlaneInfo_getVersionPtr
newCallback_PlaneInfo_getVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_getVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_getVersionPtr
newCallback_PlaneInfo_getVersion(T* instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_getVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PlaneInfo_setVersion : public Callback_PlaneInfo_setVersion_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PlaneInfo_setVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PlaneInfo_setVersionPtr
newCallback_PlaneInfo_setVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_setVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaneInfo_setVersionPtr
newCallback_PlaneInfo_setVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_setVersion<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PlaneInfo_setVersionPtr
newCallback_PlaneInfo_setVersion(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_setVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaneInfo_setVersionPtr
newCallback_PlaneInfo_setVersion(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_setVersion<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlaneInfo_setVersion : public Callback_PlaneInfo_setVersion_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PlaneInfo_setVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PlaneInfo_setVersionPtr
newCallback_PlaneInfo_setVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_setVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_setVersionPtr
newCallback_PlaneInfo_setVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_setVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_setVersionPtr
newCallback_PlaneInfo_setVersion(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_setVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_setVersionPtr
newCallback_PlaneInfo_setVersion(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_setVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PlaneInfo_getPixels : public Callback_PlaneInfo_getPixels_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::PixelsPtr&);

    CallbackNC_PlaneInfo_getPixels(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlaneInfoPrx __proxy = ::omero::model::PlaneInfoPrx::uncheckedCast(__result->getProxy());
        ::omero::model::PixelsPtr __ret;
        try
        {
            __ret = __proxy->end_getPixels(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_PlaneInfo_getPixelsPtr
newCallback_PlaneInfo_getPixels(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PixelsPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_getPixels<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaneInfo_getPixelsPtr
newCallback_PlaneInfo_getPixels(T* instance, void (T::*cb)(const ::omero::model::PixelsPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_getPixels<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlaneInfo_getPixels : public Callback_PlaneInfo_getPixels_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::PixelsPtr&, const CT&);

    Callback_PlaneInfo_getPixels(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlaneInfoPrx __proxy = ::omero::model::PlaneInfoPrx::uncheckedCast(__result->getProxy());
        ::omero::model::PixelsPtr __ret;
        try
        {
            __ret = __proxy->end_getPixels(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PlaneInfo_getPixelsPtr
newCallback_PlaneInfo_getPixels(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PixelsPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_getPixels<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_getPixelsPtr
newCallback_PlaneInfo_getPixels(T* instance, void (T::*cb)(const ::omero::model::PixelsPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_getPixels<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PlaneInfo_setPixels : public Callback_PlaneInfo_setPixels_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PlaneInfo_setPixels(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PlaneInfo_setPixelsPtr
newCallback_PlaneInfo_setPixels(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_setPixels<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaneInfo_setPixelsPtr
newCallback_PlaneInfo_setPixels(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_setPixels<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PlaneInfo_setPixelsPtr
newCallback_PlaneInfo_setPixels(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_setPixels<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaneInfo_setPixelsPtr
newCallback_PlaneInfo_setPixels(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_setPixels<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlaneInfo_setPixels : public Callback_PlaneInfo_setPixels_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PlaneInfo_setPixels(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PlaneInfo_setPixelsPtr
newCallback_PlaneInfo_setPixels(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_setPixels<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_setPixelsPtr
newCallback_PlaneInfo_setPixels(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_setPixels<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_setPixelsPtr
newCallback_PlaneInfo_setPixels(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_setPixels<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_setPixelsPtr
newCallback_PlaneInfo_setPixels(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_setPixels<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PlaneInfo_getTheZ : public Callback_PlaneInfo_getTheZ_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RIntPtr&);

    CallbackNC_PlaneInfo_getTheZ(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlaneInfoPrx __proxy = ::omero::model::PlaneInfoPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getTheZ(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_PlaneInfo_getTheZPtr
newCallback_PlaneInfo_getTheZ(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_getTheZ<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaneInfo_getTheZPtr
newCallback_PlaneInfo_getTheZ(T* instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_getTheZ<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlaneInfo_getTheZ : public Callback_PlaneInfo_getTheZ_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RIntPtr&, const CT&);

    Callback_PlaneInfo_getTheZ(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlaneInfoPrx __proxy = ::omero::model::PlaneInfoPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getTheZ(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PlaneInfo_getTheZPtr
newCallback_PlaneInfo_getTheZ(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_getTheZ<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_getTheZPtr
newCallback_PlaneInfo_getTheZ(T* instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_getTheZ<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PlaneInfo_setTheZ : public Callback_PlaneInfo_setTheZ_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PlaneInfo_setTheZ(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PlaneInfo_setTheZPtr
newCallback_PlaneInfo_setTheZ(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_setTheZ<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaneInfo_setTheZPtr
newCallback_PlaneInfo_setTheZ(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_setTheZ<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PlaneInfo_setTheZPtr
newCallback_PlaneInfo_setTheZ(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_setTheZ<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaneInfo_setTheZPtr
newCallback_PlaneInfo_setTheZ(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_setTheZ<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlaneInfo_setTheZ : public Callback_PlaneInfo_setTheZ_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PlaneInfo_setTheZ(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PlaneInfo_setTheZPtr
newCallback_PlaneInfo_setTheZ(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_setTheZ<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_setTheZPtr
newCallback_PlaneInfo_setTheZ(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_setTheZ<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_setTheZPtr
newCallback_PlaneInfo_setTheZ(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_setTheZ<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_setTheZPtr
newCallback_PlaneInfo_setTheZ(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_setTheZ<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PlaneInfo_getTheC : public Callback_PlaneInfo_getTheC_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RIntPtr&);

    CallbackNC_PlaneInfo_getTheC(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlaneInfoPrx __proxy = ::omero::model::PlaneInfoPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getTheC(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_PlaneInfo_getTheCPtr
newCallback_PlaneInfo_getTheC(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_getTheC<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaneInfo_getTheCPtr
newCallback_PlaneInfo_getTheC(T* instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_getTheC<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlaneInfo_getTheC : public Callback_PlaneInfo_getTheC_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RIntPtr&, const CT&);

    Callback_PlaneInfo_getTheC(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlaneInfoPrx __proxy = ::omero::model::PlaneInfoPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getTheC(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PlaneInfo_getTheCPtr
newCallback_PlaneInfo_getTheC(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_getTheC<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_getTheCPtr
newCallback_PlaneInfo_getTheC(T* instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_getTheC<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PlaneInfo_setTheC : public Callback_PlaneInfo_setTheC_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PlaneInfo_setTheC(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PlaneInfo_setTheCPtr
newCallback_PlaneInfo_setTheC(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_setTheC<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaneInfo_setTheCPtr
newCallback_PlaneInfo_setTheC(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_setTheC<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PlaneInfo_setTheCPtr
newCallback_PlaneInfo_setTheC(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_setTheC<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaneInfo_setTheCPtr
newCallback_PlaneInfo_setTheC(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_setTheC<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlaneInfo_setTheC : public Callback_PlaneInfo_setTheC_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PlaneInfo_setTheC(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PlaneInfo_setTheCPtr
newCallback_PlaneInfo_setTheC(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_setTheC<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_setTheCPtr
newCallback_PlaneInfo_setTheC(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_setTheC<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_setTheCPtr
newCallback_PlaneInfo_setTheC(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_setTheC<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_setTheCPtr
newCallback_PlaneInfo_setTheC(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_setTheC<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PlaneInfo_getTheT : public Callback_PlaneInfo_getTheT_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RIntPtr&);

    CallbackNC_PlaneInfo_getTheT(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlaneInfoPrx __proxy = ::omero::model::PlaneInfoPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getTheT(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_PlaneInfo_getTheTPtr
newCallback_PlaneInfo_getTheT(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_getTheT<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaneInfo_getTheTPtr
newCallback_PlaneInfo_getTheT(T* instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_getTheT<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlaneInfo_getTheT : public Callback_PlaneInfo_getTheT_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RIntPtr&, const CT&);

    Callback_PlaneInfo_getTheT(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlaneInfoPrx __proxy = ::omero::model::PlaneInfoPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getTheT(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PlaneInfo_getTheTPtr
newCallback_PlaneInfo_getTheT(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_getTheT<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_getTheTPtr
newCallback_PlaneInfo_getTheT(T* instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_getTheT<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PlaneInfo_setTheT : public Callback_PlaneInfo_setTheT_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PlaneInfo_setTheT(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PlaneInfo_setTheTPtr
newCallback_PlaneInfo_setTheT(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_setTheT<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaneInfo_setTheTPtr
newCallback_PlaneInfo_setTheT(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_setTheT<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PlaneInfo_setTheTPtr
newCallback_PlaneInfo_setTheT(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_setTheT<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaneInfo_setTheTPtr
newCallback_PlaneInfo_setTheT(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_setTheT<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlaneInfo_setTheT : public Callback_PlaneInfo_setTheT_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PlaneInfo_setTheT(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PlaneInfo_setTheTPtr
newCallback_PlaneInfo_setTheT(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_setTheT<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_setTheTPtr
newCallback_PlaneInfo_setTheT(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_setTheT<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_setTheTPtr
newCallback_PlaneInfo_setTheT(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_setTheT<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_setTheTPtr
newCallback_PlaneInfo_setTheT(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_setTheT<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PlaneInfo_getDeltaT : public Callback_PlaneInfo_getDeltaT_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RDoublePtr&);

    CallbackNC_PlaneInfo_getDeltaT(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlaneInfoPrx __proxy = ::omero::model::PlaneInfoPrx::uncheckedCast(__result->getProxy());
        ::omero::RDoublePtr __ret;
        try
        {
            __ret = __proxy->end_getDeltaT(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_PlaneInfo_getDeltaTPtr
newCallback_PlaneInfo_getDeltaT(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RDoublePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_getDeltaT<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaneInfo_getDeltaTPtr
newCallback_PlaneInfo_getDeltaT(T* instance, void (T::*cb)(const ::omero::RDoublePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_getDeltaT<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlaneInfo_getDeltaT : public Callback_PlaneInfo_getDeltaT_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RDoublePtr&, const CT&);

    Callback_PlaneInfo_getDeltaT(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlaneInfoPrx __proxy = ::omero::model::PlaneInfoPrx::uncheckedCast(__result->getProxy());
        ::omero::RDoublePtr __ret;
        try
        {
            __ret = __proxy->end_getDeltaT(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PlaneInfo_getDeltaTPtr
newCallback_PlaneInfo_getDeltaT(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RDoublePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_getDeltaT<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_getDeltaTPtr
newCallback_PlaneInfo_getDeltaT(T* instance, void (T::*cb)(const ::omero::RDoublePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_getDeltaT<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PlaneInfo_setDeltaT : public Callback_PlaneInfo_setDeltaT_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PlaneInfo_setDeltaT(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PlaneInfo_setDeltaTPtr
newCallback_PlaneInfo_setDeltaT(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_setDeltaT<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaneInfo_setDeltaTPtr
newCallback_PlaneInfo_setDeltaT(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_setDeltaT<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PlaneInfo_setDeltaTPtr
newCallback_PlaneInfo_setDeltaT(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_setDeltaT<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaneInfo_setDeltaTPtr
newCallback_PlaneInfo_setDeltaT(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_setDeltaT<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlaneInfo_setDeltaT : public Callback_PlaneInfo_setDeltaT_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PlaneInfo_setDeltaT(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PlaneInfo_setDeltaTPtr
newCallback_PlaneInfo_setDeltaT(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_setDeltaT<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_setDeltaTPtr
newCallback_PlaneInfo_setDeltaT(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_setDeltaT<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_setDeltaTPtr
newCallback_PlaneInfo_setDeltaT(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_setDeltaT<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_setDeltaTPtr
newCallback_PlaneInfo_setDeltaT(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_setDeltaT<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PlaneInfo_getPositionX : public Callback_PlaneInfo_getPositionX_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RDoublePtr&);

    CallbackNC_PlaneInfo_getPositionX(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlaneInfoPrx __proxy = ::omero::model::PlaneInfoPrx::uncheckedCast(__result->getProxy());
        ::omero::RDoublePtr __ret;
        try
        {
            __ret = __proxy->end_getPositionX(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_PlaneInfo_getPositionXPtr
newCallback_PlaneInfo_getPositionX(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RDoublePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_getPositionX<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaneInfo_getPositionXPtr
newCallback_PlaneInfo_getPositionX(T* instance, void (T::*cb)(const ::omero::RDoublePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_getPositionX<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlaneInfo_getPositionX : public Callback_PlaneInfo_getPositionX_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RDoublePtr&, const CT&);

    Callback_PlaneInfo_getPositionX(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlaneInfoPrx __proxy = ::omero::model::PlaneInfoPrx::uncheckedCast(__result->getProxy());
        ::omero::RDoublePtr __ret;
        try
        {
            __ret = __proxy->end_getPositionX(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PlaneInfo_getPositionXPtr
newCallback_PlaneInfo_getPositionX(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RDoublePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_getPositionX<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_getPositionXPtr
newCallback_PlaneInfo_getPositionX(T* instance, void (T::*cb)(const ::omero::RDoublePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_getPositionX<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PlaneInfo_setPositionX : public Callback_PlaneInfo_setPositionX_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PlaneInfo_setPositionX(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PlaneInfo_setPositionXPtr
newCallback_PlaneInfo_setPositionX(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_setPositionX<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaneInfo_setPositionXPtr
newCallback_PlaneInfo_setPositionX(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_setPositionX<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PlaneInfo_setPositionXPtr
newCallback_PlaneInfo_setPositionX(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_setPositionX<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaneInfo_setPositionXPtr
newCallback_PlaneInfo_setPositionX(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_setPositionX<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlaneInfo_setPositionX : public Callback_PlaneInfo_setPositionX_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PlaneInfo_setPositionX(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PlaneInfo_setPositionXPtr
newCallback_PlaneInfo_setPositionX(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_setPositionX<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_setPositionXPtr
newCallback_PlaneInfo_setPositionX(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_setPositionX<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_setPositionXPtr
newCallback_PlaneInfo_setPositionX(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_setPositionX<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_setPositionXPtr
newCallback_PlaneInfo_setPositionX(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_setPositionX<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PlaneInfo_getPositionY : public Callback_PlaneInfo_getPositionY_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RDoublePtr&);

    CallbackNC_PlaneInfo_getPositionY(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlaneInfoPrx __proxy = ::omero::model::PlaneInfoPrx::uncheckedCast(__result->getProxy());
        ::omero::RDoublePtr __ret;
        try
        {
            __ret = __proxy->end_getPositionY(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_PlaneInfo_getPositionYPtr
newCallback_PlaneInfo_getPositionY(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RDoublePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_getPositionY<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaneInfo_getPositionYPtr
newCallback_PlaneInfo_getPositionY(T* instance, void (T::*cb)(const ::omero::RDoublePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_getPositionY<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlaneInfo_getPositionY : public Callback_PlaneInfo_getPositionY_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RDoublePtr&, const CT&);

    Callback_PlaneInfo_getPositionY(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlaneInfoPrx __proxy = ::omero::model::PlaneInfoPrx::uncheckedCast(__result->getProxy());
        ::omero::RDoublePtr __ret;
        try
        {
            __ret = __proxy->end_getPositionY(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PlaneInfo_getPositionYPtr
newCallback_PlaneInfo_getPositionY(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RDoublePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_getPositionY<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_getPositionYPtr
newCallback_PlaneInfo_getPositionY(T* instance, void (T::*cb)(const ::omero::RDoublePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_getPositionY<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PlaneInfo_setPositionY : public Callback_PlaneInfo_setPositionY_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PlaneInfo_setPositionY(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PlaneInfo_setPositionYPtr
newCallback_PlaneInfo_setPositionY(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_setPositionY<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaneInfo_setPositionYPtr
newCallback_PlaneInfo_setPositionY(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_setPositionY<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PlaneInfo_setPositionYPtr
newCallback_PlaneInfo_setPositionY(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_setPositionY<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaneInfo_setPositionYPtr
newCallback_PlaneInfo_setPositionY(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_setPositionY<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlaneInfo_setPositionY : public Callback_PlaneInfo_setPositionY_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PlaneInfo_setPositionY(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PlaneInfo_setPositionYPtr
newCallback_PlaneInfo_setPositionY(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_setPositionY<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_setPositionYPtr
newCallback_PlaneInfo_setPositionY(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_setPositionY<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_setPositionYPtr
newCallback_PlaneInfo_setPositionY(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_setPositionY<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_setPositionYPtr
newCallback_PlaneInfo_setPositionY(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_setPositionY<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PlaneInfo_getPositionZ : public Callback_PlaneInfo_getPositionZ_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RDoublePtr&);

    CallbackNC_PlaneInfo_getPositionZ(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlaneInfoPrx __proxy = ::omero::model::PlaneInfoPrx::uncheckedCast(__result->getProxy());
        ::omero::RDoublePtr __ret;
        try
        {
            __ret = __proxy->end_getPositionZ(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_PlaneInfo_getPositionZPtr
newCallback_PlaneInfo_getPositionZ(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RDoublePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_getPositionZ<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaneInfo_getPositionZPtr
newCallback_PlaneInfo_getPositionZ(T* instance, void (T::*cb)(const ::omero::RDoublePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_getPositionZ<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlaneInfo_getPositionZ : public Callback_PlaneInfo_getPositionZ_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RDoublePtr&, const CT&);

    Callback_PlaneInfo_getPositionZ(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlaneInfoPrx __proxy = ::omero::model::PlaneInfoPrx::uncheckedCast(__result->getProxy());
        ::omero::RDoublePtr __ret;
        try
        {
            __ret = __proxy->end_getPositionZ(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PlaneInfo_getPositionZPtr
newCallback_PlaneInfo_getPositionZ(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RDoublePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_getPositionZ<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_getPositionZPtr
newCallback_PlaneInfo_getPositionZ(T* instance, void (T::*cb)(const ::omero::RDoublePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_getPositionZ<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PlaneInfo_setPositionZ : public Callback_PlaneInfo_setPositionZ_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PlaneInfo_setPositionZ(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PlaneInfo_setPositionZPtr
newCallback_PlaneInfo_setPositionZ(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_setPositionZ<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaneInfo_setPositionZPtr
newCallback_PlaneInfo_setPositionZ(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_setPositionZ<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PlaneInfo_setPositionZPtr
newCallback_PlaneInfo_setPositionZ(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_setPositionZ<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaneInfo_setPositionZPtr
newCallback_PlaneInfo_setPositionZ(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_setPositionZ<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlaneInfo_setPositionZ : public Callback_PlaneInfo_setPositionZ_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PlaneInfo_setPositionZ(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PlaneInfo_setPositionZPtr
newCallback_PlaneInfo_setPositionZ(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_setPositionZ<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_setPositionZPtr
newCallback_PlaneInfo_setPositionZ(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_setPositionZ<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_setPositionZPtr
newCallback_PlaneInfo_setPositionZ(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_setPositionZ<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_setPositionZPtr
newCallback_PlaneInfo_setPositionZ(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_setPositionZ<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PlaneInfo_getExposureTime : public Callback_PlaneInfo_getExposureTime_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RDoublePtr&);

    CallbackNC_PlaneInfo_getExposureTime(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlaneInfoPrx __proxy = ::omero::model::PlaneInfoPrx::uncheckedCast(__result->getProxy());
        ::omero::RDoublePtr __ret;
        try
        {
            __ret = __proxy->end_getExposureTime(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_PlaneInfo_getExposureTimePtr
newCallback_PlaneInfo_getExposureTime(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RDoublePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_getExposureTime<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaneInfo_getExposureTimePtr
newCallback_PlaneInfo_getExposureTime(T* instance, void (T::*cb)(const ::omero::RDoublePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_getExposureTime<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlaneInfo_getExposureTime : public Callback_PlaneInfo_getExposureTime_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RDoublePtr&, const CT&);

    Callback_PlaneInfo_getExposureTime(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlaneInfoPrx __proxy = ::omero::model::PlaneInfoPrx::uncheckedCast(__result->getProxy());
        ::omero::RDoublePtr __ret;
        try
        {
            __ret = __proxy->end_getExposureTime(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PlaneInfo_getExposureTimePtr
newCallback_PlaneInfo_getExposureTime(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RDoublePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_getExposureTime<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_getExposureTimePtr
newCallback_PlaneInfo_getExposureTime(T* instance, void (T::*cb)(const ::omero::RDoublePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_getExposureTime<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PlaneInfo_setExposureTime : public Callback_PlaneInfo_setExposureTime_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PlaneInfo_setExposureTime(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PlaneInfo_setExposureTimePtr
newCallback_PlaneInfo_setExposureTime(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_setExposureTime<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaneInfo_setExposureTimePtr
newCallback_PlaneInfo_setExposureTime(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_setExposureTime<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PlaneInfo_setExposureTimePtr
newCallback_PlaneInfo_setExposureTime(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_setExposureTime<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaneInfo_setExposureTimePtr
newCallback_PlaneInfo_setExposureTime(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_setExposureTime<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlaneInfo_setExposureTime : public Callback_PlaneInfo_setExposureTime_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PlaneInfo_setExposureTime(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PlaneInfo_setExposureTimePtr
newCallback_PlaneInfo_setExposureTime(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_setExposureTime<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_setExposureTimePtr
newCallback_PlaneInfo_setExposureTime(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_setExposureTime<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_setExposureTimePtr
newCallback_PlaneInfo_setExposureTime(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_setExposureTime<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_setExposureTimePtr
newCallback_PlaneInfo_setExposureTime(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_setExposureTime<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PlaneInfo_unloadAnnotationLinks : public Callback_PlaneInfo_unloadAnnotationLinks_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PlaneInfo_unloadAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PlaneInfo_unloadAnnotationLinksPtr
newCallback_PlaneInfo_unloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_unloadAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaneInfo_unloadAnnotationLinksPtr
newCallback_PlaneInfo_unloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_unloadAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PlaneInfo_unloadAnnotationLinksPtr
newCallback_PlaneInfo_unloadAnnotationLinks(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_unloadAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaneInfo_unloadAnnotationLinksPtr
newCallback_PlaneInfo_unloadAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_unloadAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlaneInfo_unloadAnnotationLinks : public Callback_PlaneInfo_unloadAnnotationLinks_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PlaneInfo_unloadAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PlaneInfo_unloadAnnotationLinksPtr
newCallback_PlaneInfo_unloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_unloadAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_unloadAnnotationLinksPtr
newCallback_PlaneInfo_unloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_unloadAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_unloadAnnotationLinksPtr
newCallback_PlaneInfo_unloadAnnotationLinks(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_unloadAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_unloadAnnotationLinksPtr
newCallback_PlaneInfo_unloadAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_unloadAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PlaneInfo_sizeOfAnnotationLinks : public Callback_PlaneInfo_sizeOfAnnotationLinks_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_PlaneInfo_sizeOfAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlaneInfoPrx __proxy = ::omero::model::PlaneInfoPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfAnnotationLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_PlaneInfo_sizeOfAnnotationLinksPtr
newCallback_PlaneInfo_sizeOfAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_sizeOfAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaneInfo_sizeOfAnnotationLinksPtr
newCallback_PlaneInfo_sizeOfAnnotationLinks(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_sizeOfAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlaneInfo_sizeOfAnnotationLinks : public Callback_PlaneInfo_sizeOfAnnotationLinks_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_PlaneInfo_sizeOfAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlaneInfoPrx __proxy = ::omero::model::PlaneInfoPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfAnnotationLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PlaneInfo_sizeOfAnnotationLinksPtr
newCallback_PlaneInfo_sizeOfAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_sizeOfAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_sizeOfAnnotationLinksPtr
newCallback_PlaneInfo_sizeOfAnnotationLinks(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_sizeOfAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PlaneInfo_copyAnnotationLinks : public Callback_PlaneInfo_copyAnnotationLinks_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::PlaneInfoAnnotationLinksSeq&);

    CallbackNC_PlaneInfo_copyAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlaneInfoPrx __proxy = ::omero::model::PlaneInfoPrx::uncheckedCast(__result->getProxy());
        ::omero::model::PlaneInfoAnnotationLinksSeq __ret;
        try
        {
            __ret = __proxy->end_copyAnnotationLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_PlaneInfo_copyAnnotationLinksPtr
newCallback_PlaneInfo_copyAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PlaneInfoAnnotationLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_copyAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaneInfo_copyAnnotationLinksPtr
newCallback_PlaneInfo_copyAnnotationLinks(T* instance, void (T::*cb)(const ::omero::model::PlaneInfoAnnotationLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_copyAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlaneInfo_copyAnnotationLinks : public Callback_PlaneInfo_copyAnnotationLinks_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::PlaneInfoAnnotationLinksSeq&, const CT&);

    Callback_PlaneInfo_copyAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlaneInfoPrx __proxy = ::omero::model::PlaneInfoPrx::uncheckedCast(__result->getProxy());
        ::omero::model::PlaneInfoAnnotationLinksSeq __ret;
        try
        {
            __ret = __proxy->end_copyAnnotationLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PlaneInfo_copyAnnotationLinksPtr
newCallback_PlaneInfo_copyAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PlaneInfoAnnotationLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_copyAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_copyAnnotationLinksPtr
newCallback_PlaneInfo_copyAnnotationLinks(T* instance, void (T::*cb)(const ::omero::model::PlaneInfoAnnotationLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_copyAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PlaneInfo_addPlaneInfoAnnotationLink : public Callback_PlaneInfo_addPlaneInfoAnnotationLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PlaneInfo_addPlaneInfoAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PlaneInfo_addPlaneInfoAnnotationLinkPtr
newCallback_PlaneInfo_addPlaneInfoAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_addPlaneInfoAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaneInfo_addPlaneInfoAnnotationLinkPtr
newCallback_PlaneInfo_addPlaneInfoAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_addPlaneInfoAnnotationLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PlaneInfo_addPlaneInfoAnnotationLinkPtr
newCallback_PlaneInfo_addPlaneInfoAnnotationLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_addPlaneInfoAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaneInfo_addPlaneInfoAnnotationLinkPtr
newCallback_PlaneInfo_addPlaneInfoAnnotationLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_addPlaneInfoAnnotationLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlaneInfo_addPlaneInfoAnnotationLink : public Callback_PlaneInfo_addPlaneInfoAnnotationLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PlaneInfo_addPlaneInfoAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PlaneInfo_addPlaneInfoAnnotationLinkPtr
newCallback_PlaneInfo_addPlaneInfoAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_addPlaneInfoAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_addPlaneInfoAnnotationLinkPtr
newCallback_PlaneInfo_addPlaneInfoAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_addPlaneInfoAnnotationLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_addPlaneInfoAnnotationLinkPtr
newCallback_PlaneInfo_addPlaneInfoAnnotationLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_addPlaneInfoAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_addPlaneInfoAnnotationLinkPtr
newCallback_PlaneInfo_addPlaneInfoAnnotationLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_addPlaneInfoAnnotationLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PlaneInfo_addAllPlaneInfoAnnotationLinkSet : public Callback_PlaneInfo_addAllPlaneInfoAnnotationLinkSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PlaneInfo_addAllPlaneInfoAnnotationLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PlaneInfo_addAllPlaneInfoAnnotationLinkSetPtr
newCallback_PlaneInfo_addAllPlaneInfoAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_addAllPlaneInfoAnnotationLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaneInfo_addAllPlaneInfoAnnotationLinkSetPtr
newCallback_PlaneInfo_addAllPlaneInfoAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_addAllPlaneInfoAnnotationLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PlaneInfo_addAllPlaneInfoAnnotationLinkSetPtr
newCallback_PlaneInfo_addAllPlaneInfoAnnotationLinkSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_addAllPlaneInfoAnnotationLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaneInfo_addAllPlaneInfoAnnotationLinkSetPtr
newCallback_PlaneInfo_addAllPlaneInfoAnnotationLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_addAllPlaneInfoAnnotationLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlaneInfo_addAllPlaneInfoAnnotationLinkSet : public Callback_PlaneInfo_addAllPlaneInfoAnnotationLinkSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PlaneInfo_addAllPlaneInfoAnnotationLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PlaneInfo_addAllPlaneInfoAnnotationLinkSetPtr
newCallback_PlaneInfo_addAllPlaneInfoAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_addAllPlaneInfoAnnotationLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_addAllPlaneInfoAnnotationLinkSetPtr
newCallback_PlaneInfo_addAllPlaneInfoAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_addAllPlaneInfoAnnotationLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_addAllPlaneInfoAnnotationLinkSetPtr
newCallback_PlaneInfo_addAllPlaneInfoAnnotationLinkSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_addAllPlaneInfoAnnotationLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_addAllPlaneInfoAnnotationLinkSetPtr
newCallback_PlaneInfo_addAllPlaneInfoAnnotationLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_addAllPlaneInfoAnnotationLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PlaneInfo_removePlaneInfoAnnotationLink : public Callback_PlaneInfo_removePlaneInfoAnnotationLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PlaneInfo_removePlaneInfoAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PlaneInfo_removePlaneInfoAnnotationLinkPtr
newCallback_PlaneInfo_removePlaneInfoAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_removePlaneInfoAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaneInfo_removePlaneInfoAnnotationLinkPtr
newCallback_PlaneInfo_removePlaneInfoAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_removePlaneInfoAnnotationLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PlaneInfo_removePlaneInfoAnnotationLinkPtr
newCallback_PlaneInfo_removePlaneInfoAnnotationLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_removePlaneInfoAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaneInfo_removePlaneInfoAnnotationLinkPtr
newCallback_PlaneInfo_removePlaneInfoAnnotationLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_removePlaneInfoAnnotationLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlaneInfo_removePlaneInfoAnnotationLink : public Callback_PlaneInfo_removePlaneInfoAnnotationLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PlaneInfo_removePlaneInfoAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PlaneInfo_removePlaneInfoAnnotationLinkPtr
newCallback_PlaneInfo_removePlaneInfoAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_removePlaneInfoAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_removePlaneInfoAnnotationLinkPtr
newCallback_PlaneInfo_removePlaneInfoAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_removePlaneInfoAnnotationLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_removePlaneInfoAnnotationLinkPtr
newCallback_PlaneInfo_removePlaneInfoAnnotationLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_removePlaneInfoAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_removePlaneInfoAnnotationLinkPtr
newCallback_PlaneInfo_removePlaneInfoAnnotationLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_removePlaneInfoAnnotationLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PlaneInfo_removeAllPlaneInfoAnnotationLinkSet : public Callback_PlaneInfo_removeAllPlaneInfoAnnotationLinkSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PlaneInfo_removeAllPlaneInfoAnnotationLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PlaneInfo_removeAllPlaneInfoAnnotationLinkSetPtr
newCallback_PlaneInfo_removeAllPlaneInfoAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_removeAllPlaneInfoAnnotationLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaneInfo_removeAllPlaneInfoAnnotationLinkSetPtr
newCallback_PlaneInfo_removeAllPlaneInfoAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_removeAllPlaneInfoAnnotationLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PlaneInfo_removeAllPlaneInfoAnnotationLinkSetPtr
newCallback_PlaneInfo_removeAllPlaneInfoAnnotationLinkSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_removeAllPlaneInfoAnnotationLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaneInfo_removeAllPlaneInfoAnnotationLinkSetPtr
newCallback_PlaneInfo_removeAllPlaneInfoAnnotationLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_removeAllPlaneInfoAnnotationLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlaneInfo_removeAllPlaneInfoAnnotationLinkSet : public Callback_PlaneInfo_removeAllPlaneInfoAnnotationLinkSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PlaneInfo_removeAllPlaneInfoAnnotationLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PlaneInfo_removeAllPlaneInfoAnnotationLinkSetPtr
newCallback_PlaneInfo_removeAllPlaneInfoAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_removeAllPlaneInfoAnnotationLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_removeAllPlaneInfoAnnotationLinkSetPtr
newCallback_PlaneInfo_removeAllPlaneInfoAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_removeAllPlaneInfoAnnotationLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_removeAllPlaneInfoAnnotationLinkSetPtr
newCallback_PlaneInfo_removeAllPlaneInfoAnnotationLinkSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_removeAllPlaneInfoAnnotationLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_removeAllPlaneInfoAnnotationLinkSetPtr
newCallback_PlaneInfo_removeAllPlaneInfoAnnotationLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_removeAllPlaneInfoAnnotationLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PlaneInfo_clearAnnotationLinks : public Callback_PlaneInfo_clearAnnotationLinks_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PlaneInfo_clearAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PlaneInfo_clearAnnotationLinksPtr
newCallback_PlaneInfo_clearAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_clearAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaneInfo_clearAnnotationLinksPtr
newCallback_PlaneInfo_clearAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_clearAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PlaneInfo_clearAnnotationLinksPtr
newCallback_PlaneInfo_clearAnnotationLinks(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_clearAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaneInfo_clearAnnotationLinksPtr
newCallback_PlaneInfo_clearAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_clearAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlaneInfo_clearAnnotationLinks : public Callback_PlaneInfo_clearAnnotationLinks_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PlaneInfo_clearAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PlaneInfo_clearAnnotationLinksPtr
newCallback_PlaneInfo_clearAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_clearAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_clearAnnotationLinksPtr
newCallback_PlaneInfo_clearAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_clearAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_clearAnnotationLinksPtr
newCallback_PlaneInfo_clearAnnotationLinks(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_clearAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_clearAnnotationLinksPtr
newCallback_PlaneInfo_clearAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_clearAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PlaneInfo_reloadAnnotationLinks : public Callback_PlaneInfo_reloadAnnotationLinks_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PlaneInfo_reloadAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PlaneInfo_reloadAnnotationLinksPtr
newCallback_PlaneInfo_reloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_reloadAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaneInfo_reloadAnnotationLinksPtr
newCallback_PlaneInfo_reloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_reloadAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PlaneInfo_reloadAnnotationLinksPtr
newCallback_PlaneInfo_reloadAnnotationLinks(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_reloadAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaneInfo_reloadAnnotationLinksPtr
newCallback_PlaneInfo_reloadAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_reloadAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlaneInfo_reloadAnnotationLinks : public Callback_PlaneInfo_reloadAnnotationLinks_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PlaneInfo_reloadAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PlaneInfo_reloadAnnotationLinksPtr
newCallback_PlaneInfo_reloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_reloadAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_reloadAnnotationLinksPtr
newCallback_PlaneInfo_reloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_reloadAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_reloadAnnotationLinksPtr
newCallback_PlaneInfo_reloadAnnotationLinks(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_reloadAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_reloadAnnotationLinksPtr
newCallback_PlaneInfo_reloadAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_reloadAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PlaneInfo_getAnnotationLinksCountPerOwner : public Callback_PlaneInfo_getAnnotationLinksCountPerOwner_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::sys::CountMap&);

    CallbackNC_PlaneInfo_getAnnotationLinksCountPerOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlaneInfoPrx __proxy = ::omero::model::PlaneInfoPrx::uncheckedCast(__result->getProxy());
        ::omero::sys::CountMap __ret;
        try
        {
            __ret = __proxy->end_getAnnotationLinksCountPerOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_PlaneInfo_getAnnotationLinksCountPerOwnerPtr
newCallback_PlaneInfo_getAnnotationLinksCountPerOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::CountMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_getAnnotationLinksCountPerOwner<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaneInfo_getAnnotationLinksCountPerOwnerPtr
newCallback_PlaneInfo_getAnnotationLinksCountPerOwner(T* instance, void (T::*cb)(const ::omero::sys::CountMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_getAnnotationLinksCountPerOwner<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlaneInfo_getAnnotationLinksCountPerOwner : public Callback_PlaneInfo_getAnnotationLinksCountPerOwner_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::sys::CountMap&, const CT&);

    Callback_PlaneInfo_getAnnotationLinksCountPerOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlaneInfoPrx __proxy = ::omero::model::PlaneInfoPrx::uncheckedCast(__result->getProxy());
        ::omero::sys::CountMap __ret;
        try
        {
            __ret = __proxy->end_getAnnotationLinksCountPerOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PlaneInfo_getAnnotationLinksCountPerOwnerPtr
newCallback_PlaneInfo_getAnnotationLinksCountPerOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::CountMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_getAnnotationLinksCountPerOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_getAnnotationLinksCountPerOwnerPtr
newCallback_PlaneInfo_getAnnotationLinksCountPerOwner(T* instance, void (T::*cb)(const ::omero::sys::CountMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_getAnnotationLinksCountPerOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PlaneInfo_linkAnnotation : public Callback_PlaneInfo_linkAnnotation_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::PlaneInfoAnnotationLinkPtr&);

    CallbackNC_PlaneInfo_linkAnnotation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlaneInfoPrx __proxy = ::omero::model::PlaneInfoPrx::uncheckedCast(__result->getProxy());
        ::omero::model::PlaneInfoAnnotationLinkPtr __ret;
        try
        {
            __ret = __proxy->end_linkAnnotation(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_PlaneInfo_linkAnnotationPtr
newCallback_PlaneInfo_linkAnnotation(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PlaneInfoAnnotationLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_linkAnnotation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaneInfo_linkAnnotationPtr
newCallback_PlaneInfo_linkAnnotation(T* instance, void (T::*cb)(const ::omero::model::PlaneInfoAnnotationLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_linkAnnotation<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlaneInfo_linkAnnotation : public Callback_PlaneInfo_linkAnnotation_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::PlaneInfoAnnotationLinkPtr&, const CT&);

    Callback_PlaneInfo_linkAnnotation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlaneInfoPrx __proxy = ::omero::model::PlaneInfoPrx::uncheckedCast(__result->getProxy());
        ::omero::model::PlaneInfoAnnotationLinkPtr __ret;
        try
        {
            __ret = __proxy->end_linkAnnotation(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PlaneInfo_linkAnnotationPtr
newCallback_PlaneInfo_linkAnnotation(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PlaneInfoAnnotationLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_linkAnnotation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_linkAnnotationPtr
newCallback_PlaneInfo_linkAnnotation(T* instance, void (T::*cb)(const ::omero::model::PlaneInfoAnnotationLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_linkAnnotation<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PlaneInfo_addPlaneInfoAnnotationLinkToBoth : public Callback_PlaneInfo_addPlaneInfoAnnotationLinkToBoth_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PlaneInfo_addPlaneInfoAnnotationLinkToBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PlaneInfo_addPlaneInfoAnnotationLinkToBothPtr
newCallback_PlaneInfo_addPlaneInfoAnnotationLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_addPlaneInfoAnnotationLinkToBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaneInfo_addPlaneInfoAnnotationLinkToBothPtr
newCallback_PlaneInfo_addPlaneInfoAnnotationLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_addPlaneInfoAnnotationLinkToBoth<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PlaneInfo_addPlaneInfoAnnotationLinkToBothPtr
newCallback_PlaneInfo_addPlaneInfoAnnotationLinkToBoth(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_addPlaneInfoAnnotationLinkToBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaneInfo_addPlaneInfoAnnotationLinkToBothPtr
newCallback_PlaneInfo_addPlaneInfoAnnotationLinkToBoth(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_addPlaneInfoAnnotationLinkToBoth<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlaneInfo_addPlaneInfoAnnotationLinkToBoth : public Callback_PlaneInfo_addPlaneInfoAnnotationLinkToBoth_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PlaneInfo_addPlaneInfoAnnotationLinkToBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PlaneInfo_addPlaneInfoAnnotationLinkToBothPtr
newCallback_PlaneInfo_addPlaneInfoAnnotationLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_addPlaneInfoAnnotationLinkToBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_addPlaneInfoAnnotationLinkToBothPtr
newCallback_PlaneInfo_addPlaneInfoAnnotationLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_addPlaneInfoAnnotationLinkToBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_addPlaneInfoAnnotationLinkToBothPtr
newCallback_PlaneInfo_addPlaneInfoAnnotationLinkToBoth(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_addPlaneInfoAnnotationLinkToBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_addPlaneInfoAnnotationLinkToBothPtr
newCallback_PlaneInfo_addPlaneInfoAnnotationLinkToBoth(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_addPlaneInfoAnnotationLinkToBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PlaneInfo_findPlaneInfoAnnotationLink : public Callback_PlaneInfo_findPlaneInfoAnnotationLink_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::PlaneInfoAnnotationLinksSeq&);

    CallbackNC_PlaneInfo_findPlaneInfoAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlaneInfoPrx __proxy = ::omero::model::PlaneInfoPrx::uncheckedCast(__result->getProxy());
        ::omero::model::PlaneInfoAnnotationLinksSeq __ret;
        try
        {
            __ret = __proxy->end_findPlaneInfoAnnotationLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_PlaneInfo_findPlaneInfoAnnotationLinkPtr
newCallback_PlaneInfo_findPlaneInfoAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PlaneInfoAnnotationLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_findPlaneInfoAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaneInfo_findPlaneInfoAnnotationLinkPtr
newCallback_PlaneInfo_findPlaneInfoAnnotationLink(T* instance, void (T::*cb)(const ::omero::model::PlaneInfoAnnotationLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_findPlaneInfoAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlaneInfo_findPlaneInfoAnnotationLink : public Callback_PlaneInfo_findPlaneInfoAnnotationLink_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::PlaneInfoAnnotationLinksSeq&, const CT&);

    Callback_PlaneInfo_findPlaneInfoAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlaneInfoPrx __proxy = ::omero::model::PlaneInfoPrx::uncheckedCast(__result->getProxy());
        ::omero::model::PlaneInfoAnnotationLinksSeq __ret;
        try
        {
            __ret = __proxy->end_findPlaneInfoAnnotationLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PlaneInfo_findPlaneInfoAnnotationLinkPtr
newCallback_PlaneInfo_findPlaneInfoAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PlaneInfoAnnotationLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_findPlaneInfoAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_findPlaneInfoAnnotationLinkPtr
newCallback_PlaneInfo_findPlaneInfoAnnotationLink(T* instance, void (T::*cb)(const ::omero::model::PlaneInfoAnnotationLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_findPlaneInfoAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PlaneInfo_unlinkAnnotation : public Callback_PlaneInfo_unlinkAnnotation_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PlaneInfo_unlinkAnnotation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PlaneInfo_unlinkAnnotationPtr
newCallback_PlaneInfo_unlinkAnnotation(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_unlinkAnnotation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaneInfo_unlinkAnnotationPtr
newCallback_PlaneInfo_unlinkAnnotation(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_unlinkAnnotation<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PlaneInfo_unlinkAnnotationPtr
newCallback_PlaneInfo_unlinkAnnotation(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_unlinkAnnotation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaneInfo_unlinkAnnotationPtr
newCallback_PlaneInfo_unlinkAnnotation(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_unlinkAnnotation<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlaneInfo_unlinkAnnotation : public Callback_PlaneInfo_unlinkAnnotation_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PlaneInfo_unlinkAnnotation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PlaneInfo_unlinkAnnotationPtr
newCallback_PlaneInfo_unlinkAnnotation(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_unlinkAnnotation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_unlinkAnnotationPtr
newCallback_PlaneInfo_unlinkAnnotation(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_unlinkAnnotation<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_unlinkAnnotationPtr
newCallback_PlaneInfo_unlinkAnnotation(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_unlinkAnnotation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_unlinkAnnotationPtr
newCallback_PlaneInfo_unlinkAnnotation(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_unlinkAnnotation<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PlaneInfo_removePlaneInfoAnnotationLinkFromBoth : public Callback_PlaneInfo_removePlaneInfoAnnotationLinkFromBoth_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PlaneInfo_removePlaneInfoAnnotationLinkFromBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PlaneInfo_removePlaneInfoAnnotationLinkFromBothPtr
newCallback_PlaneInfo_removePlaneInfoAnnotationLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_removePlaneInfoAnnotationLinkFromBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaneInfo_removePlaneInfoAnnotationLinkFromBothPtr
newCallback_PlaneInfo_removePlaneInfoAnnotationLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_removePlaneInfoAnnotationLinkFromBoth<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PlaneInfo_removePlaneInfoAnnotationLinkFromBothPtr
newCallback_PlaneInfo_removePlaneInfoAnnotationLinkFromBoth(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_removePlaneInfoAnnotationLinkFromBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaneInfo_removePlaneInfoAnnotationLinkFromBothPtr
newCallback_PlaneInfo_removePlaneInfoAnnotationLinkFromBoth(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_removePlaneInfoAnnotationLinkFromBoth<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlaneInfo_removePlaneInfoAnnotationLinkFromBoth : public Callback_PlaneInfo_removePlaneInfoAnnotationLinkFromBoth_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PlaneInfo_removePlaneInfoAnnotationLinkFromBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PlaneInfo_removePlaneInfoAnnotationLinkFromBothPtr
newCallback_PlaneInfo_removePlaneInfoAnnotationLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_removePlaneInfoAnnotationLinkFromBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_removePlaneInfoAnnotationLinkFromBothPtr
newCallback_PlaneInfo_removePlaneInfoAnnotationLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_removePlaneInfoAnnotationLinkFromBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_removePlaneInfoAnnotationLinkFromBothPtr
newCallback_PlaneInfo_removePlaneInfoAnnotationLinkFromBoth(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_removePlaneInfoAnnotationLinkFromBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_removePlaneInfoAnnotationLinkFromBothPtr
newCallback_PlaneInfo_removePlaneInfoAnnotationLinkFromBoth(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_removePlaneInfoAnnotationLinkFromBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PlaneInfo_linkedAnnotationList : public Callback_PlaneInfo_linkedAnnotationList_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::PlaneInfoLinkedAnnotationSeq&);

    CallbackNC_PlaneInfo_linkedAnnotationList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlaneInfoPrx __proxy = ::omero::model::PlaneInfoPrx::uncheckedCast(__result->getProxy());
        ::omero::model::PlaneInfoLinkedAnnotationSeq __ret;
        try
        {
            __ret = __proxy->end_linkedAnnotationList(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_PlaneInfo_linkedAnnotationListPtr
newCallback_PlaneInfo_linkedAnnotationList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PlaneInfoLinkedAnnotationSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_linkedAnnotationList<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaneInfo_linkedAnnotationListPtr
newCallback_PlaneInfo_linkedAnnotationList(T* instance, void (T::*cb)(const ::omero::model::PlaneInfoLinkedAnnotationSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlaneInfo_linkedAnnotationList<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlaneInfo_linkedAnnotationList : public Callback_PlaneInfo_linkedAnnotationList_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::PlaneInfoLinkedAnnotationSeq&, const CT&);

    Callback_PlaneInfo_linkedAnnotationList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PlaneInfoPrx __proxy = ::omero::model::PlaneInfoPrx::uncheckedCast(__result->getProxy());
        ::omero::model::PlaneInfoLinkedAnnotationSeq __ret;
        try
        {
            __ret = __proxy->end_linkedAnnotationList(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PlaneInfo_linkedAnnotationListPtr
newCallback_PlaneInfo_linkedAnnotationList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PlaneInfoLinkedAnnotationSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_linkedAnnotationList<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlaneInfo_linkedAnnotationListPtr
newCallback_PlaneInfo_linkedAnnotationList(T* instance, void (T::*cb)(const ::omero::model::PlaneInfoLinkedAnnotationSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlaneInfo_linkedAnnotationList<T, CT>(instance, cb, excb, sentcb);
}

}

}

#endif
