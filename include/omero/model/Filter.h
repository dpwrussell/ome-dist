// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `Filter.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_Filter_h__
#define __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_Filter_h__

#include <Ice/LocalObjectF.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/StreamF.h>
#include <omero/model/IObject.h>
#include <omero/RTypes.h>
#include <omero/System.h>
#include <omero/Collections.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace omero
{

namespace model
{

class FilterType;

class TransmittanceRange;

class Instrument;

class FilterSetExcitationFilterLink;

class FilterSet;

class FilterSetEmissionFilterLink;

class Details;

class Filter;

}

}

}

namespace omero
{

namespace model
{

class FilterType;
bool operator==(const FilterType&, const FilterType&);
bool operator<(const FilterType&, const FilterType&);

class TransmittanceRange;
bool operator==(const TransmittanceRange&, const TransmittanceRange&);
bool operator<(const TransmittanceRange&, const TransmittanceRange&);

class Instrument;
bool operator==(const Instrument&, const Instrument&);
bool operator<(const Instrument&, const Instrument&);

class FilterSetExcitationFilterLink;
bool operator==(const FilterSetExcitationFilterLink&, const FilterSetExcitationFilterLink&);
bool operator<(const FilterSetExcitationFilterLink&, const FilterSetExcitationFilterLink&);

class FilterSet;
bool operator==(const FilterSet&, const FilterSet&);
bool operator<(const FilterSet&, const FilterSet&);

class FilterSetEmissionFilterLink;
bool operator==(const FilterSetEmissionFilterLink&, const FilterSetEmissionFilterLink&);
bool operator<(const FilterSetEmissionFilterLink&, const FilterSetEmissionFilterLink&);

class Details;
bool operator==(const Details&, const Details&);
bool operator<(const Details&, const Details&);

class Filter;
bool operator==(const Filter&, const Filter&);
bool operator<(const Filter&, const Filter&);

}

}

namespace IceInternal
{

::Ice::Object* upCast(::omero::model::FilterType*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::FilterType*);

::Ice::Object* upCast(::omero::model::TransmittanceRange*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::TransmittanceRange*);

::Ice::Object* upCast(::omero::model::Instrument*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Instrument*);

::Ice::Object* upCast(::omero::model::FilterSetExcitationFilterLink*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::FilterSetExcitationFilterLink*);

::Ice::Object* upCast(::omero::model::FilterSet*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::FilterSet*);

::Ice::Object* upCast(::omero::model::FilterSetEmissionFilterLink*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::FilterSetEmissionFilterLink*);

::Ice::Object* upCast(::omero::model::Details*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Details*);

::Ice::Object* upCast(::omero::model::Filter*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Filter*);

}

namespace omero
{

namespace model
{

typedef ::IceInternal::Handle< ::omero::model::FilterType> FilterTypePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::FilterType> FilterTypePrx;

void __read(::IceInternal::BasicStream*, FilterTypePrx&);
void __patch__FilterTypePtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::TransmittanceRange> TransmittanceRangePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::TransmittanceRange> TransmittanceRangePrx;

void __read(::IceInternal::BasicStream*, TransmittanceRangePrx&);
void __patch__TransmittanceRangePtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::Instrument> InstrumentPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Instrument> InstrumentPrx;

void __read(::IceInternal::BasicStream*, InstrumentPrx&);
void __patch__InstrumentPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::FilterSetExcitationFilterLink> FilterSetExcitationFilterLinkPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::FilterSetExcitationFilterLink> FilterSetExcitationFilterLinkPrx;

void __read(::IceInternal::BasicStream*, FilterSetExcitationFilterLinkPrx&);
void __patch__FilterSetExcitationFilterLinkPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::FilterSet> FilterSetPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::FilterSet> FilterSetPrx;

void __read(::IceInternal::BasicStream*, FilterSetPrx&);
void __patch__FilterSetPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::FilterSetEmissionFilterLink> FilterSetEmissionFilterLinkPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::FilterSetEmissionFilterLink> FilterSetEmissionFilterLinkPrx;

void __read(::IceInternal::BasicStream*, FilterSetEmissionFilterLinkPrx&);
void __patch__FilterSetEmissionFilterLinkPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::Details> DetailsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Details> DetailsPrx;

void __read(::IceInternal::BasicStream*, DetailsPrx&);
void __patch__DetailsPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::Filter> FilterPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Filter> FilterPrx;

void __read(::IceInternal::BasicStream*, FilterPrx&);
void __patch__FilterPtr(void*, ::Ice::ObjectPtr&);

}

}

namespace omero
{

namespace model
{

typedef ::std::vector< ::omero::model::FilterSetExcitationFilterLinkPtr> FilterExcitationFilterLinkSeq;
void __writeFilterExcitationFilterLinkSeq(::IceInternal::BasicStream*, const ::omero::model::FilterSetExcitationFilterLinkPtr*, const ::omero::model::FilterSetExcitationFilterLinkPtr*);
void __readFilterExcitationFilterLinkSeq(::IceInternal::BasicStream*, FilterExcitationFilterLinkSeq&);

typedef ::std::vector< ::omero::model::FilterSetPtr> FilterLinkedExcitationFilterSeq;
void __writeFilterLinkedExcitationFilterSeq(::IceInternal::BasicStream*, const ::omero::model::FilterSetPtr*, const ::omero::model::FilterSetPtr*);
void __readFilterLinkedExcitationFilterSeq(::IceInternal::BasicStream*, FilterLinkedExcitationFilterSeq&);

typedef ::std::vector< ::omero::model::FilterSetEmissionFilterLinkPtr> FilterEmissionFilterLinkSeq;
void __writeFilterEmissionFilterLinkSeq(::IceInternal::BasicStream*, const ::omero::model::FilterSetEmissionFilterLinkPtr*, const ::omero::model::FilterSetEmissionFilterLinkPtr*);
void __readFilterEmissionFilterLinkSeq(::IceInternal::BasicStream*, FilterEmissionFilterLinkSeq&);

typedef ::std::vector< ::omero::model::FilterSetPtr> FilterLinkedEmissionFilterSeq;
void __writeFilterLinkedEmissionFilterSeq(::IceInternal::BasicStream*, const ::omero::model::FilterSetPtr*, const ::omero::model::FilterSetPtr*);
void __readFilterLinkedEmissionFilterSeq(::IceInternal::BasicStream*, FilterLinkedEmissionFilterSeq&);

}

}

namespace omero
{

namespace model
{

class Callback_Filter_getVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Filter_getVersion_Base> Callback_Filter_getVersionPtr;

class Callback_Filter_setVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Filter_setVersion_Base> Callback_Filter_setVersionPtr;

class Callback_Filter_getManufacturer_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Filter_getManufacturer_Base> Callback_Filter_getManufacturerPtr;

class Callback_Filter_setManufacturer_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Filter_setManufacturer_Base> Callback_Filter_setManufacturerPtr;

class Callback_Filter_getModel_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Filter_getModel_Base> Callback_Filter_getModelPtr;

class Callback_Filter_setModel_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Filter_setModel_Base> Callback_Filter_setModelPtr;

class Callback_Filter_getLotNumber_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Filter_getLotNumber_Base> Callback_Filter_getLotNumberPtr;

class Callback_Filter_setLotNumber_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Filter_setLotNumber_Base> Callback_Filter_setLotNumberPtr;

class Callback_Filter_getSerialNumber_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Filter_getSerialNumber_Base> Callback_Filter_getSerialNumberPtr;

class Callback_Filter_setSerialNumber_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Filter_setSerialNumber_Base> Callback_Filter_setSerialNumberPtr;

class Callback_Filter_getFilterWheel_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Filter_getFilterWheel_Base> Callback_Filter_getFilterWheelPtr;

class Callback_Filter_setFilterWheel_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Filter_setFilterWheel_Base> Callback_Filter_setFilterWheelPtr;

class Callback_Filter_getType_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Filter_getType_Base> Callback_Filter_getTypePtr;

class Callback_Filter_setType_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Filter_setType_Base> Callback_Filter_setTypePtr;

class Callback_Filter_getTransmittanceRange_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Filter_getTransmittanceRange_Base> Callback_Filter_getTransmittanceRangePtr;

class Callback_Filter_setTransmittanceRange_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Filter_setTransmittanceRange_Base> Callback_Filter_setTransmittanceRangePtr;

class Callback_Filter_getInstrument_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Filter_getInstrument_Base> Callback_Filter_getInstrumentPtr;

class Callback_Filter_setInstrument_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Filter_setInstrument_Base> Callback_Filter_setInstrumentPtr;

class Callback_Filter_unloadExcitationFilterLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Filter_unloadExcitationFilterLink_Base> Callback_Filter_unloadExcitationFilterLinkPtr;

class Callback_Filter_sizeOfExcitationFilterLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Filter_sizeOfExcitationFilterLink_Base> Callback_Filter_sizeOfExcitationFilterLinkPtr;

class Callback_Filter_copyExcitationFilterLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Filter_copyExcitationFilterLink_Base> Callback_Filter_copyExcitationFilterLinkPtr;

class Callback_Filter_addFilterSetExcitationFilterLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Filter_addFilterSetExcitationFilterLink_Base> Callback_Filter_addFilterSetExcitationFilterLinkPtr;

class Callback_Filter_addAllFilterSetExcitationFilterLinkSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Filter_addAllFilterSetExcitationFilterLinkSet_Base> Callback_Filter_addAllFilterSetExcitationFilterLinkSetPtr;

class Callback_Filter_removeFilterSetExcitationFilterLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Filter_removeFilterSetExcitationFilterLink_Base> Callback_Filter_removeFilterSetExcitationFilterLinkPtr;

class Callback_Filter_removeAllFilterSetExcitationFilterLinkSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Filter_removeAllFilterSetExcitationFilterLinkSet_Base> Callback_Filter_removeAllFilterSetExcitationFilterLinkSetPtr;

class Callback_Filter_clearExcitationFilterLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Filter_clearExcitationFilterLink_Base> Callback_Filter_clearExcitationFilterLinkPtr;

class Callback_Filter_reloadExcitationFilterLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Filter_reloadExcitationFilterLink_Base> Callback_Filter_reloadExcitationFilterLinkPtr;

class Callback_Filter_getExcitationFilterLinkCountPerOwner_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Filter_getExcitationFilterLinkCountPerOwner_Base> Callback_Filter_getExcitationFilterLinkCountPerOwnerPtr;

class Callback_Filter_linkExcitationFilter_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Filter_linkExcitationFilter_Base> Callback_Filter_linkExcitationFilterPtr;

class Callback_Filter_addFilterSetExcitationFilterLinkToBoth_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Filter_addFilterSetExcitationFilterLinkToBoth_Base> Callback_Filter_addFilterSetExcitationFilterLinkToBothPtr;

class Callback_Filter_findFilterSetExcitationFilterLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Filter_findFilterSetExcitationFilterLink_Base> Callback_Filter_findFilterSetExcitationFilterLinkPtr;

class Callback_Filter_unlinkExcitationFilter_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Filter_unlinkExcitationFilter_Base> Callback_Filter_unlinkExcitationFilterPtr;

class Callback_Filter_removeFilterSetExcitationFilterLinkFromBoth_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Filter_removeFilterSetExcitationFilterLinkFromBoth_Base> Callback_Filter_removeFilterSetExcitationFilterLinkFromBothPtr;

class Callback_Filter_linkedExcitationFilterList_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Filter_linkedExcitationFilterList_Base> Callback_Filter_linkedExcitationFilterListPtr;

class Callback_Filter_unloadEmissionFilterLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Filter_unloadEmissionFilterLink_Base> Callback_Filter_unloadEmissionFilterLinkPtr;

class Callback_Filter_sizeOfEmissionFilterLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Filter_sizeOfEmissionFilterLink_Base> Callback_Filter_sizeOfEmissionFilterLinkPtr;

class Callback_Filter_copyEmissionFilterLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Filter_copyEmissionFilterLink_Base> Callback_Filter_copyEmissionFilterLinkPtr;

class Callback_Filter_addFilterSetEmissionFilterLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Filter_addFilterSetEmissionFilterLink_Base> Callback_Filter_addFilterSetEmissionFilterLinkPtr;

class Callback_Filter_addAllFilterSetEmissionFilterLinkSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Filter_addAllFilterSetEmissionFilterLinkSet_Base> Callback_Filter_addAllFilterSetEmissionFilterLinkSetPtr;

class Callback_Filter_removeFilterSetEmissionFilterLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Filter_removeFilterSetEmissionFilterLink_Base> Callback_Filter_removeFilterSetEmissionFilterLinkPtr;

class Callback_Filter_removeAllFilterSetEmissionFilterLinkSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Filter_removeAllFilterSetEmissionFilterLinkSet_Base> Callback_Filter_removeAllFilterSetEmissionFilterLinkSetPtr;

class Callback_Filter_clearEmissionFilterLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Filter_clearEmissionFilterLink_Base> Callback_Filter_clearEmissionFilterLinkPtr;

class Callback_Filter_reloadEmissionFilterLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Filter_reloadEmissionFilterLink_Base> Callback_Filter_reloadEmissionFilterLinkPtr;

class Callback_Filter_getEmissionFilterLinkCountPerOwner_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Filter_getEmissionFilterLinkCountPerOwner_Base> Callback_Filter_getEmissionFilterLinkCountPerOwnerPtr;

class Callback_Filter_linkEmissionFilter_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Filter_linkEmissionFilter_Base> Callback_Filter_linkEmissionFilterPtr;

class Callback_Filter_addFilterSetEmissionFilterLinkToBoth_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Filter_addFilterSetEmissionFilterLinkToBoth_Base> Callback_Filter_addFilterSetEmissionFilterLinkToBothPtr;

class Callback_Filter_findFilterSetEmissionFilterLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Filter_findFilterSetEmissionFilterLink_Base> Callback_Filter_findFilterSetEmissionFilterLinkPtr;

class Callback_Filter_unlinkEmissionFilter_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Filter_unlinkEmissionFilter_Base> Callback_Filter_unlinkEmissionFilterPtr;

class Callback_Filter_removeFilterSetEmissionFilterLinkFromBoth_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Filter_removeFilterSetEmissionFilterLinkFromBoth_Base> Callback_Filter_removeFilterSetEmissionFilterLinkFromBothPtr;

class Callback_Filter_linkedEmissionFilterList_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Filter_linkedEmissionFilterList_Base> Callback_Filter_linkedEmissionFilterListPtr;

}

}

namespace IceProxy
{

namespace omero
{

namespace model
{

class Filter : virtual public ::IceProxy::omero::model::IObject
{
public:

    ::omero::RIntPtr getVersion()
    {
        return getVersion(0);
    }
    ::omero::RIntPtr getVersion(const ::Ice::Context& __ctx)
    {
        return getVersion(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getVersion()
    {
        return begin_getVersion(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx)
    {
        return begin_getVersion(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::omero::model::Callback_Filter_getVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx, const ::omero::model::Callback_Filter_getVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(&__ctx, __del, __cookie);
    }

    ::omero::RIntPtr end_getVersion(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RIntPtr getVersion(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setVersion(const ::omero::RIntPtr& theVersion)
    {
        setVersion(theVersion, 0);
    }
    void setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx)
    {
        setVersion(theVersion, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion)
    {
        return begin_setVersion(theVersion, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx)
    {
        return begin_setVersion(theVersion, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::omero::model::Callback_Filter_setVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::omero::model::Callback_Filter_setVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, &__ctx, __del, __cookie);
    }

    void end_setVersion(const ::Ice::AsyncResultPtr&);
    
private:

    void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getManufacturer()
    {
        return getManufacturer(0);
    }
    ::omero::RStringPtr getManufacturer(const ::Ice::Context& __ctx)
    {
        return getManufacturer(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getManufacturer()
    {
        return begin_getManufacturer(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getManufacturer(const ::Ice::Context& __ctx)
    {
        return begin_getManufacturer(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getManufacturer(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getManufacturer(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getManufacturer(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getManufacturer(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getManufacturer(const ::omero::model::Callback_Filter_getManufacturerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getManufacturer(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getManufacturer(const ::Ice::Context& __ctx, const ::omero::model::Callback_Filter_getManufacturerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getManufacturer(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getManufacturer(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getManufacturer(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getManufacturer(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setManufacturer(const ::omero::RStringPtr& theManufacturer)
    {
        setManufacturer(theManufacturer, 0);
    }
    void setManufacturer(const ::omero::RStringPtr& theManufacturer, const ::Ice::Context& __ctx)
    {
        setManufacturer(theManufacturer, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setManufacturer(const ::omero::RStringPtr& theManufacturer)
    {
        return begin_setManufacturer(theManufacturer, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setManufacturer(const ::omero::RStringPtr& theManufacturer, const ::Ice::Context& __ctx)
    {
        return begin_setManufacturer(theManufacturer, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setManufacturer(const ::omero::RStringPtr& theManufacturer, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setManufacturer(theManufacturer, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setManufacturer(const ::omero::RStringPtr& theManufacturer, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setManufacturer(theManufacturer, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setManufacturer(const ::omero::RStringPtr& theManufacturer, const ::omero::model::Callback_Filter_setManufacturerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setManufacturer(theManufacturer, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setManufacturer(const ::omero::RStringPtr& theManufacturer, const ::Ice::Context& __ctx, const ::omero::model::Callback_Filter_setManufacturerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setManufacturer(theManufacturer, &__ctx, __del, __cookie);
    }

    void end_setManufacturer(const ::Ice::AsyncResultPtr&);
    
private:

    void setManufacturer(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setManufacturer(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getModel()
    {
        return getModel(0);
    }
    ::omero::RStringPtr getModel(const ::Ice::Context& __ctx)
    {
        return getModel(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getModel()
    {
        return begin_getModel(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getModel(const ::Ice::Context& __ctx)
    {
        return begin_getModel(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getModel(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getModel(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getModel(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getModel(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getModel(const ::omero::model::Callback_Filter_getModelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getModel(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getModel(const ::Ice::Context& __ctx, const ::omero::model::Callback_Filter_getModelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getModel(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getModel(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getModel(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getModel(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setModel(const ::omero::RStringPtr& theModel)
    {
        setModel(theModel, 0);
    }
    void setModel(const ::omero::RStringPtr& theModel, const ::Ice::Context& __ctx)
    {
        setModel(theModel, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setModel(const ::omero::RStringPtr& theModel)
    {
        return begin_setModel(theModel, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setModel(const ::omero::RStringPtr& theModel, const ::Ice::Context& __ctx)
    {
        return begin_setModel(theModel, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setModel(const ::omero::RStringPtr& theModel, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setModel(theModel, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setModel(const ::omero::RStringPtr& theModel, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setModel(theModel, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setModel(const ::omero::RStringPtr& theModel, const ::omero::model::Callback_Filter_setModelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setModel(theModel, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setModel(const ::omero::RStringPtr& theModel, const ::Ice::Context& __ctx, const ::omero::model::Callback_Filter_setModelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setModel(theModel, &__ctx, __del, __cookie);
    }

    void end_setModel(const ::Ice::AsyncResultPtr&);
    
private:

    void setModel(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setModel(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getLotNumber()
    {
        return getLotNumber(0);
    }
    ::omero::RStringPtr getLotNumber(const ::Ice::Context& __ctx)
    {
        return getLotNumber(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getLotNumber()
    {
        return begin_getLotNumber(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getLotNumber(const ::Ice::Context& __ctx)
    {
        return begin_getLotNumber(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getLotNumber(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getLotNumber(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getLotNumber(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getLotNumber(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getLotNumber(const ::omero::model::Callback_Filter_getLotNumberPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getLotNumber(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getLotNumber(const ::Ice::Context& __ctx, const ::omero::model::Callback_Filter_getLotNumberPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getLotNumber(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getLotNumber(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getLotNumber(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getLotNumber(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setLotNumber(const ::omero::RStringPtr& theLotNumber)
    {
        setLotNumber(theLotNumber, 0);
    }
    void setLotNumber(const ::omero::RStringPtr& theLotNumber, const ::Ice::Context& __ctx)
    {
        setLotNumber(theLotNumber, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setLotNumber(const ::omero::RStringPtr& theLotNumber)
    {
        return begin_setLotNumber(theLotNumber, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setLotNumber(const ::omero::RStringPtr& theLotNumber, const ::Ice::Context& __ctx)
    {
        return begin_setLotNumber(theLotNumber, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setLotNumber(const ::omero::RStringPtr& theLotNumber, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setLotNumber(theLotNumber, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setLotNumber(const ::omero::RStringPtr& theLotNumber, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setLotNumber(theLotNumber, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setLotNumber(const ::omero::RStringPtr& theLotNumber, const ::omero::model::Callback_Filter_setLotNumberPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setLotNumber(theLotNumber, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setLotNumber(const ::omero::RStringPtr& theLotNumber, const ::Ice::Context& __ctx, const ::omero::model::Callback_Filter_setLotNumberPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setLotNumber(theLotNumber, &__ctx, __del, __cookie);
    }

    void end_setLotNumber(const ::Ice::AsyncResultPtr&);
    
private:

    void setLotNumber(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setLotNumber(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getSerialNumber()
    {
        return getSerialNumber(0);
    }
    ::omero::RStringPtr getSerialNumber(const ::Ice::Context& __ctx)
    {
        return getSerialNumber(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getSerialNumber()
    {
        return begin_getSerialNumber(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSerialNumber(const ::Ice::Context& __ctx)
    {
        return begin_getSerialNumber(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSerialNumber(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSerialNumber(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSerialNumber(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSerialNumber(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSerialNumber(const ::omero::model::Callback_Filter_getSerialNumberPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSerialNumber(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSerialNumber(const ::Ice::Context& __ctx, const ::omero::model::Callback_Filter_getSerialNumberPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSerialNumber(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getSerialNumber(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getSerialNumber(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getSerialNumber(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setSerialNumber(const ::omero::RStringPtr& theSerialNumber)
    {
        setSerialNumber(theSerialNumber, 0);
    }
    void setSerialNumber(const ::omero::RStringPtr& theSerialNumber, const ::Ice::Context& __ctx)
    {
        setSerialNumber(theSerialNumber, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setSerialNumber(const ::omero::RStringPtr& theSerialNumber)
    {
        return begin_setSerialNumber(theSerialNumber, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setSerialNumber(const ::omero::RStringPtr& theSerialNumber, const ::Ice::Context& __ctx)
    {
        return begin_setSerialNumber(theSerialNumber, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setSerialNumber(const ::omero::RStringPtr& theSerialNumber, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSerialNumber(theSerialNumber, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSerialNumber(const ::omero::RStringPtr& theSerialNumber, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSerialNumber(theSerialNumber, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSerialNumber(const ::omero::RStringPtr& theSerialNumber, const ::omero::model::Callback_Filter_setSerialNumberPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSerialNumber(theSerialNumber, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSerialNumber(const ::omero::RStringPtr& theSerialNumber, const ::Ice::Context& __ctx, const ::omero::model::Callback_Filter_setSerialNumberPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSerialNumber(theSerialNumber, &__ctx, __del, __cookie);
    }

    void end_setSerialNumber(const ::Ice::AsyncResultPtr&);
    
private:

    void setSerialNumber(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setSerialNumber(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getFilterWheel()
    {
        return getFilterWheel(0);
    }
    ::omero::RStringPtr getFilterWheel(const ::Ice::Context& __ctx)
    {
        return getFilterWheel(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getFilterWheel()
    {
        return begin_getFilterWheel(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getFilterWheel(const ::Ice::Context& __ctx)
    {
        return begin_getFilterWheel(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getFilterWheel(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFilterWheel(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getFilterWheel(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFilterWheel(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getFilterWheel(const ::omero::model::Callback_Filter_getFilterWheelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFilterWheel(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getFilterWheel(const ::Ice::Context& __ctx, const ::omero::model::Callback_Filter_getFilterWheelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFilterWheel(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getFilterWheel(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getFilterWheel(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getFilterWheel(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setFilterWheel(const ::omero::RStringPtr& theFilterWheel)
    {
        setFilterWheel(theFilterWheel, 0);
    }
    void setFilterWheel(const ::omero::RStringPtr& theFilterWheel, const ::Ice::Context& __ctx)
    {
        setFilterWheel(theFilterWheel, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setFilterWheel(const ::omero::RStringPtr& theFilterWheel)
    {
        return begin_setFilterWheel(theFilterWheel, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setFilterWheel(const ::omero::RStringPtr& theFilterWheel, const ::Ice::Context& __ctx)
    {
        return begin_setFilterWheel(theFilterWheel, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setFilterWheel(const ::omero::RStringPtr& theFilterWheel, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setFilterWheel(theFilterWheel, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setFilterWheel(const ::omero::RStringPtr& theFilterWheel, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setFilterWheel(theFilterWheel, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setFilterWheel(const ::omero::RStringPtr& theFilterWheel, const ::omero::model::Callback_Filter_setFilterWheelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setFilterWheel(theFilterWheel, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setFilterWheel(const ::omero::RStringPtr& theFilterWheel, const ::Ice::Context& __ctx, const ::omero::model::Callback_Filter_setFilterWheelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setFilterWheel(theFilterWheel, &__ctx, __del, __cookie);
    }

    void end_setFilterWheel(const ::Ice::AsyncResultPtr&);
    
private:

    void setFilterWheel(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setFilterWheel(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::FilterTypePtr getType()
    {
        return getType(0);
    }
    ::omero::model::FilterTypePtr getType(const ::Ice::Context& __ctx)
    {
        return getType(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getType()
    {
        return begin_getType(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getType(const ::Ice::Context& __ctx)
    {
        return begin_getType(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getType(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getType(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getType(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getType(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getType(const ::omero::model::Callback_Filter_getTypePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getType(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getType(const ::Ice::Context& __ctx, const ::omero::model::Callback_Filter_getTypePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getType(&__ctx, __del, __cookie);
    }

    ::omero::model::FilterTypePtr end_getType(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::FilterTypePtr getType(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getType(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setType(const ::omero::model::FilterTypePtr& theType)
    {
        setType(theType, 0);
    }
    void setType(const ::omero::model::FilterTypePtr& theType, const ::Ice::Context& __ctx)
    {
        setType(theType, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setType(const ::omero::model::FilterTypePtr& theType)
    {
        return begin_setType(theType, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setType(const ::omero::model::FilterTypePtr& theType, const ::Ice::Context& __ctx)
    {
        return begin_setType(theType, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setType(const ::omero::model::FilterTypePtr& theType, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setType(theType, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setType(const ::omero::model::FilterTypePtr& theType, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setType(theType, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setType(const ::omero::model::FilterTypePtr& theType, const ::omero::model::Callback_Filter_setTypePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setType(theType, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setType(const ::omero::model::FilterTypePtr& theType, const ::Ice::Context& __ctx, const ::omero::model::Callback_Filter_setTypePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setType(theType, &__ctx, __del, __cookie);
    }

    void end_setType(const ::Ice::AsyncResultPtr&);
    
private:

    void setType(const ::omero::model::FilterTypePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setType(const ::omero::model::FilterTypePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::TransmittanceRangePtr getTransmittanceRange()
    {
        return getTransmittanceRange(0);
    }
    ::omero::model::TransmittanceRangePtr getTransmittanceRange(const ::Ice::Context& __ctx)
    {
        return getTransmittanceRange(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getTransmittanceRange()
    {
        return begin_getTransmittanceRange(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getTransmittanceRange(const ::Ice::Context& __ctx)
    {
        return begin_getTransmittanceRange(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getTransmittanceRange(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTransmittanceRange(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTransmittanceRange(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTransmittanceRange(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTransmittanceRange(const ::omero::model::Callback_Filter_getTransmittanceRangePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTransmittanceRange(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTransmittanceRange(const ::Ice::Context& __ctx, const ::omero::model::Callback_Filter_getTransmittanceRangePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTransmittanceRange(&__ctx, __del, __cookie);
    }

    ::omero::model::TransmittanceRangePtr end_getTransmittanceRange(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::TransmittanceRangePtr getTransmittanceRange(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getTransmittanceRange(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setTransmittanceRange(const ::omero::model::TransmittanceRangePtr& theTransmittanceRange)
    {
        setTransmittanceRange(theTransmittanceRange, 0);
    }
    void setTransmittanceRange(const ::omero::model::TransmittanceRangePtr& theTransmittanceRange, const ::Ice::Context& __ctx)
    {
        setTransmittanceRange(theTransmittanceRange, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setTransmittanceRange(const ::omero::model::TransmittanceRangePtr& theTransmittanceRange)
    {
        return begin_setTransmittanceRange(theTransmittanceRange, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setTransmittanceRange(const ::omero::model::TransmittanceRangePtr& theTransmittanceRange, const ::Ice::Context& __ctx)
    {
        return begin_setTransmittanceRange(theTransmittanceRange, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setTransmittanceRange(const ::omero::model::TransmittanceRangePtr& theTransmittanceRange, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTransmittanceRange(theTransmittanceRange, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setTransmittanceRange(const ::omero::model::TransmittanceRangePtr& theTransmittanceRange, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTransmittanceRange(theTransmittanceRange, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setTransmittanceRange(const ::omero::model::TransmittanceRangePtr& theTransmittanceRange, const ::omero::model::Callback_Filter_setTransmittanceRangePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTransmittanceRange(theTransmittanceRange, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setTransmittanceRange(const ::omero::model::TransmittanceRangePtr& theTransmittanceRange, const ::Ice::Context& __ctx, const ::omero::model::Callback_Filter_setTransmittanceRangePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTransmittanceRange(theTransmittanceRange, &__ctx, __del, __cookie);
    }

    void end_setTransmittanceRange(const ::Ice::AsyncResultPtr&);
    
private:

    void setTransmittanceRange(const ::omero::model::TransmittanceRangePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setTransmittanceRange(const ::omero::model::TransmittanceRangePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::InstrumentPtr getInstrument()
    {
        return getInstrument(0);
    }
    ::omero::model::InstrumentPtr getInstrument(const ::Ice::Context& __ctx)
    {
        return getInstrument(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getInstrument()
    {
        return begin_getInstrument(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getInstrument(const ::Ice::Context& __ctx)
    {
        return begin_getInstrument(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getInstrument(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getInstrument(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getInstrument(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getInstrument(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getInstrument(const ::omero::model::Callback_Filter_getInstrumentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getInstrument(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getInstrument(const ::Ice::Context& __ctx, const ::omero::model::Callback_Filter_getInstrumentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getInstrument(&__ctx, __del, __cookie);
    }

    ::omero::model::InstrumentPtr end_getInstrument(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::InstrumentPtr getInstrument(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getInstrument(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setInstrument(const ::omero::model::InstrumentPtr& theInstrument)
    {
        setInstrument(theInstrument, 0);
    }
    void setInstrument(const ::omero::model::InstrumentPtr& theInstrument, const ::Ice::Context& __ctx)
    {
        setInstrument(theInstrument, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setInstrument(const ::omero::model::InstrumentPtr& theInstrument)
    {
        return begin_setInstrument(theInstrument, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setInstrument(const ::omero::model::InstrumentPtr& theInstrument, const ::Ice::Context& __ctx)
    {
        return begin_setInstrument(theInstrument, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setInstrument(const ::omero::model::InstrumentPtr& theInstrument, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setInstrument(theInstrument, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setInstrument(const ::omero::model::InstrumentPtr& theInstrument, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setInstrument(theInstrument, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setInstrument(const ::omero::model::InstrumentPtr& theInstrument, const ::omero::model::Callback_Filter_setInstrumentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setInstrument(theInstrument, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setInstrument(const ::omero::model::InstrumentPtr& theInstrument, const ::Ice::Context& __ctx, const ::omero::model::Callback_Filter_setInstrumentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setInstrument(theInstrument, &__ctx, __del, __cookie);
    }

    void end_setInstrument(const ::Ice::AsyncResultPtr&);
    
private:

    void setInstrument(const ::omero::model::InstrumentPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setInstrument(const ::omero::model::InstrumentPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unloadExcitationFilterLink()
    {
        unloadExcitationFilterLink(0);
    }
    void unloadExcitationFilterLink(const ::Ice::Context& __ctx)
    {
        unloadExcitationFilterLink(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_unloadExcitationFilterLink()
    {
        return begin_unloadExcitationFilterLink(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadExcitationFilterLink(const ::Ice::Context& __ctx)
    {
        return begin_unloadExcitationFilterLink(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadExcitationFilterLink(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadExcitationFilterLink(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadExcitationFilterLink(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadExcitationFilterLink(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadExcitationFilterLink(const ::omero::model::Callback_Filter_unloadExcitationFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadExcitationFilterLink(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadExcitationFilterLink(const ::Ice::Context& __ctx, const ::omero::model::Callback_Filter_unloadExcitationFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadExcitationFilterLink(&__ctx, __del, __cookie);
    }

    void end_unloadExcitationFilterLink(const ::Ice::AsyncResultPtr&);
    
private:

    void unloadExcitationFilterLink(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unloadExcitationFilterLink(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int sizeOfExcitationFilterLink()
    {
        return sizeOfExcitationFilterLink(0);
    }
    ::Ice::Int sizeOfExcitationFilterLink(const ::Ice::Context& __ctx)
    {
        return sizeOfExcitationFilterLink(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_sizeOfExcitationFilterLink()
    {
        return begin_sizeOfExcitationFilterLink(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfExcitationFilterLink(const ::Ice::Context& __ctx)
    {
        return begin_sizeOfExcitationFilterLink(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfExcitationFilterLink(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfExcitationFilterLink(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfExcitationFilterLink(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfExcitationFilterLink(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfExcitationFilterLink(const ::omero::model::Callback_Filter_sizeOfExcitationFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfExcitationFilterLink(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfExcitationFilterLink(const ::Ice::Context& __ctx, const ::omero::model::Callback_Filter_sizeOfExcitationFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfExcitationFilterLink(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_sizeOfExcitationFilterLink(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int sizeOfExcitationFilterLink(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sizeOfExcitationFilterLink(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::FilterExcitationFilterLinkSeq copyExcitationFilterLink()
    {
        return copyExcitationFilterLink(0);
    }
    ::omero::model::FilterExcitationFilterLinkSeq copyExcitationFilterLink(const ::Ice::Context& __ctx)
    {
        return copyExcitationFilterLink(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_copyExcitationFilterLink()
    {
        return begin_copyExcitationFilterLink(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyExcitationFilterLink(const ::Ice::Context& __ctx)
    {
        return begin_copyExcitationFilterLink(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyExcitationFilterLink(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyExcitationFilterLink(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyExcitationFilterLink(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyExcitationFilterLink(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyExcitationFilterLink(const ::omero::model::Callback_Filter_copyExcitationFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyExcitationFilterLink(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyExcitationFilterLink(const ::Ice::Context& __ctx, const ::omero::model::Callback_Filter_copyExcitationFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyExcitationFilterLink(&__ctx, __del, __cookie);
    }

    ::omero::model::FilterExcitationFilterLinkSeq end_copyExcitationFilterLink(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::FilterExcitationFilterLinkSeq copyExcitationFilterLink(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_copyExcitationFilterLink(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addFilterSetExcitationFilterLink(const ::omero::model::FilterSetExcitationFilterLinkPtr& target)
    {
        addFilterSetExcitationFilterLink(target, 0);
    }
    void addFilterSetExcitationFilterLink(const ::omero::model::FilterSetExcitationFilterLinkPtr& target, const ::Ice::Context& __ctx)
    {
        addFilterSetExcitationFilterLink(target, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addFilterSetExcitationFilterLink(const ::omero::model::FilterSetExcitationFilterLinkPtr& target)
    {
        return begin_addFilterSetExcitationFilterLink(target, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addFilterSetExcitationFilterLink(const ::omero::model::FilterSetExcitationFilterLinkPtr& target, const ::Ice::Context& __ctx)
    {
        return begin_addFilterSetExcitationFilterLink(target, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addFilterSetExcitationFilterLink(const ::omero::model::FilterSetExcitationFilterLinkPtr& target, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addFilterSetExcitationFilterLink(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addFilterSetExcitationFilterLink(const ::omero::model::FilterSetExcitationFilterLinkPtr& target, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addFilterSetExcitationFilterLink(target, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addFilterSetExcitationFilterLink(const ::omero::model::FilterSetExcitationFilterLinkPtr& target, const ::omero::model::Callback_Filter_addFilterSetExcitationFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addFilterSetExcitationFilterLink(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addFilterSetExcitationFilterLink(const ::omero::model::FilterSetExcitationFilterLinkPtr& target, const ::Ice::Context& __ctx, const ::omero::model::Callback_Filter_addFilterSetExcitationFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addFilterSetExcitationFilterLink(target, &__ctx, __del, __cookie);
    }

    void end_addFilterSetExcitationFilterLink(const ::Ice::AsyncResultPtr&);
    
private:

    void addFilterSetExcitationFilterLink(const ::omero::model::FilterSetExcitationFilterLinkPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addFilterSetExcitationFilterLink(const ::omero::model::FilterSetExcitationFilterLinkPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addAllFilterSetExcitationFilterLinkSet(const ::omero::model::FilterExcitationFilterLinkSeq& targets)
    {
        addAllFilterSetExcitationFilterLinkSet(targets, 0);
    }
    void addAllFilterSetExcitationFilterLinkSet(const ::omero::model::FilterExcitationFilterLinkSeq& targets, const ::Ice::Context& __ctx)
    {
        addAllFilterSetExcitationFilterLinkSet(targets, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addAllFilterSetExcitationFilterLinkSet(const ::omero::model::FilterExcitationFilterLinkSeq& targets)
    {
        return begin_addAllFilterSetExcitationFilterLinkSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllFilterSetExcitationFilterLinkSet(const ::omero::model::FilterExcitationFilterLinkSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_addAllFilterSetExcitationFilterLinkSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllFilterSetExcitationFilterLinkSet(const ::omero::model::FilterExcitationFilterLinkSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllFilterSetExcitationFilterLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllFilterSetExcitationFilterLinkSet(const ::omero::model::FilterExcitationFilterLinkSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllFilterSetExcitationFilterLinkSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllFilterSetExcitationFilterLinkSet(const ::omero::model::FilterExcitationFilterLinkSeq& targets, const ::omero::model::Callback_Filter_addAllFilterSetExcitationFilterLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllFilterSetExcitationFilterLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllFilterSetExcitationFilterLinkSet(const ::omero::model::FilterExcitationFilterLinkSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Filter_addAllFilterSetExcitationFilterLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllFilterSetExcitationFilterLinkSet(targets, &__ctx, __del, __cookie);
    }

    void end_addAllFilterSetExcitationFilterLinkSet(const ::Ice::AsyncResultPtr&);
    
private:

    void addAllFilterSetExcitationFilterLinkSet(const ::omero::model::FilterExcitationFilterLinkSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addAllFilterSetExcitationFilterLinkSet(const ::omero::model::FilterExcitationFilterLinkSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeFilterSetExcitationFilterLink(const ::omero::model::FilterSetExcitationFilterLinkPtr& theTarget)
    {
        removeFilterSetExcitationFilterLink(theTarget, 0);
    }
    void removeFilterSetExcitationFilterLink(const ::omero::model::FilterSetExcitationFilterLinkPtr& theTarget, const ::Ice::Context& __ctx)
    {
        removeFilterSetExcitationFilterLink(theTarget, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removeFilterSetExcitationFilterLink(const ::omero::model::FilterSetExcitationFilterLinkPtr& theTarget)
    {
        return begin_removeFilterSetExcitationFilterLink(theTarget, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeFilterSetExcitationFilterLink(const ::omero::model::FilterSetExcitationFilterLinkPtr& theTarget, const ::Ice::Context& __ctx)
    {
        return begin_removeFilterSetExcitationFilterLink(theTarget, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeFilterSetExcitationFilterLink(const ::omero::model::FilterSetExcitationFilterLinkPtr& theTarget, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeFilterSetExcitationFilterLink(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeFilterSetExcitationFilterLink(const ::omero::model::FilterSetExcitationFilterLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeFilterSetExcitationFilterLink(theTarget, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeFilterSetExcitationFilterLink(const ::omero::model::FilterSetExcitationFilterLinkPtr& theTarget, const ::omero::model::Callback_Filter_removeFilterSetExcitationFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeFilterSetExcitationFilterLink(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeFilterSetExcitationFilterLink(const ::omero::model::FilterSetExcitationFilterLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::omero::model::Callback_Filter_removeFilterSetExcitationFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeFilterSetExcitationFilterLink(theTarget, &__ctx, __del, __cookie);
    }

    void end_removeFilterSetExcitationFilterLink(const ::Ice::AsyncResultPtr&);
    
private:

    void removeFilterSetExcitationFilterLink(const ::omero::model::FilterSetExcitationFilterLinkPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeFilterSetExcitationFilterLink(const ::omero::model::FilterSetExcitationFilterLinkPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeAllFilterSetExcitationFilterLinkSet(const ::omero::model::FilterExcitationFilterLinkSeq& targets)
    {
        removeAllFilterSetExcitationFilterLinkSet(targets, 0);
    }
    void removeAllFilterSetExcitationFilterLinkSet(const ::omero::model::FilterExcitationFilterLinkSeq& targets, const ::Ice::Context& __ctx)
    {
        removeAllFilterSetExcitationFilterLinkSet(targets, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removeAllFilterSetExcitationFilterLinkSet(const ::omero::model::FilterExcitationFilterLinkSeq& targets)
    {
        return begin_removeAllFilterSetExcitationFilterLinkSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllFilterSetExcitationFilterLinkSet(const ::omero::model::FilterExcitationFilterLinkSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_removeAllFilterSetExcitationFilterLinkSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllFilterSetExcitationFilterLinkSet(const ::omero::model::FilterExcitationFilterLinkSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllFilterSetExcitationFilterLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllFilterSetExcitationFilterLinkSet(const ::omero::model::FilterExcitationFilterLinkSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllFilterSetExcitationFilterLinkSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllFilterSetExcitationFilterLinkSet(const ::omero::model::FilterExcitationFilterLinkSeq& targets, const ::omero::model::Callback_Filter_removeAllFilterSetExcitationFilterLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllFilterSetExcitationFilterLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllFilterSetExcitationFilterLinkSet(const ::omero::model::FilterExcitationFilterLinkSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Filter_removeAllFilterSetExcitationFilterLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllFilterSetExcitationFilterLinkSet(targets, &__ctx, __del, __cookie);
    }

    void end_removeAllFilterSetExcitationFilterLinkSet(const ::Ice::AsyncResultPtr&);
    
private:

    void removeAllFilterSetExcitationFilterLinkSet(const ::omero::model::FilterExcitationFilterLinkSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeAllFilterSetExcitationFilterLinkSet(const ::omero::model::FilterExcitationFilterLinkSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void clearExcitationFilterLink()
    {
        clearExcitationFilterLink(0);
    }
    void clearExcitationFilterLink(const ::Ice::Context& __ctx)
    {
        clearExcitationFilterLink(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_clearExcitationFilterLink()
    {
        return begin_clearExcitationFilterLink(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearExcitationFilterLink(const ::Ice::Context& __ctx)
    {
        return begin_clearExcitationFilterLink(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearExcitationFilterLink(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearExcitationFilterLink(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearExcitationFilterLink(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearExcitationFilterLink(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearExcitationFilterLink(const ::omero::model::Callback_Filter_clearExcitationFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearExcitationFilterLink(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearExcitationFilterLink(const ::Ice::Context& __ctx, const ::omero::model::Callback_Filter_clearExcitationFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearExcitationFilterLink(&__ctx, __del, __cookie);
    }

    void end_clearExcitationFilterLink(const ::Ice::AsyncResultPtr&);
    
private:

    void clearExcitationFilterLink(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_clearExcitationFilterLink(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reloadExcitationFilterLink(const ::omero::model::FilterPtr& toCopy)
    {
        reloadExcitationFilterLink(toCopy, 0);
    }
    void reloadExcitationFilterLink(const ::omero::model::FilterPtr& toCopy, const ::Ice::Context& __ctx)
    {
        reloadExcitationFilterLink(toCopy, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_reloadExcitationFilterLink(const ::omero::model::FilterPtr& toCopy)
    {
        return begin_reloadExcitationFilterLink(toCopy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadExcitationFilterLink(const ::omero::model::FilterPtr& toCopy, const ::Ice::Context& __ctx)
    {
        return begin_reloadExcitationFilterLink(toCopy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadExcitationFilterLink(const ::omero::model::FilterPtr& toCopy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadExcitationFilterLink(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadExcitationFilterLink(const ::omero::model::FilterPtr& toCopy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadExcitationFilterLink(toCopy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadExcitationFilterLink(const ::omero::model::FilterPtr& toCopy, const ::omero::model::Callback_Filter_reloadExcitationFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadExcitationFilterLink(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadExcitationFilterLink(const ::omero::model::FilterPtr& toCopy, const ::Ice::Context& __ctx, const ::omero::model::Callback_Filter_reloadExcitationFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadExcitationFilterLink(toCopy, &__ctx, __del, __cookie);
    }

    void end_reloadExcitationFilterLink(const ::Ice::AsyncResultPtr&);
    
private:

    void reloadExcitationFilterLink(const ::omero::model::FilterPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reloadExcitationFilterLink(const ::omero::model::FilterPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::sys::CountMap getExcitationFilterLinkCountPerOwner()
    {
        return getExcitationFilterLinkCountPerOwner(0);
    }
    ::omero::sys::CountMap getExcitationFilterLinkCountPerOwner(const ::Ice::Context& __ctx)
    {
        return getExcitationFilterLinkCountPerOwner(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getExcitationFilterLinkCountPerOwner()
    {
        return begin_getExcitationFilterLinkCountPerOwner(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getExcitationFilterLinkCountPerOwner(const ::Ice::Context& __ctx)
    {
        return begin_getExcitationFilterLinkCountPerOwner(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getExcitationFilterLinkCountPerOwner(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getExcitationFilterLinkCountPerOwner(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getExcitationFilterLinkCountPerOwner(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getExcitationFilterLinkCountPerOwner(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getExcitationFilterLinkCountPerOwner(const ::omero::model::Callback_Filter_getExcitationFilterLinkCountPerOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getExcitationFilterLinkCountPerOwner(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getExcitationFilterLinkCountPerOwner(const ::Ice::Context& __ctx, const ::omero::model::Callback_Filter_getExcitationFilterLinkCountPerOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getExcitationFilterLinkCountPerOwner(&__ctx, __del, __cookie);
    }

    ::omero::sys::CountMap end_getExcitationFilterLinkCountPerOwner(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::sys::CountMap getExcitationFilterLinkCountPerOwner(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getExcitationFilterLinkCountPerOwner(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::FilterSetExcitationFilterLinkPtr linkExcitationFilter(const ::omero::model::FilterSetPtr& addition)
    {
        return linkExcitationFilter(addition, 0);
    }
    ::omero::model::FilterSetExcitationFilterLinkPtr linkExcitationFilter(const ::omero::model::FilterSetPtr& addition, const ::Ice::Context& __ctx)
    {
        return linkExcitationFilter(addition, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_linkExcitationFilter(const ::omero::model::FilterSetPtr& addition)
    {
        return begin_linkExcitationFilter(addition, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkExcitationFilter(const ::omero::model::FilterSetPtr& addition, const ::Ice::Context& __ctx)
    {
        return begin_linkExcitationFilter(addition, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkExcitationFilter(const ::omero::model::FilterSetPtr& addition, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkExcitationFilter(addition, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkExcitationFilter(const ::omero::model::FilterSetPtr& addition, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkExcitationFilter(addition, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkExcitationFilter(const ::omero::model::FilterSetPtr& addition, const ::omero::model::Callback_Filter_linkExcitationFilterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkExcitationFilter(addition, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkExcitationFilter(const ::omero::model::FilterSetPtr& addition, const ::Ice::Context& __ctx, const ::omero::model::Callback_Filter_linkExcitationFilterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkExcitationFilter(addition, &__ctx, __del, __cookie);
    }

    ::omero::model::FilterSetExcitationFilterLinkPtr end_linkExcitationFilter(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::FilterSetExcitationFilterLinkPtr linkExcitationFilter(const ::omero::model::FilterSetPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_linkExcitationFilter(const ::omero::model::FilterSetPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addFilterSetExcitationFilterLinkToBoth(const ::omero::model::FilterSetExcitationFilterLinkPtr& link, bool bothSides)
    {
        addFilterSetExcitationFilterLinkToBoth(link, bothSides, 0);
    }
    void addFilterSetExcitationFilterLinkToBoth(const ::omero::model::FilterSetExcitationFilterLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        addFilterSetExcitationFilterLinkToBoth(link, bothSides, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addFilterSetExcitationFilterLinkToBoth(const ::omero::model::FilterSetExcitationFilterLinkPtr& link, bool bothSides)
    {
        return begin_addFilterSetExcitationFilterLinkToBoth(link, bothSides, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addFilterSetExcitationFilterLinkToBoth(const ::omero::model::FilterSetExcitationFilterLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        return begin_addFilterSetExcitationFilterLinkToBoth(link, bothSides, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addFilterSetExcitationFilterLinkToBoth(const ::omero::model::FilterSetExcitationFilterLinkPtr& link, bool bothSides, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addFilterSetExcitationFilterLinkToBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addFilterSetExcitationFilterLinkToBoth(const ::omero::model::FilterSetExcitationFilterLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addFilterSetExcitationFilterLinkToBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addFilterSetExcitationFilterLinkToBoth(const ::omero::model::FilterSetExcitationFilterLinkPtr& link, bool bothSides, const ::omero::model::Callback_Filter_addFilterSetExcitationFilterLinkToBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addFilterSetExcitationFilterLinkToBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addFilterSetExcitationFilterLinkToBoth(const ::omero::model::FilterSetExcitationFilterLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::omero::model::Callback_Filter_addFilterSetExcitationFilterLinkToBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addFilterSetExcitationFilterLinkToBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    void end_addFilterSetExcitationFilterLinkToBoth(const ::Ice::AsyncResultPtr&);
    
private:

    void addFilterSetExcitationFilterLinkToBoth(const ::omero::model::FilterSetExcitationFilterLinkPtr&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addFilterSetExcitationFilterLinkToBoth(const ::omero::model::FilterSetExcitationFilterLinkPtr&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::FilterExcitationFilterLinkSeq findFilterSetExcitationFilterLink(const ::omero::model::FilterSetPtr& removal)
    {
        return findFilterSetExcitationFilterLink(removal, 0);
    }
    ::omero::model::FilterExcitationFilterLinkSeq findFilterSetExcitationFilterLink(const ::omero::model::FilterSetPtr& removal, const ::Ice::Context& __ctx)
    {
        return findFilterSetExcitationFilterLink(removal, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_findFilterSetExcitationFilterLink(const ::omero::model::FilterSetPtr& removal)
    {
        return begin_findFilterSetExcitationFilterLink(removal, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findFilterSetExcitationFilterLink(const ::omero::model::FilterSetPtr& removal, const ::Ice::Context& __ctx)
    {
        return begin_findFilterSetExcitationFilterLink(removal, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findFilterSetExcitationFilterLink(const ::omero::model::FilterSetPtr& removal, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findFilterSetExcitationFilterLink(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findFilterSetExcitationFilterLink(const ::omero::model::FilterSetPtr& removal, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findFilterSetExcitationFilterLink(removal, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findFilterSetExcitationFilterLink(const ::omero::model::FilterSetPtr& removal, const ::omero::model::Callback_Filter_findFilterSetExcitationFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findFilterSetExcitationFilterLink(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findFilterSetExcitationFilterLink(const ::omero::model::FilterSetPtr& removal, const ::Ice::Context& __ctx, const ::omero::model::Callback_Filter_findFilterSetExcitationFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findFilterSetExcitationFilterLink(removal, &__ctx, __del, __cookie);
    }

    ::omero::model::FilterExcitationFilterLinkSeq end_findFilterSetExcitationFilterLink(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::FilterExcitationFilterLinkSeq findFilterSetExcitationFilterLink(const ::omero::model::FilterSetPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_findFilterSetExcitationFilterLink(const ::omero::model::FilterSetPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unlinkExcitationFilter(const ::omero::model::FilterSetPtr& removal)
    {
        unlinkExcitationFilter(removal, 0);
    }
    void unlinkExcitationFilter(const ::omero::model::FilterSetPtr& removal, const ::Ice::Context& __ctx)
    {
        unlinkExcitationFilter(removal, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_unlinkExcitationFilter(const ::omero::model::FilterSetPtr& removal)
    {
        return begin_unlinkExcitationFilter(removal, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unlinkExcitationFilter(const ::omero::model::FilterSetPtr& removal, const ::Ice::Context& __ctx)
    {
        return begin_unlinkExcitationFilter(removal, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unlinkExcitationFilter(const ::omero::model::FilterSetPtr& removal, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkExcitationFilter(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkExcitationFilter(const ::omero::model::FilterSetPtr& removal, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkExcitationFilter(removal, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkExcitationFilter(const ::omero::model::FilterSetPtr& removal, const ::omero::model::Callback_Filter_unlinkExcitationFilterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkExcitationFilter(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkExcitationFilter(const ::omero::model::FilterSetPtr& removal, const ::Ice::Context& __ctx, const ::omero::model::Callback_Filter_unlinkExcitationFilterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkExcitationFilter(removal, &__ctx, __del, __cookie);
    }

    void end_unlinkExcitationFilter(const ::Ice::AsyncResultPtr&);
    
private:

    void unlinkExcitationFilter(const ::omero::model::FilterSetPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unlinkExcitationFilter(const ::omero::model::FilterSetPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeFilterSetExcitationFilterLinkFromBoth(const ::omero::model::FilterSetExcitationFilterLinkPtr& link, bool bothSides)
    {
        removeFilterSetExcitationFilterLinkFromBoth(link, bothSides, 0);
    }
    void removeFilterSetExcitationFilterLinkFromBoth(const ::omero::model::FilterSetExcitationFilterLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        removeFilterSetExcitationFilterLinkFromBoth(link, bothSides, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removeFilterSetExcitationFilterLinkFromBoth(const ::omero::model::FilterSetExcitationFilterLinkPtr& link, bool bothSides)
    {
        return begin_removeFilterSetExcitationFilterLinkFromBoth(link, bothSides, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeFilterSetExcitationFilterLinkFromBoth(const ::omero::model::FilterSetExcitationFilterLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        return begin_removeFilterSetExcitationFilterLinkFromBoth(link, bothSides, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeFilterSetExcitationFilterLinkFromBoth(const ::omero::model::FilterSetExcitationFilterLinkPtr& link, bool bothSides, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeFilterSetExcitationFilterLinkFromBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeFilterSetExcitationFilterLinkFromBoth(const ::omero::model::FilterSetExcitationFilterLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeFilterSetExcitationFilterLinkFromBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeFilterSetExcitationFilterLinkFromBoth(const ::omero::model::FilterSetExcitationFilterLinkPtr& link, bool bothSides, const ::omero::model::Callback_Filter_removeFilterSetExcitationFilterLinkFromBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeFilterSetExcitationFilterLinkFromBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeFilterSetExcitationFilterLinkFromBoth(const ::omero::model::FilterSetExcitationFilterLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::omero::model::Callback_Filter_removeFilterSetExcitationFilterLinkFromBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeFilterSetExcitationFilterLinkFromBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    void end_removeFilterSetExcitationFilterLinkFromBoth(const ::Ice::AsyncResultPtr&);
    
private:

    void removeFilterSetExcitationFilterLinkFromBoth(const ::omero::model::FilterSetExcitationFilterLinkPtr&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeFilterSetExcitationFilterLinkFromBoth(const ::omero::model::FilterSetExcitationFilterLinkPtr&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::FilterLinkedExcitationFilterSeq linkedExcitationFilterList()
    {
        return linkedExcitationFilterList(0);
    }
    ::omero::model::FilterLinkedExcitationFilterSeq linkedExcitationFilterList(const ::Ice::Context& __ctx)
    {
        return linkedExcitationFilterList(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_linkedExcitationFilterList()
    {
        return begin_linkedExcitationFilterList(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkedExcitationFilterList(const ::Ice::Context& __ctx)
    {
        return begin_linkedExcitationFilterList(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkedExcitationFilterList(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedExcitationFilterList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedExcitationFilterList(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedExcitationFilterList(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedExcitationFilterList(const ::omero::model::Callback_Filter_linkedExcitationFilterListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedExcitationFilterList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedExcitationFilterList(const ::Ice::Context& __ctx, const ::omero::model::Callback_Filter_linkedExcitationFilterListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedExcitationFilterList(&__ctx, __del, __cookie);
    }

    ::omero::model::FilterLinkedExcitationFilterSeq end_linkedExcitationFilterList(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::FilterLinkedExcitationFilterSeq linkedExcitationFilterList(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_linkedExcitationFilterList(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unloadEmissionFilterLink()
    {
        unloadEmissionFilterLink(0);
    }
    void unloadEmissionFilterLink(const ::Ice::Context& __ctx)
    {
        unloadEmissionFilterLink(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_unloadEmissionFilterLink()
    {
        return begin_unloadEmissionFilterLink(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadEmissionFilterLink(const ::Ice::Context& __ctx)
    {
        return begin_unloadEmissionFilterLink(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadEmissionFilterLink(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadEmissionFilterLink(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadEmissionFilterLink(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadEmissionFilterLink(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadEmissionFilterLink(const ::omero::model::Callback_Filter_unloadEmissionFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadEmissionFilterLink(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadEmissionFilterLink(const ::Ice::Context& __ctx, const ::omero::model::Callback_Filter_unloadEmissionFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadEmissionFilterLink(&__ctx, __del, __cookie);
    }

    void end_unloadEmissionFilterLink(const ::Ice::AsyncResultPtr&);
    
private:

    void unloadEmissionFilterLink(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unloadEmissionFilterLink(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int sizeOfEmissionFilterLink()
    {
        return sizeOfEmissionFilterLink(0);
    }
    ::Ice::Int sizeOfEmissionFilterLink(const ::Ice::Context& __ctx)
    {
        return sizeOfEmissionFilterLink(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_sizeOfEmissionFilterLink()
    {
        return begin_sizeOfEmissionFilterLink(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfEmissionFilterLink(const ::Ice::Context& __ctx)
    {
        return begin_sizeOfEmissionFilterLink(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfEmissionFilterLink(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfEmissionFilterLink(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfEmissionFilterLink(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfEmissionFilterLink(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfEmissionFilterLink(const ::omero::model::Callback_Filter_sizeOfEmissionFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfEmissionFilterLink(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfEmissionFilterLink(const ::Ice::Context& __ctx, const ::omero::model::Callback_Filter_sizeOfEmissionFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfEmissionFilterLink(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_sizeOfEmissionFilterLink(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int sizeOfEmissionFilterLink(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sizeOfEmissionFilterLink(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::FilterEmissionFilterLinkSeq copyEmissionFilterLink()
    {
        return copyEmissionFilterLink(0);
    }
    ::omero::model::FilterEmissionFilterLinkSeq copyEmissionFilterLink(const ::Ice::Context& __ctx)
    {
        return copyEmissionFilterLink(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_copyEmissionFilterLink()
    {
        return begin_copyEmissionFilterLink(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyEmissionFilterLink(const ::Ice::Context& __ctx)
    {
        return begin_copyEmissionFilterLink(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyEmissionFilterLink(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyEmissionFilterLink(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyEmissionFilterLink(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyEmissionFilterLink(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyEmissionFilterLink(const ::omero::model::Callback_Filter_copyEmissionFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyEmissionFilterLink(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyEmissionFilterLink(const ::Ice::Context& __ctx, const ::omero::model::Callback_Filter_copyEmissionFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyEmissionFilterLink(&__ctx, __del, __cookie);
    }

    ::omero::model::FilterEmissionFilterLinkSeq end_copyEmissionFilterLink(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::FilterEmissionFilterLinkSeq copyEmissionFilterLink(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_copyEmissionFilterLink(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addFilterSetEmissionFilterLink(const ::omero::model::FilterSetEmissionFilterLinkPtr& target)
    {
        addFilterSetEmissionFilterLink(target, 0);
    }
    void addFilterSetEmissionFilterLink(const ::omero::model::FilterSetEmissionFilterLinkPtr& target, const ::Ice::Context& __ctx)
    {
        addFilterSetEmissionFilterLink(target, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addFilterSetEmissionFilterLink(const ::omero::model::FilterSetEmissionFilterLinkPtr& target)
    {
        return begin_addFilterSetEmissionFilterLink(target, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addFilterSetEmissionFilterLink(const ::omero::model::FilterSetEmissionFilterLinkPtr& target, const ::Ice::Context& __ctx)
    {
        return begin_addFilterSetEmissionFilterLink(target, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addFilterSetEmissionFilterLink(const ::omero::model::FilterSetEmissionFilterLinkPtr& target, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addFilterSetEmissionFilterLink(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addFilterSetEmissionFilterLink(const ::omero::model::FilterSetEmissionFilterLinkPtr& target, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addFilterSetEmissionFilterLink(target, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addFilterSetEmissionFilterLink(const ::omero::model::FilterSetEmissionFilterLinkPtr& target, const ::omero::model::Callback_Filter_addFilterSetEmissionFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addFilterSetEmissionFilterLink(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addFilterSetEmissionFilterLink(const ::omero::model::FilterSetEmissionFilterLinkPtr& target, const ::Ice::Context& __ctx, const ::omero::model::Callback_Filter_addFilterSetEmissionFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addFilterSetEmissionFilterLink(target, &__ctx, __del, __cookie);
    }

    void end_addFilterSetEmissionFilterLink(const ::Ice::AsyncResultPtr&);
    
private:

    void addFilterSetEmissionFilterLink(const ::omero::model::FilterSetEmissionFilterLinkPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addFilterSetEmissionFilterLink(const ::omero::model::FilterSetEmissionFilterLinkPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addAllFilterSetEmissionFilterLinkSet(const ::omero::model::FilterEmissionFilterLinkSeq& targets)
    {
        addAllFilterSetEmissionFilterLinkSet(targets, 0);
    }
    void addAllFilterSetEmissionFilterLinkSet(const ::omero::model::FilterEmissionFilterLinkSeq& targets, const ::Ice::Context& __ctx)
    {
        addAllFilterSetEmissionFilterLinkSet(targets, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addAllFilterSetEmissionFilterLinkSet(const ::omero::model::FilterEmissionFilterLinkSeq& targets)
    {
        return begin_addAllFilterSetEmissionFilterLinkSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllFilterSetEmissionFilterLinkSet(const ::omero::model::FilterEmissionFilterLinkSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_addAllFilterSetEmissionFilterLinkSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllFilterSetEmissionFilterLinkSet(const ::omero::model::FilterEmissionFilterLinkSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllFilterSetEmissionFilterLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllFilterSetEmissionFilterLinkSet(const ::omero::model::FilterEmissionFilterLinkSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllFilterSetEmissionFilterLinkSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllFilterSetEmissionFilterLinkSet(const ::omero::model::FilterEmissionFilterLinkSeq& targets, const ::omero::model::Callback_Filter_addAllFilterSetEmissionFilterLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllFilterSetEmissionFilterLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllFilterSetEmissionFilterLinkSet(const ::omero::model::FilterEmissionFilterLinkSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Filter_addAllFilterSetEmissionFilterLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllFilterSetEmissionFilterLinkSet(targets, &__ctx, __del, __cookie);
    }

    void end_addAllFilterSetEmissionFilterLinkSet(const ::Ice::AsyncResultPtr&);
    
private:

    void addAllFilterSetEmissionFilterLinkSet(const ::omero::model::FilterEmissionFilterLinkSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addAllFilterSetEmissionFilterLinkSet(const ::omero::model::FilterEmissionFilterLinkSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeFilterSetEmissionFilterLink(const ::omero::model::FilterSetEmissionFilterLinkPtr& theTarget)
    {
        removeFilterSetEmissionFilterLink(theTarget, 0);
    }
    void removeFilterSetEmissionFilterLink(const ::omero::model::FilterSetEmissionFilterLinkPtr& theTarget, const ::Ice::Context& __ctx)
    {
        removeFilterSetEmissionFilterLink(theTarget, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removeFilterSetEmissionFilterLink(const ::omero::model::FilterSetEmissionFilterLinkPtr& theTarget)
    {
        return begin_removeFilterSetEmissionFilterLink(theTarget, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeFilterSetEmissionFilterLink(const ::omero::model::FilterSetEmissionFilterLinkPtr& theTarget, const ::Ice::Context& __ctx)
    {
        return begin_removeFilterSetEmissionFilterLink(theTarget, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeFilterSetEmissionFilterLink(const ::omero::model::FilterSetEmissionFilterLinkPtr& theTarget, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeFilterSetEmissionFilterLink(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeFilterSetEmissionFilterLink(const ::omero::model::FilterSetEmissionFilterLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeFilterSetEmissionFilterLink(theTarget, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeFilterSetEmissionFilterLink(const ::omero::model::FilterSetEmissionFilterLinkPtr& theTarget, const ::omero::model::Callback_Filter_removeFilterSetEmissionFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeFilterSetEmissionFilterLink(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeFilterSetEmissionFilterLink(const ::omero::model::FilterSetEmissionFilterLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::omero::model::Callback_Filter_removeFilterSetEmissionFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeFilterSetEmissionFilterLink(theTarget, &__ctx, __del, __cookie);
    }

    void end_removeFilterSetEmissionFilterLink(const ::Ice::AsyncResultPtr&);
    
private:

    void removeFilterSetEmissionFilterLink(const ::omero::model::FilterSetEmissionFilterLinkPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeFilterSetEmissionFilterLink(const ::omero::model::FilterSetEmissionFilterLinkPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeAllFilterSetEmissionFilterLinkSet(const ::omero::model::FilterEmissionFilterLinkSeq& targets)
    {
        removeAllFilterSetEmissionFilterLinkSet(targets, 0);
    }
    void removeAllFilterSetEmissionFilterLinkSet(const ::omero::model::FilterEmissionFilterLinkSeq& targets, const ::Ice::Context& __ctx)
    {
        removeAllFilterSetEmissionFilterLinkSet(targets, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removeAllFilterSetEmissionFilterLinkSet(const ::omero::model::FilterEmissionFilterLinkSeq& targets)
    {
        return begin_removeAllFilterSetEmissionFilterLinkSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllFilterSetEmissionFilterLinkSet(const ::omero::model::FilterEmissionFilterLinkSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_removeAllFilterSetEmissionFilterLinkSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllFilterSetEmissionFilterLinkSet(const ::omero::model::FilterEmissionFilterLinkSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllFilterSetEmissionFilterLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllFilterSetEmissionFilterLinkSet(const ::omero::model::FilterEmissionFilterLinkSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllFilterSetEmissionFilterLinkSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllFilterSetEmissionFilterLinkSet(const ::omero::model::FilterEmissionFilterLinkSeq& targets, const ::omero::model::Callback_Filter_removeAllFilterSetEmissionFilterLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllFilterSetEmissionFilterLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllFilterSetEmissionFilterLinkSet(const ::omero::model::FilterEmissionFilterLinkSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Filter_removeAllFilterSetEmissionFilterLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllFilterSetEmissionFilterLinkSet(targets, &__ctx, __del, __cookie);
    }

    void end_removeAllFilterSetEmissionFilterLinkSet(const ::Ice::AsyncResultPtr&);
    
private:

    void removeAllFilterSetEmissionFilterLinkSet(const ::omero::model::FilterEmissionFilterLinkSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeAllFilterSetEmissionFilterLinkSet(const ::omero::model::FilterEmissionFilterLinkSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void clearEmissionFilterLink()
    {
        clearEmissionFilterLink(0);
    }
    void clearEmissionFilterLink(const ::Ice::Context& __ctx)
    {
        clearEmissionFilterLink(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_clearEmissionFilterLink()
    {
        return begin_clearEmissionFilterLink(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearEmissionFilterLink(const ::Ice::Context& __ctx)
    {
        return begin_clearEmissionFilterLink(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearEmissionFilterLink(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearEmissionFilterLink(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearEmissionFilterLink(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearEmissionFilterLink(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearEmissionFilterLink(const ::omero::model::Callback_Filter_clearEmissionFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearEmissionFilterLink(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearEmissionFilterLink(const ::Ice::Context& __ctx, const ::omero::model::Callback_Filter_clearEmissionFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearEmissionFilterLink(&__ctx, __del, __cookie);
    }

    void end_clearEmissionFilterLink(const ::Ice::AsyncResultPtr&);
    
private:

    void clearEmissionFilterLink(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_clearEmissionFilterLink(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reloadEmissionFilterLink(const ::omero::model::FilterPtr& toCopy)
    {
        reloadEmissionFilterLink(toCopy, 0);
    }
    void reloadEmissionFilterLink(const ::omero::model::FilterPtr& toCopy, const ::Ice::Context& __ctx)
    {
        reloadEmissionFilterLink(toCopy, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_reloadEmissionFilterLink(const ::omero::model::FilterPtr& toCopy)
    {
        return begin_reloadEmissionFilterLink(toCopy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadEmissionFilterLink(const ::omero::model::FilterPtr& toCopy, const ::Ice::Context& __ctx)
    {
        return begin_reloadEmissionFilterLink(toCopy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadEmissionFilterLink(const ::omero::model::FilterPtr& toCopy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadEmissionFilterLink(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadEmissionFilterLink(const ::omero::model::FilterPtr& toCopy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadEmissionFilterLink(toCopy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadEmissionFilterLink(const ::omero::model::FilterPtr& toCopy, const ::omero::model::Callback_Filter_reloadEmissionFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadEmissionFilterLink(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadEmissionFilterLink(const ::omero::model::FilterPtr& toCopy, const ::Ice::Context& __ctx, const ::omero::model::Callback_Filter_reloadEmissionFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadEmissionFilterLink(toCopy, &__ctx, __del, __cookie);
    }

    void end_reloadEmissionFilterLink(const ::Ice::AsyncResultPtr&);
    
private:

    void reloadEmissionFilterLink(const ::omero::model::FilterPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reloadEmissionFilterLink(const ::omero::model::FilterPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::sys::CountMap getEmissionFilterLinkCountPerOwner()
    {
        return getEmissionFilterLinkCountPerOwner(0);
    }
    ::omero::sys::CountMap getEmissionFilterLinkCountPerOwner(const ::Ice::Context& __ctx)
    {
        return getEmissionFilterLinkCountPerOwner(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getEmissionFilterLinkCountPerOwner()
    {
        return begin_getEmissionFilterLinkCountPerOwner(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getEmissionFilterLinkCountPerOwner(const ::Ice::Context& __ctx)
    {
        return begin_getEmissionFilterLinkCountPerOwner(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getEmissionFilterLinkCountPerOwner(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getEmissionFilterLinkCountPerOwner(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getEmissionFilterLinkCountPerOwner(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getEmissionFilterLinkCountPerOwner(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getEmissionFilterLinkCountPerOwner(const ::omero::model::Callback_Filter_getEmissionFilterLinkCountPerOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getEmissionFilterLinkCountPerOwner(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getEmissionFilterLinkCountPerOwner(const ::Ice::Context& __ctx, const ::omero::model::Callback_Filter_getEmissionFilterLinkCountPerOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getEmissionFilterLinkCountPerOwner(&__ctx, __del, __cookie);
    }

    ::omero::sys::CountMap end_getEmissionFilterLinkCountPerOwner(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::sys::CountMap getEmissionFilterLinkCountPerOwner(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getEmissionFilterLinkCountPerOwner(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::FilterSetEmissionFilterLinkPtr linkEmissionFilter(const ::omero::model::FilterSetPtr& addition)
    {
        return linkEmissionFilter(addition, 0);
    }
    ::omero::model::FilterSetEmissionFilterLinkPtr linkEmissionFilter(const ::omero::model::FilterSetPtr& addition, const ::Ice::Context& __ctx)
    {
        return linkEmissionFilter(addition, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_linkEmissionFilter(const ::omero::model::FilterSetPtr& addition)
    {
        return begin_linkEmissionFilter(addition, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkEmissionFilter(const ::omero::model::FilterSetPtr& addition, const ::Ice::Context& __ctx)
    {
        return begin_linkEmissionFilter(addition, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkEmissionFilter(const ::omero::model::FilterSetPtr& addition, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkEmissionFilter(addition, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkEmissionFilter(const ::omero::model::FilterSetPtr& addition, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkEmissionFilter(addition, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkEmissionFilter(const ::omero::model::FilterSetPtr& addition, const ::omero::model::Callback_Filter_linkEmissionFilterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkEmissionFilter(addition, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkEmissionFilter(const ::omero::model::FilterSetPtr& addition, const ::Ice::Context& __ctx, const ::omero::model::Callback_Filter_linkEmissionFilterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkEmissionFilter(addition, &__ctx, __del, __cookie);
    }

    ::omero::model::FilterSetEmissionFilterLinkPtr end_linkEmissionFilter(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::FilterSetEmissionFilterLinkPtr linkEmissionFilter(const ::omero::model::FilterSetPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_linkEmissionFilter(const ::omero::model::FilterSetPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addFilterSetEmissionFilterLinkToBoth(const ::omero::model::FilterSetEmissionFilterLinkPtr& link, bool bothSides)
    {
        addFilterSetEmissionFilterLinkToBoth(link, bothSides, 0);
    }
    void addFilterSetEmissionFilterLinkToBoth(const ::omero::model::FilterSetEmissionFilterLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        addFilterSetEmissionFilterLinkToBoth(link, bothSides, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addFilterSetEmissionFilterLinkToBoth(const ::omero::model::FilterSetEmissionFilterLinkPtr& link, bool bothSides)
    {
        return begin_addFilterSetEmissionFilterLinkToBoth(link, bothSides, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addFilterSetEmissionFilterLinkToBoth(const ::omero::model::FilterSetEmissionFilterLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        return begin_addFilterSetEmissionFilterLinkToBoth(link, bothSides, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addFilterSetEmissionFilterLinkToBoth(const ::omero::model::FilterSetEmissionFilterLinkPtr& link, bool bothSides, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addFilterSetEmissionFilterLinkToBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addFilterSetEmissionFilterLinkToBoth(const ::omero::model::FilterSetEmissionFilterLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addFilterSetEmissionFilterLinkToBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addFilterSetEmissionFilterLinkToBoth(const ::omero::model::FilterSetEmissionFilterLinkPtr& link, bool bothSides, const ::omero::model::Callback_Filter_addFilterSetEmissionFilterLinkToBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addFilterSetEmissionFilterLinkToBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addFilterSetEmissionFilterLinkToBoth(const ::omero::model::FilterSetEmissionFilterLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::omero::model::Callback_Filter_addFilterSetEmissionFilterLinkToBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addFilterSetEmissionFilterLinkToBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    void end_addFilterSetEmissionFilterLinkToBoth(const ::Ice::AsyncResultPtr&);
    
private:

    void addFilterSetEmissionFilterLinkToBoth(const ::omero::model::FilterSetEmissionFilterLinkPtr&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addFilterSetEmissionFilterLinkToBoth(const ::omero::model::FilterSetEmissionFilterLinkPtr&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::FilterEmissionFilterLinkSeq findFilterSetEmissionFilterLink(const ::omero::model::FilterSetPtr& removal)
    {
        return findFilterSetEmissionFilterLink(removal, 0);
    }
    ::omero::model::FilterEmissionFilterLinkSeq findFilterSetEmissionFilterLink(const ::omero::model::FilterSetPtr& removal, const ::Ice::Context& __ctx)
    {
        return findFilterSetEmissionFilterLink(removal, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_findFilterSetEmissionFilterLink(const ::omero::model::FilterSetPtr& removal)
    {
        return begin_findFilterSetEmissionFilterLink(removal, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findFilterSetEmissionFilterLink(const ::omero::model::FilterSetPtr& removal, const ::Ice::Context& __ctx)
    {
        return begin_findFilterSetEmissionFilterLink(removal, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findFilterSetEmissionFilterLink(const ::omero::model::FilterSetPtr& removal, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findFilterSetEmissionFilterLink(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findFilterSetEmissionFilterLink(const ::omero::model::FilterSetPtr& removal, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findFilterSetEmissionFilterLink(removal, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findFilterSetEmissionFilterLink(const ::omero::model::FilterSetPtr& removal, const ::omero::model::Callback_Filter_findFilterSetEmissionFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findFilterSetEmissionFilterLink(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findFilterSetEmissionFilterLink(const ::omero::model::FilterSetPtr& removal, const ::Ice::Context& __ctx, const ::omero::model::Callback_Filter_findFilterSetEmissionFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findFilterSetEmissionFilterLink(removal, &__ctx, __del, __cookie);
    }

    ::omero::model::FilterEmissionFilterLinkSeq end_findFilterSetEmissionFilterLink(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::FilterEmissionFilterLinkSeq findFilterSetEmissionFilterLink(const ::omero::model::FilterSetPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_findFilterSetEmissionFilterLink(const ::omero::model::FilterSetPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unlinkEmissionFilter(const ::omero::model::FilterSetPtr& removal)
    {
        unlinkEmissionFilter(removal, 0);
    }
    void unlinkEmissionFilter(const ::omero::model::FilterSetPtr& removal, const ::Ice::Context& __ctx)
    {
        unlinkEmissionFilter(removal, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_unlinkEmissionFilter(const ::omero::model::FilterSetPtr& removal)
    {
        return begin_unlinkEmissionFilter(removal, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unlinkEmissionFilter(const ::omero::model::FilterSetPtr& removal, const ::Ice::Context& __ctx)
    {
        return begin_unlinkEmissionFilter(removal, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unlinkEmissionFilter(const ::omero::model::FilterSetPtr& removal, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkEmissionFilter(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkEmissionFilter(const ::omero::model::FilterSetPtr& removal, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkEmissionFilter(removal, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkEmissionFilter(const ::omero::model::FilterSetPtr& removal, const ::omero::model::Callback_Filter_unlinkEmissionFilterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkEmissionFilter(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkEmissionFilter(const ::omero::model::FilterSetPtr& removal, const ::Ice::Context& __ctx, const ::omero::model::Callback_Filter_unlinkEmissionFilterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkEmissionFilter(removal, &__ctx, __del, __cookie);
    }

    void end_unlinkEmissionFilter(const ::Ice::AsyncResultPtr&);
    
private:

    void unlinkEmissionFilter(const ::omero::model::FilterSetPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unlinkEmissionFilter(const ::omero::model::FilterSetPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeFilterSetEmissionFilterLinkFromBoth(const ::omero::model::FilterSetEmissionFilterLinkPtr& link, bool bothSides)
    {
        removeFilterSetEmissionFilterLinkFromBoth(link, bothSides, 0);
    }
    void removeFilterSetEmissionFilterLinkFromBoth(const ::omero::model::FilterSetEmissionFilterLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        removeFilterSetEmissionFilterLinkFromBoth(link, bothSides, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removeFilterSetEmissionFilterLinkFromBoth(const ::omero::model::FilterSetEmissionFilterLinkPtr& link, bool bothSides)
    {
        return begin_removeFilterSetEmissionFilterLinkFromBoth(link, bothSides, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeFilterSetEmissionFilterLinkFromBoth(const ::omero::model::FilterSetEmissionFilterLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        return begin_removeFilterSetEmissionFilterLinkFromBoth(link, bothSides, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeFilterSetEmissionFilterLinkFromBoth(const ::omero::model::FilterSetEmissionFilterLinkPtr& link, bool bothSides, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeFilterSetEmissionFilterLinkFromBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeFilterSetEmissionFilterLinkFromBoth(const ::omero::model::FilterSetEmissionFilterLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeFilterSetEmissionFilterLinkFromBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeFilterSetEmissionFilterLinkFromBoth(const ::omero::model::FilterSetEmissionFilterLinkPtr& link, bool bothSides, const ::omero::model::Callback_Filter_removeFilterSetEmissionFilterLinkFromBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeFilterSetEmissionFilterLinkFromBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeFilterSetEmissionFilterLinkFromBoth(const ::omero::model::FilterSetEmissionFilterLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::omero::model::Callback_Filter_removeFilterSetEmissionFilterLinkFromBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeFilterSetEmissionFilterLinkFromBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    void end_removeFilterSetEmissionFilterLinkFromBoth(const ::Ice::AsyncResultPtr&);
    
private:

    void removeFilterSetEmissionFilterLinkFromBoth(const ::omero::model::FilterSetEmissionFilterLinkPtr&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeFilterSetEmissionFilterLinkFromBoth(const ::omero::model::FilterSetEmissionFilterLinkPtr&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::FilterLinkedEmissionFilterSeq linkedEmissionFilterList()
    {
        return linkedEmissionFilterList(0);
    }
    ::omero::model::FilterLinkedEmissionFilterSeq linkedEmissionFilterList(const ::Ice::Context& __ctx)
    {
        return linkedEmissionFilterList(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_linkedEmissionFilterList()
    {
        return begin_linkedEmissionFilterList(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkedEmissionFilterList(const ::Ice::Context& __ctx)
    {
        return begin_linkedEmissionFilterList(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkedEmissionFilterList(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedEmissionFilterList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedEmissionFilterList(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedEmissionFilterList(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedEmissionFilterList(const ::omero::model::Callback_Filter_linkedEmissionFilterListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedEmissionFilterList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedEmissionFilterList(const ::Ice::Context& __ctx, const ::omero::model::Callback_Filter_linkedEmissionFilterListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedEmissionFilterList(&__ctx, __del, __cookie);
    }

    ::omero::model::FilterLinkedEmissionFilterSeq end_linkedEmissionFilterList(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::FilterLinkedEmissionFilterSeq linkedEmissionFilterList(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_linkedEmissionFilterList(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Filter> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Filter*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<Filter*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Filter> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Filter*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<Filter*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Filter> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Filter*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<Filter*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Filter> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Filter*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<Filter*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Filter> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Filter*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<Filter*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Filter> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Filter*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<Filter*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Filter> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Filter*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<Filter*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Filter> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Filter*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<Filter*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Filter> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Filter*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<Filter*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Filter> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Filter*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<Filter*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Filter> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Filter*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<Filter*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Filter> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Filter*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<Filter*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Filter> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Filter*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<Filter*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Filter> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Filter*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<Filter*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Filter> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Filter*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<Filter*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Filter> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Filter*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<Filter*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Filter> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Filter*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<Filter*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Filter> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Filter*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<Filter*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Filter> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Filter*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<Filter*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

namespace IceDelegate
{

namespace omero
{

namespace model
{

class Filter : virtual public ::IceDelegate::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*) = 0;

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::RStringPtr getManufacturer(const ::Ice::Context*) = 0;

    virtual void setManufacturer(const ::omero::RStringPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::RStringPtr getModel(const ::Ice::Context*) = 0;

    virtual void setModel(const ::omero::RStringPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::RStringPtr getLotNumber(const ::Ice::Context*) = 0;

    virtual void setLotNumber(const ::omero::RStringPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::RStringPtr getSerialNumber(const ::Ice::Context*) = 0;

    virtual void setSerialNumber(const ::omero::RStringPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::RStringPtr getFilterWheel(const ::Ice::Context*) = 0;

    virtual void setFilterWheel(const ::omero::RStringPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::model::FilterTypePtr getType(const ::Ice::Context*) = 0;

    virtual void setType(const ::omero::model::FilterTypePtr&, const ::Ice::Context*) = 0;

    virtual ::omero::model::TransmittanceRangePtr getTransmittanceRange(const ::Ice::Context*) = 0;

    virtual void setTransmittanceRange(const ::omero::model::TransmittanceRangePtr&, const ::Ice::Context*) = 0;

    virtual ::omero::model::InstrumentPtr getInstrument(const ::Ice::Context*) = 0;

    virtual void setInstrument(const ::omero::model::InstrumentPtr&, const ::Ice::Context*) = 0;

    virtual void unloadExcitationFilterLink(const ::Ice::Context*) = 0;

    virtual ::Ice::Int sizeOfExcitationFilterLink(const ::Ice::Context*) = 0;

    virtual ::omero::model::FilterExcitationFilterLinkSeq copyExcitationFilterLink(const ::Ice::Context*) = 0;

    virtual void addFilterSetExcitationFilterLink(const ::omero::model::FilterSetExcitationFilterLinkPtr&, const ::Ice::Context*) = 0;

    virtual void addAllFilterSetExcitationFilterLinkSet(const ::omero::model::FilterExcitationFilterLinkSeq&, const ::Ice::Context*) = 0;

    virtual void removeFilterSetExcitationFilterLink(const ::omero::model::FilterSetExcitationFilterLinkPtr&, const ::Ice::Context*) = 0;

    virtual void removeAllFilterSetExcitationFilterLinkSet(const ::omero::model::FilterExcitationFilterLinkSeq&, const ::Ice::Context*) = 0;

    virtual void clearExcitationFilterLink(const ::Ice::Context*) = 0;

    virtual void reloadExcitationFilterLink(const ::omero::model::FilterPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::sys::CountMap getExcitationFilterLinkCountPerOwner(const ::Ice::Context*) = 0;

    virtual ::omero::model::FilterSetExcitationFilterLinkPtr linkExcitationFilter(const ::omero::model::FilterSetPtr&, const ::Ice::Context*) = 0;

    virtual void addFilterSetExcitationFilterLinkToBoth(const ::omero::model::FilterSetExcitationFilterLinkPtr&, bool, const ::Ice::Context*) = 0;

    virtual ::omero::model::FilterExcitationFilterLinkSeq findFilterSetExcitationFilterLink(const ::omero::model::FilterSetPtr&, const ::Ice::Context*) = 0;

    virtual void unlinkExcitationFilter(const ::omero::model::FilterSetPtr&, const ::Ice::Context*) = 0;

    virtual void removeFilterSetExcitationFilterLinkFromBoth(const ::omero::model::FilterSetExcitationFilterLinkPtr&, bool, const ::Ice::Context*) = 0;

    virtual ::omero::model::FilterLinkedExcitationFilterSeq linkedExcitationFilterList(const ::Ice::Context*) = 0;

    virtual void unloadEmissionFilterLink(const ::Ice::Context*) = 0;

    virtual ::Ice::Int sizeOfEmissionFilterLink(const ::Ice::Context*) = 0;

    virtual ::omero::model::FilterEmissionFilterLinkSeq copyEmissionFilterLink(const ::Ice::Context*) = 0;

    virtual void addFilterSetEmissionFilterLink(const ::omero::model::FilterSetEmissionFilterLinkPtr&, const ::Ice::Context*) = 0;

    virtual void addAllFilterSetEmissionFilterLinkSet(const ::omero::model::FilterEmissionFilterLinkSeq&, const ::Ice::Context*) = 0;

    virtual void removeFilterSetEmissionFilterLink(const ::omero::model::FilterSetEmissionFilterLinkPtr&, const ::Ice::Context*) = 0;

    virtual void removeAllFilterSetEmissionFilterLinkSet(const ::omero::model::FilterEmissionFilterLinkSeq&, const ::Ice::Context*) = 0;

    virtual void clearEmissionFilterLink(const ::Ice::Context*) = 0;

    virtual void reloadEmissionFilterLink(const ::omero::model::FilterPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::sys::CountMap getEmissionFilterLinkCountPerOwner(const ::Ice::Context*) = 0;

    virtual ::omero::model::FilterSetEmissionFilterLinkPtr linkEmissionFilter(const ::omero::model::FilterSetPtr&, const ::Ice::Context*) = 0;

    virtual void addFilterSetEmissionFilterLinkToBoth(const ::omero::model::FilterSetEmissionFilterLinkPtr&, bool, const ::Ice::Context*) = 0;

    virtual ::omero::model::FilterEmissionFilterLinkSeq findFilterSetEmissionFilterLink(const ::omero::model::FilterSetPtr&, const ::Ice::Context*) = 0;

    virtual void unlinkEmissionFilter(const ::omero::model::FilterSetPtr&, const ::Ice::Context*) = 0;

    virtual void removeFilterSetEmissionFilterLinkFromBoth(const ::omero::model::FilterSetEmissionFilterLinkPtr&, bool, const ::Ice::Context*) = 0;

    virtual ::omero::model::FilterLinkedEmissionFilterSeq linkedEmissionFilterList(const ::Ice::Context*) = 0;
};

}

}

}

namespace IceDelegateM
{

namespace omero
{

namespace model
{

class Filter : virtual public ::IceDelegate::omero::model::Filter,
               virtual public ::IceDelegateM::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::RStringPtr getManufacturer(const ::Ice::Context*);

    virtual void setManufacturer(const ::omero::RStringPtr&, const ::Ice::Context*);

    virtual ::omero::RStringPtr getModel(const ::Ice::Context*);

    virtual void setModel(const ::omero::RStringPtr&, const ::Ice::Context*);

    virtual ::omero::RStringPtr getLotNumber(const ::Ice::Context*);

    virtual void setLotNumber(const ::omero::RStringPtr&, const ::Ice::Context*);

    virtual ::omero::RStringPtr getSerialNumber(const ::Ice::Context*);

    virtual void setSerialNumber(const ::omero::RStringPtr&, const ::Ice::Context*);

    virtual ::omero::RStringPtr getFilterWheel(const ::Ice::Context*);

    virtual void setFilterWheel(const ::omero::RStringPtr&, const ::Ice::Context*);

    virtual ::omero::model::FilterTypePtr getType(const ::Ice::Context*);

    virtual void setType(const ::omero::model::FilterTypePtr&, const ::Ice::Context*);

    virtual ::omero::model::TransmittanceRangePtr getTransmittanceRange(const ::Ice::Context*);

    virtual void setTransmittanceRange(const ::omero::model::TransmittanceRangePtr&, const ::Ice::Context*);

    virtual ::omero::model::InstrumentPtr getInstrument(const ::Ice::Context*);

    virtual void setInstrument(const ::omero::model::InstrumentPtr&, const ::Ice::Context*);

    virtual void unloadExcitationFilterLink(const ::Ice::Context*);

    virtual ::Ice::Int sizeOfExcitationFilterLink(const ::Ice::Context*);

    virtual ::omero::model::FilterExcitationFilterLinkSeq copyExcitationFilterLink(const ::Ice::Context*);

    virtual void addFilterSetExcitationFilterLink(const ::omero::model::FilterSetExcitationFilterLinkPtr&, const ::Ice::Context*);

    virtual void addAllFilterSetExcitationFilterLinkSet(const ::omero::model::FilterExcitationFilterLinkSeq&, const ::Ice::Context*);

    virtual void removeFilterSetExcitationFilterLink(const ::omero::model::FilterSetExcitationFilterLinkPtr&, const ::Ice::Context*);

    virtual void removeAllFilterSetExcitationFilterLinkSet(const ::omero::model::FilterExcitationFilterLinkSeq&, const ::Ice::Context*);

    virtual void clearExcitationFilterLink(const ::Ice::Context*);

    virtual void reloadExcitationFilterLink(const ::omero::model::FilterPtr&, const ::Ice::Context*);

    virtual ::omero::sys::CountMap getExcitationFilterLinkCountPerOwner(const ::Ice::Context*);

    virtual ::omero::model::FilterSetExcitationFilterLinkPtr linkExcitationFilter(const ::omero::model::FilterSetPtr&, const ::Ice::Context*);

    virtual void addFilterSetExcitationFilterLinkToBoth(const ::omero::model::FilterSetExcitationFilterLinkPtr&, bool, const ::Ice::Context*);

    virtual ::omero::model::FilterExcitationFilterLinkSeq findFilterSetExcitationFilterLink(const ::omero::model::FilterSetPtr&, const ::Ice::Context*);

    virtual void unlinkExcitationFilter(const ::omero::model::FilterSetPtr&, const ::Ice::Context*);

    virtual void removeFilterSetExcitationFilterLinkFromBoth(const ::omero::model::FilterSetExcitationFilterLinkPtr&, bool, const ::Ice::Context*);

    virtual ::omero::model::FilterLinkedExcitationFilterSeq linkedExcitationFilterList(const ::Ice::Context*);

    virtual void unloadEmissionFilterLink(const ::Ice::Context*);

    virtual ::Ice::Int sizeOfEmissionFilterLink(const ::Ice::Context*);

    virtual ::omero::model::FilterEmissionFilterLinkSeq copyEmissionFilterLink(const ::Ice::Context*);

    virtual void addFilterSetEmissionFilterLink(const ::omero::model::FilterSetEmissionFilterLinkPtr&, const ::Ice::Context*);

    virtual void addAllFilterSetEmissionFilterLinkSet(const ::omero::model::FilterEmissionFilterLinkSeq&, const ::Ice::Context*);

    virtual void removeFilterSetEmissionFilterLink(const ::omero::model::FilterSetEmissionFilterLinkPtr&, const ::Ice::Context*);

    virtual void removeAllFilterSetEmissionFilterLinkSet(const ::omero::model::FilterEmissionFilterLinkSeq&, const ::Ice::Context*);

    virtual void clearEmissionFilterLink(const ::Ice::Context*);

    virtual void reloadEmissionFilterLink(const ::omero::model::FilterPtr&, const ::Ice::Context*);

    virtual ::omero::sys::CountMap getEmissionFilterLinkCountPerOwner(const ::Ice::Context*);

    virtual ::omero::model::FilterSetEmissionFilterLinkPtr linkEmissionFilter(const ::omero::model::FilterSetPtr&, const ::Ice::Context*);

    virtual void addFilterSetEmissionFilterLinkToBoth(const ::omero::model::FilterSetEmissionFilterLinkPtr&, bool, const ::Ice::Context*);

    virtual ::omero::model::FilterEmissionFilterLinkSeq findFilterSetEmissionFilterLink(const ::omero::model::FilterSetPtr&, const ::Ice::Context*);

    virtual void unlinkEmissionFilter(const ::omero::model::FilterSetPtr&, const ::Ice::Context*);

    virtual void removeFilterSetEmissionFilterLinkFromBoth(const ::omero::model::FilterSetEmissionFilterLinkPtr&, bool, const ::Ice::Context*);

    virtual ::omero::model::FilterLinkedEmissionFilterSeq linkedEmissionFilterList(const ::Ice::Context*);
};

}

}

}

namespace IceDelegateD
{

namespace omero
{

namespace model
{

class Filter : virtual public ::IceDelegate::omero::model::Filter,
               virtual public ::IceDelegateD::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::RStringPtr getManufacturer(const ::Ice::Context*);

    virtual void setManufacturer(const ::omero::RStringPtr&, const ::Ice::Context*);

    virtual ::omero::RStringPtr getModel(const ::Ice::Context*);

    virtual void setModel(const ::omero::RStringPtr&, const ::Ice::Context*);

    virtual ::omero::RStringPtr getLotNumber(const ::Ice::Context*);

    virtual void setLotNumber(const ::omero::RStringPtr&, const ::Ice::Context*);

    virtual ::omero::RStringPtr getSerialNumber(const ::Ice::Context*);

    virtual void setSerialNumber(const ::omero::RStringPtr&, const ::Ice::Context*);

    virtual ::omero::RStringPtr getFilterWheel(const ::Ice::Context*);

    virtual void setFilterWheel(const ::omero::RStringPtr&, const ::Ice::Context*);

    virtual ::omero::model::FilterTypePtr getType(const ::Ice::Context*);

    virtual void setType(const ::omero::model::FilterTypePtr&, const ::Ice::Context*);

    virtual ::omero::model::TransmittanceRangePtr getTransmittanceRange(const ::Ice::Context*);

    virtual void setTransmittanceRange(const ::omero::model::TransmittanceRangePtr&, const ::Ice::Context*);

    virtual ::omero::model::InstrumentPtr getInstrument(const ::Ice::Context*);

    virtual void setInstrument(const ::omero::model::InstrumentPtr&, const ::Ice::Context*);

    virtual void unloadExcitationFilterLink(const ::Ice::Context*);

    virtual ::Ice::Int sizeOfExcitationFilterLink(const ::Ice::Context*);

    virtual ::omero::model::FilterExcitationFilterLinkSeq copyExcitationFilterLink(const ::Ice::Context*);

    virtual void addFilterSetExcitationFilterLink(const ::omero::model::FilterSetExcitationFilterLinkPtr&, const ::Ice::Context*);

    virtual void addAllFilterSetExcitationFilterLinkSet(const ::omero::model::FilterExcitationFilterLinkSeq&, const ::Ice::Context*);

    virtual void removeFilterSetExcitationFilterLink(const ::omero::model::FilterSetExcitationFilterLinkPtr&, const ::Ice::Context*);

    virtual void removeAllFilterSetExcitationFilterLinkSet(const ::omero::model::FilterExcitationFilterLinkSeq&, const ::Ice::Context*);

    virtual void clearExcitationFilterLink(const ::Ice::Context*);

    virtual void reloadExcitationFilterLink(const ::omero::model::FilterPtr&, const ::Ice::Context*);

    virtual ::omero::sys::CountMap getExcitationFilterLinkCountPerOwner(const ::Ice::Context*);

    virtual ::omero::model::FilterSetExcitationFilterLinkPtr linkExcitationFilter(const ::omero::model::FilterSetPtr&, const ::Ice::Context*);

    virtual void addFilterSetExcitationFilterLinkToBoth(const ::omero::model::FilterSetExcitationFilterLinkPtr&, bool, const ::Ice::Context*);

    virtual ::omero::model::FilterExcitationFilterLinkSeq findFilterSetExcitationFilterLink(const ::omero::model::FilterSetPtr&, const ::Ice::Context*);

    virtual void unlinkExcitationFilter(const ::omero::model::FilterSetPtr&, const ::Ice::Context*);

    virtual void removeFilterSetExcitationFilterLinkFromBoth(const ::omero::model::FilterSetExcitationFilterLinkPtr&, bool, const ::Ice::Context*);

    virtual ::omero::model::FilterLinkedExcitationFilterSeq linkedExcitationFilterList(const ::Ice::Context*);

    virtual void unloadEmissionFilterLink(const ::Ice::Context*);

    virtual ::Ice::Int sizeOfEmissionFilterLink(const ::Ice::Context*);

    virtual ::omero::model::FilterEmissionFilterLinkSeq copyEmissionFilterLink(const ::Ice::Context*);

    virtual void addFilterSetEmissionFilterLink(const ::omero::model::FilterSetEmissionFilterLinkPtr&, const ::Ice::Context*);

    virtual void addAllFilterSetEmissionFilterLinkSet(const ::omero::model::FilterEmissionFilterLinkSeq&, const ::Ice::Context*);

    virtual void removeFilterSetEmissionFilterLink(const ::omero::model::FilterSetEmissionFilterLinkPtr&, const ::Ice::Context*);

    virtual void removeAllFilterSetEmissionFilterLinkSet(const ::omero::model::FilterEmissionFilterLinkSeq&, const ::Ice::Context*);

    virtual void clearEmissionFilterLink(const ::Ice::Context*);

    virtual void reloadEmissionFilterLink(const ::omero::model::FilterPtr&, const ::Ice::Context*);

    virtual ::omero::sys::CountMap getEmissionFilterLinkCountPerOwner(const ::Ice::Context*);

    virtual ::omero::model::FilterSetEmissionFilterLinkPtr linkEmissionFilter(const ::omero::model::FilterSetPtr&, const ::Ice::Context*);

    virtual void addFilterSetEmissionFilterLinkToBoth(const ::omero::model::FilterSetEmissionFilterLinkPtr&, bool, const ::Ice::Context*);

    virtual ::omero::model::FilterEmissionFilterLinkSeq findFilterSetEmissionFilterLink(const ::omero::model::FilterSetPtr&, const ::Ice::Context*);

    virtual void unlinkEmissionFilter(const ::omero::model::FilterSetPtr&, const ::Ice::Context*);

    virtual void removeFilterSetEmissionFilterLinkFromBoth(const ::omero::model::FilterSetEmissionFilterLinkPtr&, bool, const ::Ice::Context*);

    virtual ::omero::model::FilterLinkedEmissionFilterSeq linkedEmissionFilterList(const ::Ice::Context*);
};

}

}

}

namespace omero
{

namespace model
{

class Filter : public ::omero::model::IObject
{
public:

    typedef FilterPrx ProxyType;
    typedef FilterPtr PointerType;
    
    Filter() {}
    Filter(const ::omero::RLongPtr&, const ::omero::model::DetailsPtr&, bool, const ::omero::RIntPtr&, const ::omero::RStringPtr&, const ::omero::RStringPtr&, const ::omero::RStringPtr&, const ::omero::RStringPtr&, const ::omero::RStringPtr&, const ::omero::model::FilterTypePtr&, const ::omero::model::TransmittanceRangePtr&, const ::omero::model::InstrumentPtr&, const ::omero::model::FilterExcitationFilterLinkSeq&, bool, const ::omero::sys::CountMap&, const ::omero::model::FilterEmissionFilterLinkSeq&, bool, const ::omero::sys::CountMap&);
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    virtual ::omero::RIntPtr getVersion(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getManufacturer(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getManufacturer(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setManufacturer(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setManufacturer(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getModel(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getModel(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setModel(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setModel(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getLotNumber(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getLotNumber(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setLotNumber(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setLotNumber(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getSerialNumber(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getSerialNumber(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setSerialNumber(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setSerialNumber(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getFilterWheel(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getFilterWheel(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setFilterWheel(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setFilterWheel(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::FilterTypePtr getType(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getType(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setType(const ::omero::model::FilterTypePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setType(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::TransmittanceRangePtr getTransmittanceRange(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getTransmittanceRange(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setTransmittanceRange(const ::omero::model::TransmittanceRangePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setTransmittanceRange(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::InstrumentPtr getInstrument(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getInstrument(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setInstrument(const ::omero::model::InstrumentPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setInstrument(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unloadExcitationFilterLink(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unloadExcitationFilterLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int sizeOfExcitationFilterLink(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sizeOfExcitationFilterLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::FilterExcitationFilterLinkSeq copyExcitationFilterLink(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___copyExcitationFilterLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addFilterSetExcitationFilterLink(const ::omero::model::FilterSetExcitationFilterLinkPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addFilterSetExcitationFilterLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addAllFilterSetExcitationFilterLinkSet(const ::omero::model::FilterExcitationFilterLinkSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addAllFilterSetExcitationFilterLinkSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeFilterSetExcitationFilterLink(const ::omero::model::FilterSetExcitationFilterLinkPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeFilterSetExcitationFilterLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeAllFilterSetExcitationFilterLinkSet(const ::omero::model::FilterExcitationFilterLinkSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeAllFilterSetExcitationFilterLinkSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void clearExcitationFilterLink(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___clearExcitationFilterLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reloadExcitationFilterLink(const ::omero::model::FilterPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reloadExcitationFilterLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::sys::CountMap getExcitationFilterLinkCountPerOwner(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getExcitationFilterLinkCountPerOwner(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::FilterSetExcitationFilterLinkPtr linkExcitationFilter(const ::omero::model::FilterSetPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___linkExcitationFilter(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addFilterSetExcitationFilterLinkToBoth(const ::omero::model::FilterSetExcitationFilterLinkPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addFilterSetExcitationFilterLinkToBoth(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::FilterExcitationFilterLinkSeq findFilterSetExcitationFilterLink(const ::omero::model::FilterSetPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___findFilterSetExcitationFilterLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unlinkExcitationFilter(const ::omero::model::FilterSetPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unlinkExcitationFilter(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeFilterSetExcitationFilterLinkFromBoth(const ::omero::model::FilterSetExcitationFilterLinkPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeFilterSetExcitationFilterLinkFromBoth(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::FilterLinkedExcitationFilterSeq linkedExcitationFilterList(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___linkedExcitationFilterList(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unloadEmissionFilterLink(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unloadEmissionFilterLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int sizeOfEmissionFilterLink(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sizeOfEmissionFilterLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::FilterEmissionFilterLinkSeq copyEmissionFilterLink(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___copyEmissionFilterLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addFilterSetEmissionFilterLink(const ::omero::model::FilterSetEmissionFilterLinkPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addFilterSetEmissionFilterLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addAllFilterSetEmissionFilterLinkSet(const ::omero::model::FilterEmissionFilterLinkSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addAllFilterSetEmissionFilterLinkSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeFilterSetEmissionFilterLink(const ::omero::model::FilterSetEmissionFilterLinkPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeFilterSetEmissionFilterLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeAllFilterSetEmissionFilterLinkSet(const ::omero::model::FilterEmissionFilterLinkSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeAllFilterSetEmissionFilterLinkSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void clearEmissionFilterLink(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___clearEmissionFilterLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reloadEmissionFilterLink(const ::omero::model::FilterPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reloadEmissionFilterLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::sys::CountMap getEmissionFilterLinkCountPerOwner(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getEmissionFilterLinkCountPerOwner(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::FilterSetEmissionFilterLinkPtr linkEmissionFilter(const ::omero::model::FilterSetPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___linkEmissionFilter(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addFilterSetEmissionFilterLinkToBoth(const ::omero::model::FilterSetEmissionFilterLinkPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addFilterSetEmissionFilterLinkToBoth(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::FilterEmissionFilterLinkSeq findFilterSetEmissionFilterLink(const ::omero::model::FilterSetPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___findFilterSetEmissionFilterLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unlinkEmissionFilter(const ::omero::model::FilterSetPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unlinkEmissionFilter(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeFilterSetEmissionFilterLinkFromBoth(const ::omero::model::FilterSetEmissionFilterLinkPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeFilterSetEmissionFilterLinkFromBoth(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::FilterLinkedEmissionFilterSeq linkedEmissionFilterList(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___linkedEmissionFilterList(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif

protected:

    ::omero::RIntPtr version;

    ::omero::RStringPtr manufacturer;

    ::omero::RStringPtr model;

    ::omero::RStringPtr lotNumber;

    ::omero::RStringPtr serialNumber;

    ::omero::RStringPtr filterWheel;

    ::omero::model::FilterTypePtr type;

    ::omero::model::TransmittanceRangePtr transmittanceRange;

    ::omero::model::InstrumentPtr instrument;

    ::omero::model::FilterExcitationFilterLinkSeq excitationFilterLinkSeq;

    bool excitationFilterLinkLoaded;

    ::omero::sys::CountMap excitationFilterLinkCountPerOwner;

    ::omero::model::FilterEmissionFilterLinkSeq emissionFilterLinkSeq;

    bool emissionFilterLinkLoaded;

    ::omero::sys::CountMap emissionFilterLinkCountPerOwner;
};

inline bool operator==(const Filter& l, const Filter& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Filter& l, const Filter& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

}

namespace omero
{

namespace model
{

template<class T>
class CallbackNC_Filter_getVersion : public Callback_Filter_getVersion_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RIntPtr&);

    CallbackNC_Filter_getVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterPrx __proxy = ::omero::model::FilterPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Filter_getVersionPtr
newCallback_Filter_getVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_getVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_getVersionPtr
newCallback_Filter_getVersion(T* instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_getVersion<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Filter_getVersion : public Callback_Filter_getVersion_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RIntPtr&, const CT&);

    Callback_Filter_getVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterPrx __proxy = ::omero::model::FilterPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Filter_getVersionPtr
newCallback_Filter_getVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_getVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_getVersionPtr
newCallback_Filter_getVersion(T* instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_getVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Filter_setVersion : public Callback_Filter_setVersion_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Filter_setVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Filter_setVersionPtr
newCallback_Filter_setVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_setVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_setVersionPtr
newCallback_Filter_setVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_setVersion<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Filter_setVersionPtr
newCallback_Filter_setVersion(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_setVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_setVersionPtr
newCallback_Filter_setVersion(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_setVersion<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Filter_setVersion : public Callback_Filter_setVersion_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Filter_setVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Filter_setVersionPtr
newCallback_Filter_setVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_setVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_setVersionPtr
newCallback_Filter_setVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_setVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_setVersionPtr
newCallback_Filter_setVersion(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_setVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_setVersionPtr
newCallback_Filter_setVersion(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_setVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Filter_getManufacturer : public Callback_Filter_getManufacturer_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_Filter_getManufacturer(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterPrx __proxy = ::omero::model::FilterPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getManufacturer(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Filter_getManufacturerPtr
newCallback_Filter_getManufacturer(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_getManufacturer<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_getManufacturerPtr
newCallback_Filter_getManufacturer(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_getManufacturer<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Filter_getManufacturer : public Callback_Filter_getManufacturer_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_Filter_getManufacturer(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterPrx __proxy = ::omero::model::FilterPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getManufacturer(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Filter_getManufacturerPtr
newCallback_Filter_getManufacturer(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_getManufacturer<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_getManufacturerPtr
newCallback_Filter_getManufacturer(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_getManufacturer<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Filter_setManufacturer : public Callback_Filter_setManufacturer_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Filter_setManufacturer(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Filter_setManufacturerPtr
newCallback_Filter_setManufacturer(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_setManufacturer<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_setManufacturerPtr
newCallback_Filter_setManufacturer(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_setManufacturer<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Filter_setManufacturerPtr
newCallback_Filter_setManufacturer(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_setManufacturer<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_setManufacturerPtr
newCallback_Filter_setManufacturer(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_setManufacturer<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Filter_setManufacturer : public Callback_Filter_setManufacturer_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Filter_setManufacturer(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Filter_setManufacturerPtr
newCallback_Filter_setManufacturer(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_setManufacturer<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_setManufacturerPtr
newCallback_Filter_setManufacturer(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_setManufacturer<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_setManufacturerPtr
newCallback_Filter_setManufacturer(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_setManufacturer<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_setManufacturerPtr
newCallback_Filter_setManufacturer(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_setManufacturer<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Filter_getModel : public Callback_Filter_getModel_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_Filter_getModel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterPrx __proxy = ::omero::model::FilterPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getModel(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Filter_getModelPtr
newCallback_Filter_getModel(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_getModel<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_getModelPtr
newCallback_Filter_getModel(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_getModel<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Filter_getModel : public Callback_Filter_getModel_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_Filter_getModel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterPrx __proxy = ::omero::model::FilterPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getModel(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Filter_getModelPtr
newCallback_Filter_getModel(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_getModel<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_getModelPtr
newCallback_Filter_getModel(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_getModel<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Filter_setModel : public Callback_Filter_setModel_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Filter_setModel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Filter_setModelPtr
newCallback_Filter_setModel(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_setModel<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_setModelPtr
newCallback_Filter_setModel(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_setModel<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Filter_setModelPtr
newCallback_Filter_setModel(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_setModel<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_setModelPtr
newCallback_Filter_setModel(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_setModel<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Filter_setModel : public Callback_Filter_setModel_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Filter_setModel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Filter_setModelPtr
newCallback_Filter_setModel(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_setModel<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_setModelPtr
newCallback_Filter_setModel(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_setModel<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_setModelPtr
newCallback_Filter_setModel(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_setModel<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_setModelPtr
newCallback_Filter_setModel(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_setModel<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Filter_getLotNumber : public Callback_Filter_getLotNumber_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_Filter_getLotNumber(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterPrx __proxy = ::omero::model::FilterPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getLotNumber(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Filter_getLotNumberPtr
newCallback_Filter_getLotNumber(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_getLotNumber<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_getLotNumberPtr
newCallback_Filter_getLotNumber(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_getLotNumber<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Filter_getLotNumber : public Callback_Filter_getLotNumber_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_Filter_getLotNumber(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterPrx __proxy = ::omero::model::FilterPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getLotNumber(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Filter_getLotNumberPtr
newCallback_Filter_getLotNumber(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_getLotNumber<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_getLotNumberPtr
newCallback_Filter_getLotNumber(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_getLotNumber<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Filter_setLotNumber : public Callback_Filter_setLotNumber_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Filter_setLotNumber(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Filter_setLotNumberPtr
newCallback_Filter_setLotNumber(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_setLotNumber<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_setLotNumberPtr
newCallback_Filter_setLotNumber(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_setLotNumber<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Filter_setLotNumberPtr
newCallback_Filter_setLotNumber(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_setLotNumber<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_setLotNumberPtr
newCallback_Filter_setLotNumber(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_setLotNumber<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Filter_setLotNumber : public Callback_Filter_setLotNumber_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Filter_setLotNumber(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Filter_setLotNumberPtr
newCallback_Filter_setLotNumber(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_setLotNumber<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_setLotNumberPtr
newCallback_Filter_setLotNumber(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_setLotNumber<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_setLotNumberPtr
newCallback_Filter_setLotNumber(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_setLotNumber<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_setLotNumberPtr
newCallback_Filter_setLotNumber(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_setLotNumber<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Filter_getSerialNumber : public Callback_Filter_getSerialNumber_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_Filter_getSerialNumber(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterPrx __proxy = ::omero::model::FilterPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getSerialNumber(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Filter_getSerialNumberPtr
newCallback_Filter_getSerialNumber(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_getSerialNumber<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_getSerialNumberPtr
newCallback_Filter_getSerialNumber(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_getSerialNumber<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Filter_getSerialNumber : public Callback_Filter_getSerialNumber_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_Filter_getSerialNumber(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterPrx __proxy = ::omero::model::FilterPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getSerialNumber(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Filter_getSerialNumberPtr
newCallback_Filter_getSerialNumber(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_getSerialNumber<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_getSerialNumberPtr
newCallback_Filter_getSerialNumber(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_getSerialNumber<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Filter_setSerialNumber : public Callback_Filter_setSerialNumber_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Filter_setSerialNumber(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Filter_setSerialNumberPtr
newCallback_Filter_setSerialNumber(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_setSerialNumber<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_setSerialNumberPtr
newCallback_Filter_setSerialNumber(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_setSerialNumber<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Filter_setSerialNumberPtr
newCallback_Filter_setSerialNumber(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_setSerialNumber<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_setSerialNumberPtr
newCallback_Filter_setSerialNumber(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_setSerialNumber<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Filter_setSerialNumber : public Callback_Filter_setSerialNumber_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Filter_setSerialNumber(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Filter_setSerialNumberPtr
newCallback_Filter_setSerialNumber(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_setSerialNumber<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_setSerialNumberPtr
newCallback_Filter_setSerialNumber(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_setSerialNumber<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_setSerialNumberPtr
newCallback_Filter_setSerialNumber(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_setSerialNumber<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_setSerialNumberPtr
newCallback_Filter_setSerialNumber(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_setSerialNumber<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Filter_getFilterWheel : public Callback_Filter_getFilterWheel_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_Filter_getFilterWheel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterPrx __proxy = ::omero::model::FilterPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getFilterWheel(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Filter_getFilterWheelPtr
newCallback_Filter_getFilterWheel(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_getFilterWheel<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_getFilterWheelPtr
newCallback_Filter_getFilterWheel(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_getFilterWheel<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Filter_getFilterWheel : public Callback_Filter_getFilterWheel_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_Filter_getFilterWheel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterPrx __proxy = ::omero::model::FilterPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getFilterWheel(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Filter_getFilterWheelPtr
newCallback_Filter_getFilterWheel(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_getFilterWheel<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_getFilterWheelPtr
newCallback_Filter_getFilterWheel(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_getFilterWheel<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Filter_setFilterWheel : public Callback_Filter_setFilterWheel_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Filter_setFilterWheel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Filter_setFilterWheelPtr
newCallback_Filter_setFilterWheel(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_setFilterWheel<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_setFilterWheelPtr
newCallback_Filter_setFilterWheel(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_setFilterWheel<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Filter_setFilterWheelPtr
newCallback_Filter_setFilterWheel(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_setFilterWheel<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_setFilterWheelPtr
newCallback_Filter_setFilterWheel(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_setFilterWheel<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Filter_setFilterWheel : public Callback_Filter_setFilterWheel_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Filter_setFilterWheel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Filter_setFilterWheelPtr
newCallback_Filter_setFilterWheel(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_setFilterWheel<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_setFilterWheelPtr
newCallback_Filter_setFilterWheel(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_setFilterWheel<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_setFilterWheelPtr
newCallback_Filter_setFilterWheel(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_setFilterWheel<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_setFilterWheelPtr
newCallback_Filter_setFilterWheel(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_setFilterWheel<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Filter_getType : public Callback_Filter_getType_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::FilterTypePtr&);

    CallbackNC_Filter_getType(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterPrx __proxy = ::omero::model::FilterPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilterTypePtr __ret;
        try
        {
            __ret = __proxy->end_getType(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Filter_getTypePtr
newCallback_Filter_getType(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilterTypePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_getType<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_getTypePtr
newCallback_Filter_getType(T* instance, void (T::*cb)(const ::omero::model::FilterTypePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_getType<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Filter_getType : public Callback_Filter_getType_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::FilterTypePtr&, const CT&);

    Callback_Filter_getType(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterPrx __proxy = ::omero::model::FilterPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilterTypePtr __ret;
        try
        {
            __ret = __proxy->end_getType(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Filter_getTypePtr
newCallback_Filter_getType(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilterTypePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_getType<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_getTypePtr
newCallback_Filter_getType(T* instance, void (T::*cb)(const ::omero::model::FilterTypePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_getType<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Filter_setType : public Callback_Filter_setType_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Filter_setType(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Filter_setTypePtr
newCallback_Filter_setType(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_setType<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_setTypePtr
newCallback_Filter_setType(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_setType<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Filter_setTypePtr
newCallback_Filter_setType(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_setType<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_setTypePtr
newCallback_Filter_setType(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_setType<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Filter_setType : public Callback_Filter_setType_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Filter_setType(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Filter_setTypePtr
newCallback_Filter_setType(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_setType<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_setTypePtr
newCallback_Filter_setType(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_setType<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_setTypePtr
newCallback_Filter_setType(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_setType<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_setTypePtr
newCallback_Filter_setType(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_setType<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Filter_getTransmittanceRange : public Callback_Filter_getTransmittanceRange_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::TransmittanceRangePtr&);

    CallbackNC_Filter_getTransmittanceRange(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterPrx __proxy = ::omero::model::FilterPrx::uncheckedCast(__result->getProxy());
        ::omero::model::TransmittanceRangePtr __ret;
        try
        {
            __ret = __proxy->end_getTransmittanceRange(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Filter_getTransmittanceRangePtr
newCallback_Filter_getTransmittanceRange(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::TransmittanceRangePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_getTransmittanceRange<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_getTransmittanceRangePtr
newCallback_Filter_getTransmittanceRange(T* instance, void (T::*cb)(const ::omero::model::TransmittanceRangePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_getTransmittanceRange<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Filter_getTransmittanceRange : public Callback_Filter_getTransmittanceRange_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::TransmittanceRangePtr&, const CT&);

    Callback_Filter_getTransmittanceRange(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterPrx __proxy = ::omero::model::FilterPrx::uncheckedCast(__result->getProxy());
        ::omero::model::TransmittanceRangePtr __ret;
        try
        {
            __ret = __proxy->end_getTransmittanceRange(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Filter_getTransmittanceRangePtr
newCallback_Filter_getTransmittanceRange(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::TransmittanceRangePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_getTransmittanceRange<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_getTransmittanceRangePtr
newCallback_Filter_getTransmittanceRange(T* instance, void (T::*cb)(const ::omero::model::TransmittanceRangePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_getTransmittanceRange<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Filter_setTransmittanceRange : public Callback_Filter_setTransmittanceRange_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Filter_setTransmittanceRange(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Filter_setTransmittanceRangePtr
newCallback_Filter_setTransmittanceRange(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_setTransmittanceRange<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_setTransmittanceRangePtr
newCallback_Filter_setTransmittanceRange(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_setTransmittanceRange<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Filter_setTransmittanceRangePtr
newCallback_Filter_setTransmittanceRange(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_setTransmittanceRange<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_setTransmittanceRangePtr
newCallback_Filter_setTransmittanceRange(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_setTransmittanceRange<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Filter_setTransmittanceRange : public Callback_Filter_setTransmittanceRange_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Filter_setTransmittanceRange(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Filter_setTransmittanceRangePtr
newCallback_Filter_setTransmittanceRange(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_setTransmittanceRange<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_setTransmittanceRangePtr
newCallback_Filter_setTransmittanceRange(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_setTransmittanceRange<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_setTransmittanceRangePtr
newCallback_Filter_setTransmittanceRange(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_setTransmittanceRange<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_setTransmittanceRangePtr
newCallback_Filter_setTransmittanceRange(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_setTransmittanceRange<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Filter_getInstrument : public Callback_Filter_getInstrument_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::InstrumentPtr&);

    CallbackNC_Filter_getInstrument(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterPrx __proxy = ::omero::model::FilterPrx::uncheckedCast(__result->getProxy());
        ::omero::model::InstrumentPtr __ret;
        try
        {
            __ret = __proxy->end_getInstrument(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Filter_getInstrumentPtr
newCallback_Filter_getInstrument(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::InstrumentPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_getInstrument<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_getInstrumentPtr
newCallback_Filter_getInstrument(T* instance, void (T::*cb)(const ::omero::model::InstrumentPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_getInstrument<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Filter_getInstrument : public Callback_Filter_getInstrument_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::InstrumentPtr&, const CT&);

    Callback_Filter_getInstrument(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterPrx __proxy = ::omero::model::FilterPrx::uncheckedCast(__result->getProxy());
        ::omero::model::InstrumentPtr __ret;
        try
        {
            __ret = __proxy->end_getInstrument(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Filter_getInstrumentPtr
newCallback_Filter_getInstrument(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::InstrumentPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_getInstrument<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_getInstrumentPtr
newCallback_Filter_getInstrument(T* instance, void (T::*cb)(const ::omero::model::InstrumentPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_getInstrument<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Filter_setInstrument : public Callback_Filter_setInstrument_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Filter_setInstrument(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Filter_setInstrumentPtr
newCallback_Filter_setInstrument(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_setInstrument<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_setInstrumentPtr
newCallback_Filter_setInstrument(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_setInstrument<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Filter_setInstrumentPtr
newCallback_Filter_setInstrument(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_setInstrument<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_setInstrumentPtr
newCallback_Filter_setInstrument(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_setInstrument<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Filter_setInstrument : public Callback_Filter_setInstrument_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Filter_setInstrument(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Filter_setInstrumentPtr
newCallback_Filter_setInstrument(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_setInstrument<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_setInstrumentPtr
newCallback_Filter_setInstrument(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_setInstrument<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_setInstrumentPtr
newCallback_Filter_setInstrument(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_setInstrument<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_setInstrumentPtr
newCallback_Filter_setInstrument(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_setInstrument<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Filter_unloadExcitationFilterLink : public Callback_Filter_unloadExcitationFilterLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Filter_unloadExcitationFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Filter_unloadExcitationFilterLinkPtr
newCallback_Filter_unloadExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_unloadExcitationFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_unloadExcitationFilterLinkPtr
newCallback_Filter_unloadExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_unloadExcitationFilterLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Filter_unloadExcitationFilterLinkPtr
newCallback_Filter_unloadExcitationFilterLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_unloadExcitationFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_unloadExcitationFilterLinkPtr
newCallback_Filter_unloadExcitationFilterLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_unloadExcitationFilterLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Filter_unloadExcitationFilterLink : public Callback_Filter_unloadExcitationFilterLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Filter_unloadExcitationFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Filter_unloadExcitationFilterLinkPtr
newCallback_Filter_unloadExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_unloadExcitationFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_unloadExcitationFilterLinkPtr
newCallback_Filter_unloadExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_unloadExcitationFilterLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_unloadExcitationFilterLinkPtr
newCallback_Filter_unloadExcitationFilterLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_unloadExcitationFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_unloadExcitationFilterLinkPtr
newCallback_Filter_unloadExcitationFilterLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_unloadExcitationFilterLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Filter_sizeOfExcitationFilterLink : public Callback_Filter_sizeOfExcitationFilterLink_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Filter_sizeOfExcitationFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterPrx __proxy = ::omero::model::FilterPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfExcitationFilterLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Filter_sizeOfExcitationFilterLinkPtr
newCallback_Filter_sizeOfExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_sizeOfExcitationFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_sizeOfExcitationFilterLinkPtr
newCallback_Filter_sizeOfExcitationFilterLink(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_sizeOfExcitationFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Filter_sizeOfExcitationFilterLink : public Callback_Filter_sizeOfExcitationFilterLink_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Filter_sizeOfExcitationFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterPrx __proxy = ::omero::model::FilterPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfExcitationFilterLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Filter_sizeOfExcitationFilterLinkPtr
newCallback_Filter_sizeOfExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_sizeOfExcitationFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_sizeOfExcitationFilterLinkPtr
newCallback_Filter_sizeOfExcitationFilterLink(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_sizeOfExcitationFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Filter_copyExcitationFilterLink : public Callback_Filter_copyExcitationFilterLink_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::FilterExcitationFilterLinkSeq&);

    CallbackNC_Filter_copyExcitationFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterPrx __proxy = ::omero::model::FilterPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilterExcitationFilterLinkSeq __ret;
        try
        {
            __ret = __proxy->end_copyExcitationFilterLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Filter_copyExcitationFilterLinkPtr
newCallback_Filter_copyExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilterExcitationFilterLinkSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_copyExcitationFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_copyExcitationFilterLinkPtr
newCallback_Filter_copyExcitationFilterLink(T* instance, void (T::*cb)(const ::omero::model::FilterExcitationFilterLinkSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_copyExcitationFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Filter_copyExcitationFilterLink : public Callback_Filter_copyExcitationFilterLink_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::FilterExcitationFilterLinkSeq&, const CT&);

    Callback_Filter_copyExcitationFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterPrx __proxy = ::omero::model::FilterPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilterExcitationFilterLinkSeq __ret;
        try
        {
            __ret = __proxy->end_copyExcitationFilterLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Filter_copyExcitationFilterLinkPtr
newCallback_Filter_copyExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilterExcitationFilterLinkSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_copyExcitationFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_copyExcitationFilterLinkPtr
newCallback_Filter_copyExcitationFilterLink(T* instance, void (T::*cb)(const ::omero::model::FilterExcitationFilterLinkSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_copyExcitationFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Filter_addFilterSetExcitationFilterLink : public Callback_Filter_addFilterSetExcitationFilterLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Filter_addFilterSetExcitationFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Filter_addFilterSetExcitationFilterLinkPtr
newCallback_Filter_addFilterSetExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_addFilterSetExcitationFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_addFilterSetExcitationFilterLinkPtr
newCallback_Filter_addFilterSetExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_addFilterSetExcitationFilterLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Filter_addFilterSetExcitationFilterLinkPtr
newCallback_Filter_addFilterSetExcitationFilterLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_addFilterSetExcitationFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_addFilterSetExcitationFilterLinkPtr
newCallback_Filter_addFilterSetExcitationFilterLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_addFilterSetExcitationFilterLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Filter_addFilterSetExcitationFilterLink : public Callback_Filter_addFilterSetExcitationFilterLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Filter_addFilterSetExcitationFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Filter_addFilterSetExcitationFilterLinkPtr
newCallback_Filter_addFilterSetExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_addFilterSetExcitationFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_addFilterSetExcitationFilterLinkPtr
newCallback_Filter_addFilterSetExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_addFilterSetExcitationFilterLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_addFilterSetExcitationFilterLinkPtr
newCallback_Filter_addFilterSetExcitationFilterLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_addFilterSetExcitationFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_addFilterSetExcitationFilterLinkPtr
newCallback_Filter_addFilterSetExcitationFilterLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_addFilterSetExcitationFilterLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Filter_addAllFilterSetExcitationFilterLinkSet : public Callback_Filter_addAllFilterSetExcitationFilterLinkSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Filter_addAllFilterSetExcitationFilterLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Filter_addAllFilterSetExcitationFilterLinkSetPtr
newCallback_Filter_addAllFilterSetExcitationFilterLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_addAllFilterSetExcitationFilterLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_addAllFilterSetExcitationFilterLinkSetPtr
newCallback_Filter_addAllFilterSetExcitationFilterLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_addAllFilterSetExcitationFilterLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Filter_addAllFilterSetExcitationFilterLinkSetPtr
newCallback_Filter_addAllFilterSetExcitationFilterLinkSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_addAllFilterSetExcitationFilterLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_addAllFilterSetExcitationFilterLinkSetPtr
newCallback_Filter_addAllFilterSetExcitationFilterLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_addAllFilterSetExcitationFilterLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Filter_addAllFilterSetExcitationFilterLinkSet : public Callback_Filter_addAllFilterSetExcitationFilterLinkSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Filter_addAllFilterSetExcitationFilterLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Filter_addAllFilterSetExcitationFilterLinkSetPtr
newCallback_Filter_addAllFilterSetExcitationFilterLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_addAllFilterSetExcitationFilterLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_addAllFilterSetExcitationFilterLinkSetPtr
newCallback_Filter_addAllFilterSetExcitationFilterLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_addAllFilterSetExcitationFilterLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_addAllFilterSetExcitationFilterLinkSetPtr
newCallback_Filter_addAllFilterSetExcitationFilterLinkSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_addAllFilterSetExcitationFilterLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_addAllFilterSetExcitationFilterLinkSetPtr
newCallback_Filter_addAllFilterSetExcitationFilterLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_addAllFilterSetExcitationFilterLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Filter_removeFilterSetExcitationFilterLink : public Callback_Filter_removeFilterSetExcitationFilterLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Filter_removeFilterSetExcitationFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Filter_removeFilterSetExcitationFilterLinkPtr
newCallback_Filter_removeFilterSetExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_removeFilterSetExcitationFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_removeFilterSetExcitationFilterLinkPtr
newCallback_Filter_removeFilterSetExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_removeFilterSetExcitationFilterLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Filter_removeFilterSetExcitationFilterLinkPtr
newCallback_Filter_removeFilterSetExcitationFilterLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_removeFilterSetExcitationFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_removeFilterSetExcitationFilterLinkPtr
newCallback_Filter_removeFilterSetExcitationFilterLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_removeFilterSetExcitationFilterLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Filter_removeFilterSetExcitationFilterLink : public Callback_Filter_removeFilterSetExcitationFilterLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Filter_removeFilterSetExcitationFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Filter_removeFilterSetExcitationFilterLinkPtr
newCallback_Filter_removeFilterSetExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_removeFilterSetExcitationFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_removeFilterSetExcitationFilterLinkPtr
newCallback_Filter_removeFilterSetExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_removeFilterSetExcitationFilterLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_removeFilterSetExcitationFilterLinkPtr
newCallback_Filter_removeFilterSetExcitationFilterLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_removeFilterSetExcitationFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_removeFilterSetExcitationFilterLinkPtr
newCallback_Filter_removeFilterSetExcitationFilterLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_removeFilterSetExcitationFilterLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Filter_removeAllFilterSetExcitationFilterLinkSet : public Callback_Filter_removeAllFilterSetExcitationFilterLinkSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Filter_removeAllFilterSetExcitationFilterLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Filter_removeAllFilterSetExcitationFilterLinkSetPtr
newCallback_Filter_removeAllFilterSetExcitationFilterLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_removeAllFilterSetExcitationFilterLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_removeAllFilterSetExcitationFilterLinkSetPtr
newCallback_Filter_removeAllFilterSetExcitationFilterLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_removeAllFilterSetExcitationFilterLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Filter_removeAllFilterSetExcitationFilterLinkSetPtr
newCallback_Filter_removeAllFilterSetExcitationFilterLinkSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_removeAllFilterSetExcitationFilterLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_removeAllFilterSetExcitationFilterLinkSetPtr
newCallback_Filter_removeAllFilterSetExcitationFilterLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_removeAllFilterSetExcitationFilterLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Filter_removeAllFilterSetExcitationFilterLinkSet : public Callback_Filter_removeAllFilterSetExcitationFilterLinkSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Filter_removeAllFilterSetExcitationFilterLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Filter_removeAllFilterSetExcitationFilterLinkSetPtr
newCallback_Filter_removeAllFilterSetExcitationFilterLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_removeAllFilterSetExcitationFilterLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_removeAllFilterSetExcitationFilterLinkSetPtr
newCallback_Filter_removeAllFilterSetExcitationFilterLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_removeAllFilterSetExcitationFilterLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_removeAllFilterSetExcitationFilterLinkSetPtr
newCallback_Filter_removeAllFilterSetExcitationFilterLinkSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_removeAllFilterSetExcitationFilterLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_removeAllFilterSetExcitationFilterLinkSetPtr
newCallback_Filter_removeAllFilterSetExcitationFilterLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_removeAllFilterSetExcitationFilterLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Filter_clearExcitationFilterLink : public Callback_Filter_clearExcitationFilterLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Filter_clearExcitationFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Filter_clearExcitationFilterLinkPtr
newCallback_Filter_clearExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_clearExcitationFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_clearExcitationFilterLinkPtr
newCallback_Filter_clearExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_clearExcitationFilterLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Filter_clearExcitationFilterLinkPtr
newCallback_Filter_clearExcitationFilterLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_clearExcitationFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_clearExcitationFilterLinkPtr
newCallback_Filter_clearExcitationFilterLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_clearExcitationFilterLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Filter_clearExcitationFilterLink : public Callback_Filter_clearExcitationFilterLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Filter_clearExcitationFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Filter_clearExcitationFilterLinkPtr
newCallback_Filter_clearExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_clearExcitationFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_clearExcitationFilterLinkPtr
newCallback_Filter_clearExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_clearExcitationFilterLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_clearExcitationFilterLinkPtr
newCallback_Filter_clearExcitationFilterLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_clearExcitationFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_clearExcitationFilterLinkPtr
newCallback_Filter_clearExcitationFilterLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_clearExcitationFilterLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Filter_reloadExcitationFilterLink : public Callback_Filter_reloadExcitationFilterLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Filter_reloadExcitationFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Filter_reloadExcitationFilterLinkPtr
newCallback_Filter_reloadExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_reloadExcitationFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_reloadExcitationFilterLinkPtr
newCallback_Filter_reloadExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_reloadExcitationFilterLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Filter_reloadExcitationFilterLinkPtr
newCallback_Filter_reloadExcitationFilterLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_reloadExcitationFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_reloadExcitationFilterLinkPtr
newCallback_Filter_reloadExcitationFilterLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_reloadExcitationFilterLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Filter_reloadExcitationFilterLink : public Callback_Filter_reloadExcitationFilterLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Filter_reloadExcitationFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Filter_reloadExcitationFilterLinkPtr
newCallback_Filter_reloadExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_reloadExcitationFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_reloadExcitationFilterLinkPtr
newCallback_Filter_reloadExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_reloadExcitationFilterLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_reloadExcitationFilterLinkPtr
newCallback_Filter_reloadExcitationFilterLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_reloadExcitationFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_reloadExcitationFilterLinkPtr
newCallback_Filter_reloadExcitationFilterLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_reloadExcitationFilterLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Filter_getExcitationFilterLinkCountPerOwner : public Callback_Filter_getExcitationFilterLinkCountPerOwner_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::sys::CountMap&);

    CallbackNC_Filter_getExcitationFilterLinkCountPerOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterPrx __proxy = ::omero::model::FilterPrx::uncheckedCast(__result->getProxy());
        ::omero::sys::CountMap __ret;
        try
        {
            __ret = __proxy->end_getExcitationFilterLinkCountPerOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Filter_getExcitationFilterLinkCountPerOwnerPtr
newCallback_Filter_getExcitationFilterLinkCountPerOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::CountMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_getExcitationFilterLinkCountPerOwner<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_getExcitationFilterLinkCountPerOwnerPtr
newCallback_Filter_getExcitationFilterLinkCountPerOwner(T* instance, void (T::*cb)(const ::omero::sys::CountMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_getExcitationFilterLinkCountPerOwner<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Filter_getExcitationFilterLinkCountPerOwner : public Callback_Filter_getExcitationFilterLinkCountPerOwner_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::sys::CountMap&, const CT&);

    Callback_Filter_getExcitationFilterLinkCountPerOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterPrx __proxy = ::omero::model::FilterPrx::uncheckedCast(__result->getProxy());
        ::omero::sys::CountMap __ret;
        try
        {
            __ret = __proxy->end_getExcitationFilterLinkCountPerOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Filter_getExcitationFilterLinkCountPerOwnerPtr
newCallback_Filter_getExcitationFilterLinkCountPerOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::CountMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_getExcitationFilterLinkCountPerOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_getExcitationFilterLinkCountPerOwnerPtr
newCallback_Filter_getExcitationFilterLinkCountPerOwner(T* instance, void (T::*cb)(const ::omero::sys::CountMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_getExcitationFilterLinkCountPerOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Filter_linkExcitationFilter : public Callback_Filter_linkExcitationFilter_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::FilterSetExcitationFilterLinkPtr&);

    CallbackNC_Filter_linkExcitationFilter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterPrx __proxy = ::omero::model::FilterPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilterSetExcitationFilterLinkPtr __ret;
        try
        {
            __ret = __proxy->end_linkExcitationFilter(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Filter_linkExcitationFilterPtr
newCallback_Filter_linkExcitationFilter(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilterSetExcitationFilterLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_linkExcitationFilter<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_linkExcitationFilterPtr
newCallback_Filter_linkExcitationFilter(T* instance, void (T::*cb)(const ::omero::model::FilterSetExcitationFilterLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_linkExcitationFilter<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Filter_linkExcitationFilter : public Callback_Filter_linkExcitationFilter_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::FilterSetExcitationFilterLinkPtr&, const CT&);

    Callback_Filter_linkExcitationFilter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterPrx __proxy = ::omero::model::FilterPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilterSetExcitationFilterLinkPtr __ret;
        try
        {
            __ret = __proxy->end_linkExcitationFilter(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Filter_linkExcitationFilterPtr
newCallback_Filter_linkExcitationFilter(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilterSetExcitationFilterLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_linkExcitationFilter<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_linkExcitationFilterPtr
newCallback_Filter_linkExcitationFilter(T* instance, void (T::*cb)(const ::omero::model::FilterSetExcitationFilterLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_linkExcitationFilter<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Filter_addFilterSetExcitationFilterLinkToBoth : public Callback_Filter_addFilterSetExcitationFilterLinkToBoth_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Filter_addFilterSetExcitationFilterLinkToBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Filter_addFilterSetExcitationFilterLinkToBothPtr
newCallback_Filter_addFilterSetExcitationFilterLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_addFilterSetExcitationFilterLinkToBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_addFilterSetExcitationFilterLinkToBothPtr
newCallback_Filter_addFilterSetExcitationFilterLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_addFilterSetExcitationFilterLinkToBoth<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Filter_addFilterSetExcitationFilterLinkToBothPtr
newCallback_Filter_addFilterSetExcitationFilterLinkToBoth(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_addFilterSetExcitationFilterLinkToBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_addFilterSetExcitationFilterLinkToBothPtr
newCallback_Filter_addFilterSetExcitationFilterLinkToBoth(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_addFilterSetExcitationFilterLinkToBoth<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Filter_addFilterSetExcitationFilterLinkToBoth : public Callback_Filter_addFilterSetExcitationFilterLinkToBoth_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Filter_addFilterSetExcitationFilterLinkToBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Filter_addFilterSetExcitationFilterLinkToBothPtr
newCallback_Filter_addFilterSetExcitationFilterLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_addFilterSetExcitationFilterLinkToBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_addFilterSetExcitationFilterLinkToBothPtr
newCallback_Filter_addFilterSetExcitationFilterLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_addFilterSetExcitationFilterLinkToBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_addFilterSetExcitationFilterLinkToBothPtr
newCallback_Filter_addFilterSetExcitationFilterLinkToBoth(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_addFilterSetExcitationFilterLinkToBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_addFilterSetExcitationFilterLinkToBothPtr
newCallback_Filter_addFilterSetExcitationFilterLinkToBoth(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_addFilterSetExcitationFilterLinkToBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Filter_findFilterSetExcitationFilterLink : public Callback_Filter_findFilterSetExcitationFilterLink_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::FilterExcitationFilterLinkSeq&);

    CallbackNC_Filter_findFilterSetExcitationFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterPrx __proxy = ::omero::model::FilterPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilterExcitationFilterLinkSeq __ret;
        try
        {
            __ret = __proxy->end_findFilterSetExcitationFilterLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Filter_findFilterSetExcitationFilterLinkPtr
newCallback_Filter_findFilterSetExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilterExcitationFilterLinkSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_findFilterSetExcitationFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_findFilterSetExcitationFilterLinkPtr
newCallback_Filter_findFilterSetExcitationFilterLink(T* instance, void (T::*cb)(const ::omero::model::FilterExcitationFilterLinkSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_findFilterSetExcitationFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Filter_findFilterSetExcitationFilterLink : public Callback_Filter_findFilterSetExcitationFilterLink_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::FilterExcitationFilterLinkSeq&, const CT&);

    Callback_Filter_findFilterSetExcitationFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterPrx __proxy = ::omero::model::FilterPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilterExcitationFilterLinkSeq __ret;
        try
        {
            __ret = __proxy->end_findFilterSetExcitationFilterLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Filter_findFilterSetExcitationFilterLinkPtr
newCallback_Filter_findFilterSetExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilterExcitationFilterLinkSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_findFilterSetExcitationFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_findFilterSetExcitationFilterLinkPtr
newCallback_Filter_findFilterSetExcitationFilterLink(T* instance, void (T::*cb)(const ::omero::model::FilterExcitationFilterLinkSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_findFilterSetExcitationFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Filter_unlinkExcitationFilter : public Callback_Filter_unlinkExcitationFilter_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Filter_unlinkExcitationFilter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Filter_unlinkExcitationFilterPtr
newCallback_Filter_unlinkExcitationFilter(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_unlinkExcitationFilter<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_unlinkExcitationFilterPtr
newCallback_Filter_unlinkExcitationFilter(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_unlinkExcitationFilter<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Filter_unlinkExcitationFilterPtr
newCallback_Filter_unlinkExcitationFilter(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_unlinkExcitationFilter<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_unlinkExcitationFilterPtr
newCallback_Filter_unlinkExcitationFilter(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_unlinkExcitationFilter<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Filter_unlinkExcitationFilter : public Callback_Filter_unlinkExcitationFilter_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Filter_unlinkExcitationFilter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Filter_unlinkExcitationFilterPtr
newCallback_Filter_unlinkExcitationFilter(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_unlinkExcitationFilter<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_unlinkExcitationFilterPtr
newCallback_Filter_unlinkExcitationFilter(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_unlinkExcitationFilter<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_unlinkExcitationFilterPtr
newCallback_Filter_unlinkExcitationFilter(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_unlinkExcitationFilter<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_unlinkExcitationFilterPtr
newCallback_Filter_unlinkExcitationFilter(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_unlinkExcitationFilter<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Filter_removeFilterSetExcitationFilterLinkFromBoth : public Callback_Filter_removeFilterSetExcitationFilterLinkFromBoth_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Filter_removeFilterSetExcitationFilterLinkFromBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Filter_removeFilterSetExcitationFilterLinkFromBothPtr
newCallback_Filter_removeFilterSetExcitationFilterLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_removeFilterSetExcitationFilterLinkFromBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_removeFilterSetExcitationFilterLinkFromBothPtr
newCallback_Filter_removeFilterSetExcitationFilterLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_removeFilterSetExcitationFilterLinkFromBoth<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Filter_removeFilterSetExcitationFilterLinkFromBothPtr
newCallback_Filter_removeFilterSetExcitationFilterLinkFromBoth(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_removeFilterSetExcitationFilterLinkFromBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_removeFilterSetExcitationFilterLinkFromBothPtr
newCallback_Filter_removeFilterSetExcitationFilterLinkFromBoth(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_removeFilterSetExcitationFilterLinkFromBoth<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Filter_removeFilterSetExcitationFilterLinkFromBoth : public Callback_Filter_removeFilterSetExcitationFilterLinkFromBoth_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Filter_removeFilterSetExcitationFilterLinkFromBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Filter_removeFilterSetExcitationFilterLinkFromBothPtr
newCallback_Filter_removeFilterSetExcitationFilterLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_removeFilterSetExcitationFilterLinkFromBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_removeFilterSetExcitationFilterLinkFromBothPtr
newCallback_Filter_removeFilterSetExcitationFilterLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_removeFilterSetExcitationFilterLinkFromBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_removeFilterSetExcitationFilterLinkFromBothPtr
newCallback_Filter_removeFilterSetExcitationFilterLinkFromBoth(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_removeFilterSetExcitationFilterLinkFromBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_removeFilterSetExcitationFilterLinkFromBothPtr
newCallback_Filter_removeFilterSetExcitationFilterLinkFromBoth(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_removeFilterSetExcitationFilterLinkFromBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Filter_linkedExcitationFilterList : public Callback_Filter_linkedExcitationFilterList_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::FilterLinkedExcitationFilterSeq&);

    CallbackNC_Filter_linkedExcitationFilterList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterPrx __proxy = ::omero::model::FilterPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilterLinkedExcitationFilterSeq __ret;
        try
        {
            __ret = __proxy->end_linkedExcitationFilterList(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Filter_linkedExcitationFilterListPtr
newCallback_Filter_linkedExcitationFilterList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilterLinkedExcitationFilterSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_linkedExcitationFilterList<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_linkedExcitationFilterListPtr
newCallback_Filter_linkedExcitationFilterList(T* instance, void (T::*cb)(const ::omero::model::FilterLinkedExcitationFilterSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_linkedExcitationFilterList<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Filter_linkedExcitationFilterList : public Callback_Filter_linkedExcitationFilterList_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::FilterLinkedExcitationFilterSeq&, const CT&);

    Callback_Filter_linkedExcitationFilterList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterPrx __proxy = ::omero::model::FilterPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilterLinkedExcitationFilterSeq __ret;
        try
        {
            __ret = __proxy->end_linkedExcitationFilterList(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Filter_linkedExcitationFilterListPtr
newCallback_Filter_linkedExcitationFilterList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilterLinkedExcitationFilterSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_linkedExcitationFilterList<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_linkedExcitationFilterListPtr
newCallback_Filter_linkedExcitationFilterList(T* instance, void (T::*cb)(const ::omero::model::FilterLinkedExcitationFilterSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_linkedExcitationFilterList<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Filter_unloadEmissionFilterLink : public Callback_Filter_unloadEmissionFilterLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Filter_unloadEmissionFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Filter_unloadEmissionFilterLinkPtr
newCallback_Filter_unloadEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_unloadEmissionFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_unloadEmissionFilterLinkPtr
newCallback_Filter_unloadEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_unloadEmissionFilterLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Filter_unloadEmissionFilterLinkPtr
newCallback_Filter_unloadEmissionFilterLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_unloadEmissionFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_unloadEmissionFilterLinkPtr
newCallback_Filter_unloadEmissionFilterLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_unloadEmissionFilterLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Filter_unloadEmissionFilterLink : public Callback_Filter_unloadEmissionFilterLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Filter_unloadEmissionFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Filter_unloadEmissionFilterLinkPtr
newCallback_Filter_unloadEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_unloadEmissionFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_unloadEmissionFilterLinkPtr
newCallback_Filter_unloadEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_unloadEmissionFilterLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_unloadEmissionFilterLinkPtr
newCallback_Filter_unloadEmissionFilterLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_unloadEmissionFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_unloadEmissionFilterLinkPtr
newCallback_Filter_unloadEmissionFilterLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_unloadEmissionFilterLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Filter_sizeOfEmissionFilterLink : public Callback_Filter_sizeOfEmissionFilterLink_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Filter_sizeOfEmissionFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterPrx __proxy = ::omero::model::FilterPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfEmissionFilterLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Filter_sizeOfEmissionFilterLinkPtr
newCallback_Filter_sizeOfEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_sizeOfEmissionFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_sizeOfEmissionFilterLinkPtr
newCallback_Filter_sizeOfEmissionFilterLink(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_sizeOfEmissionFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Filter_sizeOfEmissionFilterLink : public Callback_Filter_sizeOfEmissionFilterLink_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Filter_sizeOfEmissionFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterPrx __proxy = ::omero::model::FilterPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfEmissionFilterLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Filter_sizeOfEmissionFilterLinkPtr
newCallback_Filter_sizeOfEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_sizeOfEmissionFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_sizeOfEmissionFilterLinkPtr
newCallback_Filter_sizeOfEmissionFilterLink(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_sizeOfEmissionFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Filter_copyEmissionFilterLink : public Callback_Filter_copyEmissionFilterLink_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::FilterEmissionFilterLinkSeq&);

    CallbackNC_Filter_copyEmissionFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterPrx __proxy = ::omero::model::FilterPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilterEmissionFilterLinkSeq __ret;
        try
        {
            __ret = __proxy->end_copyEmissionFilterLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Filter_copyEmissionFilterLinkPtr
newCallback_Filter_copyEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilterEmissionFilterLinkSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_copyEmissionFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_copyEmissionFilterLinkPtr
newCallback_Filter_copyEmissionFilterLink(T* instance, void (T::*cb)(const ::omero::model::FilterEmissionFilterLinkSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_copyEmissionFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Filter_copyEmissionFilterLink : public Callback_Filter_copyEmissionFilterLink_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::FilterEmissionFilterLinkSeq&, const CT&);

    Callback_Filter_copyEmissionFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterPrx __proxy = ::omero::model::FilterPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilterEmissionFilterLinkSeq __ret;
        try
        {
            __ret = __proxy->end_copyEmissionFilterLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Filter_copyEmissionFilterLinkPtr
newCallback_Filter_copyEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilterEmissionFilterLinkSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_copyEmissionFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_copyEmissionFilterLinkPtr
newCallback_Filter_copyEmissionFilterLink(T* instance, void (T::*cb)(const ::omero::model::FilterEmissionFilterLinkSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_copyEmissionFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Filter_addFilterSetEmissionFilterLink : public Callback_Filter_addFilterSetEmissionFilterLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Filter_addFilterSetEmissionFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Filter_addFilterSetEmissionFilterLinkPtr
newCallback_Filter_addFilterSetEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_addFilterSetEmissionFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_addFilterSetEmissionFilterLinkPtr
newCallback_Filter_addFilterSetEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_addFilterSetEmissionFilterLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Filter_addFilterSetEmissionFilterLinkPtr
newCallback_Filter_addFilterSetEmissionFilterLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_addFilterSetEmissionFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_addFilterSetEmissionFilterLinkPtr
newCallback_Filter_addFilterSetEmissionFilterLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_addFilterSetEmissionFilterLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Filter_addFilterSetEmissionFilterLink : public Callback_Filter_addFilterSetEmissionFilterLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Filter_addFilterSetEmissionFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Filter_addFilterSetEmissionFilterLinkPtr
newCallback_Filter_addFilterSetEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_addFilterSetEmissionFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_addFilterSetEmissionFilterLinkPtr
newCallback_Filter_addFilterSetEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_addFilterSetEmissionFilterLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_addFilterSetEmissionFilterLinkPtr
newCallback_Filter_addFilterSetEmissionFilterLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_addFilterSetEmissionFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_addFilterSetEmissionFilterLinkPtr
newCallback_Filter_addFilterSetEmissionFilterLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_addFilterSetEmissionFilterLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Filter_addAllFilterSetEmissionFilterLinkSet : public Callback_Filter_addAllFilterSetEmissionFilterLinkSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Filter_addAllFilterSetEmissionFilterLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Filter_addAllFilterSetEmissionFilterLinkSetPtr
newCallback_Filter_addAllFilterSetEmissionFilterLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_addAllFilterSetEmissionFilterLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_addAllFilterSetEmissionFilterLinkSetPtr
newCallback_Filter_addAllFilterSetEmissionFilterLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_addAllFilterSetEmissionFilterLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Filter_addAllFilterSetEmissionFilterLinkSetPtr
newCallback_Filter_addAllFilterSetEmissionFilterLinkSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_addAllFilterSetEmissionFilterLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_addAllFilterSetEmissionFilterLinkSetPtr
newCallback_Filter_addAllFilterSetEmissionFilterLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_addAllFilterSetEmissionFilterLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Filter_addAllFilterSetEmissionFilterLinkSet : public Callback_Filter_addAllFilterSetEmissionFilterLinkSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Filter_addAllFilterSetEmissionFilterLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Filter_addAllFilterSetEmissionFilterLinkSetPtr
newCallback_Filter_addAllFilterSetEmissionFilterLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_addAllFilterSetEmissionFilterLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_addAllFilterSetEmissionFilterLinkSetPtr
newCallback_Filter_addAllFilterSetEmissionFilterLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_addAllFilterSetEmissionFilterLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_addAllFilterSetEmissionFilterLinkSetPtr
newCallback_Filter_addAllFilterSetEmissionFilterLinkSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_addAllFilterSetEmissionFilterLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_addAllFilterSetEmissionFilterLinkSetPtr
newCallback_Filter_addAllFilterSetEmissionFilterLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_addAllFilterSetEmissionFilterLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Filter_removeFilterSetEmissionFilterLink : public Callback_Filter_removeFilterSetEmissionFilterLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Filter_removeFilterSetEmissionFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Filter_removeFilterSetEmissionFilterLinkPtr
newCallback_Filter_removeFilterSetEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_removeFilterSetEmissionFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_removeFilterSetEmissionFilterLinkPtr
newCallback_Filter_removeFilterSetEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_removeFilterSetEmissionFilterLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Filter_removeFilterSetEmissionFilterLinkPtr
newCallback_Filter_removeFilterSetEmissionFilterLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_removeFilterSetEmissionFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_removeFilterSetEmissionFilterLinkPtr
newCallback_Filter_removeFilterSetEmissionFilterLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_removeFilterSetEmissionFilterLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Filter_removeFilterSetEmissionFilterLink : public Callback_Filter_removeFilterSetEmissionFilterLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Filter_removeFilterSetEmissionFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Filter_removeFilterSetEmissionFilterLinkPtr
newCallback_Filter_removeFilterSetEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_removeFilterSetEmissionFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_removeFilterSetEmissionFilterLinkPtr
newCallback_Filter_removeFilterSetEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_removeFilterSetEmissionFilterLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_removeFilterSetEmissionFilterLinkPtr
newCallback_Filter_removeFilterSetEmissionFilterLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_removeFilterSetEmissionFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_removeFilterSetEmissionFilterLinkPtr
newCallback_Filter_removeFilterSetEmissionFilterLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_removeFilterSetEmissionFilterLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Filter_removeAllFilterSetEmissionFilterLinkSet : public Callback_Filter_removeAllFilterSetEmissionFilterLinkSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Filter_removeAllFilterSetEmissionFilterLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Filter_removeAllFilterSetEmissionFilterLinkSetPtr
newCallback_Filter_removeAllFilterSetEmissionFilterLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_removeAllFilterSetEmissionFilterLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_removeAllFilterSetEmissionFilterLinkSetPtr
newCallback_Filter_removeAllFilterSetEmissionFilterLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_removeAllFilterSetEmissionFilterLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Filter_removeAllFilterSetEmissionFilterLinkSetPtr
newCallback_Filter_removeAllFilterSetEmissionFilterLinkSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_removeAllFilterSetEmissionFilterLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_removeAllFilterSetEmissionFilterLinkSetPtr
newCallback_Filter_removeAllFilterSetEmissionFilterLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_removeAllFilterSetEmissionFilterLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Filter_removeAllFilterSetEmissionFilterLinkSet : public Callback_Filter_removeAllFilterSetEmissionFilterLinkSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Filter_removeAllFilterSetEmissionFilterLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Filter_removeAllFilterSetEmissionFilterLinkSetPtr
newCallback_Filter_removeAllFilterSetEmissionFilterLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_removeAllFilterSetEmissionFilterLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_removeAllFilterSetEmissionFilterLinkSetPtr
newCallback_Filter_removeAllFilterSetEmissionFilterLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_removeAllFilterSetEmissionFilterLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_removeAllFilterSetEmissionFilterLinkSetPtr
newCallback_Filter_removeAllFilterSetEmissionFilterLinkSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_removeAllFilterSetEmissionFilterLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_removeAllFilterSetEmissionFilterLinkSetPtr
newCallback_Filter_removeAllFilterSetEmissionFilterLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_removeAllFilterSetEmissionFilterLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Filter_clearEmissionFilterLink : public Callback_Filter_clearEmissionFilterLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Filter_clearEmissionFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Filter_clearEmissionFilterLinkPtr
newCallback_Filter_clearEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_clearEmissionFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_clearEmissionFilterLinkPtr
newCallback_Filter_clearEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_clearEmissionFilterLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Filter_clearEmissionFilterLinkPtr
newCallback_Filter_clearEmissionFilterLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_clearEmissionFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_clearEmissionFilterLinkPtr
newCallback_Filter_clearEmissionFilterLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_clearEmissionFilterLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Filter_clearEmissionFilterLink : public Callback_Filter_clearEmissionFilterLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Filter_clearEmissionFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Filter_clearEmissionFilterLinkPtr
newCallback_Filter_clearEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_clearEmissionFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_clearEmissionFilterLinkPtr
newCallback_Filter_clearEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_clearEmissionFilterLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_clearEmissionFilterLinkPtr
newCallback_Filter_clearEmissionFilterLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_clearEmissionFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_clearEmissionFilterLinkPtr
newCallback_Filter_clearEmissionFilterLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_clearEmissionFilterLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Filter_reloadEmissionFilterLink : public Callback_Filter_reloadEmissionFilterLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Filter_reloadEmissionFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Filter_reloadEmissionFilterLinkPtr
newCallback_Filter_reloadEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_reloadEmissionFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_reloadEmissionFilterLinkPtr
newCallback_Filter_reloadEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_reloadEmissionFilterLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Filter_reloadEmissionFilterLinkPtr
newCallback_Filter_reloadEmissionFilterLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_reloadEmissionFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_reloadEmissionFilterLinkPtr
newCallback_Filter_reloadEmissionFilterLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_reloadEmissionFilterLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Filter_reloadEmissionFilterLink : public Callback_Filter_reloadEmissionFilterLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Filter_reloadEmissionFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Filter_reloadEmissionFilterLinkPtr
newCallback_Filter_reloadEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_reloadEmissionFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_reloadEmissionFilterLinkPtr
newCallback_Filter_reloadEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_reloadEmissionFilterLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_reloadEmissionFilterLinkPtr
newCallback_Filter_reloadEmissionFilterLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_reloadEmissionFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_reloadEmissionFilterLinkPtr
newCallback_Filter_reloadEmissionFilterLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_reloadEmissionFilterLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Filter_getEmissionFilterLinkCountPerOwner : public Callback_Filter_getEmissionFilterLinkCountPerOwner_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::sys::CountMap&);

    CallbackNC_Filter_getEmissionFilterLinkCountPerOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterPrx __proxy = ::omero::model::FilterPrx::uncheckedCast(__result->getProxy());
        ::omero::sys::CountMap __ret;
        try
        {
            __ret = __proxy->end_getEmissionFilterLinkCountPerOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Filter_getEmissionFilterLinkCountPerOwnerPtr
newCallback_Filter_getEmissionFilterLinkCountPerOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::CountMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_getEmissionFilterLinkCountPerOwner<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_getEmissionFilterLinkCountPerOwnerPtr
newCallback_Filter_getEmissionFilterLinkCountPerOwner(T* instance, void (T::*cb)(const ::omero::sys::CountMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_getEmissionFilterLinkCountPerOwner<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Filter_getEmissionFilterLinkCountPerOwner : public Callback_Filter_getEmissionFilterLinkCountPerOwner_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::sys::CountMap&, const CT&);

    Callback_Filter_getEmissionFilterLinkCountPerOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterPrx __proxy = ::omero::model::FilterPrx::uncheckedCast(__result->getProxy());
        ::omero::sys::CountMap __ret;
        try
        {
            __ret = __proxy->end_getEmissionFilterLinkCountPerOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Filter_getEmissionFilterLinkCountPerOwnerPtr
newCallback_Filter_getEmissionFilterLinkCountPerOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::CountMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_getEmissionFilterLinkCountPerOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_getEmissionFilterLinkCountPerOwnerPtr
newCallback_Filter_getEmissionFilterLinkCountPerOwner(T* instance, void (T::*cb)(const ::omero::sys::CountMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_getEmissionFilterLinkCountPerOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Filter_linkEmissionFilter : public Callback_Filter_linkEmissionFilter_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::FilterSetEmissionFilterLinkPtr&);

    CallbackNC_Filter_linkEmissionFilter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterPrx __proxy = ::omero::model::FilterPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilterSetEmissionFilterLinkPtr __ret;
        try
        {
            __ret = __proxy->end_linkEmissionFilter(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Filter_linkEmissionFilterPtr
newCallback_Filter_linkEmissionFilter(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilterSetEmissionFilterLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_linkEmissionFilter<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_linkEmissionFilterPtr
newCallback_Filter_linkEmissionFilter(T* instance, void (T::*cb)(const ::omero::model::FilterSetEmissionFilterLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_linkEmissionFilter<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Filter_linkEmissionFilter : public Callback_Filter_linkEmissionFilter_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::FilterSetEmissionFilterLinkPtr&, const CT&);

    Callback_Filter_linkEmissionFilter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterPrx __proxy = ::omero::model::FilterPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilterSetEmissionFilterLinkPtr __ret;
        try
        {
            __ret = __proxy->end_linkEmissionFilter(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Filter_linkEmissionFilterPtr
newCallback_Filter_linkEmissionFilter(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilterSetEmissionFilterLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_linkEmissionFilter<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_linkEmissionFilterPtr
newCallback_Filter_linkEmissionFilter(T* instance, void (T::*cb)(const ::omero::model::FilterSetEmissionFilterLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_linkEmissionFilter<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Filter_addFilterSetEmissionFilterLinkToBoth : public Callback_Filter_addFilterSetEmissionFilterLinkToBoth_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Filter_addFilterSetEmissionFilterLinkToBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Filter_addFilterSetEmissionFilterLinkToBothPtr
newCallback_Filter_addFilterSetEmissionFilterLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_addFilterSetEmissionFilterLinkToBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_addFilterSetEmissionFilterLinkToBothPtr
newCallback_Filter_addFilterSetEmissionFilterLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_addFilterSetEmissionFilterLinkToBoth<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Filter_addFilterSetEmissionFilterLinkToBothPtr
newCallback_Filter_addFilterSetEmissionFilterLinkToBoth(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_addFilterSetEmissionFilterLinkToBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_addFilterSetEmissionFilterLinkToBothPtr
newCallback_Filter_addFilterSetEmissionFilterLinkToBoth(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_addFilterSetEmissionFilterLinkToBoth<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Filter_addFilterSetEmissionFilterLinkToBoth : public Callback_Filter_addFilterSetEmissionFilterLinkToBoth_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Filter_addFilterSetEmissionFilterLinkToBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Filter_addFilterSetEmissionFilterLinkToBothPtr
newCallback_Filter_addFilterSetEmissionFilterLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_addFilterSetEmissionFilterLinkToBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_addFilterSetEmissionFilterLinkToBothPtr
newCallback_Filter_addFilterSetEmissionFilterLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_addFilterSetEmissionFilterLinkToBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_addFilterSetEmissionFilterLinkToBothPtr
newCallback_Filter_addFilterSetEmissionFilterLinkToBoth(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_addFilterSetEmissionFilterLinkToBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_addFilterSetEmissionFilterLinkToBothPtr
newCallback_Filter_addFilterSetEmissionFilterLinkToBoth(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_addFilterSetEmissionFilterLinkToBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Filter_findFilterSetEmissionFilterLink : public Callback_Filter_findFilterSetEmissionFilterLink_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::FilterEmissionFilterLinkSeq&);

    CallbackNC_Filter_findFilterSetEmissionFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterPrx __proxy = ::omero::model::FilterPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilterEmissionFilterLinkSeq __ret;
        try
        {
            __ret = __proxy->end_findFilterSetEmissionFilterLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Filter_findFilterSetEmissionFilterLinkPtr
newCallback_Filter_findFilterSetEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilterEmissionFilterLinkSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_findFilterSetEmissionFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_findFilterSetEmissionFilterLinkPtr
newCallback_Filter_findFilterSetEmissionFilterLink(T* instance, void (T::*cb)(const ::omero::model::FilterEmissionFilterLinkSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_findFilterSetEmissionFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Filter_findFilterSetEmissionFilterLink : public Callback_Filter_findFilterSetEmissionFilterLink_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::FilterEmissionFilterLinkSeq&, const CT&);

    Callback_Filter_findFilterSetEmissionFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterPrx __proxy = ::omero::model::FilterPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilterEmissionFilterLinkSeq __ret;
        try
        {
            __ret = __proxy->end_findFilterSetEmissionFilterLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Filter_findFilterSetEmissionFilterLinkPtr
newCallback_Filter_findFilterSetEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilterEmissionFilterLinkSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_findFilterSetEmissionFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_findFilterSetEmissionFilterLinkPtr
newCallback_Filter_findFilterSetEmissionFilterLink(T* instance, void (T::*cb)(const ::omero::model::FilterEmissionFilterLinkSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_findFilterSetEmissionFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Filter_unlinkEmissionFilter : public Callback_Filter_unlinkEmissionFilter_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Filter_unlinkEmissionFilter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Filter_unlinkEmissionFilterPtr
newCallback_Filter_unlinkEmissionFilter(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_unlinkEmissionFilter<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_unlinkEmissionFilterPtr
newCallback_Filter_unlinkEmissionFilter(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_unlinkEmissionFilter<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Filter_unlinkEmissionFilterPtr
newCallback_Filter_unlinkEmissionFilter(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_unlinkEmissionFilter<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_unlinkEmissionFilterPtr
newCallback_Filter_unlinkEmissionFilter(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_unlinkEmissionFilter<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Filter_unlinkEmissionFilter : public Callback_Filter_unlinkEmissionFilter_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Filter_unlinkEmissionFilter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Filter_unlinkEmissionFilterPtr
newCallback_Filter_unlinkEmissionFilter(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_unlinkEmissionFilter<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_unlinkEmissionFilterPtr
newCallback_Filter_unlinkEmissionFilter(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_unlinkEmissionFilter<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_unlinkEmissionFilterPtr
newCallback_Filter_unlinkEmissionFilter(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_unlinkEmissionFilter<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_unlinkEmissionFilterPtr
newCallback_Filter_unlinkEmissionFilter(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_unlinkEmissionFilter<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Filter_removeFilterSetEmissionFilterLinkFromBoth : public Callback_Filter_removeFilterSetEmissionFilterLinkFromBoth_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Filter_removeFilterSetEmissionFilterLinkFromBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Filter_removeFilterSetEmissionFilterLinkFromBothPtr
newCallback_Filter_removeFilterSetEmissionFilterLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_removeFilterSetEmissionFilterLinkFromBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_removeFilterSetEmissionFilterLinkFromBothPtr
newCallback_Filter_removeFilterSetEmissionFilterLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_removeFilterSetEmissionFilterLinkFromBoth<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Filter_removeFilterSetEmissionFilterLinkFromBothPtr
newCallback_Filter_removeFilterSetEmissionFilterLinkFromBoth(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_removeFilterSetEmissionFilterLinkFromBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_removeFilterSetEmissionFilterLinkFromBothPtr
newCallback_Filter_removeFilterSetEmissionFilterLinkFromBoth(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_removeFilterSetEmissionFilterLinkFromBoth<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Filter_removeFilterSetEmissionFilterLinkFromBoth : public Callback_Filter_removeFilterSetEmissionFilterLinkFromBoth_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Filter_removeFilterSetEmissionFilterLinkFromBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Filter_removeFilterSetEmissionFilterLinkFromBothPtr
newCallback_Filter_removeFilterSetEmissionFilterLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_removeFilterSetEmissionFilterLinkFromBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_removeFilterSetEmissionFilterLinkFromBothPtr
newCallback_Filter_removeFilterSetEmissionFilterLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_removeFilterSetEmissionFilterLinkFromBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_removeFilterSetEmissionFilterLinkFromBothPtr
newCallback_Filter_removeFilterSetEmissionFilterLinkFromBoth(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_removeFilterSetEmissionFilterLinkFromBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_removeFilterSetEmissionFilterLinkFromBothPtr
newCallback_Filter_removeFilterSetEmissionFilterLinkFromBoth(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_removeFilterSetEmissionFilterLinkFromBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Filter_linkedEmissionFilterList : public Callback_Filter_linkedEmissionFilterList_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::FilterLinkedEmissionFilterSeq&);

    CallbackNC_Filter_linkedEmissionFilterList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterPrx __proxy = ::omero::model::FilterPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilterLinkedEmissionFilterSeq __ret;
        try
        {
            __ret = __proxy->end_linkedEmissionFilterList(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Filter_linkedEmissionFilterListPtr
newCallback_Filter_linkedEmissionFilterList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilterLinkedEmissionFilterSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_linkedEmissionFilterList<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Filter_linkedEmissionFilterListPtr
newCallback_Filter_linkedEmissionFilterList(T* instance, void (T::*cb)(const ::omero::model::FilterLinkedEmissionFilterSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Filter_linkedEmissionFilterList<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Filter_linkedEmissionFilterList : public Callback_Filter_linkedEmissionFilterList_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::FilterLinkedEmissionFilterSeq&, const CT&);

    Callback_Filter_linkedEmissionFilterList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterPrx __proxy = ::omero::model::FilterPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilterLinkedEmissionFilterSeq __ret;
        try
        {
            __ret = __proxy->end_linkedEmissionFilterList(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Filter_linkedEmissionFilterListPtr
newCallback_Filter_linkedEmissionFilterList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilterLinkedEmissionFilterSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_linkedEmissionFilterList<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Filter_linkedEmissionFilterListPtr
newCallback_Filter_linkedEmissionFilterList(T* instance, void (T::*cb)(const ::omero::model::FilterLinkedEmissionFilterSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Filter_linkedEmissionFilterList<T, CT>(instance, cb, excb, sentcb);
}

}

}

#endif
