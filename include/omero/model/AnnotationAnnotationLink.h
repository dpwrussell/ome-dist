// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `AnnotationAnnotationLink.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_AnnotationAnnotationLink_h__
#define __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_AnnotationAnnotationLink_h__

#include <Ice/LocalObjectF.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/StreamF.h>
#include <omero/model/IObject.h>
#include <omero/RTypes.h>
#include <omero/System.h>
#include <omero/Collections.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace omero
{

namespace model
{

class Annotation;

class Details;

class AnnotationAnnotationLink;

}

}

}

namespace omero
{

namespace model
{

class Annotation;
bool operator==(const Annotation&, const Annotation&);
bool operator<(const Annotation&, const Annotation&);

class Details;
bool operator==(const Details&, const Details&);
bool operator<(const Details&, const Details&);

class AnnotationAnnotationLink;
bool operator==(const AnnotationAnnotationLink&, const AnnotationAnnotationLink&);
bool operator<(const AnnotationAnnotationLink&, const AnnotationAnnotationLink&);

}

}

namespace IceInternal
{

::Ice::Object* upCast(::omero::model::Annotation*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Annotation*);

::Ice::Object* upCast(::omero::model::Details*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Details*);

::Ice::Object* upCast(::omero::model::AnnotationAnnotationLink*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::AnnotationAnnotationLink*);

}

namespace omero
{

namespace model
{

typedef ::IceInternal::Handle< ::omero::model::Annotation> AnnotationPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Annotation> AnnotationPrx;

void __read(::IceInternal::BasicStream*, AnnotationPrx&);
void __patch__AnnotationPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::Details> DetailsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Details> DetailsPrx;

void __read(::IceInternal::BasicStream*, DetailsPrx&);
void __patch__DetailsPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::AnnotationAnnotationLink> AnnotationAnnotationLinkPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::AnnotationAnnotationLink> AnnotationAnnotationLinkPrx;

void __read(::IceInternal::BasicStream*, AnnotationAnnotationLinkPrx&);
void __patch__AnnotationAnnotationLinkPtr(void*, ::Ice::ObjectPtr&);

}

}

namespace omero
{

namespace model
{

class Callback_AnnotationAnnotationLink_getVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AnnotationAnnotationLink_getVersion_Base> Callback_AnnotationAnnotationLink_getVersionPtr;

class Callback_AnnotationAnnotationLink_setVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AnnotationAnnotationLink_setVersion_Base> Callback_AnnotationAnnotationLink_setVersionPtr;

class Callback_AnnotationAnnotationLink_getParent_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AnnotationAnnotationLink_getParent_Base> Callback_AnnotationAnnotationLink_getParentPtr;

class Callback_AnnotationAnnotationLink_setParent_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AnnotationAnnotationLink_setParent_Base> Callback_AnnotationAnnotationLink_setParentPtr;

class Callback_AnnotationAnnotationLink_getChild_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AnnotationAnnotationLink_getChild_Base> Callback_AnnotationAnnotationLink_getChildPtr;

class Callback_AnnotationAnnotationLink_setChild_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AnnotationAnnotationLink_setChild_Base> Callback_AnnotationAnnotationLink_setChildPtr;

class Callback_AnnotationAnnotationLink_link_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AnnotationAnnotationLink_link_Base> Callback_AnnotationAnnotationLink_linkPtr;

}

}

namespace IceProxy
{

namespace omero
{

namespace model
{

class AnnotationAnnotationLink : virtual public ::IceProxy::omero::model::IObject
{
public:

    ::omero::RIntPtr getVersion()
    {
        return getVersion(0);
    }
    ::omero::RIntPtr getVersion(const ::Ice::Context& __ctx)
    {
        return getVersion(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getVersion()
    {
        return begin_getVersion(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx)
    {
        return begin_getVersion(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::omero::model::Callback_AnnotationAnnotationLink_getVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx, const ::omero::model::Callback_AnnotationAnnotationLink_getVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(&__ctx, __del, __cookie);
    }

    ::omero::RIntPtr end_getVersion(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RIntPtr getVersion(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setVersion(const ::omero::RIntPtr& theVersion)
    {
        setVersion(theVersion, 0);
    }
    void setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx)
    {
        setVersion(theVersion, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion)
    {
        return begin_setVersion(theVersion, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx)
    {
        return begin_setVersion(theVersion, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::omero::model::Callback_AnnotationAnnotationLink_setVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::omero::model::Callback_AnnotationAnnotationLink_setVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, &__ctx, __del, __cookie);
    }

    void end_setVersion(const ::Ice::AsyncResultPtr&);
    
private:

    void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::AnnotationPtr getParent()
    {
        return getParent(0);
    }
    ::omero::model::AnnotationPtr getParent(const ::Ice::Context& __ctx)
    {
        return getParent(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getParent()
    {
        return begin_getParent(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getParent(const ::Ice::Context& __ctx)
    {
        return begin_getParent(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getParent(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getParent(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getParent(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getParent(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getParent(const ::omero::model::Callback_AnnotationAnnotationLink_getParentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getParent(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getParent(const ::Ice::Context& __ctx, const ::omero::model::Callback_AnnotationAnnotationLink_getParentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getParent(&__ctx, __del, __cookie);
    }

    ::omero::model::AnnotationPtr end_getParent(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::AnnotationPtr getParent(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getParent(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setParent(const ::omero::model::AnnotationPtr& theParent)
    {
        setParent(theParent, 0);
    }
    void setParent(const ::omero::model::AnnotationPtr& theParent, const ::Ice::Context& __ctx)
    {
        setParent(theParent, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setParent(const ::omero::model::AnnotationPtr& theParent)
    {
        return begin_setParent(theParent, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setParent(const ::omero::model::AnnotationPtr& theParent, const ::Ice::Context& __ctx)
    {
        return begin_setParent(theParent, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setParent(const ::omero::model::AnnotationPtr& theParent, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setParent(theParent, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setParent(const ::omero::model::AnnotationPtr& theParent, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setParent(theParent, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setParent(const ::omero::model::AnnotationPtr& theParent, const ::omero::model::Callback_AnnotationAnnotationLink_setParentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setParent(theParent, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setParent(const ::omero::model::AnnotationPtr& theParent, const ::Ice::Context& __ctx, const ::omero::model::Callback_AnnotationAnnotationLink_setParentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setParent(theParent, &__ctx, __del, __cookie);
    }

    void end_setParent(const ::Ice::AsyncResultPtr&);
    
private:

    void setParent(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setParent(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::AnnotationPtr getChild()
    {
        return getChild(0);
    }
    ::omero::model::AnnotationPtr getChild(const ::Ice::Context& __ctx)
    {
        return getChild(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getChild()
    {
        return begin_getChild(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getChild(const ::Ice::Context& __ctx)
    {
        return begin_getChild(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getChild(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getChild(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getChild(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getChild(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getChild(const ::omero::model::Callback_AnnotationAnnotationLink_getChildPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getChild(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getChild(const ::Ice::Context& __ctx, const ::omero::model::Callback_AnnotationAnnotationLink_getChildPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getChild(&__ctx, __del, __cookie);
    }

    ::omero::model::AnnotationPtr end_getChild(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::AnnotationPtr getChild(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getChild(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setChild(const ::omero::model::AnnotationPtr& theChild)
    {
        setChild(theChild, 0);
    }
    void setChild(const ::omero::model::AnnotationPtr& theChild, const ::Ice::Context& __ctx)
    {
        setChild(theChild, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setChild(const ::omero::model::AnnotationPtr& theChild)
    {
        return begin_setChild(theChild, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setChild(const ::omero::model::AnnotationPtr& theChild, const ::Ice::Context& __ctx)
    {
        return begin_setChild(theChild, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setChild(const ::omero::model::AnnotationPtr& theChild, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setChild(theChild, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setChild(const ::omero::model::AnnotationPtr& theChild, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setChild(theChild, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setChild(const ::omero::model::AnnotationPtr& theChild, const ::omero::model::Callback_AnnotationAnnotationLink_setChildPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setChild(theChild, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setChild(const ::omero::model::AnnotationPtr& theChild, const ::Ice::Context& __ctx, const ::omero::model::Callback_AnnotationAnnotationLink_setChildPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setChild(theChild, &__ctx, __del, __cookie);
    }

    void end_setChild(const ::Ice::AsyncResultPtr&);
    
private:

    void setChild(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setChild(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void link(const ::omero::model::AnnotationPtr& theParent, const ::omero::model::AnnotationPtr& theChild)
    {
        link(theParent, theChild, 0);
    }
    void link(const ::omero::model::AnnotationPtr& theParent, const ::omero::model::AnnotationPtr& theChild, const ::Ice::Context& __ctx)
    {
        link(theParent, theChild, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_link(const ::omero::model::AnnotationPtr& theParent, const ::omero::model::AnnotationPtr& theChild)
    {
        return begin_link(theParent, theChild, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_link(const ::omero::model::AnnotationPtr& theParent, const ::omero::model::AnnotationPtr& theChild, const ::Ice::Context& __ctx)
    {
        return begin_link(theParent, theChild, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_link(const ::omero::model::AnnotationPtr& theParent, const ::omero::model::AnnotationPtr& theChild, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_link(theParent, theChild, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_link(const ::omero::model::AnnotationPtr& theParent, const ::omero::model::AnnotationPtr& theChild, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_link(theParent, theChild, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_link(const ::omero::model::AnnotationPtr& theParent, const ::omero::model::AnnotationPtr& theChild, const ::omero::model::Callback_AnnotationAnnotationLink_linkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_link(theParent, theChild, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_link(const ::omero::model::AnnotationPtr& theParent, const ::omero::model::AnnotationPtr& theChild, const ::Ice::Context& __ctx, const ::omero::model::Callback_AnnotationAnnotationLink_linkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_link(theParent, theChild, &__ctx, __del, __cookie);
    }

    void end_link(const ::Ice::AsyncResultPtr&);
    
private:

    void link(const ::omero::model::AnnotationPtr&, const ::omero::model::AnnotationPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_link(const ::omero::model::AnnotationPtr&, const ::omero::model::AnnotationPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<AnnotationAnnotationLink> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AnnotationAnnotationLink*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<AnnotationAnnotationLink*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AnnotationAnnotationLink> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AnnotationAnnotationLink*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<AnnotationAnnotationLink*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AnnotationAnnotationLink> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AnnotationAnnotationLink*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<AnnotationAnnotationLink*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AnnotationAnnotationLink> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AnnotationAnnotationLink*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<AnnotationAnnotationLink*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AnnotationAnnotationLink> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AnnotationAnnotationLink*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<AnnotationAnnotationLink*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AnnotationAnnotationLink> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AnnotationAnnotationLink*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<AnnotationAnnotationLink*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AnnotationAnnotationLink> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AnnotationAnnotationLink*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<AnnotationAnnotationLink*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AnnotationAnnotationLink> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AnnotationAnnotationLink*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<AnnotationAnnotationLink*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AnnotationAnnotationLink> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AnnotationAnnotationLink*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<AnnotationAnnotationLink*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AnnotationAnnotationLink> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AnnotationAnnotationLink*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<AnnotationAnnotationLink*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AnnotationAnnotationLink> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AnnotationAnnotationLink*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<AnnotationAnnotationLink*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AnnotationAnnotationLink> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AnnotationAnnotationLink*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<AnnotationAnnotationLink*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AnnotationAnnotationLink> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AnnotationAnnotationLink*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<AnnotationAnnotationLink*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AnnotationAnnotationLink> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AnnotationAnnotationLink*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<AnnotationAnnotationLink*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AnnotationAnnotationLink> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AnnotationAnnotationLink*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<AnnotationAnnotationLink*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AnnotationAnnotationLink> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AnnotationAnnotationLink*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<AnnotationAnnotationLink*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AnnotationAnnotationLink> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AnnotationAnnotationLink*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<AnnotationAnnotationLink*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AnnotationAnnotationLink> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AnnotationAnnotationLink*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<AnnotationAnnotationLink*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AnnotationAnnotationLink> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AnnotationAnnotationLink*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<AnnotationAnnotationLink*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

namespace IceDelegate
{

namespace omero
{

namespace model
{

class AnnotationAnnotationLink : virtual public ::IceDelegate::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*) = 0;

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::model::AnnotationPtr getParent(const ::Ice::Context*) = 0;

    virtual void setParent(const ::omero::model::AnnotationPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::model::AnnotationPtr getChild(const ::Ice::Context*) = 0;

    virtual void setChild(const ::omero::model::AnnotationPtr&, const ::Ice::Context*) = 0;

    virtual void link(const ::omero::model::AnnotationPtr&, const ::omero::model::AnnotationPtr&, const ::Ice::Context*) = 0;
};

}

}

}

namespace IceDelegateM
{

namespace omero
{

namespace model
{

class AnnotationAnnotationLink : virtual public ::IceDelegate::omero::model::AnnotationAnnotationLink,
                                 virtual public ::IceDelegateM::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::model::AnnotationPtr getParent(const ::Ice::Context*);

    virtual void setParent(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);

    virtual ::omero::model::AnnotationPtr getChild(const ::Ice::Context*);

    virtual void setChild(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);

    virtual void link(const ::omero::model::AnnotationPtr&, const ::omero::model::AnnotationPtr&, const ::Ice::Context*);
};

}

}

}

namespace IceDelegateD
{

namespace omero
{

namespace model
{

class AnnotationAnnotationLink : virtual public ::IceDelegate::omero::model::AnnotationAnnotationLink,
                                 virtual public ::IceDelegateD::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::model::AnnotationPtr getParent(const ::Ice::Context*);

    virtual void setParent(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);

    virtual ::omero::model::AnnotationPtr getChild(const ::Ice::Context*);

    virtual void setChild(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);

    virtual void link(const ::omero::model::AnnotationPtr&, const ::omero::model::AnnotationPtr&, const ::Ice::Context*);
};

}

}

}

namespace omero
{

namespace model
{

class AnnotationAnnotationLink : public ::omero::model::IObject
{
public:

    typedef AnnotationAnnotationLinkPrx ProxyType;
    typedef AnnotationAnnotationLinkPtr PointerType;
    
    AnnotationAnnotationLink() {}
    AnnotationAnnotationLink(const ::omero::RLongPtr&, const ::omero::model::DetailsPtr&, bool, const ::omero::RIntPtr&, const ::omero::model::AnnotationPtr&, const ::omero::model::AnnotationPtr&);
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    virtual ::omero::RIntPtr getVersion(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::AnnotationPtr getParent(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getParent(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setParent(const ::omero::model::AnnotationPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setParent(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::AnnotationPtr getChild(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getChild(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setChild(const ::omero::model::AnnotationPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setChild(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void link(const ::omero::model::AnnotationPtr&, const ::omero::model::AnnotationPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___link(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif

protected:

    ::omero::RIntPtr version;

    ::omero::model::AnnotationPtr parent;

    ::omero::model::AnnotationPtr child;
};

inline bool operator==(const AnnotationAnnotationLink& l, const AnnotationAnnotationLink& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const AnnotationAnnotationLink& l, const AnnotationAnnotationLink& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

}

namespace omero
{

namespace model
{

template<class T>
class CallbackNC_AnnotationAnnotationLink_getVersion : public Callback_AnnotationAnnotationLink_getVersion_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RIntPtr&);

    CallbackNC_AnnotationAnnotationLink_getVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::AnnotationAnnotationLinkPrx __proxy = ::omero::model::AnnotationAnnotationLinkPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_AnnotationAnnotationLink_getVersionPtr
newCallback_AnnotationAnnotationLink_getVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AnnotationAnnotationLink_getVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AnnotationAnnotationLink_getVersionPtr
newCallback_AnnotationAnnotationLink_getVersion(T* instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AnnotationAnnotationLink_getVersion<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AnnotationAnnotationLink_getVersion : public Callback_AnnotationAnnotationLink_getVersion_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RIntPtr&, const CT&);

    Callback_AnnotationAnnotationLink_getVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::AnnotationAnnotationLinkPrx __proxy = ::omero::model::AnnotationAnnotationLinkPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AnnotationAnnotationLink_getVersionPtr
newCallback_AnnotationAnnotationLink_getVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AnnotationAnnotationLink_getVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AnnotationAnnotationLink_getVersionPtr
newCallback_AnnotationAnnotationLink_getVersion(T* instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AnnotationAnnotationLink_getVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AnnotationAnnotationLink_setVersion : public Callback_AnnotationAnnotationLink_setVersion_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AnnotationAnnotationLink_setVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_AnnotationAnnotationLink_setVersionPtr
newCallback_AnnotationAnnotationLink_setVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AnnotationAnnotationLink_setVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AnnotationAnnotationLink_setVersionPtr
newCallback_AnnotationAnnotationLink_setVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AnnotationAnnotationLink_setVersion<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_AnnotationAnnotationLink_setVersionPtr
newCallback_AnnotationAnnotationLink_setVersion(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AnnotationAnnotationLink_setVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AnnotationAnnotationLink_setVersionPtr
newCallback_AnnotationAnnotationLink_setVersion(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AnnotationAnnotationLink_setVersion<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_AnnotationAnnotationLink_setVersion : public Callback_AnnotationAnnotationLink_setVersion_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AnnotationAnnotationLink_setVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_AnnotationAnnotationLink_setVersionPtr
newCallback_AnnotationAnnotationLink_setVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AnnotationAnnotationLink_setVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AnnotationAnnotationLink_setVersionPtr
newCallback_AnnotationAnnotationLink_setVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AnnotationAnnotationLink_setVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_AnnotationAnnotationLink_setVersionPtr
newCallback_AnnotationAnnotationLink_setVersion(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AnnotationAnnotationLink_setVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AnnotationAnnotationLink_setVersionPtr
newCallback_AnnotationAnnotationLink_setVersion(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AnnotationAnnotationLink_setVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_AnnotationAnnotationLink_getParent : public Callback_AnnotationAnnotationLink_getParent_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::AnnotationPtr&);

    CallbackNC_AnnotationAnnotationLink_getParent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::AnnotationAnnotationLinkPrx __proxy = ::omero::model::AnnotationAnnotationLinkPrx::uncheckedCast(__result->getProxy());
        ::omero::model::AnnotationPtr __ret;
        try
        {
            __ret = __proxy->end_getParent(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_AnnotationAnnotationLink_getParentPtr
newCallback_AnnotationAnnotationLink_getParent(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::AnnotationPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AnnotationAnnotationLink_getParent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AnnotationAnnotationLink_getParentPtr
newCallback_AnnotationAnnotationLink_getParent(T* instance, void (T::*cb)(const ::omero::model::AnnotationPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AnnotationAnnotationLink_getParent<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AnnotationAnnotationLink_getParent : public Callback_AnnotationAnnotationLink_getParent_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::AnnotationPtr&, const CT&);

    Callback_AnnotationAnnotationLink_getParent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::AnnotationAnnotationLinkPrx __proxy = ::omero::model::AnnotationAnnotationLinkPrx::uncheckedCast(__result->getProxy());
        ::omero::model::AnnotationPtr __ret;
        try
        {
            __ret = __proxy->end_getParent(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AnnotationAnnotationLink_getParentPtr
newCallback_AnnotationAnnotationLink_getParent(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::AnnotationPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AnnotationAnnotationLink_getParent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AnnotationAnnotationLink_getParentPtr
newCallback_AnnotationAnnotationLink_getParent(T* instance, void (T::*cb)(const ::omero::model::AnnotationPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AnnotationAnnotationLink_getParent<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AnnotationAnnotationLink_setParent : public Callback_AnnotationAnnotationLink_setParent_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AnnotationAnnotationLink_setParent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_AnnotationAnnotationLink_setParentPtr
newCallback_AnnotationAnnotationLink_setParent(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AnnotationAnnotationLink_setParent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AnnotationAnnotationLink_setParentPtr
newCallback_AnnotationAnnotationLink_setParent(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AnnotationAnnotationLink_setParent<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_AnnotationAnnotationLink_setParentPtr
newCallback_AnnotationAnnotationLink_setParent(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AnnotationAnnotationLink_setParent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AnnotationAnnotationLink_setParentPtr
newCallback_AnnotationAnnotationLink_setParent(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AnnotationAnnotationLink_setParent<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_AnnotationAnnotationLink_setParent : public Callback_AnnotationAnnotationLink_setParent_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AnnotationAnnotationLink_setParent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_AnnotationAnnotationLink_setParentPtr
newCallback_AnnotationAnnotationLink_setParent(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AnnotationAnnotationLink_setParent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AnnotationAnnotationLink_setParentPtr
newCallback_AnnotationAnnotationLink_setParent(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AnnotationAnnotationLink_setParent<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_AnnotationAnnotationLink_setParentPtr
newCallback_AnnotationAnnotationLink_setParent(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AnnotationAnnotationLink_setParent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AnnotationAnnotationLink_setParentPtr
newCallback_AnnotationAnnotationLink_setParent(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AnnotationAnnotationLink_setParent<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_AnnotationAnnotationLink_getChild : public Callback_AnnotationAnnotationLink_getChild_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::AnnotationPtr&);

    CallbackNC_AnnotationAnnotationLink_getChild(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::AnnotationAnnotationLinkPrx __proxy = ::omero::model::AnnotationAnnotationLinkPrx::uncheckedCast(__result->getProxy());
        ::omero::model::AnnotationPtr __ret;
        try
        {
            __ret = __proxy->end_getChild(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_AnnotationAnnotationLink_getChildPtr
newCallback_AnnotationAnnotationLink_getChild(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::AnnotationPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AnnotationAnnotationLink_getChild<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AnnotationAnnotationLink_getChildPtr
newCallback_AnnotationAnnotationLink_getChild(T* instance, void (T::*cb)(const ::omero::model::AnnotationPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AnnotationAnnotationLink_getChild<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AnnotationAnnotationLink_getChild : public Callback_AnnotationAnnotationLink_getChild_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::AnnotationPtr&, const CT&);

    Callback_AnnotationAnnotationLink_getChild(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::AnnotationAnnotationLinkPrx __proxy = ::omero::model::AnnotationAnnotationLinkPrx::uncheckedCast(__result->getProxy());
        ::omero::model::AnnotationPtr __ret;
        try
        {
            __ret = __proxy->end_getChild(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AnnotationAnnotationLink_getChildPtr
newCallback_AnnotationAnnotationLink_getChild(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::AnnotationPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AnnotationAnnotationLink_getChild<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AnnotationAnnotationLink_getChildPtr
newCallback_AnnotationAnnotationLink_getChild(T* instance, void (T::*cb)(const ::omero::model::AnnotationPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AnnotationAnnotationLink_getChild<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AnnotationAnnotationLink_setChild : public Callback_AnnotationAnnotationLink_setChild_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AnnotationAnnotationLink_setChild(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_AnnotationAnnotationLink_setChildPtr
newCallback_AnnotationAnnotationLink_setChild(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AnnotationAnnotationLink_setChild<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AnnotationAnnotationLink_setChildPtr
newCallback_AnnotationAnnotationLink_setChild(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AnnotationAnnotationLink_setChild<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_AnnotationAnnotationLink_setChildPtr
newCallback_AnnotationAnnotationLink_setChild(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AnnotationAnnotationLink_setChild<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AnnotationAnnotationLink_setChildPtr
newCallback_AnnotationAnnotationLink_setChild(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AnnotationAnnotationLink_setChild<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_AnnotationAnnotationLink_setChild : public Callback_AnnotationAnnotationLink_setChild_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AnnotationAnnotationLink_setChild(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_AnnotationAnnotationLink_setChildPtr
newCallback_AnnotationAnnotationLink_setChild(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AnnotationAnnotationLink_setChild<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AnnotationAnnotationLink_setChildPtr
newCallback_AnnotationAnnotationLink_setChild(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AnnotationAnnotationLink_setChild<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_AnnotationAnnotationLink_setChildPtr
newCallback_AnnotationAnnotationLink_setChild(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AnnotationAnnotationLink_setChild<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AnnotationAnnotationLink_setChildPtr
newCallback_AnnotationAnnotationLink_setChild(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AnnotationAnnotationLink_setChild<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_AnnotationAnnotationLink_link : public Callback_AnnotationAnnotationLink_link_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AnnotationAnnotationLink_link(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_AnnotationAnnotationLink_linkPtr
newCallback_AnnotationAnnotationLink_link(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AnnotationAnnotationLink_link<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AnnotationAnnotationLink_linkPtr
newCallback_AnnotationAnnotationLink_link(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AnnotationAnnotationLink_link<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_AnnotationAnnotationLink_linkPtr
newCallback_AnnotationAnnotationLink_link(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AnnotationAnnotationLink_link<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AnnotationAnnotationLink_linkPtr
newCallback_AnnotationAnnotationLink_link(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AnnotationAnnotationLink_link<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_AnnotationAnnotationLink_link : public Callback_AnnotationAnnotationLink_link_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AnnotationAnnotationLink_link(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_AnnotationAnnotationLink_linkPtr
newCallback_AnnotationAnnotationLink_link(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AnnotationAnnotationLink_link<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AnnotationAnnotationLink_linkPtr
newCallback_AnnotationAnnotationLink_link(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AnnotationAnnotationLink_link<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_AnnotationAnnotationLink_linkPtr
newCallback_AnnotationAnnotationLink_link(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AnnotationAnnotationLink_link<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AnnotationAnnotationLink_linkPtr
newCallback_AnnotationAnnotationLink_link(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AnnotationAnnotationLink_link<T, CT>(instance, 0, excb, sentcb);
}

}

}

#endif
