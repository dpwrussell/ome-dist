// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `FilesetVersionInfo.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_FilesetVersionInfo_h__
#define __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_FilesetVersionInfo_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <omero/model/IObject.h>
#include <omero/RTypes.h>
#include <omero/System.h>
#include <omero/Collections.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace omero
{

namespace model
{

class Details;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Details>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Details*);

class FilesetVersionInfo;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::FilesetVersionInfo>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::FilesetVersionInfo*);

}

}

}

namespace omero
{

namespace model
{

class Details;
bool operator==(const Details&, const Details&);
bool operator<(const Details&, const Details&);
::Ice::Object* upCast(::omero::model::Details*);
typedef ::IceInternal::Handle< ::omero::model::Details> DetailsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Details> DetailsPrx;
void __patch(DetailsPtr&, const ::Ice::ObjectPtr&);

class FilesetVersionInfo;
bool operator==(const FilesetVersionInfo&, const FilesetVersionInfo&);
bool operator<(const FilesetVersionInfo&, const FilesetVersionInfo&);
::Ice::Object* upCast(::omero::model::FilesetVersionInfo*);
typedef ::IceInternal::Handle< ::omero::model::FilesetVersionInfo> FilesetVersionInfoPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::FilesetVersionInfo> FilesetVersionInfoPrx;
void __patch(FilesetVersionInfoPtr&, const ::Ice::ObjectPtr&);

}

}

namespace omero
{

namespace model
{

class Callback_FilesetVersionInfo_getVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilesetVersionInfo_getVersion_Base> Callback_FilesetVersionInfo_getVersionPtr;

class Callback_FilesetVersionInfo_setVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilesetVersionInfo_setVersion_Base> Callback_FilesetVersionInfo_setVersionPtr;

class Callback_FilesetVersionInfo_getBioformatsReader_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilesetVersionInfo_getBioformatsReader_Base> Callback_FilesetVersionInfo_getBioformatsReaderPtr;

class Callback_FilesetVersionInfo_setBioformatsReader_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilesetVersionInfo_setBioformatsReader_Base> Callback_FilesetVersionInfo_setBioformatsReaderPtr;

class Callback_FilesetVersionInfo_getBioformatsVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilesetVersionInfo_getBioformatsVersion_Base> Callback_FilesetVersionInfo_getBioformatsVersionPtr;

class Callback_FilesetVersionInfo_setBioformatsVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilesetVersionInfo_setBioformatsVersion_Base> Callback_FilesetVersionInfo_setBioformatsVersionPtr;

class Callback_FilesetVersionInfo_getOmeroVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilesetVersionInfo_getOmeroVersion_Base> Callback_FilesetVersionInfo_getOmeroVersionPtr;

class Callback_FilesetVersionInfo_setOmeroVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilesetVersionInfo_setOmeroVersion_Base> Callback_FilesetVersionInfo_setOmeroVersionPtr;

class Callback_FilesetVersionInfo_getOsArchitecture_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilesetVersionInfo_getOsArchitecture_Base> Callback_FilesetVersionInfo_getOsArchitecturePtr;

class Callback_FilesetVersionInfo_setOsArchitecture_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilesetVersionInfo_setOsArchitecture_Base> Callback_FilesetVersionInfo_setOsArchitecturePtr;

class Callback_FilesetVersionInfo_getOsName_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilesetVersionInfo_getOsName_Base> Callback_FilesetVersionInfo_getOsNamePtr;

class Callback_FilesetVersionInfo_setOsName_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilesetVersionInfo_setOsName_Base> Callback_FilesetVersionInfo_setOsNamePtr;

class Callback_FilesetVersionInfo_getOsVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilesetVersionInfo_getOsVersion_Base> Callback_FilesetVersionInfo_getOsVersionPtr;

class Callback_FilesetVersionInfo_setOsVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilesetVersionInfo_setOsVersion_Base> Callback_FilesetVersionInfo_setOsVersionPtr;

class Callback_FilesetVersionInfo_getLocale_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilesetVersionInfo_getLocale_Base> Callback_FilesetVersionInfo_getLocalePtr;

class Callback_FilesetVersionInfo_setLocale_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilesetVersionInfo_setLocale_Base> Callback_FilesetVersionInfo_setLocalePtr;

}

}

namespace IceProxy
{

namespace omero
{

namespace model
{

class FilesetVersionInfo : virtual public ::IceProxy::omero::model::IObject
{
public:

    ::omero::RIntPtr getVersion()
    {
        return getVersion(0);
    }
    ::omero::RIntPtr getVersion(const ::Ice::Context& __ctx)
    {
        return getVersion(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getVersion(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getVersion(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getVersion(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getVersion(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getVersion(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RIntPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::FilesetVersionInfoPrx __proxy = ::omero::model::FilesetVersionInfoPrx::uncheckedCast(__result->getProxy());
                ::omero::RIntPtr __ret;
                try
                {
                    __ret = __proxy->end_getVersion(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RIntPtr&)> _response;
        };
        return begin_getVersion(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getVersion()
    {
        return begin_getVersion(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx)
    {
        return begin_getVersion(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::omero::model::Callback_FilesetVersionInfo_getVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx, const ::omero::model::Callback_FilesetVersionInfo_getVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(&__ctx, __del, __cookie);
    }

    ::omero::RIntPtr end_getVersion(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RIntPtr getVersion(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setVersion(const ::omero::RIntPtr& theVersion)
    {
        setVersion(theVersion, 0);
    }
    void setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx)
    {
        setVersion(theVersion, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setVersion(const ::omero::RIntPtr& theVersion, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setVersion(theVersion, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setVersion(const ::omero::RIntPtr& theVersion, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setVersion(theVersion, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setVersion(theVersion, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setVersion(theVersion, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion)
    {
        return begin_setVersion(theVersion, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx)
    {
        return begin_setVersion(theVersion, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::omero::model::Callback_FilesetVersionInfo_setVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::omero::model::Callback_FilesetVersionInfo_setVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, &__ctx, __del, __cookie);
    }

    void end_setVersion(const ::Ice::AsyncResultPtr&);
    
private:

    void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getBioformatsReader()
    {
        return getBioformatsReader(0);
    }
    ::omero::RStringPtr getBioformatsReader(const ::Ice::Context& __ctx)
    {
        return getBioformatsReader(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getBioformatsReader(const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getBioformatsReader(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getBioformatsReader(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getBioformatsReader(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getBioformatsReader(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getBioformatsReader(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getBioformatsReader(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getBioformatsReader(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getBioformatsReader(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RStringPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::FilesetVersionInfoPrx __proxy = ::omero::model::FilesetVersionInfoPrx::uncheckedCast(__result->getProxy());
                ::omero::RStringPtr __ret;
                try
                {
                    __ret = __proxy->end_getBioformatsReader(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RStringPtr&)> _response;
        };
        return begin_getBioformatsReader(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getBioformatsReader()
    {
        return begin_getBioformatsReader(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getBioformatsReader(const ::Ice::Context& __ctx)
    {
        return begin_getBioformatsReader(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getBioformatsReader(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBioformatsReader(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBioformatsReader(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBioformatsReader(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBioformatsReader(const ::omero::model::Callback_FilesetVersionInfo_getBioformatsReaderPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBioformatsReader(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBioformatsReader(const ::Ice::Context& __ctx, const ::omero::model::Callback_FilesetVersionInfo_getBioformatsReaderPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBioformatsReader(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getBioformatsReader(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getBioformatsReader(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getBioformatsReader(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setBioformatsReader(const ::omero::RStringPtr& theBioformatsReader)
    {
        setBioformatsReader(theBioformatsReader, 0);
    }
    void setBioformatsReader(const ::omero::RStringPtr& theBioformatsReader, const ::Ice::Context& __ctx)
    {
        setBioformatsReader(theBioformatsReader, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setBioformatsReader(const ::omero::RStringPtr& theBioformatsReader, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setBioformatsReader(theBioformatsReader, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setBioformatsReader(const ::omero::RStringPtr& theBioformatsReader, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setBioformatsReader(theBioformatsReader, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setBioformatsReader(const ::omero::RStringPtr& theBioformatsReader, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setBioformatsReader(theBioformatsReader, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setBioformatsReader(const ::omero::RStringPtr& theBioformatsReader, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setBioformatsReader(theBioformatsReader, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setBioformatsReader(const ::omero::RStringPtr& theBioformatsReader)
    {
        return begin_setBioformatsReader(theBioformatsReader, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setBioformatsReader(const ::omero::RStringPtr& theBioformatsReader, const ::Ice::Context& __ctx)
    {
        return begin_setBioformatsReader(theBioformatsReader, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setBioformatsReader(const ::omero::RStringPtr& theBioformatsReader, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setBioformatsReader(theBioformatsReader, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setBioformatsReader(const ::omero::RStringPtr& theBioformatsReader, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setBioformatsReader(theBioformatsReader, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setBioformatsReader(const ::omero::RStringPtr& theBioformatsReader, const ::omero::model::Callback_FilesetVersionInfo_setBioformatsReaderPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setBioformatsReader(theBioformatsReader, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setBioformatsReader(const ::omero::RStringPtr& theBioformatsReader, const ::Ice::Context& __ctx, const ::omero::model::Callback_FilesetVersionInfo_setBioformatsReaderPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setBioformatsReader(theBioformatsReader, &__ctx, __del, __cookie);
    }

    void end_setBioformatsReader(const ::Ice::AsyncResultPtr&);
    
private:

    void setBioformatsReader(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setBioformatsReader(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getBioformatsVersion()
    {
        return getBioformatsVersion(0);
    }
    ::omero::RStringPtr getBioformatsVersion(const ::Ice::Context& __ctx)
    {
        return getBioformatsVersion(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getBioformatsVersion(const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getBioformatsVersion(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getBioformatsVersion(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getBioformatsVersion(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getBioformatsVersion(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getBioformatsVersion(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getBioformatsVersion(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getBioformatsVersion(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getBioformatsVersion(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RStringPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::FilesetVersionInfoPrx __proxy = ::omero::model::FilesetVersionInfoPrx::uncheckedCast(__result->getProxy());
                ::omero::RStringPtr __ret;
                try
                {
                    __ret = __proxy->end_getBioformatsVersion(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RStringPtr&)> _response;
        };
        return begin_getBioformatsVersion(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getBioformatsVersion()
    {
        return begin_getBioformatsVersion(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getBioformatsVersion(const ::Ice::Context& __ctx)
    {
        return begin_getBioformatsVersion(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getBioformatsVersion(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBioformatsVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBioformatsVersion(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBioformatsVersion(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBioformatsVersion(const ::omero::model::Callback_FilesetVersionInfo_getBioformatsVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBioformatsVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBioformatsVersion(const ::Ice::Context& __ctx, const ::omero::model::Callback_FilesetVersionInfo_getBioformatsVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBioformatsVersion(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getBioformatsVersion(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getBioformatsVersion(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getBioformatsVersion(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setBioformatsVersion(const ::omero::RStringPtr& theBioformatsVersion)
    {
        setBioformatsVersion(theBioformatsVersion, 0);
    }
    void setBioformatsVersion(const ::omero::RStringPtr& theBioformatsVersion, const ::Ice::Context& __ctx)
    {
        setBioformatsVersion(theBioformatsVersion, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setBioformatsVersion(const ::omero::RStringPtr& theBioformatsVersion, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setBioformatsVersion(theBioformatsVersion, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setBioformatsVersion(const ::omero::RStringPtr& theBioformatsVersion, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setBioformatsVersion(theBioformatsVersion, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setBioformatsVersion(const ::omero::RStringPtr& theBioformatsVersion, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setBioformatsVersion(theBioformatsVersion, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setBioformatsVersion(const ::omero::RStringPtr& theBioformatsVersion, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setBioformatsVersion(theBioformatsVersion, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setBioformatsVersion(const ::omero::RStringPtr& theBioformatsVersion)
    {
        return begin_setBioformatsVersion(theBioformatsVersion, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setBioformatsVersion(const ::omero::RStringPtr& theBioformatsVersion, const ::Ice::Context& __ctx)
    {
        return begin_setBioformatsVersion(theBioformatsVersion, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setBioformatsVersion(const ::omero::RStringPtr& theBioformatsVersion, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setBioformatsVersion(theBioformatsVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setBioformatsVersion(const ::omero::RStringPtr& theBioformatsVersion, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setBioformatsVersion(theBioformatsVersion, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setBioformatsVersion(const ::omero::RStringPtr& theBioformatsVersion, const ::omero::model::Callback_FilesetVersionInfo_setBioformatsVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setBioformatsVersion(theBioformatsVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setBioformatsVersion(const ::omero::RStringPtr& theBioformatsVersion, const ::Ice::Context& __ctx, const ::omero::model::Callback_FilesetVersionInfo_setBioformatsVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setBioformatsVersion(theBioformatsVersion, &__ctx, __del, __cookie);
    }

    void end_setBioformatsVersion(const ::Ice::AsyncResultPtr&);
    
private:

    void setBioformatsVersion(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setBioformatsVersion(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getOmeroVersion()
    {
        return getOmeroVersion(0);
    }
    ::omero::RStringPtr getOmeroVersion(const ::Ice::Context& __ctx)
    {
        return getOmeroVersion(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getOmeroVersion(const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getOmeroVersion(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getOmeroVersion(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getOmeroVersion(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getOmeroVersion(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getOmeroVersion(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getOmeroVersion(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getOmeroVersion(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getOmeroVersion(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RStringPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::FilesetVersionInfoPrx __proxy = ::omero::model::FilesetVersionInfoPrx::uncheckedCast(__result->getProxy());
                ::omero::RStringPtr __ret;
                try
                {
                    __ret = __proxy->end_getOmeroVersion(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RStringPtr&)> _response;
        };
        return begin_getOmeroVersion(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getOmeroVersion()
    {
        return begin_getOmeroVersion(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getOmeroVersion(const ::Ice::Context& __ctx)
    {
        return begin_getOmeroVersion(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getOmeroVersion(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getOmeroVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getOmeroVersion(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getOmeroVersion(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getOmeroVersion(const ::omero::model::Callback_FilesetVersionInfo_getOmeroVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getOmeroVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getOmeroVersion(const ::Ice::Context& __ctx, const ::omero::model::Callback_FilesetVersionInfo_getOmeroVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getOmeroVersion(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getOmeroVersion(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getOmeroVersion(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getOmeroVersion(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setOmeroVersion(const ::omero::RStringPtr& theOmeroVersion)
    {
        setOmeroVersion(theOmeroVersion, 0);
    }
    void setOmeroVersion(const ::omero::RStringPtr& theOmeroVersion, const ::Ice::Context& __ctx)
    {
        setOmeroVersion(theOmeroVersion, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setOmeroVersion(const ::omero::RStringPtr& theOmeroVersion, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setOmeroVersion(theOmeroVersion, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setOmeroVersion(const ::omero::RStringPtr& theOmeroVersion, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setOmeroVersion(theOmeroVersion, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setOmeroVersion(const ::omero::RStringPtr& theOmeroVersion, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setOmeroVersion(theOmeroVersion, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setOmeroVersion(const ::omero::RStringPtr& theOmeroVersion, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setOmeroVersion(theOmeroVersion, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setOmeroVersion(const ::omero::RStringPtr& theOmeroVersion)
    {
        return begin_setOmeroVersion(theOmeroVersion, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setOmeroVersion(const ::omero::RStringPtr& theOmeroVersion, const ::Ice::Context& __ctx)
    {
        return begin_setOmeroVersion(theOmeroVersion, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setOmeroVersion(const ::omero::RStringPtr& theOmeroVersion, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setOmeroVersion(theOmeroVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setOmeroVersion(const ::omero::RStringPtr& theOmeroVersion, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setOmeroVersion(theOmeroVersion, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setOmeroVersion(const ::omero::RStringPtr& theOmeroVersion, const ::omero::model::Callback_FilesetVersionInfo_setOmeroVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setOmeroVersion(theOmeroVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setOmeroVersion(const ::omero::RStringPtr& theOmeroVersion, const ::Ice::Context& __ctx, const ::omero::model::Callback_FilesetVersionInfo_setOmeroVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setOmeroVersion(theOmeroVersion, &__ctx, __del, __cookie);
    }

    void end_setOmeroVersion(const ::Ice::AsyncResultPtr&);
    
private:

    void setOmeroVersion(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setOmeroVersion(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getOsArchitecture()
    {
        return getOsArchitecture(0);
    }
    ::omero::RStringPtr getOsArchitecture(const ::Ice::Context& __ctx)
    {
        return getOsArchitecture(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getOsArchitecture(const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getOsArchitecture(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getOsArchitecture(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getOsArchitecture(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getOsArchitecture(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getOsArchitecture(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getOsArchitecture(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getOsArchitecture(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getOsArchitecture(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RStringPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::FilesetVersionInfoPrx __proxy = ::omero::model::FilesetVersionInfoPrx::uncheckedCast(__result->getProxy());
                ::omero::RStringPtr __ret;
                try
                {
                    __ret = __proxy->end_getOsArchitecture(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RStringPtr&)> _response;
        };
        return begin_getOsArchitecture(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getOsArchitecture()
    {
        return begin_getOsArchitecture(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getOsArchitecture(const ::Ice::Context& __ctx)
    {
        return begin_getOsArchitecture(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getOsArchitecture(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getOsArchitecture(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getOsArchitecture(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getOsArchitecture(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getOsArchitecture(const ::omero::model::Callback_FilesetVersionInfo_getOsArchitecturePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getOsArchitecture(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getOsArchitecture(const ::Ice::Context& __ctx, const ::omero::model::Callback_FilesetVersionInfo_getOsArchitecturePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getOsArchitecture(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getOsArchitecture(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getOsArchitecture(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getOsArchitecture(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setOsArchitecture(const ::omero::RStringPtr& theOsArchitecture)
    {
        setOsArchitecture(theOsArchitecture, 0);
    }
    void setOsArchitecture(const ::omero::RStringPtr& theOsArchitecture, const ::Ice::Context& __ctx)
    {
        setOsArchitecture(theOsArchitecture, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setOsArchitecture(const ::omero::RStringPtr& theOsArchitecture, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setOsArchitecture(theOsArchitecture, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setOsArchitecture(const ::omero::RStringPtr& theOsArchitecture, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setOsArchitecture(theOsArchitecture, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setOsArchitecture(const ::omero::RStringPtr& theOsArchitecture, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setOsArchitecture(theOsArchitecture, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setOsArchitecture(const ::omero::RStringPtr& theOsArchitecture, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setOsArchitecture(theOsArchitecture, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setOsArchitecture(const ::omero::RStringPtr& theOsArchitecture)
    {
        return begin_setOsArchitecture(theOsArchitecture, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setOsArchitecture(const ::omero::RStringPtr& theOsArchitecture, const ::Ice::Context& __ctx)
    {
        return begin_setOsArchitecture(theOsArchitecture, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setOsArchitecture(const ::omero::RStringPtr& theOsArchitecture, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setOsArchitecture(theOsArchitecture, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setOsArchitecture(const ::omero::RStringPtr& theOsArchitecture, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setOsArchitecture(theOsArchitecture, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setOsArchitecture(const ::omero::RStringPtr& theOsArchitecture, const ::omero::model::Callback_FilesetVersionInfo_setOsArchitecturePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setOsArchitecture(theOsArchitecture, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setOsArchitecture(const ::omero::RStringPtr& theOsArchitecture, const ::Ice::Context& __ctx, const ::omero::model::Callback_FilesetVersionInfo_setOsArchitecturePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setOsArchitecture(theOsArchitecture, &__ctx, __del, __cookie);
    }

    void end_setOsArchitecture(const ::Ice::AsyncResultPtr&);
    
private:

    void setOsArchitecture(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setOsArchitecture(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getOsName()
    {
        return getOsName(0);
    }
    ::omero::RStringPtr getOsName(const ::Ice::Context& __ctx)
    {
        return getOsName(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getOsName(const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getOsName(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getOsName(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getOsName(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getOsName(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getOsName(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getOsName(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getOsName(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getOsName(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RStringPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::FilesetVersionInfoPrx __proxy = ::omero::model::FilesetVersionInfoPrx::uncheckedCast(__result->getProxy());
                ::omero::RStringPtr __ret;
                try
                {
                    __ret = __proxy->end_getOsName(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RStringPtr&)> _response;
        };
        return begin_getOsName(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getOsName()
    {
        return begin_getOsName(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getOsName(const ::Ice::Context& __ctx)
    {
        return begin_getOsName(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getOsName(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getOsName(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getOsName(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getOsName(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getOsName(const ::omero::model::Callback_FilesetVersionInfo_getOsNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getOsName(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getOsName(const ::Ice::Context& __ctx, const ::omero::model::Callback_FilesetVersionInfo_getOsNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getOsName(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getOsName(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getOsName(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getOsName(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setOsName(const ::omero::RStringPtr& theOsName)
    {
        setOsName(theOsName, 0);
    }
    void setOsName(const ::omero::RStringPtr& theOsName, const ::Ice::Context& __ctx)
    {
        setOsName(theOsName, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setOsName(const ::omero::RStringPtr& theOsName, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setOsName(theOsName, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setOsName(const ::omero::RStringPtr& theOsName, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setOsName(theOsName, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setOsName(const ::omero::RStringPtr& theOsName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setOsName(theOsName, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setOsName(const ::omero::RStringPtr& theOsName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setOsName(theOsName, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setOsName(const ::omero::RStringPtr& theOsName)
    {
        return begin_setOsName(theOsName, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setOsName(const ::omero::RStringPtr& theOsName, const ::Ice::Context& __ctx)
    {
        return begin_setOsName(theOsName, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setOsName(const ::omero::RStringPtr& theOsName, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setOsName(theOsName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setOsName(const ::omero::RStringPtr& theOsName, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setOsName(theOsName, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setOsName(const ::omero::RStringPtr& theOsName, const ::omero::model::Callback_FilesetVersionInfo_setOsNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setOsName(theOsName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setOsName(const ::omero::RStringPtr& theOsName, const ::Ice::Context& __ctx, const ::omero::model::Callback_FilesetVersionInfo_setOsNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setOsName(theOsName, &__ctx, __del, __cookie);
    }

    void end_setOsName(const ::Ice::AsyncResultPtr&);
    
private:

    void setOsName(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setOsName(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getOsVersion()
    {
        return getOsVersion(0);
    }
    ::omero::RStringPtr getOsVersion(const ::Ice::Context& __ctx)
    {
        return getOsVersion(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getOsVersion(const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getOsVersion(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getOsVersion(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getOsVersion(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getOsVersion(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getOsVersion(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getOsVersion(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getOsVersion(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getOsVersion(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RStringPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::FilesetVersionInfoPrx __proxy = ::omero::model::FilesetVersionInfoPrx::uncheckedCast(__result->getProxy());
                ::omero::RStringPtr __ret;
                try
                {
                    __ret = __proxy->end_getOsVersion(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RStringPtr&)> _response;
        };
        return begin_getOsVersion(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getOsVersion()
    {
        return begin_getOsVersion(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getOsVersion(const ::Ice::Context& __ctx)
    {
        return begin_getOsVersion(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getOsVersion(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getOsVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getOsVersion(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getOsVersion(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getOsVersion(const ::omero::model::Callback_FilesetVersionInfo_getOsVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getOsVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getOsVersion(const ::Ice::Context& __ctx, const ::omero::model::Callback_FilesetVersionInfo_getOsVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getOsVersion(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getOsVersion(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getOsVersion(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getOsVersion(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setOsVersion(const ::omero::RStringPtr& theOsVersion)
    {
        setOsVersion(theOsVersion, 0);
    }
    void setOsVersion(const ::omero::RStringPtr& theOsVersion, const ::Ice::Context& __ctx)
    {
        setOsVersion(theOsVersion, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setOsVersion(const ::omero::RStringPtr& theOsVersion, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setOsVersion(theOsVersion, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setOsVersion(const ::omero::RStringPtr& theOsVersion, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setOsVersion(theOsVersion, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setOsVersion(const ::omero::RStringPtr& theOsVersion, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setOsVersion(theOsVersion, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setOsVersion(const ::omero::RStringPtr& theOsVersion, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setOsVersion(theOsVersion, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setOsVersion(const ::omero::RStringPtr& theOsVersion)
    {
        return begin_setOsVersion(theOsVersion, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setOsVersion(const ::omero::RStringPtr& theOsVersion, const ::Ice::Context& __ctx)
    {
        return begin_setOsVersion(theOsVersion, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setOsVersion(const ::omero::RStringPtr& theOsVersion, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setOsVersion(theOsVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setOsVersion(const ::omero::RStringPtr& theOsVersion, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setOsVersion(theOsVersion, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setOsVersion(const ::omero::RStringPtr& theOsVersion, const ::omero::model::Callback_FilesetVersionInfo_setOsVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setOsVersion(theOsVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setOsVersion(const ::omero::RStringPtr& theOsVersion, const ::Ice::Context& __ctx, const ::omero::model::Callback_FilesetVersionInfo_setOsVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setOsVersion(theOsVersion, &__ctx, __del, __cookie);
    }

    void end_setOsVersion(const ::Ice::AsyncResultPtr&);
    
private:

    void setOsVersion(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setOsVersion(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getLocale()
    {
        return getLocale(0);
    }
    ::omero::RStringPtr getLocale(const ::Ice::Context& __ctx)
    {
        return getLocale(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getLocale(const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getLocale(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getLocale(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getLocale(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getLocale(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getLocale(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getLocale(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getLocale(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getLocale(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RStringPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::FilesetVersionInfoPrx __proxy = ::omero::model::FilesetVersionInfoPrx::uncheckedCast(__result->getProxy());
                ::omero::RStringPtr __ret;
                try
                {
                    __ret = __proxy->end_getLocale(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RStringPtr&)> _response;
        };
        return begin_getLocale(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getLocale()
    {
        return begin_getLocale(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getLocale(const ::Ice::Context& __ctx)
    {
        return begin_getLocale(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getLocale(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getLocale(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getLocale(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getLocale(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getLocale(const ::omero::model::Callback_FilesetVersionInfo_getLocalePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getLocale(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getLocale(const ::Ice::Context& __ctx, const ::omero::model::Callback_FilesetVersionInfo_getLocalePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getLocale(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getLocale(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getLocale(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getLocale(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setLocale(const ::omero::RStringPtr& theLocale)
    {
        setLocale(theLocale, 0);
    }
    void setLocale(const ::omero::RStringPtr& theLocale, const ::Ice::Context& __ctx)
    {
        setLocale(theLocale, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setLocale(const ::omero::RStringPtr& theLocale, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setLocale(theLocale, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setLocale(const ::omero::RStringPtr& theLocale, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setLocale(theLocale, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setLocale(const ::omero::RStringPtr& theLocale, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setLocale(theLocale, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setLocale(const ::omero::RStringPtr& theLocale, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setLocale(theLocale, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setLocale(const ::omero::RStringPtr& theLocale)
    {
        return begin_setLocale(theLocale, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setLocale(const ::omero::RStringPtr& theLocale, const ::Ice::Context& __ctx)
    {
        return begin_setLocale(theLocale, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setLocale(const ::omero::RStringPtr& theLocale, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setLocale(theLocale, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setLocale(const ::omero::RStringPtr& theLocale, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setLocale(theLocale, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setLocale(const ::omero::RStringPtr& theLocale, const ::omero::model::Callback_FilesetVersionInfo_setLocalePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setLocale(theLocale, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setLocale(const ::omero::RStringPtr& theLocale, const ::Ice::Context& __ctx, const ::omero::model::Callback_FilesetVersionInfo_setLocalePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setLocale(theLocale, &__ctx, __del, __cookie);
    }

    void end_setLocale(const ::Ice::AsyncResultPtr&);
    
private:

    void setLocale(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setLocale(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<FilesetVersionInfo> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<FilesetVersionInfo*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<FilesetVersionInfo> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<FilesetVersionInfo*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<FilesetVersionInfo> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<FilesetVersionInfo*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<FilesetVersionInfo> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<FilesetVersionInfo*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<FilesetVersionInfo> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<FilesetVersionInfo*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<FilesetVersionInfo> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<FilesetVersionInfo*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<FilesetVersionInfo> ice_secure(bool __secure) const
    {
        return dynamic_cast<FilesetVersionInfo*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<FilesetVersionInfo> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<FilesetVersionInfo*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<FilesetVersionInfo> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<FilesetVersionInfo*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<FilesetVersionInfo> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<FilesetVersionInfo*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<FilesetVersionInfo> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<FilesetVersionInfo*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<FilesetVersionInfo> ice_twoway() const
    {
        return dynamic_cast<FilesetVersionInfo*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<FilesetVersionInfo> ice_oneway() const
    {
        return dynamic_cast<FilesetVersionInfo*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<FilesetVersionInfo> ice_batchOneway() const
    {
        return dynamic_cast<FilesetVersionInfo*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<FilesetVersionInfo> ice_datagram() const
    {
        return dynamic_cast<FilesetVersionInfo*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<FilesetVersionInfo> ice_batchDatagram() const
    {
        return dynamic_cast<FilesetVersionInfo*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<FilesetVersionInfo> ice_compress(bool __compress) const
    {
        return dynamic_cast<FilesetVersionInfo*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<FilesetVersionInfo> ice_timeout(int __timeout) const
    {
        return dynamic_cast<FilesetVersionInfo*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<FilesetVersionInfo> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<FilesetVersionInfo*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<FilesetVersionInfo> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<FilesetVersionInfo*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

namespace IceDelegate
{

namespace omero
{

namespace model
{

class FilesetVersionInfo : virtual public ::IceDelegate::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RStringPtr getBioformatsReader(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setBioformatsReader(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RStringPtr getBioformatsVersion(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setBioformatsVersion(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RStringPtr getOmeroVersion(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setOmeroVersion(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RStringPtr getOsArchitecture(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setOsArchitecture(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RStringPtr getOsName(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setOsName(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RStringPtr getOsVersion(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setOsVersion(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RStringPtr getLocale(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setLocale(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

}

namespace IceDelegateM
{

namespace omero
{

namespace model
{

class FilesetVersionInfo : virtual public ::IceDelegate::omero::model::FilesetVersionInfo,
                           virtual public ::IceDelegateM::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getBioformatsReader(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setBioformatsReader(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getBioformatsVersion(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setBioformatsVersion(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getOmeroVersion(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setOmeroVersion(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getOsArchitecture(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setOsArchitecture(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getOsName(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setOsName(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getOsVersion(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setOsVersion(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getLocale(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setLocale(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace IceDelegateD
{

namespace omero
{

namespace model
{

class FilesetVersionInfo : virtual public ::IceDelegate::omero::model::FilesetVersionInfo,
                           virtual public ::IceDelegateD::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getBioformatsReader(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setBioformatsReader(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getBioformatsVersion(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setBioformatsVersion(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getOmeroVersion(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setOmeroVersion(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getOsArchitecture(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setOsArchitecture(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getOsName(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setOsName(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getOsVersion(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setOsVersion(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getLocale(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setLocale(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace omero
{

namespace model
{

class FilesetVersionInfo : public ::omero::model::IObject
{
public:

    typedef FilesetVersionInfoPrx ProxyType;
    typedef FilesetVersionInfoPtr PointerType;

    FilesetVersionInfo()
    {
    }

    FilesetVersionInfo(const ::omero::RLongPtr& __ice_id, const ::omero::model::DetailsPtr& __ice_details, bool __ice_loaded, const ::omero::RIntPtr& __ice_version, const ::omero::RStringPtr& __ice_bioformatsReader, const ::omero::RStringPtr& __ice_bioformatsVersion, const ::omero::RStringPtr& __ice_omeroVersion, const ::omero::RStringPtr& __ice_osArchitecture, const ::omero::RStringPtr& __ice_osName, const ::omero::RStringPtr& __ice_osVersion, const ::omero::RStringPtr& __ice_locale) :
        ::omero::model::IObject(__ice_id, __ice_details, __ice_loaded)
        ,
        version(__ice_version),
        bioformatsReader(__ice_bioformatsReader),
        bioformatsVersion(__ice_bioformatsVersion),
        omeroVersion(__ice_omeroVersion),
        osArchitecture(__ice_osArchitecture),
        osName(__ice_osName),
        osVersion(__ice_osVersion),
        locale(__ice_locale)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    virtual ::omero::RIntPtr getVersion(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getBioformatsReader(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getBioformatsReader(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setBioformatsReader(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setBioformatsReader(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getBioformatsVersion(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getBioformatsVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setBioformatsVersion(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setBioformatsVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getOmeroVersion(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getOmeroVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setOmeroVersion(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setOmeroVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getOsArchitecture(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getOsArchitecture(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setOsArchitecture(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setOsArchitecture(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getOsName(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getOsName(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setOsName(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setOsName(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getOsVersion(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getOsVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setOsVersion(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setOsVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getLocale(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getLocale(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setLocale(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setLocale(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::model::IObject::__writeImpl;
    using ::omero::model::IObject::__readImpl;
    #endif

    ::omero::RIntPtr version;

    ::omero::RStringPtr bioformatsReader;

    ::omero::RStringPtr bioformatsVersion;

    ::omero::RStringPtr omeroVersion;

    ::omero::RStringPtr osArchitecture;

    ::omero::RStringPtr osName;

    ::omero::RStringPtr osVersion;

    ::omero::RStringPtr locale;
};

inline bool operator==(const FilesetVersionInfo& l, const FilesetVersionInfo& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const FilesetVersionInfo& l, const FilesetVersionInfo& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

}

namespace omero
{

namespace model
{

template<class T>
class CallbackNC_FilesetVersionInfo_getVersion : public Callback_FilesetVersionInfo_getVersion_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RIntPtr&);

    CallbackNC_FilesetVersionInfo_getVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetVersionInfoPrx __proxy = ::omero::model::FilesetVersionInfoPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FilesetVersionInfo_getVersionPtr
newCallback_FilesetVersionInfo_getVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilesetVersionInfo_getVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilesetVersionInfo_getVersionPtr
newCallback_FilesetVersionInfo_getVersion(T* instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilesetVersionInfo_getVersion<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilesetVersionInfo_getVersion : public Callback_FilesetVersionInfo_getVersion_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RIntPtr&, const CT&);

    Callback_FilesetVersionInfo_getVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetVersionInfoPrx __proxy = ::omero::model::FilesetVersionInfoPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FilesetVersionInfo_getVersionPtr
newCallback_FilesetVersionInfo_getVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilesetVersionInfo_getVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilesetVersionInfo_getVersionPtr
newCallback_FilesetVersionInfo_getVersion(T* instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilesetVersionInfo_getVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FilesetVersionInfo_setVersion : public Callback_FilesetVersionInfo_setVersion_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_FilesetVersionInfo_setVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_FilesetVersionInfo_setVersionPtr
newCallback_FilesetVersionInfo_setVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilesetVersionInfo_setVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilesetVersionInfo_setVersionPtr
newCallback_FilesetVersionInfo_setVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilesetVersionInfo_setVersion<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_FilesetVersionInfo_setVersionPtr
newCallback_FilesetVersionInfo_setVersion(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilesetVersionInfo_setVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilesetVersionInfo_setVersionPtr
newCallback_FilesetVersionInfo_setVersion(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilesetVersionInfo_setVersion<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilesetVersionInfo_setVersion : public Callback_FilesetVersionInfo_setVersion_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_FilesetVersionInfo_setVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_FilesetVersionInfo_setVersionPtr
newCallback_FilesetVersionInfo_setVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilesetVersionInfo_setVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilesetVersionInfo_setVersionPtr
newCallback_FilesetVersionInfo_setVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilesetVersionInfo_setVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_FilesetVersionInfo_setVersionPtr
newCallback_FilesetVersionInfo_setVersion(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilesetVersionInfo_setVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilesetVersionInfo_setVersionPtr
newCallback_FilesetVersionInfo_setVersion(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilesetVersionInfo_setVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_FilesetVersionInfo_getBioformatsReader : public Callback_FilesetVersionInfo_getBioformatsReader_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_FilesetVersionInfo_getBioformatsReader(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetVersionInfoPrx __proxy = ::omero::model::FilesetVersionInfoPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getBioformatsReader(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FilesetVersionInfo_getBioformatsReaderPtr
newCallback_FilesetVersionInfo_getBioformatsReader(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilesetVersionInfo_getBioformatsReader<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilesetVersionInfo_getBioformatsReaderPtr
newCallback_FilesetVersionInfo_getBioformatsReader(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilesetVersionInfo_getBioformatsReader<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilesetVersionInfo_getBioformatsReader : public Callback_FilesetVersionInfo_getBioformatsReader_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_FilesetVersionInfo_getBioformatsReader(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetVersionInfoPrx __proxy = ::omero::model::FilesetVersionInfoPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getBioformatsReader(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FilesetVersionInfo_getBioformatsReaderPtr
newCallback_FilesetVersionInfo_getBioformatsReader(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilesetVersionInfo_getBioformatsReader<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilesetVersionInfo_getBioformatsReaderPtr
newCallback_FilesetVersionInfo_getBioformatsReader(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilesetVersionInfo_getBioformatsReader<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FilesetVersionInfo_setBioformatsReader : public Callback_FilesetVersionInfo_setBioformatsReader_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_FilesetVersionInfo_setBioformatsReader(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_FilesetVersionInfo_setBioformatsReaderPtr
newCallback_FilesetVersionInfo_setBioformatsReader(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilesetVersionInfo_setBioformatsReader<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilesetVersionInfo_setBioformatsReaderPtr
newCallback_FilesetVersionInfo_setBioformatsReader(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilesetVersionInfo_setBioformatsReader<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_FilesetVersionInfo_setBioformatsReaderPtr
newCallback_FilesetVersionInfo_setBioformatsReader(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilesetVersionInfo_setBioformatsReader<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilesetVersionInfo_setBioformatsReaderPtr
newCallback_FilesetVersionInfo_setBioformatsReader(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilesetVersionInfo_setBioformatsReader<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilesetVersionInfo_setBioformatsReader : public Callback_FilesetVersionInfo_setBioformatsReader_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_FilesetVersionInfo_setBioformatsReader(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_FilesetVersionInfo_setBioformatsReaderPtr
newCallback_FilesetVersionInfo_setBioformatsReader(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilesetVersionInfo_setBioformatsReader<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilesetVersionInfo_setBioformatsReaderPtr
newCallback_FilesetVersionInfo_setBioformatsReader(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilesetVersionInfo_setBioformatsReader<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_FilesetVersionInfo_setBioformatsReaderPtr
newCallback_FilesetVersionInfo_setBioformatsReader(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilesetVersionInfo_setBioformatsReader<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilesetVersionInfo_setBioformatsReaderPtr
newCallback_FilesetVersionInfo_setBioformatsReader(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilesetVersionInfo_setBioformatsReader<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_FilesetVersionInfo_getBioformatsVersion : public Callback_FilesetVersionInfo_getBioformatsVersion_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_FilesetVersionInfo_getBioformatsVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetVersionInfoPrx __proxy = ::omero::model::FilesetVersionInfoPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getBioformatsVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FilesetVersionInfo_getBioformatsVersionPtr
newCallback_FilesetVersionInfo_getBioformatsVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilesetVersionInfo_getBioformatsVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilesetVersionInfo_getBioformatsVersionPtr
newCallback_FilesetVersionInfo_getBioformatsVersion(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilesetVersionInfo_getBioformatsVersion<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilesetVersionInfo_getBioformatsVersion : public Callback_FilesetVersionInfo_getBioformatsVersion_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_FilesetVersionInfo_getBioformatsVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetVersionInfoPrx __proxy = ::omero::model::FilesetVersionInfoPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getBioformatsVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FilesetVersionInfo_getBioformatsVersionPtr
newCallback_FilesetVersionInfo_getBioformatsVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilesetVersionInfo_getBioformatsVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilesetVersionInfo_getBioformatsVersionPtr
newCallback_FilesetVersionInfo_getBioformatsVersion(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilesetVersionInfo_getBioformatsVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FilesetVersionInfo_setBioformatsVersion : public Callback_FilesetVersionInfo_setBioformatsVersion_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_FilesetVersionInfo_setBioformatsVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_FilesetVersionInfo_setBioformatsVersionPtr
newCallback_FilesetVersionInfo_setBioformatsVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilesetVersionInfo_setBioformatsVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilesetVersionInfo_setBioformatsVersionPtr
newCallback_FilesetVersionInfo_setBioformatsVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilesetVersionInfo_setBioformatsVersion<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_FilesetVersionInfo_setBioformatsVersionPtr
newCallback_FilesetVersionInfo_setBioformatsVersion(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilesetVersionInfo_setBioformatsVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilesetVersionInfo_setBioformatsVersionPtr
newCallback_FilesetVersionInfo_setBioformatsVersion(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilesetVersionInfo_setBioformatsVersion<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilesetVersionInfo_setBioformatsVersion : public Callback_FilesetVersionInfo_setBioformatsVersion_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_FilesetVersionInfo_setBioformatsVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_FilesetVersionInfo_setBioformatsVersionPtr
newCallback_FilesetVersionInfo_setBioformatsVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilesetVersionInfo_setBioformatsVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilesetVersionInfo_setBioformatsVersionPtr
newCallback_FilesetVersionInfo_setBioformatsVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilesetVersionInfo_setBioformatsVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_FilesetVersionInfo_setBioformatsVersionPtr
newCallback_FilesetVersionInfo_setBioformatsVersion(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilesetVersionInfo_setBioformatsVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilesetVersionInfo_setBioformatsVersionPtr
newCallback_FilesetVersionInfo_setBioformatsVersion(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilesetVersionInfo_setBioformatsVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_FilesetVersionInfo_getOmeroVersion : public Callback_FilesetVersionInfo_getOmeroVersion_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_FilesetVersionInfo_getOmeroVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetVersionInfoPrx __proxy = ::omero::model::FilesetVersionInfoPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getOmeroVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FilesetVersionInfo_getOmeroVersionPtr
newCallback_FilesetVersionInfo_getOmeroVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilesetVersionInfo_getOmeroVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilesetVersionInfo_getOmeroVersionPtr
newCallback_FilesetVersionInfo_getOmeroVersion(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilesetVersionInfo_getOmeroVersion<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilesetVersionInfo_getOmeroVersion : public Callback_FilesetVersionInfo_getOmeroVersion_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_FilesetVersionInfo_getOmeroVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetVersionInfoPrx __proxy = ::omero::model::FilesetVersionInfoPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getOmeroVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FilesetVersionInfo_getOmeroVersionPtr
newCallback_FilesetVersionInfo_getOmeroVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilesetVersionInfo_getOmeroVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilesetVersionInfo_getOmeroVersionPtr
newCallback_FilesetVersionInfo_getOmeroVersion(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilesetVersionInfo_getOmeroVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FilesetVersionInfo_setOmeroVersion : public Callback_FilesetVersionInfo_setOmeroVersion_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_FilesetVersionInfo_setOmeroVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_FilesetVersionInfo_setOmeroVersionPtr
newCallback_FilesetVersionInfo_setOmeroVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilesetVersionInfo_setOmeroVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilesetVersionInfo_setOmeroVersionPtr
newCallback_FilesetVersionInfo_setOmeroVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilesetVersionInfo_setOmeroVersion<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_FilesetVersionInfo_setOmeroVersionPtr
newCallback_FilesetVersionInfo_setOmeroVersion(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilesetVersionInfo_setOmeroVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilesetVersionInfo_setOmeroVersionPtr
newCallback_FilesetVersionInfo_setOmeroVersion(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilesetVersionInfo_setOmeroVersion<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilesetVersionInfo_setOmeroVersion : public Callback_FilesetVersionInfo_setOmeroVersion_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_FilesetVersionInfo_setOmeroVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_FilesetVersionInfo_setOmeroVersionPtr
newCallback_FilesetVersionInfo_setOmeroVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilesetVersionInfo_setOmeroVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilesetVersionInfo_setOmeroVersionPtr
newCallback_FilesetVersionInfo_setOmeroVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilesetVersionInfo_setOmeroVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_FilesetVersionInfo_setOmeroVersionPtr
newCallback_FilesetVersionInfo_setOmeroVersion(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilesetVersionInfo_setOmeroVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilesetVersionInfo_setOmeroVersionPtr
newCallback_FilesetVersionInfo_setOmeroVersion(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilesetVersionInfo_setOmeroVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_FilesetVersionInfo_getOsArchitecture : public Callback_FilesetVersionInfo_getOsArchitecture_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_FilesetVersionInfo_getOsArchitecture(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetVersionInfoPrx __proxy = ::omero::model::FilesetVersionInfoPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getOsArchitecture(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FilesetVersionInfo_getOsArchitecturePtr
newCallback_FilesetVersionInfo_getOsArchitecture(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilesetVersionInfo_getOsArchitecture<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilesetVersionInfo_getOsArchitecturePtr
newCallback_FilesetVersionInfo_getOsArchitecture(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilesetVersionInfo_getOsArchitecture<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilesetVersionInfo_getOsArchitecture : public Callback_FilesetVersionInfo_getOsArchitecture_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_FilesetVersionInfo_getOsArchitecture(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetVersionInfoPrx __proxy = ::omero::model::FilesetVersionInfoPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getOsArchitecture(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FilesetVersionInfo_getOsArchitecturePtr
newCallback_FilesetVersionInfo_getOsArchitecture(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilesetVersionInfo_getOsArchitecture<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilesetVersionInfo_getOsArchitecturePtr
newCallback_FilesetVersionInfo_getOsArchitecture(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilesetVersionInfo_getOsArchitecture<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FilesetVersionInfo_setOsArchitecture : public Callback_FilesetVersionInfo_setOsArchitecture_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_FilesetVersionInfo_setOsArchitecture(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_FilesetVersionInfo_setOsArchitecturePtr
newCallback_FilesetVersionInfo_setOsArchitecture(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilesetVersionInfo_setOsArchitecture<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilesetVersionInfo_setOsArchitecturePtr
newCallback_FilesetVersionInfo_setOsArchitecture(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilesetVersionInfo_setOsArchitecture<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_FilesetVersionInfo_setOsArchitecturePtr
newCallback_FilesetVersionInfo_setOsArchitecture(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilesetVersionInfo_setOsArchitecture<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilesetVersionInfo_setOsArchitecturePtr
newCallback_FilesetVersionInfo_setOsArchitecture(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilesetVersionInfo_setOsArchitecture<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilesetVersionInfo_setOsArchitecture : public Callback_FilesetVersionInfo_setOsArchitecture_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_FilesetVersionInfo_setOsArchitecture(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_FilesetVersionInfo_setOsArchitecturePtr
newCallback_FilesetVersionInfo_setOsArchitecture(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilesetVersionInfo_setOsArchitecture<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilesetVersionInfo_setOsArchitecturePtr
newCallback_FilesetVersionInfo_setOsArchitecture(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilesetVersionInfo_setOsArchitecture<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_FilesetVersionInfo_setOsArchitecturePtr
newCallback_FilesetVersionInfo_setOsArchitecture(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilesetVersionInfo_setOsArchitecture<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilesetVersionInfo_setOsArchitecturePtr
newCallback_FilesetVersionInfo_setOsArchitecture(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilesetVersionInfo_setOsArchitecture<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_FilesetVersionInfo_getOsName : public Callback_FilesetVersionInfo_getOsName_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_FilesetVersionInfo_getOsName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetVersionInfoPrx __proxy = ::omero::model::FilesetVersionInfoPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getOsName(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FilesetVersionInfo_getOsNamePtr
newCallback_FilesetVersionInfo_getOsName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilesetVersionInfo_getOsName<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilesetVersionInfo_getOsNamePtr
newCallback_FilesetVersionInfo_getOsName(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilesetVersionInfo_getOsName<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilesetVersionInfo_getOsName : public Callback_FilesetVersionInfo_getOsName_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_FilesetVersionInfo_getOsName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetVersionInfoPrx __proxy = ::omero::model::FilesetVersionInfoPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getOsName(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FilesetVersionInfo_getOsNamePtr
newCallback_FilesetVersionInfo_getOsName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilesetVersionInfo_getOsName<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilesetVersionInfo_getOsNamePtr
newCallback_FilesetVersionInfo_getOsName(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilesetVersionInfo_getOsName<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FilesetVersionInfo_setOsName : public Callback_FilesetVersionInfo_setOsName_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_FilesetVersionInfo_setOsName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_FilesetVersionInfo_setOsNamePtr
newCallback_FilesetVersionInfo_setOsName(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilesetVersionInfo_setOsName<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilesetVersionInfo_setOsNamePtr
newCallback_FilesetVersionInfo_setOsName(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilesetVersionInfo_setOsName<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_FilesetVersionInfo_setOsNamePtr
newCallback_FilesetVersionInfo_setOsName(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilesetVersionInfo_setOsName<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilesetVersionInfo_setOsNamePtr
newCallback_FilesetVersionInfo_setOsName(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilesetVersionInfo_setOsName<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilesetVersionInfo_setOsName : public Callback_FilesetVersionInfo_setOsName_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_FilesetVersionInfo_setOsName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_FilesetVersionInfo_setOsNamePtr
newCallback_FilesetVersionInfo_setOsName(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilesetVersionInfo_setOsName<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilesetVersionInfo_setOsNamePtr
newCallback_FilesetVersionInfo_setOsName(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilesetVersionInfo_setOsName<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_FilesetVersionInfo_setOsNamePtr
newCallback_FilesetVersionInfo_setOsName(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilesetVersionInfo_setOsName<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilesetVersionInfo_setOsNamePtr
newCallback_FilesetVersionInfo_setOsName(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilesetVersionInfo_setOsName<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_FilesetVersionInfo_getOsVersion : public Callback_FilesetVersionInfo_getOsVersion_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_FilesetVersionInfo_getOsVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetVersionInfoPrx __proxy = ::omero::model::FilesetVersionInfoPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getOsVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FilesetVersionInfo_getOsVersionPtr
newCallback_FilesetVersionInfo_getOsVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilesetVersionInfo_getOsVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilesetVersionInfo_getOsVersionPtr
newCallback_FilesetVersionInfo_getOsVersion(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilesetVersionInfo_getOsVersion<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilesetVersionInfo_getOsVersion : public Callback_FilesetVersionInfo_getOsVersion_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_FilesetVersionInfo_getOsVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetVersionInfoPrx __proxy = ::omero::model::FilesetVersionInfoPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getOsVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FilesetVersionInfo_getOsVersionPtr
newCallback_FilesetVersionInfo_getOsVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilesetVersionInfo_getOsVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilesetVersionInfo_getOsVersionPtr
newCallback_FilesetVersionInfo_getOsVersion(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilesetVersionInfo_getOsVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FilesetVersionInfo_setOsVersion : public Callback_FilesetVersionInfo_setOsVersion_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_FilesetVersionInfo_setOsVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_FilesetVersionInfo_setOsVersionPtr
newCallback_FilesetVersionInfo_setOsVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilesetVersionInfo_setOsVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilesetVersionInfo_setOsVersionPtr
newCallback_FilesetVersionInfo_setOsVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilesetVersionInfo_setOsVersion<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_FilesetVersionInfo_setOsVersionPtr
newCallback_FilesetVersionInfo_setOsVersion(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilesetVersionInfo_setOsVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilesetVersionInfo_setOsVersionPtr
newCallback_FilesetVersionInfo_setOsVersion(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilesetVersionInfo_setOsVersion<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilesetVersionInfo_setOsVersion : public Callback_FilesetVersionInfo_setOsVersion_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_FilesetVersionInfo_setOsVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_FilesetVersionInfo_setOsVersionPtr
newCallback_FilesetVersionInfo_setOsVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilesetVersionInfo_setOsVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilesetVersionInfo_setOsVersionPtr
newCallback_FilesetVersionInfo_setOsVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilesetVersionInfo_setOsVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_FilesetVersionInfo_setOsVersionPtr
newCallback_FilesetVersionInfo_setOsVersion(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilesetVersionInfo_setOsVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilesetVersionInfo_setOsVersionPtr
newCallback_FilesetVersionInfo_setOsVersion(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilesetVersionInfo_setOsVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_FilesetVersionInfo_getLocale : public Callback_FilesetVersionInfo_getLocale_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_FilesetVersionInfo_getLocale(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetVersionInfoPrx __proxy = ::omero::model::FilesetVersionInfoPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getLocale(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FilesetVersionInfo_getLocalePtr
newCallback_FilesetVersionInfo_getLocale(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilesetVersionInfo_getLocale<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilesetVersionInfo_getLocalePtr
newCallback_FilesetVersionInfo_getLocale(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilesetVersionInfo_getLocale<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilesetVersionInfo_getLocale : public Callback_FilesetVersionInfo_getLocale_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_FilesetVersionInfo_getLocale(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilesetVersionInfoPrx __proxy = ::omero::model::FilesetVersionInfoPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getLocale(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FilesetVersionInfo_getLocalePtr
newCallback_FilesetVersionInfo_getLocale(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilesetVersionInfo_getLocale<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilesetVersionInfo_getLocalePtr
newCallback_FilesetVersionInfo_getLocale(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilesetVersionInfo_getLocale<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FilesetVersionInfo_setLocale : public Callback_FilesetVersionInfo_setLocale_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_FilesetVersionInfo_setLocale(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_FilesetVersionInfo_setLocalePtr
newCallback_FilesetVersionInfo_setLocale(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilesetVersionInfo_setLocale<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilesetVersionInfo_setLocalePtr
newCallback_FilesetVersionInfo_setLocale(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilesetVersionInfo_setLocale<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_FilesetVersionInfo_setLocalePtr
newCallback_FilesetVersionInfo_setLocale(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilesetVersionInfo_setLocale<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilesetVersionInfo_setLocalePtr
newCallback_FilesetVersionInfo_setLocale(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilesetVersionInfo_setLocale<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilesetVersionInfo_setLocale : public Callback_FilesetVersionInfo_setLocale_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_FilesetVersionInfo_setLocale(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_FilesetVersionInfo_setLocalePtr
newCallback_FilesetVersionInfo_setLocale(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilesetVersionInfo_setLocale<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilesetVersionInfo_setLocalePtr
newCallback_FilesetVersionInfo_setLocale(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilesetVersionInfo_setLocale<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_FilesetVersionInfo_setLocalePtr
newCallback_FilesetVersionInfo_setLocale(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilesetVersionInfo_setLocale<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilesetVersionInfo_setLocalePtr
newCallback_FilesetVersionInfo_setLocale(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilesetVersionInfo_setLocale<T, CT>(instance, 0, excb, sentcb);
}

}

}

#endif
