// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `ChannelBinding.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_ChannelBinding_h__
#define __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_ChannelBinding_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <omero/model/IObject.h>
#include <omero/RTypes.h>
#include <omero/System.h>
#include <omero/Collections.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace omero
{

namespace model
{

class RenderingDef;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::RenderingDef>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::RenderingDef*);

class Family;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Family>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Family*);

class Details;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Details>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Details*);

class ChannelBinding;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::ChannelBinding>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::ChannelBinding*);

}

}

}

namespace omero
{

namespace model
{

class RenderingDef;
bool operator==(const RenderingDef&, const RenderingDef&);
bool operator<(const RenderingDef&, const RenderingDef&);
::Ice::Object* upCast(::omero::model::RenderingDef*);
typedef ::IceInternal::Handle< ::omero::model::RenderingDef> RenderingDefPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::RenderingDef> RenderingDefPrx;
void __patch(RenderingDefPtr&, const ::Ice::ObjectPtr&);

class Family;
bool operator==(const Family&, const Family&);
bool operator<(const Family&, const Family&);
::Ice::Object* upCast(::omero::model::Family*);
typedef ::IceInternal::Handle< ::omero::model::Family> FamilyPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Family> FamilyPrx;
void __patch(FamilyPtr&, const ::Ice::ObjectPtr&);

class Details;
bool operator==(const Details&, const Details&);
bool operator<(const Details&, const Details&);
::Ice::Object* upCast(::omero::model::Details*);
typedef ::IceInternal::Handle< ::omero::model::Details> DetailsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Details> DetailsPrx;
void __patch(DetailsPtr&, const ::Ice::ObjectPtr&);

class ChannelBinding;
bool operator==(const ChannelBinding&, const ChannelBinding&);
bool operator<(const ChannelBinding&, const ChannelBinding&);
::Ice::Object* upCast(::omero::model::ChannelBinding*);
typedef ::IceInternal::Handle< ::omero::model::ChannelBinding> ChannelBindingPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::ChannelBinding> ChannelBindingPrx;
void __patch(ChannelBindingPtr&, const ::Ice::ObjectPtr&);

}

}

namespace omero
{

namespace model
{

class Callback_ChannelBinding_getVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ChannelBinding_getVersion_Base> Callback_ChannelBinding_getVersionPtr;

class Callback_ChannelBinding_setVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ChannelBinding_setVersion_Base> Callback_ChannelBinding_setVersionPtr;

class Callback_ChannelBinding_getRenderingDef_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ChannelBinding_getRenderingDef_Base> Callback_ChannelBinding_getRenderingDefPtr;

class Callback_ChannelBinding_setRenderingDef_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ChannelBinding_setRenderingDef_Base> Callback_ChannelBinding_setRenderingDefPtr;

class Callback_ChannelBinding_getFamily_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ChannelBinding_getFamily_Base> Callback_ChannelBinding_getFamilyPtr;

class Callback_ChannelBinding_setFamily_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ChannelBinding_setFamily_Base> Callback_ChannelBinding_setFamilyPtr;

class Callback_ChannelBinding_getCoefficient_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ChannelBinding_getCoefficient_Base> Callback_ChannelBinding_getCoefficientPtr;

class Callback_ChannelBinding_setCoefficient_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ChannelBinding_setCoefficient_Base> Callback_ChannelBinding_setCoefficientPtr;

class Callback_ChannelBinding_getInputStart_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ChannelBinding_getInputStart_Base> Callback_ChannelBinding_getInputStartPtr;

class Callback_ChannelBinding_setInputStart_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ChannelBinding_setInputStart_Base> Callback_ChannelBinding_setInputStartPtr;

class Callback_ChannelBinding_getInputEnd_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ChannelBinding_getInputEnd_Base> Callback_ChannelBinding_getInputEndPtr;

class Callback_ChannelBinding_setInputEnd_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ChannelBinding_setInputEnd_Base> Callback_ChannelBinding_setInputEndPtr;

class Callback_ChannelBinding_getActive_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ChannelBinding_getActive_Base> Callback_ChannelBinding_getActivePtr;

class Callback_ChannelBinding_setActive_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ChannelBinding_setActive_Base> Callback_ChannelBinding_setActivePtr;

class Callback_ChannelBinding_getNoiseReduction_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ChannelBinding_getNoiseReduction_Base> Callback_ChannelBinding_getNoiseReductionPtr;

class Callback_ChannelBinding_setNoiseReduction_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ChannelBinding_setNoiseReduction_Base> Callback_ChannelBinding_setNoiseReductionPtr;

class Callback_ChannelBinding_getRed_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ChannelBinding_getRed_Base> Callback_ChannelBinding_getRedPtr;

class Callback_ChannelBinding_setRed_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ChannelBinding_setRed_Base> Callback_ChannelBinding_setRedPtr;

class Callback_ChannelBinding_getGreen_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ChannelBinding_getGreen_Base> Callback_ChannelBinding_getGreenPtr;

class Callback_ChannelBinding_setGreen_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ChannelBinding_setGreen_Base> Callback_ChannelBinding_setGreenPtr;

class Callback_ChannelBinding_getBlue_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ChannelBinding_getBlue_Base> Callback_ChannelBinding_getBluePtr;

class Callback_ChannelBinding_setBlue_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ChannelBinding_setBlue_Base> Callback_ChannelBinding_setBluePtr;

class Callback_ChannelBinding_getAlpha_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ChannelBinding_getAlpha_Base> Callback_ChannelBinding_getAlphaPtr;

class Callback_ChannelBinding_setAlpha_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ChannelBinding_setAlpha_Base> Callback_ChannelBinding_setAlphaPtr;

}

}

namespace IceProxy
{

namespace omero
{

namespace model
{

class ChannelBinding : virtual public ::IceProxy::omero::model::IObject
{
public:

    ::omero::RIntPtr getVersion()
    {
        return getVersion(0);
    }
    ::omero::RIntPtr getVersion(const ::Ice::Context& __ctx)
    {
        return getVersion(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getVersion(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getVersion(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getVersion(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getVersion(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getVersion(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RIntPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::ChannelBindingPrx __proxy = ::omero::model::ChannelBindingPrx::uncheckedCast(__result->getProxy());
                ::omero::RIntPtr __ret;
                try
                {
                    __ret = __proxy->end_getVersion(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RIntPtr&)> _response;
        };
        return begin_getVersion(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getVersion()
    {
        return begin_getVersion(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx)
    {
        return begin_getVersion(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::omero::model::Callback_ChannelBinding_getVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx, const ::omero::model::Callback_ChannelBinding_getVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(&__ctx, __del, __cookie);
    }

    ::omero::RIntPtr end_getVersion(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RIntPtr getVersion(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setVersion(const ::omero::RIntPtr& theVersion)
    {
        setVersion(theVersion, 0);
    }
    void setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx)
    {
        setVersion(theVersion, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setVersion(const ::omero::RIntPtr& theVersion, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setVersion(theVersion, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setVersion(const ::omero::RIntPtr& theVersion, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setVersion(theVersion, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setVersion(theVersion, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setVersion(theVersion, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion)
    {
        return begin_setVersion(theVersion, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx)
    {
        return begin_setVersion(theVersion, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::omero::model::Callback_ChannelBinding_setVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::omero::model::Callback_ChannelBinding_setVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, &__ctx, __del, __cookie);
    }

    void end_setVersion(const ::Ice::AsyncResultPtr&);
    
private:

    void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::RenderingDefPtr getRenderingDef()
    {
        return getRenderingDef(0);
    }
    ::omero::model::RenderingDefPtr getRenderingDef(const ::Ice::Context& __ctx)
    {
        return getRenderingDef(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getRenderingDef(const ::IceInternal::Function<void (const ::omero::model::RenderingDefPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getRenderingDef(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getRenderingDef(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getRenderingDef(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getRenderingDef(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::RenderingDefPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getRenderingDef(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getRenderingDef(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getRenderingDef(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getRenderingDef(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::RenderingDefPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::RenderingDefPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::ChannelBindingPrx __proxy = ::omero::model::ChannelBindingPrx::uncheckedCast(__result->getProxy());
                ::omero::model::RenderingDefPtr __ret;
                try
                {
                    __ret = __proxy->end_getRenderingDef(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::RenderingDefPtr&)> _response;
        };
        return begin_getRenderingDef(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getRenderingDef()
    {
        return begin_getRenderingDef(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRenderingDef(const ::Ice::Context& __ctx)
    {
        return begin_getRenderingDef(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRenderingDef(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRenderingDef(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRenderingDef(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRenderingDef(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRenderingDef(const ::omero::model::Callback_ChannelBinding_getRenderingDefPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRenderingDef(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRenderingDef(const ::Ice::Context& __ctx, const ::omero::model::Callback_ChannelBinding_getRenderingDefPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRenderingDef(&__ctx, __del, __cookie);
    }

    ::omero::model::RenderingDefPtr end_getRenderingDef(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::RenderingDefPtr getRenderingDef(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getRenderingDef(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setRenderingDef(const ::omero::model::RenderingDefPtr& theRenderingDef)
    {
        setRenderingDef(theRenderingDef, 0);
    }
    void setRenderingDef(const ::omero::model::RenderingDefPtr& theRenderingDef, const ::Ice::Context& __ctx)
    {
        setRenderingDef(theRenderingDef, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setRenderingDef(const ::omero::model::RenderingDefPtr& theRenderingDef, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setRenderingDef(theRenderingDef, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setRenderingDef(const ::omero::model::RenderingDefPtr& theRenderingDef, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setRenderingDef(theRenderingDef, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setRenderingDef(const ::omero::model::RenderingDefPtr& theRenderingDef, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setRenderingDef(theRenderingDef, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setRenderingDef(const ::omero::model::RenderingDefPtr& theRenderingDef, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setRenderingDef(theRenderingDef, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setRenderingDef(const ::omero::model::RenderingDefPtr& theRenderingDef)
    {
        return begin_setRenderingDef(theRenderingDef, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setRenderingDef(const ::omero::model::RenderingDefPtr& theRenderingDef, const ::Ice::Context& __ctx)
    {
        return begin_setRenderingDef(theRenderingDef, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setRenderingDef(const ::omero::model::RenderingDefPtr& theRenderingDef, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setRenderingDef(theRenderingDef, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setRenderingDef(const ::omero::model::RenderingDefPtr& theRenderingDef, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setRenderingDef(theRenderingDef, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setRenderingDef(const ::omero::model::RenderingDefPtr& theRenderingDef, const ::omero::model::Callback_ChannelBinding_setRenderingDefPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setRenderingDef(theRenderingDef, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setRenderingDef(const ::omero::model::RenderingDefPtr& theRenderingDef, const ::Ice::Context& __ctx, const ::omero::model::Callback_ChannelBinding_setRenderingDefPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setRenderingDef(theRenderingDef, &__ctx, __del, __cookie);
    }

    void end_setRenderingDef(const ::Ice::AsyncResultPtr&);
    
private:

    void setRenderingDef(const ::omero::model::RenderingDefPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setRenderingDef(const ::omero::model::RenderingDefPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::FamilyPtr getFamily()
    {
        return getFamily(0);
    }
    ::omero::model::FamilyPtr getFamily(const ::Ice::Context& __ctx)
    {
        return getFamily(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getFamily(const ::IceInternal::Function<void (const ::omero::model::FamilyPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getFamily(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getFamily(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getFamily(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getFamily(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::FamilyPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getFamily(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getFamily(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getFamily(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getFamily(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::FamilyPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::FamilyPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::ChannelBindingPrx __proxy = ::omero::model::ChannelBindingPrx::uncheckedCast(__result->getProxy());
                ::omero::model::FamilyPtr __ret;
                try
                {
                    __ret = __proxy->end_getFamily(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::FamilyPtr&)> _response;
        };
        return begin_getFamily(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getFamily()
    {
        return begin_getFamily(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getFamily(const ::Ice::Context& __ctx)
    {
        return begin_getFamily(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getFamily(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFamily(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getFamily(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFamily(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getFamily(const ::omero::model::Callback_ChannelBinding_getFamilyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFamily(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getFamily(const ::Ice::Context& __ctx, const ::omero::model::Callback_ChannelBinding_getFamilyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFamily(&__ctx, __del, __cookie);
    }

    ::omero::model::FamilyPtr end_getFamily(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::FamilyPtr getFamily(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getFamily(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setFamily(const ::omero::model::FamilyPtr& theFamily)
    {
        setFamily(theFamily, 0);
    }
    void setFamily(const ::omero::model::FamilyPtr& theFamily, const ::Ice::Context& __ctx)
    {
        setFamily(theFamily, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setFamily(const ::omero::model::FamilyPtr& theFamily, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setFamily(theFamily, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setFamily(const ::omero::model::FamilyPtr& theFamily, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setFamily(theFamily, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setFamily(const ::omero::model::FamilyPtr& theFamily, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setFamily(theFamily, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setFamily(const ::omero::model::FamilyPtr& theFamily, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setFamily(theFamily, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setFamily(const ::omero::model::FamilyPtr& theFamily)
    {
        return begin_setFamily(theFamily, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setFamily(const ::omero::model::FamilyPtr& theFamily, const ::Ice::Context& __ctx)
    {
        return begin_setFamily(theFamily, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setFamily(const ::omero::model::FamilyPtr& theFamily, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setFamily(theFamily, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setFamily(const ::omero::model::FamilyPtr& theFamily, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setFamily(theFamily, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setFamily(const ::omero::model::FamilyPtr& theFamily, const ::omero::model::Callback_ChannelBinding_setFamilyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setFamily(theFamily, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setFamily(const ::omero::model::FamilyPtr& theFamily, const ::Ice::Context& __ctx, const ::omero::model::Callback_ChannelBinding_setFamilyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setFamily(theFamily, &__ctx, __del, __cookie);
    }

    void end_setFamily(const ::Ice::AsyncResultPtr&);
    
private:

    void setFamily(const ::omero::model::FamilyPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setFamily(const ::omero::model::FamilyPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RDoublePtr getCoefficient()
    {
        return getCoefficient(0);
    }
    ::omero::RDoublePtr getCoefficient(const ::Ice::Context& __ctx)
    {
        return getCoefficient(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getCoefficient(const ::IceInternal::Function<void (const ::omero::RDoublePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getCoefficient(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getCoefficient(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getCoefficient(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getCoefficient(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RDoublePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getCoefficient(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getCoefficient(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getCoefficient(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getCoefficient(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RDoublePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RDoublePtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::ChannelBindingPrx __proxy = ::omero::model::ChannelBindingPrx::uncheckedCast(__result->getProxy());
                ::omero::RDoublePtr __ret;
                try
                {
                    __ret = __proxy->end_getCoefficient(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RDoublePtr&)> _response;
        };
        return begin_getCoefficient(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getCoefficient()
    {
        return begin_getCoefficient(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getCoefficient(const ::Ice::Context& __ctx)
    {
        return begin_getCoefficient(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getCoefficient(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCoefficient(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCoefficient(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCoefficient(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCoefficient(const ::omero::model::Callback_ChannelBinding_getCoefficientPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCoefficient(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCoefficient(const ::Ice::Context& __ctx, const ::omero::model::Callback_ChannelBinding_getCoefficientPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCoefficient(&__ctx, __del, __cookie);
    }

    ::omero::RDoublePtr end_getCoefficient(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RDoublePtr getCoefficient(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getCoefficient(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setCoefficient(const ::omero::RDoublePtr& theCoefficient)
    {
        setCoefficient(theCoefficient, 0);
    }
    void setCoefficient(const ::omero::RDoublePtr& theCoefficient, const ::Ice::Context& __ctx)
    {
        setCoefficient(theCoefficient, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setCoefficient(const ::omero::RDoublePtr& theCoefficient, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setCoefficient(theCoefficient, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setCoefficient(const ::omero::RDoublePtr& theCoefficient, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setCoefficient(theCoefficient, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setCoefficient(const ::omero::RDoublePtr& theCoefficient, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setCoefficient(theCoefficient, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setCoefficient(const ::omero::RDoublePtr& theCoefficient, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setCoefficient(theCoefficient, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setCoefficient(const ::omero::RDoublePtr& theCoefficient)
    {
        return begin_setCoefficient(theCoefficient, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setCoefficient(const ::omero::RDoublePtr& theCoefficient, const ::Ice::Context& __ctx)
    {
        return begin_setCoefficient(theCoefficient, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setCoefficient(const ::omero::RDoublePtr& theCoefficient, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCoefficient(theCoefficient, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setCoefficient(const ::omero::RDoublePtr& theCoefficient, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCoefficient(theCoefficient, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setCoefficient(const ::omero::RDoublePtr& theCoefficient, const ::omero::model::Callback_ChannelBinding_setCoefficientPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCoefficient(theCoefficient, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setCoefficient(const ::omero::RDoublePtr& theCoefficient, const ::Ice::Context& __ctx, const ::omero::model::Callback_ChannelBinding_setCoefficientPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCoefficient(theCoefficient, &__ctx, __del, __cookie);
    }

    void end_setCoefficient(const ::Ice::AsyncResultPtr&);
    
private:

    void setCoefficient(const ::omero::RDoublePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setCoefficient(const ::omero::RDoublePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RDoublePtr getInputStart()
    {
        return getInputStart(0);
    }
    ::omero::RDoublePtr getInputStart(const ::Ice::Context& __ctx)
    {
        return getInputStart(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getInputStart(const ::IceInternal::Function<void (const ::omero::RDoublePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getInputStart(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getInputStart(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getInputStart(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getInputStart(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RDoublePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getInputStart(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getInputStart(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getInputStart(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getInputStart(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RDoublePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RDoublePtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::ChannelBindingPrx __proxy = ::omero::model::ChannelBindingPrx::uncheckedCast(__result->getProxy());
                ::omero::RDoublePtr __ret;
                try
                {
                    __ret = __proxy->end_getInputStart(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RDoublePtr&)> _response;
        };
        return begin_getInputStart(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getInputStart()
    {
        return begin_getInputStart(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getInputStart(const ::Ice::Context& __ctx)
    {
        return begin_getInputStart(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getInputStart(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getInputStart(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getInputStart(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getInputStart(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getInputStart(const ::omero::model::Callback_ChannelBinding_getInputStartPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getInputStart(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getInputStart(const ::Ice::Context& __ctx, const ::omero::model::Callback_ChannelBinding_getInputStartPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getInputStart(&__ctx, __del, __cookie);
    }

    ::omero::RDoublePtr end_getInputStart(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RDoublePtr getInputStart(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getInputStart(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setInputStart(const ::omero::RDoublePtr& theInputStart)
    {
        setInputStart(theInputStart, 0);
    }
    void setInputStart(const ::omero::RDoublePtr& theInputStart, const ::Ice::Context& __ctx)
    {
        setInputStart(theInputStart, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setInputStart(const ::omero::RDoublePtr& theInputStart, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setInputStart(theInputStart, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setInputStart(const ::omero::RDoublePtr& theInputStart, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setInputStart(theInputStart, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setInputStart(const ::omero::RDoublePtr& theInputStart, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setInputStart(theInputStart, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setInputStart(const ::omero::RDoublePtr& theInputStart, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setInputStart(theInputStart, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setInputStart(const ::omero::RDoublePtr& theInputStart)
    {
        return begin_setInputStart(theInputStart, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setInputStart(const ::omero::RDoublePtr& theInputStart, const ::Ice::Context& __ctx)
    {
        return begin_setInputStart(theInputStart, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setInputStart(const ::omero::RDoublePtr& theInputStart, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setInputStart(theInputStart, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setInputStart(const ::omero::RDoublePtr& theInputStart, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setInputStart(theInputStart, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setInputStart(const ::omero::RDoublePtr& theInputStart, const ::omero::model::Callback_ChannelBinding_setInputStartPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setInputStart(theInputStart, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setInputStart(const ::omero::RDoublePtr& theInputStart, const ::Ice::Context& __ctx, const ::omero::model::Callback_ChannelBinding_setInputStartPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setInputStart(theInputStart, &__ctx, __del, __cookie);
    }

    void end_setInputStart(const ::Ice::AsyncResultPtr&);
    
private:

    void setInputStart(const ::omero::RDoublePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setInputStart(const ::omero::RDoublePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RDoublePtr getInputEnd()
    {
        return getInputEnd(0);
    }
    ::omero::RDoublePtr getInputEnd(const ::Ice::Context& __ctx)
    {
        return getInputEnd(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getInputEnd(const ::IceInternal::Function<void (const ::omero::RDoublePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getInputEnd(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getInputEnd(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getInputEnd(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getInputEnd(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RDoublePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getInputEnd(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getInputEnd(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getInputEnd(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getInputEnd(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RDoublePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RDoublePtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::ChannelBindingPrx __proxy = ::omero::model::ChannelBindingPrx::uncheckedCast(__result->getProxy());
                ::omero::RDoublePtr __ret;
                try
                {
                    __ret = __proxy->end_getInputEnd(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RDoublePtr&)> _response;
        };
        return begin_getInputEnd(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getInputEnd()
    {
        return begin_getInputEnd(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getInputEnd(const ::Ice::Context& __ctx)
    {
        return begin_getInputEnd(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getInputEnd(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getInputEnd(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getInputEnd(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getInputEnd(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getInputEnd(const ::omero::model::Callback_ChannelBinding_getInputEndPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getInputEnd(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getInputEnd(const ::Ice::Context& __ctx, const ::omero::model::Callback_ChannelBinding_getInputEndPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getInputEnd(&__ctx, __del, __cookie);
    }

    ::omero::RDoublePtr end_getInputEnd(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RDoublePtr getInputEnd(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getInputEnd(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setInputEnd(const ::omero::RDoublePtr& theInputEnd)
    {
        setInputEnd(theInputEnd, 0);
    }
    void setInputEnd(const ::omero::RDoublePtr& theInputEnd, const ::Ice::Context& __ctx)
    {
        setInputEnd(theInputEnd, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setInputEnd(const ::omero::RDoublePtr& theInputEnd, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setInputEnd(theInputEnd, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setInputEnd(const ::omero::RDoublePtr& theInputEnd, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setInputEnd(theInputEnd, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setInputEnd(const ::omero::RDoublePtr& theInputEnd, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setInputEnd(theInputEnd, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setInputEnd(const ::omero::RDoublePtr& theInputEnd, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setInputEnd(theInputEnd, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setInputEnd(const ::omero::RDoublePtr& theInputEnd)
    {
        return begin_setInputEnd(theInputEnd, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setInputEnd(const ::omero::RDoublePtr& theInputEnd, const ::Ice::Context& __ctx)
    {
        return begin_setInputEnd(theInputEnd, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setInputEnd(const ::omero::RDoublePtr& theInputEnd, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setInputEnd(theInputEnd, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setInputEnd(const ::omero::RDoublePtr& theInputEnd, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setInputEnd(theInputEnd, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setInputEnd(const ::omero::RDoublePtr& theInputEnd, const ::omero::model::Callback_ChannelBinding_setInputEndPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setInputEnd(theInputEnd, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setInputEnd(const ::omero::RDoublePtr& theInputEnd, const ::Ice::Context& __ctx, const ::omero::model::Callback_ChannelBinding_setInputEndPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setInputEnd(theInputEnd, &__ctx, __del, __cookie);
    }

    void end_setInputEnd(const ::Ice::AsyncResultPtr&);
    
private:

    void setInputEnd(const ::omero::RDoublePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setInputEnd(const ::omero::RDoublePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RBoolPtr getActive()
    {
        return getActive(0);
    }
    ::omero::RBoolPtr getActive(const ::Ice::Context& __ctx)
    {
        return getActive(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getActive(const ::IceInternal::Function<void (const ::omero::RBoolPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getActive(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getActive(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getActive(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getActive(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RBoolPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getActive(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getActive(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getActive(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getActive(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RBoolPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RBoolPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::ChannelBindingPrx __proxy = ::omero::model::ChannelBindingPrx::uncheckedCast(__result->getProxy());
                ::omero::RBoolPtr __ret;
                try
                {
                    __ret = __proxy->end_getActive(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RBoolPtr&)> _response;
        };
        return begin_getActive(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getActive()
    {
        return begin_getActive(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getActive(const ::Ice::Context& __ctx)
    {
        return begin_getActive(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getActive(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getActive(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getActive(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getActive(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getActive(const ::omero::model::Callback_ChannelBinding_getActivePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getActive(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getActive(const ::Ice::Context& __ctx, const ::omero::model::Callback_ChannelBinding_getActivePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getActive(&__ctx, __del, __cookie);
    }

    ::omero::RBoolPtr end_getActive(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RBoolPtr getActive(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getActive(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setActive(const ::omero::RBoolPtr& theActive)
    {
        setActive(theActive, 0);
    }
    void setActive(const ::omero::RBoolPtr& theActive, const ::Ice::Context& __ctx)
    {
        setActive(theActive, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setActive(const ::omero::RBoolPtr& theActive, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setActive(theActive, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setActive(const ::omero::RBoolPtr& theActive, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setActive(theActive, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setActive(const ::omero::RBoolPtr& theActive, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setActive(theActive, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setActive(const ::omero::RBoolPtr& theActive, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setActive(theActive, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setActive(const ::omero::RBoolPtr& theActive)
    {
        return begin_setActive(theActive, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setActive(const ::omero::RBoolPtr& theActive, const ::Ice::Context& __ctx)
    {
        return begin_setActive(theActive, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setActive(const ::omero::RBoolPtr& theActive, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setActive(theActive, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setActive(const ::omero::RBoolPtr& theActive, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setActive(theActive, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setActive(const ::omero::RBoolPtr& theActive, const ::omero::model::Callback_ChannelBinding_setActivePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setActive(theActive, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setActive(const ::omero::RBoolPtr& theActive, const ::Ice::Context& __ctx, const ::omero::model::Callback_ChannelBinding_setActivePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setActive(theActive, &__ctx, __del, __cookie);
    }

    void end_setActive(const ::Ice::AsyncResultPtr&);
    
private:

    void setActive(const ::omero::RBoolPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setActive(const ::omero::RBoolPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RBoolPtr getNoiseReduction()
    {
        return getNoiseReduction(0);
    }
    ::omero::RBoolPtr getNoiseReduction(const ::Ice::Context& __ctx)
    {
        return getNoiseReduction(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getNoiseReduction(const ::IceInternal::Function<void (const ::omero::RBoolPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getNoiseReduction(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getNoiseReduction(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getNoiseReduction(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getNoiseReduction(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RBoolPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getNoiseReduction(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getNoiseReduction(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getNoiseReduction(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getNoiseReduction(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RBoolPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RBoolPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::ChannelBindingPrx __proxy = ::omero::model::ChannelBindingPrx::uncheckedCast(__result->getProxy());
                ::omero::RBoolPtr __ret;
                try
                {
                    __ret = __proxy->end_getNoiseReduction(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RBoolPtr&)> _response;
        };
        return begin_getNoiseReduction(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getNoiseReduction()
    {
        return begin_getNoiseReduction(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getNoiseReduction(const ::Ice::Context& __ctx)
    {
        return begin_getNoiseReduction(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getNoiseReduction(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getNoiseReduction(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getNoiseReduction(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getNoiseReduction(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getNoiseReduction(const ::omero::model::Callback_ChannelBinding_getNoiseReductionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getNoiseReduction(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getNoiseReduction(const ::Ice::Context& __ctx, const ::omero::model::Callback_ChannelBinding_getNoiseReductionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getNoiseReduction(&__ctx, __del, __cookie);
    }

    ::omero::RBoolPtr end_getNoiseReduction(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RBoolPtr getNoiseReduction(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getNoiseReduction(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setNoiseReduction(const ::omero::RBoolPtr& theNoiseReduction)
    {
        setNoiseReduction(theNoiseReduction, 0);
    }
    void setNoiseReduction(const ::omero::RBoolPtr& theNoiseReduction, const ::Ice::Context& __ctx)
    {
        setNoiseReduction(theNoiseReduction, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setNoiseReduction(const ::omero::RBoolPtr& theNoiseReduction, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setNoiseReduction(theNoiseReduction, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setNoiseReduction(const ::omero::RBoolPtr& theNoiseReduction, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setNoiseReduction(theNoiseReduction, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setNoiseReduction(const ::omero::RBoolPtr& theNoiseReduction, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setNoiseReduction(theNoiseReduction, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setNoiseReduction(const ::omero::RBoolPtr& theNoiseReduction, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setNoiseReduction(theNoiseReduction, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setNoiseReduction(const ::omero::RBoolPtr& theNoiseReduction)
    {
        return begin_setNoiseReduction(theNoiseReduction, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setNoiseReduction(const ::omero::RBoolPtr& theNoiseReduction, const ::Ice::Context& __ctx)
    {
        return begin_setNoiseReduction(theNoiseReduction, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setNoiseReduction(const ::omero::RBoolPtr& theNoiseReduction, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setNoiseReduction(theNoiseReduction, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setNoiseReduction(const ::omero::RBoolPtr& theNoiseReduction, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setNoiseReduction(theNoiseReduction, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setNoiseReduction(const ::omero::RBoolPtr& theNoiseReduction, const ::omero::model::Callback_ChannelBinding_setNoiseReductionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setNoiseReduction(theNoiseReduction, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setNoiseReduction(const ::omero::RBoolPtr& theNoiseReduction, const ::Ice::Context& __ctx, const ::omero::model::Callback_ChannelBinding_setNoiseReductionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setNoiseReduction(theNoiseReduction, &__ctx, __del, __cookie);
    }

    void end_setNoiseReduction(const ::Ice::AsyncResultPtr&);
    
private:

    void setNoiseReduction(const ::omero::RBoolPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setNoiseReduction(const ::omero::RBoolPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RIntPtr getRed()
    {
        return getRed(0);
    }
    ::omero::RIntPtr getRed(const ::Ice::Context& __ctx)
    {
        return getRed(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getRed(const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getRed(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getRed(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getRed(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getRed(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getRed(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getRed(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getRed(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getRed(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RIntPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::ChannelBindingPrx __proxy = ::omero::model::ChannelBindingPrx::uncheckedCast(__result->getProxy());
                ::omero::RIntPtr __ret;
                try
                {
                    __ret = __proxy->end_getRed(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RIntPtr&)> _response;
        };
        return begin_getRed(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getRed()
    {
        return begin_getRed(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRed(const ::Ice::Context& __ctx)
    {
        return begin_getRed(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRed(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRed(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRed(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRed(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRed(const ::omero::model::Callback_ChannelBinding_getRedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRed(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRed(const ::Ice::Context& __ctx, const ::omero::model::Callback_ChannelBinding_getRedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRed(&__ctx, __del, __cookie);
    }

    ::omero::RIntPtr end_getRed(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RIntPtr getRed(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getRed(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setRed(const ::omero::RIntPtr& theRed)
    {
        setRed(theRed, 0);
    }
    void setRed(const ::omero::RIntPtr& theRed, const ::Ice::Context& __ctx)
    {
        setRed(theRed, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setRed(const ::omero::RIntPtr& theRed, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setRed(theRed, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setRed(const ::omero::RIntPtr& theRed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setRed(theRed, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setRed(const ::omero::RIntPtr& theRed, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setRed(theRed, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setRed(const ::omero::RIntPtr& theRed, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setRed(theRed, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setRed(const ::omero::RIntPtr& theRed)
    {
        return begin_setRed(theRed, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setRed(const ::omero::RIntPtr& theRed, const ::Ice::Context& __ctx)
    {
        return begin_setRed(theRed, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setRed(const ::omero::RIntPtr& theRed, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setRed(theRed, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setRed(const ::omero::RIntPtr& theRed, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setRed(theRed, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setRed(const ::omero::RIntPtr& theRed, const ::omero::model::Callback_ChannelBinding_setRedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setRed(theRed, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setRed(const ::omero::RIntPtr& theRed, const ::Ice::Context& __ctx, const ::omero::model::Callback_ChannelBinding_setRedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setRed(theRed, &__ctx, __del, __cookie);
    }

    void end_setRed(const ::Ice::AsyncResultPtr&);
    
private:

    void setRed(const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setRed(const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RIntPtr getGreen()
    {
        return getGreen(0);
    }
    ::omero::RIntPtr getGreen(const ::Ice::Context& __ctx)
    {
        return getGreen(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getGreen(const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getGreen(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getGreen(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getGreen(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getGreen(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getGreen(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getGreen(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getGreen(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getGreen(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RIntPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::ChannelBindingPrx __proxy = ::omero::model::ChannelBindingPrx::uncheckedCast(__result->getProxy());
                ::omero::RIntPtr __ret;
                try
                {
                    __ret = __proxy->end_getGreen(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RIntPtr&)> _response;
        };
        return begin_getGreen(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getGreen()
    {
        return begin_getGreen(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getGreen(const ::Ice::Context& __ctx)
    {
        return begin_getGreen(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getGreen(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getGreen(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getGreen(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getGreen(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getGreen(const ::omero::model::Callback_ChannelBinding_getGreenPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getGreen(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getGreen(const ::Ice::Context& __ctx, const ::omero::model::Callback_ChannelBinding_getGreenPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getGreen(&__ctx, __del, __cookie);
    }

    ::omero::RIntPtr end_getGreen(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RIntPtr getGreen(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getGreen(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setGreen(const ::omero::RIntPtr& theGreen)
    {
        setGreen(theGreen, 0);
    }
    void setGreen(const ::omero::RIntPtr& theGreen, const ::Ice::Context& __ctx)
    {
        setGreen(theGreen, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setGreen(const ::omero::RIntPtr& theGreen, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setGreen(theGreen, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setGreen(const ::omero::RIntPtr& theGreen, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setGreen(theGreen, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setGreen(const ::omero::RIntPtr& theGreen, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setGreen(theGreen, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setGreen(const ::omero::RIntPtr& theGreen, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setGreen(theGreen, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setGreen(const ::omero::RIntPtr& theGreen)
    {
        return begin_setGreen(theGreen, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setGreen(const ::omero::RIntPtr& theGreen, const ::Ice::Context& __ctx)
    {
        return begin_setGreen(theGreen, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setGreen(const ::omero::RIntPtr& theGreen, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setGreen(theGreen, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setGreen(const ::omero::RIntPtr& theGreen, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setGreen(theGreen, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setGreen(const ::omero::RIntPtr& theGreen, const ::omero::model::Callback_ChannelBinding_setGreenPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setGreen(theGreen, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setGreen(const ::omero::RIntPtr& theGreen, const ::Ice::Context& __ctx, const ::omero::model::Callback_ChannelBinding_setGreenPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setGreen(theGreen, &__ctx, __del, __cookie);
    }

    void end_setGreen(const ::Ice::AsyncResultPtr&);
    
private:

    void setGreen(const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setGreen(const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RIntPtr getBlue()
    {
        return getBlue(0);
    }
    ::omero::RIntPtr getBlue(const ::Ice::Context& __ctx)
    {
        return getBlue(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getBlue(const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getBlue(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getBlue(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getBlue(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getBlue(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getBlue(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getBlue(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getBlue(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getBlue(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RIntPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::ChannelBindingPrx __proxy = ::omero::model::ChannelBindingPrx::uncheckedCast(__result->getProxy());
                ::omero::RIntPtr __ret;
                try
                {
                    __ret = __proxy->end_getBlue(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RIntPtr&)> _response;
        };
        return begin_getBlue(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getBlue()
    {
        return begin_getBlue(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getBlue(const ::Ice::Context& __ctx)
    {
        return begin_getBlue(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getBlue(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBlue(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBlue(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBlue(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBlue(const ::omero::model::Callback_ChannelBinding_getBluePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBlue(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBlue(const ::Ice::Context& __ctx, const ::omero::model::Callback_ChannelBinding_getBluePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBlue(&__ctx, __del, __cookie);
    }

    ::omero::RIntPtr end_getBlue(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RIntPtr getBlue(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getBlue(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setBlue(const ::omero::RIntPtr& theBlue)
    {
        setBlue(theBlue, 0);
    }
    void setBlue(const ::omero::RIntPtr& theBlue, const ::Ice::Context& __ctx)
    {
        setBlue(theBlue, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setBlue(const ::omero::RIntPtr& theBlue, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setBlue(theBlue, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setBlue(const ::omero::RIntPtr& theBlue, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setBlue(theBlue, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setBlue(const ::omero::RIntPtr& theBlue, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setBlue(theBlue, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setBlue(const ::omero::RIntPtr& theBlue, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setBlue(theBlue, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setBlue(const ::omero::RIntPtr& theBlue)
    {
        return begin_setBlue(theBlue, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setBlue(const ::omero::RIntPtr& theBlue, const ::Ice::Context& __ctx)
    {
        return begin_setBlue(theBlue, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setBlue(const ::omero::RIntPtr& theBlue, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setBlue(theBlue, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setBlue(const ::omero::RIntPtr& theBlue, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setBlue(theBlue, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setBlue(const ::omero::RIntPtr& theBlue, const ::omero::model::Callback_ChannelBinding_setBluePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setBlue(theBlue, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setBlue(const ::omero::RIntPtr& theBlue, const ::Ice::Context& __ctx, const ::omero::model::Callback_ChannelBinding_setBluePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setBlue(theBlue, &__ctx, __del, __cookie);
    }

    void end_setBlue(const ::Ice::AsyncResultPtr&);
    
private:

    void setBlue(const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setBlue(const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RIntPtr getAlpha()
    {
        return getAlpha(0);
    }
    ::omero::RIntPtr getAlpha(const ::Ice::Context& __ctx)
    {
        return getAlpha(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getAlpha(const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAlpha(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAlpha(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAlpha(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getAlpha(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAlpha(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAlpha(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAlpha(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getAlpha(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RIntPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::ChannelBindingPrx __proxy = ::omero::model::ChannelBindingPrx::uncheckedCast(__result->getProxy());
                ::omero::RIntPtr __ret;
                try
                {
                    __ret = __proxy->end_getAlpha(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RIntPtr&)> _response;
        };
        return begin_getAlpha(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getAlpha()
    {
        return begin_getAlpha(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAlpha(const ::Ice::Context& __ctx)
    {
        return begin_getAlpha(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAlpha(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAlpha(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAlpha(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAlpha(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAlpha(const ::omero::model::Callback_ChannelBinding_getAlphaPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAlpha(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAlpha(const ::Ice::Context& __ctx, const ::omero::model::Callback_ChannelBinding_getAlphaPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAlpha(&__ctx, __del, __cookie);
    }

    ::omero::RIntPtr end_getAlpha(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RIntPtr getAlpha(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getAlpha(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setAlpha(const ::omero::RIntPtr& theAlpha)
    {
        setAlpha(theAlpha, 0);
    }
    void setAlpha(const ::omero::RIntPtr& theAlpha, const ::Ice::Context& __ctx)
    {
        setAlpha(theAlpha, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setAlpha(const ::omero::RIntPtr& theAlpha, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setAlpha(theAlpha, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setAlpha(const ::omero::RIntPtr& theAlpha, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setAlpha(theAlpha, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setAlpha(const ::omero::RIntPtr& theAlpha, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setAlpha(theAlpha, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setAlpha(const ::omero::RIntPtr& theAlpha, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setAlpha(theAlpha, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setAlpha(const ::omero::RIntPtr& theAlpha)
    {
        return begin_setAlpha(theAlpha, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setAlpha(const ::omero::RIntPtr& theAlpha, const ::Ice::Context& __ctx)
    {
        return begin_setAlpha(theAlpha, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setAlpha(const ::omero::RIntPtr& theAlpha, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setAlpha(theAlpha, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setAlpha(const ::omero::RIntPtr& theAlpha, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setAlpha(theAlpha, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setAlpha(const ::omero::RIntPtr& theAlpha, const ::omero::model::Callback_ChannelBinding_setAlphaPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setAlpha(theAlpha, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setAlpha(const ::omero::RIntPtr& theAlpha, const ::Ice::Context& __ctx, const ::omero::model::Callback_ChannelBinding_setAlphaPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setAlpha(theAlpha, &__ctx, __del, __cookie);
    }

    void end_setAlpha(const ::Ice::AsyncResultPtr&);
    
private:

    void setAlpha(const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setAlpha(const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<ChannelBinding> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<ChannelBinding*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<ChannelBinding> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<ChannelBinding*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ChannelBinding> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<ChannelBinding*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<ChannelBinding> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<ChannelBinding*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ChannelBinding> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<ChannelBinding*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<ChannelBinding> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<ChannelBinding*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<ChannelBinding> ice_secure(bool __secure) const
    {
        return dynamic_cast<ChannelBinding*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<ChannelBinding> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<ChannelBinding*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<ChannelBinding> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<ChannelBinding*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<ChannelBinding> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<ChannelBinding*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<ChannelBinding> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<ChannelBinding*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<ChannelBinding> ice_twoway() const
    {
        return dynamic_cast<ChannelBinding*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<ChannelBinding> ice_oneway() const
    {
        return dynamic_cast<ChannelBinding*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<ChannelBinding> ice_batchOneway() const
    {
        return dynamic_cast<ChannelBinding*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<ChannelBinding> ice_datagram() const
    {
        return dynamic_cast<ChannelBinding*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<ChannelBinding> ice_batchDatagram() const
    {
        return dynamic_cast<ChannelBinding*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<ChannelBinding> ice_compress(bool __compress) const
    {
        return dynamic_cast<ChannelBinding*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<ChannelBinding> ice_timeout(int __timeout) const
    {
        return dynamic_cast<ChannelBinding*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ChannelBinding> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<ChannelBinding*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ChannelBinding> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<ChannelBinding*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

namespace IceDelegate
{

namespace omero
{

namespace model
{

class ChannelBinding : virtual public ::IceDelegate::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::RenderingDefPtr getRenderingDef(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setRenderingDef(const ::omero::model::RenderingDefPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::FamilyPtr getFamily(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setFamily(const ::omero::model::FamilyPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RDoublePtr getCoefficient(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setCoefficient(const ::omero::RDoublePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RDoublePtr getInputStart(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setInputStart(const ::omero::RDoublePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RDoublePtr getInputEnd(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setInputEnd(const ::omero::RDoublePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RBoolPtr getActive(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setActive(const ::omero::RBoolPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RBoolPtr getNoiseReduction(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setNoiseReduction(const ::omero::RBoolPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RIntPtr getRed(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setRed(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RIntPtr getGreen(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setGreen(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RIntPtr getBlue(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setBlue(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RIntPtr getAlpha(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setAlpha(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

}

namespace IceDelegateM
{

namespace omero
{

namespace model
{

class ChannelBinding : virtual public ::IceDelegate::omero::model::ChannelBinding,
                       virtual public ::IceDelegateM::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::RenderingDefPtr getRenderingDef(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setRenderingDef(const ::omero::model::RenderingDefPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::FamilyPtr getFamily(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setFamily(const ::omero::model::FamilyPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RDoublePtr getCoefficient(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setCoefficient(const ::omero::RDoublePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RDoublePtr getInputStart(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setInputStart(const ::omero::RDoublePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RDoublePtr getInputEnd(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setInputEnd(const ::omero::RDoublePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RBoolPtr getActive(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setActive(const ::omero::RBoolPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RBoolPtr getNoiseReduction(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setNoiseReduction(const ::omero::RBoolPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RIntPtr getRed(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setRed(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RIntPtr getGreen(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setGreen(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RIntPtr getBlue(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setBlue(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RIntPtr getAlpha(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setAlpha(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace IceDelegateD
{

namespace omero
{

namespace model
{

class ChannelBinding : virtual public ::IceDelegate::omero::model::ChannelBinding,
                       virtual public ::IceDelegateD::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::RenderingDefPtr getRenderingDef(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setRenderingDef(const ::omero::model::RenderingDefPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::FamilyPtr getFamily(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setFamily(const ::omero::model::FamilyPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RDoublePtr getCoefficient(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setCoefficient(const ::omero::RDoublePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RDoublePtr getInputStart(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setInputStart(const ::omero::RDoublePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RDoublePtr getInputEnd(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setInputEnd(const ::omero::RDoublePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RBoolPtr getActive(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setActive(const ::omero::RBoolPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RBoolPtr getNoiseReduction(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setNoiseReduction(const ::omero::RBoolPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RIntPtr getRed(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setRed(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RIntPtr getGreen(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setGreen(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RIntPtr getBlue(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setBlue(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RIntPtr getAlpha(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setAlpha(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace omero
{

namespace model
{

class ChannelBinding : public ::omero::model::IObject
{
public:

    typedef ChannelBindingPrx ProxyType;
    typedef ChannelBindingPtr PointerType;

    ChannelBinding()
    {
    }

    ChannelBinding(const ::omero::RLongPtr& __ice_id, const ::omero::model::DetailsPtr& __ice_details, bool __ice_loaded, const ::omero::RIntPtr& __ice_version, const ::omero::model::RenderingDefPtr& __ice_renderingDef, const ::omero::model::FamilyPtr& __ice_family, const ::omero::RDoublePtr& __ice_coefficient, const ::omero::RDoublePtr& __ice_inputStart, const ::omero::RDoublePtr& __ice_inputEnd, const ::omero::RBoolPtr& __ice_active, const ::omero::RBoolPtr& __ice_noiseReduction, const ::omero::RIntPtr& __ice_red, const ::omero::RIntPtr& __ice_green, const ::omero::RIntPtr& __ice_blue, const ::omero::RIntPtr& __ice_alpha) :
        ::omero::model::IObject(__ice_id, __ice_details, __ice_loaded)
        ,
        version(__ice_version),
        renderingDef(__ice_renderingDef),
        family(__ice_family),
        coefficient(__ice_coefficient),
        inputStart(__ice_inputStart),
        inputEnd(__ice_inputEnd),
        active(__ice_active),
        noiseReduction(__ice_noiseReduction),
        red(__ice_red),
        green(__ice_green),
        blue(__ice_blue),
        alpha(__ice_alpha)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    virtual ::omero::RIntPtr getVersion(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::RenderingDefPtr getRenderingDef(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getRenderingDef(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setRenderingDef(const ::omero::model::RenderingDefPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setRenderingDef(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::FamilyPtr getFamily(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getFamily(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setFamily(const ::omero::model::FamilyPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setFamily(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RDoublePtr getCoefficient(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getCoefficient(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setCoefficient(const ::omero::RDoublePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setCoefficient(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RDoublePtr getInputStart(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getInputStart(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setInputStart(const ::omero::RDoublePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setInputStart(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RDoublePtr getInputEnd(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getInputEnd(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setInputEnd(const ::omero::RDoublePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setInputEnd(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RBoolPtr getActive(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getActive(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setActive(const ::omero::RBoolPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setActive(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RBoolPtr getNoiseReduction(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getNoiseReduction(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setNoiseReduction(const ::omero::RBoolPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setNoiseReduction(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RIntPtr getRed(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getRed(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setRed(const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setRed(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RIntPtr getGreen(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getGreen(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setGreen(const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setGreen(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RIntPtr getBlue(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getBlue(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setBlue(const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setBlue(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RIntPtr getAlpha(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getAlpha(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setAlpha(const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setAlpha(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::model::IObject::__writeImpl;
    using ::omero::model::IObject::__readImpl;
    #endif

    ::omero::RIntPtr version;

    ::omero::model::RenderingDefPtr renderingDef;

    ::omero::model::FamilyPtr family;

    ::omero::RDoublePtr coefficient;

    ::omero::RDoublePtr inputStart;

    ::omero::RDoublePtr inputEnd;

    ::omero::RBoolPtr active;

    ::omero::RBoolPtr noiseReduction;

    ::omero::RIntPtr red;

    ::omero::RIntPtr green;

    ::omero::RIntPtr blue;

    ::omero::RIntPtr alpha;
};

inline bool operator==(const ChannelBinding& l, const ChannelBinding& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const ChannelBinding& l, const ChannelBinding& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

}

namespace omero
{

namespace model
{

template<class T>
class CallbackNC_ChannelBinding_getVersion : public Callback_ChannelBinding_getVersion_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RIntPtr&);

    CallbackNC_ChannelBinding_getVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ChannelBindingPrx __proxy = ::omero::model::ChannelBindingPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_ChannelBinding_getVersionPtr
newCallback_ChannelBinding_getVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_getVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ChannelBinding_getVersionPtr
newCallback_ChannelBinding_getVersion(T* instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_getVersion<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ChannelBinding_getVersion : public Callback_ChannelBinding_getVersion_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RIntPtr&, const CT&);

    Callback_ChannelBinding_getVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ChannelBindingPrx __proxy = ::omero::model::ChannelBindingPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ChannelBinding_getVersionPtr
newCallback_ChannelBinding_getVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_getVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ChannelBinding_getVersionPtr
newCallback_ChannelBinding_getVersion(T* instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_getVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ChannelBinding_setVersion : public Callback_ChannelBinding_setVersion_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ChannelBinding_setVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ChannelBinding_setVersionPtr
newCallback_ChannelBinding_setVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_setVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ChannelBinding_setVersionPtr
newCallback_ChannelBinding_setVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_setVersion<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ChannelBinding_setVersionPtr
newCallback_ChannelBinding_setVersion(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_setVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ChannelBinding_setVersionPtr
newCallback_ChannelBinding_setVersion(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_setVersion<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ChannelBinding_setVersion : public Callback_ChannelBinding_setVersion_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ChannelBinding_setVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ChannelBinding_setVersionPtr
newCallback_ChannelBinding_setVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_setVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ChannelBinding_setVersionPtr
newCallback_ChannelBinding_setVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_setVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ChannelBinding_setVersionPtr
newCallback_ChannelBinding_setVersion(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_setVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ChannelBinding_setVersionPtr
newCallback_ChannelBinding_setVersion(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_setVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ChannelBinding_getRenderingDef : public Callback_ChannelBinding_getRenderingDef_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::RenderingDefPtr&);

    CallbackNC_ChannelBinding_getRenderingDef(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ChannelBindingPrx __proxy = ::omero::model::ChannelBindingPrx::uncheckedCast(__result->getProxy());
        ::omero::model::RenderingDefPtr __ret;
        try
        {
            __ret = __proxy->end_getRenderingDef(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_ChannelBinding_getRenderingDefPtr
newCallback_ChannelBinding_getRenderingDef(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::RenderingDefPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_getRenderingDef<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ChannelBinding_getRenderingDefPtr
newCallback_ChannelBinding_getRenderingDef(T* instance, void (T::*cb)(const ::omero::model::RenderingDefPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_getRenderingDef<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ChannelBinding_getRenderingDef : public Callback_ChannelBinding_getRenderingDef_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::RenderingDefPtr&, const CT&);

    Callback_ChannelBinding_getRenderingDef(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ChannelBindingPrx __proxy = ::omero::model::ChannelBindingPrx::uncheckedCast(__result->getProxy());
        ::omero::model::RenderingDefPtr __ret;
        try
        {
            __ret = __proxy->end_getRenderingDef(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ChannelBinding_getRenderingDefPtr
newCallback_ChannelBinding_getRenderingDef(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::RenderingDefPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_getRenderingDef<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ChannelBinding_getRenderingDefPtr
newCallback_ChannelBinding_getRenderingDef(T* instance, void (T::*cb)(const ::omero::model::RenderingDefPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_getRenderingDef<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ChannelBinding_setRenderingDef : public Callback_ChannelBinding_setRenderingDef_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ChannelBinding_setRenderingDef(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ChannelBinding_setRenderingDefPtr
newCallback_ChannelBinding_setRenderingDef(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_setRenderingDef<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ChannelBinding_setRenderingDefPtr
newCallback_ChannelBinding_setRenderingDef(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_setRenderingDef<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ChannelBinding_setRenderingDefPtr
newCallback_ChannelBinding_setRenderingDef(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_setRenderingDef<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ChannelBinding_setRenderingDefPtr
newCallback_ChannelBinding_setRenderingDef(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_setRenderingDef<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ChannelBinding_setRenderingDef : public Callback_ChannelBinding_setRenderingDef_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ChannelBinding_setRenderingDef(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ChannelBinding_setRenderingDefPtr
newCallback_ChannelBinding_setRenderingDef(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_setRenderingDef<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ChannelBinding_setRenderingDefPtr
newCallback_ChannelBinding_setRenderingDef(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_setRenderingDef<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ChannelBinding_setRenderingDefPtr
newCallback_ChannelBinding_setRenderingDef(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_setRenderingDef<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ChannelBinding_setRenderingDefPtr
newCallback_ChannelBinding_setRenderingDef(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_setRenderingDef<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ChannelBinding_getFamily : public Callback_ChannelBinding_getFamily_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::FamilyPtr&);

    CallbackNC_ChannelBinding_getFamily(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ChannelBindingPrx __proxy = ::omero::model::ChannelBindingPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FamilyPtr __ret;
        try
        {
            __ret = __proxy->end_getFamily(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_ChannelBinding_getFamilyPtr
newCallback_ChannelBinding_getFamily(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FamilyPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_getFamily<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ChannelBinding_getFamilyPtr
newCallback_ChannelBinding_getFamily(T* instance, void (T::*cb)(const ::omero::model::FamilyPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_getFamily<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ChannelBinding_getFamily : public Callback_ChannelBinding_getFamily_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::FamilyPtr&, const CT&);

    Callback_ChannelBinding_getFamily(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ChannelBindingPrx __proxy = ::omero::model::ChannelBindingPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FamilyPtr __ret;
        try
        {
            __ret = __proxy->end_getFamily(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ChannelBinding_getFamilyPtr
newCallback_ChannelBinding_getFamily(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FamilyPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_getFamily<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ChannelBinding_getFamilyPtr
newCallback_ChannelBinding_getFamily(T* instance, void (T::*cb)(const ::omero::model::FamilyPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_getFamily<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ChannelBinding_setFamily : public Callback_ChannelBinding_setFamily_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ChannelBinding_setFamily(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ChannelBinding_setFamilyPtr
newCallback_ChannelBinding_setFamily(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_setFamily<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ChannelBinding_setFamilyPtr
newCallback_ChannelBinding_setFamily(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_setFamily<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ChannelBinding_setFamilyPtr
newCallback_ChannelBinding_setFamily(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_setFamily<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ChannelBinding_setFamilyPtr
newCallback_ChannelBinding_setFamily(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_setFamily<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ChannelBinding_setFamily : public Callback_ChannelBinding_setFamily_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ChannelBinding_setFamily(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ChannelBinding_setFamilyPtr
newCallback_ChannelBinding_setFamily(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_setFamily<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ChannelBinding_setFamilyPtr
newCallback_ChannelBinding_setFamily(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_setFamily<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ChannelBinding_setFamilyPtr
newCallback_ChannelBinding_setFamily(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_setFamily<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ChannelBinding_setFamilyPtr
newCallback_ChannelBinding_setFamily(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_setFamily<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ChannelBinding_getCoefficient : public Callback_ChannelBinding_getCoefficient_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RDoublePtr&);

    CallbackNC_ChannelBinding_getCoefficient(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ChannelBindingPrx __proxy = ::omero::model::ChannelBindingPrx::uncheckedCast(__result->getProxy());
        ::omero::RDoublePtr __ret;
        try
        {
            __ret = __proxy->end_getCoefficient(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_ChannelBinding_getCoefficientPtr
newCallback_ChannelBinding_getCoefficient(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RDoublePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_getCoefficient<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ChannelBinding_getCoefficientPtr
newCallback_ChannelBinding_getCoefficient(T* instance, void (T::*cb)(const ::omero::RDoublePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_getCoefficient<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ChannelBinding_getCoefficient : public Callback_ChannelBinding_getCoefficient_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RDoublePtr&, const CT&);

    Callback_ChannelBinding_getCoefficient(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ChannelBindingPrx __proxy = ::omero::model::ChannelBindingPrx::uncheckedCast(__result->getProxy());
        ::omero::RDoublePtr __ret;
        try
        {
            __ret = __proxy->end_getCoefficient(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ChannelBinding_getCoefficientPtr
newCallback_ChannelBinding_getCoefficient(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RDoublePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_getCoefficient<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ChannelBinding_getCoefficientPtr
newCallback_ChannelBinding_getCoefficient(T* instance, void (T::*cb)(const ::omero::RDoublePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_getCoefficient<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ChannelBinding_setCoefficient : public Callback_ChannelBinding_setCoefficient_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ChannelBinding_setCoefficient(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ChannelBinding_setCoefficientPtr
newCallback_ChannelBinding_setCoefficient(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_setCoefficient<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ChannelBinding_setCoefficientPtr
newCallback_ChannelBinding_setCoefficient(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_setCoefficient<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ChannelBinding_setCoefficientPtr
newCallback_ChannelBinding_setCoefficient(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_setCoefficient<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ChannelBinding_setCoefficientPtr
newCallback_ChannelBinding_setCoefficient(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_setCoefficient<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ChannelBinding_setCoefficient : public Callback_ChannelBinding_setCoefficient_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ChannelBinding_setCoefficient(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ChannelBinding_setCoefficientPtr
newCallback_ChannelBinding_setCoefficient(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_setCoefficient<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ChannelBinding_setCoefficientPtr
newCallback_ChannelBinding_setCoefficient(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_setCoefficient<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ChannelBinding_setCoefficientPtr
newCallback_ChannelBinding_setCoefficient(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_setCoefficient<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ChannelBinding_setCoefficientPtr
newCallback_ChannelBinding_setCoefficient(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_setCoefficient<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ChannelBinding_getInputStart : public Callback_ChannelBinding_getInputStart_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RDoublePtr&);

    CallbackNC_ChannelBinding_getInputStart(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ChannelBindingPrx __proxy = ::omero::model::ChannelBindingPrx::uncheckedCast(__result->getProxy());
        ::omero::RDoublePtr __ret;
        try
        {
            __ret = __proxy->end_getInputStart(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_ChannelBinding_getInputStartPtr
newCallback_ChannelBinding_getInputStart(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RDoublePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_getInputStart<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ChannelBinding_getInputStartPtr
newCallback_ChannelBinding_getInputStart(T* instance, void (T::*cb)(const ::omero::RDoublePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_getInputStart<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ChannelBinding_getInputStart : public Callback_ChannelBinding_getInputStart_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RDoublePtr&, const CT&);

    Callback_ChannelBinding_getInputStart(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ChannelBindingPrx __proxy = ::omero::model::ChannelBindingPrx::uncheckedCast(__result->getProxy());
        ::omero::RDoublePtr __ret;
        try
        {
            __ret = __proxy->end_getInputStart(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ChannelBinding_getInputStartPtr
newCallback_ChannelBinding_getInputStart(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RDoublePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_getInputStart<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ChannelBinding_getInputStartPtr
newCallback_ChannelBinding_getInputStart(T* instance, void (T::*cb)(const ::omero::RDoublePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_getInputStart<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ChannelBinding_setInputStart : public Callback_ChannelBinding_setInputStart_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ChannelBinding_setInputStart(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ChannelBinding_setInputStartPtr
newCallback_ChannelBinding_setInputStart(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_setInputStart<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ChannelBinding_setInputStartPtr
newCallback_ChannelBinding_setInputStart(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_setInputStart<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ChannelBinding_setInputStartPtr
newCallback_ChannelBinding_setInputStart(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_setInputStart<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ChannelBinding_setInputStartPtr
newCallback_ChannelBinding_setInputStart(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_setInputStart<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ChannelBinding_setInputStart : public Callback_ChannelBinding_setInputStart_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ChannelBinding_setInputStart(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ChannelBinding_setInputStartPtr
newCallback_ChannelBinding_setInputStart(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_setInputStart<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ChannelBinding_setInputStartPtr
newCallback_ChannelBinding_setInputStart(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_setInputStart<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ChannelBinding_setInputStartPtr
newCallback_ChannelBinding_setInputStart(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_setInputStart<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ChannelBinding_setInputStartPtr
newCallback_ChannelBinding_setInputStart(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_setInputStart<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ChannelBinding_getInputEnd : public Callback_ChannelBinding_getInputEnd_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RDoublePtr&);

    CallbackNC_ChannelBinding_getInputEnd(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ChannelBindingPrx __proxy = ::omero::model::ChannelBindingPrx::uncheckedCast(__result->getProxy());
        ::omero::RDoublePtr __ret;
        try
        {
            __ret = __proxy->end_getInputEnd(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_ChannelBinding_getInputEndPtr
newCallback_ChannelBinding_getInputEnd(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RDoublePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_getInputEnd<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ChannelBinding_getInputEndPtr
newCallback_ChannelBinding_getInputEnd(T* instance, void (T::*cb)(const ::omero::RDoublePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_getInputEnd<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ChannelBinding_getInputEnd : public Callback_ChannelBinding_getInputEnd_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RDoublePtr&, const CT&);

    Callback_ChannelBinding_getInputEnd(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ChannelBindingPrx __proxy = ::omero::model::ChannelBindingPrx::uncheckedCast(__result->getProxy());
        ::omero::RDoublePtr __ret;
        try
        {
            __ret = __proxy->end_getInputEnd(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ChannelBinding_getInputEndPtr
newCallback_ChannelBinding_getInputEnd(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RDoublePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_getInputEnd<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ChannelBinding_getInputEndPtr
newCallback_ChannelBinding_getInputEnd(T* instance, void (T::*cb)(const ::omero::RDoublePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_getInputEnd<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ChannelBinding_setInputEnd : public Callback_ChannelBinding_setInputEnd_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ChannelBinding_setInputEnd(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ChannelBinding_setInputEndPtr
newCallback_ChannelBinding_setInputEnd(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_setInputEnd<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ChannelBinding_setInputEndPtr
newCallback_ChannelBinding_setInputEnd(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_setInputEnd<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ChannelBinding_setInputEndPtr
newCallback_ChannelBinding_setInputEnd(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_setInputEnd<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ChannelBinding_setInputEndPtr
newCallback_ChannelBinding_setInputEnd(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_setInputEnd<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ChannelBinding_setInputEnd : public Callback_ChannelBinding_setInputEnd_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ChannelBinding_setInputEnd(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ChannelBinding_setInputEndPtr
newCallback_ChannelBinding_setInputEnd(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_setInputEnd<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ChannelBinding_setInputEndPtr
newCallback_ChannelBinding_setInputEnd(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_setInputEnd<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ChannelBinding_setInputEndPtr
newCallback_ChannelBinding_setInputEnd(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_setInputEnd<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ChannelBinding_setInputEndPtr
newCallback_ChannelBinding_setInputEnd(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_setInputEnd<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ChannelBinding_getActive : public Callback_ChannelBinding_getActive_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RBoolPtr&);

    CallbackNC_ChannelBinding_getActive(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ChannelBindingPrx __proxy = ::omero::model::ChannelBindingPrx::uncheckedCast(__result->getProxy());
        ::omero::RBoolPtr __ret;
        try
        {
            __ret = __proxy->end_getActive(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_ChannelBinding_getActivePtr
newCallback_ChannelBinding_getActive(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RBoolPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_getActive<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ChannelBinding_getActivePtr
newCallback_ChannelBinding_getActive(T* instance, void (T::*cb)(const ::omero::RBoolPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_getActive<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ChannelBinding_getActive : public Callback_ChannelBinding_getActive_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RBoolPtr&, const CT&);

    Callback_ChannelBinding_getActive(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ChannelBindingPrx __proxy = ::omero::model::ChannelBindingPrx::uncheckedCast(__result->getProxy());
        ::omero::RBoolPtr __ret;
        try
        {
            __ret = __proxy->end_getActive(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ChannelBinding_getActivePtr
newCallback_ChannelBinding_getActive(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RBoolPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_getActive<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ChannelBinding_getActivePtr
newCallback_ChannelBinding_getActive(T* instance, void (T::*cb)(const ::omero::RBoolPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_getActive<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ChannelBinding_setActive : public Callback_ChannelBinding_setActive_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ChannelBinding_setActive(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ChannelBinding_setActivePtr
newCallback_ChannelBinding_setActive(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_setActive<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ChannelBinding_setActivePtr
newCallback_ChannelBinding_setActive(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_setActive<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ChannelBinding_setActivePtr
newCallback_ChannelBinding_setActive(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_setActive<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ChannelBinding_setActivePtr
newCallback_ChannelBinding_setActive(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_setActive<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ChannelBinding_setActive : public Callback_ChannelBinding_setActive_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ChannelBinding_setActive(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ChannelBinding_setActivePtr
newCallback_ChannelBinding_setActive(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_setActive<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ChannelBinding_setActivePtr
newCallback_ChannelBinding_setActive(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_setActive<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ChannelBinding_setActivePtr
newCallback_ChannelBinding_setActive(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_setActive<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ChannelBinding_setActivePtr
newCallback_ChannelBinding_setActive(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_setActive<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ChannelBinding_getNoiseReduction : public Callback_ChannelBinding_getNoiseReduction_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RBoolPtr&);

    CallbackNC_ChannelBinding_getNoiseReduction(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ChannelBindingPrx __proxy = ::omero::model::ChannelBindingPrx::uncheckedCast(__result->getProxy());
        ::omero::RBoolPtr __ret;
        try
        {
            __ret = __proxy->end_getNoiseReduction(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_ChannelBinding_getNoiseReductionPtr
newCallback_ChannelBinding_getNoiseReduction(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RBoolPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_getNoiseReduction<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ChannelBinding_getNoiseReductionPtr
newCallback_ChannelBinding_getNoiseReduction(T* instance, void (T::*cb)(const ::omero::RBoolPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_getNoiseReduction<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ChannelBinding_getNoiseReduction : public Callback_ChannelBinding_getNoiseReduction_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RBoolPtr&, const CT&);

    Callback_ChannelBinding_getNoiseReduction(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ChannelBindingPrx __proxy = ::omero::model::ChannelBindingPrx::uncheckedCast(__result->getProxy());
        ::omero::RBoolPtr __ret;
        try
        {
            __ret = __proxy->end_getNoiseReduction(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ChannelBinding_getNoiseReductionPtr
newCallback_ChannelBinding_getNoiseReduction(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RBoolPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_getNoiseReduction<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ChannelBinding_getNoiseReductionPtr
newCallback_ChannelBinding_getNoiseReduction(T* instance, void (T::*cb)(const ::omero::RBoolPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_getNoiseReduction<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ChannelBinding_setNoiseReduction : public Callback_ChannelBinding_setNoiseReduction_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ChannelBinding_setNoiseReduction(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ChannelBinding_setNoiseReductionPtr
newCallback_ChannelBinding_setNoiseReduction(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_setNoiseReduction<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ChannelBinding_setNoiseReductionPtr
newCallback_ChannelBinding_setNoiseReduction(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_setNoiseReduction<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ChannelBinding_setNoiseReductionPtr
newCallback_ChannelBinding_setNoiseReduction(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_setNoiseReduction<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ChannelBinding_setNoiseReductionPtr
newCallback_ChannelBinding_setNoiseReduction(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_setNoiseReduction<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ChannelBinding_setNoiseReduction : public Callback_ChannelBinding_setNoiseReduction_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ChannelBinding_setNoiseReduction(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ChannelBinding_setNoiseReductionPtr
newCallback_ChannelBinding_setNoiseReduction(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_setNoiseReduction<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ChannelBinding_setNoiseReductionPtr
newCallback_ChannelBinding_setNoiseReduction(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_setNoiseReduction<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ChannelBinding_setNoiseReductionPtr
newCallback_ChannelBinding_setNoiseReduction(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_setNoiseReduction<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ChannelBinding_setNoiseReductionPtr
newCallback_ChannelBinding_setNoiseReduction(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_setNoiseReduction<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ChannelBinding_getRed : public Callback_ChannelBinding_getRed_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RIntPtr&);

    CallbackNC_ChannelBinding_getRed(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ChannelBindingPrx __proxy = ::omero::model::ChannelBindingPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getRed(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_ChannelBinding_getRedPtr
newCallback_ChannelBinding_getRed(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_getRed<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ChannelBinding_getRedPtr
newCallback_ChannelBinding_getRed(T* instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_getRed<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ChannelBinding_getRed : public Callback_ChannelBinding_getRed_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RIntPtr&, const CT&);

    Callback_ChannelBinding_getRed(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ChannelBindingPrx __proxy = ::omero::model::ChannelBindingPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getRed(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ChannelBinding_getRedPtr
newCallback_ChannelBinding_getRed(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_getRed<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ChannelBinding_getRedPtr
newCallback_ChannelBinding_getRed(T* instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_getRed<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ChannelBinding_setRed : public Callback_ChannelBinding_setRed_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ChannelBinding_setRed(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ChannelBinding_setRedPtr
newCallback_ChannelBinding_setRed(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_setRed<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ChannelBinding_setRedPtr
newCallback_ChannelBinding_setRed(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_setRed<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ChannelBinding_setRedPtr
newCallback_ChannelBinding_setRed(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_setRed<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ChannelBinding_setRedPtr
newCallback_ChannelBinding_setRed(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_setRed<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ChannelBinding_setRed : public Callback_ChannelBinding_setRed_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ChannelBinding_setRed(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ChannelBinding_setRedPtr
newCallback_ChannelBinding_setRed(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_setRed<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ChannelBinding_setRedPtr
newCallback_ChannelBinding_setRed(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_setRed<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ChannelBinding_setRedPtr
newCallback_ChannelBinding_setRed(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_setRed<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ChannelBinding_setRedPtr
newCallback_ChannelBinding_setRed(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_setRed<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ChannelBinding_getGreen : public Callback_ChannelBinding_getGreen_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RIntPtr&);

    CallbackNC_ChannelBinding_getGreen(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ChannelBindingPrx __proxy = ::omero::model::ChannelBindingPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getGreen(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_ChannelBinding_getGreenPtr
newCallback_ChannelBinding_getGreen(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_getGreen<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ChannelBinding_getGreenPtr
newCallback_ChannelBinding_getGreen(T* instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_getGreen<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ChannelBinding_getGreen : public Callback_ChannelBinding_getGreen_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RIntPtr&, const CT&);

    Callback_ChannelBinding_getGreen(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ChannelBindingPrx __proxy = ::omero::model::ChannelBindingPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getGreen(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ChannelBinding_getGreenPtr
newCallback_ChannelBinding_getGreen(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_getGreen<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ChannelBinding_getGreenPtr
newCallback_ChannelBinding_getGreen(T* instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_getGreen<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ChannelBinding_setGreen : public Callback_ChannelBinding_setGreen_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ChannelBinding_setGreen(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ChannelBinding_setGreenPtr
newCallback_ChannelBinding_setGreen(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_setGreen<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ChannelBinding_setGreenPtr
newCallback_ChannelBinding_setGreen(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_setGreen<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ChannelBinding_setGreenPtr
newCallback_ChannelBinding_setGreen(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_setGreen<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ChannelBinding_setGreenPtr
newCallback_ChannelBinding_setGreen(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_setGreen<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ChannelBinding_setGreen : public Callback_ChannelBinding_setGreen_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ChannelBinding_setGreen(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ChannelBinding_setGreenPtr
newCallback_ChannelBinding_setGreen(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_setGreen<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ChannelBinding_setGreenPtr
newCallback_ChannelBinding_setGreen(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_setGreen<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ChannelBinding_setGreenPtr
newCallback_ChannelBinding_setGreen(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_setGreen<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ChannelBinding_setGreenPtr
newCallback_ChannelBinding_setGreen(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_setGreen<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ChannelBinding_getBlue : public Callback_ChannelBinding_getBlue_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RIntPtr&);

    CallbackNC_ChannelBinding_getBlue(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ChannelBindingPrx __proxy = ::omero::model::ChannelBindingPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getBlue(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_ChannelBinding_getBluePtr
newCallback_ChannelBinding_getBlue(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_getBlue<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ChannelBinding_getBluePtr
newCallback_ChannelBinding_getBlue(T* instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_getBlue<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ChannelBinding_getBlue : public Callback_ChannelBinding_getBlue_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RIntPtr&, const CT&);

    Callback_ChannelBinding_getBlue(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ChannelBindingPrx __proxy = ::omero::model::ChannelBindingPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getBlue(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ChannelBinding_getBluePtr
newCallback_ChannelBinding_getBlue(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_getBlue<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ChannelBinding_getBluePtr
newCallback_ChannelBinding_getBlue(T* instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_getBlue<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ChannelBinding_setBlue : public Callback_ChannelBinding_setBlue_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ChannelBinding_setBlue(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ChannelBinding_setBluePtr
newCallback_ChannelBinding_setBlue(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_setBlue<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ChannelBinding_setBluePtr
newCallback_ChannelBinding_setBlue(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_setBlue<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ChannelBinding_setBluePtr
newCallback_ChannelBinding_setBlue(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_setBlue<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ChannelBinding_setBluePtr
newCallback_ChannelBinding_setBlue(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_setBlue<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ChannelBinding_setBlue : public Callback_ChannelBinding_setBlue_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ChannelBinding_setBlue(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ChannelBinding_setBluePtr
newCallback_ChannelBinding_setBlue(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_setBlue<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ChannelBinding_setBluePtr
newCallback_ChannelBinding_setBlue(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_setBlue<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ChannelBinding_setBluePtr
newCallback_ChannelBinding_setBlue(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_setBlue<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ChannelBinding_setBluePtr
newCallback_ChannelBinding_setBlue(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_setBlue<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ChannelBinding_getAlpha : public Callback_ChannelBinding_getAlpha_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RIntPtr&);

    CallbackNC_ChannelBinding_getAlpha(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ChannelBindingPrx __proxy = ::omero::model::ChannelBindingPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getAlpha(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_ChannelBinding_getAlphaPtr
newCallback_ChannelBinding_getAlpha(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_getAlpha<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ChannelBinding_getAlphaPtr
newCallback_ChannelBinding_getAlpha(T* instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_getAlpha<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ChannelBinding_getAlpha : public Callback_ChannelBinding_getAlpha_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RIntPtr&, const CT&);

    Callback_ChannelBinding_getAlpha(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ChannelBindingPrx __proxy = ::omero::model::ChannelBindingPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getAlpha(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ChannelBinding_getAlphaPtr
newCallback_ChannelBinding_getAlpha(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_getAlpha<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ChannelBinding_getAlphaPtr
newCallback_ChannelBinding_getAlpha(T* instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_getAlpha<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ChannelBinding_setAlpha : public Callback_ChannelBinding_setAlpha_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ChannelBinding_setAlpha(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ChannelBinding_setAlphaPtr
newCallback_ChannelBinding_setAlpha(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_setAlpha<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ChannelBinding_setAlphaPtr
newCallback_ChannelBinding_setAlpha(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_setAlpha<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ChannelBinding_setAlphaPtr
newCallback_ChannelBinding_setAlpha(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_setAlpha<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ChannelBinding_setAlphaPtr
newCallback_ChannelBinding_setAlpha(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChannelBinding_setAlpha<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ChannelBinding_setAlpha : public Callback_ChannelBinding_setAlpha_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ChannelBinding_setAlpha(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ChannelBinding_setAlphaPtr
newCallback_ChannelBinding_setAlpha(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_setAlpha<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ChannelBinding_setAlphaPtr
newCallback_ChannelBinding_setAlpha(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_setAlpha<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ChannelBinding_setAlphaPtr
newCallback_ChannelBinding_setAlpha(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_setAlpha<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ChannelBinding_setAlphaPtr
newCallback_ChannelBinding_setAlpha(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChannelBinding_setAlpha<T, CT>(instance, 0, excb, sentcb);
}

}

}

#endif
