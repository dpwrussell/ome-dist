// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `Screen.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_Screen_h__
#define __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_Screen_h__

#include <Ice/LocalObjectF.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/StreamF.h>
#include <omero/model/IObject.h>
#include <omero/RTypes.h>
#include <omero/System.h>
#include <omero/Collections.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace omero
{

namespace model
{

class ScreenPlateLink;

class Plate;

class Reagent;

class ScreenAnnotationLink;

class Annotation;

class Details;

class Screen;

}

}

}

namespace omero
{

namespace model
{

class ScreenPlateLink;
bool operator==(const ScreenPlateLink&, const ScreenPlateLink&);
bool operator<(const ScreenPlateLink&, const ScreenPlateLink&);

class Plate;
bool operator==(const Plate&, const Plate&);
bool operator<(const Plate&, const Plate&);

class Reagent;
bool operator==(const Reagent&, const Reagent&);
bool operator<(const Reagent&, const Reagent&);

class ScreenAnnotationLink;
bool operator==(const ScreenAnnotationLink&, const ScreenAnnotationLink&);
bool operator<(const ScreenAnnotationLink&, const ScreenAnnotationLink&);

class Annotation;
bool operator==(const Annotation&, const Annotation&);
bool operator<(const Annotation&, const Annotation&);

class Details;
bool operator==(const Details&, const Details&);
bool operator<(const Details&, const Details&);

class Screen;
bool operator==(const Screen&, const Screen&);
bool operator<(const Screen&, const Screen&);

}

}

namespace IceInternal
{

::Ice::Object* upCast(::omero::model::ScreenPlateLink*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::ScreenPlateLink*);

::Ice::Object* upCast(::omero::model::Plate*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Plate*);

::Ice::Object* upCast(::omero::model::Reagent*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Reagent*);

::Ice::Object* upCast(::omero::model::ScreenAnnotationLink*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::ScreenAnnotationLink*);

::Ice::Object* upCast(::omero::model::Annotation*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Annotation*);

::Ice::Object* upCast(::omero::model::Details*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Details*);

::Ice::Object* upCast(::omero::model::Screen*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Screen*);

}

namespace omero
{

namespace model
{

typedef ::IceInternal::Handle< ::omero::model::ScreenPlateLink> ScreenPlateLinkPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::ScreenPlateLink> ScreenPlateLinkPrx;

void __read(::IceInternal::BasicStream*, ScreenPlateLinkPrx&);
void __patch__ScreenPlateLinkPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::Plate> PlatePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Plate> PlatePrx;

void __read(::IceInternal::BasicStream*, PlatePrx&);
void __patch__PlatePtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::Reagent> ReagentPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Reagent> ReagentPrx;

void __read(::IceInternal::BasicStream*, ReagentPrx&);
void __patch__ReagentPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::ScreenAnnotationLink> ScreenAnnotationLinkPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::ScreenAnnotationLink> ScreenAnnotationLinkPrx;

void __read(::IceInternal::BasicStream*, ScreenAnnotationLinkPrx&);
void __patch__ScreenAnnotationLinkPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::Annotation> AnnotationPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Annotation> AnnotationPrx;

void __read(::IceInternal::BasicStream*, AnnotationPrx&);
void __patch__AnnotationPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::Details> DetailsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Details> DetailsPrx;

void __read(::IceInternal::BasicStream*, DetailsPrx&);
void __patch__DetailsPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::Screen> ScreenPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Screen> ScreenPrx;

void __read(::IceInternal::BasicStream*, ScreenPrx&);
void __patch__ScreenPtr(void*, ::Ice::ObjectPtr&);

}

}

namespace omero
{

namespace model
{

typedef ::std::vector< ::omero::model::ScreenPlateLinkPtr> ScreenPlateLinksSeq;
void __writeScreenPlateLinksSeq(::IceInternal::BasicStream*, const ::omero::model::ScreenPlateLinkPtr*, const ::omero::model::ScreenPlateLinkPtr*);
void __readScreenPlateLinksSeq(::IceInternal::BasicStream*, ScreenPlateLinksSeq&);

typedef ::std::vector< ::omero::model::PlatePtr> ScreenLinkedPlateSeq;
void __writeScreenLinkedPlateSeq(::IceInternal::BasicStream*, const ::omero::model::PlatePtr*, const ::omero::model::PlatePtr*);
void __readScreenLinkedPlateSeq(::IceInternal::BasicStream*, ScreenLinkedPlateSeq&);

typedef ::std::vector< ::omero::model::ReagentPtr> ScreenReagentsSeq;
void __writeScreenReagentsSeq(::IceInternal::BasicStream*, const ::omero::model::ReagentPtr*, const ::omero::model::ReagentPtr*);
void __readScreenReagentsSeq(::IceInternal::BasicStream*, ScreenReagentsSeq&);

typedef ::std::vector< ::omero::model::ScreenAnnotationLinkPtr> ScreenAnnotationLinksSeq;
void __writeScreenAnnotationLinksSeq(::IceInternal::BasicStream*, const ::omero::model::ScreenAnnotationLinkPtr*, const ::omero::model::ScreenAnnotationLinkPtr*);
void __readScreenAnnotationLinksSeq(::IceInternal::BasicStream*, ScreenAnnotationLinksSeq&);

typedef ::std::vector< ::omero::model::AnnotationPtr> ScreenLinkedAnnotationSeq;
void __writeScreenLinkedAnnotationSeq(::IceInternal::BasicStream*, const ::omero::model::AnnotationPtr*, const ::omero::model::AnnotationPtr*);
void __readScreenLinkedAnnotationSeq(::IceInternal::BasicStream*, ScreenLinkedAnnotationSeq&);

}

}

namespace omero
{

namespace model
{

class Callback_Screen_getVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Screen_getVersion_Base> Callback_Screen_getVersionPtr;

class Callback_Screen_setVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Screen_setVersion_Base> Callback_Screen_setVersionPtr;

class Callback_Screen_getType_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Screen_getType_Base> Callback_Screen_getTypePtr;

class Callback_Screen_setType_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Screen_setType_Base> Callback_Screen_setTypePtr;

class Callback_Screen_getProtocolIdentifier_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Screen_getProtocolIdentifier_Base> Callback_Screen_getProtocolIdentifierPtr;

class Callback_Screen_setProtocolIdentifier_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Screen_setProtocolIdentifier_Base> Callback_Screen_setProtocolIdentifierPtr;

class Callback_Screen_getProtocolDescription_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Screen_getProtocolDescription_Base> Callback_Screen_getProtocolDescriptionPtr;

class Callback_Screen_setProtocolDescription_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Screen_setProtocolDescription_Base> Callback_Screen_setProtocolDescriptionPtr;

class Callback_Screen_getReagentSetIdentifier_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Screen_getReagentSetIdentifier_Base> Callback_Screen_getReagentSetIdentifierPtr;

class Callback_Screen_setReagentSetIdentifier_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Screen_setReagentSetIdentifier_Base> Callback_Screen_setReagentSetIdentifierPtr;

class Callback_Screen_getReagentSetDescription_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Screen_getReagentSetDescription_Base> Callback_Screen_getReagentSetDescriptionPtr;

class Callback_Screen_setReagentSetDescription_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Screen_setReagentSetDescription_Base> Callback_Screen_setReagentSetDescriptionPtr;

class Callback_Screen_unloadPlateLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Screen_unloadPlateLinks_Base> Callback_Screen_unloadPlateLinksPtr;

class Callback_Screen_sizeOfPlateLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Screen_sizeOfPlateLinks_Base> Callback_Screen_sizeOfPlateLinksPtr;

class Callback_Screen_copyPlateLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Screen_copyPlateLinks_Base> Callback_Screen_copyPlateLinksPtr;

class Callback_Screen_addScreenPlateLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Screen_addScreenPlateLink_Base> Callback_Screen_addScreenPlateLinkPtr;

class Callback_Screen_addAllScreenPlateLinkSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Screen_addAllScreenPlateLinkSet_Base> Callback_Screen_addAllScreenPlateLinkSetPtr;

class Callback_Screen_removeScreenPlateLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Screen_removeScreenPlateLink_Base> Callback_Screen_removeScreenPlateLinkPtr;

class Callback_Screen_removeAllScreenPlateLinkSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Screen_removeAllScreenPlateLinkSet_Base> Callback_Screen_removeAllScreenPlateLinkSetPtr;

class Callback_Screen_clearPlateLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Screen_clearPlateLinks_Base> Callback_Screen_clearPlateLinksPtr;

class Callback_Screen_reloadPlateLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Screen_reloadPlateLinks_Base> Callback_Screen_reloadPlateLinksPtr;

class Callback_Screen_getPlateLinksCountPerOwner_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Screen_getPlateLinksCountPerOwner_Base> Callback_Screen_getPlateLinksCountPerOwnerPtr;

class Callback_Screen_linkPlate_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Screen_linkPlate_Base> Callback_Screen_linkPlatePtr;

class Callback_Screen_addScreenPlateLinkToBoth_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Screen_addScreenPlateLinkToBoth_Base> Callback_Screen_addScreenPlateLinkToBothPtr;

class Callback_Screen_findScreenPlateLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Screen_findScreenPlateLink_Base> Callback_Screen_findScreenPlateLinkPtr;

class Callback_Screen_unlinkPlate_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Screen_unlinkPlate_Base> Callback_Screen_unlinkPlatePtr;

class Callback_Screen_removeScreenPlateLinkFromBoth_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Screen_removeScreenPlateLinkFromBoth_Base> Callback_Screen_removeScreenPlateLinkFromBothPtr;

class Callback_Screen_linkedPlateList_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Screen_linkedPlateList_Base> Callback_Screen_linkedPlateListPtr;

class Callback_Screen_unloadReagents_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Screen_unloadReagents_Base> Callback_Screen_unloadReagentsPtr;

class Callback_Screen_sizeOfReagents_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Screen_sizeOfReagents_Base> Callback_Screen_sizeOfReagentsPtr;

class Callback_Screen_copyReagents_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Screen_copyReagents_Base> Callback_Screen_copyReagentsPtr;

class Callback_Screen_addReagent_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Screen_addReagent_Base> Callback_Screen_addReagentPtr;

class Callback_Screen_addAllReagentSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Screen_addAllReagentSet_Base> Callback_Screen_addAllReagentSetPtr;

class Callback_Screen_removeReagent_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Screen_removeReagent_Base> Callback_Screen_removeReagentPtr;

class Callback_Screen_removeAllReagentSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Screen_removeAllReagentSet_Base> Callback_Screen_removeAllReagentSetPtr;

class Callback_Screen_clearReagents_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Screen_clearReagents_Base> Callback_Screen_clearReagentsPtr;

class Callback_Screen_reloadReagents_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Screen_reloadReagents_Base> Callback_Screen_reloadReagentsPtr;

class Callback_Screen_unloadAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Screen_unloadAnnotationLinks_Base> Callback_Screen_unloadAnnotationLinksPtr;

class Callback_Screen_sizeOfAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Screen_sizeOfAnnotationLinks_Base> Callback_Screen_sizeOfAnnotationLinksPtr;

class Callback_Screen_copyAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Screen_copyAnnotationLinks_Base> Callback_Screen_copyAnnotationLinksPtr;

class Callback_Screen_addScreenAnnotationLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Screen_addScreenAnnotationLink_Base> Callback_Screen_addScreenAnnotationLinkPtr;

class Callback_Screen_addAllScreenAnnotationLinkSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Screen_addAllScreenAnnotationLinkSet_Base> Callback_Screen_addAllScreenAnnotationLinkSetPtr;

class Callback_Screen_removeScreenAnnotationLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Screen_removeScreenAnnotationLink_Base> Callback_Screen_removeScreenAnnotationLinkPtr;

class Callback_Screen_removeAllScreenAnnotationLinkSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Screen_removeAllScreenAnnotationLinkSet_Base> Callback_Screen_removeAllScreenAnnotationLinkSetPtr;

class Callback_Screen_clearAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Screen_clearAnnotationLinks_Base> Callback_Screen_clearAnnotationLinksPtr;

class Callback_Screen_reloadAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Screen_reloadAnnotationLinks_Base> Callback_Screen_reloadAnnotationLinksPtr;

class Callback_Screen_getAnnotationLinksCountPerOwner_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Screen_getAnnotationLinksCountPerOwner_Base> Callback_Screen_getAnnotationLinksCountPerOwnerPtr;

class Callback_Screen_linkAnnotation_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Screen_linkAnnotation_Base> Callback_Screen_linkAnnotationPtr;

class Callback_Screen_addScreenAnnotationLinkToBoth_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Screen_addScreenAnnotationLinkToBoth_Base> Callback_Screen_addScreenAnnotationLinkToBothPtr;

class Callback_Screen_findScreenAnnotationLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Screen_findScreenAnnotationLink_Base> Callback_Screen_findScreenAnnotationLinkPtr;

class Callback_Screen_unlinkAnnotation_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Screen_unlinkAnnotation_Base> Callback_Screen_unlinkAnnotationPtr;

class Callback_Screen_removeScreenAnnotationLinkFromBoth_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Screen_removeScreenAnnotationLinkFromBoth_Base> Callback_Screen_removeScreenAnnotationLinkFromBothPtr;

class Callback_Screen_linkedAnnotationList_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Screen_linkedAnnotationList_Base> Callback_Screen_linkedAnnotationListPtr;

class Callback_Screen_getName_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Screen_getName_Base> Callback_Screen_getNamePtr;

class Callback_Screen_setName_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Screen_setName_Base> Callback_Screen_setNamePtr;

class Callback_Screen_getDescription_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Screen_getDescription_Base> Callback_Screen_getDescriptionPtr;

class Callback_Screen_setDescription_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Screen_setDescription_Base> Callback_Screen_setDescriptionPtr;

}

}

namespace IceProxy
{

namespace omero
{

namespace model
{

class Screen : virtual public ::IceProxy::omero::model::IObject
{
public:

    ::omero::RIntPtr getVersion()
    {
        return getVersion(0);
    }
    ::omero::RIntPtr getVersion(const ::Ice::Context& __ctx)
    {
        return getVersion(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getVersion()
    {
        return begin_getVersion(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx)
    {
        return begin_getVersion(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::omero::model::Callback_Screen_getVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx, const ::omero::model::Callback_Screen_getVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(&__ctx, __del, __cookie);
    }

    ::omero::RIntPtr end_getVersion(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RIntPtr getVersion(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setVersion(const ::omero::RIntPtr& theVersion)
    {
        setVersion(theVersion, 0);
    }
    void setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx)
    {
        setVersion(theVersion, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion)
    {
        return begin_setVersion(theVersion, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx)
    {
        return begin_setVersion(theVersion, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::omero::model::Callback_Screen_setVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::omero::model::Callback_Screen_setVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, &__ctx, __del, __cookie);
    }

    void end_setVersion(const ::Ice::AsyncResultPtr&);
    
private:

    void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getType()
    {
        return getType(0);
    }
    ::omero::RStringPtr getType(const ::Ice::Context& __ctx)
    {
        return getType(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getType()
    {
        return begin_getType(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getType(const ::Ice::Context& __ctx)
    {
        return begin_getType(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getType(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getType(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getType(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getType(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getType(const ::omero::model::Callback_Screen_getTypePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getType(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getType(const ::Ice::Context& __ctx, const ::omero::model::Callback_Screen_getTypePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getType(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getType(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getType(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getType(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setType(const ::omero::RStringPtr& theType)
    {
        setType(theType, 0);
    }
    void setType(const ::omero::RStringPtr& theType, const ::Ice::Context& __ctx)
    {
        setType(theType, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setType(const ::omero::RStringPtr& theType)
    {
        return begin_setType(theType, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setType(const ::omero::RStringPtr& theType, const ::Ice::Context& __ctx)
    {
        return begin_setType(theType, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setType(const ::omero::RStringPtr& theType, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setType(theType, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setType(const ::omero::RStringPtr& theType, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setType(theType, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setType(const ::omero::RStringPtr& theType, const ::omero::model::Callback_Screen_setTypePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setType(theType, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setType(const ::omero::RStringPtr& theType, const ::Ice::Context& __ctx, const ::omero::model::Callback_Screen_setTypePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setType(theType, &__ctx, __del, __cookie);
    }

    void end_setType(const ::Ice::AsyncResultPtr&);
    
private:

    void setType(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setType(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getProtocolIdentifier()
    {
        return getProtocolIdentifier(0);
    }
    ::omero::RStringPtr getProtocolIdentifier(const ::Ice::Context& __ctx)
    {
        return getProtocolIdentifier(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getProtocolIdentifier()
    {
        return begin_getProtocolIdentifier(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getProtocolIdentifier(const ::Ice::Context& __ctx)
    {
        return begin_getProtocolIdentifier(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getProtocolIdentifier(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getProtocolIdentifier(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getProtocolIdentifier(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getProtocolIdentifier(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getProtocolIdentifier(const ::omero::model::Callback_Screen_getProtocolIdentifierPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getProtocolIdentifier(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getProtocolIdentifier(const ::Ice::Context& __ctx, const ::omero::model::Callback_Screen_getProtocolIdentifierPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getProtocolIdentifier(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getProtocolIdentifier(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getProtocolIdentifier(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getProtocolIdentifier(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setProtocolIdentifier(const ::omero::RStringPtr& theProtocolIdentifier)
    {
        setProtocolIdentifier(theProtocolIdentifier, 0);
    }
    void setProtocolIdentifier(const ::omero::RStringPtr& theProtocolIdentifier, const ::Ice::Context& __ctx)
    {
        setProtocolIdentifier(theProtocolIdentifier, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setProtocolIdentifier(const ::omero::RStringPtr& theProtocolIdentifier)
    {
        return begin_setProtocolIdentifier(theProtocolIdentifier, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setProtocolIdentifier(const ::omero::RStringPtr& theProtocolIdentifier, const ::Ice::Context& __ctx)
    {
        return begin_setProtocolIdentifier(theProtocolIdentifier, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setProtocolIdentifier(const ::omero::RStringPtr& theProtocolIdentifier, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setProtocolIdentifier(theProtocolIdentifier, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setProtocolIdentifier(const ::omero::RStringPtr& theProtocolIdentifier, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setProtocolIdentifier(theProtocolIdentifier, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setProtocolIdentifier(const ::omero::RStringPtr& theProtocolIdentifier, const ::omero::model::Callback_Screen_setProtocolIdentifierPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setProtocolIdentifier(theProtocolIdentifier, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setProtocolIdentifier(const ::omero::RStringPtr& theProtocolIdentifier, const ::Ice::Context& __ctx, const ::omero::model::Callback_Screen_setProtocolIdentifierPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setProtocolIdentifier(theProtocolIdentifier, &__ctx, __del, __cookie);
    }

    void end_setProtocolIdentifier(const ::Ice::AsyncResultPtr&);
    
private:

    void setProtocolIdentifier(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setProtocolIdentifier(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getProtocolDescription()
    {
        return getProtocolDescription(0);
    }
    ::omero::RStringPtr getProtocolDescription(const ::Ice::Context& __ctx)
    {
        return getProtocolDescription(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getProtocolDescription()
    {
        return begin_getProtocolDescription(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getProtocolDescription(const ::Ice::Context& __ctx)
    {
        return begin_getProtocolDescription(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getProtocolDescription(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getProtocolDescription(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getProtocolDescription(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getProtocolDescription(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getProtocolDescription(const ::omero::model::Callback_Screen_getProtocolDescriptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getProtocolDescription(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getProtocolDescription(const ::Ice::Context& __ctx, const ::omero::model::Callback_Screen_getProtocolDescriptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getProtocolDescription(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getProtocolDescription(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getProtocolDescription(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getProtocolDescription(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setProtocolDescription(const ::omero::RStringPtr& theProtocolDescription)
    {
        setProtocolDescription(theProtocolDescription, 0);
    }
    void setProtocolDescription(const ::omero::RStringPtr& theProtocolDescription, const ::Ice::Context& __ctx)
    {
        setProtocolDescription(theProtocolDescription, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setProtocolDescription(const ::omero::RStringPtr& theProtocolDescription)
    {
        return begin_setProtocolDescription(theProtocolDescription, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setProtocolDescription(const ::omero::RStringPtr& theProtocolDescription, const ::Ice::Context& __ctx)
    {
        return begin_setProtocolDescription(theProtocolDescription, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setProtocolDescription(const ::omero::RStringPtr& theProtocolDescription, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setProtocolDescription(theProtocolDescription, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setProtocolDescription(const ::omero::RStringPtr& theProtocolDescription, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setProtocolDescription(theProtocolDescription, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setProtocolDescription(const ::omero::RStringPtr& theProtocolDescription, const ::omero::model::Callback_Screen_setProtocolDescriptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setProtocolDescription(theProtocolDescription, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setProtocolDescription(const ::omero::RStringPtr& theProtocolDescription, const ::Ice::Context& __ctx, const ::omero::model::Callback_Screen_setProtocolDescriptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setProtocolDescription(theProtocolDescription, &__ctx, __del, __cookie);
    }

    void end_setProtocolDescription(const ::Ice::AsyncResultPtr&);
    
private:

    void setProtocolDescription(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setProtocolDescription(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getReagentSetIdentifier()
    {
        return getReagentSetIdentifier(0);
    }
    ::omero::RStringPtr getReagentSetIdentifier(const ::Ice::Context& __ctx)
    {
        return getReagentSetIdentifier(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getReagentSetIdentifier()
    {
        return begin_getReagentSetIdentifier(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getReagentSetIdentifier(const ::Ice::Context& __ctx)
    {
        return begin_getReagentSetIdentifier(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getReagentSetIdentifier(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getReagentSetIdentifier(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getReagentSetIdentifier(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getReagentSetIdentifier(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getReagentSetIdentifier(const ::omero::model::Callback_Screen_getReagentSetIdentifierPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getReagentSetIdentifier(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getReagentSetIdentifier(const ::Ice::Context& __ctx, const ::omero::model::Callback_Screen_getReagentSetIdentifierPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getReagentSetIdentifier(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getReagentSetIdentifier(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getReagentSetIdentifier(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getReagentSetIdentifier(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setReagentSetIdentifier(const ::omero::RStringPtr& theReagentSetIdentifier)
    {
        setReagentSetIdentifier(theReagentSetIdentifier, 0);
    }
    void setReagentSetIdentifier(const ::omero::RStringPtr& theReagentSetIdentifier, const ::Ice::Context& __ctx)
    {
        setReagentSetIdentifier(theReagentSetIdentifier, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setReagentSetIdentifier(const ::omero::RStringPtr& theReagentSetIdentifier)
    {
        return begin_setReagentSetIdentifier(theReagentSetIdentifier, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setReagentSetIdentifier(const ::omero::RStringPtr& theReagentSetIdentifier, const ::Ice::Context& __ctx)
    {
        return begin_setReagentSetIdentifier(theReagentSetIdentifier, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setReagentSetIdentifier(const ::omero::RStringPtr& theReagentSetIdentifier, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setReagentSetIdentifier(theReagentSetIdentifier, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setReagentSetIdentifier(const ::omero::RStringPtr& theReagentSetIdentifier, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setReagentSetIdentifier(theReagentSetIdentifier, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setReagentSetIdentifier(const ::omero::RStringPtr& theReagentSetIdentifier, const ::omero::model::Callback_Screen_setReagentSetIdentifierPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setReagentSetIdentifier(theReagentSetIdentifier, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setReagentSetIdentifier(const ::omero::RStringPtr& theReagentSetIdentifier, const ::Ice::Context& __ctx, const ::omero::model::Callback_Screen_setReagentSetIdentifierPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setReagentSetIdentifier(theReagentSetIdentifier, &__ctx, __del, __cookie);
    }

    void end_setReagentSetIdentifier(const ::Ice::AsyncResultPtr&);
    
private:

    void setReagentSetIdentifier(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setReagentSetIdentifier(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getReagentSetDescription()
    {
        return getReagentSetDescription(0);
    }
    ::omero::RStringPtr getReagentSetDescription(const ::Ice::Context& __ctx)
    {
        return getReagentSetDescription(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getReagentSetDescription()
    {
        return begin_getReagentSetDescription(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getReagentSetDescription(const ::Ice::Context& __ctx)
    {
        return begin_getReagentSetDescription(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getReagentSetDescription(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getReagentSetDescription(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getReagentSetDescription(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getReagentSetDescription(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getReagentSetDescription(const ::omero::model::Callback_Screen_getReagentSetDescriptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getReagentSetDescription(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getReagentSetDescription(const ::Ice::Context& __ctx, const ::omero::model::Callback_Screen_getReagentSetDescriptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getReagentSetDescription(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getReagentSetDescription(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getReagentSetDescription(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getReagentSetDescription(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setReagentSetDescription(const ::omero::RStringPtr& theReagentSetDescription)
    {
        setReagentSetDescription(theReagentSetDescription, 0);
    }
    void setReagentSetDescription(const ::omero::RStringPtr& theReagentSetDescription, const ::Ice::Context& __ctx)
    {
        setReagentSetDescription(theReagentSetDescription, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setReagentSetDescription(const ::omero::RStringPtr& theReagentSetDescription)
    {
        return begin_setReagentSetDescription(theReagentSetDescription, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setReagentSetDescription(const ::omero::RStringPtr& theReagentSetDescription, const ::Ice::Context& __ctx)
    {
        return begin_setReagentSetDescription(theReagentSetDescription, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setReagentSetDescription(const ::omero::RStringPtr& theReagentSetDescription, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setReagentSetDescription(theReagentSetDescription, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setReagentSetDescription(const ::omero::RStringPtr& theReagentSetDescription, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setReagentSetDescription(theReagentSetDescription, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setReagentSetDescription(const ::omero::RStringPtr& theReagentSetDescription, const ::omero::model::Callback_Screen_setReagentSetDescriptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setReagentSetDescription(theReagentSetDescription, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setReagentSetDescription(const ::omero::RStringPtr& theReagentSetDescription, const ::Ice::Context& __ctx, const ::omero::model::Callback_Screen_setReagentSetDescriptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setReagentSetDescription(theReagentSetDescription, &__ctx, __del, __cookie);
    }

    void end_setReagentSetDescription(const ::Ice::AsyncResultPtr&);
    
private:

    void setReagentSetDescription(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setReagentSetDescription(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unloadPlateLinks()
    {
        unloadPlateLinks(0);
    }
    void unloadPlateLinks(const ::Ice::Context& __ctx)
    {
        unloadPlateLinks(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_unloadPlateLinks()
    {
        return begin_unloadPlateLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadPlateLinks(const ::Ice::Context& __ctx)
    {
        return begin_unloadPlateLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadPlateLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadPlateLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadPlateLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadPlateLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadPlateLinks(const ::omero::model::Callback_Screen_unloadPlateLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadPlateLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadPlateLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_Screen_unloadPlateLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadPlateLinks(&__ctx, __del, __cookie);
    }

    void end_unloadPlateLinks(const ::Ice::AsyncResultPtr&);
    
private:

    void unloadPlateLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unloadPlateLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int sizeOfPlateLinks()
    {
        return sizeOfPlateLinks(0);
    }
    ::Ice::Int sizeOfPlateLinks(const ::Ice::Context& __ctx)
    {
        return sizeOfPlateLinks(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_sizeOfPlateLinks()
    {
        return begin_sizeOfPlateLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfPlateLinks(const ::Ice::Context& __ctx)
    {
        return begin_sizeOfPlateLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfPlateLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfPlateLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfPlateLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfPlateLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfPlateLinks(const ::omero::model::Callback_Screen_sizeOfPlateLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfPlateLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfPlateLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_Screen_sizeOfPlateLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfPlateLinks(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_sizeOfPlateLinks(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int sizeOfPlateLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sizeOfPlateLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::ScreenPlateLinksSeq copyPlateLinks()
    {
        return copyPlateLinks(0);
    }
    ::omero::model::ScreenPlateLinksSeq copyPlateLinks(const ::Ice::Context& __ctx)
    {
        return copyPlateLinks(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_copyPlateLinks()
    {
        return begin_copyPlateLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyPlateLinks(const ::Ice::Context& __ctx)
    {
        return begin_copyPlateLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyPlateLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyPlateLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyPlateLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyPlateLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyPlateLinks(const ::omero::model::Callback_Screen_copyPlateLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyPlateLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyPlateLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_Screen_copyPlateLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyPlateLinks(&__ctx, __del, __cookie);
    }

    ::omero::model::ScreenPlateLinksSeq end_copyPlateLinks(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::ScreenPlateLinksSeq copyPlateLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_copyPlateLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addScreenPlateLink(const ::omero::model::ScreenPlateLinkPtr& target)
    {
        addScreenPlateLink(target, 0);
    }
    void addScreenPlateLink(const ::omero::model::ScreenPlateLinkPtr& target, const ::Ice::Context& __ctx)
    {
        addScreenPlateLink(target, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addScreenPlateLink(const ::omero::model::ScreenPlateLinkPtr& target)
    {
        return begin_addScreenPlateLink(target, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addScreenPlateLink(const ::omero::model::ScreenPlateLinkPtr& target, const ::Ice::Context& __ctx)
    {
        return begin_addScreenPlateLink(target, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addScreenPlateLink(const ::omero::model::ScreenPlateLinkPtr& target, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addScreenPlateLink(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addScreenPlateLink(const ::omero::model::ScreenPlateLinkPtr& target, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addScreenPlateLink(target, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addScreenPlateLink(const ::omero::model::ScreenPlateLinkPtr& target, const ::omero::model::Callback_Screen_addScreenPlateLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addScreenPlateLink(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addScreenPlateLink(const ::omero::model::ScreenPlateLinkPtr& target, const ::Ice::Context& __ctx, const ::omero::model::Callback_Screen_addScreenPlateLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addScreenPlateLink(target, &__ctx, __del, __cookie);
    }

    void end_addScreenPlateLink(const ::Ice::AsyncResultPtr&);
    
private:

    void addScreenPlateLink(const ::omero::model::ScreenPlateLinkPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addScreenPlateLink(const ::omero::model::ScreenPlateLinkPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addAllScreenPlateLinkSet(const ::omero::model::ScreenPlateLinksSeq& targets)
    {
        addAllScreenPlateLinkSet(targets, 0);
    }
    void addAllScreenPlateLinkSet(const ::omero::model::ScreenPlateLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        addAllScreenPlateLinkSet(targets, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addAllScreenPlateLinkSet(const ::omero::model::ScreenPlateLinksSeq& targets)
    {
        return begin_addAllScreenPlateLinkSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllScreenPlateLinkSet(const ::omero::model::ScreenPlateLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_addAllScreenPlateLinkSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllScreenPlateLinkSet(const ::omero::model::ScreenPlateLinksSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllScreenPlateLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllScreenPlateLinkSet(const ::omero::model::ScreenPlateLinksSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllScreenPlateLinkSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllScreenPlateLinkSet(const ::omero::model::ScreenPlateLinksSeq& targets, const ::omero::model::Callback_Screen_addAllScreenPlateLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllScreenPlateLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllScreenPlateLinkSet(const ::omero::model::ScreenPlateLinksSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Screen_addAllScreenPlateLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllScreenPlateLinkSet(targets, &__ctx, __del, __cookie);
    }

    void end_addAllScreenPlateLinkSet(const ::Ice::AsyncResultPtr&);
    
private:

    void addAllScreenPlateLinkSet(const ::omero::model::ScreenPlateLinksSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addAllScreenPlateLinkSet(const ::omero::model::ScreenPlateLinksSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeScreenPlateLink(const ::omero::model::ScreenPlateLinkPtr& theTarget)
    {
        removeScreenPlateLink(theTarget, 0);
    }
    void removeScreenPlateLink(const ::omero::model::ScreenPlateLinkPtr& theTarget, const ::Ice::Context& __ctx)
    {
        removeScreenPlateLink(theTarget, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removeScreenPlateLink(const ::omero::model::ScreenPlateLinkPtr& theTarget)
    {
        return begin_removeScreenPlateLink(theTarget, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeScreenPlateLink(const ::omero::model::ScreenPlateLinkPtr& theTarget, const ::Ice::Context& __ctx)
    {
        return begin_removeScreenPlateLink(theTarget, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeScreenPlateLink(const ::omero::model::ScreenPlateLinkPtr& theTarget, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeScreenPlateLink(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeScreenPlateLink(const ::omero::model::ScreenPlateLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeScreenPlateLink(theTarget, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeScreenPlateLink(const ::omero::model::ScreenPlateLinkPtr& theTarget, const ::omero::model::Callback_Screen_removeScreenPlateLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeScreenPlateLink(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeScreenPlateLink(const ::omero::model::ScreenPlateLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::omero::model::Callback_Screen_removeScreenPlateLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeScreenPlateLink(theTarget, &__ctx, __del, __cookie);
    }

    void end_removeScreenPlateLink(const ::Ice::AsyncResultPtr&);
    
private:

    void removeScreenPlateLink(const ::omero::model::ScreenPlateLinkPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeScreenPlateLink(const ::omero::model::ScreenPlateLinkPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeAllScreenPlateLinkSet(const ::omero::model::ScreenPlateLinksSeq& targets)
    {
        removeAllScreenPlateLinkSet(targets, 0);
    }
    void removeAllScreenPlateLinkSet(const ::omero::model::ScreenPlateLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        removeAllScreenPlateLinkSet(targets, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removeAllScreenPlateLinkSet(const ::omero::model::ScreenPlateLinksSeq& targets)
    {
        return begin_removeAllScreenPlateLinkSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllScreenPlateLinkSet(const ::omero::model::ScreenPlateLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_removeAllScreenPlateLinkSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllScreenPlateLinkSet(const ::omero::model::ScreenPlateLinksSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllScreenPlateLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllScreenPlateLinkSet(const ::omero::model::ScreenPlateLinksSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllScreenPlateLinkSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllScreenPlateLinkSet(const ::omero::model::ScreenPlateLinksSeq& targets, const ::omero::model::Callback_Screen_removeAllScreenPlateLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllScreenPlateLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllScreenPlateLinkSet(const ::omero::model::ScreenPlateLinksSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Screen_removeAllScreenPlateLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllScreenPlateLinkSet(targets, &__ctx, __del, __cookie);
    }

    void end_removeAllScreenPlateLinkSet(const ::Ice::AsyncResultPtr&);
    
private:

    void removeAllScreenPlateLinkSet(const ::omero::model::ScreenPlateLinksSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeAllScreenPlateLinkSet(const ::omero::model::ScreenPlateLinksSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void clearPlateLinks()
    {
        clearPlateLinks(0);
    }
    void clearPlateLinks(const ::Ice::Context& __ctx)
    {
        clearPlateLinks(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_clearPlateLinks()
    {
        return begin_clearPlateLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearPlateLinks(const ::Ice::Context& __ctx)
    {
        return begin_clearPlateLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearPlateLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearPlateLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearPlateLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearPlateLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearPlateLinks(const ::omero::model::Callback_Screen_clearPlateLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearPlateLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearPlateLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_Screen_clearPlateLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearPlateLinks(&__ctx, __del, __cookie);
    }

    void end_clearPlateLinks(const ::Ice::AsyncResultPtr&);
    
private:

    void clearPlateLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_clearPlateLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reloadPlateLinks(const ::omero::model::ScreenPtr& toCopy)
    {
        reloadPlateLinks(toCopy, 0);
    }
    void reloadPlateLinks(const ::omero::model::ScreenPtr& toCopy, const ::Ice::Context& __ctx)
    {
        reloadPlateLinks(toCopy, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_reloadPlateLinks(const ::omero::model::ScreenPtr& toCopy)
    {
        return begin_reloadPlateLinks(toCopy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadPlateLinks(const ::omero::model::ScreenPtr& toCopy, const ::Ice::Context& __ctx)
    {
        return begin_reloadPlateLinks(toCopy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadPlateLinks(const ::omero::model::ScreenPtr& toCopy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadPlateLinks(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadPlateLinks(const ::omero::model::ScreenPtr& toCopy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadPlateLinks(toCopy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadPlateLinks(const ::omero::model::ScreenPtr& toCopy, const ::omero::model::Callback_Screen_reloadPlateLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadPlateLinks(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadPlateLinks(const ::omero::model::ScreenPtr& toCopy, const ::Ice::Context& __ctx, const ::omero::model::Callback_Screen_reloadPlateLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadPlateLinks(toCopy, &__ctx, __del, __cookie);
    }

    void end_reloadPlateLinks(const ::Ice::AsyncResultPtr&);
    
private:

    void reloadPlateLinks(const ::omero::model::ScreenPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reloadPlateLinks(const ::omero::model::ScreenPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::sys::CountMap getPlateLinksCountPerOwner()
    {
        return getPlateLinksCountPerOwner(0);
    }
    ::omero::sys::CountMap getPlateLinksCountPerOwner(const ::Ice::Context& __ctx)
    {
        return getPlateLinksCountPerOwner(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getPlateLinksCountPerOwner()
    {
        return begin_getPlateLinksCountPerOwner(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPlateLinksCountPerOwner(const ::Ice::Context& __ctx)
    {
        return begin_getPlateLinksCountPerOwner(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPlateLinksCountPerOwner(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPlateLinksCountPerOwner(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPlateLinksCountPerOwner(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPlateLinksCountPerOwner(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPlateLinksCountPerOwner(const ::omero::model::Callback_Screen_getPlateLinksCountPerOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPlateLinksCountPerOwner(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPlateLinksCountPerOwner(const ::Ice::Context& __ctx, const ::omero::model::Callback_Screen_getPlateLinksCountPerOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPlateLinksCountPerOwner(&__ctx, __del, __cookie);
    }

    ::omero::sys::CountMap end_getPlateLinksCountPerOwner(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::sys::CountMap getPlateLinksCountPerOwner(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getPlateLinksCountPerOwner(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::ScreenPlateLinkPtr linkPlate(const ::omero::model::PlatePtr& addition)
    {
        return linkPlate(addition, 0);
    }
    ::omero::model::ScreenPlateLinkPtr linkPlate(const ::omero::model::PlatePtr& addition, const ::Ice::Context& __ctx)
    {
        return linkPlate(addition, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_linkPlate(const ::omero::model::PlatePtr& addition)
    {
        return begin_linkPlate(addition, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkPlate(const ::omero::model::PlatePtr& addition, const ::Ice::Context& __ctx)
    {
        return begin_linkPlate(addition, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkPlate(const ::omero::model::PlatePtr& addition, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkPlate(addition, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkPlate(const ::omero::model::PlatePtr& addition, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkPlate(addition, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkPlate(const ::omero::model::PlatePtr& addition, const ::omero::model::Callback_Screen_linkPlatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkPlate(addition, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkPlate(const ::omero::model::PlatePtr& addition, const ::Ice::Context& __ctx, const ::omero::model::Callback_Screen_linkPlatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkPlate(addition, &__ctx, __del, __cookie);
    }

    ::omero::model::ScreenPlateLinkPtr end_linkPlate(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::ScreenPlateLinkPtr linkPlate(const ::omero::model::PlatePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_linkPlate(const ::omero::model::PlatePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addScreenPlateLinkToBoth(const ::omero::model::ScreenPlateLinkPtr& link, bool bothSides)
    {
        addScreenPlateLinkToBoth(link, bothSides, 0);
    }
    void addScreenPlateLinkToBoth(const ::omero::model::ScreenPlateLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        addScreenPlateLinkToBoth(link, bothSides, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addScreenPlateLinkToBoth(const ::omero::model::ScreenPlateLinkPtr& link, bool bothSides)
    {
        return begin_addScreenPlateLinkToBoth(link, bothSides, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addScreenPlateLinkToBoth(const ::omero::model::ScreenPlateLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        return begin_addScreenPlateLinkToBoth(link, bothSides, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addScreenPlateLinkToBoth(const ::omero::model::ScreenPlateLinkPtr& link, bool bothSides, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addScreenPlateLinkToBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addScreenPlateLinkToBoth(const ::omero::model::ScreenPlateLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addScreenPlateLinkToBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addScreenPlateLinkToBoth(const ::omero::model::ScreenPlateLinkPtr& link, bool bothSides, const ::omero::model::Callback_Screen_addScreenPlateLinkToBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addScreenPlateLinkToBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addScreenPlateLinkToBoth(const ::omero::model::ScreenPlateLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::omero::model::Callback_Screen_addScreenPlateLinkToBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addScreenPlateLinkToBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    void end_addScreenPlateLinkToBoth(const ::Ice::AsyncResultPtr&);
    
private:

    void addScreenPlateLinkToBoth(const ::omero::model::ScreenPlateLinkPtr&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addScreenPlateLinkToBoth(const ::omero::model::ScreenPlateLinkPtr&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::ScreenPlateLinksSeq findScreenPlateLink(const ::omero::model::PlatePtr& removal)
    {
        return findScreenPlateLink(removal, 0);
    }
    ::omero::model::ScreenPlateLinksSeq findScreenPlateLink(const ::omero::model::PlatePtr& removal, const ::Ice::Context& __ctx)
    {
        return findScreenPlateLink(removal, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_findScreenPlateLink(const ::omero::model::PlatePtr& removal)
    {
        return begin_findScreenPlateLink(removal, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findScreenPlateLink(const ::omero::model::PlatePtr& removal, const ::Ice::Context& __ctx)
    {
        return begin_findScreenPlateLink(removal, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findScreenPlateLink(const ::omero::model::PlatePtr& removal, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findScreenPlateLink(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findScreenPlateLink(const ::omero::model::PlatePtr& removal, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findScreenPlateLink(removal, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findScreenPlateLink(const ::omero::model::PlatePtr& removal, const ::omero::model::Callback_Screen_findScreenPlateLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findScreenPlateLink(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findScreenPlateLink(const ::omero::model::PlatePtr& removal, const ::Ice::Context& __ctx, const ::omero::model::Callback_Screen_findScreenPlateLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findScreenPlateLink(removal, &__ctx, __del, __cookie);
    }

    ::omero::model::ScreenPlateLinksSeq end_findScreenPlateLink(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::ScreenPlateLinksSeq findScreenPlateLink(const ::omero::model::PlatePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_findScreenPlateLink(const ::omero::model::PlatePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unlinkPlate(const ::omero::model::PlatePtr& removal)
    {
        unlinkPlate(removal, 0);
    }
    void unlinkPlate(const ::omero::model::PlatePtr& removal, const ::Ice::Context& __ctx)
    {
        unlinkPlate(removal, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_unlinkPlate(const ::omero::model::PlatePtr& removal)
    {
        return begin_unlinkPlate(removal, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unlinkPlate(const ::omero::model::PlatePtr& removal, const ::Ice::Context& __ctx)
    {
        return begin_unlinkPlate(removal, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unlinkPlate(const ::omero::model::PlatePtr& removal, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkPlate(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkPlate(const ::omero::model::PlatePtr& removal, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkPlate(removal, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkPlate(const ::omero::model::PlatePtr& removal, const ::omero::model::Callback_Screen_unlinkPlatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkPlate(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkPlate(const ::omero::model::PlatePtr& removal, const ::Ice::Context& __ctx, const ::omero::model::Callback_Screen_unlinkPlatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkPlate(removal, &__ctx, __del, __cookie);
    }

    void end_unlinkPlate(const ::Ice::AsyncResultPtr&);
    
private:

    void unlinkPlate(const ::omero::model::PlatePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unlinkPlate(const ::omero::model::PlatePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeScreenPlateLinkFromBoth(const ::omero::model::ScreenPlateLinkPtr& link, bool bothSides)
    {
        removeScreenPlateLinkFromBoth(link, bothSides, 0);
    }
    void removeScreenPlateLinkFromBoth(const ::omero::model::ScreenPlateLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        removeScreenPlateLinkFromBoth(link, bothSides, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removeScreenPlateLinkFromBoth(const ::omero::model::ScreenPlateLinkPtr& link, bool bothSides)
    {
        return begin_removeScreenPlateLinkFromBoth(link, bothSides, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeScreenPlateLinkFromBoth(const ::omero::model::ScreenPlateLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        return begin_removeScreenPlateLinkFromBoth(link, bothSides, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeScreenPlateLinkFromBoth(const ::omero::model::ScreenPlateLinkPtr& link, bool bothSides, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeScreenPlateLinkFromBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeScreenPlateLinkFromBoth(const ::omero::model::ScreenPlateLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeScreenPlateLinkFromBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeScreenPlateLinkFromBoth(const ::omero::model::ScreenPlateLinkPtr& link, bool bothSides, const ::omero::model::Callback_Screen_removeScreenPlateLinkFromBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeScreenPlateLinkFromBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeScreenPlateLinkFromBoth(const ::omero::model::ScreenPlateLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::omero::model::Callback_Screen_removeScreenPlateLinkFromBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeScreenPlateLinkFromBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    void end_removeScreenPlateLinkFromBoth(const ::Ice::AsyncResultPtr&);
    
private:

    void removeScreenPlateLinkFromBoth(const ::omero::model::ScreenPlateLinkPtr&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeScreenPlateLinkFromBoth(const ::omero::model::ScreenPlateLinkPtr&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::ScreenLinkedPlateSeq linkedPlateList()
    {
        return linkedPlateList(0);
    }
    ::omero::model::ScreenLinkedPlateSeq linkedPlateList(const ::Ice::Context& __ctx)
    {
        return linkedPlateList(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_linkedPlateList()
    {
        return begin_linkedPlateList(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkedPlateList(const ::Ice::Context& __ctx)
    {
        return begin_linkedPlateList(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkedPlateList(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedPlateList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedPlateList(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedPlateList(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedPlateList(const ::omero::model::Callback_Screen_linkedPlateListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedPlateList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedPlateList(const ::Ice::Context& __ctx, const ::omero::model::Callback_Screen_linkedPlateListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedPlateList(&__ctx, __del, __cookie);
    }

    ::omero::model::ScreenLinkedPlateSeq end_linkedPlateList(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::ScreenLinkedPlateSeq linkedPlateList(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_linkedPlateList(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unloadReagents()
    {
        unloadReagents(0);
    }
    void unloadReagents(const ::Ice::Context& __ctx)
    {
        unloadReagents(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_unloadReagents()
    {
        return begin_unloadReagents(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadReagents(const ::Ice::Context& __ctx)
    {
        return begin_unloadReagents(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadReagents(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadReagents(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadReagents(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadReagents(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadReagents(const ::omero::model::Callback_Screen_unloadReagentsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadReagents(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadReagents(const ::Ice::Context& __ctx, const ::omero::model::Callback_Screen_unloadReagentsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadReagents(&__ctx, __del, __cookie);
    }

    void end_unloadReagents(const ::Ice::AsyncResultPtr&);
    
private:

    void unloadReagents(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unloadReagents(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int sizeOfReagents()
    {
        return sizeOfReagents(0);
    }
    ::Ice::Int sizeOfReagents(const ::Ice::Context& __ctx)
    {
        return sizeOfReagents(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_sizeOfReagents()
    {
        return begin_sizeOfReagents(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfReagents(const ::Ice::Context& __ctx)
    {
        return begin_sizeOfReagents(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfReagents(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfReagents(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfReagents(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfReagents(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfReagents(const ::omero::model::Callback_Screen_sizeOfReagentsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfReagents(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfReagents(const ::Ice::Context& __ctx, const ::omero::model::Callback_Screen_sizeOfReagentsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfReagents(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_sizeOfReagents(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int sizeOfReagents(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sizeOfReagents(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::ScreenReagentsSeq copyReagents()
    {
        return copyReagents(0);
    }
    ::omero::model::ScreenReagentsSeq copyReagents(const ::Ice::Context& __ctx)
    {
        return copyReagents(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_copyReagents()
    {
        return begin_copyReagents(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyReagents(const ::Ice::Context& __ctx)
    {
        return begin_copyReagents(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyReagents(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyReagents(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyReagents(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyReagents(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyReagents(const ::omero::model::Callback_Screen_copyReagentsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyReagents(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyReagents(const ::Ice::Context& __ctx, const ::omero::model::Callback_Screen_copyReagentsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyReagents(&__ctx, __del, __cookie);
    }

    ::omero::model::ScreenReagentsSeq end_copyReagents(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::ScreenReagentsSeq copyReagents(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_copyReagents(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addReagent(const ::omero::model::ReagentPtr& target)
    {
        addReagent(target, 0);
    }
    void addReagent(const ::omero::model::ReagentPtr& target, const ::Ice::Context& __ctx)
    {
        addReagent(target, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addReagent(const ::omero::model::ReagentPtr& target)
    {
        return begin_addReagent(target, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addReagent(const ::omero::model::ReagentPtr& target, const ::Ice::Context& __ctx)
    {
        return begin_addReagent(target, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addReagent(const ::omero::model::ReagentPtr& target, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addReagent(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addReagent(const ::omero::model::ReagentPtr& target, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addReagent(target, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addReagent(const ::omero::model::ReagentPtr& target, const ::omero::model::Callback_Screen_addReagentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addReagent(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addReagent(const ::omero::model::ReagentPtr& target, const ::Ice::Context& __ctx, const ::omero::model::Callback_Screen_addReagentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addReagent(target, &__ctx, __del, __cookie);
    }

    void end_addReagent(const ::Ice::AsyncResultPtr&);
    
private:

    void addReagent(const ::omero::model::ReagentPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addReagent(const ::omero::model::ReagentPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addAllReagentSet(const ::omero::model::ScreenReagentsSeq& targets)
    {
        addAllReagentSet(targets, 0);
    }
    void addAllReagentSet(const ::omero::model::ScreenReagentsSeq& targets, const ::Ice::Context& __ctx)
    {
        addAllReagentSet(targets, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addAllReagentSet(const ::omero::model::ScreenReagentsSeq& targets)
    {
        return begin_addAllReagentSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllReagentSet(const ::omero::model::ScreenReagentsSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_addAllReagentSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllReagentSet(const ::omero::model::ScreenReagentsSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllReagentSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllReagentSet(const ::omero::model::ScreenReagentsSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllReagentSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllReagentSet(const ::omero::model::ScreenReagentsSeq& targets, const ::omero::model::Callback_Screen_addAllReagentSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllReagentSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllReagentSet(const ::omero::model::ScreenReagentsSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Screen_addAllReagentSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllReagentSet(targets, &__ctx, __del, __cookie);
    }

    void end_addAllReagentSet(const ::Ice::AsyncResultPtr&);
    
private:

    void addAllReagentSet(const ::omero::model::ScreenReagentsSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addAllReagentSet(const ::omero::model::ScreenReagentsSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeReagent(const ::omero::model::ReagentPtr& theTarget)
    {
        removeReagent(theTarget, 0);
    }
    void removeReagent(const ::omero::model::ReagentPtr& theTarget, const ::Ice::Context& __ctx)
    {
        removeReagent(theTarget, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removeReagent(const ::omero::model::ReagentPtr& theTarget)
    {
        return begin_removeReagent(theTarget, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeReagent(const ::omero::model::ReagentPtr& theTarget, const ::Ice::Context& __ctx)
    {
        return begin_removeReagent(theTarget, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeReagent(const ::omero::model::ReagentPtr& theTarget, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeReagent(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeReagent(const ::omero::model::ReagentPtr& theTarget, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeReagent(theTarget, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeReagent(const ::omero::model::ReagentPtr& theTarget, const ::omero::model::Callback_Screen_removeReagentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeReagent(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeReagent(const ::omero::model::ReagentPtr& theTarget, const ::Ice::Context& __ctx, const ::omero::model::Callback_Screen_removeReagentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeReagent(theTarget, &__ctx, __del, __cookie);
    }

    void end_removeReagent(const ::Ice::AsyncResultPtr&);
    
private:

    void removeReagent(const ::omero::model::ReagentPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeReagent(const ::omero::model::ReagentPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeAllReagentSet(const ::omero::model::ScreenReagentsSeq& targets)
    {
        removeAllReagentSet(targets, 0);
    }
    void removeAllReagentSet(const ::omero::model::ScreenReagentsSeq& targets, const ::Ice::Context& __ctx)
    {
        removeAllReagentSet(targets, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removeAllReagentSet(const ::omero::model::ScreenReagentsSeq& targets)
    {
        return begin_removeAllReagentSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllReagentSet(const ::omero::model::ScreenReagentsSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_removeAllReagentSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllReagentSet(const ::omero::model::ScreenReagentsSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllReagentSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllReagentSet(const ::omero::model::ScreenReagentsSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllReagentSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllReagentSet(const ::omero::model::ScreenReagentsSeq& targets, const ::omero::model::Callback_Screen_removeAllReagentSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllReagentSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllReagentSet(const ::omero::model::ScreenReagentsSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Screen_removeAllReagentSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllReagentSet(targets, &__ctx, __del, __cookie);
    }

    void end_removeAllReagentSet(const ::Ice::AsyncResultPtr&);
    
private:

    void removeAllReagentSet(const ::omero::model::ScreenReagentsSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeAllReagentSet(const ::omero::model::ScreenReagentsSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void clearReagents()
    {
        clearReagents(0);
    }
    void clearReagents(const ::Ice::Context& __ctx)
    {
        clearReagents(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_clearReagents()
    {
        return begin_clearReagents(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearReagents(const ::Ice::Context& __ctx)
    {
        return begin_clearReagents(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearReagents(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearReagents(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearReagents(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearReagents(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearReagents(const ::omero::model::Callback_Screen_clearReagentsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearReagents(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearReagents(const ::Ice::Context& __ctx, const ::omero::model::Callback_Screen_clearReagentsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearReagents(&__ctx, __del, __cookie);
    }

    void end_clearReagents(const ::Ice::AsyncResultPtr&);
    
private:

    void clearReagents(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_clearReagents(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reloadReagents(const ::omero::model::ScreenPtr& toCopy)
    {
        reloadReagents(toCopy, 0);
    }
    void reloadReagents(const ::omero::model::ScreenPtr& toCopy, const ::Ice::Context& __ctx)
    {
        reloadReagents(toCopy, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_reloadReagents(const ::omero::model::ScreenPtr& toCopy)
    {
        return begin_reloadReagents(toCopy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadReagents(const ::omero::model::ScreenPtr& toCopy, const ::Ice::Context& __ctx)
    {
        return begin_reloadReagents(toCopy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadReagents(const ::omero::model::ScreenPtr& toCopy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadReagents(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadReagents(const ::omero::model::ScreenPtr& toCopy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadReagents(toCopy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadReagents(const ::omero::model::ScreenPtr& toCopy, const ::omero::model::Callback_Screen_reloadReagentsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadReagents(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadReagents(const ::omero::model::ScreenPtr& toCopy, const ::Ice::Context& __ctx, const ::omero::model::Callback_Screen_reloadReagentsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadReagents(toCopy, &__ctx, __del, __cookie);
    }

    void end_reloadReagents(const ::Ice::AsyncResultPtr&);
    
private:

    void reloadReagents(const ::omero::model::ScreenPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reloadReagents(const ::omero::model::ScreenPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unloadAnnotationLinks()
    {
        unloadAnnotationLinks(0);
    }
    void unloadAnnotationLinks(const ::Ice::Context& __ctx)
    {
        unloadAnnotationLinks(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks()
    {
        return begin_unloadAnnotationLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return begin_unloadAnnotationLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::omero::model::Callback_Screen_unloadAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_Screen_unloadAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadAnnotationLinks(&__ctx, __del, __cookie);
    }

    void end_unloadAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    void unloadAnnotationLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int sizeOfAnnotationLinks()
    {
        return sizeOfAnnotationLinks(0);
    }
    ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return sizeOfAnnotationLinks(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks()
    {
        return begin_sizeOfAnnotationLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return begin_sizeOfAnnotationLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::omero::model::Callback_Screen_sizeOfAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_Screen_sizeOfAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_sizeOfAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::ScreenAnnotationLinksSeq copyAnnotationLinks()
    {
        return copyAnnotationLinks(0);
    }
    ::omero::model::ScreenAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return copyAnnotationLinks(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks()
    {
        return begin_copyAnnotationLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return begin_copyAnnotationLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::omero::model::Callback_Screen_copyAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_Screen_copyAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::omero::model::ScreenAnnotationLinksSeq end_copyAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::ScreenAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addScreenAnnotationLink(const ::omero::model::ScreenAnnotationLinkPtr& target)
    {
        addScreenAnnotationLink(target, 0);
    }
    void addScreenAnnotationLink(const ::omero::model::ScreenAnnotationLinkPtr& target, const ::Ice::Context& __ctx)
    {
        addScreenAnnotationLink(target, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addScreenAnnotationLink(const ::omero::model::ScreenAnnotationLinkPtr& target)
    {
        return begin_addScreenAnnotationLink(target, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addScreenAnnotationLink(const ::omero::model::ScreenAnnotationLinkPtr& target, const ::Ice::Context& __ctx)
    {
        return begin_addScreenAnnotationLink(target, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addScreenAnnotationLink(const ::omero::model::ScreenAnnotationLinkPtr& target, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addScreenAnnotationLink(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addScreenAnnotationLink(const ::omero::model::ScreenAnnotationLinkPtr& target, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addScreenAnnotationLink(target, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addScreenAnnotationLink(const ::omero::model::ScreenAnnotationLinkPtr& target, const ::omero::model::Callback_Screen_addScreenAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addScreenAnnotationLink(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addScreenAnnotationLink(const ::omero::model::ScreenAnnotationLinkPtr& target, const ::Ice::Context& __ctx, const ::omero::model::Callback_Screen_addScreenAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addScreenAnnotationLink(target, &__ctx, __del, __cookie);
    }

    void end_addScreenAnnotationLink(const ::Ice::AsyncResultPtr&);
    
private:

    void addScreenAnnotationLink(const ::omero::model::ScreenAnnotationLinkPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addScreenAnnotationLink(const ::omero::model::ScreenAnnotationLinkPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addAllScreenAnnotationLinkSet(const ::omero::model::ScreenAnnotationLinksSeq& targets)
    {
        addAllScreenAnnotationLinkSet(targets, 0);
    }
    void addAllScreenAnnotationLinkSet(const ::omero::model::ScreenAnnotationLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        addAllScreenAnnotationLinkSet(targets, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addAllScreenAnnotationLinkSet(const ::omero::model::ScreenAnnotationLinksSeq& targets)
    {
        return begin_addAllScreenAnnotationLinkSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllScreenAnnotationLinkSet(const ::omero::model::ScreenAnnotationLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_addAllScreenAnnotationLinkSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllScreenAnnotationLinkSet(const ::omero::model::ScreenAnnotationLinksSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllScreenAnnotationLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllScreenAnnotationLinkSet(const ::omero::model::ScreenAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllScreenAnnotationLinkSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllScreenAnnotationLinkSet(const ::omero::model::ScreenAnnotationLinksSeq& targets, const ::omero::model::Callback_Screen_addAllScreenAnnotationLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllScreenAnnotationLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllScreenAnnotationLinkSet(const ::omero::model::ScreenAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Screen_addAllScreenAnnotationLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllScreenAnnotationLinkSet(targets, &__ctx, __del, __cookie);
    }

    void end_addAllScreenAnnotationLinkSet(const ::Ice::AsyncResultPtr&);
    
private:

    void addAllScreenAnnotationLinkSet(const ::omero::model::ScreenAnnotationLinksSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addAllScreenAnnotationLinkSet(const ::omero::model::ScreenAnnotationLinksSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeScreenAnnotationLink(const ::omero::model::ScreenAnnotationLinkPtr& theTarget)
    {
        removeScreenAnnotationLink(theTarget, 0);
    }
    void removeScreenAnnotationLink(const ::omero::model::ScreenAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx)
    {
        removeScreenAnnotationLink(theTarget, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removeScreenAnnotationLink(const ::omero::model::ScreenAnnotationLinkPtr& theTarget)
    {
        return begin_removeScreenAnnotationLink(theTarget, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeScreenAnnotationLink(const ::omero::model::ScreenAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx)
    {
        return begin_removeScreenAnnotationLink(theTarget, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeScreenAnnotationLink(const ::omero::model::ScreenAnnotationLinkPtr& theTarget, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeScreenAnnotationLink(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeScreenAnnotationLink(const ::omero::model::ScreenAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeScreenAnnotationLink(theTarget, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeScreenAnnotationLink(const ::omero::model::ScreenAnnotationLinkPtr& theTarget, const ::omero::model::Callback_Screen_removeScreenAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeScreenAnnotationLink(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeScreenAnnotationLink(const ::omero::model::ScreenAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::omero::model::Callback_Screen_removeScreenAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeScreenAnnotationLink(theTarget, &__ctx, __del, __cookie);
    }

    void end_removeScreenAnnotationLink(const ::Ice::AsyncResultPtr&);
    
private:

    void removeScreenAnnotationLink(const ::omero::model::ScreenAnnotationLinkPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeScreenAnnotationLink(const ::omero::model::ScreenAnnotationLinkPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeAllScreenAnnotationLinkSet(const ::omero::model::ScreenAnnotationLinksSeq& targets)
    {
        removeAllScreenAnnotationLinkSet(targets, 0);
    }
    void removeAllScreenAnnotationLinkSet(const ::omero::model::ScreenAnnotationLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        removeAllScreenAnnotationLinkSet(targets, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removeAllScreenAnnotationLinkSet(const ::omero::model::ScreenAnnotationLinksSeq& targets)
    {
        return begin_removeAllScreenAnnotationLinkSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllScreenAnnotationLinkSet(const ::omero::model::ScreenAnnotationLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_removeAllScreenAnnotationLinkSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllScreenAnnotationLinkSet(const ::omero::model::ScreenAnnotationLinksSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllScreenAnnotationLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllScreenAnnotationLinkSet(const ::omero::model::ScreenAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllScreenAnnotationLinkSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllScreenAnnotationLinkSet(const ::omero::model::ScreenAnnotationLinksSeq& targets, const ::omero::model::Callback_Screen_removeAllScreenAnnotationLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllScreenAnnotationLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllScreenAnnotationLinkSet(const ::omero::model::ScreenAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Screen_removeAllScreenAnnotationLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllScreenAnnotationLinkSet(targets, &__ctx, __del, __cookie);
    }

    void end_removeAllScreenAnnotationLinkSet(const ::Ice::AsyncResultPtr&);
    
private:

    void removeAllScreenAnnotationLinkSet(const ::omero::model::ScreenAnnotationLinksSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeAllScreenAnnotationLinkSet(const ::omero::model::ScreenAnnotationLinksSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void clearAnnotationLinks()
    {
        clearAnnotationLinks(0);
    }
    void clearAnnotationLinks(const ::Ice::Context& __ctx)
    {
        clearAnnotationLinks(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks()
    {
        return begin_clearAnnotationLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return begin_clearAnnotationLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::omero::model::Callback_Screen_clearAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_Screen_clearAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearAnnotationLinks(&__ctx, __del, __cookie);
    }

    void end_clearAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    void clearAnnotationLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reloadAnnotationLinks(const ::omero::model::ScreenPtr& toCopy)
    {
        reloadAnnotationLinks(toCopy, 0);
    }
    void reloadAnnotationLinks(const ::omero::model::ScreenPtr& toCopy, const ::Ice::Context& __ctx)
    {
        reloadAnnotationLinks(toCopy, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::ScreenPtr& toCopy)
    {
        return begin_reloadAnnotationLinks(toCopy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::ScreenPtr& toCopy, const ::Ice::Context& __ctx)
    {
        return begin_reloadAnnotationLinks(toCopy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::ScreenPtr& toCopy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadAnnotationLinks(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::ScreenPtr& toCopy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadAnnotationLinks(toCopy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::ScreenPtr& toCopy, const ::omero::model::Callback_Screen_reloadAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadAnnotationLinks(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::ScreenPtr& toCopy, const ::Ice::Context& __ctx, const ::omero::model::Callback_Screen_reloadAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadAnnotationLinks(toCopy, &__ctx, __del, __cookie);
    }

    void end_reloadAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    void reloadAnnotationLinks(const ::omero::model::ScreenPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::ScreenPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::sys::CountMap getAnnotationLinksCountPerOwner()
    {
        return getAnnotationLinksCountPerOwner(0);
    }
    ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx)
    {
        return getAnnotationLinksCountPerOwner(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner()
    {
        return begin_getAnnotationLinksCountPerOwner(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx)
    {
        return begin_getAnnotationLinksCountPerOwner(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAnnotationLinksCountPerOwner(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAnnotationLinksCountPerOwner(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::omero::model::Callback_Screen_getAnnotationLinksCountPerOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAnnotationLinksCountPerOwner(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx, const ::omero::model::Callback_Screen_getAnnotationLinksCountPerOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAnnotationLinksCountPerOwner(&__ctx, __del, __cookie);
    }

    ::omero::sys::CountMap end_getAnnotationLinksCountPerOwner(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::ScreenAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr& addition)
    {
        return linkAnnotation(addition, 0);
    }
    ::omero::model::ScreenAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx)
    {
        return linkAnnotation(addition, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition)
    {
        return begin_linkAnnotation(addition, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx)
    {
        return begin_linkAnnotation(addition, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkAnnotation(addition, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkAnnotation(addition, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::omero::model::Callback_Screen_linkAnnotationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkAnnotation(addition, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx, const ::omero::model::Callback_Screen_linkAnnotationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkAnnotation(addition, &__ctx, __del, __cookie);
    }

    ::omero::model::ScreenAnnotationLinkPtr end_linkAnnotation(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::ScreenAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addScreenAnnotationLinkToBoth(const ::omero::model::ScreenAnnotationLinkPtr& link, bool bothSides)
    {
        addScreenAnnotationLinkToBoth(link, bothSides, 0);
    }
    void addScreenAnnotationLinkToBoth(const ::omero::model::ScreenAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        addScreenAnnotationLinkToBoth(link, bothSides, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addScreenAnnotationLinkToBoth(const ::omero::model::ScreenAnnotationLinkPtr& link, bool bothSides)
    {
        return begin_addScreenAnnotationLinkToBoth(link, bothSides, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addScreenAnnotationLinkToBoth(const ::omero::model::ScreenAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        return begin_addScreenAnnotationLinkToBoth(link, bothSides, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addScreenAnnotationLinkToBoth(const ::omero::model::ScreenAnnotationLinkPtr& link, bool bothSides, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addScreenAnnotationLinkToBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addScreenAnnotationLinkToBoth(const ::omero::model::ScreenAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addScreenAnnotationLinkToBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addScreenAnnotationLinkToBoth(const ::omero::model::ScreenAnnotationLinkPtr& link, bool bothSides, const ::omero::model::Callback_Screen_addScreenAnnotationLinkToBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addScreenAnnotationLinkToBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addScreenAnnotationLinkToBoth(const ::omero::model::ScreenAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::omero::model::Callback_Screen_addScreenAnnotationLinkToBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addScreenAnnotationLinkToBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    void end_addScreenAnnotationLinkToBoth(const ::Ice::AsyncResultPtr&);
    
private:

    void addScreenAnnotationLinkToBoth(const ::omero::model::ScreenAnnotationLinkPtr&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addScreenAnnotationLinkToBoth(const ::omero::model::ScreenAnnotationLinkPtr&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::ScreenAnnotationLinksSeq findScreenAnnotationLink(const ::omero::model::AnnotationPtr& removal)
    {
        return findScreenAnnotationLink(removal, 0);
    }
    ::omero::model::ScreenAnnotationLinksSeq findScreenAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx)
    {
        return findScreenAnnotationLink(removal, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_findScreenAnnotationLink(const ::omero::model::AnnotationPtr& removal)
    {
        return begin_findScreenAnnotationLink(removal, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findScreenAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx)
    {
        return begin_findScreenAnnotationLink(removal, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findScreenAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findScreenAnnotationLink(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findScreenAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findScreenAnnotationLink(removal, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findScreenAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::omero::model::Callback_Screen_findScreenAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findScreenAnnotationLink(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findScreenAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::omero::model::Callback_Screen_findScreenAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findScreenAnnotationLink(removal, &__ctx, __del, __cookie);
    }

    ::omero::model::ScreenAnnotationLinksSeq end_findScreenAnnotationLink(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::ScreenAnnotationLinksSeq findScreenAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_findScreenAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unlinkAnnotation(const ::omero::model::AnnotationPtr& removal)
    {
        unlinkAnnotation(removal, 0);
    }
    void unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx)
    {
        unlinkAnnotation(removal, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal)
    {
        return begin_unlinkAnnotation(removal, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx)
    {
        return begin_unlinkAnnotation(removal, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkAnnotation(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkAnnotation(removal, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::omero::model::Callback_Screen_unlinkAnnotationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkAnnotation(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::omero::model::Callback_Screen_unlinkAnnotationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkAnnotation(removal, &__ctx, __del, __cookie);
    }

    void end_unlinkAnnotation(const ::Ice::AsyncResultPtr&);
    
private:

    void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeScreenAnnotationLinkFromBoth(const ::omero::model::ScreenAnnotationLinkPtr& link, bool bothSides)
    {
        removeScreenAnnotationLinkFromBoth(link, bothSides, 0);
    }
    void removeScreenAnnotationLinkFromBoth(const ::omero::model::ScreenAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        removeScreenAnnotationLinkFromBoth(link, bothSides, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_removeScreenAnnotationLinkFromBoth(const ::omero::model::ScreenAnnotationLinkPtr& link, bool bothSides)
    {
        return begin_removeScreenAnnotationLinkFromBoth(link, bothSides, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeScreenAnnotationLinkFromBoth(const ::omero::model::ScreenAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        return begin_removeScreenAnnotationLinkFromBoth(link, bothSides, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeScreenAnnotationLinkFromBoth(const ::omero::model::ScreenAnnotationLinkPtr& link, bool bothSides, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeScreenAnnotationLinkFromBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeScreenAnnotationLinkFromBoth(const ::omero::model::ScreenAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeScreenAnnotationLinkFromBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeScreenAnnotationLinkFromBoth(const ::omero::model::ScreenAnnotationLinkPtr& link, bool bothSides, const ::omero::model::Callback_Screen_removeScreenAnnotationLinkFromBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeScreenAnnotationLinkFromBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeScreenAnnotationLinkFromBoth(const ::omero::model::ScreenAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::omero::model::Callback_Screen_removeScreenAnnotationLinkFromBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeScreenAnnotationLinkFromBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    void end_removeScreenAnnotationLinkFromBoth(const ::Ice::AsyncResultPtr&);
    
private:

    void removeScreenAnnotationLinkFromBoth(const ::omero::model::ScreenAnnotationLinkPtr&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeScreenAnnotationLinkFromBoth(const ::omero::model::ScreenAnnotationLinkPtr&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::ScreenLinkedAnnotationSeq linkedAnnotationList()
    {
        return linkedAnnotationList(0);
    }
    ::omero::model::ScreenLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context& __ctx)
    {
        return linkedAnnotationList(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList()
    {
        return begin_linkedAnnotationList(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::Context& __ctx)
    {
        return begin_linkedAnnotationList(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedAnnotationList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedAnnotationList(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::omero::model::Callback_Screen_linkedAnnotationListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedAnnotationList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::Context& __ctx, const ::omero::model::Callback_Screen_linkedAnnotationListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedAnnotationList(&__ctx, __del, __cookie);
    }

    ::omero::model::ScreenLinkedAnnotationSeq end_linkedAnnotationList(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::ScreenLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getName()
    {
        return getName(0);
    }
    ::omero::RStringPtr getName(const ::Ice::Context& __ctx)
    {
        return getName(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getName()
    {
        return begin_getName(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& __ctx)
    {
        return begin_getName(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getName(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getName(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::omero::model::Callback_Screen_getNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getName(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& __ctx, const ::omero::model::Callback_Screen_getNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getName(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getName(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getName(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setName(const ::omero::RStringPtr& theName)
    {
        setName(theName, 0);
    }
    void setName(const ::omero::RStringPtr& theName, const ::Ice::Context& __ctx)
    {
        setName(theName, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setName(const ::omero::RStringPtr& theName)
    {
        return begin_setName(theName, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setName(const ::omero::RStringPtr& theName, const ::Ice::Context& __ctx)
    {
        return begin_setName(theName, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setName(const ::omero::RStringPtr& theName, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setName(theName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setName(const ::omero::RStringPtr& theName, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setName(theName, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setName(const ::omero::RStringPtr& theName, const ::omero::model::Callback_Screen_setNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setName(theName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setName(const ::omero::RStringPtr& theName, const ::Ice::Context& __ctx, const ::omero::model::Callback_Screen_setNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setName(theName, &__ctx, __del, __cookie);
    }

    void end_setName(const ::Ice::AsyncResultPtr&);
    
private:

    void setName(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setName(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getDescription()
    {
        return getDescription(0);
    }
    ::omero::RStringPtr getDescription(const ::Ice::Context& __ctx)
    {
        return getDescription(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getDescription()
    {
        return begin_getDescription(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDescription(const ::Ice::Context& __ctx)
    {
        return begin_getDescription(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDescription(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDescription(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDescription(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDescription(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDescription(const ::omero::model::Callback_Screen_getDescriptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDescription(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDescription(const ::Ice::Context& __ctx, const ::omero::model::Callback_Screen_getDescriptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDescription(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getDescription(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getDescription(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getDescription(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setDescription(const ::omero::RStringPtr& theDescription)
    {
        setDescription(theDescription, 0);
    }
    void setDescription(const ::omero::RStringPtr& theDescription, const ::Ice::Context& __ctx)
    {
        setDescription(theDescription, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setDescription(const ::omero::RStringPtr& theDescription)
    {
        return begin_setDescription(theDescription, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setDescription(const ::omero::RStringPtr& theDescription, const ::Ice::Context& __ctx)
    {
        return begin_setDescription(theDescription, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setDescription(const ::omero::RStringPtr& theDescription, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDescription(theDescription, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDescription(const ::omero::RStringPtr& theDescription, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDescription(theDescription, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDescription(const ::omero::RStringPtr& theDescription, const ::omero::model::Callback_Screen_setDescriptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDescription(theDescription, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDescription(const ::omero::RStringPtr& theDescription, const ::Ice::Context& __ctx, const ::omero::model::Callback_Screen_setDescriptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDescription(theDescription, &__ctx, __del, __cookie);
    }

    void end_setDescription(const ::Ice::AsyncResultPtr&);
    
private:

    void setDescription(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setDescription(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Screen> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Screen*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<Screen*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Screen> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Screen*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<Screen*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Screen> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Screen*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<Screen*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Screen> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Screen*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<Screen*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Screen> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Screen*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<Screen*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Screen> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Screen*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<Screen*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Screen> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Screen*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<Screen*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Screen> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Screen*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<Screen*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Screen> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Screen*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<Screen*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Screen> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Screen*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<Screen*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Screen> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Screen*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<Screen*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Screen> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Screen*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<Screen*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Screen> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Screen*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<Screen*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Screen> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Screen*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<Screen*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Screen> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Screen*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<Screen*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Screen> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Screen*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<Screen*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Screen> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Screen*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<Screen*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Screen> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Screen*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<Screen*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Screen> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Screen*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<Screen*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

namespace IceDelegate
{

namespace omero
{

namespace model
{

class Screen : virtual public ::IceDelegate::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*) = 0;

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::RStringPtr getType(const ::Ice::Context*) = 0;

    virtual void setType(const ::omero::RStringPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::RStringPtr getProtocolIdentifier(const ::Ice::Context*) = 0;

    virtual void setProtocolIdentifier(const ::omero::RStringPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::RStringPtr getProtocolDescription(const ::Ice::Context*) = 0;

    virtual void setProtocolDescription(const ::omero::RStringPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::RStringPtr getReagentSetIdentifier(const ::Ice::Context*) = 0;

    virtual void setReagentSetIdentifier(const ::omero::RStringPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::RStringPtr getReagentSetDescription(const ::Ice::Context*) = 0;

    virtual void setReagentSetDescription(const ::omero::RStringPtr&, const ::Ice::Context*) = 0;

    virtual void unloadPlateLinks(const ::Ice::Context*) = 0;

    virtual ::Ice::Int sizeOfPlateLinks(const ::Ice::Context*) = 0;

    virtual ::omero::model::ScreenPlateLinksSeq copyPlateLinks(const ::Ice::Context*) = 0;

    virtual void addScreenPlateLink(const ::omero::model::ScreenPlateLinkPtr&, const ::Ice::Context*) = 0;

    virtual void addAllScreenPlateLinkSet(const ::omero::model::ScreenPlateLinksSeq&, const ::Ice::Context*) = 0;

    virtual void removeScreenPlateLink(const ::omero::model::ScreenPlateLinkPtr&, const ::Ice::Context*) = 0;

    virtual void removeAllScreenPlateLinkSet(const ::omero::model::ScreenPlateLinksSeq&, const ::Ice::Context*) = 0;

    virtual void clearPlateLinks(const ::Ice::Context*) = 0;

    virtual void reloadPlateLinks(const ::omero::model::ScreenPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::sys::CountMap getPlateLinksCountPerOwner(const ::Ice::Context*) = 0;

    virtual ::omero::model::ScreenPlateLinkPtr linkPlate(const ::omero::model::PlatePtr&, const ::Ice::Context*) = 0;

    virtual void addScreenPlateLinkToBoth(const ::omero::model::ScreenPlateLinkPtr&, bool, const ::Ice::Context*) = 0;

    virtual ::omero::model::ScreenPlateLinksSeq findScreenPlateLink(const ::omero::model::PlatePtr&, const ::Ice::Context*) = 0;

    virtual void unlinkPlate(const ::omero::model::PlatePtr&, const ::Ice::Context*) = 0;

    virtual void removeScreenPlateLinkFromBoth(const ::omero::model::ScreenPlateLinkPtr&, bool, const ::Ice::Context*) = 0;

    virtual ::omero::model::ScreenLinkedPlateSeq linkedPlateList(const ::Ice::Context*) = 0;

    virtual void unloadReagents(const ::Ice::Context*) = 0;

    virtual ::Ice::Int sizeOfReagents(const ::Ice::Context*) = 0;

    virtual ::omero::model::ScreenReagentsSeq copyReagents(const ::Ice::Context*) = 0;

    virtual void addReagent(const ::omero::model::ReagentPtr&, const ::Ice::Context*) = 0;

    virtual void addAllReagentSet(const ::omero::model::ScreenReagentsSeq&, const ::Ice::Context*) = 0;

    virtual void removeReagent(const ::omero::model::ReagentPtr&, const ::Ice::Context*) = 0;

    virtual void removeAllReagentSet(const ::omero::model::ScreenReagentsSeq&, const ::Ice::Context*) = 0;

    virtual void clearReagents(const ::Ice::Context*) = 0;

    virtual void reloadReagents(const ::omero::model::ScreenPtr&, const ::Ice::Context*) = 0;

    virtual void unloadAnnotationLinks(const ::Ice::Context*) = 0;

    virtual ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context*) = 0;

    virtual ::omero::model::ScreenAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context*) = 0;

    virtual void addScreenAnnotationLink(const ::omero::model::ScreenAnnotationLinkPtr&, const ::Ice::Context*) = 0;

    virtual void addAllScreenAnnotationLinkSet(const ::omero::model::ScreenAnnotationLinksSeq&, const ::Ice::Context*) = 0;

    virtual void removeScreenAnnotationLink(const ::omero::model::ScreenAnnotationLinkPtr&, const ::Ice::Context*) = 0;

    virtual void removeAllScreenAnnotationLinkSet(const ::omero::model::ScreenAnnotationLinksSeq&, const ::Ice::Context*) = 0;

    virtual void clearAnnotationLinks(const ::Ice::Context*) = 0;

    virtual void reloadAnnotationLinks(const ::omero::model::ScreenPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context*) = 0;

    virtual ::omero::model::ScreenAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*) = 0;

    virtual void addScreenAnnotationLinkToBoth(const ::omero::model::ScreenAnnotationLinkPtr&, bool, const ::Ice::Context*) = 0;

    virtual ::omero::model::ScreenAnnotationLinksSeq findScreenAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*) = 0;

    virtual void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*) = 0;

    virtual void removeScreenAnnotationLinkFromBoth(const ::omero::model::ScreenAnnotationLinkPtr&, bool, const ::Ice::Context*) = 0;

    virtual ::omero::model::ScreenLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context*) = 0;

    virtual ::omero::RStringPtr getName(const ::Ice::Context*) = 0;

    virtual void setName(const ::omero::RStringPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::RStringPtr getDescription(const ::Ice::Context*) = 0;

    virtual void setDescription(const ::omero::RStringPtr&, const ::Ice::Context*) = 0;
};

}

}

}

namespace IceDelegateM
{

namespace omero
{

namespace model
{

class Screen : virtual public ::IceDelegate::omero::model::Screen,
               virtual public ::IceDelegateM::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::RStringPtr getType(const ::Ice::Context*);

    virtual void setType(const ::omero::RStringPtr&, const ::Ice::Context*);

    virtual ::omero::RStringPtr getProtocolIdentifier(const ::Ice::Context*);

    virtual void setProtocolIdentifier(const ::omero::RStringPtr&, const ::Ice::Context*);

    virtual ::omero::RStringPtr getProtocolDescription(const ::Ice::Context*);

    virtual void setProtocolDescription(const ::omero::RStringPtr&, const ::Ice::Context*);

    virtual ::omero::RStringPtr getReagentSetIdentifier(const ::Ice::Context*);

    virtual void setReagentSetIdentifier(const ::omero::RStringPtr&, const ::Ice::Context*);

    virtual ::omero::RStringPtr getReagentSetDescription(const ::Ice::Context*);

    virtual void setReagentSetDescription(const ::omero::RStringPtr&, const ::Ice::Context*);

    virtual void unloadPlateLinks(const ::Ice::Context*);

    virtual ::Ice::Int sizeOfPlateLinks(const ::Ice::Context*);

    virtual ::omero::model::ScreenPlateLinksSeq copyPlateLinks(const ::Ice::Context*);

    virtual void addScreenPlateLink(const ::omero::model::ScreenPlateLinkPtr&, const ::Ice::Context*);

    virtual void addAllScreenPlateLinkSet(const ::omero::model::ScreenPlateLinksSeq&, const ::Ice::Context*);

    virtual void removeScreenPlateLink(const ::omero::model::ScreenPlateLinkPtr&, const ::Ice::Context*);

    virtual void removeAllScreenPlateLinkSet(const ::omero::model::ScreenPlateLinksSeq&, const ::Ice::Context*);

    virtual void clearPlateLinks(const ::Ice::Context*);

    virtual void reloadPlateLinks(const ::omero::model::ScreenPtr&, const ::Ice::Context*);

    virtual ::omero::sys::CountMap getPlateLinksCountPerOwner(const ::Ice::Context*);

    virtual ::omero::model::ScreenPlateLinkPtr linkPlate(const ::omero::model::PlatePtr&, const ::Ice::Context*);

    virtual void addScreenPlateLinkToBoth(const ::omero::model::ScreenPlateLinkPtr&, bool, const ::Ice::Context*);

    virtual ::omero::model::ScreenPlateLinksSeq findScreenPlateLink(const ::omero::model::PlatePtr&, const ::Ice::Context*);

    virtual void unlinkPlate(const ::omero::model::PlatePtr&, const ::Ice::Context*);

    virtual void removeScreenPlateLinkFromBoth(const ::omero::model::ScreenPlateLinkPtr&, bool, const ::Ice::Context*);

    virtual ::omero::model::ScreenLinkedPlateSeq linkedPlateList(const ::Ice::Context*);

    virtual void unloadReagents(const ::Ice::Context*);

    virtual ::Ice::Int sizeOfReagents(const ::Ice::Context*);

    virtual ::omero::model::ScreenReagentsSeq copyReagents(const ::Ice::Context*);

    virtual void addReagent(const ::omero::model::ReagentPtr&, const ::Ice::Context*);

    virtual void addAllReagentSet(const ::omero::model::ScreenReagentsSeq&, const ::Ice::Context*);

    virtual void removeReagent(const ::omero::model::ReagentPtr&, const ::Ice::Context*);

    virtual void removeAllReagentSet(const ::omero::model::ScreenReagentsSeq&, const ::Ice::Context*);

    virtual void clearReagents(const ::Ice::Context*);

    virtual void reloadReagents(const ::omero::model::ScreenPtr&, const ::Ice::Context*);

    virtual void unloadAnnotationLinks(const ::Ice::Context*);

    virtual ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context*);

    virtual ::omero::model::ScreenAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context*);

    virtual void addScreenAnnotationLink(const ::omero::model::ScreenAnnotationLinkPtr&, const ::Ice::Context*);

    virtual void addAllScreenAnnotationLinkSet(const ::omero::model::ScreenAnnotationLinksSeq&, const ::Ice::Context*);

    virtual void removeScreenAnnotationLink(const ::omero::model::ScreenAnnotationLinkPtr&, const ::Ice::Context*);

    virtual void removeAllScreenAnnotationLinkSet(const ::omero::model::ScreenAnnotationLinksSeq&, const ::Ice::Context*);

    virtual void clearAnnotationLinks(const ::Ice::Context*);

    virtual void reloadAnnotationLinks(const ::omero::model::ScreenPtr&, const ::Ice::Context*);

    virtual ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context*);

    virtual ::omero::model::ScreenAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);

    virtual void addScreenAnnotationLinkToBoth(const ::omero::model::ScreenAnnotationLinkPtr&, bool, const ::Ice::Context*);

    virtual ::omero::model::ScreenAnnotationLinksSeq findScreenAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);

    virtual void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);

    virtual void removeScreenAnnotationLinkFromBoth(const ::omero::model::ScreenAnnotationLinkPtr&, bool, const ::Ice::Context*);

    virtual ::omero::model::ScreenLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context*);

    virtual ::omero::RStringPtr getName(const ::Ice::Context*);

    virtual void setName(const ::omero::RStringPtr&, const ::Ice::Context*);

    virtual ::omero::RStringPtr getDescription(const ::Ice::Context*);

    virtual void setDescription(const ::omero::RStringPtr&, const ::Ice::Context*);
};

}

}

}

namespace IceDelegateD
{

namespace omero
{

namespace model
{

class Screen : virtual public ::IceDelegate::omero::model::Screen,
               virtual public ::IceDelegateD::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::RStringPtr getType(const ::Ice::Context*);

    virtual void setType(const ::omero::RStringPtr&, const ::Ice::Context*);

    virtual ::omero::RStringPtr getProtocolIdentifier(const ::Ice::Context*);

    virtual void setProtocolIdentifier(const ::omero::RStringPtr&, const ::Ice::Context*);

    virtual ::omero::RStringPtr getProtocolDescription(const ::Ice::Context*);

    virtual void setProtocolDescription(const ::omero::RStringPtr&, const ::Ice::Context*);

    virtual ::omero::RStringPtr getReagentSetIdentifier(const ::Ice::Context*);

    virtual void setReagentSetIdentifier(const ::omero::RStringPtr&, const ::Ice::Context*);

    virtual ::omero::RStringPtr getReagentSetDescription(const ::Ice::Context*);

    virtual void setReagentSetDescription(const ::omero::RStringPtr&, const ::Ice::Context*);

    virtual void unloadPlateLinks(const ::Ice::Context*);

    virtual ::Ice::Int sizeOfPlateLinks(const ::Ice::Context*);

    virtual ::omero::model::ScreenPlateLinksSeq copyPlateLinks(const ::Ice::Context*);

    virtual void addScreenPlateLink(const ::omero::model::ScreenPlateLinkPtr&, const ::Ice::Context*);

    virtual void addAllScreenPlateLinkSet(const ::omero::model::ScreenPlateLinksSeq&, const ::Ice::Context*);

    virtual void removeScreenPlateLink(const ::omero::model::ScreenPlateLinkPtr&, const ::Ice::Context*);

    virtual void removeAllScreenPlateLinkSet(const ::omero::model::ScreenPlateLinksSeq&, const ::Ice::Context*);

    virtual void clearPlateLinks(const ::Ice::Context*);

    virtual void reloadPlateLinks(const ::omero::model::ScreenPtr&, const ::Ice::Context*);

    virtual ::omero::sys::CountMap getPlateLinksCountPerOwner(const ::Ice::Context*);

    virtual ::omero::model::ScreenPlateLinkPtr linkPlate(const ::omero::model::PlatePtr&, const ::Ice::Context*);

    virtual void addScreenPlateLinkToBoth(const ::omero::model::ScreenPlateLinkPtr&, bool, const ::Ice::Context*);

    virtual ::omero::model::ScreenPlateLinksSeq findScreenPlateLink(const ::omero::model::PlatePtr&, const ::Ice::Context*);

    virtual void unlinkPlate(const ::omero::model::PlatePtr&, const ::Ice::Context*);

    virtual void removeScreenPlateLinkFromBoth(const ::omero::model::ScreenPlateLinkPtr&, bool, const ::Ice::Context*);

    virtual ::omero::model::ScreenLinkedPlateSeq linkedPlateList(const ::Ice::Context*);

    virtual void unloadReagents(const ::Ice::Context*);

    virtual ::Ice::Int sizeOfReagents(const ::Ice::Context*);

    virtual ::omero::model::ScreenReagentsSeq copyReagents(const ::Ice::Context*);

    virtual void addReagent(const ::omero::model::ReagentPtr&, const ::Ice::Context*);

    virtual void addAllReagentSet(const ::omero::model::ScreenReagentsSeq&, const ::Ice::Context*);

    virtual void removeReagent(const ::omero::model::ReagentPtr&, const ::Ice::Context*);

    virtual void removeAllReagentSet(const ::omero::model::ScreenReagentsSeq&, const ::Ice::Context*);

    virtual void clearReagents(const ::Ice::Context*);

    virtual void reloadReagents(const ::omero::model::ScreenPtr&, const ::Ice::Context*);

    virtual void unloadAnnotationLinks(const ::Ice::Context*);

    virtual ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context*);

    virtual ::omero::model::ScreenAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context*);

    virtual void addScreenAnnotationLink(const ::omero::model::ScreenAnnotationLinkPtr&, const ::Ice::Context*);

    virtual void addAllScreenAnnotationLinkSet(const ::omero::model::ScreenAnnotationLinksSeq&, const ::Ice::Context*);

    virtual void removeScreenAnnotationLink(const ::omero::model::ScreenAnnotationLinkPtr&, const ::Ice::Context*);

    virtual void removeAllScreenAnnotationLinkSet(const ::omero::model::ScreenAnnotationLinksSeq&, const ::Ice::Context*);

    virtual void clearAnnotationLinks(const ::Ice::Context*);

    virtual void reloadAnnotationLinks(const ::omero::model::ScreenPtr&, const ::Ice::Context*);

    virtual ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context*);

    virtual ::omero::model::ScreenAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);

    virtual void addScreenAnnotationLinkToBoth(const ::omero::model::ScreenAnnotationLinkPtr&, bool, const ::Ice::Context*);

    virtual ::omero::model::ScreenAnnotationLinksSeq findScreenAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);

    virtual void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);

    virtual void removeScreenAnnotationLinkFromBoth(const ::omero::model::ScreenAnnotationLinkPtr&, bool, const ::Ice::Context*);

    virtual ::omero::model::ScreenLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context*);

    virtual ::omero::RStringPtr getName(const ::Ice::Context*);

    virtual void setName(const ::omero::RStringPtr&, const ::Ice::Context*);

    virtual ::omero::RStringPtr getDescription(const ::Ice::Context*);

    virtual void setDescription(const ::omero::RStringPtr&, const ::Ice::Context*);
};

}

}

}

namespace omero
{

namespace model
{

class Screen : public ::omero::model::IObject
{
public:

    typedef ScreenPrx ProxyType;
    typedef ScreenPtr PointerType;
    
    Screen() {}
    Screen(const ::omero::RLongPtr&, const ::omero::model::DetailsPtr&, bool, const ::omero::RIntPtr&, const ::omero::RStringPtr&, const ::omero::RStringPtr&, const ::omero::RStringPtr&, const ::omero::RStringPtr&, const ::omero::RStringPtr&, const ::omero::model::ScreenPlateLinksSeq&, bool, const ::omero::sys::CountMap&, const ::omero::model::ScreenReagentsSeq&, bool, const ::omero::model::ScreenAnnotationLinksSeq&, bool, const ::omero::sys::CountMap&, const ::omero::RStringPtr&, const ::omero::RStringPtr&);
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    virtual ::omero::RIntPtr getVersion(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getType(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getType(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setType(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setType(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getProtocolIdentifier(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getProtocolIdentifier(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setProtocolIdentifier(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setProtocolIdentifier(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getProtocolDescription(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getProtocolDescription(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setProtocolDescription(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setProtocolDescription(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getReagentSetIdentifier(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getReagentSetIdentifier(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setReagentSetIdentifier(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setReagentSetIdentifier(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getReagentSetDescription(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getReagentSetDescription(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setReagentSetDescription(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setReagentSetDescription(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unloadPlateLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unloadPlateLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int sizeOfPlateLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sizeOfPlateLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::ScreenPlateLinksSeq copyPlateLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___copyPlateLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addScreenPlateLink(const ::omero::model::ScreenPlateLinkPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addScreenPlateLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addAllScreenPlateLinkSet(const ::omero::model::ScreenPlateLinksSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addAllScreenPlateLinkSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeScreenPlateLink(const ::omero::model::ScreenPlateLinkPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeScreenPlateLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeAllScreenPlateLinkSet(const ::omero::model::ScreenPlateLinksSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeAllScreenPlateLinkSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void clearPlateLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___clearPlateLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reloadPlateLinks(const ::omero::model::ScreenPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reloadPlateLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::sys::CountMap getPlateLinksCountPerOwner(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getPlateLinksCountPerOwner(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::ScreenPlateLinkPtr linkPlate(const ::omero::model::PlatePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___linkPlate(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addScreenPlateLinkToBoth(const ::omero::model::ScreenPlateLinkPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addScreenPlateLinkToBoth(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::ScreenPlateLinksSeq findScreenPlateLink(const ::omero::model::PlatePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___findScreenPlateLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unlinkPlate(const ::omero::model::PlatePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unlinkPlate(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeScreenPlateLinkFromBoth(const ::omero::model::ScreenPlateLinkPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeScreenPlateLinkFromBoth(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::ScreenLinkedPlateSeq linkedPlateList(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___linkedPlateList(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unloadReagents(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unloadReagents(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int sizeOfReagents(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sizeOfReagents(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::ScreenReagentsSeq copyReagents(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___copyReagents(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addReagent(const ::omero::model::ReagentPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addReagent(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addAllReagentSet(const ::omero::model::ScreenReagentsSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addAllReagentSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeReagent(const ::omero::model::ReagentPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeReagent(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeAllReagentSet(const ::omero::model::ScreenReagentsSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeAllReagentSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void clearReagents(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___clearReagents(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reloadReagents(const ::omero::model::ScreenPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reloadReagents(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unloadAnnotationLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unloadAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sizeOfAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::ScreenAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___copyAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addScreenAnnotationLink(const ::omero::model::ScreenAnnotationLinkPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addScreenAnnotationLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addAllScreenAnnotationLinkSet(const ::omero::model::ScreenAnnotationLinksSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addAllScreenAnnotationLinkSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeScreenAnnotationLink(const ::omero::model::ScreenAnnotationLinkPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeScreenAnnotationLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeAllScreenAnnotationLinkSet(const ::omero::model::ScreenAnnotationLinksSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeAllScreenAnnotationLinkSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void clearAnnotationLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___clearAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reloadAnnotationLinks(const ::omero::model::ScreenPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reloadAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getAnnotationLinksCountPerOwner(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::ScreenAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___linkAnnotation(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addScreenAnnotationLinkToBoth(const ::omero::model::ScreenAnnotationLinkPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addScreenAnnotationLinkToBoth(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::ScreenAnnotationLinksSeq findScreenAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___findScreenAnnotationLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unlinkAnnotation(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeScreenAnnotationLinkFromBoth(const ::omero::model::ScreenAnnotationLinkPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeScreenAnnotationLinkFromBoth(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::ScreenLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___linkedAnnotationList(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getName(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getName(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setName(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setName(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getDescription(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getDescription(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setDescription(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setDescription(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif

protected:

    ::omero::RIntPtr version;

    ::omero::RStringPtr type;

    ::omero::RStringPtr protocolIdentifier;

    ::omero::RStringPtr protocolDescription;

    ::omero::RStringPtr reagentSetIdentifier;

    ::omero::RStringPtr reagentSetDescription;

    ::omero::model::ScreenPlateLinksSeq plateLinksSeq;

    bool plateLinksLoaded;

    ::omero::sys::CountMap plateLinksCountPerOwner;

    ::omero::model::ScreenReagentsSeq reagentsSeq;

    bool reagentsLoaded;

    ::omero::model::ScreenAnnotationLinksSeq annotationLinksSeq;

    bool annotationLinksLoaded;

    ::omero::sys::CountMap annotationLinksCountPerOwner;

    ::omero::RStringPtr name;

    ::omero::RStringPtr description;
};

inline bool operator==(const Screen& l, const Screen& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Screen& l, const Screen& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

}

namespace omero
{

namespace model
{

template<class T>
class CallbackNC_Screen_getVersion : public Callback_Screen_getVersion_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RIntPtr&);

    CallbackNC_Screen_getVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ScreenPrx __proxy = ::omero::model::ScreenPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Screen_getVersionPtr
newCallback_Screen_getVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_getVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_getVersionPtr
newCallback_Screen_getVersion(T* instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_getVersion<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Screen_getVersion : public Callback_Screen_getVersion_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RIntPtr&, const CT&);

    Callback_Screen_getVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ScreenPrx __proxy = ::omero::model::ScreenPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Screen_getVersionPtr
newCallback_Screen_getVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_getVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_getVersionPtr
newCallback_Screen_getVersion(T* instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_getVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Screen_setVersion : public Callback_Screen_setVersion_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Screen_setVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Screen_setVersionPtr
newCallback_Screen_setVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_setVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_setVersionPtr
newCallback_Screen_setVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_setVersion<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Screen_setVersionPtr
newCallback_Screen_setVersion(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_setVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_setVersionPtr
newCallback_Screen_setVersion(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_setVersion<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Screen_setVersion : public Callback_Screen_setVersion_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Screen_setVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Screen_setVersionPtr
newCallback_Screen_setVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_setVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_setVersionPtr
newCallback_Screen_setVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_setVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_setVersionPtr
newCallback_Screen_setVersion(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_setVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_setVersionPtr
newCallback_Screen_setVersion(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_setVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Screen_getType : public Callback_Screen_getType_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_Screen_getType(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ScreenPrx __proxy = ::omero::model::ScreenPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getType(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Screen_getTypePtr
newCallback_Screen_getType(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_getType<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_getTypePtr
newCallback_Screen_getType(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_getType<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Screen_getType : public Callback_Screen_getType_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_Screen_getType(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ScreenPrx __proxy = ::omero::model::ScreenPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getType(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Screen_getTypePtr
newCallback_Screen_getType(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_getType<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_getTypePtr
newCallback_Screen_getType(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_getType<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Screen_setType : public Callback_Screen_setType_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Screen_setType(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Screen_setTypePtr
newCallback_Screen_setType(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_setType<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_setTypePtr
newCallback_Screen_setType(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_setType<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Screen_setTypePtr
newCallback_Screen_setType(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_setType<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_setTypePtr
newCallback_Screen_setType(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_setType<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Screen_setType : public Callback_Screen_setType_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Screen_setType(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Screen_setTypePtr
newCallback_Screen_setType(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_setType<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_setTypePtr
newCallback_Screen_setType(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_setType<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_setTypePtr
newCallback_Screen_setType(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_setType<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_setTypePtr
newCallback_Screen_setType(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_setType<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Screen_getProtocolIdentifier : public Callback_Screen_getProtocolIdentifier_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_Screen_getProtocolIdentifier(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ScreenPrx __proxy = ::omero::model::ScreenPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getProtocolIdentifier(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Screen_getProtocolIdentifierPtr
newCallback_Screen_getProtocolIdentifier(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_getProtocolIdentifier<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_getProtocolIdentifierPtr
newCallback_Screen_getProtocolIdentifier(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_getProtocolIdentifier<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Screen_getProtocolIdentifier : public Callback_Screen_getProtocolIdentifier_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_Screen_getProtocolIdentifier(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ScreenPrx __proxy = ::omero::model::ScreenPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getProtocolIdentifier(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Screen_getProtocolIdentifierPtr
newCallback_Screen_getProtocolIdentifier(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_getProtocolIdentifier<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_getProtocolIdentifierPtr
newCallback_Screen_getProtocolIdentifier(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_getProtocolIdentifier<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Screen_setProtocolIdentifier : public Callback_Screen_setProtocolIdentifier_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Screen_setProtocolIdentifier(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Screen_setProtocolIdentifierPtr
newCallback_Screen_setProtocolIdentifier(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_setProtocolIdentifier<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_setProtocolIdentifierPtr
newCallback_Screen_setProtocolIdentifier(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_setProtocolIdentifier<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Screen_setProtocolIdentifierPtr
newCallback_Screen_setProtocolIdentifier(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_setProtocolIdentifier<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_setProtocolIdentifierPtr
newCallback_Screen_setProtocolIdentifier(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_setProtocolIdentifier<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Screen_setProtocolIdentifier : public Callback_Screen_setProtocolIdentifier_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Screen_setProtocolIdentifier(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Screen_setProtocolIdentifierPtr
newCallback_Screen_setProtocolIdentifier(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_setProtocolIdentifier<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_setProtocolIdentifierPtr
newCallback_Screen_setProtocolIdentifier(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_setProtocolIdentifier<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_setProtocolIdentifierPtr
newCallback_Screen_setProtocolIdentifier(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_setProtocolIdentifier<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_setProtocolIdentifierPtr
newCallback_Screen_setProtocolIdentifier(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_setProtocolIdentifier<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Screen_getProtocolDescription : public Callback_Screen_getProtocolDescription_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_Screen_getProtocolDescription(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ScreenPrx __proxy = ::omero::model::ScreenPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getProtocolDescription(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Screen_getProtocolDescriptionPtr
newCallback_Screen_getProtocolDescription(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_getProtocolDescription<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_getProtocolDescriptionPtr
newCallback_Screen_getProtocolDescription(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_getProtocolDescription<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Screen_getProtocolDescription : public Callback_Screen_getProtocolDescription_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_Screen_getProtocolDescription(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ScreenPrx __proxy = ::omero::model::ScreenPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getProtocolDescription(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Screen_getProtocolDescriptionPtr
newCallback_Screen_getProtocolDescription(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_getProtocolDescription<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_getProtocolDescriptionPtr
newCallback_Screen_getProtocolDescription(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_getProtocolDescription<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Screen_setProtocolDescription : public Callback_Screen_setProtocolDescription_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Screen_setProtocolDescription(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Screen_setProtocolDescriptionPtr
newCallback_Screen_setProtocolDescription(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_setProtocolDescription<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_setProtocolDescriptionPtr
newCallback_Screen_setProtocolDescription(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_setProtocolDescription<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Screen_setProtocolDescriptionPtr
newCallback_Screen_setProtocolDescription(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_setProtocolDescription<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_setProtocolDescriptionPtr
newCallback_Screen_setProtocolDescription(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_setProtocolDescription<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Screen_setProtocolDescription : public Callback_Screen_setProtocolDescription_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Screen_setProtocolDescription(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Screen_setProtocolDescriptionPtr
newCallback_Screen_setProtocolDescription(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_setProtocolDescription<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_setProtocolDescriptionPtr
newCallback_Screen_setProtocolDescription(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_setProtocolDescription<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_setProtocolDescriptionPtr
newCallback_Screen_setProtocolDescription(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_setProtocolDescription<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_setProtocolDescriptionPtr
newCallback_Screen_setProtocolDescription(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_setProtocolDescription<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Screen_getReagentSetIdentifier : public Callback_Screen_getReagentSetIdentifier_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_Screen_getReagentSetIdentifier(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ScreenPrx __proxy = ::omero::model::ScreenPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getReagentSetIdentifier(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Screen_getReagentSetIdentifierPtr
newCallback_Screen_getReagentSetIdentifier(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_getReagentSetIdentifier<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_getReagentSetIdentifierPtr
newCallback_Screen_getReagentSetIdentifier(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_getReagentSetIdentifier<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Screen_getReagentSetIdentifier : public Callback_Screen_getReagentSetIdentifier_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_Screen_getReagentSetIdentifier(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ScreenPrx __proxy = ::omero::model::ScreenPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getReagentSetIdentifier(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Screen_getReagentSetIdentifierPtr
newCallback_Screen_getReagentSetIdentifier(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_getReagentSetIdentifier<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_getReagentSetIdentifierPtr
newCallback_Screen_getReagentSetIdentifier(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_getReagentSetIdentifier<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Screen_setReagentSetIdentifier : public Callback_Screen_setReagentSetIdentifier_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Screen_setReagentSetIdentifier(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Screen_setReagentSetIdentifierPtr
newCallback_Screen_setReagentSetIdentifier(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_setReagentSetIdentifier<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_setReagentSetIdentifierPtr
newCallback_Screen_setReagentSetIdentifier(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_setReagentSetIdentifier<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Screen_setReagentSetIdentifierPtr
newCallback_Screen_setReagentSetIdentifier(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_setReagentSetIdentifier<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_setReagentSetIdentifierPtr
newCallback_Screen_setReagentSetIdentifier(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_setReagentSetIdentifier<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Screen_setReagentSetIdentifier : public Callback_Screen_setReagentSetIdentifier_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Screen_setReagentSetIdentifier(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Screen_setReagentSetIdentifierPtr
newCallback_Screen_setReagentSetIdentifier(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_setReagentSetIdentifier<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_setReagentSetIdentifierPtr
newCallback_Screen_setReagentSetIdentifier(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_setReagentSetIdentifier<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_setReagentSetIdentifierPtr
newCallback_Screen_setReagentSetIdentifier(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_setReagentSetIdentifier<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_setReagentSetIdentifierPtr
newCallback_Screen_setReagentSetIdentifier(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_setReagentSetIdentifier<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Screen_getReagentSetDescription : public Callback_Screen_getReagentSetDescription_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_Screen_getReagentSetDescription(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ScreenPrx __proxy = ::omero::model::ScreenPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getReagentSetDescription(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Screen_getReagentSetDescriptionPtr
newCallback_Screen_getReagentSetDescription(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_getReagentSetDescription<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_getReagentSetDescriptionPtr
newCallback_Screen_getReagentSetDescription(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_getReagentSetDescription<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Screen_getReagentSetDescription : public Callback_Screen_getReagentSetDescription_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_Screen_getReagentSetDescription(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ScreenPrx __proxy = ::omero::model::ScreenPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getReagentSetDescription(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Screen_getReagentSetDescriptionPtr
newCallback_Screen_getReagentSetDescription(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_getReagentSetDescription<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_getReagentSetDescriptionPtr
newCallback_Screen_getReagentSetDescription(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_getReagentSetDescription<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Screen_setReagentSetDescription : public Callback_Screen_setReagentSetDescription_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Screen_setReagentSetDescription(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Screen_setReagentSetDescriptionPtr
newCallback_Screen_setReagentSetDescription(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_setReagentSetDescription<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_setReagentSetDescriptionPtr
newCallback_Screen_setReagentSetDescription(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_setReagentSetDescription<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Screen_setReagentSetDescriptionPtr
newCallback_Screen_setReagentSetDescription(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_setReagentSetDescription<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_setReagentSetDescriptionPtr
newCallback_Screen_setReagentSetDescription(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_setReagentSetDescription<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Screen_setReagentSetDescription : public Callback_Screen_setReagentSetDescription_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Screen_setReagentSetDescription(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Screen_setReagentSetDescriptionPtr
newCallback_Screen_setReagentSetDescription(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_setReagentSetDescription<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_setReagentSetDescriptionPtr
newCallback_Screen_setReagentSetDescription(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_setReagentSetDescription<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_setReagentSetDescriptionPtr
newCallback_Screen_setReagentSetDescription(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_setReagentSetDescription<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_setReagentSetDescriptionPtr
newCallback_Screen_setReagentSetDescription(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_setReagentSetDescription<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Screen_unloadPlateLinks : public Callback_Screen_unloadPlateLinks_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Screen_unloadPlateLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Screen_unloadPlateLinksPtr
newCallback_Screen_unloadPlateLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_unloadPlateLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_unloadPlateLinksPtr
newCallback_Screen_unloadPlateLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_unloadPlateLinks<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Screen_unloadPlateLinksPtr
newCallback_Screen_unloadPlateLinks(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_unloadPlateLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_unloadPlateLinksPtr
newCallback_Screen_unloadPlateLinks(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_unloadPlateLinks<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Screen_unloadPlateLinks : public Callback_Screen_unloadPlateLinks_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Screen_unloadPlateLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Screen_unloadPlateLinksPtr
newCallback_Screen_unloadPlateLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_unloadPlateLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_unloadPlateLinksPtr
newCallback_Screen_unloadPlateLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_unloadPlateLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_unloadPlateLinksPtr
newCallback_Screen_unloadPlateLinks(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_unloadPlateLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_unloadPlateLinksPtr
newCallback_Screen_unloadPlateLinks(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_unloadPlateLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Screen_sizeOfPlateLinks : public Callback_Screen_sizeOfPlateLinks_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Screen_sizeOfPlateLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ScreenPrx __proxy = ::omero::model::ScreenPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfPlateLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Screen_sizeOfPlateLinksPtr
newCallback_Screen_sizeOfPlateLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_sizeOfPlateLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_sizeOfPlateLinksPtr
newCallback_Screen_sizeOfPlateLinks(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_sizeOfPlateLinks<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Screen_sizeOfPlateLinks : public Callback_Screen_sizeOfPlateLinks_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Screen_sizeOfPlateLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ScreenPrx __proxy = ::omero::model::ScreenPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfPlateLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Screen_sizeOfPlateLinksPtr
newCallback_Screen_sizeOfPlateLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_sizeOfPlateLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_sizeOfPlateLinksPtr
newCallback_Screen_sizeOfPlateLinks(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_sizeOfPlateLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Screen_copyPlateLinks : public Callback_Screen_copyPlateLinks_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::ScreenPlateLinksSeq&);

    CallbackNC_Screen_copyPlateLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ScreenPrx __proxy = ::omero::model::ScreenPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ScreenPlateLinksSeq __ret;
        try
        {
            __ret = __proxy->end_copyPlateLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Screen_copyPlateLinksPtr
newCallback_Screen_copyPlateLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ScreenPlateLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_copyPlateLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_copyPlateLinksPtr
newCallback_Screen_copyPlateLinks(T* instance, void (T::*cb)(const ::omero::model::ScreenPlateLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_copyPlateLinks<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Screen_copyPlateLinks : public Callback_Screen_copyPlateLinks_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::ScreenPlateLinksSeq&, const CT&);

    Callback_Screen_copyPlateLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ScreenPrx __proxy = ::omero::model::ScreenPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ScreenPlateLinksSeq __ret;
        try
        {
            __ret = __proxy->end_copyPlateLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Screen_copyPlateLinksPtr
newCallback_Screen_copyPlateLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ScreenPlateLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_copyPlateLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_copyPlateLinksPtr
newCallback_Screen_copyPlateLinks(T* instance, void (T::*cb)(const ::omero::model::ScreenPlateLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_copyPlateLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Screen_addScreenPlateLink : public Callback_Screen_addScreenPlateLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Screen_addScreenPlateLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Screen_addScreenPlateLinkPtr
newCallback_Screen_addScreenPlateLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_addScreenPlateLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_addScreenPlateLinkPtr
newCallback_Screen_addScreenPlateLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_addScreenPlateLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Screen_addScreenPlateLinkPtr
newCallback_Screen_addScreenPlateLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_addScreenPlateLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_addScreenPlateLinkPtr
newCallback_Screen_addScreenPlateLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_addScreenPlateLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Screen_addScreenPlateLink : public Callback_Screen_addScreenPlateLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Screen_addScreenPlateLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Screen_addScreenPlateLinkPtr
newCallback_Screen_addScreenPlateLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_addScreenPlateLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_addScreenPlateLinkPtr
newCallback_Screen_addScreenPlateLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_addScreenPlateLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_addScreenPlateLinkPtr
newCallback_Screen_addScreenPlateLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_addScreenPlateLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_addScreenPlateLinkPtr
newCallback_Screen_addScreenPlateLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_addScreenPlateLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Screen_addAllScreenPlateLinkSet : public Callback_Screen_addAllScreenPlateLinkSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Screen_addAllScreenPlateLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Screen_addAllScreenPlateLinkSetPtr
newCallback_Screen_addAllScreenPlateLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_addAllScreenPlateLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_addAllScreenPlateLinkSetPtr
newCallback_Screen_addAllScreenPlateLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_addAllScreenPlateLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Screen_addAllScreenPlateLinkSetPtr
newCallback_Screen_addAllScreenPlateLinkSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_addAllScreenPlateLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_addAllScreenPlateLinkSetPtr
newCallback_Screen_addAllScreenPlateLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_addAllScreenPlateLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Screen_addAllScreenPlateLinkSet : public Callback_Screen_addAllScreenPlateLinkSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Screen_addAllScreenPlateLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Screen_addAllScreenPlateLinkSetPtr
newCallback_Screen_addAllScreenPlateLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_addAllScreenPlateLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_addAllScreenPlateLinkSetPtr
newCallback_Screen_addAllScreenPlateLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_addAllScreenPlateLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_addAllScreenPlateLinkSetPtr
newCallback_Screen_addAllScreenPlateLinkSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_addAllScreenPlateLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_addAllScreenPlateLinkSetPtr
newCallback_Screen_addAllScreenPlateLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_addAllScreenPlateLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Screen_removeScreenPlateLink : public Callback_Screen_removeScreenPlateLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Screen_removeScreenPlateLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Screen_removeScreenPlateLinkPtr
newCallback_Screen_removeScreenPlateLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_removeScreenPlateLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_removeScreenPlateLinkPtr
newCallback_Screen_removeScreenPlateLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_removeScreenPlateLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Screen_removeScreenPlateLinkPtr
newCallback_Screen_removeScreenPlateLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_removeScreenPlateLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_removeScreenPlateLinkPtr
newCallback_Screen_removeScreenPlateLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_removeScreenPlateLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Screen_removeScreenPlateLink : public Callback_Screen_removeScreenPlateLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Screen_removeScreenPlateLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Screen_removeScreenPlateLinkPtr
newCallback_Screen_removeScreenPlateLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_removeScreenPlateLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_removeScreenPlateLinkPtr
newCallback_Screen_removeScreenPlateLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_removeScreenPlateLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_removeScreenPlateLinkPtr
newCallback_Screen_removeScreenPlateLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_removeScreenPlateLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_removeScreenPlateLinkPtr
newCallback_Screen_removeScreenPlateLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_removeScreenPlateLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Screen_removeAllScreenPlateLinkSet : public Callback_Screen_removeAllScreenPlateLinkSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Screen_removeAllScreenPlateLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Screen_removeAllScreenPlateLinkSetPtr
newCallback_Screen_removeAllScreenPlateLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_removeAllScreenPlateLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_removeAllScreenPlateLinkSetPtr
newCallback_Screen_removeAllScreenPlateLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_removeAllScreenPlateLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Screen_removeAllScreenPlateLinkSetPtr
newCallback_Screen_removeAllScreenPlateLinkSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_removeAllScreenPlateLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_removeAllScreenPlateLinkSetPtr
newCallback_Screen_removeAllScreenPlateLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_removeAllScreenPlateLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Screen_removeAllScreenPlateLinkSet : public Callback_Screen_removeAllScreenPlateLinkSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Screen_removeAllScreenPlateLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Screen_removeAllScreenPlateLinkSetPtr
newCallback_Screen_removeAllScreenPlateLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_removeAllScreenPlateLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_removeAllScreenPlateLinkSetPtr
newCallback_Screen_removeAllScreenPlateLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_removeAllScreenPlateLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_removeAllScreenPlateLinkSetPtr
newCallback_Screen_removeAllScreenPlateLinkSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_removeAllScreenPlateLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_removeAllScreenPlateLinkSetPtr
newCallback_Screen_removeAllScreenPlateLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_removeAllScreenPlateLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Screen_clearPlateLinks : public Callback_Screen_clearPlateLinks_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Screen_clearPlateLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Screen_clearPlateLinksPtr
newCallback_Screen_clearPlateLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_clearPlateLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_clearPlateLinksPtr
newCallback_Screen_clearPlateLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_clearPlateLinks<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Screen_clearPlateLinksPtr
newCallback_Screen_clearPlateLinks(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_clearPlateLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_clearPlateLinksPtr
newCallback_Screen_clearPlateLinks(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_clearPlateLinks<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Screen_clearPlateLinks : public Callback_Screen_clearPlateLinks_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Screen_clearPlateLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Screen_clearPlateLinksPtr
newCallback_Screen_clearPlateLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_clearPlateLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_clearPlateLinksPtr
newCallback_Screen_clearPlateLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_clearPlateLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_clearPlateLinksPtr
newCallback_Screen_clearPlateLinks(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_clearPlateLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_clearPlateLinksPtr
newCallback_Screen_clearPlateLinks(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_clearPlateLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Screen_reloadPlateLinks : public Callback_Screen_reloadPlateLinks_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Screen_reloadPlateLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Screen_reloadPlateLinksPtr
newCallback_Screen_reloadPlateLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_reloadPlateLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_reloadPlateLinksPtr
newCallback_Screen_reloadPlateLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_reloadPlateLinks<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Screen_reloadPlateLinksPtr
newCallback_Screen_reloadPlateLinks(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_reloadPlateLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_reloadPlateLinksPtr
newCallback_Screen_reloadPlateLinks(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_reloadPlateLinks<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Screen_reloadPlateLinks : public Callback_Screen_reloadPlateLinks_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Screen_reloadPlateLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Screen_reloadPlateLinksPtr
newCallback_Screen_reloadPlateLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_reloadPlateLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_reloadPlateLinksPtr
newCallback_Screen_reloadPlateLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_reloadPlateLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_reloadPlateLinksPtr
newCallback_Screen_reloadPlateLinks(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_reloadPlateLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_reloadPlateLinksPtr
newCallback_Screen_reloadPlateLinks(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_reloadPlateLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Screen_getPlateLinksCountPerOwner : public Callback_Screen_getPlateLinksCountPerOwner_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::sys::CountMap&);

    CallbackNC_Screen_getPlateLinksCountPerOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ScreenPrx __proxy = ::omero::model::ScreenPrx::uncheckedCast(__result->getProxy());
        ::omero::sys::CountMap __ret;
        try
        {
            __ret = __proxy->end_getPlateLinksCountPerOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Screen_getPlateLinksCountPerOwnerPtr
newCallback_Screen_getPlateLinksCountPerOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::CountMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_getPlateLinksCountPerOwner<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_getPlateLinksCountPerOwnerPtr
newCallback_Screen_getPlateLinksCountPerOwner(T* instance, void (T::*cb)(const ::omero::sys::CountMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_getPlateLinksCountPerOwner<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Screen_getPlateLinksCountPerOwner : public Callback_Screen_getPlateLinksCountPerOwner_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::sys::CountMap&, const CT&);

    Callback_Screen_getPlateLinksCountPerOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ScreenPrx __proxy = ::omero::model::ScreenPrx::uncheckedCast(__result->getProxy());
        ::omero::sys::CountMap __ret;
        try
        {
            __ret = __proxy->end_getPlateLinksCountPerOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Screen_getPlateLinksCountPerOwnerPtr
newCallback_Screen_getPlateLinksCountPerOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::CountMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_getPlateLinksCountPerOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_getPlateLinksCountPerOwnerPtr
newCallback_Screen_getPlateLinksCountPerOwner(T* instance, void (T::*cb)(const ::omero::sys::CountMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_getPlateLinksCountPerOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Screen_linkPlate : public Callback_Screen_linkPlate_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::ScreenPlateLinkPtr&);

    CallbackNC_Screen_linkPlate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ScreenPrx __proxy = ::omero::model::ScreenPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ScreenPlateLinkPtr __ret;
        try
        {
            __ret = __proxy->end_linkPlate(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Screen_linkPlatePtr
newCallback_Screen_linkPlate(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ScreenPlateLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_linkPlate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_linkPlatePtr
newCallback_Screen_linkPlate(T* instance, void (T::*cb)(const ::omero::model::ScreenPlateLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_linkPlate<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Screen_linkPlate : public Callback_Screen_linkPlate_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::ScreenPlateLinkPtr&, const CT&);

    Callback_Screen_linkPlate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ScreenPrx __proxy = ::omero::model::ScreenPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ScreenPlateLinkPtr __ret;
        try
        {
            __ret = __proxy->end_linkPlate(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Screen_linkPlatePtr
newCallback_Screen_linkPlate(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ScreenPlateLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_linkPlate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_linkPlatePtr
newCallback_Screen_linkPlate(T* instance, void (T::*cb)(const ::omero::model::ScreenPlateLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_linkPlate<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Screen_addScreenPlateLinkToBoth : public Callback_Screen_addScreenPlateLinkToBoth_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Screen_addScreenPlateLinkToBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Screen_addScreenPlateLinkToBothPtr
newCallback_Screen_addScreenPlateLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_addScreenPlateLinkToBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_addScreenPlateLinkToBothPtr
newCallback_Screen_addScreenPlateLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_addScreenPlateLinkToBoth<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Screen_addScreenPlateLinkToBothPtr
newCallback_Screen_addScreenPlateLinkToBoth(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_addScreenPlateLinkToBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_addScreenPlateLinkToBothPtr
newCallback_Screen_addScreenPlateLinkToBoth(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_addScreenPlateLinkToBoth<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Screen_addScreenPlateLinkToBoth : public Callback_Screen_addScreenPlateLinkToBoth_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Screen_addScreenPlateLinkToBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Screen_addScreenPlateLinkToBothPtr
newCallback_Screen_addScreenPlateLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_addScreenPlateLinkToBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_addScreenPlateLinkToBothPtr
newCallback_Screen_addScreenPlateLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_addScreenPlateLinkToBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_addScreenPlateLinkToBothPtr
newCallback_Screen_addScreenPlateLinkToBoth(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_addScreenPlateLinkToBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_addScreenPlateLinkToBothPtr
newCallback_Screen_addScreenPlateLinkToBoth(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_addScreenPlateLinkToBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Screen_findScreenPlateLink : public Callback_Screen_findScreenPlateLink_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::ScreenPlateLinksSeq&);

    CallbackNC_Screen_findScreenPlateLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ScreenPrx __proxy = ::omero::model::ScreenPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ScreenPlateLinksSeq __ret;
        try
        {
            __ret = __proxy->end_findScreenPlateLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Screen_findScreenPlateLinkPtr
newCallback_Screen_findScreenPlateLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ScreenPlateLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_findScreenPlateLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_findScreenPlateLinkPtr
newCallback_Screen_findScreenPlateLink(T* instance, void (T::*cb)(const ::omero::model::ScreenPlateLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_findScreenPlateLink<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Screen_findScreenPlateLink : public Callback_Screen_findScreenPlateLink_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::ScreenPlateLinksSeq&, const CT&);

    Callback_Screen_findScreenPlateLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ScreenPrx __proxy = ::omero::model::ScreenPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ScreenPlateLinksSeq __ret;
        try
        {
            __ret = __proxy->end_findScreenPlateLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Screen_findScreenPlateLinkPtr
newCallback_Screen_findScreenPlateLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ScreenPlateLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_findScreenPlateLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_findScreenPlateLinkPtr
newCallback_Screen_findScreenPlateLink(T* instance, void (T::*cb)(const ::omero::model::ScreenPlateLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_findScreenPlateLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Screen_unlinkPlate : public Callback_Screen_unlinkPlate_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Screen_unlinkPlate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Screen_unlinkPlatePtr
newCallback_Screen_unlinkPlate(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_unlinkPlate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_unlinkPlatePtr
newCallback_Screen_unlinkPlate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_unlinkPlate<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Screen_unlinkPlatePtr
newCallback_Screen_unlinkPlate(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_unlinkPlate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_unlinkPlatePtr
newCallback_Screen_unlinkPlate(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_unlinkPlate<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Screen_unlinkPlate : public Callback_Screen_unlinkPlate_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Screen_unlinkPlate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Screen_unlinkPlatePtr
newCallback_Screen_unlinkPlate(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_unlinkPlate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_unlinkPlatePtr
newCallback_Screen_unlinkPlate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_unlinkPlate<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_unlinkPlatePtr
newCallback_Screen_unlinkPlate(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_unlinkPlate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_unlinkPlatePtr
newCallback_Screen_unlinkPlate(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_unlinkPlate<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Screen_removeScreenPlateLinkFromBoth : public Callback_Screen_removeScreenPlateLinkFromBoth_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Screen_removeScreenPlateLinkFromBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Screen_removeScreenPlateLinkFromBothPtr
newCallback_Screen_removeScreenPlateLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_removeScreenPlateLinkFromBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_removeScreenPlateLinkFromBothPtr
newCallback_Screen_removeScreenPlateLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_removeScreenPlateLinkFromBoth<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Screen_removeScreenPlateLinkFromBothPtr
newCallback_Screen_removeScreenPlateLinkFromBoth(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_removeScreenPlateLinkFromBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_removeScreenPlateLinkFromBothPtr
newCallback_Screen_removeScreenPlateLinkFromBoth(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_removeScreenPlateLinkFromBoth<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Screen_removeScreenPlateLinkFromBoth : public Callback_Screen_removeScreenPlateLinkFromBoth_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Screen_removeScreenPlateLinkFromBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Screen_removeScreenPlateLinkFromBothPtr
newCallback_Screen_removeScreenPlateLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_removeScreenPlateLinkFromBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_removeScreenPlateLinkFromBothPtr
newCallback_Screen_removeScreenPlateLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_removeScreenPlateLinkFromBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_removeScreenPlateLinkFromBothPtr
newCallback_Screen_removeScreenPlateLinkFromBoth(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_removeScreenPlateLinkFromBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_removeScreenPlateLinkFromBothPtr
newCallback_Screen_removeScreenPlateLinkFromBoth(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_removeScreenPlateLinkFromBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Screen_linkedPlateList : public Callback_Screen_linkedPlateList_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::ScreenLinkedPlateSeq&);

    CallbackNC_Screen_linkedPlateList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ScreenPrx __proxy = ::omero::model::ScreenPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ScreenLinkedPlateSeq __ret;
        try
        {
            __ret = __proxy->end_linkedPlateList(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Screen_linkedPlateListPtr
newCallback_Screen_linkedPlateList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ScreenLinkedPlateSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_linkedPlateList<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_linkedPlateListPtr
newCallback_Screen_linkedPlateList(T* instance, void (T::*cb)(const ::omero::model::ScreenLinkedPlateSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_linkedPlateList<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Screen_linkedPlateList : public Callback_Screen_linkedPlateList_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::ScreenLinkedPlateSeq&, const CT&);

    Callback_Screen_linkedPlateList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ScreenPrx __proxy = ::omero::model::ScreenPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ScreenLinkedPlateSeq __ret;
        try
        {
            __ret = __proxy->end_linkedPlateList(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Screen_linkedPlateListPtr
newCallback_Screen_linkedPlateList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ScreenLinkedPlateSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_linkedPlateList<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_linkedPlateListPtr
newCallback_Screen_linkedPlateList(T* instance, void (T::*cb)(const ::omero::model::ScreenLinkedPlateSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_linkedPlateList<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Screen_unloadReagents : public Callback_Screen_unloadReagents_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Screen_unloadReagents(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Screen_unloadReagentsPtr
newCallback_Screen_unloadReagents(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_unloadReagents<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_unloadReagentsPtr
newCallback_Screen_unloadReagents(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_unloadReagents<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Screen_unloadReagentsPtr
newCallback_Screen_unloadReagents(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_unloadReagents<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_unloadReagentsPtr
newCallback_Screen_unloadReagents(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_unloadReagents<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Screen_unloadReagents : public Callback_Screen_unloadReagents_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Screen_unloadReagents(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Screen_unloadReagentsPtr
newCallback_Screen_unloadReagents(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_unloadReagents<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_unloadReagentsPtr
newCallback_Screen_unloadReagents(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_unloadReagents<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_unloadReagentsPtr
newCallback_Screen_unloadReagents(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_unloadReagents<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_unloadReagentsPtr
newCallback_Screen_unloadReagents(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_unloadReagents<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Screen_sizeOfReagents : public Callback_Screen_sizeOfReagents_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Screen_sizeOfReagents(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ScreenPrx __proxy = ::omero::model::ScreenPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfReagents(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Screen_sizeOfReagentsPtr
newCallback_Screen_sizeOfReagents(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_sizeOfReagents<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_sizeOfReagentsPtr
newCallback_Screen_sizeOfReagents(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_sizeOfReagents<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Screen_sizeOfReagents : public Callback_Screen_sizeOfReagents_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Screen_sizeOfReagents(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ScreenPrx __proxy = ::omero::model::ScreenPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfReagents(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Screen_sizeOfReagentsPtr
newCallback_Screen_sizeOfReagents(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_sizeOfReagents<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_sizeOfReagentsPtr
newCallback_Screen_sizeOfReagents(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_sizeOfReagents<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Screen_copyReagents : public Callback_Screen_copyReagents_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::ScreenReagentsSeq&);

    CallbackNC_Screen_copyReagents(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ScreenPrx __proxy = ::omero::model::ScreenPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ScreenReagentsSeq __ret;
        try
        {
            __ret = __proxy->end_copyReagents(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Screen_copyReagentsPtr
newCallback_Screen_copyReagents(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ScreenReagentsSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_copyReagents<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_copyReagentsPtr
newCallback_Screen_copyReagents(T* instance, void (T::*cb)(const ::omero::model::ScreenReagentsSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_copyReagents<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Screen_copyReagents : public Callback_Screen_copyReagents_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::ScreenReagentsSeq&, const CT&);

    Callback_Screen_copyReagents(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ScreenPrx __proxy = ::omero::model::ScreenPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ScreenReagentsSeq __ret;
        try
        {
            __ret = __proxy->end_copyReagents(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Screen_copyReagentsPtr
newCallback_Screen_copyReagents(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ScreenReagentsSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_copyReagents<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_copyReagentsPtr
newCallback_Screen_copyReagents(T* instance, void (T::*cb)(const ::omero::model::ScreenReagentsSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_copyReagents<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Screen_addReagent : public Callback_Screen_addReagent_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Screen_addReagent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Screen_addReagentPtr
newCallback_Screen_addReagent(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_addReagent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_addReagentPtr
newCallback_Screen_addReagent(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_addReagent<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Screen_addReagentPtr
newCallback_Screen_addReagent(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_addReagent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_addReagentPtr
newCallback_Screen_addReagent(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_addReagent<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Screen_addReagent : public Callback_Screen_addReagent_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Screen_addReagent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Screen_addReagentPtr
newCallback_Screen_addReagent(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_addReagent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_addReagentPtr
newCallback_Screen_addReagent(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_addReagent<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_addReagentPtr
newCallback_Screen_addReagent(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_addReagent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_addReagentPtr
newCallback_Screen_addReagent(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_addReagent<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Screen_addAllReagentSet : public Callback_Screen_addAllReagentSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Screen_addAllReagentSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Screen_addAllReagentSetPtr
newCallback_Screen_addAllReagentSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_addAllReagentSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_addAllReagentSetPtr
newCallback_Screen_addAllReagentSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_addAllReagentSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Screen_addAllReagentSetPtr
newCallback_Screen_addAllReagentSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_addAllReagentSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_addAllReagentSetPtr
newCallback_Screen_addAllReagentSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_addAllReagentSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Screen_addAllReagentSet : public Callback_Screen_addAllReagentSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Screen_addAllReagentSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Screen_addAllReagentSetPtr
newCallback_Screen_addAllReagentSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_addAllReagentSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_addAllReagentSetPtr
newCallback_Screen_addAllReagentSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_addAllReagentSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_addAllReagentSetPtr
newCallback_Screen_addAllReagentSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_addAllReagentSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_addAllReagentSetPtr
newCallback_Screen_addAllReagentSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_addAllReagentSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Screen_removeReagent : public Callback_Screen_removeReagent_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Screen_removeReagent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Screen_removeReagentPtr
newCallback_Screen_removeReagent(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_removeReagent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_removeReagentPtr
newCallback_Screen_removeReagent(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_removeReagent<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Screen_removeReagentPtr
newCallback_Screen_removeReagent(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_removeReagent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_removeReagentPtr
newCallback_Screen_removeReagent(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_removeReagent<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Screen_removeReagent : public Callback_Screen_removeReagent_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Screen_removeReagent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Screen_removeReagentPtr
newCallback_Screen_removeReagent(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_removeReagent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_removeReagentPtr
newCallback_Screen_removeReagent(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_removeReagent<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_removeReagentPtr
newCallback_Screen_removeReagent(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_removeReagent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_removeReagentPtr
newCallback_Screen_removeReagent(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_removeReagent<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Screen_removeAllReagentSet : public Callback_Screen_removeAllReagentSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Screen_removeAllReagentSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Screen_removeAllReagentSetPtr
newCallback_Screen_removeAllReagentSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_removeAllReagentSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_removeAllReagentSetPtr
newCallback_Screen_removeAllReagentSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_removeAllReagentSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Screen_removeAllReagentSetPtr
newCallback_Screen_removeAllReagentSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_removeAllReagentSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_removeAllReagentSetPtr
newCallback_Screen_removeAllReagentSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_removeAllReagentSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Screen_removeAllReagentSet : public Callback_Screen_removeAllReagentSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Screen_removeAllReagentSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Screen_removeAllReagentSetPtr
newCallback_Screen_removeAllReagentSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_removeAllReagentSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_removeAllReagentSetPtr
newCallback_Screen_removeAllReagentSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_removeAllReagentSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_removeAllReagentSetPtr
newCallback_Screen_removeAllReagentSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_removeAllReagentSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_removeAllReagentSetPtr
newCallback_Screen_removeAllReagentSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_removeAllReagentSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Screen_clearReagents : public Callback_Screen_clearReagents_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Screen_clearReagents(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Screen_clearReagentsPtr
newCallback_Screen_clearReagents(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_clearReagents<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_clearReagentsPtr
newCallback_Screen_clearReagents(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_clearReagents<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Screen_clearReagentsPtr
newCallback_Screen_clearReagents(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_clearReagents<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_clearReagentsPtr
newCallback_Screen_clearReagents(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_clearReagents<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Screen_clearReagents : public Callback_Screen_clearReagents_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Screen_clearReagents(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Screen_clearReagentsPtr
newCallback_Screen_clearReagents(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_clearReagents<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_clearReagentsPtr
newCallback_Screen_clearReagents(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_clearReagents<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_clearReagentsPtr
newCallback_Screen_clearReagents(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_clearReagents<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_clearReagentsPtr
newCallback_Screen_clearReagents(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_clearReagents<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Screen_reloadReagents : public Callback_Screen_reloadReagents_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Screen_reloadReagents(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Screen_reloadReagentsPtr
newCallback_Screen_reloadReagents(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_reloadReagents<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_reloadReagentsPtr
newCallback_Screen_reloadReagents(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_reloadReagents<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Screen_reloadReagentsPtr
newCallback_Screen_reloadReagents(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_reloadReagents<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_reloadReagentsPtr
newCallback_Screen_reloadReagents(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_reloadReagents<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Screen_reloadReagents : public Callback_Screen_reloadReagents_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Screen_reloadReagents(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Screen_reloadReagentsPtr
newCallback_Screen_reloadReagents(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_reloadReagents<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_reloadReagentsPtr
newCallback_Screen_reloadReagents(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_reloadReagents<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_reloadReagentsPtr
newCallback_Screen_reloadReagents(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_reloadReagents<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_reloadReagentsPtr
newCallback_Screen_reloadReagents(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_reloadReagents<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Screen_unloadAnnotationLinks : public Callback_Screen_unloadAnnotationLinks_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Screen_unloadAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Screen_unloadAnnotationLinksPtr
newCallback_Screen_unloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_unloadAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_unloadAnnotationLinksPtr
newCallback_Screen_unloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_unloadAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Screen_unloadAnnotationLinksPtr
newCallback_Screen_unloadAnnotationLinks(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_unloadAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_unloadAnnotationLinksPtr
newCallback_Screen_unloadAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_unloadAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Screen_unloadAnnotationLinks : public Callback_Screen_unloadAnnotationLinks_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Screen_unloadAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Screen_unloadAnnotationLinksPtr
newCallback_Screen_unloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_unloadAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_unloadAnnotationLinksPtr
newCallback_Screen_unloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_unloadAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_unloadAnnotationLinksPtr
newCallback_Screen_unloadAnnotationLinks(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_unloadAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_unloadAnnotationLinksPtr
newCallback_Screen_unloadAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_unloadAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Screen_sizeOfAnnotationLinks : public Callback_Screen_sizeOfAnnotationLinks_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Screen_sizeOfAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ScreenPrx __proxy = ::omero::model::ScreenPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfAnnotationLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Screen_sizeOfAnnotationLinksPtr
newCallback_Screen_sizeOfAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_sizeOfAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_sizeOfAnnotationLinksPtr
newCallback_Screen_sizeOfAnnotationLinks(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_sizeOfAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Screen_sizeOfAnnotationLinks : public Callback_Screen_sizeOfAnnotationLinks_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Screen_sizeOfAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ScreenPrx __proxy = ::omero::model::ScreenPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfAnnotationLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Screen_sizeOfAnnotationLinksPtr
newCallback_Screen_sizeOfAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_sizeOfAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_sizeOfAnnotationLinksPtr
newCallback_Screen_sizeOfAnnotationLinks(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_sizeOfAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Screen_copyAnnotationLinks : public Callback_Screen_copyAnnotationLinks_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::ScreenAnnotationLinksSeq&);

    CallbackNC_Screen_copyAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ScreenPrx __proxy = ::omero::model::ScreenPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ScreenAnnotationLinksSeq __ret;
        try
        {
            __ret = __proxy->end_copyAnnotationLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Screen_copyAnnotationLinksPtr
newCallback_Screen_copyAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ScreenAnnotationLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_copyAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_copyAnnotationLinksPtr
newCallback_Screen_copyAnnotationLinks(T* instance, void (T::*cb)(const ::omero::model::ScreenAnnotationLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_copyAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Screen_copyAnnotationLinks : public Callback_Screen_copyAnnotationLinks_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::ScreenAnnotationLinksSeq&, const CT&);

    Callback_Screen_copyAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ScreenPrx __proxy = ::omero::model::ScreenPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ScreenAnnotationLinksSeq __ret;
        try
        {
            __ret = __proxy->end_copyAnnotationLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Screen_copyAnnotationLinksPtr
newCallback_Screen_copyAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ScreenAnnotationLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_copyAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_copyAnnotationLinksPtr
newCallback_Screen_copyAnnotationLinks(T* instance, void (T::*cb)(const ::omero::model::ScreenAnnotationLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_copyAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Screen_addScreenAnnotationLink : public Callback_Screen_addScreenAnnotationLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Screen_addScreenAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Screen_addScreenAnnotationLinkPtr
newCallback_Screen_addScreenAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_addScreenAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_addScreenAnnotationLinkPtr
newCallback_Screen_addScreenAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_addScreenAnnotationLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Screen_addScreenAnnotationLinkPtr
newCallback_Screen_addScreenAnnotationLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_addScreenAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_addScreenAnnotationLinkPtr
newCallback_Screen_addScreenAnnotationLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_addScreenAnnotationLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Screen_addScreenAnnotationLink : public Callback_Screen_addScreenAnnotationLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Screen_addScreenAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Screen_addScreenAnnotationLinkPtr
newCallback_Screen_addScreenAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_addScreenAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_addScreenAnnotationLinkPtr
newCallback_Screen_addScreenAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_addScreenAnnotationLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_addScreenAnnotationLinkPtr
newCallback_Screen_addScreenAnnotationLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_addScreenAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_addScreenAnnotationLinkPtr
newCallback_Screen_addScreenAnnotationLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_addScreenAnnotationLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Screen_addAllScreenAnnotationLinkSet : public Callback_Screen_addAllScreenAnnotationLinkSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Screen_addAllScreenAnnotationLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Screen_addAllScreenAnnotationLinkSetPtr
newCallback_Screen_addAllScreenAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_addAllScreenAnnotationLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_addAllScreenAnnotationLinkSetPtr
newCallback_Screen_addAllScreenAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_addAllScreenAnnotationLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Screen_addAllScreenAnnotationLinkSetPtr
newCallback_Screen_addAllScreenAnnotationLinkSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_addAllScreenAnnotationLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_addAllScreenAnnotationLinkSetPtr
newCallback_Screen_addAllScreenAnnotationLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_addAllScreenAnnotationLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Screen_addAllScreenAnnotationLinkSet : public Callback_Screen_addAllScreenAnnotationLinkSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Screen_addAllScreenAnnotationLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Screen_addAllScreenAnnotationLinkSetPtr
newCallback_Screen_addAllScreenAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_addAllScreenAnnotationLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_addAllScreenAnnotationLinkSetPtr
newCallback_Screen_addAllScreenAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_addAllScreenAnnotationLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_addAllScreenAnnotationLinkSetPtr
newCallback_Screen_addAllScreenAnnotationLinkSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_addAllScreenAnnotationLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_addAllScreenAnnotationLinkSetPtr
newCallback_Screen_addAllScreenAnnotationLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_addAllScreenAnnotationLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Screen_removeScreenAnnotationLink : public Callback_Screen_removeScreenAnnotationLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Screen_removeScreenAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Screen_removeScreenAnnotationLinkPtr
newCallback_Screen_removeScreenAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_removeScreenAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_removeScreenAnnotationLinkPtr
newCallback_Screen_removeScreenAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_removeScreenAnnotationLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Screen_removeScreenAnnotationLinkPtr
newCallback_Screen_removeScreenAnnotationLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_removeScreenAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_removeScreenAnnotationLinkPtr
newCallback_Screen_removeScreenAnnotationLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_removeScreenAnnotationLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Screen_removeScreenAnnotationLink : public Callback_Screen_removeScreenAnnotationLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Screen_removeScreenAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Screen_removeScreenAnnotationLinkPtr
newCallback_Screen_removeScreenAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_removeScreenAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_removeScreenAnnotationLinkPtr
newCallback_Screen_removeScreenAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_removeScreenAnnotationLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_removeScreenAnnotationLinkPtr
newCallback_Screen_removeScreenAnnotationLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_removeScreenAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_removeScreenAnnotationLinkPtr
newCallback_Screen_removeScreenAnnotationLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_removeScreenAnnotationLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Screen_removeAllScreenAnnotationLinkSet : public Callback_Screen_removeAllScreenAnnotationLinkSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Screen_removeAllScreenAnnotationLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Screen_removeAllScreenAnnotationLinkSetPtr
newCallback_Screen_removeAllScreenAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_removeAllScreenAnnotationLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_removeAllScreenAnnotationLinkSetPtr
newCallback_Screen_removeAllScreenAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_removeAllScreenAnnotationLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Screen_removeAllScreenAnnotationLinkSetPtr
newCallback_Screen_removeAllScreenAnnotationLinkSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_removeAllScreenAnnotationLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_removeAllScreenAnnotationLinkSetPtr
newCallback_Screen_removeAllScreenAnnotationLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_removeAllScreenAnnotationLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Screen_removeAllScreenAnnotationLinkSet : public Callback_Screen_removeAllScreenAnnotationLinkSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Screen_removeAllScreenAnnotationLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Screen_removeAllScreenAnnotationLinkSetPtr
newCallback_Screen_removeAllScreenAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_removeAllScreenAnnotationLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_removeAllScreenAnnotationLinkSetPtr
newCallback_Screen_removeAllScreenAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_removeAllScreenAnnotationLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_removeAllScreenAnnotationLinkSetPtr
newCallback_Screen_removeAllScreenAnnotationLinkSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_removeAllScreenAnnotationLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_removeAllScreenAnnotationLinkSetPtr
newCallback_Screen_removeAllScreenAnnotationLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_removeAllScreenAnnotationLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Screen_clearAnnotationLinks : public Callback_Screen_clearAnnotationLinks_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Screen_clearAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Screen_clearAnnotationLinksPtr
newCallback_Screen_clearAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_clearAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_clearAnnotationLinksPtr
newCallback_Screen_clearAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_clearAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Screen_clearAnnotationLinksPtr
newCallback_Screen_clearAnnotationLinks(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_clearAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_clearAnnotationLinksPtr
newCallback_Screen_clearAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_clearAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Screen_clearAnnotationLinks : public Callback_Screen_clearAnnotationLinks_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Screen_clearAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Screen_clearAnnotationLinksPtr
newCallback_Screen_clearAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_clearAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_clearAnnotationLinksPtr
newCallback_Screen_clearAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_clearAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_clearAnnotationLinksPtr
newCallback_Screen_clearAnnotationLinks(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_clearAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_clearAnnotationLinksPtr
newCallback_Screen_clearAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_clearAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Screen_reloadAnnotationLinks : public Callback_Screen_reloadAnnotationLinks_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Screen_reloadAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Screen_reloadAnnotationLinksPtr
newCallback_Screen_reloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_reloadAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_reloadAnnotationLinksPtr
newCallback_Screen_reloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_reloadAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Screen_reloadAnnotationLinksPtr
newCallback_Screen_reloadAnnotationLinks(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_reloadAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_reloadAnnotationLinksPtr
newCallback_Screen_reloadAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_reloadAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Screen_reloadAnnotationLinks : public Callback_Screen_reloadAnnotationLinks_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Screen_reloadAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Screen_reloadAnnotationLinksPtr
newCallback_Screen_reloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_reloadAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_reloadAnnotationLinksPtr
newCallback_Screen_reloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_reloadAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_reloadAnnotationLinksPtr
newCallback_Screen_reloadAnnotationLinks(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_reloadAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_reloadAnnotationLinksPtr
newCallback_Screen_reloadAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_reloadAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Screen_getAnnotationLinksCountPerOwner : public Callback_Screen_getAnnotationLinksCountPerOwner_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::sys::CountMap&);

    CallbackNC_Screen_getAnnotationLinksCountPerOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ScreenPrx __proxy = ::omero::model::ScreenPrx::uncheckedCast(__result->getProxy());
        ::omero::sys::CountMap __ret;
        try
        {
            __ret = __proxy->end_getAnnotationLinksCountPerOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Screen_getAnnotationLinksCountPerOwnerPtr
newCallback_Screen_getAnnotationLinksCountPerOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::CountMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_getAnnotationLinksCountPerOwner<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_getAnnotationLinksCountPerOwnerPtr
newCallback_Screen_getAnnotationLinksCountPerOwner(T* instance, void (T::*cb)(const ::omero::sys::CountMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_getAnnotationLinksCountPerOwner<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Screen_getAnnotationLinksCountPerOwner : public Callback_Screen_getAnnotationLinksCountPerOwner_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::sys::CountMap&, const CT&);

    Callback_Screen_getAnnotationLinksCountPerOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ScreenPrx __proxy = ::omero::model::ScreenPrx::uncheckedCast(__result->getProxy());
        ::omero::sys::CountMap __ret;
        try
        {
            __ret = __proxy->end_getAnnotationLinksCountPerOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Screen_getAnnotationLinksCountPerOwnerPtr
newCallback_Screen_getAnnotationLinksCountPerOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::CountMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_getAnnotationLinksCountPerOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_getAnnotationLinksCountPerOwnerPtr
newCallback_Screen_getAnnotationLinksCountPerOwner(T* instance, void (T::*cb)(const ::omero::sys::CountMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_getAnnotationLinksCountPerOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Screen_linkAnnotation : public Callback_Screen_linkAnnotation_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::ScreenAnnotationLinkPtr&);

    CallbackNC_Screen_linkAnnotation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ScreenPrx __proxy = ::omero::model::ScreenPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ScreenAnnotationLinkPtr __ret;
        try
        {
            __ret = __proxy->end_linkAnnotation(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Screen_linkAnnotationPtr
newCallback_Screen_linkAnnotation(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ScreenAnnotationLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_linkAnnotation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_linkAnnotationPtr
newCallback_Screen_linkAnnotation(T* instance, void (T::*cb)(const ::omero::model::ScreenAnnotationLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_linkAnnotation<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Screen_linkAnnotation : public Callback_Screen_linkAnnotation_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::ScreenAnnotationLinkPtr&, const CT&);

    Callback_Screen_linkAnnotation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ScreenPrx __proxy = ::omero::model::ScreenPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ScreenAnnotationLinkPtr __ret;
        try
        {
            __ret = __proxy->end_linkAnnotation(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Screen_linkAnnotationPtr
newCallback_Screen_linkAnnotation(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ScreenAnnotationLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_linkAnnotation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_linkAnnotationPtr
newCallback_Screen_linkAnnotation(T* instance, void (T::*cb)(const ::omero::model::ScreenAnnotationLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_linkAnnotation<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Screen_addScreenAnnotationLinkToBoth : public Callback_Screen_addScreenAnnotationLinkToBoth_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Screen_addScreenAnnotationLinkToBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Screen_addScreenAnnotationLinkToBothPtr
newCallback_Screen_addScreenAnnotationLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_addScreenAnnotationLinkToBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_addScreenAnnotationLinkToBothPtr
newCallback_Screen_addScreenAnnotationLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_addScreenAnnotationLinkToBoth<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Screen_addScreenAnnotationLinkToBothPtr
newCallback_Screen_addScreenAnnotationLinkToBoth(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_addScreenAnnotationLinkToBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_addScreenAnnotationLinkToBothPtr
newCallback_Screen_addScreenAnnotationLinkToBoth(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_addScreenAnnotationLinkToBoth<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Screen_addScreenAnnotationLinkToBoth : public Callback_Screen_addScreenAnnotationLinkToBoth_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Screen_addScreenAnnotationLinkToBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Screen_addScreenAnnotationLinkToBothPtr
newCallback_Screen_addScreenAnnotationLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_addScreenAnnotationLinkToBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_addScreenAnnotationLinkToBothPtr
newCallback_Screen_addScreenAnnotationLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_addScreenAnnotationLinkToBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_addScreenAnnotationLinkToBothPtr
newCallback_Screen_addScreenAnnotationLinkToBoth(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_addScreenAnnotationLinkToBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_addScreenAnnotationLinkToBothPtr
newCallback_Screen_addScreenAnnotationLinkToBoth(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_addScreenAnnotationLinkToBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Screen_findScreenAnnotationLink : public Callback_Screen_findScreenAnnotationLink_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::ScreenAnnotationLinksSeq&);

    CallbackNC_Screen_findScreenAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ScreenPrx __proxy = ::omero::model::ScreenPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ScreenAnnotationLinksSeq __ret;
        try
        {
            __ret = __proxy->end_findScreenAnnotationLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Screen_findScreenAnnotationLinkPtr
newCallback_Screen_findScreenAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ScreenAnnotationLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_findScreenAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_findScreenAnnotationLinkPtr
newCallback_Screen_findScreenAnnotationLink(T* instance, void (T::*cb)(const ::omero::model::ScreenAnnotationLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_findScreenAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Screen_findScreenAnnotationLink : public Callback_Screen_findScreenAnnotationLink_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::ScreenAnnotationLinksSeq&, const CT&);

    Callback_Screen_findScreenAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ScreenPrx __proxy = ::omero::model::ScreenPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ScreenAnnotationLinksSeq __ret;
        try
        {
            __ret = __proxy->end_findScreenAnnotationLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Screen_findScreenAnnotationLinkPtr
newCallback_Screen_findScreenAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ScreenAnnotationLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_findScreenAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_findScreenAnnotationLinkPtr
newCallback_Screen_findScreenAnnotationLink(T* instance, void (T::*cb)(const ::omero::model::ScreenAnnotationLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_findScreenAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Screen_unlinkAnnotation : public Callback_Screen_unlinkAnnotation_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Screen_unlinkAnnotation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Screen_unlinkAnnotationPtr
newCallback_Screen_unlinkAnnotation(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_unlinkAnnotation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_unlinkAnnotationPtr
newCallback_Screen_unlinkAnnotation(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_unlinkAnnotation<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Screen_unlinkAnnotationPtr
newCallback_Screen_unlinkAnnotation(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_unlinkAnnotation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_unlinkAnnotationPtr
newCallback_Screen_unlinkAnnotation(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_unlinkAnnotation<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Screen_unlinkAnnotation : public Callback_Screen_unlinkAnnotation_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Screen_unlinkAnnotation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Screen_unlinkAnnotationPtr
newCallback_Screen_unlinkAnnotation(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_unlinkAnnotation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_unlinkAnnotationPtr
newCallback_Screen_unlinkAnnotation(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_unlinkAnnotation<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_unlinkAnnotationPtr
newCallback_Screen_unlinkAnnotation(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_unlinkAnnotation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_unlinkAnnotationPtr
newCallback_Screen_unlinkAnnotation(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_unlinkAnnotation<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Screen_removeScreenAnnotationLinkFromBoth : public Callback_Screen_removeScreenAnnotationLinkFromBoth_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Screen_removeScreenAnnotationLinkFromBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Screen_removeScreenAnnotationLinkFromBothPtr
newCallback_Screen_removeScreenAnnotationLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_removeScreenAnnotationLinkFromBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_removeScreenAnnotationLinkFromBothPtr
newCallback_Screen_removeScreenAnnotationLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_removeScreenAnnotationLinkFromBoth<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Screen_removeScreenAnnotationLinkFromBothPtr
newCallback_Screen_removeScreenAnnotationLinkFromBoth(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_removeScreenAnnotationLinkFromBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_removeScreenAnnotationLinkFromBothPtr
newCallback_Screen_removeScreenAnnotationLinkFromBoth(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_removeScreenAnnotationLinkFromBoth<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Screen_removeScreenAnnotationLinkFromBoth : public Callback_Screen_removeScreenAnnotationLinkFromBoth_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Screen_removeScreenAnnotationLinkFromBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Screen_removeScreenAnnotationLinkFromBothPtr
newCallback_Screen_removeScreenAnnotationLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_removeScreenAnnotationLinkFromBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_removeScreenAnnotationLinkFromBothPtr
newCallback_Screen_removeScreenAnnotationLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_removeScreenAnnotationLinkFromBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_removeScreenAnnotationLinkFromBothPtr
newCallback_Screen_removeScreenAnnotationLinkFromBoth(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_removeScreenAnnotationLinkFromBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_removeScreenAnnotationLinkFromBothPtr
newCallback_Screen_removeScreenAnnotationLinkFromBoth(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_removeScreenAnnotationLinkFromBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Screen_linkedAnnotationList : public Callback_Screen_linkedAnnotationList_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::ScreenLinkedAnnotationSeq&);

    CallbackNC_Screen_linkedAnnotationList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ScreenPrx __proxy = ::omero::model::ScreenPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ScreenLinkedAnnotationSeq __ret;
        try
        {
            __ret = __proxy->end_linkedAnnotationList(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Screen_linkedAnnotationListPtr
newCallback_Screen_linkedAnnotationList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ScreenLinkedAnnotationSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_linkedAnnotationList<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_linkedAnnotationListPtr
newCallback_Screen_linkedAnnotationList(T* instance, void (T::*cb)(const ::omero::model::ScreenLinkedAnnotationSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_linkedAnnotationList<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Screen_linkedAnnotationList : public Callback_Screen_linkedAnnotationList_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::ScreenLinkedAnnotationSeq&, const CT&);

    Callback_Screen_linkedAnnotationList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ScreenPrx __proxy = ::omero::model::ScreenPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ScreenLinkedAnnotationSeq __ret;
        try
        {
            __ret = __proxy->end_linkedAnnotationList(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Screen_linkedAnnotationListPtr
newCallback_Screen_linkedAnnotationList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ScreenLinkedAnnotationSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_linkedAnnotationList<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_linkedAnnotationListPtr
newCallback_Screen_linkedAnnotationList(T* instance, void (T::*cb)(const ::omero::model::ScreenLinkedAnnotationSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_linkedAnnotationList<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Screen_getName : public Callback_Screen_getName_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_Screen_getName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ScreenPrx __proxy = ::omero::model::ScreenPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getName(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Screen_getNamePtr
newCallback_Screen_getName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_getName<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_getNamePtr
newCallback_Screen_getName(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_getName<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Screen_getName : public Callback_Screen_getName_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_Screen_getName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ScreenPrx __proxy = ::omero::model::ScreenPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getName(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Screen_getNamePtr
newCallback_Screen_getName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_getName<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_getNamePtr
newCallback_Screen_getName(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_getName<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Screen_setName : public Callback_Screen_setName_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Screen_setName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Screen_setNamePtr
newCallback_Screen_setName(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_setName<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_setNamePtr
newCallback_Screen_setName(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_setName<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Screen_setNamePtr
newCallback_Screen_setName(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_setName<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_setNamePtr
newCallback_Screen_setName(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_setName<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Screen_setName : public Callback_Screen_setName_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Screen_setName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Screen_setNamePtr
newCallback_Screen_setName(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_setName<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_setNamePtr
newCallback_Screen_setName(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_setName<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_setNamePtr
newCallback_Screen_setName(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_setName<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_setNamePtr
newCallback_Screen_setName(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_setName<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Screen_getDescription : public Callback_Screen_getDescription_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_Screen_getDescription(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ScreenPrx __proxy = ::omero::model::ScreenPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getDescription(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Screen_getDescriptionPtr
newCallback_Screen_getDescription(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_getDescription<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_getDescriptionPtr
newCallback_Screen_getDescription(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_getDescription<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Screen_getDescription : public Callback_Screen_getDescription_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_Screen_getDescription(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::ScreenPrx __proxy = ::omero::model::ScreenPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getDescription(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Screen_getDescriptionPtr
newCallback_Screen_getDescription(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_getDescription<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_getDescriptionPtr
newCallback_Screen_getDescription(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_getDescription<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Screen_setDescription : public Callback_Screen_setDescription_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Screen_setDescription(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Screen_setDescriptionPtr
newCallback_Screen_setDescription(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_setDescription<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_setDescriptionPtr
newCallback_Screen_setDescription(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_setDescription<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Screen_setDescriptionPtr
newCallback_Screen_setDescription(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_setDescription<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Screen_setDescriptionPtr
newCallback_Screen_setDescription(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Screen_setDescription<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Screen_setDescription : public Callback_Screen_setDescription_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Screen_setDescription(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Screen_setDescriptionPtr
newCallback_Screen_setDescription(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_setDescription<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_setDescriptionPtr
newCallback_Screen_setDescription(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_setDescription<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_setDescriptionPtr
newCallback_Screen_setDescription(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_setDescription<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Screen_setDescriptionPtr
newCallback_Screen_setDescription(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Screen_setDescription<T, CT>(instance, 0, excb, sentcb);
}

}

}

#endif
