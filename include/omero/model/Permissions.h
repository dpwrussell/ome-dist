// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Permissions.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_Permissions_h__
#define __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_Permissions_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <omero/model/IObject.h>
#include <omero/Collections.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace omero
{

namespace model
{

class Permissions;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Permissions>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Permissions*);

}

}

}

namespace omero
{

namespace model
{

class Permissions;
bool operator==(const Permissions&, const Permissions&);
bool operator<(const Permissions&, const Permissions&);
::Ice::Object* upCast(::omero::model::Permissions*);
typedef ::IceInternal::Handle< ::omero::model::Permissions> PermissionsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Permissions> PermissionsPrx;
void __patch(PermissionsPtr&, const ::Ice::ObjectPtr&);

}

}

namespace omero
{

namespace model
{

class Callback_Permissions_getPerm1_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Permissions_getPerm1_Base> Callback_Permissions_getPerm1Ptr;

class Callback_Permissions_setPerm1_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Permissions_setPerm1_Base> Callback_Permissions_setPerm1Ptr;

class Callback_Permissions_isDisallow_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Permissions_isDisallow_Base> Callback_Permissions_isDisallowPtr;

class Callback_Permissions_canAnnotate_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Permissions_canAnnotate_Base> Callback_Permissions_canAnnotatePtr;

class Callback_Permissions_canEdit_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Permissions_canEdit_Base> Callback_Permissions_canEditPtr;

class Callback_Permissions_canLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Permissions_canLink_Base> Callback_Permissions_canLinkPtr;

class Callback_Permissions_canDelete_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Permissions_canDelete_Base> Callback_Permissions_canDeletePtr;

class Callback_Permissions_isUserRead_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Permissions_isUserRead_Base> Callback_Permissions_isUserReadPtr;

class Callback_Permissions_isUserAnnotate_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Permissions_isUserAnnotate_Base> Callback_Permissions_isUserAnnotatePtr;

class Callback_Permissions_isUserWrite_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Permissions_isUserWrite_Base> Callback_Permissions_isUserWritePtr;

class Callback_Permissions_isGroupRead_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Permissions_isGroupRead_Base> Callback_Permissions_isGroupReadPtr;

class Callback_Permissions_isGroupAnnotate_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Permissions_isGroupAnnotate_Base> Callback_Permissions_isGroupAnnotatePtr;

class Callback_Permissions_isGroupWrite_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Permissions_isGroupWrite_Base> Callback_Permissions_isGroupWritePtr;

class Callback_Permissions_isWorldRead_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Permissions_isWorldRead_Base> Callback_Permissions_isWorldReadPtr;

class Callback_Permissions_isWorldAnnotate_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Permissions_isWorldAnnotate_Base> Callback_Permissions_isWorldAnnotatePtr;

class Callback_Permissions_isWorldWrite_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Permissions_isWorldWrite_Base> Callback_Permissions_isWorldWritePtr;

class Callback_Permissions_setUserRead_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Permissions_setUserRead_Base> Callback_Permissions_setUserReadPtr;

class Callback_Permissions_setUserAnnotate_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Permissions_setUserAnnotate_Base> Callback_Permissions_setUserAnnotatePtr;

class Callback_Permissions_setUserWrite_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Permissions_setUserWrite_Base> Callback_Permissions_setUserWritePtr;

class Callback_Permissions_setGroupRead_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Permissions_setGroupRead_Base> Callback_Permissions_setGroupReadPtr;

class Callback_Permissions_setGroupAnnotate_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Permissions_setGroupAnnotate_Base> Callback_Permissions_setGroupAnnotatePtr;

class Callback_Permissions_setGroupWrite_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Permissions_setGroupWrite_Base> Callback_Permissions_setGroupWritePtr;

class Callback_Permissions_setWorldRead_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Permissions_setWorldRead_Base> Callback_Permissions_setWorldReadPtr;

class Callback_Permissions_setWorldAnnotate_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Permissions_setWorldAnnotate_Base> Callback_Permissions_setWorldAnnotatePtr;

class Callback_Permissions_setWorldWrite_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Permissions_setWorldWrite_Base> Callback_Permissions_setWorldWritePtr;

}

}

namespace IceProxy
{

namespace omero
{

namespace model
{

class Permissions : virtual public ::IceProxy::Ice::Object
{
public:

    ::Ice::Long getPerm1()
    {
        return getPerm1(0);
    }
    ::Ice::Long getPerm1(const ::Ice::Context& __ctx)
    {
        return getPerm1(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getPerm1(const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPerm1(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPerm1(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPerm1(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getPerm1(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPerm1(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPerm1(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPerm1(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getPerm1(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Long)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PermissionsPrx __proxy = ::omero::model::PermissionsPrx::uncheckedCast(__result->getProxy());
                ::Ice::Long __ret;
                try
                {
                    __ret = __proxy->end_getPerm1(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Long)> _response;
        };
        return begin_getPerm1(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getPerm1()
    {
        return begin_getPerm1(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPerm1(const ::Ice::Context& __ctx)
    {
        return begin_getPerm1(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPerm1(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPerm1(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPerm1(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPerm1(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPerm1(const ::omero::model::Callback_Permissions_getPerm1Ptr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPerm1(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPerm1(const ::Ice::Context& __ctx, const ::omero::model::Callback_Permissions_getPerm1Ptr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPerm1(&__ctx, __del, __cookie);
    }

    ::Ice::Long end_getPerm1(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Long getPerm1(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getPerm1(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setPerm1(::Ice::Long value)
    {
        setPerm1(value, 0);
    }
    void setPerm1(::Ice::Long value, const ::Ice::Context& __ctx)
    {
        setPerm1(value, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setPerm1(::Ice::Long value, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setPerm1(value, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setPerm1(::Ice::Long value, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPerm1(value, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setPerm1(::Ice::Long value, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setPerm1(value, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setPerm1(::Ice::Long value, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPerm1(value, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setPerm1(::Ice::Long value)
    {
        return begin_setPerm1(value, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPerm1(::Ice::Long value, const ::Ice::Context& __ctx)
    {
        return begin_setPerm1(value, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPerm1(::Ice::Long value, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPerm1(value, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPerm1(::Ice::Long value, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPerm1(value, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPerm1(::Ice::Long value, const ::omero::model::Callback_Permissions_setPerm1Ptr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPerm1(value, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPerm1(::Ice::Long value, const ::Ice::Context& __ctx, const ::omero::model::Callback_Permissions_setPerm1Ptr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPerm1(value, &__ctx, __del, __cookie);
    }

    void end_setPerm1(const ::Ice::AsyncResultPtr&);
    
private:

    void setPerm1(::Ice::Long, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setPerm1(::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool isDisallow(::Ice::Int restriction)
    {
        return isDisallow(restriction, 0);
    }
    bool isDisallow(::Ice::Int restriction, const ::Ice::Context& __ctx)
    {
        return isDisallow(restriction, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_isDisallow(::Ice::Int restriction, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_isDisallow(restriction, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_isDisallow(::Ice::Int restriction, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_isDisallow(restriction, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_isDisallow(::Ice::Int restriction, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_isDisallow(restriction, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_isDisallow(::Ice::Int restriction, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_isDisallow(restriction, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_isDisallow(::Ice::Int restriction, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PermissionsPrx __proxy = ::omero::model::PermissionsPrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_isDisallow(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_isDisallow(restriction, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_isDisallow(::Ice::Int restriction)
    {
        return begin_isDisallow(restriction, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_isDisallow(::Ice::Int restriction, const ::Ice::Context& __ctx)
    {
        return begin_isDisallow(restriction, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_isDisallow(::Ice::Int restriction, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isDisallow(restriction, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isDisallow(::Ice::Int restriction, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isDisallow(restriction, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isDisallow(::Ice::Int restriction, const ::omero::model::Callback_Permissions_isDisallowPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isDisallow(restriction, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isDisallow(::Ice::Int restriction, const ::Ice::Context& __ctx, const ::omero::model::Callback_Permissions_isDisallowPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isDisallow(restriction, &__ctx, __del, __cookie);
    }

    bool end_isDisallow(const ::Ice::AsyncResultPtr&);
    
private:

    bool isDisallow(::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_isDisallow(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool canAnnotate()
    {
        return canAnnotate(0);
    }
    bool canAnnotate(const ::Ice::Context& __ctx)
    {
        return canAnnotate(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_canAnnotate(const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_canAnnotate(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_canAnnotate(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_canAnnotate(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_canAnnotate(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_canAnnotate(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_canAnnotate(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_canAnnotate(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_canAnnotate(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PermissionsPrx __proxy = ::omero::model::PermissionsPrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_canAnnotate(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_canAnnotate(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_canAnnotate()
    {
        return begin_canAnnotate(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_canAnnotate(const ::Ice::Context& __ctx)
    {
        return begin_canAnnotate(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_canAnnotate(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_canAnnotate(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_canAnnotate(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_canAnnotate(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_canAnnotate(const ::omero::model::Callback_Permissions_canAnnotatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_canAnnotate(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_canAnnotate(const ::Ice::Context& __ctx, const ::omero::model::Callback_Permissions_canAnnotatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_canAnnotate(&__ctx, __del, __cookie);
    }

    bool end_canAnnotate(const ::Ice::AsyncResultPtr&);
    
private:

    bool canAnnotate(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_canAnnotate(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool canEdit()
    {
        return canEdit(0);
    }
    bool canEdit(const ::Ice::Context& __ctx)
    {
        return canEdit(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_canEdit(const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_canEdit(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_canEdit(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_canEdit(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_canEdit(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_canEdit(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_canEdit(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_canEdit(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_canEdit(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PermissionsPrx __proxy = ::omero::model::PermissionsPrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_canEdit(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_canEdit(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_canEdit()
    {
        return begin_canEdit(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_canEdit(const ::Ice::Context& __ctx)
    {
        return begin_canEdit(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_canEdit(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_canEdit(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_canEdit(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_canEdit(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_canEdit(const ::omero::model::Callback_Permissions_canEditPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_canEdit(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_canEdit(const ::Ice::Context& __ctx, const ::omero::model::Callback_Permissions_canEditPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_canEdit(&__ctx, __del, __cookie);
    }

    bool end_canEdit(const ::Ice::AsyncResultPtr&);
    
private:

    bool canEdit(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_canEdit(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool canLink()
    {
        return canLink(0);
    }
    bool canLink(const ::Ice::Context& __ctx)
    {
        return canLink(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_canLink(const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_canLink(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_canLink(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_canLink(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_canLink(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_canLink(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_canLink(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_canLink(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_canLink(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PermissionsPrx __proxy = ::omero::model::PermissionsPrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_canLink(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_canLink(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_canLink()
    {
        return begin_canLink(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_canLink(const ::Ice::Context& __ctx)
    {
        return begin_canLink(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_canLink(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_canLink(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_canLink(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_canLink(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_canLink(const ::omero::model::Callback_Permissions_canLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_canLink(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_canLink(const ::Ice::Context& __ctx, const ::omero::model::Callback_Permissions_canLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_canLink(&__ctx, __del, __cookie);
    }

    bool end_canLink(const ::Ice::AsyncResultPtr&);
    
private:

    bool canLink(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_canLink(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool canDelete()
    {
        return canDelete(0);
    }
    bool canDelete(const ::Ice::Context& __ctx)
    {
        return canDelete(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_canDelete(const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_canDelete(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_canDelete(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_canDelete(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_canDelete(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_canDelete(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_canDelete(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_canDelete(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_canDelete(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PermissionsPrx __proxy = ::omero::model::PermissionsPrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_canDelete(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_canDelete(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_canDelete()
    {
        return begin_canDelete(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_canDelete(const ::Ice::Context& __ctx)
    {
        return begin_canDelete(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_canDelete(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_canDelete(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_canDelete(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_canDelete(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_canDelete(const ::omero::model::Callback_Permissions_canDeletePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_canDelete(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_canDelete(const ::Ice::Context& __ctx, const ::omero::model::Callback_Permissions_canDeletePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_canDelete(&__ctx, __del, __cookie);
    }

    bool end_canDelete(const ::Ice::AsyncResultPtr&);
    
private:

    bool canDelete(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_canDelete(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool isUserRead()
    {
        return isUserRead(0);
    }
    bool isUserRead(const ::Ice::Context& __ctx)
    {
        return isUserRead(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_isUserRead(const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_isUserRead(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_isUserRead(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_isUserRead(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_isUserRead(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_isUserRead(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_isUserRead(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_isUserRead(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_isUserRead(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PermissionsPrx __proxy = ::omero::model::PermissionsPrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_isUserRead(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_isUserRead(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_isUserRead()
    {
        return begin_isUserRead(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_isUserRead(const ::Ice::Context& __ctx)
    {
        return begin_isUserRead(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_isUserRead(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isUserRead(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isUserRead(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isUserRead(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isUserRead(const ::omero::model::Callback_Permissions_isUserReadPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isUserRead(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isUserRead(const ::Ice::Context& __ctx, const ::omero::model::Callback_Permissions_isUserReadPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isUserRead(&__ctx, __del, __cookie);
    }

    bool end_isUserRead(const ::Ice::AsyncResultPtr&);
    
private:

    bool isUserRead(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_isUserRead(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool isUserAnnotate()
    {
        return isUserAnnotate(0);
    }
    bool isUserAnnotate(const ::Ice::Context& __ctx)
    {
        return isUserAnnotate(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_isUserAnnotate(const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_isUserAnnotate(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_isUserAnnotate(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_isUserAnnotate(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_isUserAnnotate(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_isUserAnnotate(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_isUserAnnotate(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_isUserAnnotate(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_isUserAnnotate(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PermissionsPrx __proxy = ::omero::model::PermissionsPrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_isUserAnnotate(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_isUserAnnotate(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_isUserAnnotate()
    {
        return begin_isUserAnnotate(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_isUserAnnotate(const ::Ice::Context& __ctx)
    {
        return begin_isUserAnnotate(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_isUserAnnotate(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isUserAnnotate(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isUserAnnotate(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isUserAnnotate(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isUserAnnotate(const ::omero::model::Callback_Permissions_isUserAnnotatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isUserAnnotate(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isUserAnnotate(const ::Ice::Context& __ctx, const ::omero::model::Callback_Permissions_isUserAnnotatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isUserAnnotate(&__ctx, __del, __cookie);
    }

    bool end_isUserAnnotate(const ::Ice::AsyncResultPtr&);
    
private:

    bool isUserAnnotate(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_isUserAnnotate(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool isUserWrite()
    {
        return isUserWrite(0);
    }
    bool isUserWrite(const ::Ice::Context& __ctx)
    {
        return isUserWrite(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_isUserWrite(const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_isUserWrite(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_isUserWrite(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_isUserWrite(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_isUserWrite(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_isUserWrite(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_isUserWrite(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_isUserWrite(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_isUserWrite(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PermissionsPrx __proxy = ::omero::model::PermissionsPrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_isUserWrite(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_isUserWrite(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_isUserWrite()
    {
        return begin_isUserWrite(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_isUserWrite(const ::Ice::Context& __ctx)
    {
        return begin_isUserWrite(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_isUserWrite(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isUserWrite(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isUserWrite(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isUserWrite(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isUserWrite(const ::omero::model::Callback_Permissions_isUserWritePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isUserWrite(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isUserWrite(const ::Ice::Context& __ctx, const ::omero::model::Callback_Permissions_isUserWritePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isUserWrite(&__ctx, __del, __cookie);
    }

    bool end_isUserWrite(const ::Ice::AsyncResultPtr&);
    
private:

    bool isUserWrite(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_isUserWrite(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool isGroupRead()
    {
        return isGroupRead(0);
    }
    bool isGroupRead(const ::Ice::Context& __ctx)
    {
        return isGroupRead(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_isGroupRead(const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_isGroupRead(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_isGroupRead(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_isGroupRead(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_isGroupRead(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_isGroupRead(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_isGroupRead(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_isGroupRead(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_isGroupRead(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PermissionsPrx __proxy = ::omero::model::PermissionsPrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_isGroupRead(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_isGroupRead(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_isGroupRead()
    {
        return begin_isGroupRead(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_isGroupRead(const ::Ice::Context& __ctx)
    {
        return begin_isGroupRead(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_isGroupRead(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isGroupRead(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isGroupRead(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isGroupRead(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isGroupRead(const ::omero::model::Callback_Permissions_isGroupReadPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isGroupRead(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isGroupRead(const ::Ice::Context& __ctx, const ::omero::model::Callback_Permissions_isGroupReadPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isGroupRead(&__ctx, __del, __cookie);
    }

    bool end_isGroupRead(const ::Ice::AsyncResultPtr&);
    
private:

    bool isGroupRead(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_isGroupRead(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool isGroupAnnotate()
    {
        return isGroupAnnotate(0);
    }
    bool isGroupAnnotate(const ::Ice::Context& __ctx)
    {
        return isGroupAnnotate(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_isGroupAnnotate(const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_isGroupAnnotate(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_isGroupAnnotate(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_isGroupAnnotate(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_isGroupAnnotate(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_isGroupAnnotate(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_isGroupAnnotate(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_isGroupAnnotate(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_isGroupAnnotate(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PermissionsPrx __proxy = ::omero::model::PermissionsPrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_isGroupAnnotate(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_isGroupAnnotate(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_isGroupAnnotate()
    {
        return begin_isGroupAnnotate(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_isGroupAnnotate(const ::Ice::Context& __ctx)
    {
        return begin_isGroupAnnotate(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_isGroupAnnotate(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isGroupAnnotate(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isGroupAnnotate(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isGroupAnnotate(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isGroupAnnotate(const ::omero::model::Callback_Permissions_isGroupAnnotatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isGroupAnnotate(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isGroupAnnotate(const ::Ice::Context& __ctx, const ::omero::model::Callback_Permissions_isGroupAnnotatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isGroupAnnotate(&__ctx, __del, __cookie);
    }

    bool end_isGroupAnnotate(const ::Ice::AsyncResultPtr&);
    
private:

    bool isGroupAnnotate(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_isGroupAnnotate(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool isGroupWrite()
    {
        return isGroupWrite(0);
    }
    bool isGroupWrite(const ::Ice::Context& __ctx)
    {
        return isGroupWrite(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_isGroupWrite(const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_isGroupWrite(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_isGroupWrite(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_isGroupWrite(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_isGroupWrite(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_isGroupWrite(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_isGroupWrite(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_isGroupWrite(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_isGroupWrite(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PermissionsPrx __proxy = ::omero::model::PermissionsPrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_isGroupWrite(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_isGroupWrite(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_isGroupWrite()
    {
        return begin_isGroupWrite(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_isGroupWrite(const ::Ice::Context& __ctx)
    {
        return begin_isGroupWrite(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_isGroupWrite(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isGroupWrite(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isGroupWrite(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isGroupWrite(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isGroupWrite(const ::omero::model::Callback_Permissions_isGroupWritePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isGroupWrite(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isGroupWrite(const ::Ice::Context& __ctx, const ::omero::model::Callback_Permissions_isGroupWritePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isGroupWrite(&__ctx, __del, __cookie);
    }

    bool end_isGroupWrite(const ::Ice::AsyncResultPtr&);
    
private:

    bool isGroupWrite(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_isGroupWrite(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool isWorldRead()
    {
        return isWorldRead(0);
    }
    bool isWorldRead(const ::Ice::Context& __ctx)
    {
        return isWorldRead(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_isWorldRead(const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_isWorldRead(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_isWorldRead(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_isWorldRead(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_isWorldRead(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_isWorldRead(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_isWorldRead(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_isWorldRead(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_isWorldRead(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PermissionsPrx __proxy = ::omero::model::PermissionsPrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_isWorldRead(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_isWorldRead(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_isWorldRead()
    {
        return begin_isWorldRead(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_isWorldRead(const ::Ice::Context& __ctx)
    {
        return begin_isWorldRead(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_isWorldRead(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isWorldRead(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isWorldRead(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isWorldRead(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isWorldRead(const ::omero::model::Callback_Permissions_isWorldReadPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isWorldRead(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isWorldRead(const ::Ice::Context& __ctx, const ::omero::model::Callback_Permissions_isWorldReadPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isWorldRead(&__ctx, __del, __cookie);
    }

    bool end_isWorldRead(const ::Ice::AsyncResultPtr&);
    
private:

    bool isWorldRead(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_isWorldRead(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool isWorldAnnotate()
    {
        return isWorldAnnotate(0);
    }
    bool isWorldAnnotate(const ::Ice::Context& __ctx)
    {
        return isWorldAnnotate(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_isWorldAnnotate(const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_isWorldAnnotate(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_isWorldAnnotate(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_isWorldAnnotate(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_isWorldAnnotate(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_isWorldAnnotate(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_isWorldAnnotate(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_isWorldAnnotate(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_isWorldAnnotate(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PermissionsPrx __proxy = ::omero::model::PermissionsPrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_isWorldAnnotate(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_isWorldAnnotate(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_isWorldAnnotate()
    {
        return begin_isWorldAnnotate(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_isWorldAnnotate(const ::Ice::Context& __ctx)
    {
        return begin_isWorldAnnotate(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_isWorldAnnotate(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isWorldAnnotate(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isWorldAnnotate(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isWorldAnnotate(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isWorldAnnotate(const ::omero::model::Callback_Permissions_isWorldAnnotatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isWorldAnnotate(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isWorldAnnotate(const ::Ice::Context& __ctx, const ::omero::model::Callback_Permissions_isWorldAnnotatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isWorldAnnotate(&__ctx, __del, __cookie);
    }

    bool end_isWorldAnnotate(const ::Ice::AsyncResultPtr&);
    
private:

    bool isWorldAnnotate(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_isWorldAnnotate(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool isWorldWrite()
    {
        return isWorldWrite(0);
    }
    bool isWorldWrite(const ::Ice::Context& __ctx)
    {
        return isWorldWrite(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_isWorldWrite(const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_isWorldWrite(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_isWorldWrite(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_isWorldWrite(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_isWorldWrite(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_isWorldWrite(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_isWorldWrite(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_isWorldWrite(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_isWorldWrite(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::PermissionsPrx __proxy = ::omero::model::PermissionsPrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_isWorldWrite(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_isWorldWrite(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_isWorldWrite()
    {
        return begin_isWorldWrite(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_isWorldWrite(const ::Ice::Context& __ctx)
    {
        return begin_isWorldWrite(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_isWorldWrite(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isWorldWrite(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isWorldWrite(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isWorldWrite(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isWorldWrite(const ::omero::model::Callback_Permissions_isWorldWritePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isWorldWrite(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isWorldWrite(const ::Ice::Context& __ctx, const ::omero::model::Callback_Permissions_isWorldWritePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isWorldWrite(&__ctx, __del, __cookie);
    }

    bool end_isWorldWrite(const ::Ice::AsyncResultPtr&);
    
private:

    bool isWorldWrite(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_isWorldWrite(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setUserRead(bool value)
    {
        setUserRead(value, 0);
    }
    void setUserRead(bool value, const ::Ice::Context& __ctx)
    {
        setUserRead(value, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setUserRead(bool value, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setUserRead(value, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setUserRead(bool value, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setUserRead(value, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setUserRead(bool value, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setUserRead(value, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setUserRead(bool value, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setUserRead(value, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setUserRead(bool value)
    {
        return begin_setUserRead(value, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setUserRead(bool value, const ::Ice::Context& __ctx)
    {
        return begin_setUserRead(value, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setUserRead(bool value, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setUserRead(value, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setUserRead(bool value, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setUserRead(value, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setUserRead(bool value, const ::omero::model::Callback_Permissions_setUserReadPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setUserRead(value, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setUserRead(bool value, const ::Ice::Context& __ctx, const ::omero::model::Callback_Permissions_setUserReadPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setUserRead(value, &__ctx, __del, __cookie);
    }

    void end_setUserRead(const ::Ice::AsyncResultPtr&);
    
private:

    void setUserRead(bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setUserRead(bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setUserAnnotate(bool value)
    {
        setUserAnnotate(value, 0);
    }
    void setUserAnnotate(bool value, const ::Ice::Context& __ctx)
    {
        setUserAnnotate(value, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setUserAnnotate(bool value, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setUserAnnotate(value, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setUserAnnotate(bool value, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setUserAnnotate(value, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setUserAnnotate(bool value, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setUserAnnotate(value, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setUserAnnotate(bool value, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setUserAnnotate(value, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setUserAnnotate(bool value)
    {
        return begin_setUserAnnotate(value, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setUserAnnotate(bool value, const ::Ice::Context& __ctx)
    {
        return begin_setUserAnnotate(value, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setUserAnnotate(bool value, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setUserAnnotate(value, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setUserAnnotate(bool value, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setUserAnnotate(value, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setUserAnnotate(bool value, const ::omero::model::Callback_Permissions_setUserAnnotatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setUserAnnotate(value, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setUserAnnotate(bool value, const ::Ice::Context& __ctx, const ::omero::model::Callback_Permissions_setUserAnnotatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setUserAnnotate(value, &__ctx, __del, __cookie);
    }

    void end_setUserAnnotate(const ::Ice::AsyncResultPtr&);
    
private:

    void setUserAnnotate(bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setUserAnnotate(bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setUserWrite(bool value)
    {
        setUserWrite(value, 0);
    }
    void setUserWrite(bool value, const ::Ice::Context& __ctx)
    {
        setUserWrite(value, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setUserWrite(bool value, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setUserWrite(value, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setUserWrite(bool value, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setUserWrite(value, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setUserWrite(bool value, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setUserWrite(value, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setUserWrite(bool value, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setUserWrite(value, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setUserWrite(bool value)
    {
        return begin_setUserWrite(value, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setUserWrite(bool value, const ::Ice::Context& __ctx)
    {
        return begin_setUserWrite(value, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setUserWrite(bool value, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setUserWrite(value, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setUserWrite(bool value, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setUserWrite(value, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setUserWrite(bool value, const ::omero::model::Callback_Permissions_setUserWritePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setUserWrite(value, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setUserWrite(bool value, const ::Ice::Context& __ctx, const ::omero::model::Callback_Permissions_setUserWritePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setUserWrite(value, &__ctx, __del, __cookie);
    }

    void end_setUserWrite(const ::Ice::AsyncResultPtr&);
    
private:

    void setUserWrite(bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setUserWrite(bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setGroupRead(bool value)
    {
        setGroupRead(value, 0);
    }
    void setGroupRead(bool value, const ::Ice::Context& __ctx)
    {
        setGroupRead(value, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setGroupRead(bool value, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setGroupRead(value, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setGroupRead(bool value, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setGroupRead(value, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setGroupRead(bool value, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setGroupRead(value, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setGroupRead(bool value, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setGroupRead(value, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setGroupRead(bool value)
    {
        return begin_setGroupRead(value, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setGroupRead(bool value, const ::Ice::Context& __ctx)
    {
        return begin_setGroupRead(value, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setGroupRead(bool value, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setGroupRead(value, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setGroupRead(bool value, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setGroupRead(value, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setGroupRead(bool value, const ::omero::model::Callback_Permissions_setGroupReadPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setGroupRead(value, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setGroupRead(bool value, const ::Ice::Context& __ctx, const ::omero::model::Callback_Permissions_setGroupReadPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setGroupRead(value, &__ctx, __del, __cookie);
    }

    void end_setGroupRead(const ::Ice::AsyncResultPtr&);
    
private:

    void setGroupRead(bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setGroupRead(bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setGroupAnnotate(bool value)
    {
        setGroupAnnotate(value, 0);
    }
    void setGroupAnnotate(bool value, const ::Ice::Context& __ctx)
    {
        setGroupAnnotate(value, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setGroupAnnotate(bool value, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setGroupAnnotate(value, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setGroupAnnotate(bool value, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setGroupAnnotate(value, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setGroupAnnotate(bool value, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setGroupAnnotate(value, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setGroupAnnotate(bool value, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setGroupAnnotate(value, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setGroupAnnotate(bool value)
    {
        return begin_setGroupAnnotate(value, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setGroupAnnotate(bool value, const ::Ice::Context& __ctx)
    {
        return begin_setGroupAnnotate(value, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setGroupAnnotate(bool value, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setGroupAnnotate(value, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setGroupAnnotate(bool value, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setGroupAnnotate(value, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setGroupAnnotate(bool value, const ::omero::model::Callback_Permissions_setGroupAnnotatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setGroupAnnotate(value, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setGroupAnnotate(bool value, const ::Ice::Context& __ctx, const ::omero::model::Callback_Permissions_setGroupAnnotatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setGroupAnnotate(value, &__ctx, __del, __cookie);
    }

    void end_setGroupAnnotate(const ::Ice::AsyncResultPtr&);
    
private:

    void setGroupAnnotate(bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setGroupAnnotate(bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setGroupWrite(bool value)
    {
        setGroupWrite(value, 0);
    }
    void setGroupWrite(bool value, const ::Ice::Context& __ctx)
    {
        setGroupWrite(value, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setGroupWrite(bool value, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setGroupWrite(value, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setGroupWrite(bool value, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setGroupWrite(value, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setGroupWrite(bool value, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setGroupWrite(value, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setGroupWrite(bool value, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setGroupWrite(value, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setGroupWrite(bool value)
    {
        return begin_setGroupWrite(value, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setGroupWrite(bool value, const ::Ice::Context& __ctx)
    {
        return begin_setGroupWrite(value, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setGroupWrite(bool value, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setGroupWrite(value, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setGroupWrite(bool value, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setGroupWrite(value, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setGroupWrite(bool value, const ::omero::model::Callback_Permissions_setGroupWritePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setGroupWrite(value, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setGroupWrite(bool value, const ::Ice::Context& __ctx, const ::omero::model::Callback_Permissions_setGroupWritePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setGroupWrite(value, &__ctx, __del, __cookie);
    }

    void end_setGroupWrite(const ::Ice::AsyncResultPtr&);
    
private:

    void setGroupWrite(bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setGroupWrite(bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setWorldRead(bool value)
    {
        setWorldRead(value, 0);
    }
    void setWorldRead(bool value, const ::Ice::Context& __ctx)
    {
        setWorldRead(value, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setWorldRead(bool value, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setWorldRead(value, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setWorldRead(bool value, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setWorldRead(value, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setWorldRead(bool value, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setWorldRead(value, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setWorldRead(bool value, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setWorldRead(value, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setWorldRead(bool value)
    {
        return begin_setWorldRead(value, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setWorldRead(bool value, const ::Ice::Context& __ctx)
    {
        return begin_setWorldRead(value, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setWorldRead(bool value, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setWorldRead(value, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setWorldRead(bool value, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setWorldRead(value, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setWorldRead(bool value, const ::omero::model::Callback_Permissions_setWorldReadPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setWorldRead(value, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setWorldRead(bool value, const ::Ice::Context& __ctx, const ::omero::model::Callback_Permissions_setWorldReadPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setWorldRead(value, &__ctx, __del, __cookie);
    }

    void end_setWorldRead(const ::Ice::AsyncResultPtr&);
    
private:

    void setWorldRead(bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setWorldRead(bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setWorldAnnotate(bool value)
    {
        setWorldAnnotate(value, 0);
    }
    void setWorldAnnotate(bool value, const ::Ice::Context& __ctx)
    {
        setWorldAnnotate(value, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setWorldAnnotate(bool value, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setWorldAnnotate(value, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setWorldAnnotate(bool value, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setWorldAnnotate(value, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setWorldAnnotate(bool value, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setWorldAnnotate(value, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setWorldAnnotate(bool value, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setWorldAnnotate(value, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setWorldAnnotate(bool value)
    {
        return begin_setWorldAnnotate(value, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setWorldAnnotate(bool value, const ::Ice::Context& __ctx)
    {
        return begin_setWorldAnnotate(value, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setWorldAnnotate(bool value, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setWorldAnnotate(value, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setWorldAnnotate(bool value, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setWorldAnnotate(value, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setWorldAnnotate(bool value, const ::omero::model::Callback_Permissions_setWorldAnnotatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setWorldAnnotate(value, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setWorldAnnotate(bool value, const ::Ice::Context& __ctx, const ::omero::model::Callback_Permissions_setWorldAnnotatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setWorldAnnotate(value, &__ctx, __del, __cookie);
    }

    void end_setWorldAnnotate(const ::Ice::AsyncResultPtr&);
    
private:

    void setWorldAnnotate(bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setWorldAnnotate(bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setWorldWrite(bool value)
    {
        setWorldWrite(value, 0);
    }
    void setWorldWrite(bool value, const ::Ice::Context& __ctx)
    {
        setWorldWrite(value, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setWorldWrite(bool value, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setWorldWrite(value, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setWorldWrite(bool value, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setWorldWrite(value, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setWorldWrite(bool value, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setWorldWrite(value, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setWorldWrite(bool value, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setWorldWrite(value, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setWorldWrite(bool value)
    {
        return begin_setWorldWrite(value, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setWorldWrite(bool value, const ::Ice::Context& __ctx)
    {
        return begin_setWorldWrite(value, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setWorldWrite(bool value, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setWorldWrite(value, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setWorldWrite(bool value, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setWorldWrite(value, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setWorldWrite(bool value, const ::omero::model::Callback_Permissions_setWorldWritePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setWorldWrite(value, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setWorldWrite(bool value, const ::Ice::Context& __ctx, const ::omero::model::Callback_Permissions_setWorldWritePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setWorldWrite(value, &__ctx, __del, __cookie);
    }

    void end_setWorldWrite(const ::Ice::AsyncResultPtr&);
    
private:

    void setWorldWrite(bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setWorldWrite(bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Permissions> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Permissions*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Permissions> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Permissions*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Permissions> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Permissions*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Permissions> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Permissions*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Permissions> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Permissions*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Permissions> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Permissions*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Permissions> ice_secure(bool __secure) const
    {
        return dynamic_cast<Permissions*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Permissions> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Permissions*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Permissions> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Permissions*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Permissions> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Permissions*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Permissions> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Permissions*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Permissions> ice_twoway() const
    {
        return dynamic_cast<Permissions*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Permissions> ice_oneway() const
    {
        return dynamic_cast<Permissions*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Permissions> ice_batchOneway() const
    {
        return dynamic_cast<Permissions*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Permissions> ice_datagram() const
    {
        return dynamic_cast<Permissions*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Permissions> ice_batchDatagram() const
    {
        return dynamic_cast<Permissions*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Permissions> ice_compress(bool __compress) const
    {
        return dynamic_cast<Permissions*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Permissions> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Permissions*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Permissions> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Permissions*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Permissions> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Permissions*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

namespace IceDelegate
{

namespace omero
{

namespace model
{

class Permissions : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::Ice::Long getPerm1(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setPerm1(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool isDisallow(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool canAnnotate(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool canEdit(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool canLink(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool canDelete(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool isUserRead(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool isUserAnnotate(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool isUserWrite(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool isGroupRead(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool isGroupAnnotate(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool isGroupWrite(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool isWorldRead(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool isWorldAnnotate(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool isWorldWrite(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setUserRead(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setUserAnnotate(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setUserWrite(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setGroupRead(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setGroupAnnotate(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setGroupWrite(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setWorldRead(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setWorldAnnotate(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setWorldWrite(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

}

namespace IceDelegateM
{

namespace omero
{

namespace model
{

class Permissions : virtual public ::IceDelegate::omero::model::Permissions,
                    virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::Ice::Long getPerm1(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setPerm1(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool isDisallow(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool canAnnotate(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool canEdit(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool canLink(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool canDelete(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool isUserRead(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool isUserAnnotate(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool isUserWrite(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool isGroupRead(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool isGroupAnnotate(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool isGroupWrite(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool isWorldRead(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool isWorldAnnotate(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool isWorldWrite(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setUserRead(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setUserAnnotate(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setUserWrite(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setGroupRead(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setGroupAnnotate(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setGroupWrite(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setWorldRead(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setWorldAnnotate(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setWorldWrite(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace IceDelegateD
{

namespace omero
{

namespace model
{

class Permissions : virtual public ::IceDelegate::omero::model::Permissions,
                    virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::Ice::Long getPerm1(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setPerm1(::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool isDisallow(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool canAnnotate(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool canEdit(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool canLink(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool canDelete(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool isUserRead(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool isUserAnnotate(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool isUserWrite(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool isGroupRead(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool isGroupAnnotate(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool isGroupWrite(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool isWorldRead(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool isWorldAnnotate(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool isWorldWrite(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setUserRead(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setUserAnnotate(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setUserWrite(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setGroupRead(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setGroupAnnotate(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setGroupWrite(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setWorldRead(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setWorldAnnotate(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setWorldWrite(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace omero
{

namespace model
{

class Permissions : virtual public ::Ice::Object
{
public:

    typedef PermissionsPrx ProxyType;
    typedef PermissionsPtr PointerType;

    Permissions()
    {
    }

    Permissions(const ::omero::api::BoolArray& __ice_restrictions, ::Ice::Long __ice_perm1) :
        restrictions(__ice_restrictions),
        perm1(__ice_perm1)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    virtual ::Ice::Long getPerm1(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getPerm1(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setPerm1(::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setPerm1(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool isDisallow(::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___isDisallow(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool canAnnotate(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___canAnnotate(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool canEdit(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___canEdit(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool canLink(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___canLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool canDelete(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___canDelete(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool isUserRead(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___isUserRead(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool isUserAnnotate(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___isUserAnnotate(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool isUserWrite(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___isUserWrite(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool isGroupRead(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___isGroupRead(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool isGroupAnnotate(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___isGroupAnnotate(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool isGroupWrite(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___isGroupWrite(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool isWorldRead(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___isWorldRead(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool isWorldAnnotate(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___isWorldAnnotate(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool isWorldWrite(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___isWorldWrite(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setUserRead(bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setUserRead(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setUserAnnotate(bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setUserAnnotate(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setUserWrite(bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setUserWrite(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setGroupRead(bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setGroupRead(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setGroupAnnotate(bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setGroupAnnotate(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setGroupWrite(bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setGroupWrite(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setWorldRead(bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setWorldRead(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setWorldAnnotate(bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setWorldAnnotate(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setWorldWrite(bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setWorldWrite(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif

    ::omero::api::BoolArray restrictions;

    ::Ice::Long perm1;
};

inline bool operator==(const Permissions& l, const Permissions& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Permissions& l, const Permissions& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

}

namespace omero
{

namespace model
{

template<class T>
class CallbackNC_Permissions_getPerm1 : public Callback_Permissions_getPerm1_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Long);

    CallbackNC_Permissions_getPerm1(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PermissionsPrx __proxy = ::omero::model::PermissionsPrx::uncheckedCast(__result->getProxy());
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_getPerm1(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Permissions_getPerm1Ptr
newCallback_Permissions_getPerm1(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_getPerm1<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Permissions_getPerm1Ptr
newCallback_Permissions_getPerm1(T* instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_getPerm1<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Permissions_getPerm1 : public Callback_Permissions_getPerm1_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Long, const CT&);

    Callback_Permissions_getPerm1(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PermissionsPrx __proxy = ::omero::model::PermissionsPrx::uncheckedCast(__result->getProxy());
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_getPerm1(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Permissions_getPerm1Ptr
newCallback_Permissions_getPerm1(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_getPerm1<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Permissions_getPerm1Ptr
newCallback_Permissions_getPerm1(T* instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_getPerm1<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Permissions_setPerm1 : public Callback_Permissions_setPerm1_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Permissions_setPerm1(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Permissions_setPerm1Ptr
newCallback_Permissions_setPerm1(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_setPerm1<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Permissions_setPerm1Ptr
newCallback_Permissions_setPerm1(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_setPerm1<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Permissions_setPerm1Ptr
newCallback_Permissions_setPerm1(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_setPerm1<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Permissions_setPerm1Ptr
newCallback_Permissions_setPerm1(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_setPerm1<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Permissions_setPerm1 : public Callback_Permissions_setPerm1_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Permissions_setPerm1(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Permissions_setPerm1Ptr
newCallback_Permissions_setPerm1(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_setPerm1<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Permissions_setPerm1Ptr
newCallback_Permissions_setPerm1(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_setPerm1<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Permissions_setPerm1Ptr
newCallback_Permissions_setPerm1(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_setPerm1<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Permissions_setPerm1Ptr
newCallback_Permissions_setPerm1(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_setPerm1<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Permissions_isDisallow : public Callback_Permissions_isDisallow_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_Permissions_isDisallow(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PermissionsPrx __proxy = ::omero::model::PermissionsPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_isDisallow(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Permissions_isDisallowPtr
newCallback_Permissions_isDisallow(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_isDisallow<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Permissions_isDisallowPtr
newCallback_Permissions_isDisallow(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_isDisallow<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Permissions_isDisallow : public Callback_Permissions_isDisallow_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_Permissions_isDisallow(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PermissionsPrx __proxy = ::omero::model::PermissionsPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_isDisallow(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Permissions_isDisallowPtr
newCallback_Permissions_isDisallow(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_isDisallow<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Permissions_isDisallowPtr
newCallback_Permissions_isDisallow(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_isDisallow<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Permissions_canAnnotate : public Callback_Permissions_canAnnotate_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_Permissions_canAnnotate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PermissionsPrx __proxy = ::omero::model::PermissionsPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_canAnnotate(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Permissions_canAnnotatePtr
newCallback_Permissions_canAnnotate(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_canAnnotate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Permissions_canAnnotatePtr
newCallback_Permissions_canAnnotate(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_canAnnotate<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Permissions_canAnnotate : public Callback_Permissions_canAnnotate_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_Permissions_canAnnotate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PermissionsPrx __proxy = ::omero::model::PermissionsPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_canAnnotate(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Permissions_canAnnotatePtr
newCallback_Permissions_canAnnotate(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_canAnnotate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Permissions_canAnnotatePtr
newCallback_Permissions_canAnnotate(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_canAnnotate<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Permissions_canEdit : public Callback_Permissions_canEdit_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_Permissions_canEdit(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PermissionsPrx __proxy = ::omero::model::PermissionsPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_canEdit(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Permissions_canEditPtr
newCallback_Permissions_canEdit(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_canEdit<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Permissions_canEditPtr
newCallback_Permissions_canEdit(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_canEdit<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Permissions_canEdit : public Callback_Permissions_canEdit_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_Permissions_canEdit(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PermissionsPrx __proxy = ::omero::model::PermissionsPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_canEdit(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Permissions_canEditPtr
newCallback_Permissions_canEdit(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_canEdit<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Permissions_canEditPtr
newCallback_Permissions_canEdit(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_canEdit<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Permissions_canLink : public Callback_Permissions_canLink_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_Permissions_canLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PermissionsPrx __proxy = ::omero::model::PermissionsPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_canLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Permissions_canLinkPtr
newCallback_Permissions_canLink(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_canLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Permissions_canLinkPtr
newCallback_Permissions_canLink(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_canLink<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Permissions_canLink : public Callback_Permissions_canLink_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_Permissions_canLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PermissionsPrx __proxy = ::omero::model::PermissionsPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_canLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Permissions_canLinkPtr
newCallback_Permissions_canLink(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_canLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Permissions_canLinkPtr
newCallback_Permissions_canLink(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_canLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Permissions_canDelete : public Callback_Permissions_canDelete_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_Permissions_canDelete(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PermissionsPrx __proxy = ::omero::model::PermissionsPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_canDelete(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Permissions_canDeletePtr
newCallback_Permissions_canDelete(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_canDelete<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Permissions_canDeletePtr
newCallback_Permissions_canDelete(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_canDelete<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Permissions_canDelete : public Callback_Permissions_canDelete_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_Permissions_canDelete(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PermissionsPrx __proxy = ::omero::model::PermissionsPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_canDelete(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Permissions_canDeletePtr
newCallback_Permissions_canDelete(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_canDelete<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Permissions_canDeletePtr
newCallback_Permissions_canDelete(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_canDelete<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Permissions_isUserRead : public Callback_Permissions_isUserRead_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_Permissions_isUserRead(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PermissionsPrx __proxy = ::omero::model::PermissionsPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_isUserRead(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Permissions_isUserReadPtr
newCallback_Permissions_isUserRead(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_isUserRead<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Permissions_isUserReadPtr
newCallback_Permissions_isUserRead(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_isUserRead<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Permissions_isUserRead : public Callback_Permissions_isUserRead_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_Permissions_isUserRead(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PermissionsPrx __proxy = ::omero::model::PermissionsPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_isUserRead(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Permissions_isUserReadPtr
newCallback_Permissions_isUserRead(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_isUserRead<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Permissions_isUserReadPtr
newCallback_Permissions_isUserRead(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_isUserRead<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Permissions_isUserAnnotate : public Callback_Permissions_isUserAnnotate_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_Permissions_isUserAnnotate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PermissionsPrx __proxy = ::omero::model::PermissionsPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_isUserAnnotate(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Permissions_isUserAnnotatePtr
newCallback_Permissions_isUserAnnotate(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_isUserAnnotate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Permissions_isUserAnnotatePtr
newCallback_Permissions_isUserAnnotate(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_isUserAnnotate<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Permissions_isUserAnnotate : public Callback_Permissions_isUserAnnotate_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_Permissions_isUserAnnotate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PermissionsPrx __proxy = ::omero::model::PermissionsPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_isUserAnnotate(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Permissions_isUserAnnotatePtr
newCallback_Permissions_isUserAnnotate(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_isUserAnnotate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Permissions_isUserAnnotatePtr
newCallback_Permissions_isUserAnnotate(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_isUserAnnotate<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Permissions_isUserWrite : public Callback_Permissions_isUserWrite_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_Permissions_isUserWrite(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PermissionsPrx __proxy = ::omero::model::PermissionsPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_isUserWrite(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Permissions_isUserWritePtr
newCallback_Permissions_isUserWrite(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_isUserWrite<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Permissions_isUserWritePtr
newCallback_Permissions_isUserWrite(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_isUserWrite<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Permissions_isUserWrite : public Callback_Permissions_isUserWrite_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_Permissions_isUserWrite(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PermissionsPrx __proxy = ::omero::model::PermissionsPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_isUserWrite(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Permissions_isUserWritePtr
newCallback_Permissions_isUserWrite(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_isUserWrite<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Permissions_isUserWritePtr
newCallback_Permissions_isUserWrite(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_isUserWrite<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Permissions_isGroupRead : public Callback_Permissions_isGroupRead_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_Permissions_isGroupRead(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PermissionsPrx __proxy = ::omero::model::PermissionsPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_isGroupRead(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Permissions_isGroupReadPtr
newCallback_Permissions_isGroupRead(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_isGroupRead<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Permissions_isGroupReadPtr
newCallback_Permissions_isGroupRead(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_isGroupRead<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Permissions_isGroupRead : public Callback_Permissions_isGroupRead_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_Permissions_isGroupRead(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PermissionsPrx __proxy = ::omero::model::PermissionsPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_isGroupRead(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Permissions_isGroupReadPtr
newCallback_Permissions_isGroupRead(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_isGroupRead<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Permissions_isGroupReadPtr
newCallback_Permissions_isGroupRead(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_isGroupRead<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Permissions_isGroupAnnotate : public Callback_Permissions_isGroupAnnotate_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_Permissions_isGroupAnnotate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PermissionsPrx __proxy = ::omero::model::PermissionsPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_isGroupAnnotate(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Permissions_isGroupAnnotatePtr
newCallback_Permissions_isGroupAnnotate(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_isGroupAnnotate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Permissions_isGroupAnnotatePtr
newCallback_Permissions_isGroupAnnotate(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_isGroupAnnotate<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Permissions_isGroupAnnotate : public Callback_Permissions_isGroupAnnotate_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_Permissions_isGroupAnnotate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PermissionsPrx __proxy = ::omero::model::PermissionsPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_isGroupAnnotate(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Permissions_isGroupAnnotatePtr
newCallback_Permissions_isGroupAnnotate(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_isGroupAnnotate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Permissions_isGroupAnnotatePtr
newCallback_Permissions_isGroupAnnotate(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_isGroupAnnotate<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Permissions_isGroupWrite : public Callback_Permissions_isGroupWrite_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_Permissions_isGroupWrite(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PermissionsPrx __proxy = ::omero::model::PermissionsPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_isGroupWrite(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Permissions_isGroupWritePtr
newCallback_Permissions_isGroupWrite(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_isGroupWrite<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Permissions_isGroupWritePtr
newCallback_Permissions_isGroupWrite(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_isGroupWrite<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Permissions_isGroupWrite : public Callback_Permissions_isGroupWrite_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_Permissions_isGroupWrite(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PermissionsPrx __proxy = ::omero::model::PermissionsPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_isGroupWrite(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Permissions_isGroupWritePtr
newCallback_Permissions_isGroupWrite(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_isGroupWrite<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Permissions_isGroupWritePtr
newCallback_Permissions_isGroupWrite(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_isGroupWrite<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Permissions_isWorldRead : public Callback_Permissions_isWorldRead_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_Permissions_isWorldRead(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PermissionsPrx __proxy = ::omero::model::PermissionsPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_isWorldRead(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Permissions_isWorldReadPtr
newCallback_Permissions_isWorldRead(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_isWorldRead<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Permissions_isWorldReadPtr
newCallback_Permissions_isWorldRead(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_isWorldRead<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Permissions_isWorldRead : public Callback_Permissions_isWorldRead_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_Permissions_isWorldRead(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PermissionsPrx __proxy = ::omero::model::PermissionsPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_isWorldRead(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Permissions_isWorldReadPtr
newCallback_Permissions_isWorldRead(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_isWorldRead<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Permissions_isWorldReadPtr
newCallback_Permissions_isWorldRead(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_isWorldRead<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Permissions_isWorldAnnotate : public Callback_Permissions_isWorldAnnotate_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_Permissions_isWorldAnnotate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PermissionsPrx __proxy = ::omero::model::PermissionsPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_isWorldAnnotate(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Permissions_isWorldAnnotatePtr
newCallback_Permissions_isWorldAnnotate(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_isWorldAnnotate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Permissions_isWorldAnnotatePtr
newCallback_Permissions_isWorldAnnotate(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_isWorldAnnotate<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Permissions_isWorldAnnotate : public Callback_Permissions_isWorldAnnotate_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_Permissions_isWorldAnnotate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PermissionsPrx __proxy = ::omero::model::PermissionsPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_isWorldAnnotate(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Permissions_isWorldAnnotatePtr
newCallback_Permissions_isWorldAnnotate(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_isWorldAnnotate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Permissions_isWorldAnnotatePtr
newCallback_Permissions_isWorldAnnotate(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_isWorldAnnotate<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Permissions_isWorldWrite : public Callback_Permissions_isWorldWrite_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_Permissions_isWorldWrite(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PermissionsPrx __proxy = ::omero::model::PermissionsPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_isWorldWrite(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Permissions_isWorldWritePtr
newCallback_Permissions_isWorldWrite(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_isWorldWrite<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Permissions_isWorldWritePtr
newCallback_Permissions_isWorldWrite(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_isWorldWrite<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Permissions_isWorldWrite : public Callback_Permissions_isWorldWrite_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_Permissions_isWorldWrite(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::PermissionsPrx __proxy = ::omero::model::PermissionsPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_isWorldWrite(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Permissions_isWorldWritePtr
newCallback_Permissions_isWorldWrite(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_isWorldWrite<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Permissions_isWorldWritePtr
newCallback_Permissions_isWorldWrite(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_isWorldWrite<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Permissions_setUserRead : public Callback_Permissions_setUserRead_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Permissions_setUserRead(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Permissions_setUserReadPtr
newCallback_Permissions_setUserRead(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_setUserRead<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Permissions_setUserReadPtr
newCallback_Permissions_setUserRead(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_setUserRead<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Permissions_setUserReadPtr
newCallback_Permissions_setUserRead(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_setUserRead<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Permissions_setUserReadPtr
newCallback_Permissions_setUserRead(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_setUserRead<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Permissions_setUserRead : public Callback_Permissions_setUserRead_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Permissions_setUserRead(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Permissions_setUserReadPtr
newCallback_Permissions_setUserRead(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_setUserRead<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Permissions_setUserReadPtr
newCallback_Permissions_setUserRead(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_setUserRead<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Permissions_setUserReadPtr
newCallback_Permissions_setUserRead(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_setUserRead<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Permissions_setUserReadPtr
newCallback_Permissions_setUserRead(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_setUserRead<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Permissions_setUserAnnotate : public Callback_Permissions_setUserAnnotate_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Permissions_setUserAnnotate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Permissions_setUserAnnotatePtr
newCallback_Permissions_setUserAnnotate(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_setUserAnnotate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Permissions_setUserAnnotatePtr
newCallback_Permissions_setUserAnnotate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_setUserAnnotate<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Permissions_setUserAnnotatePtr
newCallback_Permissions_setUserAnnotate(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_setUserAnnotate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Permissions_setUserAnnotatePtr
newCallback_Permissions_setUserAnnotate(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_setUserAnnotate<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Permissions_setUserAnnotate : public Callback_Permissions_setUserAnnotate_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Permissions_setUserAnnotate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Permissions_setUserAnnotatePtr
newCallback_Permissions_setUserAnnotate(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_setUserAnnotate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Permissions_setUserAnnotatePtr
newCallback_Permissions_setUserAnnotate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_setUserAnnotate<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Permissions_setUserAnnotatePtr
newCallback_Permissions_setUserAnnotate(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_setUserAnnotate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Permissions_setUserAnnotatePtr
newCallback_Permissions_setUserAnnotate(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_setUserAnnotate<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Permissions_setUserWrite : public Callback_Permissions_setUserWrite_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Permissions_setUserWrite(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Permissions_setUserWritePtr
newCallback_Permissions_setUserWrite(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_setUserWrite<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Permissions_setUserWritePtr
newCallback_Permissions_setUserWrite(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_setUserWrite<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Permissions_setUserWritePtr
newCallback_Permissions_setUserWrite(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_setUserWrite<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Permissions_setUserWritePtr
newCallback_Permissions_setUserWrite(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_setUserWrite<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Permissions_setUserWrite : public Callback_Permissions_setUserWrite_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Permissions_setUserWrite(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Permissions_setUserWritePtr
newCallback_Permissions_setUserWrite(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_setUserWrite<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Permissions_setUserWritePtr
newCallback_Permissions_setUserWrite(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_setUserWrite<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Permissions_setUserWritePtr
newCallback_Permissions_setUserWrite(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_setUserWrite<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Permissions_setUserWritePtr
newCallback_Permissions_setUserWrite(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_setUserWrite<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Permissions_setGroupRead : public Callback_Permissions_setGroupRead_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Permissions_setGroupRead(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Permissions_setGroupReadPtr
newCallback_Permissions_setGroupRead(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_setGroupRead<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Permissions_setGroupReadPtr
newCallback_Permissions_setGroupRead(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_setGroupRead<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Permissions_setGroupReadPtr
newCallback_Permissions_setGroupRead(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_setGroupRead<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Permissions_setGroupReadPtr
newCallback_Permissions_setGroupRead(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_setGroupRead<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Permissions_setGroupRead : public Callback_Permissions_setGroupRead_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Permissions_setGroupRead(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Permissions_setGroupReadPtr
newCallback_Permissions_setGroupRead(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_setGroupRead<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Permissions_setGroupReadPtr
newCallback_Permissions_setGroupRead(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_setGroupRead<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Permissions_setGroupReadPtr
newCallback_Permissions_setGroupRead(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_setGroupRead<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Permissions_setGroupReadPtr
newCallback_Permissions_setGroupRead(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_setGroupRead<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Permissions_setGroupAnnotate : public Callback_Permissions_setGroupAnnotate_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Permissions_setGroupAnnotate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Permissions_setGroupAnnotatePtr
newCallback_Permissions_setGroupAnnotate(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_setGroupAnnotate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Permissions_setGroupAnnotatePtr
newCallback_Permissions_setGroupAnnotate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_setGroupAnnotate<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Permissions_setGroupAnnotatePtr
newCallback_Permissions_setGroupAnnotate(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_setGroupAnnotate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Permissions_setGroupAnnotatePtr
newCallback_Permissions_setGroupAnnotate(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_setGroupAnnotate<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Permissions_setGroupAnnotate : public Callback_Permissions_setGroupAnnotate_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Permissions_setGroupAnnotate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Permissions_setGroupAnnotatePtr
newCallback_Permissions_setGroupAnnotate(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_setGroupAnnotate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Permissions_setGroupAnnotatePtr
newCallback_Permissions_setGroupAnnotate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_setGroupAnnotate<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Permissions_setGroupAnnotatePtr
newCallback_Permissions_setGroupAnnotate(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_setGroupAnnotate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Permissions_setGroupAnnotatePtr
newCallback_Permissions_setGroupAnnotate(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_setGroupAnnotate<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Permissions_setGroupWrite : public Callback_Permissions_setGroupWrite_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Permissions_setGroupWrite(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Permissions_setGroupWritePtr
newCallback_Permissions_setGroupWrite(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_setGroupWrite<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Permissions_setGroupWritePtr
newCallback_Permissions_setGroupWrite(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_setGroupWrite<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Permissions_setGroupWritePtr
newCallback_Permissions_setGroupWrite(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_setGroupWrite<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Permissions_setGroupWritePtr
newCallback_Permissions_setGroupWrite(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_setGroupWrite<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Permissions_setGroupWrite : public Callback_Permissions_setGroupWrite_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Permissions_setGroupWrite(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Permissions_setGroupWritePtr
newCallback_Permissions_setGroupWrite(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_setGroupWrite<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Permissions_setGroupWritePtr
newCallback_Permissions_setGroupWrite(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_setGroupWrite<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Permissions_setGroupWritePtr
newCallback_Permissions_setGroupWrite(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_setGroupWrite<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Permissions_setGroupWritePtr
newCallback_Permissions_setGroupWrite(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_setGroupWrite<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Permissions_setWorldRead : public Callback_Permissions_setWorldRead_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Permissions_setWorldRead(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Permissions_setWorldReadPtr
newCallback_Permissions_setWorldRead(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_setWorldRead<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Permissions_setWorldReadPtr
newCallback_Permissions_setWorldRead(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_setWorldRead<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Permissions_setWorldReadPtr
newCallback_Permissions_setWorldRead(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_setWorldRead<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Permissions_setWorldReadPtr
newCallback_Permissions_setWorldRead(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_setWorldRead<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Permissions_setWorldRead : public Callback_Permissions_setWorldRead_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Permissions_setWorldRead(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Permissions_setWorldReadPtr
newCallback_Permissions_setWorldRead(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_setWorldRead<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Permissions_setWorldReadPtr
newCallback_Permissions_setWorldRead(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_setWorldRead<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Permissions_setWorldReadPtr
newCallback_Permissions_setWorldRead(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_setWorldRead<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Permissions_setWorldReadPtr
newCallback_Permissions_setWorldRead(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_setWorldRead<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Permissions_setWorldAnnotate : public Callback_Permissions_setWorldAnnotate_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Permissions_setWorldAnnotate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Permissions_setWorldAnnotatePtr
newCallback_Permissions_setWorldAnnotate(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_setWorldAnnotate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Permissions_setWorldAnnotatePtr
newCallback_Permissions_setWorldAnnotate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_setWorldAnnotate<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Permissions_setWorldAnnotatePtr
newCallback_Permissions_setWorldAnnotate(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_setWorldAnnotate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Permissions_setWorldAnnotatePtr
newCallback_Permissions_setWorldAnnotate(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_setWorldAnnotate<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Permissions_setWorldAnnotate : public Callback_Permissions_setWorldAnnotate_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Permissions_setWorldAnnotate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Permissions_setWorldAnnotatePtr
newCallback_Permissions_setWorldAnnotate(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_setWorldAnnotate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Permissions_setWorldAnnotatePtr
newCallback_Permissions_setWorldAnnotate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_setWorldAnnotate<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Permissions_setWorldAnnotatePtr
newCallback_Permissions_setWorldAnnotate(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_setWorldAnnotate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Permissions_setWorldAnnotatePtr
newCallback_Permissions_setWorldAnnotate(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_setWorldAnnotate<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Permissions_setWorldWrite : public Callback_Permissions_setWorldWrite_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Permissions_setWorldWrite(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Permissions_setWorldWritePtr
newCallback_Permissions_setWorldWrite(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_setWorldWrite<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Permissions_setWorldWritePtr
newCallback_Permissions_setWorldWrite(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_setWorldWrite<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Permissions_setWorldWritePtr
newCallback_Permissions_setWorldWrite(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_setWorldWrite<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Permissions_setWorldWritePtr
newCallback_Permissions_setWorldWrite(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Permissions_setWorldWrite<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Permissions_setWorldWrite : public Callback_Permissions_setWorldWrite_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Permissions_setWorldWrite(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Permissions_setWorldWritePtr
newCallback_Permissions_setWorldWrite(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_setWorldWrite<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Permissions_setWorldWritePtr
newCallback_Permissions_setWorldWrite(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_setWorldWrite<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Permissions_setWorldWritePtr
newCallback_Permissions_setWorldWrite(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_setWorldWrite<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Permissions_setWorldWritePtr
newCallback_Permissions_setWorldWrite(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Permissions_setWorldWrite<T, CT>(instance, 0, excb, sentcb);
}

}

}

#endif
