// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `FilterSet.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_FilterSet_h__
#define __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_FilterSet_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <omero/model/IObject.h>
#include <omero/RTypes.h>
#include <omero/System.h>
#include <omero/Collections.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace omero
{

namespace model
{

class Instrument;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Instrument>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Instrument*);

class FilterSetExcitationFilterLink;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::FilterSetExcitationFilterLink>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::FilterSetExcitationFilterLink*);

class Filter;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Filter>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Filter*);

class Dichroic;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Dichroic>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Dichroic*);

class FilterSetEmissionFilterLink;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::FilterSetEmissionFilterLink>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::FilterSetEmissionFilterLink*);

class Details;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Details>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Details*);

class FilterSet;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::FilterSet>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::FilterSet*);

}

}

}

namespace omero
{

namespace model
{

class Instrument;
bool operator==(const Instrument&, const Instrument&);
bool operator<(const Instrument&, const Instrument&);
::Ice::Object* upCast(::omero::model::Instrument*);
typedef ::IceInternal::Handle< ::omero::model::Instrument> InstrumentPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Instrument> InstrumentPrx;
void __patch(InstrumentPtr&, const ::Ice::ObjectPtr&);

class FilterSetExcitationFilterLink;
bool operator==(const FilterSetExcitationFilterLink&, const FilterSetExcitationFilterLink&);
bool operator<(const FilterSetExcitationFilterLink&, const FilterSetExcitationFilterLink&);
::Ice::Object* upCast(::omero::model::FilterSetExcitationFilterLink*);
typedef ::IceInternal::Handle< ::omero::model::FilterSetExcitationFilterLink> FilterSetExcitationFilterLinkPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::FilterSetExcitationFilterLink> FilterSetExcitationFilterLinkPrx;
void __patch(FilterSetExcitationFilterLinkPtr&, const ::Ice::ObjectPtr&);

class Filter;
bool operator==(const Filter&, const Filter&);
bool operator<(const Filter&, const Filter&);
::Ice::Object* upCast(::omero::model::Filter*);
typedef ::IceInternal::Handle< ::omero::model::Filter> FilterPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Filter> FilterPrx;
void __patch(FilterPtr&, const ::Ice::ObjectPtr&);

class Dichroic;
bool operator==(const Dichroic&, const Dichroic&);
bool operator<(const Dichroic&, const Dichroic&);
::Ice::Object* upCast(::omero::model::Dichroic*);
typedef ::IceInternal::Handle< ::omero::model::Dichroic> DichroicPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Dichroic> DichroicPrx;
void __patch(DichroicPtr&, const ::Ice::ObjectPtr&);

class FilterSetEmissionFilterLink;
bool operator==(const FilterSetEmissionFilterLink&, const FilterSetEmissionFilterLink&);
bool operator<(const FilterSetEmissionFilterLink&, const FilterSetEmissionFilterLink&);
::Ice::Object* upCast(::omero::model::FilterSetEmissionFilterLink*);
typedef ::IceInternal::Handle< ::omero::model::FilterSetEmissionFilterLink> FilterSetEmissionFilterLinkPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::FilterSetEmissionFilterLink> FilterSetEmissionFilterLinkPrx;
void __patch(FilterSetEmissionFilterLinkPtr&, const ::Ice::ObjectPtr&);

class Details;
bool operator==(const Details&, const Details&);
bool operator<(const Details&, const Details&);
::Ice::Object* upCast(::omero::model::Details*);
typedef ::IceInternal::Handle< ::omero::model::Details> DetailsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Details> DetailsPrx;
void __patch(DetailsPtr&, const ::Ice::ObjectPtr&);

class FilterSet;
bool operator==(const FilterSet&, const FilterSet&);
bool operator<(const FilterSet&, const FilterSet&);
::Ice::Object* upCast(::omero::model::FilterSet*);
typedef ::IceInternal::Handle< ::omero::model::FilterSet> FilterSetPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::FilterSet> FilterSetPrx;
void __patch(FilterSetPtr&, const ::Ice::ObjectPtr&);

}

}

namespace omero
{

namespace model
{

typedef ::std::vector< ::omero::model::FilterSetExcitationFilterLinkPtr> FilterSetExcitationFilterLinkSeq;

typedef ::std::vector< ::omero::model::FilterPtr> FilterSetLinkedExcitationFilterSeq;

typedef ::std::vector< ::omero::model::FilterSetEmissionFilterLinkPtr> FilterSetEmissionFilterLinkSeq;

typedef ::std::vector< ::omero::model::FilterPtr> FilterSetLinkedEmissionFilterSeq;

}

}

namespace omero
{

namespace model
{

class Callback_FilterSet_getVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilterSet_getVersion_Base> Callback_FilterSet_getVersionPtr;

class Callback_FilterSet_setVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilterSet_setVersion_Base> Callback_FilterSet_setVersionPtr;

class Callback_FilterSet_getManufacturer_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilterSet_getManufacturer_Base> Callback_FilterSet_getManufacturerPtr;

class Callback_FilterSet_setManufacturer_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilterSet_setManufacturer_Base> Callback_FilterSet_setManufacturerPtr;

class Callback_FilterSet_getModel_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilterSet_getModel_Base> Callback_FilterSet_getModelPtr;

class Callback_FilterSet_setModel_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilterSet_setModel_Base> Callback_FilterSet_setModelPtr;

class Callback_FilterSet_getLotNumber_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilterSet_getLotNumber_Base> Callback_FilterSet_getLotNumberPtr;

class Callback_FilterSet_setLotNumber_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilterSet_setLotNumber_Base> Callback_FilterSet_setLotNumberPtr;

class Callback_FilterSet_getSerialNumber_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilterSet_getSerialNumber_Base> Callback_FilterSet_getSerialNumberPtr;

class Callback_FilterSet_setSerialNumber_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilterSet_setSerialNumber_Base> Callback_FilterSet_setSerialNumberPtr;

class Callback_FilterSet_getInstrument_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilterSet_getInstrument_Base> Callback_FilterSet_getInstrumentPtr;

class Callback_FilterSet_setInstrument_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilterSet_setInstrument_Base> Callback_FilterSet_setInstrumentPtr;

class Callback_FilterSet_unloadExcitationFilterLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilterSet_unloadExcitationFilterLink_Base> Callback_FilterSet_unloadExcitationFilterLinkPtr;

class Callback_FilterSet_sizeOfExcitationFilterLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilterSet_sizeOfExcitationFilterLink_Base> Callback_FilterSet_sizeOfExcitationFilterLinkPtr;

class Callback_FilterSet_copyExcitationFilterLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilterSet_copyExcitationFilterLink_Base> Callback_FilterSet_copyExcitationFilterLinkPtr;

class Callback_FilterSet_addFilterSetExcitationFilterLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilterSet_addFilterSetExcitationFilterLink_Base> Callback_FilterSet_addFilterSetExcitationFilterLinkPtr;

class Callback_FilterSet_addAllFilterSetExcitationFilterLinkSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilterSet_addAllFilterSetExcitationFilterLinkSet_Base> Callback_FilterSet_addAllFilterSetExcitationFilterLinkSetPtr;

class Callback_FilterSet_removeFilterSetExcitationFilterLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilterSet_removeFilterSetExcitationFilterLink_Base> Callback_FilterSet_removeFilterSetExcitationFilterLinkPtr;

class Callback_FilterSet_removeAllFilterSetExcitationFilterLinkSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilterSet_removeAllFilterSetExcitationFilterLinkSet_Base> Callback_FilterSet_removeAllFilterSetExcitationFilterLinkSetPtr;

class Callback_FilterSet_clearExcitationFilterLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilterSet_clearExcitationFilterLink_Base> Callback_FilterSet_clearExcitationFilterLinkPtr;

class Callback_FilterSet_reloadExcitationFilterLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilterSet_reloadExcitationFilterLink_Base> Callback_FilterSet_reloadExcitationFilterLinkPtr;

class Callback_FilterSet_getExcitationFilterLinkCountPerOwner_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilterSet_getExcitationFilterLinkCountPerOwner_Base> Callback_FilterSet_getExcitationFilterLinkCountPerOwnerPtr;

class Callback_FilterSet_linkExcitationFilter_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilterSet_linkExcitationFilter_Base> Callback_FilterSet_linkExcitationFilterPtr;

class Callback_FilterSet_addFilterSetExcitationFilterLinkToBoth_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilterSet_addFilterSetExcitationFilterLinkToBoth_Base> Callback_FilterSet_addFilterSetExcitationFilterLinkToBothPtr;

class Callback_FilterSet_findFilterSetExcitationFilterLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilterSet_findFilterSetExcitationFilterLink_Base> Callback_FilterSet_findFilterSetExcitationFilterLinkPtr;

class Callback_FilterSet_unlinkExcitationFilter_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilterSet_unlinkExcitationFilter_Base> Callback_FilterSet_unlinkExcitationFilterPtr;

class Callback_FilterSet_removeFilterSetExcitationFilterLinkFromBoth_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilterSet_removeFilterSetExcitationFilterLinkFromBoth_Base> Callback_FilterSet_removeFilterSetExcitationFilterLinkFromBothPtr;

class Callback_FilterSet_linkedExcitationFilterList_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilterSet_linkedExcitationFilterList_Base> Callback_FilterSet_linkedExcitationFilterListPtr;

class Callback_FilterSet_getDichroic_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilterSet_getDichroic_Base> Callback_FilterSet_getDichroicPtr;

class Callback_FilterSet_setDichroic_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilterSet_setDichroic_Base> Callback_FilterSet_setDichroicPtr;

class Callback_FilterSet_unloadEmissionFilterLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilterSet_unloadEmissionFilterLink_Base> Callback_FilterSet_unloadEmissionFilterLinkPtr;

class Callback_FilterSet_sizeOfEmissionFilterLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilterSet_sizeOfEmissionFilterLink_Base> Callback_FilterSet_sizeOfEmissionFilterLinkPtr;

class Callback_FilterSet_copyEmissionFilterLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilterSet_copyEmissionFilterLink_Base> Callback_FilterSet_copyEmissionFilterLinkPtr;

class Callback_FilterSet_addFilterSetEmissionFilterLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilterSet_addFilterSetEmissionFilterLink_Base> Callback_FilterSet_addFilterSetEmissionFilterLinkPtr;

class Callback_FilterSet_addAllFilterSetEmissionFilterLinkSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilterSet_addAllFilterSetEmissionFilterLinkSet_Base> Callback_FilterSet_addAllFilterSetEmissionFilterLinkSetPtr;

class Callback_FilterSet_removeFilterSetEmissionFilterLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilterSet_removeFilterSetEmissionFilterLink_Base> Callback_FilterSet_removeFilterSetEmissionFilterLinkPtr;

class Callback_FilterSet_removeAllFilterSetEmissionFilterLinkSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilterSet_removeAllFilterSetEmissionFilterLinkSet_Base> Callback_FilterSet_removeAllFilterSetEmissionFilterLinkSetPtr;

class Callback_FilterSet_clearEmissionFilterLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilterSet_clearEmissionFilterLink_Base> Callback_FilterSet_clearEmissionFilterLinkPtr;

class Callback_FilterSet_reloadEmissionFilterLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilterSet_reloadEmissionFilterLink_Base> Callback_FilterSet_reloadEmissionFilterLinkPtr;

class Callback_FilterSet_getEmissionFilterLinkCountPerOwner_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilterSet_getEmissionFilterLinkCountPerOwner_Base> Callback_FilterSet_getEmissionFilterLinkCountPerOwnerPtr;

class Callback_FilterSet_linkEmissionFilter_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilterSet_linkEmissionFilter_Base> Callback_FilterSet_linkEmissionFilterPtr;

class Callback_FilterSet_addFilterSetEmissionFilterLinkToBoth_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilterSet_addFilterSetEmissionFilterLinkToBoth_Base> Callback_FilterSet_addFilterSetEmissionFilterLinkToBothPtr;

class Callback_FilterSet_findFilterSetEmissionFilterLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilterSet_findFilterSetEmissionFilterLink_Base> Callback_FilterSet_findFilterSetEmissionFilterLinkPtr;

class Callback_FilterSet_unlinkEmissionFilter_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilterSet_unlinkEmissionFilter_Base> Callback_FilterSet_unlinkEmissionFilterPtr;

class Callback_FilterSet_removeFilterSetEmissionFilterLinkFromBoth_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilterSet_removeFilterSetEmissionFilterLinkFromBoth_Base> Callback_FilterSet_removeFilterSetEmissionFilterLinkFromBothPtr;

class Callback_FilterSet_linkedEmissionFilterList_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilterSet_linkedEmissionFilterList_Base> Callback_FilterSet_linkedEmissionFilterListPtr;

}

}

namespace IceProxy
{

namespace omero
{

namespace model
{

class FilterSet : virtual public ::IceProxy::omero::model::IObject
{
public:

    ::omero::RIntPtr getVersion()
    {
        return getVersion(0);
    }
    ::omero::RIntPtr getVersion(const ::Ice::Context& __ctx)
    {
        return getVersion(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getVersion(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getVersion(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getVersion(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getVersion(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getVersion(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RIntPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::FilterSetPrx __proxy = ::omero::model::FilterSetPrx::uncheckedCast(__result->getProxy());
                ::omero::RIntPtr __ret;
                try
                {
                    __ret = __proxy->end_getVersion(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RIntPtr&)> _response;
        };
        return begin_getVersion(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getVersion()
    {
        return begin_getVersion(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx)
    {
        return begin_getVersion(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::omero::model::Callback_FilterSet_getVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx, const ::omero::model::Callback_FilterSet_getVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(&__ctx, __del, __cookie);
    }

    ::omero::RIntPtr end_getVersion(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RIntPtr getVersion(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setVersion(const ::omero::RIntPtr& theVersion)
    {
        setVersion(theVersion, 0);
    }
    void setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx)
    {
        setVersion(theVersion, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setVersion(const ::omero::RIntPtr& theVersion, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setVersion(theVersion, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setVersion(const ::omero::RIntPtr& theVersion, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setVersion(theVersion, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setVersion(theVersion, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setVersion(theVersion, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion)
    {
        return begin_setVersion(theVersion, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx)
    {
        return begin_setVersion(theVersion, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::omero::model::Callback_FilterSet_setVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::omero::model::Callback_FilterSet_setVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, &__ctx, __del, __cookie);
    }

    void end_setVersion(const ::Ice::AsyncResultPtr&);
    
private:

    void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getManufacturer()
    {
        return getManufacturer(0);
    }
    ::omero::RStringPtr getManufacturer(const ::Ice::Context& __ctx)
    {
        return getManufacturer(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getManufacturer(const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getManufacturer(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getManufacturer(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getManufacturer(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getManufacturer(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getManufacturer(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getManufacturer(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getManufacturer(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getManufacturer(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RStringPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::FilterSetPrx __proxy = ::omero::model::FilterSetPrx::uncheckedCast(__result->getProxy());
                ::omero::RStringPtr __ret;
                try
                {
                    __ret = __proxy->end_getManufacturer(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RStringPtr&)> _response;
        };
        return begin_getManufacturer(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getManufacturer()
    {
        return begin_getManufacturer(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getManufacturer(const ::Ice::Context& __ctx)
    {
        return begin_getManufacturer(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getManufacturer(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getManufacturer(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getManufacturer(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getManufacturer(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getManufacturer(const ::omero::model::Callback_FilterSet_getManufacturerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getManufacturer(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getManufacturer(const ::Ice::Context& __ctx, const ::omero::model::Callback_FilterSet_getManufacturerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getManufacturer(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getManufacturer(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getManufacturer(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getManufacturer(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setManufacturer(const ::omero::RStringPtr& theManufacturer)
    {
        setManufacturer(theManufacturer, 0);
    }
    void setManufacturer(const ::omero::RStringPtr& theManufacturer, const ::Ice::Context& __ctx)
    {
        setManufacturer(theManufacturer, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setManufacturer(const ::omero::RStringPtr& theManufacturer, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setManufacturer(theManufacturer, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setManufacturer(const ::omero::RStringPtr& theManufacturer, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setManufacturer(theManufacturer, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setManufacturer(const ::omero::RStringPtr& theManufacturer, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setManufacturer(theManufacturer, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setManufacturer(const ::omero::RStringPtr& theManufacturer, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setManufacturer(theManufacturer, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setManufacturer(const ::omero::RStringPtr& theManufacturer)
    {
        return begin_setManufacturer(theManufacturer, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setManufacturer(const ::omero::RStringPtr& theManufacturer, const ::Ice::Context& __ctx)
    {
        return begin_setManufacturer(theManufacturer, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setManufacturer(const ::omero::RStringPtr& theManufacturer, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setManufacturer(theManufacturer, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setManufacturer(const ::omero::RStringPtr& theManufacturer, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setManufacturer(theManufacturer, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setManufacturer(const ::omero::RStringPtr& theManufacturer, const ::omero::model::Callback_FilterSet_setManufacturerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setManufacturer(theManufacturer, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setManufacturer(const ::omero::RStringPtr& theManufacturer, const ::Ice::Context& __ctx, const ::omero::model::Callback_FilterSet_setManufacturerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setManufacturer(theManufacturer, &__ctx, __del, __cookie);
    }

    void end_setManufacturer(const ::Ice::AsyncResultPtr&);
    
private:

    void setManufacturer(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setManufacturer(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getModel()
    {
        return getModel(0);
    }
    ::omero::RStringPtr getModel(const ::Ice::Context& __ctx)
    {
        return getModel(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getModel(const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getModel(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getModel(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getModel(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getModel(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getModel(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getModel(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getModel(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getModel(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RStringPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::FilterSetPrx __proxy = ::omero::model::FilterSetPrx::uncheckedCast(__result->getProxy());
                ::omero::RStringPtr __ret;
                try
                {
                    __ret = __proxy->end_getModel(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RStringPtr&)> _response;
        };
        return begin_getModel(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getModel()
    {
        return begin_getModel(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getModel(const ::Ice::Context& __ctx)
    {
        return begin_getModel(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getModel(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getModel(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getModel(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getModel(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getModel(const ::omero::model::Callback_FilterSet_getModelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getModel(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getModel(const ::Ice::Context& __ctx, const ::omero::model::Callback_FilterSet_getModelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getModel(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getModel(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getModel(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getModel(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setModel(const ::omero::RStringPtr& theModel)
    {
        setModel(theModel, 0);
    }
    void setModel(const ::omero::RStringPtr& theModel, const ::Ice::Context& __ctx)
    {
        setModel(theModel, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setModel(const ::omero::RStringPtr& theModel, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setModel(theModel, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setModel(const ::omero::RStringPtr& theModel, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setModel(theModel, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setModel(const ::omero::RStringPtr& theModel, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setModel(theModel, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setModel(const ::omero::RStringPtr& theModel, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setModel(theModel, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setModel(const ::omero::RStringPtr& theModel)
    {
        return begin_setModel(theModel, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setModel(const ::omero::RStringPtr& theModel, const ::Ice::Context& __ctx)
    {
        return begin_setModel(theModel, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setModel(const ::omero::RStringPtr& theModel, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setModel(theModel, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setModel(const ::omero::RStringPtr& theModel, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setModel(theModel, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setModel(const ::omero::RStringPtr& theModel, const ::omero::model::Callback_FilterSet_setModelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setModel(theModel, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setModel(const ::omero::RStringPtr& theModel, const ::Ice::Context& __ctx, const ::omero::model::Callback_FilterSet_setModelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setModel(theModel, &__ctx, __del, __cookie);
    }

    void end_setModel(const ::Ice::AsyncResultPtr&);
    
private:

    void setModel(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setModel(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getLotNumber()
    {
        return getLotNumber(0);
    }
    ::omero::RStringPtr getLotNumber(const ::Ice::Context& __ctx)
    {
        return getLotNumber(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getLotNumber(const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getLotNumber(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getLotNumber(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getLotNumber(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getLotNumber(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getLotNumber(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getLotNumber(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getLotNumber(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getLotNumber(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RStringPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::FilterSetPrx __proxy = ::omero::model::FilterSetPrx::uncheckedCast(__result->getProxy());
                ::omero::RStringPtr __ret;
                try
                {
                    __ret = __proxy->end_getLotNumber(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RStringPtr&)> _response;
        };
        return begin_getLotNumber(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getLotNumber()
    {
        return begin_getLotNumber(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getLotNumber(const ::Ice::Context& __ctx)
    {
        return begin_getLotNumber(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getLotNumber(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getLotNumber(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getLotNumber(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getLotNumber(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getLotNumber(const ::omero::model::Callback_FilterSet_getLotNumberPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getLotNumber(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getLotNumber(const ::Ice::Context& __ctx, const ::omero::model::Callback_FilterSet_getLotNumberPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getLotNumber(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getLotNumber(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getLotNumber(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getLotNumber(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setLotNumber(const ::omero::RStringPtr& theLotNumber)
    {
        setLotNumber(theLotNumber, 0);
    }
    void setLotNumber(const ::omero::RStringPtr& theLotNumber, const ::Ice::Context& __ctx)
    {
        setLotNumber(theLotNumber, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setLotNumber(const ::omero::RStringPtr& theLotNumber, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setLotNumber(theLotNumber, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setLotNumber(const ::omero::RStringPtr& theLotNumber, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setLotNumber(theLotNumber, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setLotNumber(const ::omero::RStringPtr& theLotNumber, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setLotNumber(theLotNumber, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setLotNumber(const ::omero::RStringPtr& theLotNumber, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setLotNumber(theLotNumber, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setLotNumber(const ::omero::RStringPtr& theLotNumber)
    {
        return begin_setLotNumber(theLotNumber, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setLotNumber(const ::omero::RStringPtr& theLotNumber, const ::Ice::Context& __ctx)
    {
        return begin_setLotNumber(theLotNumber, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setLotNumber(const ::omero::RStringPtr& theLotNumber, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setLotNumber(theLotNumber, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setLotNumber(const ::omero::RStringPtr& theLotNumber, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setLotNumber(theLotNumber, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setLotNumber(const ::omero::RStringPtr& theLotNumber, const ::omero::model::Callback_FilterSet_setLotNumberPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setLotNumber(theLotNumber, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setLotNumber(const ::omero::RStringPtr& theLotNumber, const ::Ice::Context& __ctx, const ::omero::model::Callback_FilterSet_setLotNumberPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setLotNumber(theLotNumber, &__ctx, __del, __cookie);
    }

    void end_setLotNumber(const ::Ice::AsyncResultPtr&);
    
private:

    void setLotNumber(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setLotNumber(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getSerialNumber()
    {
        return getSerialNumber(0);
    }
    ::omero::RStringPtr getSerialNumber(const ::Ice::Context& __ctx)
    {
        return getSerialNumber(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getSerialNumber(const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getSerialNumber(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getSerialNumber(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getSerialNumber(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getSerialNumber(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getSerialNumber(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getSerialNumber(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getSerialNumber(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getSerialNumber(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RStringPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::FilterSetPrx __proxy = ::omero::model::FilterSetPrx::uncheckedCast(__result->getProxy());
                ::omero::RStringPtr __ret;
                try
                {
                    __ret = __proxy->end_getSerialNumber(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RStringPtr&)> _response;
        };
        return begin_getSerialNumber(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getSerialNumber()
    {
        return begin_getSerialNumber(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSerialNumber(const ::Ice::Context& __ctx)
    {
        return begin_getSerialNumber(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSerialNumber(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSerialNumber(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSerialNumber(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSerialNumber(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSerialNumber(const ::omero::model::Callback_FilterSet_getSerialNumberPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSerialNumber(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSerialNumber(const ::Ice::Context& __ctx, const ::omero::model::Callback_FilterSet_getSerialNumberPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSerialNumber(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getSerialNumber(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getSerialNumber(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getSerialNumber(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setSerialNumber(const ::omero::RStringPtr& theSerialNumber)
    {
        setSerialNumber(theSerialNumber, 0);
    }
    void setSerialNumber(const ::omero::RStringPtr& theSerialNumber, const ::Ice::Context& __ctx)
    {
        setSerialNumber(theSerialNumber, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setSerialNumber(const ::omero::RStringPtr& theSerialNumber, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setSerialNumber(theSerialNumber, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setSerialNumber(const ::omero::RStringPtr& theSerialNumber, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setSerialNumber(theSerialNumber, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setSerialNumber(const ::omero::RStringPtr& theSerialNumber, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setSerialNumber(theSerialNumber, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setSerialNumber(const ::omero::RStringPtr& theSerialNumber, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setSerialNumber(theSerialNumber, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setSerialNumber(const ::omero::RStringPtr& theSerialNumber)
    {
        return begin_setSerialNumber(theSerialNumber, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setSerialNumber(const ::omero::RStringPtr& theSerialNumber, const ::Ice::Context& __ctx)
    {
        return begin_setSerialNumber(theSerialNumber, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setSerialNumber(const ::omero::RStringPtr& theSerialNumber, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSerialNumber(theSerialNumber, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSerialNumber(const ::omero::RStringPtr& theSerialNumber, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSerialNumber(theSerialNumber, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSerialNumber(const ::omero::RStringPtr& theSerialNumber, const ::omero::model::Callback_FilterSet_setSerialNumberPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSerialNumber(theSerialNumber, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSerialNumber(const ::omero::RStringPtr& theSerialNumber, const ::Ice::Context& __ctx, const ::omero::model::Callback_FilterSet_setSerialNumberPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSerialNumber(theSerialNumber, &__ctx, __del, __cookie);
    }

    void end_setSerialNumber(const ::Ice::AsyncResultPtr&);
    
private:

    void setSerialNumber(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setSerialNumber(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::InstrumentPtr getInstrument()
    {
        return getInstrument(0);
    }
    ::omero::model::InstrumentPtr getInstrument(const ::Ice::Context& __ctx)
    {
        return getInstrument(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getInstrument(const ::IceInternal::Function<void (const ::omero::model::InstrumentPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getInstrument(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getInstrument(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getInstrument(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getInstrument(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::InstrumentPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getInstrument(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getInstrument(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getInstrument(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getInstrument(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::InstrumentPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::InstrumentPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::FilterSetPrx __proxy = ::omero::model::FilterSetPrx::uncheckedCast(__result->getProxy());
                ::omero::model::InstrumentPtr __ret;
                try
                {
                    __ret = __proxy->end_getInstrument(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::InstrumentPtr&)> _response;
        };
        return begin_getInstrument(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getInstrument()
    {
        return begin_getInstrument(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getInstrument(const ::Ice::Context& __ctx)
    {
        return begin_getInstrument(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getInstrument(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getInstrument(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getInstrument(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getInstrument(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getInstrument(const ::omero::model::Callback_FilterSet_getInstrumentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getInstrument(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getInstrument(const ::Ice::Context& __ctx, const ::omero::model::Callback_FilterSet_getInstrumentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getInstrument(&__ctx, __del, __cookie);
    }

    ::omero::model::InstrumentPtr end_getInstrument(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::InstrumentPtr getInstrument(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getInstrument(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setInstrument(const ::omero::model::InstrumentPtr& theInstrument)
    {
        setInstrument(theInstrument, 0);
    }
    void setInstrument(const ::omero::model::InstrumentPtr& theInstrument, const ::Ice::Context& __ctx)
    {
        setInstrument(theInstrument, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setInstrument(const ::omero::model::InstrumentPtr& theInstrument, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setInstrument(theInstrument, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setInstrument(const ::omero::model::InstrumentPtr& theInstrument, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setInstrument(theInstrument, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setInstrument(const ::omero::model::InstrumentPtr& theInstrument, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setInstrument(theInstrument, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setInstrument(const ::omero::model::InstrumentPtr& theInstrument, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setInstrument(theInstrument, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setInstrument(const ::omero::model::InstrumentPtr& theInstrument)
    {
        return begin_setInstrument(theInstrument, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setInstrument(const ::omero::model::InstrumentPtr& theInstrument, const ::Ice::Context& __ctx)
    {
        return begin_setInstrument(theInstrument, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setInstrument(const ::omero::model::InstrumentPtr& theInstrument, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setInstrument(theInstrument, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setInstrument(const ::omero::model::InstrumentPtr& theInstrument, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setInstrument(theInstrument, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setInstrument(const ::omero::model::InstrumentPtr& theInstrument, const ::omero::model::Callback_FilterSet_setInstrumentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setInstrument(theInstrument, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setInstrument(const ::omero::model::InstrumentPtr& theInstrument, const ::Ice::Context& __ctx, const ::omero::model::Callback_FilterSet_setInstrumentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setInstrument(theInstrument, &__ctx, __del, __cookie);
    }

    void end_setInstrument(const ::Ice::AsyncResultPtr&);
    
private:

    void setInstrument(const ::omero::model::InstrumentPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setInstrument(const ::omero::model::InstrumentPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unloadExcitationFilterLink()
    {
        unloadExcitationFilterLink(0);
    }
    void unloadExcitationFilterLink(const ::Ice::Context& __ctx)
    {
        unloadExcitationFilterLink(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_unloadExcitationFilterLink(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unloadExcitationFilterLink(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_unloadExcitationFilterLink(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unloadExcitationFilterLink(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unloadExcitationFilterLink(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unloadExcitationFilterLink(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unloadExcitationFilterLink(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unloadExcitationFilterLink(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_unloadExcitationFilterLink()
    {
        return begin_unloadExcitationFilterLink(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadExcitationFilterLink(const ::Ice::Context& __ctx)
    {
        return begin_unloadExcitationFilterLink(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadExcitationFilterLink(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadExcitationFilterLink(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadExcitationFilterLink(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadExcitationFilterLink(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadExcitationFilterLink(const ::omero::model::Callback_FilterSet_unloadExcitationFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadExcitationFilterLink(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadExcitationFilterLink(const ::Ice::Context& __ctx, const ::omero::model::Callback_FilterSet_unloadExcitationFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadExcitationFilterLink(&__ctx, __del, __cookie);
    }

    void end_unloadExcitationFilterLink(const ::Ice::AsyncResultPtr&);
    
private:

    void unloadExcitationFilterLink(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unloadExcitationFilterLink(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int sizeOfExcitationFilterLink()
    {
        return sizeOfExcitationFilterLink(0);
    }
    ::Ice::Int sizeOfExcitationFilterLink(const ::Ice::Context& __ctx)
    {
        return sizeOfExcitationFilterLink(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_sizeOfExcitationFilterLink(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sizeOfExcitationFilterLink(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfExcitationFilterLink(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sizeOfExcitationFilterLink(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfExcitationFilterLink(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sizeOfExcitationFilterLink(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfExcitationFilterLink(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sizeOfExcitationFilterLink(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_sizeOfExcitationFilterLink(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::FilterSetPrx __proxy = ::omero::model::FilterSetPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_sizeOfExcitationFilterLink(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_sizeOfExcitationFilterLink(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_sizeOfExcitationFilterLink()
    {
        return begin_sizeOfExcitationFilterLink(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfExcitationFilterLink(const ::Ice::Context& __ctx)
    {
        return begin_sizeOfExcitationFilterLink(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfExcitationFilterLink(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfExcitationFilterLink(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfExcitationFilterLink(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfExcitationFilterLink(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfExcitationFilterLink(const ::omero::model::Callback_FilterSet_sizeOfExcitationFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfExcitationFilterLink(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfExcitationFilterLink(const ::Ice::Context& __ctx, const ::omero::model::Callback_FilterSet_sizeOfExcitationFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfExcitationFilterLink(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_sizeOfExcitationFilterLink(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int sizeOfExcitationFilterLink(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sizeOfExcitationFilterLink(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::FilterSetExcitationFilterLinkSeq copyExcitationFilterLink()
    {
        return copyExcitationFilterLink(0);
    }
    ::omero::model::FilterSetExcitationFilterLinkSeq copyExcitationFilterLink(const ::Ice::Context& __ctx)
    {
        return copyExcitationFilterLink(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_copyExcitationFilterLink(const ::IceInternal::Function<void (const ::omero::model::FilterSetExcitationFilterLinkSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_copyExcitationFilterLink(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_copyExcitationFilterLink(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_copyExcitationFilterLink(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_copyExcitationFilterLink(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::FilterSetExcitationFilterLinkSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_copyExcitationFilterLink(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_copyExcitationFilterLink(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_copyExcitationFilterLink(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_copyExcitationFilterLink(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::FilterSetExcitationFilterLinkSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::FilterSetExcitationFilterLinkSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::FilterSetPrx __proxy = ::omero::model::FilterSetPrx::uncheckedCast(__result->getProxy());
                ::omero::model::FilterSetExcitationFilterLinkSeq __ret;
                try
                {
                    __ret = __proxy->end_copyExcitationFilterLink(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::FilterSetExcitationFilterLinkSeq&)> _response;
        };
        return begin_copyExcitationFilterLink(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_copyExcitationFilterLink()
    {
        return begin_copyExcitationFilterLink(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyExcitationFilterLink(const ::Ice::Context& __ctx)
    {
        return begin_copyExcitationFilterLink(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyExcitationFilterLink(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyExcitationFilterLink(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyExcitationFilterLink(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyExcitationFilterLink(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyExcitationFilterLink(const ::omero::model::Callback_FilterSet_copyExcitationFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyExcitationFilterLink(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyExcitationFilterLink(const ::Ice::Context& __ctx, const ::omero::model::Callback_FilterSet_copyExcitationFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyExcitationFilterLink(&__ctx, __del, __cookie);
    }

    ::omero::model::FilterSetExcitationFilterLinkSeq end_copyExcitationFilterLink(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::FilterSetExcitationFilterLinkSeq copyExcitationFilterLink(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_copyExcitationFilterLink(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addFilterSetExcitationFilterLink(const ::omero::model::FilterSetExcitationFilterLinkPtr& target)
    {
        addFilterSetExcitationFilterLink(target, 0);
    }
    void addFilterSetExcitationFilterLink(const ::omero::model::FilterSetExcitationFilterLinkPtr& target, const ::Ice::Context& __ctx)
    {
        addFilterSetExcitationFilterLink(target, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addFilterSetExcitationFilterLink(const ::omero::model::FilterSetExcitationFilterLinkPtr& target, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addFilterSetExcitationFilterLink(target, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addFilterSetExcitationFilterLink(const ::omero::model::FilterSetExcitationFilterLinkPtr& target, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addFilterSetExcitationFilterLink(target, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addFilterSetExcitationFilterLink(const ::omero::model::FilterSetExcitationFilterLinkPtr& target, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addFilterSetExcitationFilterLink(target, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addFilterSetExcitationFilterLink(const ::omero::model::FilterSetExcitationFilterLinkPtr& target, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addFilterSetExcitationFilterLink(target, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addFilterSetExcitationFilterLink(const ::omero::model::FilterSetExcitationFilterLinkPtr& target)
    {
        return begin_addFilterSetExcitationFilterLink(target, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addFilterSetExcitationFilterLink(const ::omero::model::FilterSetExcitationFilterLinkPtr& target, const ::Ice::Context& __ctx)
    {
        return begin_addFilterSetExcitationFilterLink(target, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addFilterSetExcitationFilterLink(const ::omero::model::FilterSetExcitationFilterLinkPtr& target, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addFilterSetExcitationFilterLink(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addFilterSetExcitationFilterLink(const ::omero::model::FilterSetExcitationFilterLinkPtr& target, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addFilterSetExcitationFilterLink(target, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addFilterSetExcitationFilterLink(const ::omero::model::FilterSetExcitationFilterLinkPtr& target, const ::omero::model::Callback_FilterSet_addFilterSetExcitationFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addFilterSetExcitationFilterLink(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addFilterSetExcitationFilterLink(const ::omero::model::FilterSetExcitationFilterLinkPtr& target, const ::Ice::Context& __ctx, const ::omero::model::Callback_FilterSet_addFilterSetExcitationFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addFilterSetExcitationFilterLink(target, &__ctx, __del, __cookie);
    }

    void end_addFilterSetExcitationFilterLink(const ::Ice::AsyncResultPtr&);
    
private:

    void addFilterSetExcitationFilterLink(const ::omero::model::FilterSetExcitationFilterLinkPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addFilterSetExcitationFilterLink(const ::omero::model::FilterSetExcitationFilterLinkPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addAllFilterSetExcitationFilterLinkSet(const ::omero::model::FilterSetExcitationFilterLinkSeq& targets)
    {
        addAllFilterSetExcitationFilterLinkSet(targets, 0);
    }
    void addAllFilterSetExcitationFilterLinkSet(const ::omero::model::FilterSetExcitationFilterLinkSeq& targets, const ::Ice::Context& __ctx)
    {
        addAllFilterSetExcitationFilterLinkSet(targets, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addAllFilterSetExcitationFilterLinkSet(const ::omero::model::FilterSetExcitationFilterLinkSeq& targets, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addAllFilterSetExcitationFilterLinkSet(targets, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addAllFilterSetExcitationFilterLinkSet(const ::omero::model::FilterSetExcitationFilterLinkSeq& targets, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addAllFilterSetExcitationFilterLinkSet(targets, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addAllFilterSetExcitationFilterLinkSet(const ::omero::model::FilterSetExcitationFilterLinkSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addAllFilterSetExcitationFilterLinkSet(targets, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addAllFilterSetExcitationFilterLinkSet(const ::omero::model::FilterSetExcitationFilterLinkSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addAllFilterSetExcitationFilterLinkSet(targets, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addAllFilterSetExcitationFilterLinkSet(const ::omero::model::FilterSetExcitationFilterLinkSeq& targets)
    {
        return begin_addAllFilterSetExcitationFilterLinkSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllFilterSetExcitationFilterLinkSet(const ::omero::model::FilterSetExcitationFilterLinkSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_addAllFilterSetExcitationFilterLinkSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllFilterSetExcitationFilterLinkSet(const ::omero::model::FilterSetExcitationFilterLinkSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllFilterSetExcitationFilterLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllFilterSetExcitationFilterLinkSet(const ::omero::model::FilterSetExcitationFilterLinkSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllFilterSetExcitationFilterLinkSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllFilterSetExcitationFilterLinkSet(const ::omero::model::FilterSetExcitationFilterLinkSeq& targets, const ::omero::model::Callback_FilterSet_addAllFilterSetExcitationFilterLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllFilterSetExcitationFilterLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllFilterSetExcitationFilterLinkSet(const ::omero::model::FilterSetExcitationFilterLinkSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_FilterSet_addAllFilterSetExcitationFilterLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllFilterSetExcitationFilterLinkSet(targets, &__ctx, __del, __cookie);
    }

    void end_addAllFilterSetExcitationFilterLinkSet(const ::Ice::AsyncResultPtr&);
    
private:

    void addAllFilterSetExcitationFilterLinkSet(const ::omero::model::FilterSetExcitationFilterLinkSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addAllFilterSetExcitationFilterLinkSet(const ::omero::model::FilterSetExcitationFilterLinkSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeFilterSetExcitationFilterLink(const ::omero::model::FilterSetExcitationFilterLinkPtr& theTarget)
    {
        removeFilterSetExcitationFilterLink(theTarget, 0);
    }
    void removeFilterSetExcitationFilterLink(const ::omero::model::FilterSetExcitationFilterLinkPtr& theTarget, const ::Ice::Context& __ctx)
    {
        removeFilterSetExcitationFilterLink(theTarget, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeFilterSetExcitationFilterLink(const ::omero::model::FilterSetExcitationFilterLinkPtr& theTarget, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeFilterSetExcitationFilterLink(theTarget, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeFilterSetExcitationFilterLink(const ::omero::model::FilterSetExcitationFilterLinkPtr& theTarget, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeFilterSetExcitationFilterLink(theTarget, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeFilterSetExcitationFilterLink(const ::omero::model::FilterSetExcitationFilterLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeFilterSetExcitationFilterLink(theTarget, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeFilterSetExcitationFilterLink(const ::omero::model::FilterSetExcitationFilterLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeFilterSetExcitationFilterLink(theTarget, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeFilterSetExcitationFilterLink(const ::omero::model::FilterSetExcitationFilterLinkPtr& theTarget)
    {
        return begin_removeFilterSetExcitationFilterLink(theTarget, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeFilterSetExcitationFilterLink(const ::omero::model::FilterSetExcitationFilterLinkPtr& theTarget, const ::Ice::Context& __ctx)
    {
        return begin_removeFilterSetExcitationFilterLink(theTarget, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeFilterSetExcitationFilterLink(const ::omero::model::FilterSetExcitationFilterLinkPtr& theTarget, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeFilterSetExcitationFilterLink(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeFilterSetExcitationFilterLink(const ::omero::model::FilterSetExcitationFilterLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeFilterSetExcitationFilterLink(theTarget, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeFilterSetExcitationFilterLink(const ::omero::model::FilterSetExcitationFilterLinkPtr& theTarget, const ::omero::model::Callback_FilterSet_removeFilterSetExcitationFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeFilterSetExcitationFilterLink(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeFilterSetExcitationFilterLink(const ::omero::model::FilterSetExcitationFilterLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::omero::model::Callback_FilterSet_removeFilterSetExcitationFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeFilterSetExcitationFilterLink(theTarget, &__ctx, __del, __cookie);
    }

    void end_removeFilterSetExcitationFilterLink(const ::Ice::AsyncResultPtr&);
    
private:

    void removeFilterSetExcitationFilterLink(const ::omero::model::FilterSetExcitationFilterLinkPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeFilterSetExcitationFilterLink(const ::omero::model::FilterSetExcitationFilterLinkPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeAllFilterSetExcitationFilterLinkSet(const ::omero::model::FilterSetExcitationFilterLinkSeq& targets)
    {
        removeAllFilterSetExcitationFilterLinkSet(targets, 0);
    }
    void removeAllFilterSetExcitationFilterLinkSet(const ::omero::model::FilterSetExcitationFilterLinkSeq& targets, const ::Ice::Context& __ctx)
    {
        removeAllFilterSetExcitationFilterLinkSet(targets, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeAllFilterSetExcitationFilterLinkSet(const ::omero::model::FilterSetExcitationFilterLinkSeq& targets, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeAllFilterSetExcitationFilterLinkSet(targets, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeAllFilterSetExcitationFilterLinkSet(const ::omero::model::FilterSetExcitationFilterLinkSeq& targets, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeAllFilterSetExcitationFilterLinkSet(targets, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeAllFilterSetExcitationFilterLinkSet(const ::omero::model::FilterSetExcitationFilterLinkSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeAllFilterSetExcitationFilterLinkSet(targets, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeAllFilterSetExcitationFilterLinkSet(const ::omero::model::FilterSetExcitationFilterLinkSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeAllFilterSetExcitationFilterLinkSet(targets, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeAllFilterSetExcitationFilterLinkSet(const ::omero::model::FilterSetExcitationFilterLinkSeq& targets)
    {
        return begin_removeAllFilterSetExcitationFilterLinkSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllFilterSetExcitationFilterLinkSet(const ::omero::model::FilterSetExcitationFilterLinkSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_removeAllFilterSetExcitationFilterLinkSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllFilterSetExcitationFilterLinkSet(const ::omero::model::FilterSetExcitationFilterLinkSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllFilterSetExcitationFilterLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllFilterSetExcitationFilterLinkSet(const ::omero::model::FilterSetExcitationFilterLinkSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllFilterSetExcitationFilterLinkSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllFilterSetExcitationFilterLinkSet(const ::omero::model::FilterSetExcitationFilterLinkSeq& targets, const ::omero::model::Callback_FilterSet_removeAllFilterSetExcitationFilterLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllFilterSetExcitationFilterLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllFilterSetExcitationFilterLinkSet(const ::omero::model::FilterSetExcitationFilterLinkSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_FilterSet_removeAllFilterSetExcitationFilterLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllFilterSetExcitationFilterLinkSet(targets, &__ctx, __del, __cookie);
    }

    void end_removeAllFilterSetExcitationFilterLinkSet(const ::Ice::AsyncResultPtr&);
    
private:

    void removeAllFilterSetExcitationFilterLinkSet(const ::omero::model::FilterSetExcitationFilterLinkSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeAllFilterSetExcitationFilterLinkSet(const ::omero::model::FilterSetExcitationFilterLinkSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void clearExcitationFilterLink()
    {
        clearExcitationFilterLink(0);
    }
    void clearExcitationFilterLink(const ::Ice::Context& __ctx)
    {
        clearExcitationFilterLink(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_clearExcitationFilterLink(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_clearExcitationFilterLink(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_clearExcitationFilterLink(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_clearExcitationFilterLink(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_clearExcitationFilterLink(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_clearExcitationFilterLink(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_clearExcitationFilterLink(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_clearExcitationFilterLink(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_clearExcitationFilterLink()
    {
        return begin_clearExcitationFilterLink(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearExcitationFilterLink(const ::Ice::Context& __ctx)
    {
        return begin_clearExcitationFilterLink(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearExcitationFilterLink(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearExcitationFilterLink(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearExcitationFilterLink(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearExcitationFilterLink(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearExcitationFilterLink(const ::omero::model::Callback_FilterSet_clearExcitationFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearExcitationFilterLink(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearExcitationFilterLink(const ::Ice::Context& __ctx, const ::omero::model::Callback_FilterSet_clearExcitationFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearExcitationFilterLink(&__ctx, __del, __cookie);
    }

    void end_clearExcitationFilterLink(const ::Ice::AsyncResultPtr&);
    
private:

    void clearExcitationFilterLink(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_clearExcitationFilterLink(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reloadExcitationFilterLink(const ::omero::model::FilterSetPtr& toCopy)
    {
        reloadExcitationFilterLink(toCopy, 0);
    }
    void reloadExcitationFilterLink(const ::omero::model::FilterSetPtr& toCopy, const ::Ice::Context& __ctx)
    {
        reloadExcitationFilterLink(toCopy, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_reloadExcitationFilterLink(const ::omero::model::FilterSetPtr& toCopy, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reloadExcitationFilterLink(toCopy, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_reloadExcitationFilterLink(const ::omero::model::FilterSetPtr& toCopy, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reloadExcitationFilterLink(toCopy, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reloadExcitationFilterLink(const ::omero::model::FilterSetPtr& toCopy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reloadExcitationFilterLink(toCopy, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reloadExcitationFilterLink(const ::omero::model::FilterSetPtr& toCopy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reloadExcitationFilterLink(toCopy, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_reloadExcitationFilterLink(const ::omero::model::FilterSetPtr& toCopy)
    {
        return begin_reloadExcitationFilterLink(toCopy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadExcitationFilterLink(const ::omero::model::FilterSetPtr& toCopy, const ::Ice::Context& __ctx)
    {
        return begin_reloadExcitationFilterLink(toCopy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadExcitationFilterLink(const ::omero::model::FilterSetPtr& toCopy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadExcitationFilterLink(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadExcitationFilterLink(const ::omero::model::FilterSetPtr& toCopy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadExcitationFilterLink(toCopy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadExcitationFilterLink(const ::omero::model::FilterSetPtr& toCopy, const ::omero::model::Callback_FilterSet_reloadExcitationFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadExcitationFilterLink(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadExcitationFilterLink(const ::omero::model::FilterSetPtr& toCopy, const ::Ice::Context& __ctx, const ::omero::model::Callback_FilterSet_reloadExcitationFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadExcitationFilterLink(toCopy, &__ctx, __del, __cookie);
    }

    void end_reloadExcitationFilterLink(const ::Ice::AsyncResultPtr&);
    
private:

    void reloadExcitationFilterLink(const ::omero::model::FilterSetPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reloadExcitationFilterLink(const ::omero::model::FilterSetPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::sys::CountMap getExcitationFilterLinkCountPerOwner()
    {
        return getExcitationFilterLinkCountPerOwner(0);
    }
    ::omero::sys::CountMap getExcitationFilterLinkCountPerOwner(const ::Ice::Context& __ctx)
    {
        return getExcitationFilterLinkCountPerOwner(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getExcitationFilterLinkCountPerOwner(const ::IceInternal::Function<void (const ::omero::sys::CountMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getExcitationFilterLinkCountPerOwner(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getExcitationFilterLinkCountPerOwner(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getExcitationFilterLinkCountPerOwner(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getExcitationFilterLinkCountPerOwner(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::sys::CountMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getExcitationFilterLinkCountPerOwner(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getExcitationFilterLinkCountPerOwner(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getExcitationFilterLinkCountPerOwner(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getExcitationFilterLinkCountPerOwner(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::sys::CountMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::sys::CountMap&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::FilterSetPrx __proxy = ::omero::model::FilterSetPrx::uncheckedCast(__result->getProxy());
                ::omero::sys::CountMap __ret;
                try
                {
                    __ret = __proxy->end_getExcitationFilterLinkCountPerOwner(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::sys::CountMap&)> _response;
        };
        return begin_getExcitationFilterLinkCountPerOwner(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getExcitationFilterLinkCountPerOwner()
    {
        return begin_getExcitationFilterLinkCountPerOwner(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getExcitationFilterLinkCountPerOwner(const ::Ice::Context& __ctx)
    {
        return begin_getExcitationFilterLinkCountPerOwner(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getExcitationFilterLinkCountPerOwner(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getExcitationFilterLinkCountPerOwner(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getExcitationFilterLinkCountPerOwner(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getExcitationFilterLinkCountPerOwner(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getExcitationFilterLinkCountPerOwner(const ::omero::model::Callback_FilterSet_getExcitationFilterLinkCountPerOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getExcitationFilterLinkCountPerOwner(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getExcitationFilterLinkCountPerOwner(const ::Ice::Context& __ctx, const ::omero::model::Callback_FilterSet_getExcitationFilterLinkCountPerOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getExcitationFilterLinkCountPerOwner(&__ctx, __del, __cookie);
    }

    ::omero::sys::CountMap end_getExcitationFilterLinkCountPerOwner(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::sys::CountMap getExcitationFilterLinkCountPerOwner(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getExcitationFilterLinkCountPerOwner(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::FilterSetExcitationFilterLinkPtr linkExcitationFilter(const ::omero::model::FilterPtr& addition)
    {
        return linkExcitationFilter(addition, 0);
    }
    ::omero::model::FilterSetExcitationFilterLinkPtr linkExcitationFilter(const ::omero::model::FilterPtr& addition, const ::Ice::Context& __ctx)
    {
        return linkExcitationFilter(addition, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_linkExcitationFilter(const ::omero::model::FilterPtr& addition, const ::IceInternal::Function<void (const ::omero::model::FilterSetExcitationFilterLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_linkExcitationFilter(addition, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_linkExcitationFilter(const ::omero::model::FilterPtr& addition, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_linkExcitationFilter(addition, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_linkExcitationFilter(const ::omero::model::FilterPtr& addition, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::FilterSetExcitationFilterLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_linkExcitationFilter(addition, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_linkExcitationFilter(const ::omero::model::FilterPtr& addition, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_linkExcitationFilter(addition, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_linkExcitationFilter(const ::omero::model::FilterPtr& addition, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::FilterSetExcitationFilterLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::FilterSetExcitationFilterLinkPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::FilterSetPrx __proxy = ::omero::model::FilterSetPrx::uncheckedCast(__result->getProxy());
                ::omero::model::FilterSetExcitationFilterLinkPtr __ret;
                try
                {
                    __ret = __proxy->end_linkExcitationFilter(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::FilterSetExcitationFilterLinkPtr&)> _response;
        };
        return begin_linkExcitationFilter(addition, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_linkExcitationFilter(const ::omero::model::FilterPtr& addition)
    {
        return begin_linkExcitationFilter(addition, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkExcitationFilter(const ::omero::model::FilterPtr& addition, const ::Ice::Context& __ctx)
    {
        return begin_linkExcitationFilter(addition, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkExcitationFilter(const ::omero::model::FilterPtr& addition, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkExcitationFilter(addition, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkExcitationFilter(const ::omero::model::FilterPtr& addition, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkExcitationFilter(addition, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkExcitationFilter(const ::omero::model::FilterPtr& addition, const ::omero::model::Callback_FilterSet_linkExcitationFilterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkExcitationFilter(addition, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkExcitationFilter(const ::omero::model::FilterPtr& addition, const ::Ice::Context& __ctx, const ::omero::model::Callback_FilterSet_linkExcitationFilterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkExcitationFilter(addition, &__ctx, __del, __cookie);
    }

    ::omero::model::FilterSetExcitationFilterLinkPtr end_linkExcitationFilter(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::FilterSetExcitationFilterLinkPtr linkExcitationFilter(const ::omero::model::FilterPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_linkExcitationFilter(const ::omero::model::FilterPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addFilterSetExcitationFilterLinkToBoth(const ::omero::model::FilterSetExcitationFilterLinkPtr& link, bool bothSides)
    {
        addFilterSetExcitationFilterLinkToBoth(link, bothSides, 0);
    }
    void addFilterSetExcitationFilterLinkToBoth(const ::omero::model::FilterSetExcitationFilterLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        addFilterSetExcitationFilterLinkToBoth(link, bothSides, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addFilterSetExcitationFilterLinkToBoth(const ::omero::model::FilterSetExcitationFilterLinkPtr& link, bool bothSides, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addFilterSetExcitationFilterLinkToBoth(link, bothSides, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addFilterSetExcitationFilterLinkToBoth(const ::omero::model::FilterSetExcitationFilterLinkPtr& link, bool bothSides, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addFilterSetExcitationFilterLinkToBoth(link, bothSides, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addFilterSetExcitationFilterLinkToBoth(const ::omero::model::FilterSetExcitationFilterLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addFilterSetExcitationFilterLinkToBoth(link, bothSides, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addFilterSetExcitationFilterLinkToBoth(const ::omero::model::FilterSetExcitationFilterLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addFilterSetExcitationFilterLinkToBoth(link, bothSides, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addFilterSetExcitationFilterLinkToBoth(const ::omero::model::FilterSetExcitationFilterLinkPtr& link, bool bothSides)
    {
        return begin_addFilterSetExcitationFilterLinkToBoth(link, bothSides, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addFilterSetExcitationFilterLinkToBoth(const ::omero::model::FilterSetExcitationFilterLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        return begin_addFilterSetExcitationFilterLinkToBoth(link, bothSides, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addFilterSetExcitationFilterLinkToBoth(const ::omero::model::FilterSetExcitationFilterLinkPtr& link, bool bothSides, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addFilterSetExcitationFilterLinkToBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addFilterSetExcitationFilterLinkToBoth(const ::omero::model::FilterSetExcitationFilterLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addFilterSetExcitationFilterLinkToBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addFilterSetExcitationFilterLinkToBoth(const ::omero::model::FilterSetExcitationFilterLinkPtr& link, bool bothSides, const ::omero::model::Callback_FilterSet_addFilterSetExcitationFilterLinkToBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addFilterSetExcitationFilterLinkToBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addFilterSetExcitationFilterLinkToBoth(const ::omero::model::FilterSetExcitationFilterLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::omero::model::Callback_FilterSet_addFilterSetExcitationFilterLinkToBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addFilterSetExcitationFilterLinkToBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    void end_addFilterSetExcitationFilterLinkToBoth(const ::Ice::AsyncResultPtr&);
    
private:

    void addFilterSetExcitationFilterLinkToBoth(const ::omero::model::FilterSetExcitationFilterLinkPtr&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addFilterSetExcitationFilterLinkToBoth(const ::omero::model::FilterSetExcitationFilterLinkPtr&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::FilterSetExcitationFilterLinkSeq findFilterSetExcitationFilterLink(const ::omero::model::FilterPtr& removal)
    {
        return findFilterSetExcitationFilterLink(removal, 0);
    }
    ::omero::model::FilterSetExcitationFilterLinkSeq findFilterSetExcitationFilterLink(const ::omero::model::FilterPtr& removal, const ::Ice::Context& __ctx)
    {
        return findFilterSetExcitationFilterLink(removal, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_findFilterSetExcitationFilterLink(const ::omero::model::FilterPtr& removal, const ::IceInternal::Function<void (const ::omero::model::FilterSetExcitationFilterLinkSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_findFilterSetExcitationFilterLink(removal, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_findFilterSetExcitationFilterLink(const ::omero::model::FilterPtr& removal, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_findFilterSetExcitationFilterLink(removal, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_findFilterSetExcitationFilterLink(const ::omero::model::FilterPtr& removal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::FilterSetExcitationFilterLinkSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_findFilterSetExcitationFilterLink(removal, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_findFilterSetExcitationFilterLink(const ::omero::model::FilterPtr& removal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_findFilterSetExcitationFilterLink(removal, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_findFilterSetExcitationFilterLink(const ::omero::model::FilterPtr& removal, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::FilterSetExcitationFilterLinkSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::FilterSetExcitationFilterLinkSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::FilterSetPrx __proxy = ::omero::model::FilterSetPrx::uncheckedCast(__result->getProxy());
                ::omero::model::FilterSetExcitationFilterLinkSeq __ret;
                try
                {
                    __ret = __proxy->end_findFilterSetExcitationFilterLink(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::FilterSetExcitationFilterLinkSeq&)> _response;
        };
        return begin_findFilterSetExcitationFilterLink(removal, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_findFilterSetExcitationFilterLink(const ::omero::model::FilterPtr& removal)
    {
        return begin_findFilterSetExcitationFilterLink(removal, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findFilterSetExcitationFilterLink(const ::omero::model::FilterPtr& removal, const ::Ice::Context& __ctx)
    {
        return begin_findFilterSetExcitationFilterLink(removal, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findFilterSetExcitationFilterLink(const ::omero::model::FilterPtr& removal, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findFilterSetExcitationFilterLink(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findFilterSetExcitationFilterLink(const ::omero::model::FilterPtr& removal, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findFilterSetExcitationFilterLink(removal, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findFilterSetExcitationFilterLink(const ::omero::model::FilterPtr& removal, const ::omero::model::Callback_FilterSet_findFilterSetExcitationFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findFilterSetExcitationFilterLink(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findFilterSetExcitationFilterLink(const ::omero::model::FilterPtr& removal, const ::Ice::Context& __ctx, const ::omero::model::Callback_FilterSet_findFilterSetExcitationFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findFilterSetExcitationFilterLink(removal, &__ctx, __del, __cookie);
    }

    ::omero::model::FilterSetExcitationFilterLinkSeq end_findFilterSetExcitationFilterLink(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::FilterSetExcitationFilterLinkSeq findFilterSetExcitationFilterLink(const ::omero::model::FilterPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_findFilterSetExcitationFilterLink(const ::omero::model::FilterPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unlinkExcitationFilter(const ::omero::model::FilterPtr& removal)
    {
        unlinkExcitationFilter(removal, 0);
    }
    void unlinkExcitationFilter(const ::omero::model::FilterPtr& removal, const ::Ice::Context& __ctx)
    {
        unlinkExcitationFilter(removal, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_unlinkExcitationFilter(const ::omero::model::FilterPtr& removal, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unlinkExcitationFilter(removal, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_unlinkExcitationFilter(const ::omero::model::FilterPtr& removal, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unlinkExcitationFilter(removal, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unlinkExcitationFilter(const ::omero::model::FilterPtr& removal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unlinkExcitationFilter(removal, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unlinkExcitationFilter(const ::omero::model::FilterPtr& removal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unlinkExcitationFilter(removal, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_unlinkExcitationFilter(const ::omero::model::FilterPtr& removal)
    {
        return begin_unlinkExcitationFilter(removal, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unlinkExcitationFilter(const ::omero::model::FilterPtr& removal, const ::Ice::Context& __ctx)
    {
        return begin_unlinkExcitationFilter(removal, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unlinkExcitationFilter(const ::omero::model::FilterPtr& removal, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkExcitationFilter(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkExcitationFilter(const ::omero::model::FilterPtr& removal, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkExcitationFilter(removal, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkExcitationFilter(const ::omero::model::FilterPtr& removal, const ::omero::model::Callback_FilterSet_unlinkExcitationFilterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkExcitationFilter(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkExcitationFilter(const ::omero::model::FilterPtr& removal, const ::Ice::Context& __ctx, const ::omero::model::Callback_FilterSet_unlinkExcitationFilterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkExcitationFilter(removal, &__ctx, __del, __cookie);
    }

    void end_unlinkExcitationFilter(const ::Ice::AsyncResultPtr&);
    
private:

    void unlinkExcitationFilter(const ::omero::model::FilterPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unlinkExcitationFilter(const ::omero::model::FilterPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeFilterSetExcitationFilterLinkFromBoth(const ::omero::model::FilterSetExcitationFilterLinkPtr& link, bool bothSides)
    {
        removeFilterSetExcitationFilterLinkFromBoth(link, bothSides, 0);
    }
    void removeFilterSetExcitationFilterLinkFromBoth(const ::omero::model::FilterSetExcitationFilterLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        removeFilterSetExcitationFilterLinkFromBoth(link, bothSides, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeFilterSetExcitationFilterLinkFromBoth(const ::omero::model::FilterSetExcitationFilterLinkPtr& link, bool bothSides, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeFilterSetExcitationFilterLinkFromBoth(link, bothSides, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeFilterSetExcitationFilterLinkFromBoth(const ::omero::model::FilterSetExcitationFilterLinkPtr& link, bool bothSides, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeFilterSetExcitationFilterLinkFromBoth(link, bothSides, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeFilterSetExcitationFilterLinkFromBoth(const ::omero::model::FilterSetExcitationFilterLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeFilterSetExcitationFilterLinkFromBoth(link, bothSides, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeFilterSetExcitationFilterLinkFromBoth(const ::omero::model::FilterSetExcitationFilterLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeFilterSetExcitationFilterLinkFromBoth(link, bothSides, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeFilterSetExcitationFilterLinkFromBoth(const ::omero::model::FilterSetExcitationFilterLinkPtr& link, bool bothSides)
    {
        return begin_removeFilterSetExcitationFilterLinkFromBoth(link, bothSides, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeFilterSetExcitationFilterLinkFromBoth(const ::omero::model::FilterSetExcitationFilterLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        return begin_removeFilterSetExcitationFilterLinkFromBoth(link, bothSides, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeFilterSetExcitationFilterLinkFromBoth(const ::omero::model::FilterSetExcitationFilterLinkPtr& link, bool bothSides, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeFilterSetExcitationFilterLinkFromBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeFilterSetExcitationFilterLinkFromBoth(const ::omero::model::FilterSetExcitationFilterLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeFilterSetExcitationFilterLinkFromBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeFilterSetExcitationFilterLinkFromBoth(const ::omero::model::FilterSetExcitationFilterLinkPtr& link, bool bothSides, const ::omero::model::Callback_FilterSet_removeFilterSetExcitationFilterLinkFromBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeFilterSetExcitationFilterLinkFromBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeFilterSetExcitationFilterLinkFromBoth(const ::omero::model::FilterSetExcitationFilterLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::omero::model::Callback_FilterSet_removeFilterSetExcitationFilterLinkFromBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeFilterSetExcitationFilterLinkFromBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    void end_removeFilterSetExcitationFilterLinkFromBoth(const ::Ice::AsyncResultPtr&);
    
private:

    void removeFilterSetExcitationFilterLinkFromBoth(const ::omero::model::FilterSetExcitationFilterLinkPtr&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeFilterSetExcitationFilterLinkFromBoth(const ::omero::model::FilterSetExcitationFilterLinkPtr&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::FilterSetLinkedExcitationFilterSeq linkedExcitationFilterList()
    {
        return linkedExcitationFilterList(0);
    }
    ::omero::model::FilterSetLinkedExcitationFilterSeq linkedExcitationFilterList(const ::Ice::Context& __ctx)
    {
        return linkedExcitationFilterList(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_linkedExcitationFilterList(const ::IceInternal::Function<void (const ::omero::model::FilterSetLinkedExcitationFilterSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_linkedExcitationFilterList(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_linkedExcitationFilterList(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_linkedExcitationFilterList(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_linkedExcitationFilterList(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::FilterSetLinkedExcitationFilterSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_linkedExcitationFilterList(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_linkedExcitationFilterList(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_linkedExcitationFilterList(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_linkedExcitationFilterList(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::FilterSetLinkedExcitationFilterSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::FilterSetLinkedExcitationFilterSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::FilterSetPrx __proxy = ::omero::model::FilterSetPrx::uncheckedCast(__result->getProxy());
                ::omero::model::FilterSetLinkedExcitationFilterSeq __ret;
                try
                {
                    __ret = __proxy->end_linkedExcitationFilterList(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::FilterSetLinkedExcitationFilterSeq&)> _response;
        };
        return begin_linkedExcitationFilterList(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_linkedExcitationFilterList()
    {
        return begin_linkedExcitationFilterList(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkedExcitationFilterList(const ::Ice::Context& __ctx)
    {
        return begin_linkedExcitationFilterList(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkedExcitationFilterList(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedExcitationFilterList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedExcitationFilterList(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedExcitationFilterList(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedExcitationFilterList(const ::omero::model::Callback_FilterSet_linkedExcitationFilterListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedExcitationFilterList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedExcitationFilterList(const ::Ice::Context& __ctx, const ::omero::model::Callback_FilterSet_linkedExcitationFilterListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedExcitationFilterList(&__ctx, __del, __cookie);
    }

    ::omero::model::FilterSetLinkedExcitationFilterSeq end_linkedExcitationFilterList(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::FilterSetLinkedExcitationFilterSeq linkedExcitationFilterList(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_linkedExcitationFilterList(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::DichroicPtr getDichroic()
    {
        return getDichroic(0);
    }
    ::omero::model::DichroicPtr getDichroic(const ::Ice::Context& __ctx)
    {
        return getDichroic(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getDichroic(const ::IceInternal::Function<void (const ::omero::model::DichroicPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getDichroic(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getDichroic(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getDichroic(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getDichroic(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::DichroicPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getDichroic(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getDichroic(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getDichroic(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getDichroic(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::DichroicPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::DichroicPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::FilterSetPrx __proxy = ::omero::model::FilterSetPrx::uncheckedCast(__result->getProxy());
                ::omero::model::DichroicPtr __ret;
                try
                {
                    __ret = __proxy->end_getDichroic(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::DichroicPtr&)> _response;
        };
        return begin_getDichroic(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getDichroic()
    {
        return begin_getDichroic(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDichroic(const ::Ice::Context& __ctx)
    {
        return begin_getDichroic(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDichroic(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDichroic(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDichroic(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDichroic(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDichroic(const ::omero::model::Callback_FilterSet_getDichroicPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDichroic(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDichroic(const ::Ice::Context& __ctx, const ::omero::model::Callback_FilterSet_getDichroicPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDichroic(&__ctx, __del, __cookie);
    }

    ::omero::model::DichroicPtr end_getDichroic(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::DichroicPtr getDichroic(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getDichroic(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setDichroic(const ::omero::model::DichroicPtr& theDichroic)
    {
        setDichroic(theDichroic, 0);
    }
    void setDichroic(const ::omero::model::DichroicPtr& theDichroic, const ::Ice::Context& __ctx)
    {
        setDichroic(theDichroic, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setDichroic(const ::omero::model::DichroicPtr& theDichroic, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setDichroic(theDichroic, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setDichroic(const ::omero::model::DichroicPtr& theDichroic, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setDichroic(theDichroic, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setDichroic(const ::omero::model::DichroicPtr& theDichroic, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setDichroic(theDichroic, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setDichroic(const ::omero::model::DichroicPtr& theDichroic, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setDichroic(theDichroic, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setDichroic(const ::omero::model::DichroicPtr& theDichroic)
    {
        return begin_setDichroic(theDichroic, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setDichroic(const ::omero::model::DichroicPtr& theDichroic, const ::Ice::Context& __ctx)
    {
        return begin_setDichroic(theDichroic, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setDichroic(const ::omero::model::DichroicPtr& theDichroic, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDichroic(theDichroic, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDichroic(const ::omero::model::DichroicPtr& theDichroic, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDichroic(theDichroic, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDichroic(const ::omero::model::DichroicPtr& theDichroic, const ::omero::model::Callback_FilterSet_setDichroicPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDichroic(theDichroic, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDichroic(const ::omero::model::DichroicPtr& theDichroic, const ::Ice::Context& __ctx, const ::omero::model::Callback_FilterSet_setDichroicPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDichroic(theDichroic, &__ctx, __del, __cookie);
    }

    void end_setDichroic(const ::Ice::AsyncResultPtr&);
    
private:

    void setDichroic(const ::omero::model::DichroicPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setDichroic(const ::omero::model::DichroicPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unloadEmissionFilterLink()
    {
        unloadEmissionFilterLink(0);
    }
    void unloadEmissionFilterLink(const ::Ice::Context& __ctx)
    {
        unloadEmissionFilterLink(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_unloadEmissionFilterLink(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unloadEmissionFilterLink(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_unloadEmissionFilterLink(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unloadEmissionFilterLink(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unloadEmissionFilterLink(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unloadEmissionFilterLink(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unloadEmissionFilterLink(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unloadEmissionFilterLink(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_unloadEmissionFilterLink()
    {
        return begin_unloadEmissionFilterLink(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadEmissionFilterLink(const ::Ice::Context& __ctx)
    {
        return begin_unloadEmissionFilterLink(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadEmissionFilterLink(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadEmissionFilterLink(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadEmissionFilterLink(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadEmissionFilterLink(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadEmissionFilterLink(const ::omero::model::Callback_FilterSet_unloadEmissionFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadEmissionFilterLink(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadEmissionFilterLink(const ::Ice::Context& __ctx, const ::omero::model::Callback_FilterSet_unloadEmissionFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadEmissionFilterLink(&__ctx, __del, __cookie);
    }

    void end_unloadEmissionFilterLink(const ::Ice::AsyncResultPtr&);
    
private:

    void unloadEmissionFilterLink(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unloadEmissionFilterLink(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int sizeOfEmissionFilterLink()
    {
        return sizeOfEmissionFilterLink(0);
    }
    ::Ice::Int sizeOfEmissionFilterLink(const ::Ice::Context& __ctx)
    {
        return sizeOfEmissionFilterLink(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_sizeOfEmissionFilterLink(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sizeOfEmissionFilterLink(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfEmissionFilterLink(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sizeOfEmissionFilterLink(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfEmissionFilterLink(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sizeOfEmissionFilterLink(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfEmissionFilterLink(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sizeOfEmissionFilterLink(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_sizeOfEmissionFilterLink(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::FilterSetPrx __proxy = ::omero::model::FilterSetPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_sizeOfEmissionFilterLink(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_sizeOfEmissionFilterLink(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_sizeOfEmissionFilterLink()
    {
        return begin_sizeOfEmissionFilterLink(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfEmissionFilterLink(const ::Ice::Context& __ctx)
    {
        return begin_sizeOfEmissionFilterLink(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfEmissionFilterLink(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfEmissionFilterLink(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfEmissionFilterLink(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfEmissionFilterLink(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfEmissionFilterLink(const ::omero::model::Callback_FilterSet_sizeOfEmissionFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfEmissionFilterLink(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfEmissionFilterLink(const ::Ice::Context& __ctx, const ::omero::model::Callback_FilterSet_sizeOfEmissionFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfEmissionFilterLink(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_sizeOfEmissionFilterLink(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int sizeOfEmissionFilterLink(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sizeOfEmissionFilterLink(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::FilterSetEmissionFilterLinkSeq copyEmissionFilterLink()
    {
        return copyEmissionFilterLink(0);
    }
    ::omero::model::FilterSetEmissionFilterLinkSeq copyEmissionFilterLink(const ::Ice::Context& __ctx)
    {
        return copyEmissionFilterLink(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_copyEmissionFilterLink(const ::IceInternal::Function<void (const ::omero::model::FilterSetEmissionFilterLinkSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_copyEmissionFilterLink(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_copyEmissionFilterLink(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_copyEmissionFilterLink(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_copyEmissionFilterLink(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::FilterSetEmissionFilterLinkSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_copyEmissionFilterLink(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_copyEmissionFilterLink(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_copyEmissionFilterLink(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_copyEmissionFilterLink(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::FilterSetEmissionFilterLinkSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::FilterSetEmissionFilterLinkSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::FilterSetPrx __proxy = ::omero::model::FilterSetPrx::uncheckedCast(__result->getProxy());
                ::omero::model::FilterSetEmissionFilterLinkSeq __ret;
                try
                {
                    __ret = __proxy->end_copyEmissionFilterLink(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::FilterSetEmissionFilterLinkSeq&)> _response;
        };
        return begin_copyEmissionFilterLink(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_copyEmissionFilterLink()
    {
        return begin_copyEmissionFilterLink(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyEmissionFilterLink(const ::Ice::Context& __ctx)
    {
        return begin_copyEmissionFilterLink(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyEmissionFilterLink(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyEmissionFilterLink(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyEmissionFilterLink(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyEmissionFilterLink(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyEmissionFilterLink(const ::omero::model::Callback_FilterSet_copyEmissionFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyEmissionFilterLink(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyEmissionFilterLink(const ::Ice::Context& __ctx, const ::omero::model::Callback_FilterSet_copyEmissionFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyEmissionFilterLink(&__ctx, __del, __cookie);
    }

    ::omero::model::FilterSetEmissionFilterLinkSeq end_copyEmissionFilterLink(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::FilterSetEmissionFilterLinkSeq copyEmissionFilterLink(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_copyEmissionFilterLink(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addFilterSetEmissionFilterLink(const ::omero::model::FilterSetEmissionFilterLinkPtr& target)
    {
        addFilterSetEmissionFilterLink(target, 0);
    }
    void addFilterSetEmissionFilterLink(const ::omero::model::FilterSetEmissionFilterLinkPtr& target, const ::Ice::Context& __ctx)
    {
        addFilterSetEmissionFilterLink(target, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addFilterSetEmissionFilterLink(const ::omero::model::FilterSetEmissionFilterLinkPtr& target, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addFilterSetEmissionFilterLink(target, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addFilterSetEmissionFilterLink(const ::omero::model::FilterSetEmissionFilterLinkPtr& target, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addFilterSetEmissionFilterLink(target, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addFilterSetEmissionFilterLink(const ::omero::model::FilterSetEmissionFilterLinkPtr& target, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addFilterSetEmissionFilterLink(target, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addFilterSetEmissionFilterLink(const ::omero::model::FilterSetEmissionFilterLinkPtr& target, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addFilterSetEmissionFilterLink(target, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addFilterSetEmissionFilterLink(const ::omero::model::FilterSetEmissionFilterLinkPtr& target)
    {
        return begin_addFilterSetEmissionFilterLink(target, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addFilterSetEmissionFilterLink(const ::omero::model::FilterSetEmissionFilterLinkPtr& target, const ::Ice::Context& __ctx)
    {
        return begin_addFilterSetEmissionFilterLink(target, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addFilterSetEmissionFilterLink(const ::omero::model::FilterSetEmissionFilterLinkPtr& target, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addFilterSetEmissionFilterLink(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addFilterSetEmissionFilterLink(const ::omero::model::FilterSetEmissionFilterLinkPtr& target, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addFilterSetEmissionFilterLink(target, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addFilterSetEmissionFilterLink(const ::omero::model::FilterSetEmissionFilterLinkPtr& target, const ::omero::model::Callback_FilterSet_addFilterSetEmissionFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addFilterSetEmissionFilterLink(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addFilterSetEmissionFilterLink(const ::omero::model::FilterSetEmissionFilterLinkPtr& target, const ::Ice::Context& __ctx, const ::omero::model::Callback_FilterSet_addFilterSetEmissionFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addFilterSetEmissionFilterLink(target, &__ctx, __del, __cookie);
    }

    void end_addFilterSetEmissionFilterLink(const ::Ice::AsyncResultPtr&);
    
private:

    void addFilterSetEmissionFilterLink(const ::omero::model::FilterSetEmissionFilterLinkPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addFilterSetEmissionFilterLink(const ::omero::model::FilterSetEmissionFilterLinkPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addAllFilterSetEmissionFilterLinkSet(const ::omero::model::FilterSetEmissionFilterLinkSeq& targets)
    {
        addAllFilterSetEmissionFilterLinkSet(targets, 0);
    }
    void addAllFilterSetEmissionFilterLinkSet(const ::omero::model::FilterSetEmissionFilterLinkSeq& targets, const ::Ice::Context& __ctx)
    {
        addAllFilterSetEmissionFilterLinkSet(targets, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addAllFilterSetEmissionFilterLinkSet(const ::omero::model::FilterSetEmissionFilterLinkSeq& targets, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addAllFilterSetEmissionFilterLinkSet(targets, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addAllFilterSetEmissionFilterLinkSet(const ::omero::model::FilterSetEmissionFilterLinkSeq& targets, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addAllFilterSetEmissionFilterLinkSet(targets, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addAllFilterSetEmissionFilterLinkSet(const ::omero::model::FilterSetEmissionFilterLinkSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addAllFilterSetEmissionFilterLinkSet(targets, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addAllFilterSetEmissionFilterLinkSet(const ::omero::model::FilterSetEmissionFilterLinkSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addAllFilterSetEmissionFilterLinkSet(targets, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addAllFilterSetEmissionFilterLinkSet(const ::omero::model::FilterSetEmissionFilterLinkSeq& targets)
    {
        return begin_addAllFilterSetEmissionFilterLinkSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllFilterSetEmissionFilterLinkSet(const ::omero::model::FilterSetEmissionFilterLinkSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_addAllFilterSetEmissionFilterLinkSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllFilterSetEmissionFilterLinkSet(const ::omero::model::FilterSetEmissionFilterLinkSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllFilterSetEmissionFilterLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllFilterSetEmissionFilterLinkSet(const ::omero::model::FilterSetEmissionFilterLinkSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllFilterSetEmissionFilterLinkSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllFilterSetEmissionFilterLinkSet(const ::omero::model::FilterSetEmissionFilterLinkSeq& targets, const ::omero::model::Callback_FilterSet_addAllFilterSetEmissionFilterLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllFilterSetEmissionFilterLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllFilterSetEmissionFilterLinkSet(const ::omero::model::FilterSetEmissionFilterLinkSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_FilterSet_addAllFilterSetEmissionFilterLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllFilterSetEmissionFilterLinkSet(targets, &__ctx, __del, __cookie);
    }

    void end_addAllFilterSetEmissionFilterLinkSet(const ::Ice::AsyncResultPtr&);
    
private:

    void addAllFilterSetEmissionFilterLinkSet(const ::omero::model::FilterSetEmissionFilterLinkSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addAllFilterSetEmissionFilterLinkSet(const ::omero::model::FilterSetEmissionFilterLinkSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeFilterSetEmissionFilterLink(const ::omero::model::FilterSetEmissionFilterLinkPtr& theTarget)
    {
        removeFilterSetEmissionFilterLink(theTarget, 0);
    }
    void removeFilterSetEmissionFilterLink(const ::omero::model::FilterSetEmissionFilterLinkPtr& theTarget, const ::Ice::Context& __ctx)
    {
        removeFilterSetEmissionFilterLink(theTarget, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeFilterSetEmissionFilterLink(const ::omero::model::FilterSetEmissionFilterLinkPtr& theTarget, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeFilterSetEmissionFilterLink(theTarget, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeFilterSetEmissionFilterLink(const ::omero::model::FilterSetEmissionFilterLinkPtr& theTarget, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeFilterSetEmissionFilterLink(theTarget, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeFilterSetEmissionFilterLink(const ::omero::model::FilterSetEmissionFilterLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeFilterSetEmissionFilterLink(theTarget, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeFilterSetEmissionFilterLink(const ::omero::model::FilterSetEmissionFilterLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeFilterSetEmissionFilterLink(theTarget, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeFilterSetEmissionFilterLink(const ::omero::model::FilterSetEmissionFilterLinkPtr& theTarget)
    {
        return begin_removeFilterSetEmissionFilterLink(theTarget, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeFilterSetEmissionFilterLink(const ::omero::model::FilterSetEmissionFilterLinkPtr& theTarget, const ::Ice::Context& __ctx)
    {
        return begin_removeFilterSetEmissionFilterLink(theTarget, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeFilterSetEmissionFilterLink(const ::omero::model::FilterSetEmissionFilterLinkPtr& theTarget, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeFilterSetEmissionFilterLink(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeFilterSetEmissionFilterLink(const ::omero::model::FilterSetEmissionFilterLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeFilterSetEmissionFilterLink(theTarget, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeFilterSetEmissionFilterLink(const ::omero::model::FilterSetEmissionFilterLinkPtr& theTarget, const ::omero::model::Callback_FilterSet_removeFilterSetEmissionFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeFilterSetEmissionFilterLink(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeFilterSetEmissionFilterLink(const ::omero::model::FilterSetEmissionFilterLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::omero::model::Callback_FilterSet_removeFilterSetEmissionFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeFilterSetEmissionFilterLink(theTarget, &__ctx, __del, __cookie);
    }

    void end_removeFilterSetEmissionFilterLink(const ::Ice::AsyncResultPtr&);
    
private:

    void removeFilterSetEmissionFilterLink(const ::omero::model::FilterSetEmissionFilterLinkPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeFilterSetEmissionFilterLink(const ::omero::model::FilterSetEmissionFilterLinkPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeAllFilterSetEmissionFilterLinkSet(const ::omero::model::FilterSetEmissionFilterLinkSeq& targets)
    {
        removeAllFilterSetEmissionFilterLinkSet(targets, 0);
    }
    void removeAllFilterSetEmissionFilterLinkSet(const ::omero::model::FilterSetEmissionFilterLinkSeq& targets, const ::Ice::Context& __ctx)
    {
        removeAllFilterSetEmissionFilterLinkSet(targets, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeAllFilterSetEmissionFilterLinkSet(const ::omero::model::FilterSetEmissionFilterLinkSeq& targets, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeAllFilterSetEmissionFilterLinkSet(targets, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeAllFilterSetEmissionFilterLinkSet(const ::omero::model::FilterSetEmissionFilterLinkSeq& targets, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeAllFilterSetEmissionFilterLinkSet(targets, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeAllFilterSetEmissionFilterLinkSet(const ::omero::model::FilterSetEmissionFilterLinkSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeAllFilterSetEmissionFilterLinkSet(targets, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeAllFilterSetEmissionFilterLinkSet(const ::omero::model::FilterSetEmissionFilterLinkSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeAllFilterSetEmissionFilterLinkSet(targets, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeAllFilterSetEmissionFilterLinkSet(const ::omero::model::FilterSetEmissionFilterLinkSeq& targets)
    {
        return begin_removeAllFilterSetEmissionFilterLinkSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllFilterSetEmissionFilterLinkSet(const ::omero::model::FilterSetEmissionFilterLinkSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_removeAllFilterSetEmissionFilterLinkSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllFilterSetEmissionFilterLinkSet(const ::omero::model::FilterSetEmissionFilterLinkSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllFilterSetEmissionFilterLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllFilterSetEmissionFilterLinkSet(const ::omero::model::FilterSetEmissionFilterLinkSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllFilterSetEmissionFilterLinkSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllFilterSetEmissionFilterLinkSet(const ::omero::model::FilterSetEmissionFilterLinkSeq& targets, const ::omero::model::Callback_FilterSet_removeAllFilterSetEmissionFilterLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllFilterSetEmissionFilterLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllFilterSetEmissionFilterLinkSet(const ::omero::model::FilterSetEmissionFilterLinkSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_FilterSet_removeAllFilterSetEmissionFilterLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllFilterSetEmissionFilterLinkSet(targets, &__ctx, __del, __cookie);
    }

    void end_removeAllFilterSetEmissionFilterLinkSet(const ::Ice::AsyncResultPtr&);
    
private:

    void removeAllFilterSetEmissionFilterLinkSet(const ::omero::model::FilterSetEmissionFilterLinkSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeAllFilterSetEmissionFilterLinkSet(const ::omero::model::FilterSetEmissionFilterLinkSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void clearEmissionFilterLink()
    {
        clearEmissionFilterLink(0);
    }
    void clearEmissionFilterLink(const ::Ice::Context& __ctx)
    {
        clearEmissionFilterLink(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_clearEmissionFilterLink(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_clearEmissionFilterLink(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_clearEmissionFilterLink(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_clearEmissionFilterLink(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_clearEmissionFilterLink(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_clearEmissionFilterLink(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_clearEmissionFilterLink(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_clearEmissionFilterLink(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_clearEmissionFilterLink()
    {
        return begin_clearEmissionFilterLink(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearEmissionFilterLink(const ::Ice::Context& __ctx)
    {
        return begin_clearEmissionFilterLink(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearEmissionFilterLink(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearEmissionFilterLink(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearEmissionFilterLink(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearEmissionFilterLink(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearEmissionFilterLink(const ::omero::model::Callback_FilterSet_clearEmissionFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearEmissionFilterLink(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearEmissionFilterLink(const ::Ice::Context& __ctx, const ::omero::model::Callback_FilterSet_clearEmissionFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearEmissionFilterLink(&__ctx, __del, __cookie);
    }

    void end_clearEmissionFilterLink(const ::Ice::AsyncResultPtr&);
    
private:

    void clearEmissionFilterLink(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_clearEmissionFilterLink(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reloadEmissionFilterLink(const ::omero::model::FilterSetPtr& toCopy)
    {
        reloadEmissionFilterLink(toCopy, 0);
    }
    void reloadEmissionFilterLink(const ::omero::model::FilterSetPtr& toCopy, const ::Ice::Context& __ctx)
    {
        reloadEmissionFilterLink(toCopy, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_reloadEmissionFilterLink(const ::omero::model::FilterSetPtr& toCopy, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reloadEmissionFilterLink(toCopy, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_reloadEmissionFilterLink(const ::omero::model::FilterSetPtr& toCopy, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reloadEmissionFilterLink(toCopy, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reloadEmissionFilterLink(const ::omero::model::FilterSetPtr& toCopy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reloadEmissionFilterLink(toCopy, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reloadEmissionFilterLink(const ::omero::model::FilterSetPtr& toCopy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reloadEmissionFilterLink(toCopy, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_reloadEmissionFilterLink(const ::omero::model::FilterSetPtr& toCopy)
    {
        return begin_reloadEmissionFilterLink(toCopy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadEmissionFilterLink(const ::omero::model::FilterSetPtr& toCopy, const ::Ice::Context& __ctx)
    {
        return begin_reloadEmissionFilterLink(toCopy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadEmissionFilterLink(const ::omero::model::FilterSetPtr& toCopy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadEmissionFilterLink(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadEmissionFilterLink(const ::omero::model::FilterSetPtr& toCopy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadEmissionFilterLink(toCopy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadEmissionFilterLink(const ::omero::model::FilterSetPtr& toCopy, const ::omero::model::Callback_FilterSet_reloadEmissionFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadEmissionFilterLink(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadEmissionFilterLink(const ::omero::model::FilterSetPtr& toCopy, const ::Ice::Context& __ctx, const ::omero::model::Callback_FilterSet_reloadEmissionFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadEmissionFilterLink(toCopy, &__ctx, __del, __cookie);
    }

    void end_reloadEmissionFilterLink(const ::Ice::AsyncResultPtr&);
    
private:

    void reloadEmissionFilterLink(const ::omero::model::FilterSetPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reloadEmissionFilterLink(const ::omero::model::FilterSetPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::sys::CountMap getEmissionFilterLinkCountPerOwner()
    {
        return getEmissionFilterLinkCountPerOwner(0);
    }
    ::omero::sys::CountMap getEmissionFilterLinkCountPerOwner(const ::Ice::Context& __ctx)
    {
        return getEmissionFilterLinkCountPerOwner(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getEmissionFilterLinkCountPerOwner(const ::IceInternal::Function<void (const ::omero::sys::CountMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getEmissionFilterLinkCountPerOwner(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getEmissionFilterLinkCountPerOwner(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getEmissionFilterLinkCountPerOwner(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getEmissionFilterLinkCountPerOwner(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::sys::CountMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getEmissionFilterLinkCountPerOwner(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getEmissionFilterLinkCountPerOwner(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getEmissionFilterLinkCountPerOwner(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getEmissionFilterLinkCountPerOwner(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::sys::CountMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::sys::CountMap&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::FilterSetPrx __proxy = ::omero::model::FilterSetPrx::uncheckedCast(__result->getProxy());
                ::omero::sys::CountMap __ret;
                try
                {
                    __ret = __proxy->end_getEmissionFilterLinkCountPerOwner(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::sys::CountMap&)> _response;
        };
        return begin_getEmissionFilterLinkCountPerOwner(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getEmissionFilterLinkCountPerOwner()
    {
        return begin_getEmissionFilterLinkCountPerOwner(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getEmissionFilterLinkCountPerOwner(const ::Ice::Context& __ctx)
    {
        return begin_getEmissionFilterLinkCountPerOwner(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getEmissionFilterLinkCountPerOwner(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getEmissionFilterLinkCountPerOwner(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getEmissionFilterLinkCountPerOwner(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getEmissionFilterLinkCountPerOwner(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getEmissionFilterLinkCountPerOwner(const ::omero::model::Callback_FilterSet_getEmissionFilterLinkCountPerOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getEmissionFilterLinkCountPerOwner(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getEmissionFilterLinkCountPerOwner(const ::Ice::Context& __ctx, const ::omero::model::Callback_FilterSet_getEmissionFilterLinkCountPerOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getEmissionFilterLinkCountPerOwner(&__ctx, __del, __cookie);
    }

    ::omero::sys::CountMap end_getEmissionFilterLinkCountPerOwner(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::sys::CountMap getEmissionFilterLinkCountPerOwner(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getEmissionFilterLinkCountPerOwner(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::FilterSetEmissionFilterLinkPtr linkEmissionFilter(const ::omero::model::FilterPtr& addition)
    {
        return linkEmissionFilter(addition, 0);
    }
    ::omero::model::FilterSetEmissionFilterLinkPtr linkEmissionFilter(const ::omero::model::FilterPtr& addition, const ::Ice::Context& __ctx)
    {
        return linkEmissionFilter(addition, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_linkEmissionFilter(const ::omero::model::FilterPtr& addition, const ::IceInternal::Function<void (const ::omero::model::FilterSetEmissionFilterLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_linkEmissionFilter(addition, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_linkEmissionFilter(const ::omero::model::FilterPtr& addition, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_linkEmissionFilter(addition, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_linkEmissionFilter(const ::omero::model::FilterPtr& addition, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::FilterSetEmissionFilterLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_linkEmissionFilter(addition, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_linkEmissionFilter(const ::omero::model::FilterPtr& addition, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_linkEmissionFilter(addition, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_linkEmissionFilter(const ::omero::model::FilterPtr& addition, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::FilterSetEmissionFilterLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::FilterSetEmissionFilterLinkPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::FilterSetPrx __proxy = ::omero::model::FilterSetPrx::uncheckedCast(__result->getProxy());
                ::omero::model::FilterSetEmissionFilterLinkPtr __ret;
                try
                {
                    __ret = __proxy->end_linkEmissionFilter(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::FilterSetEmissionFilterLinkPtr&)> _response;
        };
        return begin_linkEmissionFilter(addition, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_linkEmissionFilter(const ::omero::model::FilterPtr& addition)
    {
        return begin_linkEmissionFilter(addition, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkEmissionFilter(const ::omero::model::FilterPtr& addition, const ::Ice::Context& __ctx)
    {
        return begin_linkEmissionFilter(addition, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkEmissionFilter(const ::omero::model::FilterPtr& addition, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkEmissionFilter(addition, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkEmissionFilter(const ::omero::model::FilterPtr& addition, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkEmissionFilter(addition, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkEmissionFilter(const ::omero::model::FilterPtr& addition, const ::omero::model::Callback_FilterSet_linkEmissionFilterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkEmissionFilter(addition, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkEmissionFilter(const ::omero::model::FilterPtr& addition, const ::Ice::Context& __ctx, const ::omero::model::Callback_FilterSet_linkEmissionFilterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkEmissionFilter(addition, &__ctx, __del, __cookie);
    }

    ::omero::model::FilterSetEmissionFilterLinkPtr end_linkEmissionFilter(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::FilterSetEmissionFilterLinkPtr linkEmissionFilter(const ::omero::model::FilterPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_linkEmissionFilter(const ::omero::model::FilterPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addFilterSetEmissionFilterLinkToBoth(const ::omero::model::FilterSetEmissionFilterLinkPtr& link, bool bothSides)
    {
        addFilterSetEmissionFilterLinkToBoth(link, bothSides, 0);
    }
    void addFilterSetEmissionFilterLinkToBoth(const ::omero::model::FilterSetEmissionFilterLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        addFilterSetEmissionFilterLinkToBoth(link, bothSides, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addFilterSetEmissionFilterLinkToBoth(const ::omero::model::FilterSetEmissionFilterLinkPtr& link, bool bothSides, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addFilterSetEmissionFilterLinkToBoth(link, bothSides, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addFilterSetEmissionFilterLinkToBoth(const ::omero::model::FilterSetEmissionFilterLinkPtr& link, bool bothSides, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addFilterSetEmissionFilterLinkToBoth(link, bothSides, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addFilterSetEmissionFilterLinkToBoth(const ::omero::model::FilterSetEmissionFilterLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addFilterSetEmissionFilterLinkToBoth(link, bothSides, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addFilterSetEmissionFilterLinkToBoth(const ::omero::model::FilterSetEmissionFilterLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addFilterSetEmissionFilterLinkToBoth(link, bothSides, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addFilterSetEmissionFilterLinkToBoth(const ::omero::model::FilterSetEmissionFilterLinkPtr& link, bool bothSides)
    {
        return begin_addFilterSetEmissionFilterLinkToBoth(link, bothSides, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addFilterSetEmissionFilterLinkToBoth(const ::omero::model::FilterSetEmissionFilterLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        return begin_addFilterSetEmissionFilterLinkToBoth(link, bothSides, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addFilterSetEmissionFilterLinkToBoth(const ::omero::model::FilterSetEmissionFilterLinkPtr& link, bool bothSides, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addFilterSetEmissionFilterLinkToBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addFilterSetEmissionFilterLinkToBoth(const ::omero::model::FilterSetEmissionFilterLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addFilterSetEmissionFilterLinkToBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addFilterSetEmissionFilterLinkToBoth(const ::omero::model::FilterSetEmissionFilterLinkPtr& link, bool bothSides, const ::omero::model::Callback_FilterSet_addFilterSetEmissionFilterLinkToBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addFilterSetEmissionFilterLinkToBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addFilterSetEmissionFilterLinkToBoth(const ::omero::model::FilterSetEmissionFilterLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::omero::model::Callback_FilterSet_addFilterSetEmissionFilterLinkToBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addFilterSetEmissionFilterLinkToBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    void end_addFilterSetEmissionFilterLinkToBoth(const ::Ice::AsyncResultPtr&);
    
private:

    void addFilterSetEmissionFilterLinkToBoth(const ::omero::model::FilterSetEmissionFilterLinkPtr&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addFilterSetEmissionFilterLinkToBoth(const ::omero::model::FilterSetEmissionFilterLinkPtr&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::FilterSetEmissionFilterLinkSeq findFilterSetEmissionFilterLink(const ::omero::model::FilterPtr& removal)
    {
        return findFilterSetEmissionFilterLink(removal, 0);
    }
    ::omero::model::FilterSetEmissionFilterLinkSeq findFilterSetEmissionFilterLink(const ::omero::model::FilterPtr& removal, const ::Ice::Context& __ctx)
    {
        return findFilterSetEmissionFilterLink(removal, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_findFilterSetEmissionFilterLink(const ::omero::model::FilterPtr& removal, const ::IceInternal::Function<void (const ::omero::model::FilterSetEmissionFilterLinkSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_findFilterSetEmissionFilterLink(removal, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_findFilterSetEmissionFilterLink(const ::omero::model::FilterPtr& removal, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_findFilterSetEmissionFilterLink(removal, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_findFilterSetEmissionFilterLink(const ::omero::model::FilterPtr& removal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::FilterSetEmissionFilterLinkSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_findFilterSetEmissionFilterLink(removal, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_findFilterSetEmissionFilterLink(const ::omero::model::FilterPtr& removal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_findFilterSetEmissionFilterLink(removal, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_findFilterSetEmissionFilterLink(const ::omero::model::FilterPtr& removal, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::FilterSetEmissionFilterLinkSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::FilterSetEmissionFilterLinkSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::FilterSetPrx __proxy = ::omero::model::FilterSetPrx::uncheckedCast(__result->getProxy());
                ::omero::model::FilterSetEmissionFilterLinkSeq __ret;
                try
                {
                    __ret = __proxy->end_findFilterSetEmissionFilterLink(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::FilterSetEmissionFilterLinkSeq&)> _response;
        };
        return begin_findFilterSetEmissionFilterLink(removal, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_findFilterSetEmissionFilterLink(const ::omero::model::FilterPtr& removal)
    {
        return begin_findFilterSetEmissionFilterLink(removal, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findFilterSetEmissionFilterLink(const ::omero::model::FilterPtr& removal, const ::Ice::Context& __ctx)
    {
        return begin_findFilterSetEmissionFilterLink(removal, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findFilterSetEmissionFilterLink(const ::omero::model::FilterPtr& removal, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findFilterSetEmissionFilterLink(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findFilterSetEmissionFilterLink(const ::omero::model::FilterPtr& removal, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findFilterSetEmissionFilterLink(removal, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findFilterSetEmissionFilterLink(const ::omero::model::FilterPtr& removal, const ::omero::model::Callback_FilterSet_findFilterSetEmissionFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findFilterSetEmissionFilterLink(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findFilterSetEmissionFilterLink(const ::omero::model::FilterPtr& removal, const ::Ice::Context& __ctx, const ::omero::model::Callback_FilterSet_findFilterSetEmissionFilterLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findFilterSetEmissionFilterLink(removal, &__ctx, __del, __cookie);
    }

    ::omero::model::FilterSetEmissionFilterLinkSeq end_findFilterSetEmissionFilterLink(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::FilterSetEmissionFilterLinkSeq findFilterSetEmissionFilterLink(const ::omero::model::FilterPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_findFilterSetEmissionFilterLink(const ::omero::model::FilterPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unlinkEmissionFilter(const ::omero::model::FilterPtr& removal)
    {
        unlinkEmissionFilter(removal, 0);
    }
    void unlinkEmissionFilter(const ::omero::model::FilterPtr& removal, const ::Ice::Context& __ctx)
    {
        unlinkEmissionFilter(removal, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_unlinkEmissionFilter(const ::omero::model::FilterPtr& removal, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unlinkEmissionFilter(removal, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_unlinkEmissionFilter(const ::omero::model::FilterPtr& removal, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unlinkEmissionFilter(removal, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unlinkEmissionFilter(const ::omero::model::FilterPtr& removal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unlinkEmissionFilter(removal, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unlinkEmissionFilter(const ::omero::model::FilterPtr& removal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unlinkEmissionFilter(removal, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_unlinkEmissionFilter(const ::omero::model::FilterPtr& removal)
    {
        return begin_unlinkEmissionFilter(removal, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unlinkEmissionFilter(const ::omero::model::FilterPtr& removal, const ::Ice::Context& __ctx)
    {
        return begin_unlinkEmissionFilter(removal, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unlinkEmissionFilter(const ::omero::model::FilterPtr& removal, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkEmissionFilter(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkEmissionFilter(const ::omero::model::FilterPtr& removal, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkEmissionFilter(removal, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkEmissionFilter(const ::omero::model::FilterPtr& removal, const ::omero::model::Callback_FilterSet_unlinkEmissionFilterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkEmissionFilter(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkEmissionFilter(const ::omero::model::FilterPtr& removal, const ::Ice::Context& __ctx, const ::omero::model::Callback_FilterSet_unlinkEmissionFilterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkEmissionFilter(removal, &__ctx, __del, __cookie);
    }

    void end_unlinkEmissionFilter(const ::Ice::AsyncResultPtr&);
    
private:

    void unlinkEmissionFilter(const ::omero::model::FilterPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unlinkEmissionFilter(const ::omero::model::FilterPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeFilterSetEmissionFilterLinkFromBoth(const ::omero::model::FilterSetEmissionFilterLinkPtr& link, bool bothSides)
    {
        removeFilterSetEmissionFilterLinkFromBoth(link, bothSides, 0);
    }
    void removeFilterSetEmissionFilterLinkFromBoth(const ::omero::model::FilterSetEmissionFilterLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        removeFilterSetEmissionFilterLinkFromBoth(link, bothSides, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeFilterSetEmissionFilterLinkFromBoth(const ::omero::model::FilterSetEmissionFilterLinkPtr& link, bool bothSides, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeFilterSetEmissionFilterLinkFromBoth(link, bothSides, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeFilterSetEmissionFilterLinkFromBoth(const ::omero::model::FilterSetEmissionFilterLinkPtr& link, bool bothSides, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeFilterSetEmissionFilterLinkFromBoth(link, bothSides, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeFilterSetEmissionFilterLinkFromBoth(const ::omero::model::FilterSetEmissionFilterLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeFilterSetEmissionFilterLinkFromBoth(link, bothSides, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeFilterSetEmissionFilterLinkFromBoth(const ::omero::model::FilterSetEmissionFilterLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeFilterSetEmissionFilterLinkFromBoth(link, bothSides, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeFilterSetEmissionFilterLinkFromBoth(const ::omero::model::FilterSetEmissionFilterLinkPtr& link, bool bothSides)
    {
        return begin_removeFilterSetEmissionFilterLinkFromBoth(link, bothSides, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeFilterSetEmissionFilterLinkFromBoth(const ::omero::model::FilterSetEmissionFilterLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        return begin_removeFilterSetEmissionFilterLinkFromBoth(link, bothSides, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeFilterSetEmissionFilterLinkFromBoth(const ::omero::model::FilterSetEmissionFilterLinkPtr& link, bool bothSides, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeFilterSetEmissionFilterLinkFromBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeFilterSetEmissionFilterLinkFromBoth(const ::omero::model::FilterSetEmissionFilterLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeFilterSetEmissionFilterLinkFromBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeFilterSetEmissionFilterLinkFromBoth(const ::omero::model::FilterSetEmissionFilterLinkPtr& link, bool bothSides, const ::omero::model::Callback_FilterSet_removeFilterSetEmissionFilterLinkFromBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeFilterSetEmissionFilterLinkFromBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeFilterSetEmissionFilterLinkFromBoth(const ::omero::model::FilterSetEmissionFilterLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::omero::model::Callback_FilterSet_removeFilterSetEmissionFilterLinkFromBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeFilterSetEmissionFilterLinkFromBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    void end_removeFilterSetEmissionFilterLinkFromBoth(const ::Ice::AsyncResultPtr&);
    
private:

    void removeFilterSetEmissionFilterLinkFromBoth(const ::omero::model::FilterSetEmissionFilterLinkPtr&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeFilterSetEmissionFilterLinkFromBoth(const ::omero::model::FilterSetEmissionFilterLinkPtr&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::FilterSetLinkedEmissionFilterSeq linkedEmissionFilterList()
    {
        return linkedEmissionFilterList(0);
    }
    ::omero::model::FilterSetLinkedEmissionFilterSeq linkedEmissionFilterList(const ::Ice::Context& __ctx)
    {
        return linkedEmissionFilterList(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_linkedEmissionFilterList(const ::IceInternal::Function<void (const ::omero::model::FilterSetLinkedEmissionFilterSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_linkedEmissionFilterList(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_linkedEmissionFilterList(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_linkedEmissionFilterList(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_linkedEmissionFilterList(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::FilterSetLinkedEmissionFilterSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_linkedEmissionFilterList(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_linkedEmissionFilterList(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_linkedEmissionFilterList(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_linkedEmissionFilterList(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::FilterSetLinkedEmissionFilterSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::FilterSetLinkedEmissionFilterSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::FilterSetPrx __proxy = ::omero::model::FilterSetPrx::uncheckedCast(__result->getProxy());
                ::omero::model::FilterSetLinkedEmissionFilterSeq __ret;
                try
                {
                    __ret = __proxy->end_linkedEmissionFilterList(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::FilterSetLinkedEmissionFilterSeq&)> _response;
        };
        return begin_linkedEmissionFilterList(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_linkedEmissionFilterList()
    {
        return begin_linkedEmissionFilterList(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkedEmissionFilterList(const ::Ice::Context& __ctx)
    {
        return begin_linkedEmissionFilterList(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkedEmissionFilterList(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedEmissionFilterList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedEmissionFilterList(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedEmissionFilterList(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedEmissionFilterList(const ::omero::model::Callback_FilterSet_linkedEmissionFilterListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedEmissionFilterList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedEmissionFilterList(const ::Ice::Context& __ctx, const ::omero::model::Callback_FilterSet_linkedEmissionFilterListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedEmissionFilterList(&__ctx, __del, __cookie);
    }

    ::omero::model::FilterSetLinkedEmissionFilterSeq end_linkedEmissionFilterList(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::FilterSetLinkedEmissionFilterSeq linkedEmissionFilterList(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_linkedEmissionFilterList(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<FilterSet> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<FilterSet*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<FilterSet> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<FilterSet*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<FilterSet> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<FilterSet*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<FilterSet> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<FilterSet*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<FilterSet> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<FilterSet*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<FilterSet> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<FilterSet*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<FilterSet> ice_secure(bool __secure) const
    {
        return dynamic_cast<FilterSet*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<FilterSet> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<FilterSet*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<FilterSet> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<FilterSet*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<FilterSet> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<FilterSet*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<FilterSet> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<FilterSet*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<FilterSet> ice_twoway() const
    {
        return dynamic_cast<FilterSet*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<FilterSet> ice_oneway() const
    {
        return dynamic_cast<FilterSet*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<FilterSet> ice_batchOneway() const
    {
        return dynamic_cast<FilterSet*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<FilterSet> ice_datagram() const
    {
        return dynamic_cast<FilterSet*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<FilterSet> ice_batchDatagram() const
    {
        return dynamic_cast<FilterSet*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<FilterSet> ice_compress(bool __compress) const
    {
        return dynamic_cast<FilterSet*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<FilterSet> ice_timeout(int __timeout) const
    {
        return dynamic_cast<FilterSet*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<FilterSet> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<FilterSet*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<FilterSet> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<FilterSet*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

namespace IceDelegate
{

namespace omero
{

namespace model
{

class FilterSet : virtual public ::IceDelegate::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RStringPtr getManufacturer(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setManufacturer(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RStringPtr getModel(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setModel(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RStringPtr getLotNumber(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setLotNumber(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RStringPtr getSerialNumber(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setSerialNumber(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::InstrumentPtr getInstrument(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setInstrument(const ::omero::model::InstrumentPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void unloadExcitationFilterLink(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int sizeOfExcitationFilterLink(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::FilterSetExcitationFilterLinkSeq copyExcitationFilterLink(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addFilterSetExcitationFilterLink(const ::omero::model::FilterSetExcitationFilterLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addAllFilterSetExcitationFilterLinkSet(const ::omero::model::FilterSetExcitationFilterLinkSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeFilterSetExcitationFilterLink(const ::omero::model::FilterSetExcitationFilterLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeAllFilterSetExcitationFilterLinkSet(const ::omero::model::FilterSetExcitationFilterLinkSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void clearExcitationFilterLink(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void reloadExcitationFilterLink(const ::omero::model::FilterSetPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::sys::CountMap getExcitationFilterLinkCountPerOwner(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::FilterSetExcitationFilterLinkPtr linkExcitationFilter(const ::omero::model::FilterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addFilterSetExcitationFilterLinkToBoth(const ::omero::model::FilterSetExcitationFilterLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::FilterSetExcitationFilterLinkSeq findFilterSetExcitationFilterLink(const ::omero::model::FilterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void unlinkExcitationFilter(const ::omero::model::FilterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeFilterSetExcitationFilterLinkFromBoth(const ::omero::model::FilterSetExcitationFilterLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::FilterSetLinkedExcitationFilterSeq linkedExcitationFilterList(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::DichroicPtr getDichroic(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setDichroic(const ::omero::model::DichroicPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void unloadEmissionFilterLink(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int sizeOfEmissionFilterLink(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::FilterSetEmissionFilterLinkSeq copyEmissionFilterLink(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addFilterSetEmissionFilterLink(const ::omero::model::FilterSetEmissionFilterLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addAllFilterSetEmissionFilterLinkSet(const ::omero::model::FilterSetEmissionFilterLinkSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeFilterSetEmissionFilterLink(const ::omero::model::FilterSetEmissionFilterLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeAllFilterSetEmissionFilterLinkSet(const ::omero::model::FilterSetEmissionFilterLinkSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void clearEmissionFilterLink(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void reloadEmissionFilterLink(const ::omero::model::FilterSetPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::sys::CountMap getEmissionFilterLinkCountPerOwner(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::FilterSetEmissionFilterLinkPtr linkEmissionFilter(const ::omero::model::FilterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addFilterSetEmissionFilterLinkToBoth(const ::omero::model::FilterSetEmissionFilterLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::FilterSetEmissionFilterLinkSeq findFilterSetEmissionFilterLink(const ::omero::model::FilterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void unlinkEmissionFilter(const ::omero::model::FilterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeFilterSetEmissionFilterLinkFromBoth(const ::omero::model::FilterSetEmissionFilterLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::FilterSetLinkedEmissionFilterSeq linkedEmissionFilterList(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

}

namespace IceDelegateM
{

namespace omero
{

namespace model
{

class FilterSet : virtual public ::IceDelegate::omero::model::FilterSet,
                  virtual public ::IceDelegateM::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getManufacturer(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setManufacturer(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getModel(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setModel(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getLotNumber(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setLotNumber(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getSerialNumber(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setSerialNumber(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::InstrumentPtr getInstrument(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setInstrument(const ::omero::model::InstrumentPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unloadExcitationFilterLink(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int sizeOfExcitationFilterLink(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::FilterSetExcitationFilterLinkSeq copyExcitationFilterLink(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addFilterSetExcitationFilterLink(const ::omero::model::FilterSetExcitationFilterLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addAllFilterSetExcitationFilterLinkSet(const ::omero::model::FilterSetExcitationFilterLinkSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeFilterSetExcitationFilterLink(const ::omero::model::FilterSetExcitationFilterLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeAllFilterSetExcitationFilterLinkSet(const ::omero::model::FilterSetExcitationFilterLinkSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void clearExcitationFilterLink(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void reloadExcitationFilterLink(const ::omero::model::FilterSetPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::sys::CountMap getExcitationFilterLinkCountPerOwner(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::FilterSetExcitationFilterLinkPtr linkExcitationFilter(const ::omero::model::FilterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addFilterSetExcitationFilterLinkToBoth(const ::omero::model::FilterSetExcitationFilterLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::FilterSetExcitationFilterLinkSeq findFilterSetExcitationFilterLink(const ::omero::model::FilterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unlinkExcitationFilter(const ::omero::model::FilterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeFilterSetExcitationFilterLinkFromBoth(const ::omero::model::FilterSetExcitationFilterLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::FilterSetLinkedExcitationFilterSeq linkedExcitationFilterList(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::DichroicPtr getDichroic(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setDichroic(const ::omero::model::DichroicPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unloadEmissionFilterLink(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int sizeOfEmissionFilterLink(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::FilterSetEmissionFilterLinkSeq copyEmissionFilterLink(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addFilterSetEmissionFilterLink(const ::omero::model::FilterSetEmissionFilterLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addAllFilterSetEmissionFilterLinkSet(const ::omero::model::FilterSetEmissionFilterLinkSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeFilterSetEmissionFilterLink(const ::omero::model::FilterSetEmissionFilterLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeAllFilterSetEmissionFilterLinkSet(const ::omero::model::FilterSetEmissionFilterLinkSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void clearEmissionFilterLink(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void reloadEmissionFilterLink(const ::omero::model::FilterSetPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::sys::CountMap getEmissionFilterLinkCountPerOwner(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::FilterSetEmissionFilterLinkPtr linkEmissionFilter(const ::omero::model::FilterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addFilterSetEmissionFilterLinkToBoth(const ::omero::model::FilterSetEmissionFilterLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::FilterSetEmissionFilterLinkSeq findFilterSetEmissionFilterLink(const ::omero::model::FilterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unlinkEmissionFilter(const ::omero::model::FilterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeFilterSetEmissionFilterLinkFromBoth(const ::omero::model::FilterSetEmissionFilterLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::FilterSetLinkedEmissionFilterSeq linkedEmissionFilterList(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace IceDelegateD
{

namespace omero
{

namespace model
{

class FilterSet : virtual public ::IceDelegate::omero::model::FilterSet,
                  virtual public ::IceDelegateD::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getManufacturer(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setManufacturer(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getModel(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setModel(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getLotNumber(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setLotNumber(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getSerialNumber(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setSerialNumber(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::InstrumentPtr getInstrument(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setInstrument(const ::omero::model::InstrumentPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unloadExcitationFilterLink(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int sizeOfExcitationFilterLink(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::FilterSetExcitationFilterLinkSeq copyExcitationFilterLink(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addFilterSetExcitationFilterLink(const ::omero::model::FilterSetExcitationFilterLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addAllFilterSetExcitationFilterLinkSet(const ::omero::model::FilterSetExcitationFilterLinkSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeFilterSetExcitationFilterLink(const ::omero::model::FilterSetExcitationFilterLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeAllFilterSetExcitationFilterLinkSet(const ::omero::model::FilterSetExcitationFilterLinkSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void clearExcitationFilterLink(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void reloadExcitationFilterLink(const ::omero::model::FilterSetPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::sys::CountMap getExcitationFilterLinkCountPerOwner(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::FilterSetExcitationFilterLinkPtr linkExcitationFilter(const ::omero::model::FilterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addFilterSetExcitationFilterLinkToBoth(const ::omero::model::FilterSetExcitationFilterLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::FilterSetExcitationFilterLinkSeq findFilterSetExcitationFilterLink(const ::omero::model::FilterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unlinkExcitationFilter(const ::omero::model::FilterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeFilterSetExcitationFilterLinkFromBoth(const ::omero::model::FilterSetExcitationFilterLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::FilterSetLinkedExcitationFilterSeq linkedExcitationFilterList(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::DichroicPtr getDichroic(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setDichroic(const ::omero::model::DichroicPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unloadEmissionFilterLink(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int sizeOfEmissionFilterLink(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::FilterSetEmissionFilterLinkSeq copyEmissionFilterLink(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addFilterSetEmissionFilterLink(const ::omero::model::FilterSetEmissionFilterLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addAllFilterSetEmissionFilterLinkSet(const ::omero::model::FilterSetEmissionFilterLinkSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeFilterSetEmissionFilterLink(const ::omero::model::FilterSetEmissionFilterLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeAllFilterSetEmissionFilterLinkSet(const ::omero::model::FilterSetEmissionFilterLinkSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void clearEmissionFilterLink(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void reloadEmissionFilterLink(const ::omero::model::FilterSetPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::sys::CountMap getEmissionFilterLinkCountPerOwner(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::FilterSetEmissionFilterLinkPtr linkEmissionFilter(const ::omero::model::FilterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addFilterSetEmissionFilterLinkToBoth(const ::omero::model::FilterSetEmissionFilterLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::FilterSetEmissionFilterLinkSeq findFilterSetEmissionFilterLink(const ::omero::model::FilterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unlinkEmissionFilter(const ::omero::model::FilterPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeFilterSetEmissionFilterLinkFromBoth(const ::omero::model::FilterSetEmissionFilterLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::FilterSetLinkedEmissionFilterSeq linkedEmissionFilterList(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace omero
{

namespace model
{

class FilterSet : public ::omero::model::IObject
{
public:

    typedef FilterSetPrx ProxyType;
    typedef FilterSetPtr PointerType;

    FilterSet()
    {
    }

    FilterSet(const ::omero::RLongPtr& __ice_id, const ::omero::model::DetailsPtr& __ice_details, bool __ice_loaded, const ::omero::RIntPtr& __ice_version, const ::omero::RStringPtr& __ice_manufacturer, const ::omero::RStringPtr& __ice_model, const ::omero::RStringPtr& __ice_lotNumber, const ::omero::RStringPtr& __ice_serialNumber, const ::omero::model::InstrumentPtr& __ice_instrument, const ::omero::model::FilterSetExcitationFilterLinkSeq& __ice_excitationFilterLinkSeq, bool __ice_excitationFilterLinkLoaded, const ::omero::sys::CountMap& __ice_excitationFilterLinkCountPerOwner, const ::omero::model::DichroicPtr& __ice_dichroic, const ::omero::model::FilterSetEmissionFilterLinkSeq& __ice_emissionFilterLinkSeq, bool __ice_emissionFilterLinkLoaded, const ::omero::sys::CountMap& __ice_emissionFilterLinkCountPerOwner) :
        ::omero::model::IObject(__ice_id, __ice_details, __ice_loaded)
        ,
        version(__ice_version),
        manufacturer(__ice_manufacturer),
        model(__ice_model),
        lotNumber(__ice_lotNumber),
        serialNumber(__ice_serialNumber),
        instrument(__ice_instrument),
        excitationFilterLinkSeq(__ice_excitationFilterLinkSeq),
        excitationFilterLinkLoaded(__ice_excitationFilterLinkLoaded),
        excitationFilterLinkCountPerOwner(__ice_excitationFilterLinkCountPerOwner),
        dichroic(__ice_dichroic),
        emissionFilterLinkSeq(__ice_emissionFilterLinkSeq),
        emissionFilterLinkLoaded(__ice_emissionFilterLinkLoaded),
        emissionFilterLinkCountPerOwner(__ice_emissionFilterLinkCountPerOwner)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    virtual ::omero::RIntPtr getVersion(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getManufacturer(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getManufacturer(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setManufacturer(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setManufacturer(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getModel(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getModel(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setModel(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setModel(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getLotNumber(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getLotNumber(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setLotNumber(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setLotNumber(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getSerialNumber(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getSerialNumber(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setSerialNumber(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setSerialNumber(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::InstrumentPtr getInstrument(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getInstrument(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setInstrument(const ::omero::model::InstrumentPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setInstrument(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unloadExcitationFilterLink(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unloadExcitationFilterLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int sizeOfExcitationFilterLink(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sizeOfExcitationFilterLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::FilterSetExcitationFilterLinkSeq copyExcitationFilterLink(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___copyExcitationFilterLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addFilterSetExcitationFilterLink(const ::omero::model::FilterSetExcitationFilterLinkPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addFilterSetExcitationFilterLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addAllFilterSetExcitationFilterLinkSet(const ::omero::model::FilterSetExcitationFilterLinkSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addAllFilterSetExcitationFilterLinkSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeFilterSetExcitationFilterLink(const ::omero::model::FilterSetExcitationFilterLinkPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeFilterSetExcitationFilterLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeAllFilterSetExcitationFilterLinkSet(const ::omero::model::FilterSetExcitationFilterLinkSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeAllFilterSetExcitationFilterLinkSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void clearExcitationFilterLink(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___clearExcitationFilterLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reloadExcitationFilterLink(const ::omero::model::FilterSetPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reloadExcitationFilterLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::sys::CountMap getExcitationFilterLinkCountPerOwner(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getExcitationFilterLinkCountPerOwner(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::FilterSetExcitationFilterLinkPtr linkExcitationFilter(const ::omero::model::FilterPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___linkExcitationFilter(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addFilterSetExcitationFilterLinkToBoth(const ::omero::model::FilterSetExcitationFilterLinkPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addFilterSetExcitationFilterLinkToBoth(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::FilterSetExcitationFilterLinkSeq findFilterSetExcitationFilterLink(const ::omero::model::FilterPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___findFilterSetExcitationFilterLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unlinkExcitationFilter(const ::omero::model::FilterPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unlinkExcitationFilter(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeFilterSetExcitationFilterLinkFromBoth(const ::omero::model::FilterSetExcitationFilterLinkPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeFilterSetExcitationFilterLinkFromBoth(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::FilterSetLinkedExcitationFilterSeq linkedExcitationFilterList(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___linkedExcitationFilterList(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::DichroicPtr getDichroic(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getDichroic(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setDichroic(const ::omero::model::DichroicPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setDichroic(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unloadEmissionFilterLink(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unloadEmissionFilterLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int sizeOfEmissionFilterLink(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sizeOfEmissionFilterLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::FilterSetEmissionFilterLinkSeq copyEmissionFilterLink(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___copyEmissionFilterLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addFilterSetEmissionFilterLink(const ::omero::model::FilterSetEmissionFilterLinkPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addFilterSetEmissionFilterLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addAllFilterSetEmissionFilterLinkSet(const ::omero::model::FilterSetEmissionFilterLinkSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addAllFilterSetEmissionFilterLinkSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeFilterSetEmissionFilterLink(const ::omero::model::FilterSetEmissionFilterLinkPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeFilterSetEmissionFilterLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeAllFilterSetEmissionFilterLinkSet(const ::omero::model::FilterSetEmissionFilterLinkSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeAllFilterSetEmissionFilterLinkSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void clearEmissionFilterLink(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___clearEmissionFilterLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reloadEmissionFilterLink(const ::omero::model::FilterSetPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reloadEmissionFilterLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::sys::CountMap getEmissionFilterLinkCountPerOwner(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getEmissionFilterLinkCountPerOwner(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::FilterSetEmissionFilterLinkPtr linkEmissionFilter(const ::omero::model::FilterPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___linkEmissionFilter(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addFilterSetEmissionFilterLinkToBoth(const ::omero::model::FilterSetEmissionFilterLinkPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addFilterSetEmissionFilterLinkToBoth(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::FilterSetEmissionFilterLinkSeq findFilterSetEmissionFilterLink(const ::omero::model::FilterPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___findFilterSetEmissionFilterLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unlinkEmissionFilter(const ::omero::model::FilterPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unlinkEmissionFilter(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeFilterSetEmissionFilterLinkFromBoth(const ::omero::model::FilterSetEmissionFilterLinkPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeFilterSetEmissionFilterLinkFromBoth(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::FilterSetLinkedEmissionFilterSeq linkedEmissionFilterList(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___linkedEmissionFilterList(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::model::IObject::__writeImpl;
    using ::omero::model::IObject::__readImpl;
    #endif

    ::omero::RIntPtr version;

    ::omero::RStringPtr manufacturer;

    ::omero::RStringPtr model;

    ::omero::RStringPtr lotNumber;

    ::omero::RStringPtr serialNumber;

    ::omero::model::InstrumentPtr instrument;

    ::omero::model::FilterSetExcitationFilterLinkSeq excitationFilterLinkSeq;

    bool excitationFilterLinkLoaded;

    ::omero::sys::CountMap excitationFilterLinkCountPerOwner;

    ::omero::model::DichroicPtr dichroic;

    ::omero::model::FilterSetEmissionFilterLinkSeq emissionFilterLinkSeq;

    bool emissionFilterLinkLoaded;

    ::omero::sys::CountMap emissionFilterLinkCountPerOwner;
};

inline bool operator==(const FilterSet& l, const FilterSet& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const FilterSet& l, const FilterSet& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

}

namespace omero
{

namespace model
{

template<class T>
class CallbackNC_FilterSet_getVersion : public Callback_FilterSet_getVersion_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RIntPtr&);

    CallbackNC_FilterSet_getVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterSetPrx __proxy = ::omero::model::FilterSetPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FilterSet_getVersionPtr
newCallback_FilterSet_getVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_getVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_getVersionPtr
newCallback_FilterSet_getVersion(T* instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_getVersion<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilterSet_getVersion : public Callback_FilterSet_getVersion_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RIntPtr&, const CT&);

    Callback_FilterSet_getVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterSetPrx __proxy = ::omero::model::FilterSetPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FilterSet_getVersionPtr
newCallback_FilterSet_getVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_getVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_getVersionPtr
newCallback_FilterSet_getVersion(T* instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_getVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FilterSet_setVersion : public Callback_FilterSet_setVersion_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_FilterSet_setVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_FilterSet_setVersionPtr
newCallback_FilterSet_setVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_setVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_setVersionPtr
newCallback_FilterSet_setVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_setVersion<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_FilterSet_setVersionPtr
newCallback_FilterSet_setVersion(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_setVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_setVersionPtr
newCallback_FilterSet_setVersion(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_setVersion<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilterSet_setVersion : public Callback_FilterSet_setVersion_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_FilterSet_setVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_FilterSet_setVersionPtr
newCallback_FilterSet_setVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_setVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_setVersionPtr
newCallback_FilterSet_setVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_setVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_setVersionPtr
newCallback_FilterSet_setVersion(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_setVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_setVersionPtr
newCallback_FilterSet_setVersion(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_setVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_FilterSet_getManufacturer : public Callback_FilterSet_getManufacturer_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_FilterSet_getManufacturer(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterSetPrx __proxy = ::omero::model::FilterSetPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getManufacturer(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FilterSet_getManufacturerPtr
newCallback_FilterSet_getManufacturer(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_getManufacturer<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_getManufacturerPtr
newCallback_FilterSet_getManufacturer(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_getManufacturer<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilterSet_getManufacturer : public Callback_FilterSet_getManufacturer_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_FilterSet_getManufacturer(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterSetPrx __proxy = ::omero::model::FilterSetPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getManufacturer(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FilterSet_getManufacturerPtr
newCallback_FilterSet_getManufacturer(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_getManufacturer<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_getManufacturerPtr
newCallback_FilterSet_getManufacturer(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_getManufacturer<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FilterSet_setManufacturer : public Callback_FilterSet_setManufacturer_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_FilterSet_setManufacturer(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_FilterSet_setManufacturerPtr
newCallback_FilterSet_setManufacturer(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_setManufacturer<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_setManufacturerPtr
newCallback_FilterSet_setManufacturer(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_setManufacturer<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_FilterSet_setManufacturerPtr
newCallback_FilterSet_setManufacturer(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_setManufacturer<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_setManufacturerPtr
newCallback_FilterSet_setManufacturer(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_setManufacturer<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilterSet_setManufacturer : public Callback_FilterSet_setManufacturer_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_FilterSet_setManufacturer(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_FilterSet_setManufacturerPtr
newCallback_FilterSet_setManufacturer(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_setManufacturer<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_setManufacturerPtr
newCallback_FilterSet_setManufacturer(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_setManufacturer<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_setManufacturerPtr
newCallback_FilterSet_setManufacturer(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_setManufacturer<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_setManufacturerPtr
newCallback_FilterSet_setManufacturer(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_setManufacturer<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_FilterSet_getModel : public Callback_FilterSet_getModel_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_FilterSet_getModel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterSetPrx __proxy = ::omero::model::FilterSetPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getModel(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FilterSet_getModelPtr
newCallback_FilterSet_getModel(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_getModel<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_getModelPtr
newCallback_FilterSet_getModel(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_getModel<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilterSet_getModel : public Callback_FilterSet_getModel_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_FilterSet_getModel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterSetPrx __proxy = ::omero::model::FilterSetPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getModel(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FilterSet_getModelPtr
newCallback_FilterSet_getModel(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_getModel<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_getModelPtr
newCallback_FilterSet_getModel(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_getModel<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FilterSet_setModel : public Callback_FilterSet_setModel_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_FilterSet_setModel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_FilterSet_setModelPtr
newCallback_FilterSet_setModel(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_setModel<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_setModelPtr
newCallback_FilterSet_setModel(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_setModel<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_FilterSet_setModelPtr
newCallback_FilterSet_setModel(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_setModel<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_setModelPtr
newCallback_FilterSet_setModel(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_setModel<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilterSet_setModel : public Callback_FilterSet_setModel_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_FilterSet_setModel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_FilterSet_setModelPtr
newCallback_FilterSet_setModel(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_setModel<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_setModelPtr
newCallback_FilterSet_setModel(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_setModel<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_setModelPtr
newCallback_FilterSet_setModel(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_setModel<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_setModelPtr
newCallback_FilterSet_setModel(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_setModel<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_FilterSet_getLotNumber : public Callback_FilterSet_getLotNumber_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_FilterSet_getLotNumber(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterSetPrx __proxy = ::omero::model::FilterSetPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getLotNumber(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FilterSet_getLotNumberPtr
newCallback_FilterSet_getLotNumber(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_getLotNumber<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_getLotNumberPtr
newCallback_FilterSet_getLotNumber(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_getLotNumber<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilterSet_getLotNumber : public Callback_FilterSet_getLotNumber_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_FilterSet_getLotNumber(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterSetPrx __proxy = ::omero::model::FilterSetPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getLotNumber(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FilterSet_getLotNumberPtr
newCallback_FilterSet_getLotNumber(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_getLotNumber<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_getLotNumberPtr
newCallback_FilterSet_getLotNumber(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_getLotNumber<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FilterSet_setLotNumber : public Callback_FilterSet_setLotNumber_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_FilterSet_setLotNumber(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_FilterSet_setLotNumberPtr
newCallback_FilterSet_setLotNumber(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_setLotNumber<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_setLotNumberPtr
newCallback_FilterSet_setLotNumber(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_setLotNumber<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_FilterSet_setLotNumberPtr
newCallback_FilterSet_setLotNumber(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_setLotNumber<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_setLotNumberPtr
newCallback_FilterSet_setLotNumber(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_setLotNumber<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilterSet_setLotNumber : public Callback_FilterSet_setLotNumber_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_FilterSet_setLotNumber(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_FilterSet_setLotNumberPtr
newCallback_FilterSet_setLotNumber(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_setLotNumber<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_setLotNumberPtr
newCallback_FilterSet_setLotNumber(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_setLotNumber<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_setLotNumberPtr
newCallback_FilterSet_setLotNumber(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_setLotNumber<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_setLotNumberPtr
newCallback_FilterSet_setLotNumber(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_setLotNumber<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_FilterSet_getSerialNumber : public Callback_FilterSet_getSerialNumber_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_FilterSet_getSerialNumber(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterSetPrx __proxy = ::omero::model::FilterSetPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getSerialNumber(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FilterSet_getSerialNumberPtr
newCallback_FilterSet_getSerialNumber(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_getSerialNumber<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_getSerialNumberPtr
newCallback_FilterSet_getSerialNumber(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_getSerialNumber<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilterSet_getSerialNumber : public Callback_FilterSet_getSerialNumber_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_FilterSet_getSerialNumber(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterSetPrx __proxy = ::omero::model::FilterSetPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getSerialNumber(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FilterSet_getSerialNumberPtr
newCallback_FilterSet_getSerialNumber(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_getSerialNumber<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_getSerialNumberPtr
newCallback_FilterSet_getSerialNumber(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_getSerialNumber<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FilterSet_setSerialNumber : public Callback_FilterSet_setSerialNumber_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_FilterSet_setSerialNumber(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_FilterSet_setSerialNumberPtr
newCallback_FilterSet_setSerialNumber(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_setSerialNumber<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_setSerialNumberPtr
newCallback_FilterSet_setSerialNumber(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_setSerialNumber<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_FilterSet_setSerialNumberPtr
newCallback_FilterSet_setSerialNumber(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_setSerialNumber<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_setSerialNumberPtr
newCallback_FilterSet_setSerialNumber(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_setSerialNumber<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilterSet_setSerialNumber : public Callback_FilterSet_setSerialNumber_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_FilterSet_setSerialNumber(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_FilterSet_setSerialNumberPtr
newCallback_FilterSet_setSerialNumber(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_setSerialNumber<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_setSerialNumberPtr
newCallback_FilterSet_setSerialNumber(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_setSerialNumber<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_setSerialNumberPtr
newCallback_FilterSet_setSerialNumber(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_setSerialNumber<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_setSerialNumberPtr
newCallback_FilterSet_setSerialNumber(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_setSerialNumber<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_FilterSet_getInstrument : public Callback_FilterSet_getInstrument_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::InstrumentPtr&);

    CallbackNC_FilterSet_getInstrument(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterSetPrx __proxy = ::omero::model::FilterSetPrx::uncheckedCast(__result->getProxy());
        ::omero::model::InstrumentPtr __ret;
        try
        {
            __ret = __proxy->end_getInstrument(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FilterSet_getInstrumentPtr
newCallback_FilterSet_getInstrument(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::InstrumentPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_getInstrument<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_getInstrumentPtr
newCallback_FilterSet_getInstrument(T* instance, void (T::*cb)(const ::omero::model::InstrumentPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_getInstrument<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilterSet_getInstrument : public Callback_FilterSet_getInstrument_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::InstrumentPtr&, const CT&);

    Callback_FilterSet_getInstrument(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterSetPrx __proxy = ::omero::model::FilterSetPrx::uncheckedCast(__result->getProxy());
        ::omero::model::InstrumentPtr __ret;
        try
        {
            __ret = __proxy->end_getInstrument(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FilterSet_getInstrumentPtr
newCallback_FilterSet_getInstrument(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::InstrumentPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_getInstrument<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_getInstrumentPtr
newCallback_FilterSet_getInstrument(T* instance, void (T::*cb)(const ::omero::model::InstrumentPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_getInstrument<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FilterSet_setInstrument : public Callback_FilterSet_setInstrument_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_FilterSet_setInstrument(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_FilterSet_setInstrumentPtr
newCallback_FilterSet_setInstrument(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_setInstrument<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_setInstrumentPtr
newCallback_FilterSet_setInstrument(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_setInstrument<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_FilterSet_setInstrumentPtr
newCallback_FilterSet_setInstrument(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_setInstrument<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_setInstrumentPtr
newCallback_FilterSet_setInstrument(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_setInstrument<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilterSet_setInstrument : public Callback_FilterSet_setInstrument_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_FilterSet_setInstrument(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_FilterSet_setInstrumentPtr
newCallback_FilterSet_setInstrument(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_setInstrument<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_setInstrumentPtr
newCallback_FilterSet_setInstrument(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_setInstrument<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_setInstrumentPtr
newCallback_FilterSet_setInstrument(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_setInstrument<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_setInstrumentPtr
newCallback_FilterSet_setInstrument(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_setInstrument<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_FilterSet_unloadExcitationFilterLink : public Callback_FilterSet_unloadExcitationFilterLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_FilterSet_unloadExcitationFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_FilterSet_unloadExcitationFilterLinkPtr
newCallback_FilterSet_unloadExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_unloadExcitationFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_unloadExcitationFilterLinkPtr
newCallback_FilterSet_unloadExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_unloadExcitationFilterLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_FilterSet_unloadExcitationFilterLinkPtr
newCallback_FilterSet_unloadExcitationFilterLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_unloadExcitationFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_unloadExcitationFilterLinkPtr
newCallback_FilterSet_unloadExcitationFilterLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_unloadExcitationFilterLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilterSet_unloadExcitationFilterLink : public Callback_FilterSet_unloadExcitationFilterLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_FilterSet_unloadExcitationFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_FilterSet_unloadExcitationFilterLinkPtr
newCallback_FilterSet_unloadExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_unloadExcitationFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_unloadExcitationFilterLinkPtr
newCallback_FilterSet_unloadExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_unloadExcitationFilterLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_unloadExcitationFilterLinkPtr
newCallback_FilterSet_unloadExcitationFilterLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_unloadExcitationFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_unloadExcitationFilterLinkPtr
newCallback_FilterSet_unloadExcitationFilterLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_unloadExcitationFilterLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_FilterSet_sizeOfExcitationFilterLink : public Callback_FilterSet_sizeOfExcitationFilterLink_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_FilterSet_sizeOfExcitationFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterSetPrx __proxy = ::omero::model::FilterSetPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfExcitationFilterLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FilterSet_sizeOfExcitationFilterLinkPtr
newCallback_FilterSet_sizeOfExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_sizeOfExcitationFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_sizeOfExcitationFilterLinkPtr
newCallback_FilterSet_sizeOfExcitationFilterLink(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_sizeOfExcitationFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilterSet_sizeOfExcitationFilterLink : public Callback_FilterSet_sizeOfExcitationFilterLink_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_FilterSet_sizeOfExcitationFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterSetPrx __proxy = ::omero::model::FilterSetPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfExcitationFilterLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FilterSet_sizeOfExcitationFilterLinkPtr
newCallback_FilterSet_sizeOfExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_sizeOfExcitationFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_sizeOfExcitationFilterLinkPtr
newCallback_FilterSet_sizeOfExcitationFilterLink(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_sizeOfExcitationFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FilterSet_copyExcitationFilterLink : public Callback_FilterSet_copyExcitationFilterLink_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::FilterSetExcitationFilterLinkSeq&);

    CallbackNC_FilterSet_copyExcitationFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterSetPrx __proxy = ::omero::model::FilterSetPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilterSetExcitationFilterLinkSeq __ret;
        try
        {
            __ret = __proxy->end_copyExcitationFilterLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FilterSet_copyExcitationFilterLinkPtr
newCallback_FilterSet_copyExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilterSetExcitationFilterLinkSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_copyExcitationFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_copyExcitationFilterLinkPtr
newCallback_FilterSet_copyExcitationFilterLink(T* instance, void (T::*cb)(const ::omero::model::FilterSetExcitationFilterLinkSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_copyExcitationFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilterSet_copyExcitationFilterLink : public Callback_FilterSet_copyExcitationFilterLink_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::FilterSetExcitationFilterLinkSeq&, const CT&);

    Callback_FilterSet_copyExcitationFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterSetPrx __proxy = ::omero::model::FilterSetPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilterSetExcitationFilterLinkSeq __ret;
        try
        {
            __ret = __proxy->end_copyExcitationFilterLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FilterSet_copyExcitationFilterLinkPtr
newCallback_FilterSet_copyExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilterSetExcitationFilterLinkSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_copyExcitationFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_copyExcitationFilterLinkPtr
newCallback_FilterSet_copyExcitationFilterLink(T* instance, void (T::*cb)(const ::omero::model::FilterSetExcitationFilterLinkSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_copyExcitationFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FilterSet_addFilterSetExcitationFilterLink : public Callback_FilterSet_addFilterSetExcitationFilterLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_FilterSet_addFilterSetExcitationFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_FilterSet_addFilterSetExcitationFilterLinkPtr
newCallback_FilterSet_addFilterSetExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_addFilterSetExcitationFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_addFilterSetExcitationFilterLinkPtr
newCallback_FilterSet_addFilterSetExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_addFilterSetExcitationFilterLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_FilterSet_addFilterSetExcitationFilterLinkPtr
newCallback_FilterSet_addFilterSetExcitationFilterLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_addFilterSetExcitationFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_addFilterSetExcitationFilterLinkPtr
newCallback_FilterSet_addFilterSetExcitationFilterLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_addFilterSetExcitationFilterLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilterSet_addFilterSetExcitationFilterLink : public Callback_FilterSet_addFilterSetExcitationFilterLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_FilterSet_addFilterSetExcitationFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_FilterSet_addFilterSetExcitationFilterLinkPtr
newCallback_FilterSet_addFilterSetExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_addFilterSetExcitationFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_addFilterSetExcitationFilterLinkPtr
newCallback_FilterSet_addFilterSetExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_addFilterSetExcitationFilterLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_addFilterSetExcitationFilterLinkPtr
newCallback_FilterSet_addFilterSetExcitationFilterLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_addFilterSetExcitationFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_addFilterSetExcitationFilterLinkPtr
newCallback_FilterSet_addFilterSetExcitationFilterLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_addFilterSetExcitationFilterLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_FilterSet_addAllFilterSetExcitationFilterLinkSet : public Callback_FilterSet_addAllFilterSetExcitationFilterLinkSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_FilterSet_addAllFilterSetExcitationFilterLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_FilterSet_addAllFilterSetExcitationFilterLinkSetPtr
newCallback_FilterSet_addAllFilterSetExcitationFilterLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_addAllFilterSetExcitationFilterLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_addAllFilterSetExcitationFilterLinkSetPtr
newCallback_FilterSet_addAllFilterSetExcitationFilterLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_addAllFilterSetExcitationFilterLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_FilterSet_addAllFilterSetExcitationFilterLinkSetPtr
newCallback_FilterSet_addAllFilterSetExcitationFilterLinkSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_addAllFilterSetExcitationFilterLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_addAllFilterSetExcitationFilterLinkSetPtr
newCallback_FilterSet_addAllFilterSetExcitationFilterLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_addAllFilterSetExcitationFilterLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilterSet_addAllFilterSetExcitationFilterLinkSet : public Callback_FilterSet_addAllFilterSetExcitationFilterLinkSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_FilterSet_addAllFilterSetExcitationFilterLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_FilterSet_addAllFilterSetExcitationFilterLinkSetPtr
newCallback_FilterSet_addAllFilterSetExcitationFilterLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_addAllFilterSetExcitationFilterLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_addAllFilterSetExcitationFilterLinkSetPtr
newCallback_FilterSet_addAllFilterSetExcitationFilterLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_addAllFilterSetExcitationFilterLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_addAllFilterSetExcitationFilterLinkSetPtr
newCallback_FilterSet_addAllFilterSetExcitationFilterLinkSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_addAllFilterSetExcitationFilterLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_addAllFilterSetExcitationFilterLinkSetPtr
newCallback_FilterSet_addAllFilterSetExcitationFilterLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_addAllFilterSetExcitationFilterLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_FilterSet_removeFilterSetExcitationFilterLink : public Callback_FilterSet_removeFilterSetExcitationFilterLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_FilterSet_removeFilterSetExcitationFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_FilterSet_removeFilterSetExcitationFilterLinkPtr
newCallback_FilterSet_removeFilterSetExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_removeFilterSetExcitationFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_removeFilterSetExcitationFilterLinkPtr
newCallback_FilterSet_removeFilterSetExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_removeFilterSetExcitationFilterLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_FilterSet_removeFilterSetExcitationFilterLinkPtr
newCallback_FilterSet_removeFilterSetExcitationFilterLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_removeFilterSetExcitationFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_removeFilterSetExcitationFilterLinkPtr
newCallback_FilterSet_removeFilterSetExcitationFilterLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_removeFilterSetExcitationFilterLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilterSet_removeFilterSetExcitationFilterLink : public Callback_FilterSet_removeFilterSetExcitationFilterLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_FilterSet_removeFilterSetExcitationFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_FilterSet_removeFilterSetExcitationFilterLinkPtr
newCallback_FilterSet_removeFilterSetExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_removeFilterSetExcitationFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_removeFilterSetExcitationFilterLinkPtr
newCallback_FilterSet_removeFilterSetExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_removeFilterSetExcitationFilterLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_removeFilterSetExcitationFilterLinkPtr
newCallback_FilterSet_removeFilterSetExcitationFilterLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_removeFilterSetExcitationFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_removeFilterSetExcitationFilterLinkPtr
newCallback_FilterSet_removeFilterSetExcitationFilterLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_removeFilterSetExcitationFilterLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_FilterSet_removeAllFilterSetExcitationFilterLinkSet : public Callback_FilterSet_removeAllFilterSetExcitationFilterLinkSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_FilterSet_removeAllFilterSetExcitationFilterLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_FilterSet_removeAllFilterSetExcitationFilterLinkSetPtr
newCallback_FilterSet_removeAllFilterSetExcitationFilterLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_removeAllFilterSetExcitationFilterLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_removeAllFilterSetExcitationFilterLinkSetPtr
newCallback_FilterSet_removeAllFilterSetExcitationFilterLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_removeAllFilterSetExcitationFilterLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_FilterSet_removeAllFilterSetExcitationFilterLinkSetPtr
newCallback_FilterSet_removeAllFilterSetExcitationFilterLinkSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_removeAllFilterSetExcitationFilterLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_removeAllFilterSetExcitationFilterLinkSetPtr
newCallback_FilterSet_removeAllFilterSetExcitationFilterLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_removeAllFilterSetExcitationFilterLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilterSet_removeAllFilterSetExcitationFilterLinkSet : public Callback_FilterSet_removeAllFilterSetExcitationFilterLinkSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_FilterSet_removeAllFilterSetExcitationFilterLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_FilterSet_removeAllFilterSetExcitationFilterLinkSetPtr
newCallback_FilterSet_removeAllFilterSetExcitationFilterLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_removeAllFilterSetExcitationFilterLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_removeAllFilterSetExcitationFilterLinkSetPtr
newCallback_FilterSet_removeAllFilterSetExcitationFilterLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_removeAllFilterSetExcitationFilterLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_removeAllFilterSetExcitationFilterLinkSetPtr
newCallback_FilterSet_removeAllFilterSetExcitationFilterLinkSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_removeAllFilterSetExcitationFilterLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_removeAllFilterSetExcitationFilterLinkSetPtr
newCallback_FilterSet_removeAllFilterSetExcitationFilterLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_removeAllFilterSetExcitationFilterLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_FilterSet_clearExcitationFilterLink : public Callback_FilterSet_clearExcitationFilterLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_FilterSet_clearExcitationFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_FilterSet_clearExcitationFilterLinkPtr
newCallback_FilterSet_clearExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_clearExcitationFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_clearExcitationFilterLinkPtr
newCallback_FilterSet_clearExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_clearExcitationFilterLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_FilterSet_clearExcitationFilterLinkPtr
newCallback_FilterSet_clearExcitationFilterLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_clearExcitationFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_clearExcitationFilterLinkPtr
newCallback_FilterSet_clearExcitationFilterLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_clearExcitationFilterLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilterSet_clearExcitationFilterLink : public Callback_FilterSet_clearExcitationFilterLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_FilterSet_clearExcitationFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_FilterSet_clearExcitationFilterLinkPtr
newCallback_FilterSet_clearExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_clearExcitationFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_clearExcitationFilterLinkPtr
newCallback_FilterSet_clearExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_clearExcitationFilterLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_clearExcitationFilterLinkPtr
newCallback_FilterSet_clearExcitationFilterLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_clearExcitationFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_clearExcitationFilterLinkPtr
newCallback_FilterSet_clearExcitationFilterLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_clearExcitationFilterLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_FilterSet_reloadExcitationFilterLink : public Callback_FilterSet_reloadExcitationFilterLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_FilterSet_reloadExcitationFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_FilterSet_reloadExcitationFilterLinkPtr
newCallback_FilterSet_reloadExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_reloadExcitationFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_reloadExcitationFilterLinkPtr
newCallback_FilterSet_reloadExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_reloadExcitationFilterLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_FilterSet_reloadExcitationFilterLinkPtr
newCallback_FilterSet_reloadExcitationFilterLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_reloadExcitationFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_reloadExcitationFilterLinkPtr
newCallback_FilterSet_reloadExcitationFilterLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_reloadExcitationFilterLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilterSet_reloadExcitationFilterLink : public Callback_FilterSet_reloadExcitationFilterLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_FilterSet_reloadExcitationFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_FilterSet_reloadExcitationFilterLinkPtr
newCallback_FilterSet_reloadExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_reloadExcitationFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_reloadExcitationFilterLinkPtr
newCallback_FilterSet_reloadExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_reloadExcitationFilterLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_reloadExcitationFilterLinkPtr
newCallback_FilterSet_reloadExcitationFilterLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_reloadExcitationFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_reloadExcitationFilterLinkPtr
newCallback_FilterSet_reloadExcitationFilterLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_reloadExcitationFilterLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_FilterSet_getExcitationFilterLinkCountPerOwner : public Callback_FilterSet_getExcitationFilterLinkCountPerOwner_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::sys::CountMap&);

    CallbackNC_FilterSet_getExcitationFilterLinkCountPerOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterSetPrx __proxy = ::omero::model::FilterSetPrx::uncheckedCast(__result->getProxy());
        ::omero::sys::CountMap __ret;
        try
        {
            __ret = __proxy->end_getExcitationFilterLinkCountPerOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FilterSet_getExcitationFilterLinkCountPerOwnerPtr
newCallback_FilterSet_getExcitationFilterLinkCountPerOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::CountMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_getExcitationFilterLinkCountPerOwner<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_getExcitationFilterLinkCountPerOwnerPtr
newCallback_FilterSet_getExcitationFilterLinkCountPerOwner(T* instance, void (T::*cb)(const ::omero::sys::CountMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_getExcitationFilterLinkCountPerOwner<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilterSet_getExcitationFilterLinkCountPerOwner : public Callback_FilterSet_getExcitationFilterLinkCountPerOwner_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::sys::CountMap&, const CT&);

    Callback_FilterSet_getExcitationFilterLinkCountPerOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterSetPrx __proxy = ::omero::model::FilterSetPrx::uncheckedCast(__result->getProxy());
        ::omero::sys::CountMap __ret;
        try
        {
            __ret = __proxy->end_getExcitationFilterLinkCountPerOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FilterSet_getExcitationFilterLinkCountPerOwnerPtr
newCallback_FilterSet_getExcitationFilterLinkCountPerOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::CountMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_getExcitationFilterLinkCountPerOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_getExcitationFilterLinkCountPerOwnerPtr
newCallback_FilterSet_getExcitationFilterLinkCountPerOwner(T* instance, void (T::*cb)(const ::omero::sys::CountMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_getExcitationFilterLinkCountPerOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FilterSet_linkExcitationFilter : public Callback_FilterSet_linkExcitationFilter_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::FilterSetExcitationFilterLinkPtr&);

    CallbackNC_FilterSet_linkExcitationFilter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterSetPrx __proxy = ::omero::model::FilterSetPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilterSetExcitationFilterLinkPtr __ret;
        try
        {
            __ret = __proxy->end_linkExcitationFilter(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FilterSet_linkExcitationFilterPtr
newCallback_FilterSet_linkExcitationFilter(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilterSetExcitationFilterLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_linkExcitationFilter<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_linkExcitationFilterPtr
newCallback_FilterSet_linkExcitationFilter(T* instance, void (T::*cb)(const ::omero::model::FilterSetExcitationFilterLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_linkExcitationFilter<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilterSet_linkExcitationFilter : public Callback_FilterSet_linkExcitationFilter_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::FilterSetExcitationFilterLinkPtr&, const CT&);

    Callback_FilterSet_linkExcitationFilter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterSetPrx __proxy = ::omero::model::FilterSetPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilterSetExcitationFilterLinkPtr __ret;
        try
        {
            __ret = __proxy->end_linkExcitationFilter(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FilterSet_linkExcitationFilterPtr
newCallback_FilterSet_linkExcitationFilter(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilterSetExcitationFilterLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_linkExcitationFilter<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_linkExcitationFilterPtr
newCallback_FilterSet_linkExcitationFilter(T* instance, void (T::*cb)(const ::omero::model::FilterSetExcitationFilterLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_linkExcitationFilter<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FilterSet_addFilterSetExcitationFilterLinkToBoth : public Callback_FilterSet_addFilterSetExcitationFilterLinkToBoth_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_FilterSet_addFilterSetExcitationFilterLinkToBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_FilterSet_addFilterSetExcitationFilterLinkToBothPtr
newCallback_FilterSet_addFilterSetExcitationFilterLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_addFilterSetExcitationFilterLinkToBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_addFilterSetExcitationFilterLinkToBothPtr
newCallback_FilterSet_addFilterSetExcitationFilterLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_addFilterSetExcitationFilterLinkToBoth<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_FilterSet_addFilterSetExcitationFilterLinkToBothPtr
newCallback_FilterSet_addFilterSetExcitationFilterLinkToBoth(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_addFilterSetExcitationFilterLinkToBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_addFilterSetExcitationFilterLinkToBothPtr
newCallback_FilterSet_addFilterSetExcitationFilterLinkToBoth(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_addFilterSetExcitationFilterLinkToBoth<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilterSet_addFilterSetExcitationFilterLinkToBoth : public Callback_FilterSet_addFilterSetExcitationFilterLinkToBoth_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_FilterSet_addFilterSetExcitationFilterLinkToBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_FilterSet_addFilterSetExcitationFilterLinkToBothPtr
newCallback_FilterSet_addFilterSetExcitationFilterLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_addFilterSetExcitationFilterLinkToBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_addFilterSetExcitationFilterLinkToBothPtr
newCallback_FilterSet_addFilterSetExcitationFilterLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_addFilterSetExcitationFilterLinkToBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_addFilterSetExcitationFilterLinkToBothPtr
newCallback_FilterSet_addFilterSetExcitationFilterLinkToBoth(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_addFilterSetExcitationFilterLinkToBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_addFilterSetExcitationFilterLinkToBothPtr
newCallback_FilterSet_addFilterSetExcitationFilterLinkToBoth(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_addFilterSetExcitationFilterLinkToBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_FilterSet_findFilterSetExcitationFilterLink : public Callback_FilterSet_findFilterSetExcitationFilterLink_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::FilterSetExcitationFilterLinkSeq&);

    CallbackNC_FilterSet_findFilterSetExcitationFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterSetPrx __proxy = ::omero::model::FilterSetPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilterSetExcitationFilterLinkSeq __ret;
        try
        {
            __ret = __proxy->end_findFilterSetExcitationFilterLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FilterSet_findFilterSetExcitationFilterLinkPtr
newCallback_FilterSet_findFilterSetExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilterSetExcitationFilterLinkSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_findFilterSetExcitationFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_findFilterSetExcitationFilterLinkPtr
newCallback_FilterSet_findFilterSetExcitationFilterLink(T* instance, void (T::*cb)(const ::omero::model::FilterSetExcitationFilterLinkSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_findFilterSetExcitationFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilterSet_findFilterSetExcitationFilterLink : public Callback_FilterSet_findFilterSetExcitationFilterLink_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::FilterSetExcitationFilterLinkSeq&, const CT&);

    Callback_FilterSet_findFilterSetExcitationFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterSetPrx __proxy = ::omero::model::FilterSetPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilterSetExcitationFilterLinkSeq __ret;
        try
        {
            __ret = __proxy->end_findFilterSetExcitationFilterLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FilterSet_findFilterSetExcitationFilterLinkPtr
newCallback_FilterSet_findFilterSetExcitationFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilterSetExcitationFilterLinkSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_findFilterSetExcitationFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_findFilterSetExcitationFilterLinkPtr
newCallback_FilterSet_findFilterSetExcitationFilterLink(T* instance, void (T::*cb)(const ::omero::model::FilterSetExcitationFilterLinkSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_findFilterSetExcitationFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FilterSet_unlinkExcitationFilter : public Callback_FilterSet_unlinkExcitationFilter_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_FilterSet_unlinkExcitationFilter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_FilterSet_unlinkExcitationFilterPtr
newCallback_FilterSet_unlinkExcitationFilter(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_unlinkExcitationFilter<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_unlinkExcitationFilterPtr
newCallback_FilterSet_unlinkExcitationFilter(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_unlinkExcitationFilter<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_FilterSet_unlinkExcitationFilterPtr
newCallback_FilterSet_unlinkExcitationFilter(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_unlinkExcitationFilter<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_unlinkExcitationFilterPtr
newCallback_FilterSet_unlinkExcitationFilter(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_unlinkExcitationFilter<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilterSet_unlinkExcitationFilter : public Callback_FilterSet_unlinkExcitationFilter_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_FilterSet_unlinkExcitationFilter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_FilterSet_unlinkExcitationFilterPtr
newCallback_FilterSet_unlinkExcitationFilter(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_unlinkExcitationFilter<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_unlinkExcitationFilterPtr
newCallback_FilterSet_unlinkExcitationFilter(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_unlinkExcitationFilter<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_unlinkExcitationFilterPtr
newCallback_FilterSet_unlinkExcitationFilter(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_unlinkExcitationFilter<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_unlinkExcitationFilterPtr
newCallback_FilterSet_unlinkExcitationFilter(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_unlinkExcitationFilter<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_FilterSet_removeFilterSetExcitationFilterLinkFromBoth : public Callback_FilterSet_removeFilterSetExcitationFilterLinkFromBoth_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_FilterSet_removeFilterSetExcitationFilterLinkFromBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_FilterSet_removeFilterSetExcitationFilterLinkFromBothPtr
newCallback_FilterSet_removeFilterSetExcitationFilterLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_removeFilterSetExcitationFilterLinkFromBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_removeFilterSetExcitationFilterLinkFromBothPtr
newCallback_FilterSet_removeFilterSetExcitationFilterLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_removeFilterSetExcitationFilterLinkFromBoth<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_FilterSet_removeFilterSetExcitationFilterLinkFromBothPtr
newCallback_FilterSet_removeFilterSetExcitationFilterLinkFromBoth(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_removeFilterSetExcitationFilterLinkFromBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_removeFilterSetExcitationFilterLinkFromBothPtr
newCallback_FilterSet_removeFilterSetExcitationFilterLinkFromBoth(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_removeFilterSetExcitationFilterLinkFromBoth<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilterSet_removeFilterSetExcitationFilterLinkFromBoth : public Callback_FilterSet_removeFilterSetExcitationFilterLinkFromBoth_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_FilterSet_removeFilterSetExcitationFilterLinkFromBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_FilterSet_removeFilterSetExcitationFilterLinkFromBothPtr
newCallback_FilterSet_removeFilterSetExcitationFilterLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_removeFilterSetExcitationFilterLinkFromBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_removeFilterSetExcitationFilterLinkFromBothPtr
newCallback_FilterSet_removeFilterSetExcitationFilterLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_removeFilterSetExcitationFilterLinkFromBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_removeFilterSetExcitationFilterLinkFromBothPtr
newCallback_FilterSet_removeFilterSetExcitationFilterLinkFromBoth(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_removeFilterSetExcitationFilterLinkFromBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_removeFilterSetExcitationFilterLinkFromBothPtr
newCallback_FilterSet_removeFilterSetExcitationFilterLinkFromBoth(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_removeFilterSetExcitationFilterLinkFromBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_FilterSet_linkedExcitationFilterList : public Callback_FilterSet_linkedExcitationFilterList_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::FilterSetLinkedExcitationFilterSeq&);

    CallbackNC_FilterSet_linkedExcitationFilterList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterSetPrx __proxy = ::omero::model::FilterSetPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilterSetLinkedExcitationFilterSeq __ret;
        try
        {
            __ret = __proxy->end_linkedExcitationFilterList(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FilterSet_linkedExcitationFilterListPtr
newCallback_FilterSet_linkedExcitationFilterList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilterSetLinkedExcitationFilterSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_linkedExcitationFilterList<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_linkedExcitationFilterListPtr
newCallback_FilterSet_linkedExcitationFilterList(T* instance, void (T::*cb)(const ::omero::model::FilterSetLinkedExcitationFilterSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_linkedExcitationFilterList<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilterSet_linkedExcitationFilterList : public Callback_FilterSet_linkedExcitationFilterList_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::FilterSetLinkedExcitationFilterSeq&, const CT&);

    Callback_FilterSet_linkedExcitationFilterList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterSetPrx __proxy = ::omero::model::FilterSetPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilterSetLinkedExcitationFilterSeq __ret;
        try
        {
            __ret = __proxy->end_linkedExcitationFilterList(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FilterSet_linkedExcitationFilterListPtr
newCallback_FilterSet_linkedExcitationFilterList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilterSetLinkedExcitationFilterSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_linkedExcitationFilterList<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_linkedExcitationFilterListPtr
newCallback_FilterSet_linkedExcitationFilterList(T* instance, void (T::*cb)(const ::omero::model::FilterSetLinkedExcitationFilterSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_linkedExcitationFilterList<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FilterSet_getDichroic : public Callback_FilterSet_getDichroic_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::DichroicPtr&);

    CallbackNC_FilterSet_getDichroic(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterSetPrx __proxy = ::omero::model::FilterSetPrx::uncheckedCast(__result->getProxy());
        ::omero::model::DichroicPtr __ret;
        try
        {
            __ret = __proxy->end_getDichroic(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FilterSet_getDichroicPtr
newCallback_FilterSet_getDichroic(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::DichroicPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_getDichroic<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_getDichroicPtr
newCallback_FilterSet_getDichroic(T* instance, void (T::*cb)(const ::omero::model::DichroicPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_getDichroic<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilterSet_getDichroic : public Callback_FilterSet_getDichroic_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::DichroicPtr&, const CT&);

    Callback_FilterSet_getDichroic(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterSetPrx __proxy = ::omero::model::FilterSetPrx::uncheckedCast(__result->getProxy());
        ::omero::model::DichroicPtr __ret;
        try
        {
            __ret = __proxy->end_getDichroic(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FilterSet_getDichroicPtr
newCallback_FilterSet_getDichroic(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::DichroicPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_getDichroic<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_getDichroicPtr
newCallback_FilterSet_getDichroic(T* instance, void (T::*cb)(const ::omero::model::DichroicPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_getDichroic<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FilterSet_setDichroic : public Callback_FilterSet_setDichroic_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_FilterSet_setDichroic(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_FilterSet_setDichroicPtr
newCallback_FilterSet_setDichroic(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_setDichroic<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_setDichroicPtr
newCallback_FilterSet_setDichroic(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_setDichroic<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_FilterSet_setDichroicPtr
newCallback_FilterSet_setDichroic(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_setDichroic<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_setDichroicPtr
newCallback_FilterSet_setDichroic(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_setDichroic<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilterSet_setDichroic : public Callback_FilterSet_setDichroic_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_FilterSet_setDichroic(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_FilterSet_setDichroicPtr
newCallback_FilterSet_setDichroic(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_setDichroic<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_setDichroicPtr
newCallback_FilterSet_setDichroic(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_setDichroic<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_setDichroicPtr
newCallback_FilterSet_setDichroic(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_setDichroic<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_setDichroicPtr
newCallback_FilterSet_setDichroic(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_setDichroic<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_FilterSet_unloadEmissionFilterLink : public Callback_FilterSet_unloadEmissionFilterLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_FilterSet_unloadEmissionFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_FilterSet_unloadEmissionFilterLinkPtr
newCallback_FilterSet_unloadEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_unloadEmissionFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_unloadEmissionFilterLinkPtr
newCallback_FilterSet_unloadEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_unloadEmissionFilterLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_FilterSet_unloadEmissionFilterLinkPtr
newCallback_FilterSet_unloadEmissionFilterLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_unloadEmissionFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_unloadEmissionFilterLinkPtr
newCallback_FilterSet_unloadEmissionFilterLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_unloadEmissionFilterLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilterSet_unloadEmissionFilterLink : public Callback_FilterSet_unloadEmissionFilterLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_FilterSet_unloadEmissionFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_FilterSet_unloadEmissionFilterLinkPtr
newCallback_FilterSet_unloadEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_unloadEmissionFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_unloadEmissionFilterLinkPtr
newCallback_FilterSet_unloadEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_unloadEmissionFilterLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_unloadEmissionFilterLinkPtr
newCallback_FilterSet_unloadEmissionFilterLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_unloadEmissionFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_unloadEmissionFilterLinkPtr
newCallback_FilterSet_unloadEmissionFilterLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_unloadEmissionFilterLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_FilterSet_sizeOfEmissionFilterLink : public Callback_FilterSet_sizeOfEmissionFilterLink_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_FilterSet_sizeOfEmissionFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterSetPrx __proxy = ::omero::model::FilterSetPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfEmissionFilterLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FilterSet_sizeOfEmissionFilterLinkPtr
newCallback_FilterSet_sizeOfEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_sizeOfEmissionFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_sizeOfEmissionFilterLinkPtr
newCallback_FilterSet_sizeOfEmissionFilterLink(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_sizeOfEmissionFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilterSet_sizeOfEmissionFilterLink : public Callback_FilterSet_sizeOfEmissionFilterLink_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_FilterSet_sizeOfEmissionFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterSetPrx __proxy = ::omero::model::FilterSetPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfEmissionFilterLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FilterSet_sizeOfEmissionFilterLinkPtr
newCallback_FilterSet_sizeOfEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_sizeOfEmissionFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_sizeOfEmissionFilterLinkPtr
newCallback_FilterSet_sizeOfEmissionFilterLink(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_sizeOfEmissionFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FilterSet_copyEmissionFilterLink : public Callback_FilterSet_copyEmissionFilterLink_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::FilterSetEmissionFilterLinkSeq&);

    CallbackNC_FilterSet_copyEmissionFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterSetPrx __proxy = ::omero::model::FilterSetPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilterSetEmissionFilterLinkSeq __ret;
        try
        {
            __ret = __proxy->end_copyEmissionFilterLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FilterSet_copyEmissionFilterLinkPtr
newCallback_FilterSet_copyEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilterSetEmissionFilterLinkSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_copyEmissionFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_copyEmissionFilterLinkPtr
newCallback_FilterSet_copyEmissionFilterLink(T* instance, void (T::*cb)(const ::omero::model::FilterSetEmissionFilterLinkSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_copyEmissionFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilterSet_copyEmissionFilterLink : public Callback_FilterSet_copyEmissionFilterLink_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::FilterSetEmissionFilterLinkSeq&, const CT&);

    Callback_FilterSet_copyEmissionFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterSetPrx __proxy = ::omero::model::FilterSetPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilterSetEmissionFilterLinkSeq __ret;
        try
        {
            __ret = __proxy->end_copyEmissionFilterLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FilterSet_copyEmissionFilterLinkPtr
newCallback_FilterSet_copyEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilterSetEmissionFilterLinkSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_copyEmissionFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_copyEmissionFilterLinkPtr
newCallback_FilterSet_copyEmissionFilterLink(T* instance, void (T::*cb)(const ::omero::model::FilterSetEmissionFilterLinkSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_copyEmissionFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FilterSet_addFilterSetEmissionFilterLink : public Callback_FilterSet_addFilterSetEmissionFilterLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_FilterSet_addFilterSetEmissionFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_FilterSet_addFilterSetEmissionFilterLinkPtr
newCallback_FilterSet_addFilterSetEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_addFilterSetEmissionFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_addFilterSetEmissionFilterLinkPtr
newCallback_FilterSet_addFilterSetEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_addFilterSetEmissionFilterLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_FilterSet_addFilterSetEmissionFilterLinkPtr
newCallback_FilterSet_addFilterSetEmissionFilterLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_addFilterSetEmissionFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_addFilterSetEmissionFilterLinkPtr
newCallback_FilterSet_addFilterSetEmissionFilterLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_addFilterSetEmissionFilterLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilterSet_addFilterSetEmissionFilterLink : public Callback_FilterSet_addFilterSetEmissionFilterLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_FilterSet_addFilterSetEmissionFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_FilterSet_addFilterSetEmissionFilterLinkPtr
newCallback_FilterSet_addFilterSetEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_addFilterSetEmissionFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_addFilterSetEmissionFilterLinkPtr
newCallback_FilterSet_addFilterSetEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_addFilterSetEmissionFilterLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_addFilterSetEmissionFilterLinkPtr
newCallback_FilterSet_addFilterSetEmissionFilterLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_addFilterSetEmissionFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_addFilterSetEmissionFilterLinkPtr
newCallback_FilterSet_addFilterSetEmissionFilterLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_addFilterSetEmissionFilterLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_FilterSet_addAllFilterSetEmissionFilterLinkSet : public Callback_FilterSet_addAllFilterSetEmissionFilterLinkSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_FilterSet_addAllFilterSetEmissionFilterLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_FilterSet_addAllFilterSetEmissionFilterLinkSetPtr
newCallback_FilterSet_addAllFilterSetEmissionFilterLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_addAllFilterSetEmissionFilterLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_addAllFilterSetEmissionFilterLinkSetPtr
newCallback_FilterSet_addAllFilterSetEmissionFilterLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_addAllFilterSetEmissionFilterLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_FilterSet_addAllFilterSetEmissionFilterLinkSetPtr
newCallback_FilterSet_addAllFilterSetEmissionFilterLinkSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_addAllFilterSetEmissionFilterLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_addAllFilterSetEmissionFilterLinkSetPtr
newCallback_FilterSet_addAllFilterSetEmissionFilterLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_addAllFilterSetEmissionFilterLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilterSet_addAllFilterSetEmissionFilterLinkSet : public Callback_FilterSet_addAllFilterSetEmissionFilterLinkSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_FilterSet_addAllFilterSetEmissionFilterLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_FilterSet_addAllFilterSetEmissionFilterLinkSetPtr
newCallback_FilterSet_addAllFilterSetEmissionFilterLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_addAllFilterSetEmissionFilterLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_addAllFilterSetEmissionFilterLinkSetPtr
newCallback_FilterSet_addAllFilterSetEmissionFilterLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_addAllFilterSetEmissionFilterLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_addAllFilterSetEmissionFilterLinkSetPtr
newCallback_FilterSet_addAllFilterSetEmissionFilterLinkSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_addAllFilterSetEmissionFilterLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_addAllFilterSetEmissionFilterLinkSetPtr
newCallback_FilterSet_addAllFilterSetEmissionFilterLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_addAllFilterSetEmissionFilterLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_FilterSet_removeFilterSetEmissionFilterLink : public Callback_FilterSet_removeFilterSetEmissionFilterLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_FilterSet_removeFilterSetEmissionFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_FilterSet_removeFilterSetEmissionFilterLinkPtr
newCallback_FilterSet_removeFilterSetEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_removeFilterSetEmissionFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_removeFilterSetEmissionFilterLinkPtr
newCallback_FilterSet_removeFilterSetEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_removeFilterSetEmissionFilterLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_FilterSet_removeFilterSetEmissionFilterLinkPtr
newCallback_FilterSet_removeFilterSetEmissionFilterLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_removeFilterSetEmissionFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_removeFilterSetEmissionFilterLinkPtr
newCallback_FilterSet_removeFilterSetEmissionFilterLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_removeFilterSetEmissionFilterLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilterSet_removeFilterSetEmissionFilterLink : public Callback_FilterSet_removeFilterSetEmissionFilterLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_FilterSet_removeFilterSetEmissionFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_FilterSet_removeFilterSetEmissionFilterLinkPtr
newCallback_FilterSet_removeFilterSetEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_removeFilterSetEmissionFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_removeFilterSetEmissionFilterLinkPtr
newCallback_FilterSet_removeFilterSetEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_removeFilterSetEmissionFilterLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_removeFilterSetEmissionFilterLinkPtr
newCallback_FilterSet_removeFilterSetEmissionFilterLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_removeFilterSetEmissionFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_removeFilterSetEmissionFilterLinkPtr
newCallback_FilterSet_removeFilterSetEmissionFilterLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_removeFilterSetEmissionFilterLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_FilterSet_removeAllFilterSetEmissionFilterLinkSet : public Callback_FilterSet_removeAllFilterSetEmissionFilterLinkSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_FilterSet_removeAllFilterSetEmissionFilterLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_FilterSet_removeAllFilterSetEmissionFilterLinkSetPtr
newCallback_FilterSet_removeAllFilterSetEmissionFilterLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_removeAllFilterSetEmissionFilterLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_removeAllFilterSetEmissionFilterLinkSetPtr
newCallback_FilterSet_removeAllFilterSetEmissionFilterLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_removeAllFilterSetEmissionFilterLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_FilterSet_removeAllFilterSetEmissionFilterLinkSetPtr
newCallback_FilterSet_removeAllFilterSetEmissionFilterLinkSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_removeAllFilterSetEmissionFilterLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_removeAllFilterSetEmissionFilterLinkSetPtr
newCallback_FilterSet_removeAllFilterSetEmissionFilterLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_removeAllFilterSetEmissionFilterLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilterSet_removeAllFilterSetEmissionFilterLinkSet : public Callback_FilterSet_removeAllFilterSetEmissionFilterLinkSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_FilterSet_removeAllFilterSetEmissionFilterLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_FilterSet_removeAllFilterSetEmissionFilterLinkSetPtr
newCallback_FilterSet_removeAllFilterSetEmissionFilterLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_removeAllFilterSetEmissionFilterLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_removeAllFilterSetEmissionFilterLinkSetPtr
newCallback_FilterSet_removeAllFilterSetEmissionFilterLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_removeAllFilterSetEmissionFilterLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_removeAllFilterSetEmissionFilterLinkSetPtr
newCallback_FilterSet_removeAllFilterSetEmissionFilterLinkSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_removeAllFilterSetEmissionFilterLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_removeAllFilterSetEmissionFilterLinkSetPtr
newCallback_FilterSet_removeAllFilterSetEmissionFilterLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_removeAllFilterSetEmissionFilterLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_FilterSet_clearEmissionFilterLink : public Callback_FilterSet_clearEmissionFilterLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_FilterSet_clearEmissionFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_FilterSet_clearEmissionFilterLinkPtr
newCallback_FilterSet_clearEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_clearEmissionFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_clearEmissionFilterLinkPtr
newCallback_FilterSet_clearEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_clearEmissionFilterLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_FilterSet_clearEmissionFilterLinkPtr
newCallback_FilterSet_clearEmissionFilterLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_clearEmissionFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_clearEmissionFilterLinkPtr
newCallback_FilterSet_clearEmissionFilterLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_clearEmissionFilterLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilterSet_clearEmissionFilterLink : public Callback_FilterSet_clearEmissionFilterLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_FilterSet_clearEmissionFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_FilterSet_clearEmissionFilterLinkPtr
newCallback_FilterSet_clearEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_clearEmissionFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_clearEmissionFilterLinkPtr
newCallback_FilterSet_clearEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_clearEmissionFilterLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_clearEmissionFilterLinkPtr
newCallback_FilterSet_clearEmissionFilterLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_clearEmissionFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_clearEmissionFilterLinkPtr
newCallback_FilterSet_clearEmissionFilterLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_clearEmissionFilterLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_FilterSet_reloadEmissionFilterLink : public Callback_FilterSet_reloadEmissionFilterLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_FilterSet_reloadEmissionFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_FilterSet_reloadEmissionFilterLinkPtr
newCallback_FilterSet_reloadEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_reloadEmissionFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_reloadEmissionFilterLinkPtr
newCallback_FilterSet_reloadEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_reloadEmissionFilterLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_FilterSet_reloadEmissionFilterLinkPtr
newCallback_FilterSet_reloadEmissionFilterLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_reloadEmissionFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_reloadEmissionFilterLinkPtr
newCallback_FilterSet_reloadEmissionFilterLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_reloadEmissionFilterLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilterSet_reloadEmissionFilterLink : public Callback_FilterSet_reloadEmissionFilterLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_FilterSet_reloadEmissionFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_FilterSet_reloadEmissionFilterLinkPtr
newCallback_FilterSet_reloadEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_reloadEmissionFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_reloadEmissionFilterLinkPtr
newCallback_FilterSet_reloadEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_reloadEmissionFilterLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_reloadEmissionFilterLinkPtr
newCallback_FilterSet_reloadEmissionFilterLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_reloadEmissionFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_reloadEmissionFilterLinkPtr
newCallback_FilterSet_reloadEmissionFilterLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_reloadEmissionFilterLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_FilterSet_getEmissionFilterLinkCountPerOwner : public Callback_FilterSet_getEmissionFilterLinkCountPerOwner_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::sys::CountMap&);

    CallbackNC_FilterSet_getEmissionFilterLinkCountPerOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterSetPrx __proxy = ::omero::model::FilterSetPrx::uncheckedCast(__result->getProxy());
        ::omero::sys::CountMap __ret;
        try
        {
            __ret = __proxy->end_getEmissionFilterLinkCountPerOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FilterSet_getEmissionFilterLinkCountPerOwnerPtr
newCallback_FilterSet_getEmissionFilterLinkCountPerOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::CountMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_getEmissionFilterLinkCountPerOwner<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_getEmissionFilterLinkCountPerOwnerPtr
newCallback_FilterSet_getEmissionFilterLinkCountPerOwner(T* instance, void (T::*cb)(const ::omero::sys::CountMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_getEmissionFilterLinkCountPerOwner<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilterSet_getEmissionFilterLinkCountPerOwner : public Callback_FilterSet_getEmissionFilterLinkCountPerOwner_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::sys::CountMap&, const CT&);

    Callback_FilterSet_getEmissionFilterLinkCountPerOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterSetPrx __proxy = ::omero::model::FilterSetPrx::uncheckedCast(__result->getProxy());
        ::omero::sys::CountMap __ret;
        try
        {
            __ret = __proxy->end_getEmissionFilterLinkCountPerOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FilterSet_getEmissionFilterLinkCountPerOwnerPtr
newCallback_FilterSet_getEmissionFilterLinkCountPerOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::CountMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_getEmissionFilterLinkCountPerOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_getEmissionFilterLinkCountPerOwnerPtr
newCallback_FilterSet_getEmissionFilterLinkCountPerOwner(T* instance, void (T::*cb)(const ::omero::sys::CountMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_getEmissionFilterLinkCountPerOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FilterSet_linkEmissionFilter : public Callback_FilterSet_linkEmissionFilter_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::FilterSetEmissionFilterLinkPtr&);

    CallbackNC_FilterSet_linkEmissionFilter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterSetPrx __proxy = ::omero::model::FilterSetPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilterSetEmissionFilterLinkPtr __ret;
        try
        {
            __ret = __proxy->end_linkEmissionFilter(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FilterSet_linkEmissionFilterPtr
newCallback_FilterSet_linkEmissionFilter(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilterSetEmissionFilterLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_linkEmissionFilter<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_linkEmissionFilterPtr
newCallback_FilterSet_linkEmissionFilter(T* instance, void (T::*cb)(const ::omero::model::FilterSetEmissionFilterLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_linkEmissionFilter<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilterSet_linkEmissionFilter : public Callback_FilterSet_linkEmissionFilter_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::FilterSetEmissionFilterLinkPtr&, const CT&);

    Callback_FilterSet_linkEmissionFilter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterSetPrx __proxy = ::omero::model::FilterSetPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilterSetEmissionFilterLinkPtr __ret;
        try
        {
            __ret = __proxy->end_linkEmissionFilter(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FilterSet_linkEmissionFilterPtr
newCallback_FilterSet_linkEmissionFilter(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilterSetEmissionFilterLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_linkEmissionFilter<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_linkEmissionFilterPtr
newCallback_FilterSet_linkEmissionFilter(T* instance, void (T::*cb)(const ::omero::model::FilterSetEmissionFilterLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_linkEmissionFilter<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FilterSet_addFilterSetEmissionFilterLinkToBoth : public Callback_FilterSet_addFilterSetEmissionFilterLinkToBoth_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_FilterSet_addFilterSetEmissionFilterLinkToBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_FilterSet_addFilterSetEmissionFilterLinkToBothPtr
newCallback_FilterSet_addFilterSetEmissionFilterLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_addFilterSetEmissionFilterLinkToBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_addFilterSetEmissionFilterLinkToBothPtr
newCallback_FilterSet_addFilterSetEmissionFilterLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_addFilterSetEmissionFilterLinkToBoth<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_FilterSet_addFilterSetEmissionFilterLinkToBothPtr
newCallback_FilterSet_addFilterSetEmissionFilterLinkToBoth(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_addFilterSetEmissionFilterLinkToBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_addFilterSetEmissionFilterLinkToBothPtr
newCallback_FilterSet_addFilterSetEmissionFilterLinkToBoth(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_addFilterSetEmissionFilterLinkToBoth<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilterSet_addFilterSetEmissionFilterLinkToBoth : public Callback_FilterSet_addFilterSetEmissionFilterLinkToBoth_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_FilterSet_addFilterSetEmissionFilterLinkToBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_FilterSet_addFilterSetEmissionFilterLinkToBothPtr
newCallback_FilterSet_addFilterSetEmissionFilterLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_addFilterSetEmissionFilterLinkToBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_addFilterSetEmissionFilterLinkToBothPtr
newCallback_FilterSet_addFilterSetEmissionFilterLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_addFilterSetEmissionFilterLinkToBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_addFilterSetEmissionFilterLinkToBothPtr
newCallback_FilterSet_addFilterSetEmissionFilterLinkToBoth(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_addFilterSetEmissionFilterLinkToBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_addFilterSetEmissionFilterLinkToBothPtr
newCallback_FilterSet_addFilterSetEmissionFilterLinkToBoth(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_addFilterSetEmissionFilterLinkToBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_FilterSet_findFilterSetEmissionFilterLink : public Callback_FilterSet_findFilterSetEmissionFilterLink_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::FilterSetEmissionFilterLinkSeq&);

    CallbackNC_FilterSet_findFilterSetEmissionFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterSetPrx __proxy = ::omero::model::FilterSetPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilterSetEmissionFilterLinkSeq __ret;
        try
        {
            __ret = __proxy->end_findFilterSetEmissionFilterLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FilterSet_findFilterSetEmissionFilterLinkPtr
newCallback_FilterSet_findFilterSetEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilterSetEmissionFilterLinkSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_findFilterSetEmissionFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_findFilterSetEmissionFilterLinkPtr
newCallback_FilterSet_findFilterSetEmissionFilterLink(T* instance, void (T::*cb)(const ::omero::model::FilterSetEmissionFilterLinkSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_findFilterSetEmissionFilterLink<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilterSet_findFilterSetEmissionFilterLink : public Callback_FilterSet_findFilterSetEmissionFilterLink_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::FilterSetEmissionFilterLinkSeq&, const CT&);

    Callback_FilterSet_findFilterSetEmissionFilterLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterSetPrx __proxy = ::omero::model::FilterSetPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilterSetEmissionFilterLinkSeq __ret;
        try
        {
            __ret = __proxy->end_findFilterSetEmissionFilterLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FilterSet_findFilterSetEmissionFilterLinkPtr
newCallback_FilterSet_findFilterSetEmissionFilterLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilterSetEmissionFilterLinkSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_findFilterSetEmissionFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_findFilterSetEmissionFilterLinkPtr
newCallback_FilterSet_findFilterSetEmissionFilterLink(T* instance, void (T::*cb)(const ::omero::model::FilterSetEmissionFilterLinkSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_findFilterSetEmissionFilterLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FilterSet_unlinkEmissionFilter : public Callback_FilterSet_unlinkEmissionFilter_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_FilterSet_unlinkEmissionFilter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_FilterSet_unlinkEmissionFilterPtr
newCallback_FilterSet_unlinkEmissionFilter(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_unlinkEmissionFilter<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_unlinkEmissionFilterPtr
newCallback_FilterSet_unlinkEmissionFilter(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_unlinkEmissionFilter<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_FilterSet_unlinkEmissionFilterPtr
newCallback_FilterSet_unlinkEmissionFilter(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_unlinkEmissionFilter<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_unlinkEmissionFilterPtr
newCallback_FilterSet_unlinkEmissionFilter(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_unlinkEmissionFilter<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilterSet_unlinkEmissionFilter : public Callback_FilterSet_unlinkEmissionFilter_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_FilterSet_unlinkEmissionFilter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_FilterSet_unlinkEmissionFilterPtr
newCallback_FilterSet_unlinkEmissionFilter(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_unlinkEmissionFilter<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_unlinkEmissionFilterPtr
newCallback_FilterSet_unlinkEmissionFilter(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_unlinkEmissionFilter<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_unlinkEmissionFilterPtr
newCallback_FilterSet_unlinkEmissionFilter(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_unlinkEmissionFilter<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_unlinkEmissionFilterPtr
newCallback_FilterSet_unlinkEmissionFilter(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_unlinkEmissionFilter<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_FilterSet_removeFilterSetEmissionFilterLinkFromBoth : public Callback_FilterSet_removeFilterSetEmissionFilterLinkFromBoth_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_FilterSet_removeFilterSetEmissionFilterLinkFromBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_FilterSet_removeFilterSetEmissionFilterLinkFromBothPtr
newCallback_FilterSet_removeFilterSetEmissionFilterLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_removeFilterSetEmissionFilterLinkFromBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_removeFilterSetEmissionFilterLinkFromBothPtr
newCallback_FilterSet_removeFilterSetEmissionFilterLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_removeFilterSetEmissionFilterLinkFromBoth<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_FilterSet_removeFilterSetEmissionFilterLinkFromBothPtr
newCallback_FilterSet_removeFilterSetEmissionFilterLinkFromBoth(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_removeFilterSetEmissionFilterLinkFromBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_removeFilterSetEmissionFilterLinkFromBothPtr
newCallback_FilterSet_removeFilterSetEmissionFilterLinkFromBoth(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_removeFilterSetEmissionFilterLinkFromBoth<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilterSet_removeFilterSetEmissionFilterLinkFromBoth : public Callback_FilterSet_removeFilterSetEmissionFilterLinkFromBoth_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_FilterSet_removeFilterSetEmissionFilterLinkFromBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_FilterSet_removeFilterSetEmissionFilterLinkFromBothPtr
newCallback_FilterSet_removeFilterSetEmissionFilterLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_removeFilterSetEmissionFilterLinkFromBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_removeFilterSetEmissionFilterLinkFromBothPtr
newCallback_FilterSet_removeFilterSetEmissionFilterLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_removeFilterSetEmissionFilterLinkFromBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_removeFilterSetEmissionFilterLinkFromBothPtr
newCallback_FilterSet_removeFilterSetEmissionFilterLinkFromBoth(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_removeFilterSetEmissionFilterLinkFromBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_removeFilterSetEmissionFilterLinkFromBothPtr
newCallback_FilterSet_removeFilterSetEmissionFilterLinkFromBoth(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_removeFilterSetEmissionFilterLinkFromBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_FilterSet_linkedEmissionFilterList : public Callback_FilterSet_linkedEmissionFilterList_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::FilterSetLinkedEmissionFilterSeq&);

    CallbackNC_FilterSet_linkedEmissionFilterList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterSetPrx __proxy = ::omero::model::FilterSetPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilterSetLinkedEmissionFilterSeq __ret;
        try
        {
            __ret = __proxy->end_linkedEmissionFilterList(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FilterSet_linkedEmissionFilterListPtr
newCallback_FilterSet_linkedEmissionFilterList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilterSetLinkedEmissionFilterSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_linkedEmissionFilterList<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilterSet_linkedEmissionFilterListPtr
newCallback_FilterSet_linkedEmissionFilterList(T* instance, void (T::*cb)(const ::omero::model::FilterSetLinkedEmissionFilterSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilterSet_linkedEmissionFilterList<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilterSet_linkedEmissionFilterList : public Callback_FilterSet_linkedEmissionFilterList_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::FilterSetLinkedEmissionFilterSeq&, const CT&);

    Callback_FilterSet_linkedEmissionFilterList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::FilterSetPrx __proxy = ::omero::model::FilterSetPrx::uncheckedCast(__result->getProxy());
        ::omero::model::FilterSetLinkedEmissionFilterSeq __ret;
        try
        {
            __ret = __proxy->end_linkedEmissionFilterList(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FilterSet_linkedEmissionFilterListPtr
newCallback_FilterSet_linkedEmissionFilterList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::FilterSetLinkedEmissionFilterSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_linkedEmissionFilterList<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilterSet_linkedEmissionFilterListPtr
newCallback_FilterSet_linkedEmissionFilterList(T* instance, void (T::*cb)(const ::omero::model::FilterSetLinkedEmissionFilterSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilterSet_linkedEmissionFilterList<T, CT>(instance, cb, excb, sentcb);
}

}

}

#endif
