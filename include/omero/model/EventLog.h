// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `EventLog.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_EventLog_h__
#define __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_EventLog_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <omero/model/IObject.h>
#include <omero/RTypes.h>
#include <omero/System.h>
#include <omero/Collections.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace omero
{

namespace model
{

class Event;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Event>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Event*);

class Details;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Details>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Details*);

class EventLog;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::EventLog>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::EventLog*);

}

}

}

namespace omero
{

namespace model
{

class Event;
bool operator==(const Event&, const Event&);
bool operator<(const Event&, const Event&);
::Ice::Object* upCast(::omero::model::Event*);
typedef ::IceInternal::Handle< ::omero::model::Event> EventPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Event> EventPrx;
void __patch(EventPtr&, const ::Ice::ObjectPtr&);

class Details;
bool operator==(const Details&, const Details&);
bool operator<(const Details&, const Details&);
::Ice::Object* upCast(::omero::model::Details*);
typedef ::IceInternal::Handle< ::omero::model::Details> DetailsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Details> DetailsPrx;
void __patch(DetailsPtr&, const ::Ice::ObjectPtr&);

class EventLog;
bool operator==(const EventLog&, const EventLog&);
bool operator<(const EventLog&, const EventLog&);
::Ice::Object* upCast(::omero::model::EventLog*);
typedef ::IceInternal::Handle< ::omero::model::EventLog> EventLogPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::EventLog> EventLogPrx;
void __patch(EventLogPtr&, const ::Ice::ObjectPtr&);

}

}

namespace omero
{

namespace model
{

class Callback_EventLog_getEntityId_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_EventLog_getEntityId_Base> Callback_EventLog_getEntityIdPtr;

class Callback_EventLog_setEntityId_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_EventLog_setEntityId_Base> Callback_EventLog_setEntityIdPtr;

class Callback_EventLog_getEntityType_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_EventLog_getEntityType_Base> Callback_EventLog_getEntityTypePtr;

class Callback_EventLog_setEntityType_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_EventLog_setEntityType_Base> Callback_EventLog_setEntityTypePtr;

class Callback_EventLog_getAction_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_EventLog_getAction_Base> Callback_EventLog_getActionPtr;

class Callback_EventLog_setAction_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_EventLog_setAction_Base> Callback_EventLog_setActionPtr;

class Callback_EventLog_getEvent_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_EventLog_getEvent_Base> Callback_EventLog_getEventPtr;

class Callback_EventLog_setEvent_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_EventLog_setEvent_Base> Callback_EventLog_setEventPtr;

}

}

namespace IceProxy
{

namespace omero
{

namespace model
{

class EventLog : virtual public ::IceProxy::omero::model::IObject
{
public:

    ::omero::RLongPtr getEntityId()
    {
        return getEntityId(0);
    }
    ::omero::RLongPtr getEntityId(const ::Ice::Context& __ctx)
    {
        return getEntityId(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getEntityId(const ::IceInternal::Function<void (const ::omero::RLongPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getEntityId(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getEntityId(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getEntityId(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getEntityId(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RLongPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getEntityId(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getEntityId(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getEntityId(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getEntityId(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RLongPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RLongPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::EventLogPrx __proxy = ::omero::model::EventLogPrx::uncheckedCast(__result->getProxy());
                ::omero::RLongPtr __ret;
                try
                {
                    __ret = __proxy->end_getEntityId(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RLongPtr&)> _response;
        };
        return begin_getEntityId(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getEntityId()
    {
        return begin_getEntityId(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getEntityId(const ::Ice::Context& __ctx)
    {
        return begin_getEntityId(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getEntityId(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getEntityId(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getEntityId(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getEntityId(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getEntityId(const ::omero::model::Callback_EventLog_getEntityIdPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getEntityId(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getEntityId(const ::Ice::Context& __ctx, const ::omero::model::Callback_EventLog_getEntityIdPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getEntityId(&__ctx, __del, __cookie);
    }

    ::omero::RLongPtr end_getEntityId(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RLongPtr getEntityId(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getEntityId(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setEntityId(const ::omero::RLongPtr& theEntityId)
    {
        setEntityId(theEntityId, 0);
    }
    void setEntityId(const ::omero::RLongPtr& theEntityId, const ::Ice::Context& __ctx)
    {
        setEntityId(theEntityId, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setEntityId(const ::omero::RLongPtr& theEntityId, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setEntityId(theEntityId, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setEntityId(const ::omero::RLongPtr& theEntityId, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setEntityId(theEntityId, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setEntityId(const ::omero::RLongPtr& theEntityId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setEntityId(theEntityId, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setEntityId(const ::omero::RLongPtr& theEntityId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setEntityId(theEntityId, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setEntityId(const ::omero::RLongPtr& theEntityId)
    {
        return begin_setEntityId(theEntityId, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setEntityId(const ::omero::RLongPtr& theEntityId, const ::Ice::Context& __ctx)
    {
        return begin_setEntityId(theEntityId, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setEntityId(const ::omero::RLongPtr& theEntityId, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setEntityId(theEntityId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setEntityId(const ::omero::RLongPtr& theEntityId, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setEntityId(theEntityId, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setEntityId(const ::omero::RLongPtr& theEntityId, const ::omero::model::Callback_EventLog_setEntityIdPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setEntityId(theEntityId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setEntityId(const ::omero::RLongPtr& theEntityId, const ::Ice::Context& __ctx, const ::omero::model::Callback_EventLog_setEntityIdPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setEntityId(theEntityId, &__ctx, __del, __cookie);
    }

    void end_setEntityId(const ::Ice::AsyncResultPtr&);
    
private:

    void setEntityId(const ::omero::RLongPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setEntityId(const ::omero::RLongPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getEntityType()
    {
        return getEntityType(0);
    }
    ::omero::RStringPtr getEntityType(const ::Ice::Context& __ctx)
    {
        return getEntityType(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getEntityType(const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getEntityType(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getEntityType(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getEntityType(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getEntityType(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getEntityType(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getEntityType(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getEntityType(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getEntityType(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RStringPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::EventLogPrx __proxy = ::omero::model::EventLogPrx::uncheckedCast(__result->getProxy());
                ::omero::RStringPtr __ret;
                try
                {
                    __ret = __proxy->end_getEntityType(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RStringPtr&)> _response;
        };
        return begin_getEntityType(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getEntityType()
    {
        return begin_getEntityType(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getEntityType(const ::Ice::Context& __ctx)
    {
        return begin_getEntityType(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getEntityType(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getEntityType(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getEntityType(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getEntityType(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getEntityType(const ::omero::model::Callback_EventLog_getEntityTypePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getEntityType(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getEntityType(const ::Ice::Context& __ctx, const ::omero::model::Callback_EventLog_getEntityTypePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getEntityType(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getEntityType(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getEntityType(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getEntityType(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setEntityType(const ::omero::RStringPtr& theEntityType)
    {
        setEntityType(theEntityType, 0);
    }
    void setEntityType(const ::omero::RStringPtr& theEntityType, const ::Ice::Context& __ctx)
    {
        setEntityType(theEntityType, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setEntityType(const ::omero::RStringPtr& theEntityType, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setEntityType(theEntityType, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setEntityType(const ::omero::RStringPtr& theEntityType, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setEntityType(theEntityType, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setEntityType(const ::omero::RStringPtr& theEntityType, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setEntityType(theEntityType, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setEntityType(const ::omero::RStringPtr& theEntityType, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setEntityType(theEntityType, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setEntityType(const ::omero::RStringPtr& theEntityType)
    {
        return begin_setEntityType(theEntityType, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setEntityType(const ::omero::RStringPtr& theEntityType, const ::Ice::Context& __ctx)
    {
        return begin_setEntityType(theEntityType, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setEntityType(const ::omero::RStringPtr& theEntityType, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setEntityType(theEntityType, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setEntityType(const ::omero::RStringPtr& theEntityType, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setEntityType(theEntityType, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setEntityType(const ::omero::RStringPtr& theEntityType, const ::omero::model::Callback_EventLog_setEntityTypePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setEntityType(theEntityType, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setEntityType(const ::omero::RStringPtr& theEntityType, const ::Ice::Context& __ctx, const ::omero::model::Callback_EventLog_setEntityTypePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setEntityType(theEntityType, &__ctx, __del, __cookie);
    }

    void end_setEntityType(const ::Ice::AsyncResultPtr&);
    
private:

    void setEntityType(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setEntityType(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getAction()
    {
        return getAction(0);
    }
    ::omero::RStringPtr getAction(const ::Ice::Context& __ctx)
    {
        return getAction(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getAction(const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAction(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAction(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAction(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getAction(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAction(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAction(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAction(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getAction(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RStringPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::EventLogPrx __proxy = ::omero::model::EventLogPrx::uncheckedCast(__result->getProxy());
                ::omero::RStringPtr __ret;
                try
                {
                    __ret = __proxy->end_getAction(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RStringPtr&)> _response;
        };
        return begin_getAction(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getAction()
    {
        return begin_getAction(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAction(const ::Ice::Context& __ctx)
    {
        return begin_getAction(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAction(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAction(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAction(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAction(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAction(const ::omero::model::Callback_EventLog_getActionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAction(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAction(const ::Ice::Context& __ctx, const ::omero::model::Callback_EventLog_getActionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAction(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getAction(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getAction(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getAction(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setAction(const ::omero::RStringPtr& theAction)
    {
        setAction(theAction, 0);
    }
    void setAction(const ::omero::RStringPtr& theAction, const ::Ice::Context& __ctx)
    {
        setAction(theAction, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setAction(const ::omero::RStringPtr& theAction, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setAction(theAction, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setAction(const ::omero::RStringPtr& theAction, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setAction(theAction, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setAction(const ::omero::RStringPtr& theAction, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setAction(theAction, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setAction(const ::omero::RStringPtr& theAction, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setAction(theAction, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setAction(const ::omero::RStringPtr& theAction)
    {
        return begin_setAction(theAction, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setAction(const ::omero::RStringPtr& theAction, const ::Ice::Context& __ctx)
    {
        return begin_setAction(theAction, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setAction(const ::omero::RStringPtr& theAction, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setAction(theAction, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setAction(const ::omero::RStringPtr& theAction, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setAction(theAction, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setAction(const ::omero::RStringPtr& theAction, const ::omero::model::Callback_EventLog_setActionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setAction(theAction, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setAction(const ::omero::RStringPtr& theAction, const ::Ice::Context& __ctx, const ::omero::model::Callback_EventLog_setActionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setAction(theAction, &__ctx, __del, __cookie);
    }

    void end_setAction(const ::Ice::AsyncResultPtr&);
    
private:

    void setAction(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setAction(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::EventPtr getEvent()
    {
        return getEvent(0);
    }
    ::omero::model::EventPtr getEvent(const ::Ice::Context& __ctx)
    {
        return getEvent(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getEvent(const ::IceInternal::Function<void (const ::omero::model::EventPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getEvent(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getEvent(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getEvent(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getEvent(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::EventPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getEvent(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getEvent(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getEvent(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getEvent(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::EventPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::EventPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::EventLogPrx __proxy = ::omero::model::EventLogPrx::uncheckedCast(__result->getProxy());
                ::omero::model::EventPtr __ret;
                try
                {
                    __ret = __proxy->end_getEvent(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::EventPtr&)> _response;
        };
        return begin_getEvent(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getEvent()
    {
        return begin_getEvent(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getEvent(const ::Ice::Context& __ctx)
    {
        return begin_getEvent(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getEvent(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getEvent(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getEvent(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getEvent(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getEvent(const ::omero::model::Callback_EventLog_getEventPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getEvent(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getEvent(const ::Ice::Context& __ctx, const ::omero::model::Callback_EventLog_getEventPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getEvent(&__ctx, __del, __cookie);
    }

    ::omero::model::EventPtr end_getEvent(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::EventPtr getEvent(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getEvent(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setEvent(const ::omero::model::EventPtr& theEvent)
    {
        setEvent(theEvent, 0);
    }
    void setEvent(const ::omero::model::EventPtr& theEvent, const ::Ice::Context& __ctx)
    {
        setEvent(theEvent, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setEvent(const ::omero::model::EventPtr& theEvent, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setEvent(theEvent, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setEvent(const ::omero::model::EventPtr& theEvent, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setEvent(theEvent, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setEvent(const ::omero::model::EventPtr& theEvent, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setEvent(theEvent, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setEvent(const ::omero::model::EventPtr& theEvent, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setEvent(theEvent, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setEvent(const ::omero::model::EventPtr& theEvent)
    {
        return begin_setEvent(theEvent, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setEvent(const ::omero::model::EventPtr& theEvent, const ::Ice::Context& __ctx)
    {
        return begin_setEvent(theEvent, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setEvent(const ::omero::model::EventPtr& theEvent, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setEvent(theEvent, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setEvent(const ::omero::model::EventPtr& theEvent, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setEvent(theEvent, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setEvent(const ::omero::model::EventPtr& theEvent, const ::omero::model::Callback_EventLog_setEventPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setEvent(theEvent, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setEvent(const ::omero::model::EventPtr& theEvent, const ::Ice::Context& __ctx, const ::omero::model::Callback_EventLog_setEventPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setEvent(theEvent, &__ctx, __del, __cookie);
    }

    void end_setEvent(const ::Ice::AsyncResultPtr&);
    
private:

    void setEvent(const ::omero::model::EventPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setEvent(const ::omero::model::EventPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<EventLog> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<EventLog*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<EventLog> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<EventLog*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<EventLog> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<EventLog*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<EventLog> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<EventLog*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<EventLog> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<EventLog*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<EventLog> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<EventLog*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<EventLog> ice_secure(bool __secure) const
    {
        return dynamic_cast<EventLog*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<EventLog> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<EventLog*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<EventLog> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<EventLog*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<EventLog> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<EventLog*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<EventLog> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<EventLog*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<EventLog> ice_twoway() const
    {
        return dynamic_cast<EventLog*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<EventLog> ice_oneway() const
    {
        return dynamic_cast<EventLog*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<EventLog> ice_batchOneway() const
    {
        return dynamic_cast<EventLog*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<EventLog> ice_datagram() const
    {
        return dynamic_cast<EventLog*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<EventLog> ice_batchDatagram() const
    {
        return dynamic_cast<EventLog*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<EventLog> ice_compress(bool __compress) const
    {
        return dynamic_cast<EventLog*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<EventLog> ice_timeout(int __timeout) const
    {
        return dynamic_cast<EventLog*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<EventLog> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<EventLog*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<EventLog> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<EventLog*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

namespace IceDelegate
{

namespace omero
{

namespace model
{

class EventLog : virtual public ::IceDelegate::omero::model::IObject
{
public:

    virtual ::omero::RLongPtr getEntityId(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setEntityId(const ::omero::RLongPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RStringPtr getEntityType(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setEntityType(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RStringPtr getAction(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setAction(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::EventPtr getEvent(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setEvent(const ::omero::model::EventPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

}

namespace IceDelegateM
{

namespace omero
{

namespace model
{

class EventLog : virtual public ::IceDelegate::omero::model::EventLog,
                 virtual public ::IceDelegateM::omero::model::IObject
{
public:

    virtual ::omero::RLongPtr getEntityId(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setEntityId(const ::omero::RLongPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getEntityType(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setEntityType(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getAction(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setAction(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::EventPtr getEvent(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setEvent(const ::omero::model::EventPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace IceDelegateD
{

namespace omero
{

namespace model
{

class EventLog : virtual public ::IceDelegate::omero::model::EventLog,
                 virtual public ::IceDelegateD::omero::model::IObject
{
public:

    virtual ::omero::RLongPtr getEntityId(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setEntityId(const ::omero::RLongPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getEntityType(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setEntityType(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getAction(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setAction(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::EventPtr getEvent(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setEvent(const ::omero::model::EventPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace omero
{

namespace model
{

class EventLog : public ::omero::model::IObject
{
public:

    typedef EventLogPrx ProxyType;
    typedef EventLogPtr PointerType;

    EventLog()
    {
    }

    EventLog(const ::omero::RLongPtr& __ice_id, const ::omero::model::DetailsPtr& __ice_details, bool __ice_loaded, const ::omero::RLongPtr& __ice_entityId, const ::omero::RStringPtr& __ice_entityType, const ::omero::RStringPtr& __ice_action, const ::omero::model::EventPtr& __ice_event) :
        ::omero::model::IObject(__ice_id, __ice_details, __ice_loaded)
        ,
        entityId(__ice_entityId),
        entityType(__ice_entityType),
        action(__ice_action),
        event(__ice_event)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    virtual ::omero::RLongPtr getEntityId(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getEntityId(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setEntityId(const ::omero::RLongPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setEntityId(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getEntityType(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getEntityType(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setEntityType(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setEntityType(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getAction(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getAction(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setAction(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setAction(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::EventPtr getEvent(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getEvent(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setEvent(const ::omero::model::EventPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setEvent(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::model::IObject::__writeImpl;
    using ::omero::model::IObject::__readImpl;
    #endif

    ::omero::RLongPtr entityId;

    ::omero::RStringPtr entityType;

    ::omero::RStringPtr action;

    ::omero::model::EventPtr event;
};

inline bool operator==(const EventLog& l, const EventLog& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const EventLog& l, const EventLog& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

}

namespace omero
{

namespace model
{

template<class T>
class CallbackNC_EventLog_getEntityId : public Callback_EventLog_getEntityId_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RLongPtr&);

    CallbackNC_EventLog_getEntityId(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::EventLogPrx __proxy = ::omero::model::EventLogPrx::uncheckedCast(__result->getProxy());
        ::omero::RLongPtr __ret;
        try
        {
            __ret = __proxy->end_getEntityId(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_EventLog_getEntityIdPtr
newCallback_EventLog_getEntityId(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RLongPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_EventLog_getEntityId<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_EventLog_getEntityIdPtr
newCallback_EventLog_getEntityId(T* instance, void (T::*cb)(const ::omero::RLongPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_EventLog_getEntityId<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_EventLog_getEntityId : public Callback_EventLog_getEntityId_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RLongPtr&, const CT&);

    Callback_EventLog_getEntityId(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::EventLogPrx __proxy = ::omero::model::EventLogPrx::uncheckedCast(__result->getProxy());
        ::omero::RLongPtr __ret;
        try
        {
            __ret = __proxy->end_getEntityId(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_EventLog_getEntityIdPtr
newCallback_EventLog_getEntityId(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RLongPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_EventLog_getEntityId<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_EventLog_getEntityIdPtr
newCallback_EventLog_getEntityId(T* instance, void (T::*cb)(const ::omero::RLongPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_EventLog_getEntityId<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_EventLog_setEntityId : public Callback_EventLog_setEntityId_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_EventLog_setEntityId(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_EventLog_setEntityIdPtr
newCallback_EventLog_setEntityId(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_EventLog_setEntityId<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_EventLog_setEntityIdPtr
newCallback_EventLog_setEntityId(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_EventLog_setEntityId<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_EventLog_setEntityIdPtr
newCallback_EventLog_setEntityId(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_EventLog_setEntityId<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_EventLog_setEntityIdPtr
newCallback_EventLog_setEntityId(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_EventLog_setEntityId<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_EventLog_setEntityId : public Callback_EventLog_setEntityId_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_EventLog_setEntityId(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_EventLog_setEntityIdPtr
newCallback_EventLog_setEntityId(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_EventLog_setEntityId<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_EventLog_setEntityIdPtr
newCallback_EventLog_setEntityId(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_EventLog_setEntityId<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_EventLog_setEntityIdPtr
newCallback_EventLog_setEntityId(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_EventLog_setEntityId<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_EventLog_setEntityIdPtr
newCallback_EventLog_setEntityId(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_EventLog_setEntityId<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_EventLog_getEntityType : public Callback_EventLog_getEntityType_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_EventLog_getEntityType(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::EventLogPrx __proxy = ::omero::model::EventLogPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getEntityType(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_EventLog_getEntityTypePtr
newCallback_EventLog_getEntityType(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_EventLog_getEntityType<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_EventLog_getEntityTypePtr
newCallback_EventLog_getEntityType(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_EventLog_getEntityType<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_EventLog_getEntityType : public Callback_EventLog_getEntityType_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_EventLog_getEntityType(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::EventLogPrx __proxy = ::omero::model::EventLogPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getEntityType(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_EventLog_getEntityTypePtr
newCallback_EventLog_getEntityType(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_EventLog_getEntityType<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_EventLog_getEntityTypePtr
newCallback_EventLog_getEntityType(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_EventLog_getEntityType<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_EventLog_setEntityType : public Callback_EventLog_setEntityType_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_EventLog_setEntityType(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_EventLog_setEntityTypePtr
newCallback_EventLog_setEntityType(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_EventLog_setEntityType<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_EventLog_setEntityTypePtr
newCallback_EventLog_setEntityType(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_EventLog_setEntityType<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_EventLog_setEntityTypePtr
newCallback_EventLog_setEntityType(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_EventLog_setEntityType<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_EventLog_setEntityTypePtr
newCallback_EventLog_setEntityType(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_EventLog_setEntityType<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_EventLog_setEntityType : public Callback_EventLog_setEntityType_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_EventLog_setEntityType(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_EventLog_setEntityTypePtr
newCallback_EventLog_setEntityType(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_EventLog_setEntityType<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_EventLog_setEntityTypePtr
newCallback_EventLog_setEntityType(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_EventLog_setEntityType<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_EventLog_setEntityTypePtr
newCallback_EventLog_setEntityType(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_EventLog_setEntityType<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_EventLog_setEntityTypePtr
newCallback_EventLog_setEntityType(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_EventLog_setEntityType<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_EventLog_getAction : public Callback_EventLog_getAction_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_EventLog_getAction(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::EventLogPrx __proxy = ::omero::model::EventLogPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getAction(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_EventLog_getActionPtr
newCallback_EventLog_getAction(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_EventLog_getAction<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_EventLog_getActionPtr
newCallback_EventLog_getAction(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_EventLog_getAction<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_EventLog_getAction : public Callback_EventLog_getAction_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_EventLog_getAction(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::EventLogPrx __proxy = ::omero::model::EventLogPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getAction(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_EventLog_getActionPtr
newCallback_EventLog_getAction(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_EventLog_getAction<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_EventLog_getActionPtr
newCallback_EventLog_getAction(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_EventLog_getAction<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_EventLog_setAction : public Callback_EventLog_setAction_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_EventLog_setAction(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_EventLog_setActionPtr
newCallback_EventLog_setAction(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_EventLog_setAction<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_EventLog_setActionPtr
newCallback_EventLog_setAction(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_EventLog_setAction<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_EventLog_setActionPtr
newCallback_EventLog_setAction(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_EventLog_setAction<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_EventLog_setActionPtr
newCallback_EventLog_setAction(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_EventLog_setAction<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_EventLog_setAction : public Callback_EventLog_setAction_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_EventLog_setAction(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_EventLog_setActionPtr
newCallback_EventLog_setAction(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_EventLog_setAction<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_EventLog_setActionPtr
newCallback_EventLog_setAction(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_EventLog_setAction<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_EventLog_setActionPtr
newCallback_EventLog_setAction(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_EventLog_setAction<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_EventLog_setActionPtr
newCallback_EventLog_setAction(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_EventLog_setAction<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_EventLog_getEvent : public Callback_EventLog_getEvent_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::EventPtr&);

    CallbackNC_EventLog_getEvent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::EventLogPrx __proxy = ::omero::model::EventLogPrx::uncheckedCast(__result->getProxy());
        ::omero::model::EventPtr __ret;
        try
        {
            __ret = __proxy->end_getEvent(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_EventLog_getEventPtr
newCallback_EventLog_getEvent(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::EventPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_EventLog_getEvent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_EventLog_getEventPtr
newCallback_EventLog_getEvent(T* instance, void (T::*cb)(const ::omero::model::EventPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_EventLog_getEvent<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_EventLog_getEvent : public Callback_EventLog_getEvent_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::EventPtr&, const CT&);

    Callback_EventLog_getEvent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::EventLogPrx __proxy = ::omero::model::EventLogPrx::uncheckedCast(__result->getProxy());
        ::omero::model::EventPtr __ret;
        try
        {
            __ret = __proxy->end_getEvent(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_EventLog_getEventPtr
newCallback_EventLog_getEvent(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::EventPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_EventLog_getEvent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_EventLog_getEventPtr
newCallback_EventLog_getEvent(T* instance, void (T::*cb)(const ::omero::model::EventPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_EventLog_getEvent<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_EventLog_setEvent : public Callback_EventLog_setEvent_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_EventLog_setEvent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_EventLog_setEventPtr
newCallback_EventLog_setEvent(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_EventLog_setEvent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_EventLog_setEventPtr
newCallback_EventLog_setEvent(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_EventLog_setEvent<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_EventLog_setEventPtr
newCallback_EventLog_setEvent(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_EventLog_setEvent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_EventLog_setEventPtr
newCallback_EventLog_setEvent(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_EventLog_setEvent<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_EventLog_setEvent : public Callback_EventLog_setEvent_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_EventLog_setEvent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_EventLog_setEventPtr
newCallback_EventLog_setEvent(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_EventLog_setEvent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_EventLog_setEventPtr
newCallback_EventLog_setEvent(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_EventLog_setEvent<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_EventLog_setEventPtr
newCallback_EventLog_setEvent(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_EventLog_setEvent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_EventLog_setEventPtr
newCallback_EventLog_setEvent(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_EventLog_setEvent<T, CT>(instance, 0, excb, sentcb);
}

}

}

#endif
