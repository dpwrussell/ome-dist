   /*
   **   Generated by blitz/templates/resouces/combined.vm
   **   See ../../README.h for information on these types.
   **
   **   Copyright 2007, 2008 Glencoe Software, Inc. All rights reserved.
   **   Use is subject to license terms supplied in LICENSE.txt
   **
   */
#ifndef FILESETVERSIONINFOI_H
#define FILESETVERSIONINFOI_H
#include <omero/RTypes.h>
#include <omero/ClientErrors.h>
#include <omero/model/IObject.h>
#include <omero/model/DetailsI.h>
#include <omero/model/FilesetVersionInfo.h>
#include <omero/templates.h>
#include <IceUtil/Config.h>
#if ICE_INT_VERSION / 100 >= 304
#   include <Ice/Handle.h>
#else
#   include <IceUtil/Handle.h>
#endif
#ifndef OMERO_API
#   ifdef OMERO_API_EXPORTS
#       define OMERO_API ICE_DECLSPEC_EXPORT
#   else
#       define OMERO_API ICE_DECLSPEC_IMPORT
#   endif
#endif
namespace omero {
  namespace model {
    class OMERO_API FilesetVersionInfoI;
  }
}
#if ICE_INT_VERSION / 100 >= 304
namespace IceInternal {
  OMERO_API ::Ice::Object* upCast(::omero::model::FilesetVersionInfoI*);
}
#endif
namespace omero {
  namespace model {
#if ICE_INT_VERSION / 100 >= 304
  typedef IceInternal::Handle<FilesetVersionInfoI> FilesetVersionInfoIPtr;
#else
  typedef IceUtil::Handle<FilesetVersionInfoI> FilesetVersionInfoIPtr;
#endif
    class OMERO_API FilesetVersionInfoI : virtual public FilesetVersionInfo {
   public:
      static const std::string BIOFORMATSREADER;
      static const std::string BIOFORMATSVERSION;
      static const std::string OMEROVERSION;
      static const std::string OSARCHITECTURE;
      static const std::string OSNAME;
      static const std::string OSVERSION;
      static const std::string LOCALE;
      static const std::string DETAILS;
    protected:
      void errorIfUnloaded();
      void throwNullCollectionException(std::string propertyName);
      virtual void toggleCollectionsLoaded(bool load);
      virtual ~FilesetVersionInfoI();
    public:
      FilesetVersionInfoI();
      FilesetVersionInfoI(omero::RLongPtr idPtr, bool isLoaded = false);
      FilesetVersionInfoI(Ice::Long id, bool isLoaded = false);
      virtual void unload(const Ice::Current& current = Ice::Current());
      virtual bool isLoaded(const Ice::Current& current = Ice::Current());
      virtual void unloadCollections(const Ice::Current& current = Ice::Current());
      virtual bool isGlobal(const Ice::Current& current = Ice::Current());
      virtual bool isMutable(const Ice::Current& current = Ice::Current());
      virtual bool isAnnotated(const Ice::Current& current = Ice::Current());
      virtual bool isLink(const Ice::Current& current = Ice::Current());
      virtual omero::model::IObjectPtr shallowCopy(const Ice::Current& current = Ice::Current());
      virtual omero::model::IObjectPtr proxy(const Ice::Current& current = Ice::Current());
      virtual omero::model::DetailsPtr getDetails(const Ice::Current& current = Ice::Current());
      virtual void unloadDetails(const Ice::Current& current = Ice::Current());
      virtual omero::RLongPtr getId(const Ice::Current& current = Ice::Current());
      virtual void setId( const omero::RLongPtr& id, const Ice::Current& current = Ice::Current() );
      virtual omero::RIntPtr getVersion(const Ice::Current& current = Ice::Current());
      virtual void setVersion( const omero::RIntPtr& version, const Ice::Current& current = Ice::Current() );

      //
      //  FilesetVersionInfo.bioformatsReader
      //
      virtual void unloadBioformatsReader();
      virtual omero::RStringPtr getBioformatsReader(const Ice::Current& current = Ice::Current());
      virtual void setBioformatsReader(const omero::RStringPtr& _bioformatsReader, const Ice::Current& current = Ice::Current());

      //
      //  FilesetVersionInfo.bioformatsVersion
      //
      virtual void unloadBioformatsVersion();
      virtual omero::RStringPtr getBioformatsVersion(const Ice::Current& current = Ice::Current());
      virtual void setBioformatsVersion(const omero::RStringPtr& _bioformatsVersion, const Ice::Current& current = Ice::Current());

      //
      //  FilesetVersionInfo.omeroVersion
      //
      virtual void unloadOmeroVersion();
      virtual omero::RStringPtr getOmeroVersion(const Ice::Current& current = Ice::Current());
      virtual void setOmeroVersion(const omero::RStringPtr& _omeroVersion, const Ice::Current& current = Ice::Current());

      //
      //  FilesetVersionInfo.osArchitecture
      //
      virtual void unloadOsArchitecture();
      virtual omero::RStringPtr getOsArchitecture(const Ice::Current& current = Ice::Current());
      virtual void setOsArchitecture(const omero::RStringPtr& _osArchitecture, const Ice::Current& current = Ice::Current());

      //
      //  FilesetVersionInfo.osName
      //
      virtual void unloadOsName();
      virtual omero::RStringPtr getOsName(const Ice::Current& current = Ice::Current());
      virtual void setOsName(const omero::RStringPtr& _osName, const Ice::Current& current = Ice::Current());

      //
      //  FilesetVersionInfo.osVersion
      //
      virtual void unloadOsVersion();
      virtual omero::RStringPtr getOsVersion(const Ice::Current& current = Ice::Current());
      virtual void setOsVersion(const omero::RStringPtr& _osVersion, const Ice::Current& current = Ice::Current());

      //
      //  FilesetVersionInfo.locale
      //
      virtual void unloadLocale();
      virtual omero::RStringPtr getLocale(const Ice::Current& current = Ice::Current());
      virtual void setLocale(const omero::RStringPtr& _locale, const Ice::Current& current = Ice::Current());
 };

}}
#endif // FILESETVERSIONINFOI_H
