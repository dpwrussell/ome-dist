// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `TransmittanceRange.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_TransmittanceRange_h__
#define __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_TransmittanceRange_h__

#include <Ice/LocalObjectF.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/StreamF.h>
#include <omero/model/IObject.h>
#include <omero/RTypes.h>
#include <omero/System.h>
#include <omero/Collections.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace omero
{

namespace model
{

class Details;

class TransmittanceRange;

}

}

}

namespace omero
{

namespace model
{

class Details;
bool operator==(const Details&, const Details&);
bool operator<(const Details&, const Details&);

class TransmittanceRange;
bool operator==(const TransmittanceRange&, const TransmittanceRange&);
bool operator<(const TransmittanceRange&, const TransmittanceRange&);

}

}

namespace IceInternal
{

::Ice::Object* upCast(::omero::model::Details*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Details*);

::Ice::Object* upCast(::omero::model::TransmittanceRange*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::TransmittanceRange*);

}

namespace omero
{

namespace model
{

typedef ::IceInternal::Handle< ::omero::model::Details> DetailsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Details> DetailsPrx;

void __read(::IceInternal::BasicStream*, DetailsPrx&);
void __patch__DetailsPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::TransmittanceRange> TransmittanceRangePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::TransmittanceRange> TransmittanceRangePrx;

void __read(::IceInternal::BasicStream*, TransmittanceRangePrx&);
void __patch__TransmittanceRangePtr(void*, ::Ice::ObjectPtr&);

}

}

namespace omero
{

namespace model
{

class Callback_TransmittanceRange_getVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TransmittanceRange_getVersion_Base> Callback_TransmittanceRange_getVersionPtr;

class Callback_TransmittanceRange_setVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TransmittanceRange_setVersion_Base> Callback_TransmittanceRange_setVersionPtr;

class Callback_TransmittanceRange_getCutIn_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TransmittanceRange_getCutIn_Base> Callback_TransmittanceRange_getCutInPtr;

class Callback_TransmittanceRange_setCutIn_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TransmittanceRange_setCutIn_Base> Callback_TransmittanceRange_setCutInPtr;

class Callback_TransmittanceRange_getCutOut_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TransmittanceRange_getCutOut_Base> Callback_TransmittanceRange_getCutOutPtr;

class Callback_TransmittanceRange_setCutOut_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TransmittanceRange_setCutOut_Base> Callback_TransmittanceRange_setCutOutPtr;

class Callback_TransmittanceRange_getCutInTolerance_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TransmittanceRange_getCutInTolerance_Base> Callback_TransmittanceRange_getCutInTolerancePtr;

class Callback_TransmittanceRange_setCutInTolerance_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TransmittanceRange_setCutInTolerance_Base> Callback_TransmittanceRange_setCutInTolerancePtr;

class Callback_TransmittanceRange_getCutOutTolerance_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TransmittanceRange_getCutOutTolerance_Base> Callback_TransmittanceRange_getCutOutTolerancePtr;

class Callback_TransmittanceRange_setCutOutTolerance_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TransmittanceRange_setCutOutTolerance_Base> Callback_TransmittanceRange_setCutOutTolerancePtr;

class Callback_TransmittanceRange_getTransmittance_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TransmittanceRange_getTransmittance_Base> Callback_TransmittanceRange_getTransmittancePtr;

class Callback_TransmittanceRange_setTransmittance_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TransmittanceRange_setTransmittance_Base> Callback_TransmittanceRange_setTransmittancePtr;

}

}

namespace IceProxy
{

namespace omero
{

namespace model
{

class TransmittanceRange : virtual public ::IceProxy::omero::model::IObject
{
public:

    ::omero::RIntPtr getVersion()
    {
        return getVersion(0);
    }
    ::omero::RIntPtr getVersion(const ::Ice::Context& __ctx)
    {
        return getVersion(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getVersion()
    {
        return begin_getVersion(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx)
    {
        return begin_getVersion(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::omero::model::Callback_TransmittanceRange_getVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx, const ::omero::model::Callback_TransmittanceRange_getVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(&__ctx, __del, __cookie);
    }

    ::omero::RIntPtr end_getVersion(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RIntPtr getVersion(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setVersion(const ::omero::RIntPtr& theVersion)
    {
        setVersion(theVersion, 0);
    }
    void setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx)
    {
        setVersion(theVersion, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion)
    {
        return begin_setVersion(theVersion, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx)
    {
        return begin_setVersion(theVersion, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::omero::model::Callback_TransmittanceRange_setVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::omero::model::Callback_TransmittanceRange_setVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, &__ctx, __del, __cookie);
    }

    void end_setVersion(const ::Ice::AsyncResultPtr&);
    
private:

    void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RIntPtr getCutIn()
    {
        return getCutIn(0);
    }
    ::omero::RIntPtr getCutIn(const ::Ice::Context& __ctx)
    {
        return getCutIn(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getCutIn()
    {
        return begin_getCutIn(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getCutIn(const ::Ice::Context& __ctx)
    {
        return begin_getCutIn(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getCutIn(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCutIn(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCutIn(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCutIn(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCutIn(const ::omero::model::Callback_TransmittanceRange_getCutInPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCutIn(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCutIn(const ::Ice::Context& __ctx, const ::omero::model::Callback_TransmittanceRange_getCutInPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCutIn(&__ctx, __del, __cookie);
    }

    ::omero::RIntPtr end_getCutIn(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RIntPtr getCutIn(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getCutIn(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setCutIn(const ::omero::RIntPtr& theCutIn)
    {
        setCutIn(theCutIn, 0);
    }
    void setCutIn(const ::omero::RIntPtr& theCutIn, const ::Ice::Context& __ctx)
    {
        setCutIn(theCutIn, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setCutIn(const ::omero::RIntPtr& theCutIn)
    {
        return begin_setCutIn(theCutIn, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setCutIn(const ::omero::RIntPtr& theCutIn, const ::Ice::Context& __ctx)
    {
        return begin_setCutIn(theCutIn, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setCutIn(const ::omero::RIntPtr& theCutIn, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCutIn(theCutIn, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setCutIn(const ::omero::RIntPtr& theCutIn, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCutIn(theCutIn, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setCutIn(const ::omero::RIntPtr& theCutIn, const ::omero::model::Callback_TransmittanceRange_setCutInPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCutIn(theCutIn, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setCutIn(const ::omero::RIntPtr& theCutIn, const ::Ice::Context& __ctx, const ::omero::model::Callback_TransmittanceRange_setCutInPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCutIn(theCutIn, &__ctx, __del, __cookie);
    }

    void end_setCutIn(const ::Ice::AsyncResultPtr&);
    
private:

    void setCutIn(const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setCutIn(const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RIntPtr getCutOut()
    {
        return getCutOut(0);
    }
    ::omero::RIntPtr getCutOut(const ::Ice::Context& __ctx)
    {
        return getCutOut(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getCutOut()
    {
        return begin_getCutOut(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getCutOut(const ::Ice::Context& __ctx)
    {
        return begin_getCutOut(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getCutOut(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCutOut(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCutOut(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCutOut(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCutOut(const ::omero::model::Callback_TransmittanceRange_getCutOutPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCutOut(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCutOut(const ::Ice::Context& __ctx, const ::omero::model::Callback_TransmittanceRange_getCutOutPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCutOut(&__ctx, __del, __cookie);
    }

    ::omero::RIntPtr end_getCutOut(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RIntPtr getCutOut(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getCutOut(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setCutOut(const ::omero::RIntPtr& theCutOut)
    {
        setCutOut(theCutOut, 0);
    }
    void setCutOut(const ::omero::RIntPtr& theCutOut, const ::Ice::Context& __ctx)
    {
        setCutOut(theCutOut, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setCutOut(const ::omero::RIntPtr& theCutOut)
    {
        return begin_setCutOut(theCutOut, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setCutOut(const ::omero::RIntPtr& theCutOut, const ::Ice::Context& __ctx)
    {
        return begin_setCutOut(theCutOut, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setCutOut(const ::omero::RIntPtr& theCutOut, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCutOut(theCutOut, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setCutOut(const ::omero::RIntPtr& theCutOut, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCutOut(theCutOut, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setCutOut(const ::omero::RIntPtr& theCutOut, const ::omero::model::Callback_TransmittanceRange_setCutOutPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCutOut(theCutOut, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setCutOut(const ::omero::RIntPtr& theCutOut, const ::Ice::Context& __ctx, const ::omero::model::Callback_TransmittanceRange_setCutOutPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCutOut(theCutOut, &__ctx, __del, __cookie);
    }

    void end_setCutOut(const ::Ice::AsyncResultPtr&);
    
private:

    void setCutOut(const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setCutOut(const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RIntPtr getCutInTolerance()
    {
        return getCutInTolerance(0);
    }
    ::omero::RIntPtr getCutInTolerance(const ::Ice::Context& __ctx)
    {
        return getCutInTolerance(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getCutInTolerance()
    {
        return begin_getCutInTolerance(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getCutInTolerance(const ::Ice::Context& __ctx)
    {
        return begin_getCutInTolerance(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getCutInTolerance(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCutInTolerance(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCutInTolerance(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCutInTolerance(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCutInTolerance(const ::omero::model::Callback_TransmittanceRange_getCutInTolerancePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCutInTolerance(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCutInTolerance(const ::Ice::Context& __ctx, const ::omero::model::Callback_TransmittanceRange_getCutInTolerancePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCutInTolerance(&__ctx, __del, __cookie);
    }

    ::omero::RIntPtr end_getCutInTolerance(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RIntPtr getCutInTolerance(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getCutInTolerance(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setCutInTolerance(const ::omero::RIntPtr& theCutInTolerance)
    {
        setCutInTolerance(theCutInTolerance, 0);
    }
    void setCutInTolerance(const ::omero::RIntPtr& theCutInTolerance, const ::Ice::Context& __ctx)
    {
        setCutInTolerance(theCutInTolerance, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setCutInTolerance(const ::omero::RIntPtr& theCutInTolerance)
    {
        return begin_setCutInTolerance(theCutInTolerance, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setCutInTolerance(const ::omero::RIntPtr& theCutInTolerance, const ::Ice::Context& __ctx)
    {
        return begin_setCutInTolerance(theCutInTolerance, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setCutInTolerance(const ::omero::RIntPtr& theCutInTolerance, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCutInTolerance(theCutInTolerance, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setCutInTolerance(const ::omero::RIntPtr& theCutInTolerance, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCutInTolerance(theCutInTolerance, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setCutInTolerance(const ::omero::RIntPtr& theCutInTolerance, const ::omero::model::Callback_TransmittanceRange_setCutInTolerancePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCutInTolerance(theCutInTolerance, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setCutInTolerance(const ::omero::RIntPtr& theCutInTolerance, const ::Ice::Context& __ctx, const ::omero::model::Callback_TransmittanceRange_setCutInTolerancePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCutInTolerance(theCutInTolerance, &__ctx, __del, __cookie);
    }

    void end_setCutInTolerance(const ::Ice::AsyncResultPtr&);
    
private:

    void setCutInTolerance(const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setCutInTolerance(const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RIntPtr getCutOutTolerance()
    {
        return getCutOutTolerance(0);
    }
    ::omero::RIntPtr getCutOutTolerance(const ::Ice::Context& __ctx)
    {
        return getCutOutTolerance(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getCutOutTolerance()
    {
        return begin_getCutOutTolerance(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getCutOutTolerance(const ::Ice::Context& __ctx)
    {
        return begin_getCutOutTolerance(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getCutOutTolerance(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCutOutTolerance(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCutOutTolerance(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCutOutTolerance(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCutOutTolerance(const ::omero::model::Callback_TransmittanceRange_getCutOutTolerancePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCutOutTolerance(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCutOutTolerance(const ::Ice::Context& __ctx, const ::omero::model::Callback_TransmittanceRange_getCutOutTolerancePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCutOutTolerance(&__ctx, __del, __cookie);
    }

    ::omero::RIntPtr end_getCutOutTolerance(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RIntPtr getCutOutTolerance(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getCutOutTolerance(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setCutOutTolerance(const ::omero::RIntPtr& theCutOutTolerance)
    {
        setCutOutTolerance(theCutOutTolerance, 0);
    }
    void setCutOutTolerance(const ::omero::RIntPtr& theCutOutTolerance, const ::Ice::Context& __ctx)
    {
        setCutOutTolerance(theCutOutTolerance, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setCutOutTolerance(const ::omero::RIntPtr& theCutOutTolerance)
    {
        return begin_setCutOutTolerance(theCutOutTolerance, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setCutOutTolerance(const ::omero::RIntPtr& theCutOutTolerance, const ::Ice::Context& __ctx)
    {
        return begin_setCutOutTolerance(theCutOutTolerance, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setCutOutTolerance(const ::omero::RIntPtr& theCutOutTolerance, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCutOutTolerance(theCutOutTolerance, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setCutOutTolerance(const ::omero::RIntPtr& theCutOutTolerance, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCutOutTolerance(theCutOutTolerance, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setCutOutTolerance(const ::omero::RIntPtr& theCutOutTolerance, const ::omero::model::Callback_TransmittanceRange_setCutOutTolerancePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCutOutTolerance(theCutOutTolerance, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setCutOutTolerance(const ::omero::RIntPtr& theCutOutTolerance, const ::Ice::Context& __ctx, const ::omero::model::Callback_TransmittanceRange_setCutOutTolerancePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCutOutTolerance(theCutOutTolerance, &__ctx, __del, __cookie);
    }

    void end_setCutOutTolerance(const ::Ice::AsyncResultPtr&);
    
private:

    void setCutOutTolerance(const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setCutOutTolerance(const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RDoublePtr getTransmittance()
    {
        return getTransmittance(0);
    }
    ::omero::RDoublePtr getTransmittance(const ::Ice::Context& __ctx)
    {
        return getTransmittance(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getTransmittance()
    {
        return begin_getTransmittance(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getTransmittance(const ::Ice::Context& __ctx)
    {
        return begin_getTransmittance(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getTransmittance(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTransmittance(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTransmittance(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTransmittance(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTransmittance(const ::omero::model::Callback_TransmittanceRange_getTransmittancePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTransmittance(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTransmittance(const ::Ice::Context& __ctx, const ::omero::model::Callback_TransmittanceRange_getTransmittancePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTransmittance(&__ctx, __del, __cookie);
    }

    ::omero::RDoublePtr end_getTransmittance(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RDoublePtr getTransmittance(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getTransmittance(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setTransmittance(const ::omero::RDoublePtr& theTransmittance)
    {
        setTransmittance(theTransmittance, 0);
    }
    void setTransmittance(const ::omero::RDoublePtr& theTransmittance, const ::Ice::Context& __ctx)
    {
        setTransmittance(theTransmittance, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setTransmittance(const ::omero::RDoublePtr& theTransmittance)
    {
        return begin_setTransmittance(theTransmittance, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setTransmittance(const ::omero::RDoublePtr& theTransmittance, const ::Ice::Context& __ctx)
    {
        return begin_setTransmittance(theTransmittance, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setTransmittance(const ::omero::RDoublePtr& theTransmittance, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTransmittance(theTransmittance, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setTransmittance(const ::omero::RDoublePtr& theTransmittance, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTransmittance(theTransmittance, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setTransmittance(const ::omero::RDoublePtr& theTransmittance, const ::omero::model::Callback_TransmittanceRange_setTransmittancePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTransmittance(theTransmittance, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setTransmittance(const ::omero::RDoublePtr& theTransmittance, const ::Ice::Context& __ctx, const ::omero::model::Callback_TransmittanceRange_setTransmittancePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTransmittance(theTransmittance, &__ctx, __del, __cookie);
    }

    void end_setTransmittance(const ::Ice::AsyncResultPtr&);
    
private:

    void setTransmittance(const ::omero::RDoublePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setTransmittance(const ::omero::RDoublePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<TransmittanceRange> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<TransmittanceRange*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<TransmittanceRange*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<TransmittanceRange> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<TransmittanceRange*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<TransmittanceRange*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<TransmittanceRange> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<TransmittanceRange*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<TransmittanceRange*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<TransmittanceRange> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<TransmittanceRange*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<TransmittanceRange*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<TransmittanceRange> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<TransmittanceRange*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<TransmittanceRange*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<TransmittanceRange> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<TransmittanceRange*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<TransmittanceRange*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<TransmittanceRange> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<TransmittanceRange*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<TransmittanceRange*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<TransmittanceRange> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<TransmittanceRange*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<TransmittanceRange*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<TransmittanceRange> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<TransmittanceRange*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<TransmittanceRange*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<TransmittanceRange> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<TransmittanceRange*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<TransmittanceRange*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<TransmittanceRange> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<TransmittanceRange*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<TransmittanceRange*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<TransmittanceRange> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<TransmittanceRange*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<TransmittanceRange*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<TransmittanceRange> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<TransmittanceRange*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<TransmittanceRange*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<TransmittanceRange> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<TransmittanceRange*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<TransmittanceRange*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<TransmittanceRange> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<TransmittanceRange*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<TransmittanceRange*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<TransmittanceRange> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<TransmittanceRange*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<TransmittanceRange*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<TransmittanceRange> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<TransmittanceRange*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<TransmittanceRange*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<TransmittanceRange> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<TransmittanceRange*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<TransmittanceRange*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<TransmittanceRange> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<TransmittanceRange*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<TransmittanceRange*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

namespace IceDelegate
{

namespace omero
{

namespace model
{

class TransmittanceRange : virtual public ::IceDelegate::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*) = 0;

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::RIntPtr getCutIn(const ::Ice::Context*) = 0;

    virtual void setCutIn(const ::omero::RIntPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::RIntPtr getCutOut(const ::Ice::Context*) = 0;

    virtual void setCutOut(const ::omero::RIntPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::RIntPtr getCutInTolerance(const ::Ice::Context*) = 0;

    virtual void setCutInTolerance(const ::omero::RIntPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::RIntPtr getCutOutTolerance(const ::Ice::Context*) = 0;

    virtual void setCutOutTolerance(const ::omero::RIntPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::RDoublePtr getTransmittance(const ::Ice::Context*) = 0;

    virtual void setTransmittance(const ::omero::RDoublePtr&, const ::Ice::Context*) = 0;
};

}

}

}

namespace IceDelegateM
{

namespace omero
{

namespace model
{

class TransmittanceRange : virtual public ::IceDelegate::omero::model::TransmittanceRange,
                           virtual public ::IceDelegateM::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::RIntPtr getCutIn(const ::Ice::Context*);

    virtual void setCutIn(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::RIntPtr getCutOut(const ::Ice::Context*);

    virtual void setCutOut(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::RIntPtr getCutInTolerance(const ::Ice::Context*);

    virtual void setCutInTolerance(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::RIntPtr getCutOutTolerance(const ::Ice::Context*);

    virtual void setCutOutTolerance(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::RDoublePtr getTransmittance(const ::Ice::Context*);

    virtual void setTransmittance(const ::omero::RDoublePtr&, const ::Ice::Context*);
};

}

}

}

namespace IceDelegateD
{

namespace omero
{

namespace model
{

class TransmittanceRange : virtual public ::IceDelegate::omero::model::TransmittanceRange,
                           virtual public ::IceDelegateD::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::RIntPtr getCutIn(const ::Ice::Context*);

    virtual void setCutIn(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::RIntPtr getCutOut(const ::Ice::Context*);

    virtual void setCutOut(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::RIntPtr getCutInTolerance(const ::Ice::Context*);

    virtual void setCutInTolerance(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::RIntPtr getCutOutTolerance(const ::Ice::Context*);

    virtual void setCutOutTolerance(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::RDoublePtr getTransmittance(const ::Ice::Context*);

    virtual void setTransmittance(const ::omero::RDoublePtr&, const ::Ice::Context*);
};

}

}

}

namespace omero
{

namespace model
{

class TransmittanceRange : public ::omero::model::IObject
{
public:

    typedef TransmittanceRangePrx ProxyType;
    typedef TransmittanceRangePtr PointerType;
    
    TransmittanceRange() {}
    TransmittanceRange(const ::omero::RLongPtr&, const ::omero::model::DetailsPtr&, bool, const ::omero::RIntPtr&, const ::omero::RIntPtr&, const ::omero::RIntPtr&, const ::omero::RIntPtr&, const ::omero::RIntPtr&, const ::omero::RDoublePtr&);
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    virtual ::omero::RIntPtr getVersion(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RIntPtr getCutIn(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getCutIn(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setCutIn(const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setCutIn(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RIntPtr getCutOut(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getCutOut(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setCutOut(const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setCutOut(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RIntPtr getCutInTolerance(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getCutInTolerance(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setCutInTolerance(const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setCutInTolerance(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RIntPtr getCutOutTolerance(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getCutOutTolerance(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setCutOutTolerance(const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setCutOutTolerance(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RDoublePtr getTransmittance(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getTransmittance(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setTransmittance(const ::omero::RDoublePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setTransmittance(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif

protected:

    ::omero::RIntPtr version;

    ::omero::RIntPtr cutIn;

    ::omero::RIntPtr cutOut;

    ::omero::RIntPtr cutInTolerance;

    ::omero::RIntPtr cutOutTolerance;

    ::omero::RDoublePtr transmittance;
};

inline bool operator==(const TransmittanceRange& l, const TransmittanceRange& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const TransmittanceRange& l, const TransmittanceRange& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

}

namespace omero
{

namespace model
{

template<class T>
class CallbackNC_TransmittanceRange_getVersion : public Callback_TransmittanceRange_getVersion_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RIntPtr&);

    CallbackNC_TransmittanceRange_getVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::TransmittanceRangePrx __proxy = ::omero::model::TransmittanceRangePrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_TransmittanceRange_getVersionPtr
newCallback_TransmittanceRange_getVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransmittanceRange_getVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TransmittanceRange_getVersionPtr
newCallback_TransmittanceRange_getVersion(T* instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransmittanceRange_getVersion<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_TransmittanceRange_getVersion : public Callback_TransmittanceRange_getVersion_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RIntPtr&, const CT&);

    Callback_TransmittanceRange_getVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::TransmittanceRangePrx __proxy = ::omero::model::TransmittanceRangePrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_TransmittanceRange_getVersionPtr
newCallback_TransmittanceRange_getVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransmittanceRange_getVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TransmittanceRange_getVersionPtr
newCallback_TransmittanceRange_getVersion(T* instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransmittanceRange_getVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_TransmittanceRange_setVersion : public Callback_TransmittanceRange_setVersion_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TransmittanceRange_setVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_TransmittanceRange_setVersionPtr
newCallback_TransmittanceRange_setVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransmittanceRange_setVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TransmittanceRange_setVersionPtr
newCallback_TransmittanceRange_setVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransmittanceRange_setVersion<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TransmittanceRange_setVersionPtr
newCallback_TransmittanceRange_setVersion(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransmittanceRange_setVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TransmittanceRange_setVersionPtr
newCallback_TransmittanceRange_setVersion(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransmittanceRange_setVersion<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TransmittanceRange_setVersion : public Callback_TransmittanceRange_setVersion_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TransmittanceRange_setVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_TransmittanceRange_setVersionPtr
newCallback_TransmittanceRange_setVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransmittanceRange_setVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TransmittanceRange_setVersionPtr
newCallback_TransmittanceRange_setVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransmittanceRange_setVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TransmittanceRange_setVersionPtr
newCallback_TransmittanceRange_setVersion(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransmittanceRange_setVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TransmittanceRange_setVersionPtr
newCallback_TransmittanceRange_setVersion(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransmittanceRange_setVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TransmittanceRange_getCutIn : public Callback_TransmittanceRange_getCutIn_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RIntPtr&);

    CallbackNC_TransmittanceRange_getCutIn(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::TransmittanceRangePrx __proxy = ::omero::model::TransmittanceRangePrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getCutIn(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_TransmittanceRange_getCutInPtr
newCallback_TransmittanceRange_getCutIn(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransmittanceRange_getCutIn<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TransmittanceRange_getCutInPtr
newCallback_TransmittanceRange_getCutIn(T* instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransmittanceRange_getCutIn<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_TransmittanceRange_getCutIn : public Callback_TransmittanceRange_getCutIn_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RIntPtr&, const CT&);

    Callback_TransmittanceRange_getCutIn(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::TransmittanceRangePrx __proxy = ::omero::model::TransmittanceRangePrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getCutIn(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_TransmittanceRange_getCutInPtr
newCallback_TransmittanceRange_getCutIn(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransmittanceRange_getCutIn<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TransmittanceRange_getCutInPtr
newCallback_TransmittanceRange_getCutIn(T* instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransmittanceRange_getCutIn<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_TransmittanceRange_setCutIn : public Callback_TransmittanceRange_setCutIn_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TransmittanceRange_setCutIn(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_TransmittanceRange_setCutInPtr
newCallback_TransmittanceRange_setCutIn(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransmittanceRange_setCutIn<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TransmittanceRange_setCutInPtr
newCallback_TransmittanceRange_setCutIn(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransmittanceRange_setCutIn<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TransmittanceRange_setCutInPtr
newCallback_TransmittanceRange_setCutIn(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransmittanceRange_setCutIn<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TransmittanceRange_setCutInPtr
newCallback_TransmittanceRange_setCutIn(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransmittanceRange_setCutIn<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TransmittanceRange_setCutIn : public Callback_TransmittanceRange_setCutIn_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TransmittanceRange_setCutIn(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_TransmittanceRange_setCutInPtr
newCallback_TransmittanceRange_setCutIn(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransmittanceRange_setCutIn<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TransmittanceRange_setCutInPtr
newCallback_TransmittanceRange_setCutIn(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransmittanceRange_setCutIn<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TransmittanceRange_setCutInPtr
newCallback_TransmittanceRange_setCutIn(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransmittanceRange_setCutIn<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TransmittanceRange_setCutInPtr
newCallback_TransmittanceRange_setCutIn(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransmittanceRange_setCutIn<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TransmittanceRange_getCutOut : public Callback_TransmittanceRange_getCutOut_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RIntPtr&);

    CallbackNC_TransmittanceRange_getCutOut(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::TransmittanceRangePrx __proxy = ::omero::model::TransmittanceRangePrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getCutOut(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_TransmittanceRange_getCutOutPtr
newCallback_TransmittanceRange_getCutOut(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransmittanceRange_getCutOut<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TransmittanceRange_getCutOutPtr
newCallback_TransmittanceRange_getCutOut(T* instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransmittanceRange_getCutOut<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_TransmittanceRange_getCutOut : public Callback_TransmittanceRange_getCutOut_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RIntPtr&, const CT&);

    Callback_TransmittanceRange_getCutOut(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::TransmittanceRangePrx __proxy = ::omero::model::TransmittanceRangePrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getCutOut(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_TransmittanceRange_getCutOutPtr
newCallback_TransmittanceRange_getCutOut(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransmittanceRange_getCutOut<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TransmittanceRange_getCutOutPtr
newCallback_TransmittanceRange_getCutOut(T* instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransmittanceRange_getCutOut<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_TransmittanceRange_setCutOut : public Callback_TransmittanceRange_setCutOut_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TransmittanceRange_setCutOut(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_TransmittanceRange_setCutOutPtr
newCallback_TransmittanceRange_setCutOut(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransmittanceRange_setCutOut<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TransmittanceRange_setCutOutPtr
newCallback_TransmittanceRange_setCutOut(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransmittanceRange_setCutOut<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TransmittanceRange_setCutOutPtr
newCallback_TransmittanceRange_setCutOut(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransmittanceRange_setCutOut<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TransmittanceRange_setCutOutPtr
newCallback_TransmittanceRange_setCutOut(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransmittanceRange_setCutOut<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TransmittanceRange_setCutOut : public Callback_TransmittanceRange_setCutOut_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TransmittanceRange_setCutOut(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_TransmittanceRange_setCutOutPtr
newCallback_TransmittanceRange_setCutOut(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransmittanceRange_setCutOut<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TransmittanceRange_setCutOutPtr
newCallback_TransmittanceRange_setCutOut(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransmittanceRange_setCutOut<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TransmittanceRange_setCutOutPtr
newCallback_TransmittanceRange_setCutOut(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransmittanceRange_setCutOut<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TransmittanceRange_setCutOutPtr
newCallback_TransmittanceRange_setCutOut(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransmittanceRange_setCutOut<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TransmittanceRange_getCutInTolerance : public Callback_TransmittanceRange_getCutInTolerance_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RIntPtr&);

    CallbackNC_TransmittanceRange_getCutInTolerance(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::TransmittanceRangePrx __proxy = ::omero::model::TransmittanceRangePrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getCutInTolerance(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_TransmittanceRange_getCutInTolerancePtr
newCallback_TransmittanceRange_getCutInTolerance(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransmittanceRange_getCutInTolerance<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TransmittanceRange_getCutInTolerancePtr
newCallback_TransmittanceRange_getCutInTolerance(T* instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransmittanceRange_getCutInTolerance<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_TransmittanceRange_getCutInTolerance : public Callback_TransmittanceRange_getCutInTolerance_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RIntPtr&, const CT&);

    Callback_TransmittanceRange_getCutInTolerance(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::TransmittanceRangePrx __proxy = ::omero::model::TransmittanceRangePrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getCutInTolerance(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_TransmittanceRange_getCutInTolerancePtr
newCallback_TransmittanceRange_getCutInTolerance(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransmittanceRange_getCutInTolerance<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TransmittanceRange_getCutInTolerancePtr
newCallback_TransmittanceRange_getCutInTolerance(T* instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransmittanceRange_getCutInTolerance<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_TransmittanceRange_setCutInTolerance : public Callback_TransmittanceRange_setCutInTolerance_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TransmittanceRange_setCutInTolerance(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_TransmittanceRange_setCutInTolerancePtr
newCallback_TransmittanceRange_setCutInTolerance(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransmittanceRange_setCutInTolerance<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TransmittanceRange_setCutInTolerancePtr
newCallback_TransmittanceRange_setCutInTolerance(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransmittanceRange_setCutInTolerance<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TransmittanceRange_setCutInTolerancePtr
newCallback_TransmittanceRange_setCutInTolerance(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransmittanceRange_setCutInTolerance<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TransmittanceRange_setCutInTolerancePtr
newCallback_TransmittanceRange_setCutInTolerance(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransmittanceRange_setCutInTolerance<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TransmittanceRange_setCutInTolerance : public Callback_TransmittanceRange_setCutInTolerance_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TransmittanceRange_setCutInTolerance(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_TransmittanceRange_setCutInTolerancePtr
newCallback_TransmittanceRange_setCutInTolerance(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransmittanceRange_setCutInTolerance<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TransmittanceRange_setCutInTolerancePtr
newCallback_TransmittanceRange_setCutInTolerance(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransmittanceRange_setCutInTolerance<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TransmittanceRange_setCutInTolerancePtr
newCallback_TransmittanceRange_setCutInTolerance(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransmittanceRange_setCutInTolerance<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TransmittanceRange_setCutInTolerancePtr
newCallback_TransmittanceRange_setCutInTolerance(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransmittanceRange_setCutInTolerance<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TransmittanceRange_getCutOutTolerance : public Callback_TransmittanceRange_getCutOutTolerance_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RIntPtr&);

    CallbackNC_TransmittanceRange_getCutOutTolerance(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::TransmittanceRangePrx __proxy = ::omero::model::TransmittanceRangePrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getCutOutTolerance(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_TransmittanceRange_getCutOutTolerancePtr
newCallback_TransmittanceRange_getCutOutTolerance(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransmittanceRange_getCutOutTolerance<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TransmittanceRange_getCutOutTolerancePtr
newCallback_TransmittanceRange_getCutOutTolerance(T* instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransmittanceRange_getCutOutTolerance<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_TransmittanceRange_getCutOutTolerance : public Callback_TransmittanceRange_getCutOutTolerance_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RIntPtr&, const CT&);

    Callback_TransmittanceRange_getCutOutTolerance(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::TransmittanceRangePrx __proxy = ::omero::model::TransmittanceRangePrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getCutOutTolerance(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_TransmittanceRange_getCutOutTolerancePtr
newCallback_TransmittanceRange_getCutOutTolerance(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransmittanceRange_getCutOutTolerance<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TransmittanceRange_getCutOutTolerancePtr
newCallback_TransmittanceRange_getCutOutTolerance(T* instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransmittanceRange_getCutOutTolerance<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_TransmittanceRange_setCutOutTolerance : public Callback_TransmittanceRange_setCutOutTolerance_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TransmittanceRange_setCutOutTolerance(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_TransmittanceRange_setCutOutTolerancePtr
newCallback_TransmittanceRange_setCutOutTolerance(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransmittanceRange_setCutOutTolerance<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TransmittanceRange_setCutOutTolerancePtr
newCallback_TransmittanceRange_setCutOutTolerance(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransmittanceRange_setCutOutTolerance<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TransmittanceRange_setCutOutTolerancePtr
newCallback_TransmittanceRange_setCutOutTolerance(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransmittanceRange_setCutOutTolerance<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TransmittanceRange_setCutOutTolerancePtr
newCallback_TransmittanceRange_setCutOutTolerance(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransmittanceRange_setCutOutTolerance<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TransmittanceRange_setCutOutTolerance : public Callback_TransmittanceRange_setCutOutTolerance_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TransmittanceRange_setCutOutTolerance(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_TransmittanceRange_setCutOutTolerancePtr
newCallback_TransmittanceRange_setCutOutTolerance(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransmittanceRange_setCutOutTolerance<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TransmittanceRange_setCutOutTolerancePtr
newCallback_TransmittanceRange_setCutOutTolerance(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransmittanceRange_setCutOutTolerance<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TransmittanceRange_setCutOutTolerancePtr
newCallback_TransmittanceRange_setCutOutTolerance(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransmittanceRange_setCutOutTolerance<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TransmittanceRange_setCutOutTolerancePtr
newCallback_TransmittanceRange_setCutOutTolerance(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransmittanceRange_setCutOutTolerance<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TransmittanceRange_getTransmittance : public Callback_TransmittanceRange_getTransmittance_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RDoublePtr&);

    CallbackNC_TransmittanceRange_getTransmittance(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::TransmittanceRangePrx __proxy = ::omero::model::TransmittanceRangePrx::uncheckedCast(__result->getProxy());
        ::omero::RDoublePtr __ret;
        try
        {
            __ret = __proxy->end_getTransmittance(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_TransmittanceRange_getTransmittancePtr
newCallback_TransmittanceRange_getTransmittance(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RDoublePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransmittanceRange_getTransmittance<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TransmittanceRange_getTransmittancePtr
newCallback_TransmittanceRange_getTransmittance(T* instance, void (T::*cb)(const ::omero::RDoublePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransmittanceRange_getTransmittance<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_TransmittanceRange_getTransmittance : public Callback_TransmittanceRange_getTransmittance_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RDoublePtr&, const CT&);

    Callback_TransmittanceRange_getTransmittance(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::TransmittanceRangePrx __proxy = ::omero::model::TransmittanceRangePrx::uncheckedCast(__result->getProxy());
        ::omero::RDoublePtr __ret;
        try
        {
            __ret = __proxy->end_getTransmittance(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_TransmittanceRange_getTransmittancePtr
newCallback_TransmittanceRange_getTransmittance(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RDoublePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransmittanceRange_getTransmittance<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TransmittanceRange_getTransmittancePtr
newCallback_TransmittanceRange_getTransmittance(T* instance, void (T::*cb)(const ::omero::RDoublePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransmittanceRange_getTransmittance<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_TransmittanceRange_setTransmittance : public Callback_TransmittanceRange_setTransmittance_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TransmittanceRange_setTransmittance(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_TransmittanceRange_setTransmittancePtr
newCallback_TransmittanceRange_setTransmittance(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransmittanceRange_setTransmittance<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TransmittanceRange_setTransmittancePtr
newCallback_TransmittanceRange_setTransmittance(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransmittanceRange_setTransmittance<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TransmittanceRange_setTransmittancePtr
newCallback_TransmittanceRange_setTransmittance(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransmittanceRange_setTransmittance<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TransmittanceRange_setTransmittancePtr
newCallback_TransmittanceRange_setTransmittance(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransmittanceRange_setTransmittance<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TransmittanceRange_setTransmittance : public Callback_TransmittanceRange_setTransmittance_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TransmittanceRange_setTransmittance(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_TransmittanceRange_setTransmittancePtr
newCallback_TransmittanceRange_setTransmittance(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransmittanceRange_setTransmittance<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TransmittanceRange_setTransmittancePtr
newCallback_TransmittanceRange_setTransmittance(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransmittanceRange_setTransmittance<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TransmittanceRange_setTransmittancePtr
newCallback_TransmittanceRange_setTransmittance(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransmittanceRange_setTransmittance<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TransmittanceRange_setTransmittancePtr
newCallback_TransmittanceRange_setTransmittance(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransmittanceRange_setTransmittance<T, CT>(instance, 0, excb, sentcb);
}

}

}

#endif
