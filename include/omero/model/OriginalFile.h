// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `OriginalFile.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_OriginalFile_h__
#define __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_OriginalFile_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <omero/model/IObject.h>
#include <omero/RTypes.h>
#include <omero/System.h>
#include <omero/Collections.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace omero
{

namespace model
{

class PixelsOriginalFileMap;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::PixelsOriginalFileMap>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::PixelsOriginalFileMap*);

class Pixels;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Pixels>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Pixels*);

class ChecksumAlgorithm;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::ChecksumAlgorithm>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::ChecksumAlgorithm*);

class OriginalFileAnnotationLink;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::OriginalFileAnnotationLink>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::OriginalFileAnnotationLink*);

class Annotation;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Annotation>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Annotation*);

class Details;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Details>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Details*);

class OriginalFile;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::OriginalFile>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::OriginalFile*);

}

}

}

namespace omero
{

namespace model
{

class PixelsOriginalFileMap;
bool operator==(const PixelsOriginalFileMap&, const PixelsOriginalFileMap&);
bool operator<(const PixelsOriginalFileMap&, const PixelsOriginalFileMap&);
::Ice::Object* upCast(::omero::model::PixelsOriginalFileMap*);
typedef ::IceInternal::Handle< ::omero::model::PixelsOriginalFileMap> PixelsOriginalFileMapPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::PixelsOriginalFileMap> PixelsOriginalFileMapPrx;
void __patch(PixelsOriginalFileMapPtr&, const ::Ice::ObjectPtr&);

class Pixels;
bool operator==(const Pixels&, const Pixels&);
bool operator<(const Pixels&, const Pixels&);
::Ice::Object* upCast(::omero::model::Pixels*);
typedef ::IceInternal::Handle< ::omero::model::Pixels> PixelsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Pixels> PixelsPrx;
void __patch(PixelsPtr&, const ::Ice::ObjectPtr&);

class ChecksumAlgorithm;
bool operator==(const ChecksumAlgorithm&, const ChecksumAlgorithm&);
bool operator<(const ChecksumAlgorithm&, const ChecksumAlgorithm&);
::Ice::Object* upCast(::omero::model::ChecksumAlgorithm*);
typedef ::IceInternal::Handle< ::omero::model::ChecksumAlgorithm> ChecksumAlgorithmPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::ChecksumAlgorithm> ChecksumAlgorithmPrx;
void __patch(ChecksumAlgorithmPtr&, const ::Ice::ObjectPtr&);

class OriginalFileAnnotationLink;
bool operator==(const OriginalFileAnnotationLink&, const OriginalFileAnnotationLink&);
bool operator<(const OriginalFileAnnotationLink&, const OriginalFileAnnotationLink&);
::Ice::Object* upCast(::omero::model::OriginalFileAnnotationLink*);
typedef ::IceInternal::Handle< ::omero::model::OriginalFileAnnotationLink> OriginalFileAnnotationLinkPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::OriginalFileAnnotationLink> OriginalFileAnnotationLinkPrx;
void __patch(OriginalFileAnnotationLinkPtr&, const ::Ice::ObjectPtr&);

class Annotation;
bool operator==(const Annotation&, const Annotation&);
bool operator<(const Annotation&, const Annotation&);
::Ice::Object* upCast(::omero::model::Annotation*);
typedef ::IceInternal::Handle< ::omero::model::Annotation> AnnotationPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Annotation> AnnotationPrx;
void __patch(AnnotationPtr&, const ::Ice::ObjectPtr&);

class Details;
bool operator==(const Details&, const Details&);
bool operator<(const Details&, const Details&);
::Ice::Object* upCast(::omero::model::Details*);
typedef ::IceInternal::Handle< ::omero::model::Details> DetailsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Details> DetailsPrx;
void __patch(DetailsPtr&, const ::Ice::ObjectPtr&);

class OriginalFile;
bool operator==(const OriginalFile&, const OriginalFile&);
bool operator<(const OriginalFile&, const OriginalFile&);
::Ice::Object* upCast(::omero::model::OriginalFile*);
typedef ::IceInternal::Handle< ::omero::model::OriginalFile> OriginalFilePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::OriginalFile> OriginalFilePrx;
void __patch(OriginalFilePtr&, const ::Ice::ObjectPtr&);

}

}

namespace omero
{

namespace model
{

typedef ::std::vector< ::omero::model::PixelsOriginalFileMapPtr> OriginalFilePixelsFileMapsSeq;

typedef ::std::vector< ::omero::model::PixelsPtr> OriginalFileLinkedPixelsSeq;

typedef ::std::vector< ::omero::model::OriginalFileAnnotationLinkPtr> OriginalFileAnnotationLinksSeq;

typedef ::std::vector< ::omero::model::AnnotationPtr> OriginalFileLinkedAnnotationSeq;

}

}

namespace omero
{

namespace model
{

class Callback_OriginalFile_getVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OriginalFile_getVersion_Base> Callback_OriginalFile_getVersionPtr;

class Callback_OriginalFile_setVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OriginalFile_setVersion_Base> Callback_OriginalFile_setVersionPtr;

class Callback_OriginalFile_unloadPixelsFileMaps_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OriginalFile_unloadPixelsFileMaps_Base> Callback_OriginalFile_unloadPixelsFileMapsPtr;

class Callback_OriginalFile_sizeOfPixelsFileMaps_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OriginalFile_sizeOfPixelsFileMaps_Base> Callback_OriginalFile_sizeOfPixelsFileMapsPtr;

class Callback_OriginalFile_copyPixelsFileMaps_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OriginalFile_copyPixelsFileMaps_Base> Callback_OriginalFile_copyPixelsFileMapsPtr;

class Callback_OriginalFile_addPixelsOriginalFileMap_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OriginalFile_addPixelsOriginalFileMap_Base> Callback_OriginalFile_addPixelsOriginalFileMapPtr;

class Callback_OriginalFile_addAllPixelsOriginalFileMapSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OriginalFile_addAllPixelsOriginalFileMapSet_Base> Callback_OriginalFile_addAllPixelsOriginalFileMapSetPtr;

class Callback_OriginalFile_removePixelsOriginalFileMap_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OriginalFile_removePixelsOriginalFileMap_Base> Callback_OriginalFile_removePixelsOriginalFileMapPtr;

class Callback_OriginalFile_removeAllPixelsOriginalFileMapSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OriginalFile_removeAllPixelsOriginalFileMapSet_Base> Callback_OriginalFile_removeAllPixelsOriginalFileMapSetPtr;

class Callback_OriginalFile_clearPixelsFileMaps_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OriginalFile_clearPixelsFileMaps_Base> Callback_OriginalFile_clearPixelsFileMapsPtr;

class Callback_OriginalFile_reloadPixelsFileMaps_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OriginalFile_reloadPixelsFileMaps_Base> Callback_OriginalFile_reloadPixelsFileMapsPtr;

class Callback_OriginalFile_getPixelsFileMapsCountPerOwner_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OriginalFile_getPixelsFileMapsCountPerOwner_Base> Callback_OriginalFile_getPixelsFileMapsCountPerOwnerPtr;

class Callback_OriginalFile_linkPixels_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OriginalFile_linkPixels_Base> Callback_OriginalFile_linkPixelsPtr;

class Callback_OriginalFile_addPixelsOriginalFileMapToBoth_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OriginalFile_addPixelsOriginalFileMapToBoth_Base> Callback_OriginalFile_addPixelsOriginalFileMapToBothPtr;

class Callback_OriginalFile_findPixelsOriginalFileMap_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OriginalFile_findPixelsOriginalFileMap_Base> Callback_OriginalFile_findPixelsOriginalFileMapPtr;

class Callback_OriginalFile_unlinkPixels_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OriginalFile_unlinkPixels_Base> Callback_OriginalFile_unlinkPixelsPtr;

class Callback_OriginalFile_removePixelsOriginalFileMapFromBoth_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OriginalFile_removePixelsOriginalFileMapFromBoth_Base> Callback_OriginalFile_removePixelsOriginalFileMapFromBothPtr;

class Callback_OriginalFile_linkedPixelsList_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OriginalFile_linkedPixelsList_Base> Callback_OriginalFile_linkedPixelsListPtr;

class Callback_OriginalFile_getPath_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OriginalFile_getPath_Base> Callback_OriginalFile_getPathPtr;

class Callback_OriginalFile_setPath_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OriginalFile_setPath_Base> Callback_OriginalFile_setPathPtr;

class Callback_OriginalFile_getSize_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OriginalFile_getSize_Base> Callback_OriginalFile_getSizePtr;

class Callback_OriginalFile_setSize_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OriginalFile_setSize_Base> Callback_OriginalFile_setSizePtr;

class Callback_OriginalFile_getAtime_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OriginalFile_getAtime_Base> Callback_OriginalFile_getAtimePtr;

class Callback_OriginalFile_setAtime_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OriginalFile_setAtime_Base> Callback_OriginalFile_setAtimePtr;

class Callback_OriginalFile_getMtime_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OriginalFile_getMtime_Base> Callback_OriginalFile_getMtimePtr;

class Callback_OriginalFile_setMtime_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OriginalFile_setMtime_Base> Callback_OriginalFile_setMtimePtr;

class Callback_OriginalFile_getCtime_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OriginalFile_getCtime_Base> Callback_OriginalFile_getCtimePtr;

class Callback_OriginalFile_setCtime_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OriginalFile_setCtime_Base> Callback_OriginalFile_setCtimePtr;

class Callback_OriginalFile_getHasher_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OriginalFile_getHasher_Base> Callback_OriginalFile_getHasherPtr;

class Callback_OriginalFile_setHasher_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OriginalFile_setHasher_Base> Callback_OriginalFile_setHasherPtr;

class Callback_OriginalFile_getHash_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OriginalFile_getHash_Base> Callback_OriginalFile_getHashPtr;

class Callback_OriginalFile_setHash_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OriginalFile_setHash_Base> Callback_OriginalFile_setHashPtr;

class Callback_OriginalFile_getMimetype_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OriginalFile_getMimetype_Base> Callback_OriginalFile_getMimetypePtr;

class Callback_OriginalFile_setMimetype_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OriginalFile_setMimetype_Base> Callback_OriginalFile_setMimetypePtr;

class Callback_OriginalFile_unloadAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OriginalFile_unloadAnnotationLinks_Base> Callback_OriginalFile_unloadAnnotationLinksPtr;

class Callback_OriginalFile_sizeOfAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OriginalFile_sizeOfAnnotationLinks_Base> Callback_OriginalFile_sizeOfAnnotationLinksPtr;

class Callback_OriginalFile_copyAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OriginalFile_copyAnnotationLinks_Base> Callback_OriginalFile_copyAnnotationLinksPtr;

class Callback_OriginalFile_addOriginalFileAnnotationLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OriginalFile_addOriginalFileAnnotationLink_Base> Callback_OriginalFile_addOriginalFileAnnotationLinkPtr;

class Callback_OriginalFile_addAllOriginalFileAnnotationLinkSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OriginalFile_addAllOriginalFileAnnotationLinkSet_Base> Callback_OriginalFile_addAllOriginalFileAnnotationLinkSetPtr;

class Callback_OriginalFile_removeOriginalFileAnnotationLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OriginalFile_removeOriginalFileAnnotationLink_Base> Callback_OriginalFile_removeOriginalFileAnnotationLinkPtr;

class Callback_OriginalFile_removeAllOriginalFileAnnotationLinkSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OriginalFile_removeAllOriginalFileAnnotationLinkSet_Base> Callback_OriginalFile_removeAllOriginalFileAnnotationLinkSetPtr;

class Callback_OriginalFile_clearAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OriginalFile_clearAnnotationLinks_Base> Callback_OriginalFile_clearAnnotationLinksPtr;

class Callback_OriginalFile_reloadAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OriginalFile_reloadAnnotationLinks_Base> Callback_OriginalFile_reloadAnnotationLinksPtr;

class Callback_OriginalFile_getAnnotationLinksCountPerOwner_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OriginalFile_getAnnotationLinksCountPerOwner_Base> Callback_OriginalFile_getAnnotationLinksCountPerOwnerPtr;

class Callback_OriginalFile_linkAnnotation_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OriginalFile_linkAnnotation_Base> Callback_OriginalFile_linkAnnotationPtr;

class Callback_OriginalFile_addOriginalFileAnnotationLinkToBoth_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OriginalFile_addOriginalFileAnnotationLinkToBoth_Base> Callback_OriginalFile_addOriginalFileAnnotationLinkToBothPtr;

class Callback_OriginalFile_findOriginalFileAnnotationLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OriginalFile_findOriginalFileAnnotationLink_Base> Callback_OriginalFile_findOriginalFileAnnotationLinkPtr;

class Callback_OriginalFile_unlinkAnnotation_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OriginalFile_unlinkAnnotation_Base> Callback_OriginalFile_unlinkAnnotationPtr;

class Callback_OriginalFile_removeOriginalFileAnnotationLinkFromBoth_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OriginalFile_removeOriginalFileAnnotationLinkFromBoth_Base> Callback_OriginalFile_removeOriginalFileAnnotationLinkFromBothPtr;

class Callback_OriginalFile_linkedAnnotationList_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OriginalFile_linkedAnnotationList_Base> Callback_OriginalFile_linkedAnnotationListPtr;

class Callback_OriginalFile_getName_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OriginalFile_getName_Base> Callback_OriginalFile_getNamePtr;

class Callback_OriginalFile_setName_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_OriginalFile_setName_Base> Callback_OriginalFile_setNamePtr;

}

}

namespace IceProxy
{

namespace omero
{

namespace model
{

class OriginalFile : virtual public ::IceProxy::omero::model::IObject
{
public:

    ::omero::RIntPtr getVersion()
    {
        return getVersion(0);
    }
    ::omero::RIntPtr getVersion(const ::Ice::Context& __ctx)
    {
        return getVersion(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getVersion(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getVersion(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getVersion(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getVersion(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getVersion(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RIntPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
                ::omero::RIntPtr __ret;
                try
                {
                    __ret = __proxy->end_getVersion(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RIntPtr&)> _response;
        };
        return begin_getVersion(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getVersion()
    {
        return begin_getVersion(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx)
    {
        return begin_getVersion(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::omero::model::Callback_OriginalFile_getVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx, const ::omero::model::Callback_OriginalFile_getVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(&__ctx, __del, __cookie);
    }

    ::omero::RIntPtr end_getVersion(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RIntPtr getVersion(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setVersion(const ::omero::RIntPtr& theVersion)
    {
        setVersion(theVersion, 0);
    }
    void setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx)
    {
        setVersion(theVersion, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setVersion(const ::omero::RIntPtr& theVersion, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setVersion(theVersion, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setVersion(const ::omero::RIntPtr& theVersion, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setVersion(theVersion, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setVersion(theVersion, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setVersion(theVersion, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion)
    {
        return begin_setVersion(theVersion, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx)
    {
        return begin_setVersion(theVersion, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::omero::model::Callback_OriginalFile_setVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::omero::model::Callback_OriginalFile_setVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, &__ctx, __del, __cookie);
    }

    void end_setVersion(const ::Ice::AsyncResultPtr&);
    
private:

    void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unloadPixelsFileMaps()
    {
        unloadPixelsFileMaps(0);
    }
    void unloadPixelsFileMaps(const ::Ice::Context& __ctx)
    {
        unloadPixelsFileMaps(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_unloadPixelsFileMaps(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unloadPixelsFileMaps(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_unloadPixelsFileMaps(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unloadPixelsFileMaps(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unloadPixelsFileMaps(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unloadPixelsFileMaps(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unloadPixelsFileMaps(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unloadPixelsFileMaps(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_unloadPixelsFileMaps()
    {
        return begin_unloadPixelsFileMaps(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadPixelsFileMaps(const ::Ice::Context& __ctx)
    {
        return begin_unloadPixelsFileMaps(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadPixelsFileMaps(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadPixelsFileMaps(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadPixelsFileMaps(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadPixelsFileMaps(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadPixelsFileMaps(const ::omero::model::Callback_OriginalFile_unloadPixelsFileMapsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadPixelsFileMaps(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadPixelsFileMaps(const ::Ice::Context& __ctx, const ::omero::model::Callback_OriginalFile_unloadPixelsFileMapsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadPixelsFileMaps(&__ctx, __del, __cookie);
    }

    void end_unloadPixelsFileMaps(const ::Ice::AsyncResultPtr&);
    
private:

    void unloadPixelsFileMaps(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unloadPixelsFileMaps(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int sizeOfPixelsFileMaps()
    {
        return sizeOfPixelsFileMaps(0);
    }
    ::Ice::Int sizeOfPixelsFileMaps(const ::Ice::Context& __ctx)
    {
        return sizeOfPixelsFileMaps(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_sizeOfPixelsFileMaps(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sizeOfPixelsFileMaps(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfPixelsFileMaps(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sizeOfPixelsFileMaps(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfPixelsFileMaps(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sizeOfPixelsFileMaps(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfPixelsFileMaps(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sizeOfPixelsFileMaps(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_sizeOfPixelsFileMaps(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_sizeOfPixelsFileMaps(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_sizeOfPixelsFileMaps(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_sizeOfPixelsFileMaps()
    {
        return begin_sizeOfPixelsFileMaps(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfPixelsFileMaps(const ::Ice::Context& __ctx)
    {
        return begin_sizeOfPixelsFileMaps(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfPixelsFileMaps(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfPixelsFileMaps(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfPixelsFileMaps(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfPixelsFileMaps(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfPixelsFileMaps(const ::omero::model::Callback_OriginalFile_sizeOfPixelsFileMapsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfPixelsFileMaps(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfPixelsFileMaps(const ::Ice::Context& __ctx, const ::omero::model::Callback_OriginalFile_sizeOfPixelsFileMapsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfPixelsFileMaps(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_sizeOfPixelsFileMaps(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int sizeOfPixelsFileMaps(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sizeOfPixelsFileMaps(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::OriginalFilePixelsFileMapsSeq copyPixelsFileMaps()
    {
        return copyPixelsFileMaps(0);
    }
    ::omero::model::OriginalFilePixelsFileMapsSeq copyPixelsFileMaps(const ::Ice::Context& __ctx)
    {
        return copyPixelsFileMaps(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_copyPixelsFileMaps(const ::IceInternal::Function<void (const ::omero::model::OriginalFilePixelsFileMapsSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_copyPixelsFileMaps(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_copyPixelsFileMaps(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_copyPixelsFileMaps(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_copyPixelsFileMaps(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::OriginalFilePixelsFileMapsSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_copyPixelsFileMaps(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_copyPixelsFileMaps(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_copyPixelsFileMaps(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_copyPixelsFileMaps(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::OriginalFilePixelsFileMapsSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::OriginalFilePixelsFileMapsSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
                ::omero::model::OriginalFilePixelsFileMapsSeq __ret;
                try
                {
                    __ret = __proxy->end_copyPixelsFileMaps(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::OriginalFilePixelsFileMapsSeq&)> _response;
        };
        return begin_copyPixelsFileMaps(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_copyPixelsFileMaps()
    {
        return begin_copyPixelsFileMaps(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyPixelsFileMaps(const ::Ice::Context& __ctx)
    {
        return begin_copyPixelsFileMaps(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyPixelsFileMaps(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyPixelsFileMaps(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyPixelsFileMaps(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyPixelsFileMaps(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyPixelsFileMaps(const ::omero::model::Callback_OriginalFile_copyPixelsFileMapsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyPixelsFileMaps(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyPixelsFileMaps(const ::Ice::Context& __ctx, const ::omero::model::Callback_OriginalFile_copyPixelsFileMapsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyPixelsFileMaps(&__ctx, __del, __cookie);
    }

    ::omero::model::OriginalFilePixelsFileMapsSeq end_copyPixelsFileMaps(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::OriginalFilePixelsFileMapsSeq copyPixelsFileMaps(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_copyPixelsFileMaps(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addPixelsOriginalFileMap(const ::omero::model::PixelsOriginalFileMapPtr& target)
    {
        addPixelsOriginalFileMap(target, 0);
    }
    void addPixelsOriginalFileMap(const ::omero::model::PixelsOriginalFileMapPtr& target, const ::Ice::Context& __ctx)
    {
        addPixelsOriginalFileMap(target, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addPixelsOriginalFileMap(const ::omero::model::PixelsOriginalFileMapPtr& target, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addPixelsOriginalFileMap(target, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addPixelsOriginalFileMap(const ::omero::model::PixelsOriginalFileMapPtr& target, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addPixelsOriginalFileMap(target, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addPixelsOriginalFileMap(const ::omero::model::PixelsOriginalFileMapPtr& target, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addPixelsOriginalFileMap(target, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addPixelsOriginalFileMap(const ::omero::model::PixelsOriginalFileMapPtr& target, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addPixelsOriginalFileMap(target, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addPixelsOriginalFileMap(const ::omero::model::PixelsOriginalFileMapPtr& target)
    {
        return begin_addPixelsOriginalFileMap(target, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addPixelsOriginalFileMap(const ::omero::model::PixelsOriginalFileMapPtr& target, const ::Ice::Context& __ctx)
    {
        return begin_addPixelsOriginalFileMap(target, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addPixelsOriginalFileMap(const ::omero::model::PixelsOriginalFileMapPtr& target, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPixelsOriginalFileMap(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addPixelsOriginalFileMap(const ::omero::model::PixelsOriginalFileMapPtr& target, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPixelsOriginalFileMap(target, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addPixelsOriginalFileMap(const ::omero::model::PixelsOriginalFileMapPtr& target, const ::omero::model::Callback_OriginalFile_addPixelsOriginalFileMapPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPixelsOriginalFileMap(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addPixelsOriginalFileMap(const ::omero::model::PixelsOriginalFileMapPtr& target, const ::Ice::Context& __ctx, const ::omero::model::Callback_OriginalFile_addPixelsOriginalFileMapPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPixelsOriginalFileMap(target, &__ctx, __del, __cookie);
    }

    void end_addPixelsOriginalFileMap(const ::Ice::AsyncResultPtr&);
    
private:

    void addPixelsOriginalFileMap(const ::omero::model::PixelsOriginalFileMapPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addPixelsOriginalFileMap(const ::omero::model::PixelsOriginalFileMapPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addAllPixelsOriginalFileMapSet(const ::omero::model::OriginalFilePixelsFileMapsSeq& targets)
    {
        addAllPixelsOriginalFileMapSet(targets, 0);
    }
    void addAllPixelsOriginalFileMapSet(const ::omero::model::OriginalFilePixelsFileMapsSeq& targets, const ::Ice::Context& __ctx)
    {
        addAllPixelsOriginalFileMapSet(targets, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addAllPixelsOriginalFileMapSet(const ::omero::model::OriginalFilePixelsFileMapsSeq& targets, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addAllPixelsOriginalFileMapSet(targets, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addAllPixelsOriginalFileMapSet(const ::omero::model::OriginalFilePixelsFileMapsSeq& targets, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addAllPixelsOriginalFileMapSet(targets, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addAllPixelsOriginalFileMapSet(const ::omero::model::OriginalFilePixelsFileMapsSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addAllPixelsOriginalFileMapSet(targets, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addAllPixelsOriginalFileMapSet(const ::omero::model::OriginalFilePixelsFileMapsSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addAllPixelsOriginalFileMapSet(targets, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addAllPixelsOriginalFileMapSet(const ::omero::model::OriginalFilePixelsFileMapsSeq& targets)
    {
        return begin_addAllPixelsOriginalFileMapSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllPixelsOriginalFileMapSet(const ::omero::model::OriginalFilePixelsFileMapsSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_addAllPixelsOriginalFileMapSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllPixelsOriginalFileMapSet(const ::omero::model::OriginalFilePixelsFileMapsSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllPixelsOriginalFileMapSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllPixelsOriginalFileMapSet(const ::omero::model::OriginalFilePixelsFileMapsSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllPixelsOriginalFileMapSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllPixelsOriginalFileMapSet(const ::omero::model::OriginalFilePixelsFileMapsSeq& targets, const ::omero::model::Callback_OriginalFile_addAllPixelsOriginalFileMapSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllPixelsOriginalFileMapSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllPixelsOriginalFileMapSet(const ::omero::model::OriginalFilePixelsFileMapsSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_OriginalFile_addAllPixelsOriginalFileMapSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllPixelsOriginalFileMapSet(targets, &__ctx, __del, __cookie);
    }

    void end_addAllPixelsOriginalFileMapSet(const ::Ice::AsyncResultPtr&);
    
private:

    void addAllPixelsOriginalFileMapSet(const ::omero::model::OriginalFilePixelsFileMapsSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addAllPixelsOriginalFileMapSet(const ::omero::model::OriginalFilePixelsFileMapsSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removePixelsOriginalFileMap(const ::omero::model::PixelsOriginalFileMapPtr& theTarget)
    {
        removePixelsOriginalFileMap(theTarget, 0);
    }
    void removePixelsOriginalFileMap(const ::omero::model::PixelsOriginalFileMapPtr& theTarget, const ::Ice::Context& __ctx)
    {
        removePixelsOriginalFileMap(theTarget, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removePixelsOriginalFileMap(const ::omero::model::PixelsOriginalFileMapPtr& theTarget, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removePixelsOriginalFileMap(theTarget, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removePixelsOriginalFileMap(const ::omero::model::PixelsOriginalFileMapPtr& theTarget, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removePixelsOriginalFileMap(theTarget, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removePixelsOriginalFileMap(const ::omero::model::PixelsOriginalFileMapPtr& theTarget, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removePixelsOriginalFileMap(theTarget, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removePixelsOriginalFileMap(const ::omero::model::PixelsOriginalFileMapPtr& theTarget, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removePixelsOriginalFileMap(theTarget, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removePixelsOriginalFileMap(const ::omero::model::PixelsOriginalFileMapPtr& theTarget)
    {
        return begin_removePixelsOriginalFileMap(theTarget, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removePixelsOriginalFileMap(const ::omero::model::PixelsOriginalFileMapPtr& theTarget, const ::Ice::Context& __ctx)
    {
        return begin_removePixelsOriginalFileMap(theTarget, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removePixelsOriginalFileMap(const ::omero::model::PixelsOriginalFileMapPtr& theTarget, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removePixelsOriginalFileMap(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removePixelsOriginalFileMap(const ::omero::model::PixelsOriginalFileMapPtr& theTarget, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removePixelsOriginalFileMap(theTarget, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removePixelsOriginalFileMap(const ::omero::model::PixelsOriginalFileMapPtr& theTarget, const ::omero::model::Callback_OriginalFile_removePixelsOriginalFileMapPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removePixelsOriginalFileMap(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removePixelsOriginalFileMap(const ::omero::model::PixelsOriginalFileMapPtr& theTarget, const ::Ice::Context& __ctx, const ::omero::model::Callback_OriginalFile_removePixelsOriginalFileMapPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removePixelsOriginalFileMap(theTarget, &__ctx, __del, __cookie);
    }

    void end_removePixelsOriginalFileMap(const ::Ice::AsyncResultPtr&);
    
private:

    void removePixelsOriginalFileMap(const ::omero::model::PixelsOriginalFileMapPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removePixelsOriginalFileMap(const ::omero::model::PixelsOriginalFileMapPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeAllPixelsOriginalFileMapSet(const ::omero::model::OriginalFilePixelsFileMapsSeq& targets)
    {
        removeAllPixelsOriginalFileMapSet(targets, 0);
    }
    void removeAllPixelsOriginalFileMapSet(const ::omero::model::OriginalFilePixelsFileMapsSeq& targets, const ::Ice::Context& __ctx)
    {
        removeAllPixelsOriginalFileMapSet(targets, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeAllPixelsOriginalFileMapSet(const ::omero::model::OriginalFilePixelsFileMapsSeq& targets, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeAllPixelsOriginalFileMapSet(targets, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeAllPixelsOriginalFileMapSet(const ::omero::model::OriginalFilePixelsFileMapsSeq& targets, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeAllPixelsOriginalFileMapSet(targets, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeAllPixelsOriginalFileMapSet(const ::omero::model::OriginalFilePixelsFileMapsSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeAllPixelsOriginalFileMapSet(targets, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeAllPixelsOriginalFileMapSet(const ::omero::model::OriginalFilePixelsFileMapsSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeAllPixelsOriginalFileMapSet(targets, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeAllPixelsOriginalFileMapSet(const ::omero::model::OriginalFilePixelsFileMapsSeq& targets)
    {
        return begin_removeAllPixelsOriginalFileMapSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllPixelsOriginalFileMapSet(const ::omero::model::OriginalFilePixelsFileMapsSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_removeAllPixelsOriginalFileMapSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllPixelsOriginalFileMapSet(const ::omero::model::OriginalFilePixelsFileMapsSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllPixelsOriginalFileMapSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllPixelsOriginalFileMapSet(const ::omero::model::OriginalFilePixelsFileMapsSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllPixelsOriginalFileMapSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllPixelsOriginalFileMapSet(const ::omero::model::OriginalFilePixelsFileMapsSeq& targets, const ::omero::model::Callback_OriginalFile_removeAllPixelsOriginalFileMapSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllPixelsOriginalFileMapSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllPixelsOriginalFileMapSet(const ::omero::model::OriginalFilePixelsFileMapsSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_OriginalFile_removeAllPixelsOriginalFileMapSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllPixelsOriginalFileMapSet(targets, &__ctx, __del, __cookie);
    }

    void end_removeAllPixelsOriginalFileMapSet(const ::Ice::AsyncResultPtr&);
    
private:

    void removeAllPixelsOriginalFileMapSet(const ::omero::model::OriginalFilePixelsFileMapsSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeAllPixelsOriginalFileMapSet(const ::omero::model::OriginalFilePixelsFileMapsSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void clearPixelsFileMaps()
    {
        clearPixelsFileMaps(0);
    }
    void clearPixelsFileMaps(const ::Ice::Context& __ctx)
    {
        clearPixelsFileMaps(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_clearPixelsFileMaps(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_clearPixelsFileMaps(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_clearPixelsFileMaps(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_clearPixelsFileMaps(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_clearPixelsFileMaps(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_clearPixelsFileMaps(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_clearPixelsFileMaps(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_clearPixelsFileMaps(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_clearPixelsFileMaps()
    {
        return begin_clearPixelsFileMaps(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearPixelsFileMaps(const ::Ice::Context& __ctx)
    {
        return begin_clearPixelsFileMaps(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearPixelsFileMaps(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearPixelsFileMaps(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearPixelsFileMaps(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearPixelsFileMaps(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearPixelsFileMaps(const ::omero::model::Callback_OriginalFile_clearPixelsFileMapsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearPixelsFileMaps(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearPixelsFileMaps(const ::Ice::Context& __ctx, const ::omero::model::Callback_OriginalFile_clearPixelsFileMapsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearPixelsFileMaps(&__ctx, __del, __cookie);
    }

    void end_clearPixelsFileMaps(const ::Ice::AsyncResultPtr&);
    
private:

    void clearPixelsFileMaps(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_clearPixelsFileMaps(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reloadPixelsFileMaps(const ::omero::model::OriginalFilePtr& toCopy)
    {
        reloadPixelsFileMaps(toCopy, 0);
    }
    void reloadPixelsFileMaps(const ::omero::model::OriginalFilePtr& toCopy, const ::Ice::Context& __ctx)
    {
        reloadPixelsFileMaps(toCopy, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_reloadPixelsFileMaps(const ::omero::model::OriginalFilePtr& toCopy, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reloadPixelsFileMaps(toCopy, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_reloadPixelsFileMaps(const ::omero::model::OriginalFilePtr& toCopy, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reloadPixelsFileMaps(toCopy, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reloadPixelsFileMaps(const ::omero::model::OriginalFilePtr& toCopy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reloadPixelsFileMaps(toCopy, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reloadPixelsFileMaps(const ::omero::model::OriginalFilePtr& toCopy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reloadPixelsFileMaps(toCopy, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_reloadPixelsFileMaps(const ::omero::model::OriginalFilePtr& toCopy)
    {
        return begin_reloadPixelsFileMaps(toCopy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadPixelsFileMaps(const ::omero::model::OriginalFilePtr& toCopy, const ::Ice::Context& __ctx)
    {
        return begin_reloadPixelsFileMaps(toCopy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadPixelsFileMaps(const ::omero::model::OriginalFilePtr& toCopy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadPixelsFileMaps(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadPixelsFileMaps(const ::omero::model::OriginalFilePtr& toCopy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadPixelsFileMaps(toCopy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadPixelsFileMaps(const ::omero::model::OriginalFilePtr& toCopy, const ::omero::model::Callback_OriginalFile_reloadPixelsFileMapsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadPixelsFileMaps(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadPixelsFileMaps(const ::omero::model::OriginalFilePtr& toCopy, const ::Ice::Context& __ctx, const ::omero::model::Callback_OriginalFile_reloadPixelsFileMapsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadPixelsFileMaps(toCopy, &__ctx, __del, __cookie);
    }

    void end_reloadPixelsFileMaps(const ::Ice::AsyncResultPtr&);
    
private:

    void reloadPixelsFileMaps(const ::omero::model::OriginalFilePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reloadPixelsFileMaps(const ::omero::model::OriginalFilePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::sys::CountMap getPixelsFileMapsCountPerOwner()
    {
        return getPixelsFileMapsCountPerOwner(0);
    }
    ::omero::sys::CountMap getPixelsFileMapsCountPerOwner(const ::Ice::Context& __ctx)
    {
        return getPixelsFileMapsCountPerOwner(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getPixelsFileMapsCountPerOwner(const ::IceInternal::Function<void (const ::omero::sys::CountMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPixelsFileMapsCountPerOwner(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPixelsFileMapsCountPerOwner(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPixelsFileMapsCountPerOwner(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getPixelsFileMapsCountPerOwner(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::sys::CountMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPixelsFileMapsCountPerOwner(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPixelsFileMapsCountPerOwner(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPixelsFileMapsCountPerOwner(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getPixelsFileMapsCountPerOwner(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::sys::CountMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::sys::CountMap&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
                ::omero::sys::CountMap __ret;
                try
                {
                    __ret = __proxy->end_getPixelsFileMapsCountPerOwner(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::sys::CountMap&)> _response;
        };
        return begin_getPixelsFileMapsCountPerOwner(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getPixelsFileMapsCountPerOwner()
    {
        return begin_getPixelsFileMapsCountPerOwner(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPixelsFileMapsCountPerOwner(const ::Ice::Context& __ctx)
    {
        return begin_getPixelsFileMapsCountPerOwner(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPixelsFileMapsCountPerOwner(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPixelsFileMapsCountPerOwner(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPixelsFileMapsCountPerOwner(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPixelsFileMapsCountPerOwner(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPixelsFileMapsCountPerOwner(const ::omero::model::Callback_OriginalFile_getPixelsFileMapsCountPerOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPixelsFileMapsCountPerOwner(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPixelsFileMapsCountPerOwner(const ::Ice::Context& __ctx, const ::omero::model::Callback_OriginalFile_getPixelsFileMapsCountPerOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPixelsFileMapsCountPerOwner(&__ctx, __del, __cookie);
    }

    ::omero::sys::CountMap end_getPixelsFileMapsCountPerOwner(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::sys::CountMap getPixelsFileMapsCountPerOwner(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getPixelsFileMapsCountPerOwner(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::PixelsOriginalFileMapPtr linkPixels(const ::omero::model::PixelsPtr& addition)
    {
        return linkPixels(addition, 0);
    }
    ::omero::model::PixelsOriginalFileMapPtr linkPixels(const ::omero::model::PixelsPtr& addition, const ::Ice::Context& __ctx)
    {
        return linkPixels(addition, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_linkPixels(const ::omero::model::PixelsPtr& addition, const ::IceInternal::Function<void (const ::omero::model::PixelsOriginalFileMapPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_linkPixels(addition, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_linkPixels(const ::omero::model::PixelsPtr& addition, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_linkPixels(addition, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_linkPixels(const ::omero::model::PixelsPtr& addition, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::PixelsOriginalFileMapPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_linkPixels(addition, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_linkPixels(const ::omero::model::PixelsPtr& addition, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_linkPixels(addition, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_linkPixels(const ::omero::model::PixelsPtr& addition, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::PixelsOriginalFileMapPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::PixelsOriginalFileMapPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
                ::omero::model::PixelsOriginalFileMapPtr __ret;
                try
                {
                    __ret = __proxy->end_linkPixels(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::PixelsOriginalFileMapPtr&)> _response;
        };
        return begin_linkPixels(addition, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_linkPixels(const ::omero::model::PixelsPtr& addition)
    {
        return begin_linkPixels(addition, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkPixels(const ::omero::model::PixelsPtr& addition, const ::Ice::Context& __ctx)
    {
        return begin_linkPixels(addition, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkPixels(const ::omero::model::PixelsPtr& addition, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkPixels(addition, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkPixels(const ::omero::model::PixelsPtr& addition, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkPixels(addition, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkPixels(const ::omero::model::PixelsPtr& addition, const ::omero::model::Callback_OriginalFile_linkPixelsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkPixels(addition, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkPixels(const ::omero::model::PixelsPtr& addition, const ::Ice::Context& __ctx, const ::omero::model::Callback_OriginalFile_linkPixelsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkPixels(addition, &__ctx, __del, __cookie);
    }

    ::omero::model::PixelsOriginalFileMapPtr end_linkPixels(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::PixelsOriginalFileMapPtr linkPixels(const ::omero::model::PixelsPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_linkPixels(const ::omero::model::PixelsPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addPixelsOriginalFileMapToBoth(const ::omero::model::PixelsOriginalFileMapPtr& link, bool bothSides)
    {
        addPixelsOriginalFileMapToBoth(link, bothSides, 0);
    }
    void addPixelsOriginalFileMapToBoth(const ::omero::model::PixelsOriginalFileMapPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        addPixelsOriginalFileMapToBoth(link, bothSides, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addPixelsOriginalFileMapToBoth(const ::omero::model::PixelsOriginalFileMapPtr& link, bool bothSides, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addPixelsOriginalFileMapToBoth(link, bothSides, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addPixelsOriginalFileMapToBoth(const ::omero::model::PixelsOriginalFileMapPtr& link, bool bothSides, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addPixelsOriginalFileMapToBoth(link, bothSides, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addPixelsOriginalFileMapToBoth(const ::omero::model::PixelsOriginalFileMapPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addPixelsOriginalFileMapToBoth(link, bothSides, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addPixelsOriginalFileMapToBoth(const ::omero::model::PixelsOriginalFileMapPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addPixelsOriginalFileMapToBoth(link, bothSides, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addPixelsOriginalFileMapToBoth(const ::omero::model::PixelsOriginalFileMapPtr& link, bool bothSides)
    {
        return begin_addPixelsOriginalFileMapToBoth(link, bothSides, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addPixelsOriginalFileMapToBoth(const ::omero::model::PixelsOriginalFileMapPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        return begin_addPixelsOriginalFileMapToBoth(link, bothSides, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addPixelsOriginalFileMapToBoth(const ::omero::model::PixelsOriginalFileMapPtr& link, bool bothSides, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPixelsOriginalFileMapToBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addPixelsOriginalFileMapToBoth(const ::omero::model::PixelsOriginalFileMapPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPixelsOriginalFileMapToBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addPixelsOriginalFileMapToBoth(const ::omero::model::PixelsOriginalFileMapPtr& link, bool bothSides, const ::omero::model::Callback_OriginalFile_addPixelsOriginalFileMapToBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPixelsOriginalFileMapToBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addPixelsOriginalFileMapToBoth(const ::omero::model::PixelsOriginalFileMapPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::omero::model::Callback_OriginalFile_addPixelsOriginalFileMapToBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPixelsOriginalFileMapToBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    void end_addPixelsOriginalFileMapToBoth(const ::Ice::AsyncResultPtr&);
    
private:

    void addPixelsOriginalFileMapToBoth(const ::omero::model::PixelsOriginalFileMapPtr&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addPixelsOriginalFileMapToBoth(const ::omero::model::PixelsOriginalFileMapPtr&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::OriginalFilePixelsFileMapsSeq findPixelsOriginalFileMap(const ::omero::model::PixelsPtr& removal)
    {
        return findPixelsOriginalFileMap(removal, 0);
    }
    ::omero::model::OriginalFilePixelsFileMapsSeq findPixelsOriginalFileMap(const ::omero::model::PixelsPtr& removal, const ::Ice::Context& __ctx)
    {
        return findPixelsOriginalFileMap(removal, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_findPixelsOriginalFileMap(const ::omero::model::PixelsPtr& removal, const ::IceInternal::Function<void (const ::omero::model::OriginalFilePixelsFileMapsSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_findPixelsOriginalFileMap(removal, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_findPixelsOriginalFileMap(const ::omero::model::PixelsPtr& removal, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_findPixelsOriginalFileMap(removal, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_findPixelsOriginalFileMap(const ::omero::model::PixelsPtr& removal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::OriginalFilePixelsFileMapsSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_findPixelsOriginalFileMap(removal, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_findPixelsOriginalFileMap(const ::omero::model::PixelsPtr& removal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_findPixelsOriginalFileMap(removal, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_findPixelsOriginalFileMap(const ::omero::model::PixelsPtr& removal, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::OriginalFilePixelsFileMapsSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::OriginalFilePixelsFileMapsSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
                ::omero::model::OriginalFilePixelsFileMapsSeq __ret;
                try
                {
                    __ret = __proxy->end_findPixelsOriginalFileMap(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::OriginalFilePixelsFileMapsSeq&)> _response;
        };
        return begin_findPixelsOriginalFileMap(removal, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_findPixelsOriginalFileMap(const ::omero::model::PixelsPtr& removal)
    {
        return begin_findPixelsOriginalFileMap(removal, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findPixelsOriginalFileMap(const ::omero::model::PixelsPtr& removal, const ::Ice::Context& __ctx)
    {
        return begin_findPixelsOriginalFileMap(removal, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findPixelsOriginalFileMap(const ::omero::model::PixelsPtr& removal, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findPixelsOriginalFileMap(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findPixelsOriginalFileMap(const ::omero::model::PixelsPtr& removal, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findPixelsOriginalFileMap(removal, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findPixelsOriginalFileMap(const ::omero::model::PixelsPtr& removal, const ::omero::model::Callback_OriginalFile_findPixelsOriginalFileMapPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findPixelsOriginalFileMap(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findPixelsOriginalFileMap(const ::omero::model::PixelsPtr& removal, const ::Ice::Context& __ctx, const ::omero::model::Callback_OriginalFile_findPixelsOriginalFileMapPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findPixelsOriginalFileMap(removal, &__ctx, __del, __cookie);
    }

    ::omero::model::OriginalFilePixelsFileMapsSeq end_findPixelsOriginalFileMap(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::OriginalFilePixelsFileMapsSeq findPixelsOriginalFileMap(const ::omero::model::PixelsPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_findPixelsOriginalFileMap(const ::omero::model::PixelsPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unlinkPixels(const ::omero::model::PixelsPtr& removal)
    {
        unlinkPixels(removal, 0);
    }
    void unlinkPixels(const ::omero::model::PixelsPtr& removal, const ::Ice::Context& __ctx)
    {
        unlinkPixels(removal, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_unlinkPixels(const ::omero::model::PixelsPtr& removal, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unlinkPixels(removal, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_unlinkPixels(const ::omero::model::PixelsPtr& removal, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unlinkPixels(removal, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unlinkPixels(const ::omero::model::PixelsPtr& removal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unlinkPixels(removal, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unlinkPixels(const ::omero::model::PixelsPtr& removal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unlinkPixels(removal, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_unlinkPixels(const ::omero::model::PixelsPtr& removal)
    {
        return begin_unlinkPixels(removal, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unlinkPixels(const ::omero::model::PixelsPtr& removal, const ::Ice::Context& __ctx)
    {
        return begin_unlinkPixels(removal, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unlinkPixels(const ::omero::model::PixelsPtr& removal, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkPixels(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkPixels(const ::omero::model::PixelsPtr& removal, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkPixels(removal, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkPixels(const ::omero::model::PixelsPtr& removal, const ::omero::model::Callback_OriginalFile_unlinkPixelsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkPixels(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkPixels(const ::omero::model::PixelsPtr& removal, const ::Ice::Context& __ctx, const ::omero::model::Callback_OriginalFile_unlinkPixelsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkPixels(removal, &__ctx, __del, __cookie);
    }

    void end_unlinkPixels(const ::Ice::AsyncResultPtr&);
    
private:

    void unlinkPixels(const ::omero::model::PixelsPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unlinkPixels(const ::omero::model::PixelsPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removePixelsOriginalFileMapFromBoth(const ::omero::model::PixelsOriginalFileMapPtr& link, bool bothSides)
    {
        removePixelsOriginalFileMapFromBoth(link, bothSides, 0);
    }
    void removePixelsOriginalFileMapFromBoth(const ::omero::model::PixelsOriginalFileMapPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        removePixelsOriginalFileMapFromBoth(link, bothSides, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removePixelsOriginalFileMapFromBoth(const ::omero::model::PixelsOriginalFileMapPtr& link, bool bothSides, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removePixelsOriginalFileMapFromBoth(link, bothSides, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removePixelsOriginalFileMapFromBoth(const ::omero::model::PixelsOriginalFileMapPtr& link, bool bothSides, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removePixelsOriginalFileMapFromBoth(link, bothSides, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removePixelsOriginalFileMapFromBoth(const ::omero::model::PixelsOriginalFileMapPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removePixelsOriginalFileMapFromBoth(link, bothSides, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removePixelsOriginalFileMapFromBoth(const ::omero::model::PixelsOriginalFileMapPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removePixelsOriginalFileMapFromBoth(link, bothSides, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removePixelsOriginalFileMapFromBoth(const ::omero::model::PixelsOriginalFileMapPtr& link, bool bothSides)
    {
        return begin_removePixelsOriginalFileMapFromBoth(link, bothSides, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removePixelsOriginalFileMapFromBoth(const ::omero::model::PixelsOriginalFileMapPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        return begin_removePixelsOriginalFileMapFromBoth(link, bothSides, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removePixelsOriginalFileMapFromBoth(const ::omero::model::PixelsOriginalFileMapPtr& link, bool bothSides, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removePixelsOriginalFileMapFromBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removePixelsOriginalFileMapFromBoth(const ::omero::model::PixelsOriginalFileMapPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removePixelsOriginalFileMapFromBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removePixelsOriginalFileMapFromBoth(const ::omero::model::PixelsOriginalFileMapPtr& link, bool bothSides, const ::omero::model::Callback_OriginalFile_removePixelsOriginalFileMapFromBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removePixelsOriginalFileMapFromBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removePixelsOriginalFileMapFromBoth(const ::omero::model::PixelsOriginalFileMapPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::omero::model::Callback_OriginalFile_removePixelsOriginalFileMapFromBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removePixelsOriginalFileMapFromBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    void end_removePixelsOriginalFileMapFromBoth(const ::Ice::AsyncResultPtr&);
    
private:

    void removePixelsOriginalFileMapFromBoth(const ::omero::model::PixelsOriginalFileMapPtr&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removePixelsOriginalFileMapFromBoth(const ::omero::model::PixelsOriginalFileMapPtr&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::OriginalFileLinkedPixelsSeq linkedPixelsList()
    {
        return linkedPixelsList(0);
    }
    ::omero::model::OriginalFileLinkedPixelsSeq linkedPixelsList(const ::Ice::Context& __ctx)
    {
        return linkedPixelsList(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_linkedPixelsList(const ::IceInternal::Function<void (const ::omero::model::OriginalFileLinkedPixelsSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_linkedPixelsList(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_linkedPixelsList(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_linkedPixelsList(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_linkedPixelsList(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::OriginalFileLinkedPixelsSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_linkedPixelsList(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_linkedPixelsList(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_linkedPixelsList(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_linkedPixelsList(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::OriginalFileLinkedPixelsSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::OriginalFileLinkedPixelsSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
                ::omero::model::OriginalFileLinkedPixelsSeq __ret;
                try
                {
                    __ret = __proxy->end_linkedPixelsList(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::OriginalFileLinkedPixelsSeq&)> _response;
        };
        return begin_linkedPixelsList(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_linkedPixelsList()
    {
        return begin_linkedPixelsList(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkedPixelsList(const ::Ice::Context& __ctx)
    {
        return begin_linkedPixelsList(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkedPixelsList(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedPixelsList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedPixelsList(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedPixelsList(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedPixelsList(const ::omero::model::Callback_OriginalFile_linkedPixelsListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedPixelsList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedPixelsList(const ::Ice::Context& __ctx, const ::omero::model::Callback_OriginalFile_linkedPixelsListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedPixelsList(&__ctx, __del, __cookie);
    }

    ::omero::model::OriginalFileLinkedPixelsSeq end_linkedPixelsList(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::OriginalFileLinkedPixelsSeq linkedPixelsList(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_linkedPixelsList(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getPath()
    {
        return getPath(0);
    }
    ::omero::RStringPtr getPath(const ::Ice::Context& __ctx)
    {
        return getPath(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getPath(const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPath(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPath(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPath(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getPath(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPath(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPath(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPath(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getPath(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RStringPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
                ::omero::RStringPtr __ret;
                try
                {
                    __ret = __proxy->end_getPath(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RStringPtr&)> _response;
        };
        return begin_getPath(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getPath()
    {
        return begin_getPath(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPath(const ::Ice::Context& __ctx)
    {
        return begin_getPath(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPath(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPath(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPath(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPath(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPath(const ::omero::model::Callback_OriginalFile_getPathPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPath(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPath(const ::Ice::Context& __ctx, const ::omero::model::Callback_OriginalFile_getPathPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPath(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getPath(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getPath(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getPath(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setPath(const ::omero::RStringPtr& thePath)
    {
        setPath(thePath, 0);
    }
    void setPath(const ::omero::RStringPtr& thePath, const ::Ice::Context& __ctx)
    {
        setPath(thePath, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setPath(const ::omero::RStringPtr& thePath, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setPath(thePath, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setPath(const ::omero::RStringPtr& thePath, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPath(thePath, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setPath(const ::omero::RStringPtr& thePath, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setPath(thePath, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setPath(const ::omero::RStringPtr& thePath, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPath(thePath, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setPath(const ::omero::RStringPtr& thePath)
    {
        return begin_setPath(thePath, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPath(const ::omero::RStringPtr& thePath, const ::Ice::Context& __ctx)
    {
        return begin_setPath(thePath, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPath(const ::omero::RStringPtr& thePath, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPath(thePath, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPath(const ::omero::RStringPtr& thePath, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPath(thePath, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPath(const ::omero::RStringPtr& thePath, const ::omero::model::Callback_OriginalFile_setPathPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPath(thePath, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPath(const ::omero::RStringPtr& thePath, const ::Ice::Context& __ctx, const ::omero::model::Callback_OriginalFile_setPathPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPath(thePath, &__ctx, __del, __cookie);
    }

    void end_setPath(const ::Ice::AsyncResultPtr&);
    
private:

    void setPath(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setPath(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RLongPtr getSize()
    {
        return getSize(0);
    }
    ::omero::RLongPtr getSize(const ::Ice::Context& __ctx)
    {
        return getSize(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getSize(const ::IceInternal::Function<void (const ::omero::RLongPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getSize(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getSize(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getSize(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getSize(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RLongPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getSize(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getSize(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getSize(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getSize(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RLongPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RLongPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
                ::omero::RLongPtr __ret;
                try
                {
                    __ret = __proxy->end_getSize(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RLongPtr&)> _response;
        };
        return begin_getSize(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getSize()
    {
        return begin_getSize(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSize(const ::Ice::Context& __ctx)
    {
        return begin_getSize(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSize(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSize(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSize(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSize(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSize(const ::omero::model::Callback_OriginalFile_getSizePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSize(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSize(const ::Ice::Context& __ctx, const ::omero::model::Callback_OriginalFile_getSizePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSize(&__ctx, __del, __cookie);
    }

    ::omero::RLongPtr end_getSize(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RLongPtr getSize(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getSize(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setSize(const ::omero::RLongPtr& theSize)
    {
        setSize(theSize, 0);
    }
    void setSize(const ::omero::RLongPtr& theSize, const ::Ice::Context& __ctx)
    {
        setSize(theSize, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setSize(const ::omero::RLongPtr& theSize, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setSize(theSize, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setSize(const ::omero::RLongPtr& theSize, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setSize(theSize, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setSize(const ::omero::RLongPtr& theSize, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setSize(theSize, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setSize(const ::omero::RLongPtr& theSize, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setSize(theSize, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setSize(const ::omero::RLongPtr& theSize)
    {
        return begin_setSize(theSize, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setSize(const ::omero::RLongPtr& theSize, const ::Ice::Context& __ctx)
    {
        return begin_setSize(theSize, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setSize(const ::omero::RLongPtr& theSize, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSize(theSize, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSize(const ::omero::RLongPtr& theSize, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSize(theSize, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSize(const ::omero::RLongPtr& theSize, const ::omero::model::Callback_OriginalFile_setSizePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSize(theSize, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSize(const ::omero::RLongPtr& theSize, const ::Ice::Context& __ctx, const ::omero::model::Callback_OriginalFile_setSizePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSize(theSize, &__ctx, __del, __cookie);
    }

    void end_setSize(const ::Ice::AsyncResultPtr&);
    
private:

    void setSize(const ::omero::RLongPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setSize(const ::omero::RLongPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RTimePtr getAtime()
    {
        return getAtime(0);
    }
    ::omero::RTimePtr getAtime(const ::Ice::Context& __ctx)
    {
        return getAtime(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getAtime(const ::IceInternal::Function<void (const ::omero::RTimePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAtime(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAtime(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAtime(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getAtime(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RTimePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAtime(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAtime(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAtime(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getAtime(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RTimePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RTimePtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
                ::omero::RTimePtr __ret;
                try
                {
                    __ret = __proxy->end_getAtime(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RTimePtr&)> _response;
        };
        return begin_getAtime(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getAtime()
    {
        return begin_getAtime(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAtime(const ::Ice::Context& __ctx)
    {
        return begin_getAtime(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAtime(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAtime(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAtime(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAtime(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAtime(const ::omero::model::Callback_OriginalFile_getAtimePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAtime(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAtime(const ::Ice::Context& __ctx, const ::omero::model::Callback_OriginalFile_getAtimePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAtime(&__ctx, __del, __cookie);
    }

    ::omero::RTimePtr end_getAtime(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RTimePtr getAtime(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getAtime(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setAtime(const ::omero::RTimePtr& theAtime)
    {
        setAtime(theAtime, 0);
    }
    void setAtime(const ::omero::RTimePtr& theAtime, const ::Ice::Context& __ctx)
    {
        setAtime(theAtime, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setAtime(const ::omero::RTimePtr& theAtime, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setAtime(theAtime, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setAtime(const ::omero::RTimePtr& theAtime, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setAtime(theAtime, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setAtime(const ::omero::RTimePtr& theAtime, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setAtime(theAtime, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setAtime(const ::omero::RTimePtr& theAtime, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setAtime(theAtime, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setAtime(const ::omero::RTimePtr& theAtime)
    {
        return begin_setAtime(theAtime, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setAtime(const ::omero::RTimePtr& theAtime, const ::Ice::Context& __ctx)
    {
        return begin_setAtime(theAtime, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setAtime(const ::omero::RTimePtr& theAtime, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setAtime(theAtime, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setAtime(const ::omero::RTimePtr& theAtime, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setAtime(theAtime, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setAtime(const ::omero::RTimePtr& theAtime, const ::omero::model::Callback_OriginalFile_setAtimePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setAtime(theAtime, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setAtime(const ::omero::RTimePtr& theAtime, const ::Ice::Context& __ctx, const ::omero::model::Callback_OriginalFile_setAtimePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setAtime(theAtime, &__ctx, __del, __cookie);
    }

    void end_setAtime(const ::Ice::AsyncResultPtr&);
    
private:

    void setAtime(const ::omero::RTimePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setAtime(const ::omero::RTimePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RTimePtr getMtime()
    {
        return getMtime(0);
    }
    ::omero::RTimePtr getMtime(const ::Ice::Context& __ctx)
    {
        return getMtime(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getMtime(const ::IceInternal::Function<void (const ::omero::RTimePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getMtime(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getMtime(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getMtime(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getMtime(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RTimePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getMtime(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getMtime(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getMtime(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getMtime(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RTimePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RTimePtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
                ::omero::RTimePtr __ret;
                try
                {
                    __ret = __proxy->end_getMtime(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RTimePtr&)> _response;
        };
        return begin_getMtime(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getMtime()
    {
        return begin_getMtime(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getMtime(const ::Ice::Context& __ctx)
    {
        return begin_getMtime(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getMtime(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMtime(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMtime(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMtime(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMtime(const ::omero::model::Callback_OriginalFile_getMtimePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMtime(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMtime(const ::Ice::Context& __ctx, const ::omero::model::Callback_OriginalFile_getMtimePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMtime(&__ctx, __del, __cookie);
    }

    ::omero::RTimePtr end_getMtime(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RTimePtr getMtime(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getMtime(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setMtime(const ::omero::RTimePtr& theMtime)
    {
        setMtime(theMtime, 0);
    }
    void setMtime(const ::omero::RTimePtr& theMtime, const ::Ice::Context& __ctx)
    {
        setMtime(theMtime, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setMtime(const ::omero::RTimePtr& theMtime, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setMtime(theMtime, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setMtime(const ::omero::RTimePtr& theMtime, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setMtime(theMtime, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setMtime(const ::omero::RTimePtr& theMtime, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setMtime(theMtime, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setMtime(const ::omero::RTimePtr& theMtime, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setMtime(theMtime, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setMtime(const ::omero::RTimePtr& theMtime)
    {
        return begin_setMtime(theMtime, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setMtime(const ::omero::RTimePtr& theMtime, const ::Ice::Context& __ctx)
    {
        return begin_setMtime(theMtime, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setMtime(const ::omero::RTimePtr& theMtime, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setMtime(theMtime, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setMtime(const ::omero::RTimePtr& theMtime, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setMtime(theMtime, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setMtime(const ::omero::RTimePtr& theMtime, const ::omero::model::Callback_OriginalFile_setMtimePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setMtime(theMtime, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setMtime(const ::omero::RTimePtr& theMtime, const ::Ice::Context& __ctx, const ::omero::model::Callback_OriginalFile_setMtimePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setMtime(theMtime, &__ctx, __del, __cookie);
    }

    void end_setMtime(const ::Ice::AsyncResultPtr&);
    
private:

    void setMtime(const ::omero::RTimePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setMtime(const ::omero::RTimePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RTimePtr getCtime()
    {
        return getCtime(0);
    }
    ::omero::RTimePtr getCtime(const ::Ice::Context& __ctx)
    {
        return getCtime(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getCtime(const ::IceInternal::Function<void (const ::omero::RTimePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getCtime(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getCtime(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getCtime(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getCtime(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RTimePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getCtime(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getCtime(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getCtime(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getCtime(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RTimePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RTimePtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
                ::omero::RTimePtr __ret;
                try
                {
                    __ret = __proxy->end_getCtime(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RTimePtr&)> _response;
        };
        return begin_getCtime(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getCtime()
    {
        return begin_getCtime(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getCtime(const ::Ice::Context& __ctx)
    {
        return begin_getCtime(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getCtime(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCtime(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCtime(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCtime(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCtime(const ::omero::model::Callback_OriginalFile_getCtimePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCtime(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCtime(const ::Ice::Context& __ctx, const ::omero::model::Callback_OriginalFile_getCtimePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCtime(&__ctx, __del, __cookie);
    }

    ::omero::RTimePtr end_getCtime(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RTimePtr getCtime(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getCtime(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setCtime(const ::omero::RTimePtr& theCtime)
    {
        setCtime(theCtime, 0);
    }
    void setCtime(const ::omero::RTimePtr& theCtime, const ::Ice::Context& __ctx)
    {
        setCtime(theCtime, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setCtime(const ::omero::RTimePtr& theCtime, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setCtime(theCtime, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setCtime(const ::omero::RTimePtr& theCtime, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setCtime(theCtime, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setCtime(const ::omero::RTimePtr& theCtime, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setCtime(theCtime, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setCtime(const ::omero::RTimePtr& theCtime, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setCtime(theCtime, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setCtime(const ::omero::RTimePtr& theCtime)
    {
        return begin_setCtime(theCtime, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setCtime(const ::omero::RTimePtr& theCtime, const ::Ice::Context& __ctx)
    {
        return begin_setCtime(theCtime, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setCtime(const ::omero::RTimePtr& theCtime, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCtime(theCtime, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setCtime(const ::omero::RTimePtr& theCtime, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCtime(theCtime, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setCtime(const ::omero::RTimePtr& theCtime, const ::omero::model::Callback_OriginalFile_setCtimePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCtime(theCtime, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setCtime(const ::omero::RTimePtr& theCtime, const ::Ice::Context& __ctx, const ::omero::model::Callback_OriginalFile_setCtimePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCtime(theCtime, &__ctx, __del, __cookie);
    }

    void end_setCtime(const ::Ice::AsyncResultPtr&);
    
private:

    void setCtime(const ::omero::RTimePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setCtime(const ::omero::RTimePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::ChecksumAlgorithmPtr getHasher()
    {
        return getHasher(0);
    }
    ::omero::model::ChecksumAlgorithmPtr getHasher(const ::Ice::Context& __ctx)
    {
        return getHasher(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getHasher(const ::IceInternal::Function<void (const ::omero::model::ChecksumAlgorithmPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getHasher(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getHasher(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getHasher(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getHasher(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::ChecksumAlgorithmPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getHasher(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getHasher(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getHasher(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getHasher(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::ChecksumAlgorithmPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::ChecksumAlgorithmPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
                ::omero::model::ChecksumAlgorithmPtr __ret;
                try
                {
                    __ret = __proxy->end_getHasher(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::ChecksumAlgorithmPtr&)> _response;
        };
        return begin_getHasher(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getHasher()
    {
        return begin_getHasher(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getHasher(const ::Ice::Context& __ctx)
    {
        return begin_getHasher(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getHasher(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getHasher(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getHasher(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getHasher(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getHasher(const ::omero::model::Callback_OriginalFile_getHasherPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getHasher(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getHasher(const ::Ice::Context& __ctx, const ::omero::model::Callback_OriginalFile_getHasherPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getHasher(&__ctx, __del, __cookie);
    }

    ::omero::model::ChecksumAlgorithmPtr end_getHasher(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::ChecksumAlgorithmPtr getHasher(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getHasher(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setHasher(const ::omero::model::ChecksumAlgorithmPtr& theHasher)
    {
        setHasher(theHasher, 0);
    }
    void setHasher(const ::omero::model::ChecksumAlgorithmPtr& theHasher, const ::Ice::Context& __ctx)
    {
        setHasher(theHasher, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setHasher(const ::omero::model::ChecksumAlgorithmPtr& theHasher, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setHasher(theHasher, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setHasher(const ::omero::model::ChecksumAlgorithmPtr& theHasher, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setHasher(theHasher, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setHasher(const ::omero::model::ChecksumAlgorithmPtr& theHasher, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setHasher(theHasher, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setHasher(const ::omero::model::ChecksumAlgorithmPtr& theHasher, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setHasher(theHasher, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setHasher(const ::omero::model::ChecksumAlgorithmPtr& theHasher)
    {
        return begin_setHasher(theHasher, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setHasher(const ::omero::model::ChecksumAlgorithmPtr& theHasher, const ::Ice::Context& __ctx)
    {
        return begin_setHasher(theHasher, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setHasher(const ::omero::model::ChecksumAlgorithmPtr& theHasher, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setHasher(theHasher, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setHasher(const ::omero::model::ChecksumAlgorithmPtr& theHasher, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setHasher(theHasher, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setHasher(const ::omero::model::ChecksumAlgorithmPtr& theHasher, const ::omero::model::Callback_OriginalFile_setHasherPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setHasher(theHasher, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setHasher(const ::omero::model::ChecksumAlgorithmPtr& theHasher, const ::Ice::Context& __ctx, const ::omero::model::Callback_OriginalFile_setHasherPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setHasher(theHasher, &__ctx, __del, __cookie);
    }

    void end_setHasher(const ::Ice::AsyncResultPtr&);
    
private:

    void setHasher(const ::omero::model::ChecksumAlgorithmPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setHasher(const ::omero::model::ChecksumAlgorithmPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getHash()
    {
        return getHash(0);
    }
    ::omero::RStringPtr getHash(const ::Ice::Context& __ctx)
    {
        return getHash(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getHash(const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getHash(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getHash(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getHash(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getHash(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getHash(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getHash(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getHash(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getHash(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RStringPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
                ::omero::RStringPtr __ret;
                try
                {
                    __ret = __proxy->end_getHash(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RStringPtr&)> _response;
        };
        return begin_getHash(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getHash()
    {
        return begin_getHash(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getHash(const ::Ice::Context& __ctx)
    {
        return begin_getHash(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getHash(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getHash(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getHash(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getHash(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getHash(const ::omero::model::Callback_OriginalFile_getHashPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getHash(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getHash(const ::Ice::Context& __ctx, const ::omero::model::Callback_OriginalFile_getHashPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getHash(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getHash(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getHash(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getHash(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setHash(const ::omero::RStringPtr& theHash)
    {
        setHash(theHash, 0);
    }
    void setHash(const ::omero::RStringPtr& theHash, const ::Ice::Context& __ctx)
    {
        setHash(theHash, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setHash(const ::omero::RStringPtr& theHash, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setHash(theHash, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setHash(const ::omero::RStringPtr& theHash, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setHash(theHash, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setHash(const ::omero::RStringPtr& theHash, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setHash(theHash, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setHash(const ::omero::RStringPtr& theHash, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setHash(theHash, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setHash(const ::omero::RStringPtr& theHash)
    {
        return begin_setHash(theHash, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setHash(const ::omero::RStringPtr& theHash, const ::Ice::Context& __ctx)
    {
        return begin_setHash(theHash, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setHash(const ::omero::RStringPtr& theHash, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setHash(theHash, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setHash(const ::omero::RStringPtr& theHash, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setHash(theHash, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setHash(const ::omero::RStringPtr& theHash, const ::omero::model::Callback_OriginalFile_setHashPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setHash(theHash, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setHash(const ::omero::RStringPtr& theHash, const ::Ice::Context& __ctx, const ::omero::model::Callback_OriginalFile_setHashPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setHash(theHash, &__ctx, __del, __cookie);
    }

    void end_setHash(const ::Ice::AsyncResultPtr&);
    
private:

    void setHash(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setHash(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getMimetype()
    {
        return getMimetype(0);
    }
    ::omero::RStringPtr getMimetype(const ::Ice::Context& __ctx)
    {
        return getMimetype(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getMimetype(const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getMimetype(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getMimetype(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getMimetype(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getMimetype(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getMimetype(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getMimetype(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getMimetype(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getMimetype(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RStringPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
                ::omero::RStringPtr __ret;
                try
                {
                    __ret = __proxy->end_getMimetype(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RStringPtr&)> _response;
        };
        return begin_getMimetype(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getMimetype()
    {
        return begin_getMimetype(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getMimetype(const ::Ice::Context& __ctx)
    {
        return begin_getMimetype(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getMimetype(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMimetype(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMimetype(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMimetype(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMimetype(const ::omero::model::Callback_OriginalFile_getMimetypePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMimetype(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMimetype(const ::Ice::Context& __ctx, const ::omero::model::Callback_OriginalFile_getMimetypePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMimetype(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getMimetype(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getMimetype(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getMimetype(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setMimetype(const ::omero::RStringPtr& theMimetype)
    {
        setMimetype(theMimetype, 0);
    }
    void setMimetype(const ::omero::RStringPtr& theMimetype, const ::Ice::Context& __ctx)
    {
        setMimetype(theMimetype, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setMimetype(const ::omero::RStringPtr& theMimetype, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setMimetype(theMimetype, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setMimetype(const ::omero::RStringPtr& theMimetype, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setMimetype(theMimetype, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setMimetype(const ::omero::RStringPtr& theMimetype, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setMimetype(theMimetype, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setMimetype(const ::omero::RStringPtr& theMimetype, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setMimetype(theMimetype, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setMimetype(const ::omero::RStringPtr& theMimetype)
    {
        return begin_setMimetype(theMimetype, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setMimetype(const ::omero::RStringPtr& theMimetype, const ::Ice::Context& __ctx)
    {
        return begin_setMimetype(theMimetype, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setMimetype(const ::omero::RStringPtr& theMimetype, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setMimetype(theMimetype, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setMimetype(const ::omero::RStringPtr& theMimetype, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setMimetype(theMimetype, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setMimetype(const ::omero::RStringPtr& theMimetype, const ::omero::model::Callback_OriginalFile_setMimetypePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setMimetype(theMimetype, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setMimetype(const ::omero::RStringPtr& theMimetype, const ::Ice::Context& __ctx, const ::omero::model::Callback_OriginalFile_setMimetypePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setMimetype(theMimetype, &__ctx, __del, __cookie);
    }

    void end_setMimetype(const ::Ice::AsyncResultPtr&);
    
private:

    void setMimetype(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setMimetype(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unloadAnnotationLinks()
    {
        unloadAnnotationLinks(0);
    }
    void unloadAnnotationLinks(const ::Ice::Context& __ctx)
    {
        unloadAnnotationLinks(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_unloadAnnotationLinks(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unloadAnnotationLinks(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_unloadAnnotationLinks(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unloadAnnotationLinks(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unloadAnnotationLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unloadAnnotationLinks(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unloadAnnotationLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unloadAnnotationLinks(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks()
    {
        return begin_unloadAnnotationLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return begin_unloadAnnotationLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::omero::model::Callback_OriginalFile_unloadAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_OriginalFile_unloadAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadAnnotationLinks(&__ctx, __del, __cookie);
    }

    void end_unloadAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    void unloadAnnotationLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int sizeOfAnnotationLinks()
    {
        return sizeOfAnnotationLinks(0);
    }
    ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return sizeOfAnnotationLinks(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_sizeOfAnnotationLinks(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sizeOfAnnotationLinks(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfAnnotationLinks(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sizeOfAnnotationLinks(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfAnnotationLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sizeOfAnnotationLinks(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfAnnotationLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sizeOfAnnotationLinks(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_sizeOfAnnotationLinks(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_sizeOfAnnotationLinks(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_sizeOfAnnotationLinks(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks()
    {
        return begin_sizeOfAnnotationLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return begin_sizeOfAnnotationLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::omero::model::Callback_OriginalFile_sizeOfAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_OriginalFile_sizeOfAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_sizeOfAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::OriginalFileAnnotationLinksSeq copyAnnotationLinks()
    {
        return copyAnnotationLinks(0);
    }
    ::omero::model::OriginalFileAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return copyAnnotationLinks(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_copyAnnotationLinks(const ::IceInternal::Function<void (const ::omero::model::OriginalFileAnnotationLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_copyAnnotationLinks(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_copyAnnotationLinks(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_copyAnnotationLinks(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_copyAnnotationLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::OriginalFileAnnotationLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_copyAnnotationLinks(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_copyAnnotationLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_copyAnnotationLinks(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_copyAnnotationLinks(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::OriginalFileAnnotationLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::OriginalFileAnnotationLinksSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
                ::omero::model::OriginalFileAnnotationLinksSeq __ret;
                try
                {
                    __ret = __proxy->end_copyAnnotationLinks(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::OriginalFileAnnotationLinksSeq&)> _response;
        };
        return begin_copyAnnotationLinks(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks()
    {
        return begin_copyAnnotationLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return begin_copyAnnotationLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::omero::model::Callback_OriginalFile_copyAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_OriginalFile_copyAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::omero::model::OriginalFileAnnotationLinksSeq end_copyAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::OriginalFileAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addOriginalFileAnnotationLink(const ::omero::model::OriginalFileAnnotationLinkPtr& target)
    {
        addOriginalFileAnnotationLink(target, 0);
    }
    void addOriginalFileAnnotationLink(const ::omero::model::OriginalFileAnnotationLinkPtr& target, const ::Ice::Context& __ctx)
    {
        addOriginalFileAnnotationLink(target, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addOriginalFileAnnotationLink(const ::omero::model::OriginalFileAnnotationLinkPtr& target, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addOriginalFileAnnotationLink(target, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addOriginalFileAnnotationLink(const ::omero::model::OriginalFileAnnotationLinkPtr& target, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addOriginalFileAnnotationLink(target, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addOriginalFileAnnotationLink(const ::omero::model::OriginalFileAnnotationLinkPtr& target, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addOriginalFileAnnotationLink(target, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addOriginalFileAnnotationLink(const ::omero::model::OriginalFileAnnotationLinkPtr& target, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addOriginalFileAnnotationLink(target, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addOriginalFileAnnotationLink(const ::omero::model::OriginalFileAnnotationLinkPtr& target)
    {
        return begin_addOriginalFileAnnotationLink(target, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addOriginalFileAnnotationLink(const ::omero::model::OriginalFileAnnotationLinkPtr& target, const ::Ice::Context& __ctx)
    {
        return begin_addOriginalFileAnnotationLink(target, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addOriginalFileAnnotationLink(const ::omero::model::OriginalFileAnnotationLinkPtr& target, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addOriginalFileAnnotationLink(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addOriginalFileAnnotationLink(const ::omero::model::OriginalFileAnnotationLinkPtr& target, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addOriginalFileAnnotationLink(target, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addOriginalFileAnnotationLink(const ::omero::model::OriginalFileAnnotationLinkPtr& target, const ::omero::model::Callback_OriginalFile_addOriginalFileAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addOriginalFileAnnotationLink(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addOriginalFileAnnotationLink(const ::omero::model::OriginalFileAnnotationLinkPtr& target, const ::Ice::Context& __ctx, const ::omero::model::Callback_OriginalFile_addOriginalFileAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addOriginalFileAnnotationLink(target, &__ctx, __del, __cookie);
    }

    void end_addOriginalFileAnnotationLink(const ::Ice::AsyncResultPtr&);
    
private:

    void addOriginalFileAnnotationLink(const ::omero::model::OriginalFileAnnotationLinkPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addOriginalFileAnnotationLink(const ::omero::model::OriginalFileAnnotationLinkPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addAllOriginalFileAnnotationLinkSet(const ::omero::model::OriginalFileAnnotationLinksSeq& targets)
    {
        addAllOriginalFileAnnotationLinkSet(targets, 0);
    }
    void addAllOriginalFileAnnotationLinkSet(const ::omero::model::OriginalFileAnnotationLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        addAllOriginalFileAnnotationLinkSet(targets, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addAllOriginalFileAnnotationLinkSet(const ::omero::model::OriginalFileAnnotationLinksSeq& targets, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addAllOriginalFileAnnotationLinkSet(targets, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addAllOriginalFileAnnotationLinkSet(const ::omero::model::OriginalFileAnnotationLinksSeq& targets, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addAllOriginalFileAnnotationLinkSet(targets, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addAllOriginalFileAnnotationLinkSet(const ::omero::model::OriginalFileAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addAllOriginalFileAnnotationLinkSet(targets, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addAllOriginalFileAnnotationLinkSet(const ::omero::model::OriginalFileAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addAllOriginalFileAnnotationLinkSet(targets, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addAllOriginalFileAnnotationLinkSet(const ::omero::model::OriginalFileAnnotationLinksSeq& targets)
    {
        return begin_addAllOriginalFileAnnotationLinkSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllOriginalFileAnnotationLinkSet(const ::omero::model::OriginalFileAnnotationLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_addAllOriginalFileAnnotationLinkSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllOriginalFileAnnotationLinkSet(const ::omero::model::OriginalFileAnnotationLinksSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllOriginalFileAnnotationLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllOriginalFileAnnotationLinkSet(const ::omero::model::OriginalFileAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllOriginalFileAnnotationLinkSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllOriginalFileAnnotationLinkSet(const ::omero::model::OriginalFileAnnotationLinksSeq& targets, const ::omero::model::Callback_OriginalFile_addAllOriginalFileAnnotationLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllOriginalFileAnnotationLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllOriginalFileAnnotationLinkSet(const ::omero::model::OriginalFileAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_OriginalFile_addAllOriginalFileAnnotationLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllOriginalFileAnnotationLinkSet(targets, &__ctx, __del, __cookie);
    }

    void end_addAllOriginalFileAnnotationLinkSet(const ::Ice::AsyncResultPtr&);
    
private:

    void addAllOriginalFileAnnotationLinkSet(const ::omero::model::OriginalFileAnnotationLinksSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addAllOriginalFileAnnotationLinkSet(const ::omero::model::OriginalFileAnnotationLinksSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeOriginalFileAnnotationLink(const ::omero::model::OriginalFileAnnotationLinkPtr& theTarget)
    {
        removeOriginalFileAnnotationLink(theTarget, 0);
    }
    void removeOriginalFileAnnotationLink(const ::omero::model::OriginalFileAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx)
    {
        removeOriginalFileAnnotationLink(theTarget, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeOriginalFileAnnotationLink(const ::omero::model::OriginalFileAnnotationLinkPtr& theTarget, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeOriginalFileAnnotationLink(theTarget, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeOriginalFileAnnotationLink(const ::omero::model::OriginalFileAnnotationLinkPtr& theTarget, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeOriginalFileAnnotationLink(theTarget, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeOriginalFileAnnotationLink(const ::omero::model::OriginalFileAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeOriginalFileAnnotationLink(theTarget, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeOriginalFileAnnotationLink(const ::omero::model::OriginalFileAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeOriginalFileAnnotationLink(theTarget, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeOriginalFileAnnotationLink(const ::omero::model::OriginalFileAnnotationLinkPtr& theTarget)
    {
        return begin_removeOriginalFileAnnotationLink(theTarget, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeOriginalFileAnnotationLink(const ::omero::model::OriginalFileAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx)
    {
        return begin_removeOriginalFileAnnotationLink(theTarget, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeOriginalFileAnnotationLink(const ::omero::model::OriginalFileAnnotationLinkPtr& theTarget, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeOriginalFileAnnotationLink(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeOriginalFileAnnotationLink(const ::omero::model::OriginalFileAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeOriginalFileAnnotationLink(theTarget, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeOriginalFileAnnotationLink(const ::omero::model::OriginalFileAnnotationLinkPtr& theTarget, const ::omero::model::Callback_OriginalFile_removeOriginalFileAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeOriginalFileAnnotationLink(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeOriginalFileAnnotationLink(const ::omero::model::OriginalFileAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::omero::model::Callback_OriginalFile_removeOriginalFileAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeOriginalFileAnnotationLink(theTarget, &__ctx, __del, __cookie);
    }

    void end_removeOriginalFileAnnotationLink(const ::Ice::AsyncResultPtr&);
    
private:

    void removeOriginalFileAnnotationLink(const ::omero::model::OriginalFileAnnotationLinkPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeOriginalFileAnnotationLink(const ::omero::model::OriginalFileAnnotationLinkPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeAllOriginalFileAnnotationLinkSet(const ::omero::model::OriginalFileAnnotationLinksSeq& targets)
    {
        removeAllOriginalFileAnnotationLinkSet(targets, 0);
    }
    void removeAllOriginalFileAnnotationLinkSet(const ::omero::model::OriginalFileAnnotationLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        removeAllOriginalFileAnnotationLinkSet(targets, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeAllOriginalFileAnnotationLinkSet(const ::omero::model::OriginalFileAnnotationLinksSeq& targets, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeAllOriginalFileAnnotationLinkSet(targets, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeAllOriginalFileAnnotationLinkSet(const ::omero::model::OriginalFileAnnotationLinksSeq& targets, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeAllOriginalFileAnnotationLinkSet(targets, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeAllOriginalFileAnnotationLinkSet(const ::omero::model::OriginalFileAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeAllOriginalFileAnnotationLinkSet(targets, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeAllOriginalFileAnnotationLinkSet(const ::omero::model::OriginalFileAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeAllOriginalFileAnnotationLinkSet(targets, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeAllOriginalFileAnnotationLinkSet(const ::omero::model::OriginalFileAnnotationLinksSeq& targets)
    {
        return begin_removeAllOriginalFileAnnotationLinkSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllOriginalFileAnnotationLinkSet(const ::omero::model::OriginalFileAnnotationLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_removeAllOriginalFileAnnotationLinkSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllOriginalFileAnnotationLinkSet(const ::omero::model::OriginalFileAnnotationLinksSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllOriginalFileAnnotationLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllOriginalFileAnnotationLinkSet(const ::omero::model::OriginalFileAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllOriginalFileAnnotationLinkSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllOriginalFileAnnotationLinkSet(const ::omero::model::OriginalFileAnnotationLinksSeq& targets, const ::omero::model::Callback_OriginalFile_removeAllOriginalFileAnnotationLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllOriginalFileAnnotationLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllOriginalFileAnnotationLinkSet(const ::omero::model::OriginalFileAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_OriginalFile_removeAllOriginalFileAnnotationLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllOriginalFileAnnotationLinkSet(targets, &__ctx, __del, __cookie);
    }

    void end_removeAllOriginalFileAnnotationLinkSet(const ::Ice::AsyncResultPtr&);
    
private:

    void removeAllOriginalFileAnnotationLinkSet(const ::omero::model::OriginalFileAnnotationLinksSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeAllOriginalFileAnnotationLinkSet(const ::omero::model::OriginalFileAnnotationLinksSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void clearAnnotationLinks()
    {
        clearAnnotationLinks(0);
    }
    void clearAnnotationLinks(const ::Ice::Context& __ctx)
    {
        clearAnnotationLinks(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_clearAnnotationLinks(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_clearAnnotationLinks(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_clearAnnotationLinks(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_clearAnnotationLinks(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_clearAnnotationLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_clearAnnotationLinks(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_clearAnnotationLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_clearAnnotationLinks(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks()
    {
        return begin_clearAnnotationLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return begin_clearAnnotationLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::omero::model::Callback_OriginalFile_clearAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_OriginalFile_clearAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearAnnotationLinks(&__ctx, __del, __cookie);
    }

    void end_clearAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    void clearAnnotationLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reloadAnnotationLinks(const ::omero::model::OriginalFilePtr& toCopy)
    {
        reloadAnnotationLinks(toCopy, 0);
    }
    void reloadAnnotationLinks(const ::omero::model::OriginalFilePtr& toCopy, const ::Ice::Context& __ctx)
    {
        reloadAnnotationLinks(toCopy, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_reloadAnnotationLinks(const ::omero::model::OriginalFilePtr& toCopy, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reloadAnnotationLinks(toCopy, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_reloadAnnotationLinks(const ::omero::model::OriginalFilePtr& toCopy, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reloadAnnotationLinks(toCopy, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reloadAnnotationLinks(const ::omero::model::OriginalFilePtr& toCopy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reloadAnnotationLinks(toCopy, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reloadAnnotationLinks(const ::omero::model::OriginalFilePtr& toCopy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reloadAnnotationLinks(toCopy, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::OriginalFilePtr& toCopy)
    {
        return begin_reloadAnnotationLinks(toCopy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::OriginalFilePtr& toCopy, const ::Ice::Context& __ctx)
    {
        return begin_reloadAnnotationLinks(toCopy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::OriginalFilePtr& toCopy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadAnnotationLinks(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::OriginalFilePtr& toCopy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadAnnotationLinks(toCopy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::OriginalFilePtr& toCopy, const ::omero::model::Callback_OriginalFile_reloadAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadAnnotationLinks(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::OriginalFilePtr& toCopy, const ::Ice::Context& __ctx, const ::omero::model::Callback_OriginalFile_reloadAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadAnnotationLinks(toCopy, &__ctx, __del, __cookie);
    }

    void end_reloadAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    void reloadAnnotationLinks(const ::omero::model::OriginalFilePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::OriginalFilePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::sys::CountMap getAnnotationLinksCountPerOwner()
    {
        return getAnnotationLinksCountPerOwner(0);
    }
    ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx)
    {
        return getAnnotationLinksCountPerOwner(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getAnnotationLinksCountPerOwner(const ::IceInternal::Function<void (const ::omero::sys::CountMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAnnotationLinksCountPerOwner(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAnnotationLinksCountPerOwner(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAnnotationLinksCountPerOwner(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::sys::CountMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAnnotationLinksCountPerOwner(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAnnotationLinksCountPerOwner(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getAnnotationLinksCountPerOwner(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::sys::CountMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::sys::CountMap&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
                ::omero::sys::CountMap __ret;
                try
                {
                    __ret = __proxy->end_getAnnotationLinksCountPerOwner(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::sys::CountMap&)> _response;
        };
        return begin_getAnnotationLinksCountPerOwner(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner()
    {
        return begin_getAnnotationLinksCountPerOwner(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx)
    {
        return begin_getAnnotationLinksCountPerOwner(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAnnotationLinksCountPerOwner(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAnnotationLinksCountPerOwner(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::omero::model::Callback_OriginalFile_getAnnotationLinksCountPerOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAnnotationLinksCountPerOwner(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx, const ::omero::model::Callback_OriginalFile_getAnnotationLinksCountPerOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAnnotationLinksCountPerOwner(&__ctx, __del, __cookie);
    }

    ::omero::sys::CountMap end_getAnnotationLinksCountPerOwner(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::OriginalFileAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr& addition)
    {
        return linkAnnotation(addition, 0);
    }
    ::omero::model::OriginalFileAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx)
    {
        return linkAnnotation(addition, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::IceInternal::Function<void (const ::omero::model::OriginalFileAnnotationLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_linkAnnotation(addition, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_linkAnnotation(addition, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::OriginalFileAnnotationLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_linkAnnotation(addition, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_linkAnnotation(addition, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::OriginalFileAnnotationLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::OriginalFileAnnotationLinkPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
                ::omero::model::OriginalFileAnnotationLinkPtr __ret;
                try
                {
                    __ret = __proxy->end_linkAnnotation(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::OriginalFileAnnotationLinkPtr&)> _response;
        };
        return begin_linkAnnotation(addition, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition)
    {
        return begin_linkAnnotation(addition, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx)
    {
        return begin_linkAnnotation(addition, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkAnnotation(addition, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkAnnotation(addition, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::omero::model::Callback_OriginalFile_linkAnnotationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkAnnotation(addition, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx, const ::omero::model::Callback_OriginalFile_linkAnnotationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkAnnotation(addition, &__ctx, __del, __cookie);
    }

    ::omero::model::OriginalFileAnnotationLinkPtr end_linkAnnotation(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::OriginalFileAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addOriginalFileAnnotationLinkToBoth(const ::omero::model::OriginalFileAnnotationLinkPtr& link, bool bothSides)
    {
        addOriginalFileAnnotationLinkToBoth(link, bothSides, 0);
    }
    void addOriginalFileAnnotationLinkToBoth(const ::omero::model::OriginalFileAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        addOriginalFileAnnotationLinkToBoth(link, bothSides, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addOriginalFileAnnotationLinkToBoth(const ::omero::model::OriginalFileAnnotationLinkPtr& link, bool bothSides, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addOriginalFileAnnotationLinkToBoth(link, bothSides, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addOriginalFileAnnotationLinkToBoth(const ::omero::model::OriginalFileAnnotationLinkPtr& link, bool bothSides, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addOriginalFileAnnotationLinkToBoth(link, bothSides, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addOriginalFileAnnotationLinkToBoth(const ::omero::model::OriginalFileAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addOriginalFileAnnotationLinkToBoth(link, bothSides, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addOriginalFileAnnotationLinkToBoth(const ::omero::model::OriginalFileAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addOriginalFileAnnotationLinkToBoth(link, bothSides, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addOriginalFileAnnotationLinkToBoth(const ::omero::model::OriginalFileAnnotationLinkPtr& link, bool bothSides)
    {
        return begin_addOriginalFileAnnotationLinkToBoth(link, bothSides, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addOriginalFileAnnotationLinkToBoth(const ::omero::model::OriginalFileAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        return begin_addOriginalFileAnnotationLinkToBoth(link, bothSides, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addOriginalFileAnnotationLinkToBoth(const ::omero::model::OriginalFileAnnotationLinkPtr& link, bool bothSides, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addOriginalFileAnnotationLinkToBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addOriginalFileAnnotationLinkToBoth(const ::omero::model::OriginalFileAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addOriginalFileAnnotationLinkToBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addOriginalFileAnnotationLinkToBoth(const ::omero::model::OriginalFileAnnotationLinkPtr& link, bool bothSides, const ::omero::model::Callback_OriginalFile_addOriginalFileAnnotationLinkToBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addOriginalFileAnnotationLinkToBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addOriginalFileAnnotationLinkToBoth(const ::omero::model::OriginalFileAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::omero::model::Callback_OriginalFile_addOriginalFileAnnotationLinkToBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addOriginalFileAnnotationLinkToBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    void end_addOriginalFileAnnotationLinkToBoth(const ::Ice::AsyncResultPtr&);
    
private:

    void addOriginalFileAnnotationLinkToBoth(const ::omero::model::OriginalFileAnnotationLinkPtr&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addOriginalFileAnnotationLinkToBoth(const ::omero::model::OriginalFileAnnotationLinkPtr&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::OriginalFileAnnotationLinksSeq findOriginalFileAnnotationLink(const ::omero::model::AnnotationPtr& removal)
    {
        return findOriginalFileAnnotationLink(removal, 0);
    }
    ::omero::model::OriginalFileAnnotationLinksSeq findOriginalFileAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx)
    {
        return findOriginalFileAnnotationLink(removal, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_findOriginalFileAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::IceInternal::Function<void (const ::omero::model::OriginalFileAnnotationLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_findOriginalFileAnnotationLink(removal, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_findOriginalFileAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_findOriginalFileAnnotationLink(removal, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_findOriginalFileAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::OriginalFileAnnotationLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_findOriginalFileAnnotationLink(removal, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_findOriginalFileAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_findOriginalFileAnnotationLink(removal, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_findOriginalFileAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::OriginalFileAnnotationLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::OriginalFileAnnotationLinksSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
                ::omero::model::OriginalFileAnnotationLinksSeq __ret;
                try
                {
                    __ret = __proxy->end_findOriginalFileAnnotationLink(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::OriginalFileAnnotationLinksSeq&)> _response;
        };
        return begin_findOriginalFileAnnotationLink(removal, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_findOriginalFileAnnotationLink(const ::omero::model::AnnotationPtr& removal)
    {
        return begin_findOriginalFileAnnotationLink(removal, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findOriginalFileAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx)
    {
        return begin_findOriginalFileAnnotationLink(removal, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findOriginalFileAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findOriginalFileAnnotationLink(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findOriginalFileAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findOriginalFileAnnotationLink(removal, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findOriginalFileAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::omero::model::Callback_OriginalFile_findOriginalFileAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findOriginalFileAnnotationLink(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findOriginalFileAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::omero::model::Callback_OriginalFile_findOriginalFileAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findOriginalFileAnnotationLink(removal, &__ctx, __del, __cookie);
    }

    ::omero::model::OriginalFileAnnotationLinksSeq end_findOriginalFileAnnotationLink(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::OriginalFileAnnotationLinksSeq findOriginalFileAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_findOriginalFileAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unlinkAnnotation(const ::omero::model::AnnotationPtr& removal)
    {
        unlinkAnnotation(removal, 0);
    }
    void unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx)
    {
        unlinkAnnotation(removal, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unlinkAnnotation(removal, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unlinkAnnotation(removal, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unlinkAnnotation(removal, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unlinkAnnotation(removal, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal)
    {
        return begin_unlinkAnnotation(removal, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx)
    {
        return begin_unlinkAnnotation(removal, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkAnnotation(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkAnnotation(removal, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::omero::model::Callback_OriginalFile_unlinkAnnotationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkAnnotation(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::omero::model::Callback_OriginalFile_unlinkAnnotationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkAnnotation(removal, &__ctx, __del, __cookie);
    }

    void end_unlinkAnnotation(const ::Ice::AsyncResultPtr&);
    
private:

    void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeOriginalFileAnnotationLinkFromBoth(const ::omero::model::OriginalFileAnnotationLinkPtr& link, bool bothSides)
    {
        removeOriginalFileAnnotationLinkFromBoth(link, bothSides, 0);
    }
    void removeOriginalFileAnnotationLinkFromBoth(const ::omero::model::OriginalFileAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        removeOriginalFileAnnotationLinkFromBoth(link, bothSides, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeOriginalFileAnnotationLinkFromBoth(const ::omero::model::OriginalFileAnnotationLinkPtr& link, bool bothSides, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeOriginalFileAnnotationLinkFromBoth(link, bothSides, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeOriginalFileAnnotationLinkFromBoth(const ::omero::model::OriginalFileAnnotationLinkPtr& link, bool bothSides, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeOriginalFileAnnotationLinkFromBoth(link, bothSides, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeOriginalFileAnnotationLinkFromBoth(const ::omero::model::OriginalFileAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeOriginalFileAnnotationLinkFromBoth(link, bothSides, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeOriginalFileAnnotationLinkFromBoth(const ::omero::model::OriginalFileAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeOriginalFileAnnotationLinkFromBoth(link, bothSides, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeOriginalFileAnnotationLinkFromBoth(const ::omero::model::OriginalFileAnnotationLinkPtr& link, bool bothSides)
    {
        return begin_removeOriginalFileAnnotationLinkFromBoth(link, bothSides, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeOriginalFileAnnotationLinkFromBoth(const ::omero::model::OriginalFileAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        return begin_removeOriginalFileAnnotationLinkFromBoth(link, bothSides, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeOriginalFileAnnotationLinkFromBoth(const ::omero::model::OriginalFileAnnotationLinkPtr& link, bool bothSides, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeOriginalFileAnnotationLinkFromBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeOriginalFileAnnotationLinkFromBoth(const ::omero::model::OriginalFileAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeOriginalFileAnnotationLinkFromBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeOriginalFileAnnotationLinkFromBoth(const ::omero::model::OriginalFileAnnotationLinkPtr& link, bool bothSides, const ::omero::model::Callback_OriginalFile_removeOriginalFileAnnotationLinkFromBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeOriginalFileAnnotationLinkFromBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeOriginalFileAnnotationLinkFromBoth(const ::omero::model::OriginalFileAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::omero::model::Callback_OriginalFile_removeOriginalFileAnnotationLinkFromBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeOriginalFileAnnotationLinkFromBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    void end_removeOriginalFileAnnotationLinkFromBoth(const ::Ice::AsyncResultPtr&);
    
private:

    void removeOriginalFileAnnotationLinkFromBoth(const ::omero::model::OriginalFileAnnotationLinkPtr&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeOriginalFileAnnotationLinkFromBoth(const ::omero::model::OriginalFileAnnotationLinkPtr&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::OriginalFileLinkedAnnotationSeq linkedAnnotationList()
    {
        return linkedAnnotationList(0);
    }
    ::omero::model::OriginalFileLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context& __ctx)
    {
        return linkedAnnotationList(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_linkedAnnotationList(const ::IceInternal::Function<void (const ::omero::model::OriginalFileLinkedAnnotationSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_linkedAnnotationList(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_linkedAnnotationList(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_linkedAnnotationList(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_linkedAnnotationList(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::OriginalFileLinkedAnnotationSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_linkedAnnotationList(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_linkedAnnotationList(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_linkedAnnotationList(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_linkedAnnotationList(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::OriginalFileLinkedAnnotationSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::OriginalFileLinkedAnnotationSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
                ::omero::model::OriginalFileLinkedAnnotationSeq __ret;
                try
                {
                    __ret = __proxy->end_linkedAnnotationList(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::OriginalFileLinkedAnnotationSeq&)> _response;
        };
        return begin_linkedAnnotationList(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_linkedAnnotationList()
    {
        return begin_linkedAnnotationList(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::Context& __ctx)
    {
        return begin_linkedAnnotationList(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedAnnotationList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedAnnotationList(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::omero::model::Callback_OriginalFile_linkedAnnotationListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedAnnotationList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::Context& __ctx, const ::omero::model::Callback_OriginalFile_linkedAnnotationListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedAnnotationList(&__ctx, __del, __cookie);
    }

    ::omero::model::OriginalFileLinkedAnnotationSeq end_linkedAnnotationList(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::OriginalFileLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getName()
    {
        return getName(0);
    }
    ::omero::RStringPtr getName(const ::Ice::Context& __ctx)
    {
        return getName(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getName(const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getName(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getName(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getName(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getName(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getName(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getName(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getName(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getName(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RStringPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
                ::omero::RStringPtr __ret;
                try
                {
                    __ret = __proxy->end_getName(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RStringPtr&)> _response;
        };
        return begin_getName(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getName()
    {
        return begin_getName(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& __ctx)
    {
        return begin_getName(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getName(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getName(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::omero::model::Callback_OriginalFile_getNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getName(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& __ctx, const ::omero::model::Callback_OriginalFile_getNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getName(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getName(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getName(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setName(const ::omero::RStringPtr& theName)
    {
        setName(theName, 0);
    }
    void setName(const ::omero::RStringPtr& theName, const ::Ice::Context& __ctx)
    {
        setName(theName, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setName(const ::omero::RStringPtr& theName, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setName(theName, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setName(const ::omero::RStringPtr& theName, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setName(theName, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setName(const ::omero::RStringPtr& theName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setName(theName, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setName(const ::omero::RStringPtr& theName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setName(theName, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setName(const ::omero::RStringPtr& theName)
    {
        return begin_setName(theName, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setName(const ::omero::RStringPtr& theName, const ::Ice::Context& __ctx)
    {
        return begin_setName(theName, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setName(const ::omero::RStringPtr& theName, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setName(theName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setName(const ::omero::RStringPtr& theName, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setName(theName, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setName(const ::omero::RStringPtr& theName, const ::omero::model::Callback_OriginalFile_setNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setName(theName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setName(const ::omero::RStringPtr& theName, const ::Ice::Context& __ctx, const ::omero::model::Callback_OriginalFile_setNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setName(theName, &__ctx, __del, __cookie);
    }

    void end_setName(const ::Ice::AsyncResultPtr&);
    
private:

    void setName(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setName(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<OriginalFile> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<OriginalFile*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<OriginalFile> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<OriginalFile*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<OriginalFile> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<OriginalFile*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<OriginalFile> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<OriginalFile*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<OriginalFile> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<OriginalFile*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<OriginalFile> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<OriginalFile*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<OriginalFile> ice_secure(bool __secure) const
    {
        return dynamic_cast<OriginalFile*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<OriginalFile> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<OriginalFile*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<OriginalFile> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<OriginalFile*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<OriginalFile> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<OriginalFile*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<OriginalFile> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<OriginalFile*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<OriginalFile> ice_twoway() const
    {
        return dynamic_cast<OriginalFile*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<OriginalFile> ice_oneway() const
    {
        return dynamic_cast<OriginalFile*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<OriginalFile> ice_batchOneway() const
    {
        return dynamic_cast<OriginalFile*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<OriginalFile> ice_datagram() const
    {
        return dynamic_cast<OriginalFile*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<OriginalFile> ice_batchDatagram() const
    {
        return dynamic_cast<OriginalFile*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<OriginalFile> ice_compress(bool __compress) const
    {
        return dynamic_cast<OriginalFile*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<OriginalFile> ice_timeout(int __timeout) const
    {
        return dynamic_cast<OriginalFile*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<OriginalFile> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<OriginalFile*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<OriginalFile> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<OriginalFile*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

namespace IceDelegate
{

namespace omero
{

namespace model
{

class OriginalFile : virtual public ::IceDelegate::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void unloadPixelsFileMaps(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int sizeOfPixelsFileMaps(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::OriginalFilePixelsFileMapsSeq copyPixelsFileMaps(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addPixelsOriginalFileMap(const ::omero::model::PixelsOriginalFileMapPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addAllPixelsOriginalFileMapSet(const ::omero::model::OriginalFilePixelsFileMapsSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removePixelsOriginalFileMap(const ::omero::model::PixelsOriginalFileMapPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeAllPixelsOriginalFileMapSet(const ::omero::model::OriginalFilePixelsFileMapsSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void clearPixelsFileMaps(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void reloadPixelsFileMaps(const ::omero::model::OriginalFilePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::sys::CountMap getPixelsFileMapsCountPerOwner(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::PixelsOriginalFileMapPtr linkPixels(const ::omero::model::PixelsPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addPixelsOriginalFileMapToBoth(const ::omero::model::PixelsOriginalFileMapPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::OriginalFilePixelsFileMapsSeq findPixelsOriginalFileMap(const ::omero::model::PixelsPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void unlinkPixels(const ::omero::model::PixelsPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removePixelsOriginalFileMapFromBoth(const ::omero::model::PixelsOriginalFileMapPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::OriginalFileLinkedPixelsSeq linkedPixelsList(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RStringPtr getPath(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setPath(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RLongPtr getSize(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setSize(const ::omero::RLongPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RTimePtr getAtime(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setAtime(const ::omero::RTimePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RTimePtr getMtime(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setMtime(const ::omero::RTimePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RTimePtr getCtime(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setCtime(const ::omero::RTimePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::ChecksumAlgorithmPtr getHasher(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setHasher(const ::omero::model::ChecksumAlgorithmPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RStringPtr getHash(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setHash(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RStringPtr getMimetype(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setMimetype(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void unloadAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::OriginalFileAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addOriginalFileAnnotationLink(const ::omero::model::OriginalFileAnnotationLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addAllOriginalFileAnnotationLinkSet(const ::omero::model::OriginalFileAnnotationLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeOriginalFileAnnotationLink(const ::omero::model::OriginalFileAnnotationLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeAllOriginalFileAnnotationLinkSet(const ::omero::model::OriginalFileAnnotationLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void clearAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void reloadAnnotationLinks(const ::omero::model::OriginalFilePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::OriginalFileAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addOriginalFileAnnotationLinkToBoth(const ::omero::model::OriginalFileAnnotationLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::OriginalFileAnnotationLinksSeq findOriginalFileAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeOriginalFileAnnotationLinkFromBoth(const ::omero::model::OriginalFileAnnotationLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::OriginalFileLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RStringPtr getName(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setName(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

}

namespace IceDelegateM
{

namespace omero
{

namespace model
{

class OriginalFile : virtual public ::IceDelegate::omero::model::OriginalFile,
                     virtual public ::IceDelegateM::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unloadPixelsFileMaps(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int sizeOfPixelsFileMaps(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::OriginalFilePixelsFileMapsSeq copyPixelsFileMaps(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addPixelsOriginalFileMap(const ::omero::model::PixelsOriginalFileMapPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addAllPixelsOriginalFileMapSet(const ::omero::model::OriginalFilePixelsFileMapsSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removePixelsOriginalFileMap(const ::omero::model::PixelsOriginalFileMapPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeAllPixelsOriginalFileMapSet(const ::omero::model::OriginalFilePixelsFileMapsSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void clearPixelsFileMaps(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void reloadPixelsFileMaps(const ::omero::model::OriginalFilePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::sys::CountMap getPixelsFileMapsCountPerOwner(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::PixelsOriginalFileMapPtr linkPixels(const ::omero::model::PixelsPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addPixelsOriginalFileMapToBoth(const ::omero::model::PixelsOriginalFileMapPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::OriginalFilePixelsFileMapsSeq findPixelsOriginalFileMap(const ::omero::model::PixelsPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unlinkPixels(const ::omero::model::PixelsPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removePixelsOriginalFileMapFromBoth(const ::omero::model::PixelsOriginalFileMapPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::OriginalFileLinkedPixelsSeq linkedPixelsList(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getPath(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setPath(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RLongPtr getSize(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setSize(const ::omero::RLongPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RTimePtr getAtime(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setAtime(const ::omero::RTimePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RTimePtr getMtime(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setMtime(const ::omero::RTimePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RTimePtr getCtime(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setCtime(const ::omero::RTimePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::ChecksumAlgorithmPtr getHasher(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setHasher(const ::omero::model::ChecksumAlgorithmPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getHash(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setHash(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getMimetype(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setMimetype(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unloadAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::OriginalFileAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addOriginalFileAnnotationLink(const ::omero::model::OriginalFileAnnotationLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addAllOriginalFileAnnotationLinkSet(const ::omero::model::OriginalFileAnnotationLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeOriginalFileAnnotationLink(const ::omero::model::OriginalFileAnnotationLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeAllOriginalFileAnnotationLinkSet(const ::omero::model::OriginalFileAnnotationLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void clearAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void reloadAnnotationLinks(const ::omero::model::OriginalFilePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::OriginalFileAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addOriginalFileAnnotationLinkToBoth(const ::omero::model::OriginalFileAnnotationLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::OriginalFileAnnotationLinksSeq findOriginalFileAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeOriginalFileAnnotationLinkFromBoth(const ::omero::model::OriginalFileAnnotationLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::OriginalFileLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getName(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setName(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace IceDelegateD
{

namespace omero
{

namespace model
{

class OriginalFile : virtual public ::IceDelegate::omero::model::OriginalFile,
                     virtual public ::IceDelegateD::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unloadPixelsFileMaps(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int sizeOfPixelsFileMaps(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::OriginalFilePixelsFileMapsSeq copyPixelsFileMaps(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addPixelsOriginalFileMap(const ::omero::model::PixelsOriginalFileMapPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addAllPixelsOriginalFileMapSet(const ::omero::model::OriginalFilePixelsFileMapsSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removePixelsOriginalFileMap(const ::omero::model::PixelsOriginalFileMapPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeAllPixelsOriginalFileMapSet(const ::omero::model::OriginalFilePixelsFileMapsSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void clearPixelsFileMaps(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void reloadPixelsFileMaps(const ::omero::model::OriginalFilePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::sys::CountMap getPixelsFileMapsCountPerOwner(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::PixelsOriginalFileMapPtr linkPixels(const ::omero::model::PixelsPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addPixelsOriginalFileMapToBoth(const ::omero::model::PixelsOriginalFileMapPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::OriginalFilePixelsFileMapsSeq findPixelsOriginalFileMap(const ::omero::model::PixelsPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unlinkPixels(const ::omero::model::PixelsPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removePixelsOriginalFileMapFromBoth(const ::omero::model::PixelsOriginalFileMapPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::OriginalFileLinkedPixelsSeq linkedPixelsList(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getPath(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setPath(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RLongPtr getSize(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setSize(const ::omero::RLongPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RTimePtr getAtime(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setAtime(const ::omero::RTimePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RTimePtr getMtime(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setMtime(const ::omero::RTimePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RTimePtr getCtime(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setCtime(const ::omero::RTimePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::ChecksumAlgorithmPtr getHasher(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setHasher(const ::omero::model::ChecksumAlgorithmPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getHash(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setHash(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getMimetype(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setMimetype(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unloadAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::OriginalFileAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addOriginalFileAnnotationLink(const ::omero::model::OriginalFileAnnotationLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addAllOriginalFileAnnotationLinkSet(const ::omero::model::OriginalFileAnnotationLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeOriginalFileAnnotationLink(const ::omero::model::OriginalFileAnnotationLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeAllOriginalFileAnnotationLinkSet(const ::omero::model::OriginalFileAnnotationLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void clearAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void reloadAnnotationLinks(const ::omero::model::OriginalFilePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::OriginalFileAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addOriginalFileAnnotationLinkToBoth(const ::omero::model::OriginalFileAnnotationLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::OriginalFileAnnotationLinksSeq findOriginalFileAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeOriginalFileAnnotationLinkFromBoth(const ::omero::model::OriginalFileAnnotationLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::OriginalFileLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getName(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setName(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace omero
{

namespace model
{

class OriginalFile : public ::omero::model::IObject
{
public:

    typedef OriginalFilePrx ProxyType;
    typedef OriginalFilePtr PointerType;

    OriginalFile()
    {
    }

    OriginalFile(const ::omero::RLongPtr& __ice_id, const ::omero::model::DetailsPtr& __ice_details, bool __ice_loaded, const ::omero::RIntPtr& __ice_version, const ::omero::model::OriginalFilePixelsFileMapsSeq& __ice_pixelsFileMapsSeq, bool __ice_pixelsFileMapsLoaded, const ::omero::sys::CountMap& __ice_pixelsFileMapsCountPerOwner, const ::omero::RStringPtr& __ice_path, const ::omero::RLongPtr& __ice_size, const ::omero::RTimePtr& __ice_atime, const ::omero::RTimePtr& __ice_mtime, const ::omero::RTimePtr& __ice_ctime, const ::omero::model::ChecksumAlgorithmPtr& __ice_hasher, const ::omero::RStringPtr& __ice_hash, const ::omero::RStringPtr& __ice_mimetype, const ::omero::model::OriginalFileAnnotationLinksSeq& __ice_annotationLinksSeq, bool __ice_annotationLinksLoaded, const ::omero::sys::CountMap& __ice_annotationLinksCountPerOwner, const ::omero::RStringPtr& __ice_name) :
        ::omero::model::IObject(__ice_id, __ice_details, __ice_loaded)
        ,
        version(__ice_version),
        pixelsFileMapsSeq(__ice_pixelsFileMapsSeq),
        pixelsFileMapsLoaded(__ice_pixelsFileMapsLoaded),
        pixelsFileMapsCountPerOwner(__ice_pixelsFileMapsCountPerOwner),
        path(__ice_path),
        size(__ice_size),
        atime(__ice_atime),
        mtime(__ice_mtime),
        ctime(__ice_ctime),
        hasher(__ice_hasher),
        hash(__ice_hash),
        mimetype(__ice_mimetype),
        annotationLinksSeq(__ice_annotationLinksSeq),
        annotationLinksLoaded(__ice_annotationLinksLoaded),
        annotationLinksCountPerOwner(__ice_annotationLinksCountPerOwner),
        name(__ice_name)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    virtual ::omero::RIntPtr getVersion(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unloadPixelsFileMaps(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unloadPixelsFileMaps(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int sizeOfPixelsFileMaps(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sizeOfPixelsFileMaps(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::OriginalFilePixelsFileMapsSeq copyPixelsFileMaps(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___copyPixelsFileMaps(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addPixelsOriginalFileMap(const ::omero::model::PixelsOriginalFileMapPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addPixelsOriginalFileMap(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addAllPixelsOriginalFileMapSet(const ::omero::model::OriginalFilePixelsFileMapsSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addAllPixelsOriginalFileMapSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removePixelsOriginalFileMap(const ::omero::model::PixelsOriginalFileMapPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removePixelsOriginalFileMap(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeAllPixelsOriginalFileMapSet(const ::omero::model::OriginalFilePixelsFileMapsSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeAllPixelsOriginalFileMapSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void clearPixelsFileMaps(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___clearPixelsFileMaps(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reloadPixelsFileMaps(const ::omero::model::OriginalFilePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reloadPixelsFileMaps(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::sys::CountMap getPixelsFileMapsCountPerOwner(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getPixelsFileMapsCountPerOwner(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::PixelsOriginalFileMapPtr linkPixels(const ::omero::model::PixelsPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___linkPixels(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addPixelsOriginalFileMapToBoth(const ::omero::model::PixelsOriginalFileMapPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addPixelsOriginalFileMapToBoth(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::OriginalFilePixelsFileMapsSeq findPixelsOriginalFileMap(const ::omero::model::PixelsPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___findPixelsOriginalFileMap(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unlinkPixels(const ::omero::model::PixelsPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unlinkPixels(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removePixelsOriginalFileMapFromBoth(const ::omero::model::PixelsOriginalFileMapPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removePixelsOriginalFileMapFromBoth(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::OriginalFileLinkedPixelsSeq linkedPixelsList(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___linkedPixelsList(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getPath(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getPath(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setPath(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setPath(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RLongPtr getSize(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getSize(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setSize(const ::omero::RLongPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setSize(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RTimePtr getAtime(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getAtime(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setAtime(const ::omero::RTimePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setAtime(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RTimePtr getMtime(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getMtime(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setMtime(const ::omero::RTimePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setMtime(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RTimePtr getCtime(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getCtime(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setCtime(const ::omero::RTimePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setCtime(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::ChecksumAlgorithmPtr getHasher(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getHasher(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setHasher(const ::omero::model::ChecksumAlgorithmPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setHasher(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getHash(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getHash(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setHash(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setHash(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getMimetype(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getMimetype(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setMimetype(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setMimetype(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unloadAnnotationLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unloadAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sizeOfAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::OriginalFileAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___copyAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addOriginalFileAnnotationLink(const ::omero::model::OriginalFileAnnotationLinkPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addOriginalFileAnnotationLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addAllOriginalFileAnnotationLinkSet(const ::omero::model::OriginalFileAnnotationLinksSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addAllOriginalFileAnnotationLinkSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeOriginalFileAnnotationLink(const ::omero::model::OriginalFileAnnotationLinkPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeOriginalFileAnnotationLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeAllOriginalFileAnnotationLinkSet(const ::omero::model::OriginalFileAnnotationLinksSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeAllOriginalFileAnnotationLinkSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void clearAnnotationLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___clearAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reloadAnnotationLinks(const ::omero::model::OriginalFilePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reloadAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getAnnotationLinksCountPerOwner(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::OriginalFileAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___linkAnnotation(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addOriginalFileAnnotationLinkToBoth(const ::omero::model::OriginalFileAnnotationLinkPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addOriginalFileAnnotationLinkToBoth(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::OriginalFileAnnotationLinksSeq findOriginalFileAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___findOriginalFileAnnotationLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unlinkAnnotation(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeOriginalFileAnnotationLinkFromBoth(const ::omero::model::OriginalFileAnnotationLinkPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeOriginalFileAnnotationLinkFromBoth(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::OriginalFileLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___linkedAnnotationList(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getName(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getName(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setName(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setName(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::model::IObject::__writeImpl;
    using ::omero::model::IObject::__readImpl;
    #endif

    ::omero::RIntPtr version;

    ::omero::model::OriginalFilePixelsFileMapsSeq pixelsFileMapsSeq;

    bool pixelsFileMapsLoaded;

    ::omero::sys::CountMap pixelsFileMapsCountPerOwner;

    ::omero::RStringPtr path;

    ::omero::RLongPtr size;

    ::omero::RTimePtr atime;

    ::omero::RTimePtr mtime;

    ::omero::RTimePtr ctime;

    ::omero::model::ChecksumAlgorithmPtr hasher;

    ::omero::RStringPtr hash;

    ::omero::RStringPtr mimetype;

    ::omero::model::OriginalFileAnnotationLinksSeq annotationLinksSeq;

    bool annotationLinksLoaded;

    ::omero::sys::CountMap annotationLinksCountPerOwner;

    ::omero::RStringPtr name;
};

inline bool operator==(const OriginalFile& l, const OriginalFile& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const OriginalFile& l, const OriginalFile& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

}

namespace omero
{

namespace model
{

template<class T>
class CallbackNC_OriginalFile_getVersion : public Callback_OriginalFile_getVersion_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RIntPtr&);

    CallbackNC_OriginalFile_getVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_OriginalFile_getVersionPtr
newCallback_OriginalFile_getVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_getVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_getVersionPtr
newCallback_OriginalFile_getVersion(T* instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_getVersion<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_OriginalFile_getVersion : public Callback_OriginalFile_getVersion_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RIntPtr&, const CT&);

    Callback_OriginalFile_getVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_OriginalFile_getVersionPtr
newCallback_OriginalFile_getVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_getVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_getVersionPtr
newCallback_OriginalFile_getVersion(T* instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_getVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_OriginalFile_setVersion : public Callback_OriginalFile_setVersion_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_OriginalFile_setVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_OriginalFile_setVersionPtr
newCallback_OriginalFile_setVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_setVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_setVersionPtr
newCallback_OriginalFile_setVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_setVersion<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_OriginalFile_setVersionPtr
newCallback_OriginalFile_setVersion(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_setVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_setVersionPtr
newCallback_OriginalFile_setVersion(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_setVersion<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_OriginalFile_setVersion : public Callback_OriginalFile_setVersion_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_OriginalFile_setVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_OriginalFile_setVersionPtr
newCallback_OriginalFile_setVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_setVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_setVersionPtr
newCallback_OriginalFile_setVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_setVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_setVersionPtr
newCallback_OriginalFile_setVersion(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_setVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_setVersionPtr
newCallback_OriginalFile_setVersion(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_setVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_OriginalFile_unloadPixelsFileMaps : public Callback_OriginalFile_unloadPixelsFileMaps_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_OriginalFile_unloadPixelsFileMaps(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_OriginalFile_unloadPixelsFileMapsPtr
newCallback_OriginalFile_unloadPixelsFileMaps(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_unloadPixelsFileMaps<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_unloadPixelsFileMapsPtr
newCallback_OriginalFile_unloadPixelsFileMaps(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_unloadPixelsFileMaps<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_OriginalFile_unloadPixelsFileMapsPtr
newCallback_OriginalFile_unloadPixelsFileMaps(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_unloadPixelsFileMaps<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_unloadPixelsFileMapsPtr
newCallback_OriginalFile_unloadPixelsFileMaps(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_unloadPixelsFileMaps<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_OriginalFile_unloadPixelsFileMaps : public Callback_OriginalFile_unloadPixelsFileMaps_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_OriginalFile_unloadPixelsFileMaps(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_OriginalFile_unloadPixelsFileMapsPtr
newCallback_OriginalFile_unloadPixelsFileMaps(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_unloadPixelsFileMaps<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_unloadPixelsFileMapsPtr
newCallback_OriginalFile_unloadPixelsFileMaps(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_unloadPixelsFileMaps<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_unloadPixelsFileMapsPtr
newCallback_OriginalFile_unloadPixelsFileMaps(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_unloadPixelsFileMaps<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_unloadPixelsFileMapsPtr
newCallback_OriginalFile_unloadPixelsFileMaps(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_unloadPixelsFileMaps<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_OriginalFile_sizeOfPixelsFileMaps : public Callback_OriginalFile_sizeOfPixelsFileMaps_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_OriginalFile_sizeOfPixelsFileMaps(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfPixelsFileMaps(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_OriginalFile_sizeOfPixelsFileMapsPtr
newCallback_OriginalFile_sizeOfPixelsFileMaps(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_sizeOfPixelsFileMaps<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_sizeOfPixelsFileMapsPtr
newCallback_OriginalFile_sizeOfPixelsFileMaps(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_sizeOfPixelsFileMaps<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_OriginalFile_sizeOfPixelsFileMaps : public Callback_OriginalFile_sizeOfPixelsFileMaps_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_OriginalFile_sizeOfPixelsFileMaps(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfPixelsFileMaps(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_OriginalFile_sizeOfPixelsFileMapsPtr
newCallback_OriginalFile_sizeOfPixelsFileMaps(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_sizeOfPixelsFileMaps<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_sizeOfPixelsFileMapsPtr
newCallback_OriginalFile_sizeOfPixelsFileMaps(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_sizeOfPixelsFileMaps<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_OriginalFile_copyPixelsFileMaps : public Callback_OriginalFile_copyPixelsFileMaps_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::OriginalFilePixelsFileMapsSeq&);

    CallbackNC_OriginalFile_copyPixelsFileMaps(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
        ::omero::model::OriginalFilePixelsFileMapsSeq __ret;
        try
        {
            __ret = __proxy->end_copyPixelsFileMaps(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_OriginalFile_copyPixelsFileMapsPtr
newCallback_OriginalFile_copyPixelsFileMaps(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::OriginalFilePixelsFileMapsSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_copyPixelsFileMaps<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_copyPixelsFileMapsPtr
newCallback_OriginalFile_copyPixelsFileMaps(T* instance, void (T::*cb)(const ::omero::model::OriginalFilePixelsFileMapsSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_copyPixelsFileMaps<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_OriginalFile_copyPixelsFileMaps : public Callback_OriginalFile_copyPixelsFileMaps_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::OriginalFilePixelsFileMapsSeq&, const CT&);

    Callback_OriginalFile_copyPixelsFileMaps(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
        ::omero::model::OriginalFilePixelsFileMapsSeq __ret;
        try
        {
            __ret = __proxy->end_copyPixelsFileMaps(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_OriginalFile_copyPixelsFileMapsPtr
newCallback_OriginalFile_copyPixelsFileMaps(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::OriginalFilePixelsFileMapsSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_copyPixelsFileMaps<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_copyPixelsFileMapsPtr
newCallback_OriginalFile_copyPixelsFileMaps(T* instance, void (T::*cb)(const ::omero::model::OriginalFilePixelsFileMapsSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_copyPixelsFileMaps<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_OriginalFile_addPixelsOriginalFileMap : public Callback_OriginalFile_addPixelsOriginalFileMap_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_OriginalFile_addPixelsOriginalFileMap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_OriginalFile_addPixelsOriginalFileMapPtr
newCallback_OriginalFile_addPixelsOriginalFileMap(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_addPixelsOriginalFileMap<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_addPixelsOriginalFileMapPtr
newCallback_OriginalFile_addPixelsOriginalFileMap(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_addPixelsOriginalFileMap<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_OriginalFile_addPixelsOriginalFileMapPtr
newCallback_OriginalFile_addPixelsOriginalFileMap(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_addPixelsOriginalFileMap<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_addPixelsOriginalFileMapPtr
newCallback_OriginalFile_addPixelsOriginalFileMap(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_addPixelsOriginalFileMap<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_OriginalFile_addPixelsOriginalFileMap : public Callback_OriginalFile_addPixelsOriginalFileMap_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_OriginalFile_addPixelsOriginalFileMap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_OriginalFile_addPixelsOriginalFileMapPtr
newCallback_OriginalFile_addPixelsOriginalFileMap(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_addPixelsOriginalFileMap<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_addPixelsOriginalFileMapPtr
newCallback_OriginalFile_addPixelsOriginalFileMap(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_addPixelsOriginalFileMap<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_addPixelsOriginalFileMapPtr
newCallback_OriginalFile_addPixelsOriginalFileMap(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_addPixelsOriginalFileMap<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_addPixelsOriginalFileMapPtr
newCallback_OriginalFile_addPixelsOriginalFileMap(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_addPixelsOriginalFileMap<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_OriginalFile_addAllPixelsOriginalFileMapSet : public Callback_OriginalFile_addAllPixelsOriginalFileMapSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_OriginalFile_addAllPixelsOriginalFileMapSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_OriginalFile_addAllPixelsOriginalFileMapSetPtr
newCallback_OriginalFile_addAllPixelsOriginalFileMapSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_addAllPixelsOriginalFileMapSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_addAllPixelsOriginalFileMapSetPtr
newCallback_OriginalFile_addAllPixelsOriginalFileMapSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_addAllPixelsOriginalFileMapSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_OriginalFile_addAllPixelsOriginalFileMapSetPtr
newCallback_OriginalFile_addAllPixelsOriginalFileMapSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_addAllPixelsOriginalFileMapSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_addAllPixelsOriginalFileMapSetPtr
newCallback_OriginalFile_addAllPixelsOriginalFileMapSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_addAllPixelsOriginalFileMapSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_OriginalFile_addAllPixelsOriginalFileMapSet : public Callback_OriginalFile_addAllPixelsOriginalFileMapSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_OriginalFile_addAllPixelsOriginalFileMapSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_OriginalFile_addAllPixelsOriginalFileMapSetPtr
newCallback_OriginalFile_addAllPixelsOriginalFileMapSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_addAllPixelsOriginalFileMapSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_addAllPixelsOriginalFileMapSetPtr
newCallback_OriginalFile_addAllPixelsOriginalFileMapSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_addAllPixelsOriginalFileMapSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_addAllPixelsOriginalFileMapSetPtr
newCallback_OriginalFile_addAllPixelsOriginalFileMapSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_addAllPixelsOriginalFileMapSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_addAllPixelsOriginalFileMapSetPtr
newCallback_OriginalFile_addAllPixelsOriginalFileMapSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_addAllPixelsOriginalFileMapSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_OriginalFile_removePixelsOriginalFileMap : public Callback_OriginalFile_removePixelsOriginalFileMap_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_OriginalFile_removePixelsOriginalFileMap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_OriginalFile_removePixelsOriginalFileMapPtr
newCallback_OriginalFile_removePixelsOriginalFileMap(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_removePixelsOriginalFileMap<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_removePixelsOriginalFileMapPtr
newCallback_OriginalFile_removePixelsOriginalFileMap(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_removePixelsOriginalFileMap<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_OriginalFile_removePixelsOriginalFileMapPtr
newCallback_OriginalFile_removePixelsOriginalFileMap(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_removePixelsOriginalFileMap<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_removePixelsOriginalFileMapPtr
newCallback_OriginalFile_removePixelsOriginalFileMap(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_removePixelsOriginalFileMap<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_OriginalFile_removePixelsOriginalFileMap : public Callback_OriginalFile_removePixelsOriginalFileMap_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_OriginalFile_removePixelsOriginalFileMap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_OriginalFile_removePixelsOriginalFileMapPtr
newCallback_OriginalFile_removePixelsOriginalFileMap(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_removePixelsOriginalFileMap<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_removePixelsOriginalFileMapPtr
newCallback_OriginalFile_removePixelsOriginalFileMap(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_removePixelsOriginalFileMap<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_removePixelsOriginalFileMapPtr
newCallback_OriginalFile_removePixelsOriginalFileMap(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_removePixelsOriginalFileMap<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_removePixelsOriginalFileMapPtr
newCallback_OriginalFile_removePixelsOriginalFileMap(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_removePixelsOriginalFileMap<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_OriginalFile_removeAllPixelsOriginalFileMapSet : public Callback_OriginalFile_removeAllPixelsOriginalFileMapSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_OriginalFile_removeAllPixelsOriginalFileMapSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_OriginalFile_removeAllPixelsOriginalFileMapSetPtr
newCallback_OriginalFile_removeAllPixelsOriginalFileMapSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_removeAllPixelsOriginalFileMapSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_removeAllPixelsOriginalFileMapSetPtr
newCallback_OriginalFile_removeAllPixelsOriginalFileMapSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_removeAllPixelsOriginalFileMapSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_OriginalFile_removeAllPixelsOriginalFileMapSetPtr
newCallback_OriginalFile_removeAllPixelsOriginalFileMapSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_removeAllPixelsOriginalFileMapSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_removeAllPixelsOriginalFileMapSetPtr
newCallback_OriginalFile_removeAllPixelsOriginalFileMapSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_removeAllPixelsOriginalFileMapSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_OriginalFile_removeAllPixelsOriginalFileMapSet : public Callback_OriginalFile_removeAllPixelsOriginalFileMapSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_OriginalFile_removeAllPixelsOriginalFileMapSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_OriginalFile_removeAllPixelsOriginalFileMapSetPtr
newCallback_OriginalFile_removeAllPixelsOriginalFileMapSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_removeAllPixelsOriginalFileMapSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_removeAllPixelsOriginalFileMapSetPtr
newCallback_OriginalFile_removeAllPixelsOriginalFileMapSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_removeAllPixelsOriginalFileMapSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_removeAllPixelsOriginalFileMapSetPtr
newCallback_OriginalFile_removeAllPixelsOriginalFileMapSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_removeAllPixelsOriginalFileMapSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_removeAllPixelsOriginalFileMapSetPtr
newCallback_OriginalFile_removeAllPixelsOriginalFileMapSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_removeAllPixelsOriginalFileMapSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_OriginalFile_clearPixelsFileMaps : public Callback_OriginalFile_clearPixelsFileMaps_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_OriginalFile_clearPixelsFileMaps(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_OriginalFile_clearPixelsFileMapsPtr
newCallback_OriginalFile_clearPixelsFileMaps(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_clearPixelsFileMaps<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_clearPixelsFileMapsPtr
newCallback_OriginalFile_clearPixelsFileMaps(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_clearPixelsFileMaps<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_OriginalFile_clearPixelsFileMapsPtr
newCallback_OriginalFile_clearPixelsFileMaps(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_clearPixelsFileMaps<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_clearPixelsFileMapsPtr
newCallback_OriginalFile_clearPixelsFileMaps(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_clearPixelsFileMaps<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_OriginalFile_clearPixelsFileMaps : public Callback_OriginalFile_clearPixelsFileMaps_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_OriginalFile_clearPixelsFileMaps(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_OriginalFile_clearPixelsFileMapsPtr
newCallback_OriginalFile_clearPixelsFileMaps(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_clearPixelsFileMaps<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_clearPixelsFileMapsPtr
newCallback_OriginalFile_clearPixelsFileMaps(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_clearPixelsFileMaps<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_clearPixelsFileMapsPtr
newCallback_OriginalFile_clearPixelsFileMaps(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_clearPixelsFileMaps<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_clearPixelsFileMapsPtr
newCallback_OriginalFile_clearPixelsFileMaps(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_clearPixelsFileMaps<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_OriginalFile_reloadPixelsFileMaps : public Callback_OriginalFile_reloadPixelsFileMaps_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_OriginalFile_reloadPixelsFileMaps(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_OriginalFile_reloadPixelsFileMapsPtr
newCallback_OriginalFile_reloadPixelsFileMaps(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_reloadPixelsFileMaps<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_reloadPixelsFileMapsPtr
newCallback_OriginalFile_reloadPixelsFileMaps(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_reloadPixelsFileMaps<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_OriginalFile_reloadPixelsFileMapsPtr
newCallback_OriginalFile_reloadPixelsFileMaps(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_reloadPixelsFileMaps<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_reloadPixelsFileMapsPtr
newCallback_OriginalFile_reloadPixelsFileMaps(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_reloadPixelsFileMaps<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_OriginalFile_reloadPixelsFileMaps : public Callback_OriginalFile_reloadPixelsFileMaps_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_OriginalFile_reloadPixelsFileMaps(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_OriginalFile_reloadPixelsFileMapsPtr
newCallback_OriginalFile_reloadPixelsFileMaps(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_reloadPixelsFileMaps<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_reloadPixelsFileMapsPtr
newCallback_OriginalFile_reloadPixelsFileMaps(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_reloadPixelsFileMaps<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_reloadPixelsFileMapsPtr
newCallback_OriginalFile_reloadPixelsFileMaps(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_reloadPixelsFileMaps<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_reloadPixelsFileMapsPtr
newCallback_OriginalFile_reloadPixelsFileMaps(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_reloadPixelsFileMaps<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_OriginalFile_getPixelsFileMapsCountPerOwner : public Callback_OriginalFile_getPixelsFileMapsCountPerOwner_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::sys::CountMap&);

    CallbackNC_OriginalFile_getPixelsFileMapsCountPerOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
        ::omero::sys::CountMap __ret;
        try
        {
            __ret = __proxy->end_getPixelsFileMapsCountPerOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_OriginalFile_getPixelsFileMapsCountPerOwnerPtr
newCallback_OriginalFile_getPixelsFileMapsCountPerOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::CountMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_getPixelsFileMapsCountPerOwner<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_getPixelsFileMapsCountPerOwnerPtr
newCallback_OriginalFile_getPixelsFileMapsCountPerOwner(T* instance, void (T::*cb)(const ::omero::sys::CountMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_getPixelsFileMapsCountPerOwner<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_OriginalFile_getPixelsFileMapsCountPerOwner : public Callback_OriginalFile_getPixelsFileMapsCountPerOwner_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::sys::CountMap&, const CT&);

    Callback_OriginalFile_getPixelsFileMapsCountPerOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
        ::omero::sys::CountMap __ret;
        try
        {
            __ret = __proxy->end_getPixelsFileMapsCountPerOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_OriginalFile_getPixelsFileMapsCountPerOwnerPtr
newCallback_OriginalFile_getPixelsFileMapsCountPerOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::CountMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_getPixelsFileMapsCountPerOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_getPixelsFileMapsCountPerOwnerPtr
newCallback_OriginalFile_getPixelsFileMapsCountPerOwner(T* instance, void (T::*cb)(const ::omero::sys::CountMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_getPixelsFileMapsCountPerOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_OriginalFile_linkPixels : public Callback_OriginalFile_linkPixels_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::PixelsOriginalFileMapPtr&);

    CallbackNC_OriginalFile_linkPixels(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
        ::omero::model::PixelsOriginalFileMapPtr __ret;
        try
        {
            __ret = __proxy->end_linkPixels(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_OriginalFile_linkPixelsPtr
newCallback_OriginalFile_linkPixels(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PixelsOriginalFileMapPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_linkPixels<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_linkPixelsPtr
newCallback_OriginalFile_linkPixels(T* instance, void (T::*cb)(const ::omero::model::PixelsOriginalFileMapPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_linkPixels<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_OriginalFile_linkPixels : public Callback_OriginalFile_linkPixels_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::PixelsOriginalFileMapPtr&, const CT&);

    Callback_OriginalFile_linkPixels(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
        ::omero::model::PixelsOriginalFileMapPtr __ret;
        try
        {
            __ret = __proxy->end_linkPixels(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_OriginalFile_linkPixelsPtr
newCallback_OriginalFile_linkPixels(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::PixelsOriginalFileMapPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_linkPixels<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_linkPixelsPtr
newCallback_OriginalFile_linkPixels(T* instance, void (T::*cb)(const ::omero::model::PixelsOriginalFileMapPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_linkPixels<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_OriginalFile_addPixelsOriginalFileMapToBoth : public Callback_OriginalFile_addPixelsOriginalFileMapToBoth_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_OriginalFile_addPixelsOriginalFileMapToBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_OriginalFile_addPixelsOriginalFileMapToBothPtr
newCallback_OriginalFile_addPixelsOriginalFileMapToBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_addPixelsOriginalFileMapToBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_addPixelsOriginalFileMapToBothPtr
newCallback_OriginalFile_addPixelsOriginalFileMapToBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_addPixelsOriginalFileMapToBoth<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_OriginalFile_addPixelsOriginalFileMapToBothPtr
newCallback_OriginalFile_addPixelsOriginalFileMapToBoth(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_addPixelsOriginalFileMapToBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_addPixelsOriginalFileMapToBothPtr
newCallback_OriginalFile_addPixelsOriginalFileMapToBoth(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_addPixelsOriginalFileMapToBoth<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_OriginalFile_addPixelsOriginalFileMapToBoth : public Callback_OriginalFile_addPixelsOriginalFileMapToBoth_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_OriginalFile_addPixelsOriginalFileMapToBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_OriginalFile_addPixelsOriginalFileMapToBothPtr
newCallback_OriginalFile_addPixelsOriginalFileMapToBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_addPixelsOriginalFileMapToBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_addPixelsOriginalFileMapToBothPtr
newCallback_OriginalFile_addPixelsOriginalFileMapToBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_addPixelsOriginalFileMapToBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_addPixelsOriginalFileMapToBothPtr
newCallback_OriginalFile_addPixelsOriginalFileMapToBoth(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_addPixelsOriginalFileMapToBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_addPixelsOriginalFileMapToBothPtr
newCallback_OriginalFile_addPixelsOriginalFileMapToBoth(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_addPixelsOriginalFileMapToBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_OriginalFile_findPixelsOriginalFileMap : public Callback_OriginalFile_findPixelsOriginalFileMap_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::OriginalFilePixelsFileMapsSeq&);

    CallbackNC_OriginalFile_findPixelsOriginalFileMap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
        ::omero::model::OriginalFilePixelsFileMapsSeq __ret;
        try
        {
            __ret = __proxy->end_findPixelsOriginalFileMap(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_OriginalFile_findPixelsOriginalFileMapPtr
newCallback_OriginalFile_findPixelsOriginalFileMap(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::OriginalFilePixelsFileMapsSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_findPixelsOriginalFileMap<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_findPixelsOriginalFileMapPtr
newCallback_OriginalFile_findPixelsOriginalFileMap(T* instance, void (T::*cb)(const ::omero::model::OriginalFilePixelsFileMapsSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_findPixelsOriginalFileMap<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_OriginalFile_findPixelsOriginalFileMap : public Callback_OriginalFile_findPixelsOriginalFileMap_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::OriginalFilePixelsFileMapsSeq&, const CT&);

    Callback_OriginalFile_findPixelsOriginalFileMap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
        ::omero::model::OriginalFilePixelsFileMapsSeq __ret;
        try
        {
            __ret = __proxy->end_findPixelsOriginalFileMap(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_OriginalFile_findPixelsOriginalFileMapPtr
newCallback_OriginalFile_findPixelsOriginalFileMap(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::OriginalFilePixelsFileMapsSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_findPixelsOriginalFileMap<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_findPixelsOriginalFileMapPtr
newCallback_OriginalFile_findPixelsOriginalFileMap(T* instance, void (T::*cb)(const ::omero::model::OriginalFilePixelsFileMapsSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_findPixelsOriginalFileMap<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_OriginalFile_unlinkPixels : public Callback_OriginalFile_unlinkPixels_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_OriginalFile_unlinkPixels(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_OriginalFile_unlinkPixelsPtr
newCallback_OriginalFile_unlinkPixels(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_unlinkPixels<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_unlinkPixelsPtr
newCallback_OriginalFile_unlinkPixels(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_unlinkPixels<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_OriginalFile_unlinkPixelsPtr
newCallback_OriginalFile_unlinkPixels(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_unlinkPixels<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_unlinkPixelsPtr
newCallback_OriginalFile_unlinkPixels(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_unlinkPixels<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_OriginalFile_unlinkPixels : public Callback_OriginalFile_unlinkPixels_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_OriginalFile_unlinkPixels(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_OriginalFile_unlinkPixelsPtr
newCallback_OriginalFile_unlinkPixels(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_unlinkPixels<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_unlinkPixelsPtr
newCallback_OriginalFile_unlinkPixels(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_unlinkPixels<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_unlinkPixelsPtr
newCallback_OriginalFile_unlinkPixels(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_unlinkPixels<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_unlinkPixelsPtr
newCallback_OriginalFile_unlinkPixels(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_unlinkPixels<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_OriginalFile_removePixelsOriginalFileMapFromBoth : public Callback_OriginalFile_removePixelsOriginalFileMapFromBoth_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_OriginalFile_removePixelsOriginalFileMapFromBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_OriginalFile_removePixelsOriginalFileMapFromBothPtr
newCallback_OriginalFile_removePixelsOriginalFileMapFromBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_removePixelsOriginalFileMapFromBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_removePixelsOriginalFileMapFromBothPtr
newCallback_OriginalFile_removePixelsOriginalFileMapFromBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_removePixelsOriginalFileMapFromBoth<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_OriginalFile_removePixelsOriginalFileMapFromBothPtr
newCallback_OriginalFile_removePixelsOriginalFileMapFromBoth(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_removePixelsOriginalFileMapFromBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_removePixelsOriginalFileMapFromBothPtr
newCallback_OriginalFile_removePixelsOriginalFileMapFromBoth(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_removePixelsOriginalFileMapFromBoth<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_OriginalFile_removePixelsOriginalFileMapFromBoth : public Callback_OriginalFile_removePixelsOriginalFileMapFromBoth_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_OriginalFile_removePixelsOriginalFileMapFromBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_OriginalFile_removePixelsOriginalFileMapFromBothPtr
newCallback_OriginalFile_removePixelsOriginalFileMapFromBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_removePixelsOriginalFileMapFromBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_removePixelsOriginalFileMapFromBothPtr
newCallback_OriginalFile_removePixelsOriginalFileMapFromBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_removePixelsOriginalFileMapFromBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_removePixelsOriginalFileMapFromBothPtr
newCallback_OriginalFile_removePixelsOriginalFileMapFromBoth(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_removePixelsOriginalFileMapFromBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_removePixelsOriginalFileMapFromBothPtr
newCallback_OriginalFile_removePixelsOriginalFileMapFromBoth(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_removePixelsOriginalFileMapFromBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_OriginalFile_linkedPixelsList : public Callback_OriginalFile_linkedPixelsList_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::OriginalFileLinkedPixelsSeq&);

    CallbackNC_OriginalFile_linkedPixelsList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
        ::omero::model::OriginalFileLinkedPixelsSeq __ret;
        try
        {
            __ret = __proxy->end_linkedPixelsList(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_OriginalFile_linkedPixelsListPtr
newCallback_OriginalFile_linkedPixelsList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::OriginalFileLinkedPixelsSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_linkedPixelsList<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_linkedPixelsListPtr
newCallback_OriginalFile_linkedPixelsList(T* instance, void (T::*cb)(const ::omero::model::OriginalFileLinkedPixelsSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_linkedPixelsList<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_OriginalFile_linkedPixelsList : public Callback_OriginalFile_linkedPixelsList_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::OriginalFileLinkedPixelsSeq&, const CT&);

    Callback_OriginalFile_linkedPixelsList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
        ::omero::model::OriginalFileLinkedPixelsSeq __ret;
        try
        {
            __ret = __proxy->end_linkedPixelsList(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_OriginalFile_linkedPixelsListPtr
newCallback_OriginalFile_linkedPixelsList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::OriginalFileLinkedPixelsSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_linkedPixelsList<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_linkedPixelsListPtr
newCallback_OriginalFile_linkedPixelsList(T* instance, void (T::*cb)(const ::omero::model::OriginalFileLinkedPixelsSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_linkedPixelsList<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_OriginalFile_getPath : public Callback_OriginalFile_getPath_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_OriginalFile_getPath(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getPath(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_OriginalFile_getPathPtr
newCallback_OriginalFile_getPath(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_getPath<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_getPathPtr
newCallback_OriginalFile_getPath(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_getPath<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_OriginalFile_getPath : public Callback_OriginalFile_getPath_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_OriginalFile_getPath(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getPath(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_OriginalFile_getPathPtr
newCallback_OriginalFile_getPath(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_getPath<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_getPathPtr
newCallback_OriginalFile_getPath(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_getPath<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_OriginalFile_setPath : public Callback_OriginalFile_setPath_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_OriginalFile_setPath(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_OriginalFile_setPathPtr
newCallback_OriginalFile_setPath(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_setPath<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_setPathPtr
newCallback_OriginalFile_setPath(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_setPath<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_OriginalFile_setPathPtr
newCallback_OriginalFile_setPath(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_setPath<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_setPathPtr
newCallback_OriginalFile_setPath(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_setPath<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_OriginalFile_setPath : public Callback_OriginalFile_setPath_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_OriginalFile_setPath(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_OriginalFile_setPathPtr
newCallback_OriginalFile_setPath(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_setPath<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_setPathPtr
newCallback_OriginalFile_setPath(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_setPath<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_setPathPtr
newCallback_OriginalFile_setPath(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_setPath<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_setPathPtr
newCallback_OriginalFile_setPath(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_setPath<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_OriginalFile_getSize : public Callback_OriginalFile_getSize_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RLongPtr&);

    CallbackNC_OriginalFile_getSize(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
        ::omero::RLongPtr __ret;
        try
        {
            __ret = __proxy->end_getSize(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_OriginalFile_getSizePtr
newCallback_OriginalFile_getSize(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RLongPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_getSize<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_getSizePtr
newCallback_OriginalFile_getSize(T* instance, void (T::*cb)(const ::omero::RLongPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_getSize<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_OriginalFile_getSize : public Callback_OriginalFile_getSize_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RLongPtr&, const CT&);

    Callback_OriginalFile_getSize(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
        ::omero::RLongPtr __ret;
        try
        {
            __ret = __proxy->end_getSize(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_OriginalFile_getSizePtr
newCallback_OriginalFile_getSize(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RLongPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_getSize<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_getSizePtr
newCallback_OriginalFile_getSize(T* instance, void (T::*cb)(const ::omero::RLongPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_getSize<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_OriginalFile_setSize : public Callback_OriginalFile_setSize_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_OriginalFile_setSize(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_OriginalFile_setSizePtr
newCallback_OriginalFile_setSize(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_setSize<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_setSizePtr
newCallback_OriginalFile_setSize(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_setSize<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_OriginalFile_setSizePtr
newCallback_OriginalFile_setSize(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_setSize<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_setSizePtr
newCallback_OriginalFile_setSize(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_setSize<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_OriginalFile_setSize : public Callback_OriginalFile_setSize_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_OriginalFile_setSize(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_OriginalFile_setSizePtr
newCallback_OriginalFile_setSize(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_setSize<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_setSizePtr
newCallback_OriginalFile_setSize(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_setSize<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_setSizePtr
newCallback_OriginalFile_setSize(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_setSize<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_setSizePtr
newCallback_OriginalFile_setSize(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_setSize<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_OriginalFile_getAtime : public Callback_OriginalFile_getAtime_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RTimePtr&);

    CallbackNC_OriginalFile_getAtime(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
        ::omero::RTimePtr __ret;
        try
        {
            __ret = __proxy->end_getAtime(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_OriginalFile_getAtimePtr
newCallback_OriginalFile_getAtime(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RTimePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_getAtime<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_getAtimePtr
newCallback_OriginalFile_getAtime(T* instance, void (T::*cb)(const ::omero::RTimePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_getAtime<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_OriginalFile_getAtime : public Callback_OriginalFile_getAtime_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RTimePtr&, const CT&);

    Callback_OriginalFile_getAtime(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
        ::omero::RTimePtr __ret;
        try
        {
            __ret = __proxy->end_getAtime(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_OriginalFile_getAtimePtr
newCallback_OriginalFile_getAtime(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RTimePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_getAtime<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_getAtimePtr
newCallback_OriginalFile_getAtime(T* instance, void (T::*cb)(const ::omero::RTimePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_getAtime<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_OriginalFile_setAtime : public Callback_OriginalFile_setAtime_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_OriginalFile_setAtime(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_OriginalFile_setAtimePtr
newCallback_OriginalFile_setAtime(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_setAtime<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_setAtimePtr
newCallback_OriginalFile_setAtime(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_setAtime<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_OriginalFile_setAtimePtr
newCallback_OriginalFile_setAtime(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_setAtime<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_setAtimePtr
newCallback_OriginalFile_setAtime(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_setAtime<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_OriginalFile_setAtime : public Callback_OriginalFile_setAtime_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_OriginalFile_setAtime(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_OriginalFile_setAtimePtr
newCallback_OriginalFile_setAtime(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_setAtime<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_setAtimePtr
newCallback_OriginalFile_setAtime(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_setAtime<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_setAtimePtr
newCallback_OriginalFile_setAtime(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_setAtime<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_setAtimePtr
newCallback_OriginalFile_setAtime(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_setAtime<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_OriginalFile_getMtime : public Callback_OriginalFile_getMtime_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RTimePtr&);

    CallbackNC_OriginalFile_getMtime(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
        ::omero::RTimePtr __ret;
        try
        {
            __ret = __proxy->end_getMtime(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_OriginalFile_getMtimePtr
newCallback_OriginalFile_getMtime(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RTimePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_getMtime<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_getMtimePtr
newCallback_OriginalFile_getMtime(T* instance, void (T::*cb)(const ::omero::RTimePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_getMtime<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_OriginalFile_getMtime : public Callback_OriginalFile_getMtime_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RTimePtr&, const CT&);

    Callback_OriginalFile_getMtime(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
        ::omero::RTimePtr __ret;
        try
        {
            __ret = __proxy->end_getMtime(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_OriginalFile_getMtimePtr
newCallback_OriginalFile_getMtime(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RTimePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_getMtime<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_getMtimePtr
newCallback_OriginalFile_getMtime(T* instance, void (T::*cb)(const ::omero::RTimePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_getMtime<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_OriginalFile_setMtime : public Callback_OriginalFile_setMtime_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_OriginalFile_setMtime(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_OriginalFile_setMtimePtr
newCallback_OriginalFile_setMtime(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_setMtime<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_setMtimePtr
newCallback_OriginalFile_setMtime(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_setMtime<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_OriginalFile_setMtimePtr
newCallback_OriginalFile_setMtime(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_setMtime<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_setMtimePtr
newCallback_OriginalFile_setMtime(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_setMtime<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_OriginalFile_setMtime : public Callback_OriginalFile_setMtime_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_OriginalFile_setMtime(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_OriginalFile_setMtimePtr
newCallback_OriginalFile_setMtime(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_setMtime<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_setMtimePtr
newCallback_OriginalFile_setMtime(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_setMtime<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_setMtimePtr
newCallback_OriginalFile_setMtime(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_setMtime<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_setMtimePtr
newCallback_OriginalFile_setMtime(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_setMtime<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_OriginalFile_getCtime : public Callback_OriginalFile_getCtime_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RTimePtr&);

    CallbackNC_OriginalFile_getCtime(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
        ::omero::RTimePtr __ret;
        try
        {
            __ret = __proxy->end_getCtime(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_OriginalFile_getCtimePtr
newCallback_OriginalFile_getCtime(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RTimePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_getCtime<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_getCtimePtr
newCallback_OriginalFile_getCtime(T* instance, void (T::*cb)(const ::omero::RTimePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_getCtime<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_OriginalFile_getCtime : public Callback_OriginalFile_getCtime_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RTimePtr&, const CT&);

    Callback_OriginalFile_getCtime(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
        ::omero::RTimePtr __ret;
        try
        {
            __ret = __proxy->end_getCtime(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_OriginalFile_getCtimePtr
newCallback_OriginalFile_getCtime(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RTimePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_getCtime<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_getCtimePtr
newCallback_OriginalFile_getCtime(T* instance, void (T::*cb)(const ::omero::RTimePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_getCtime<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_OriginalFile_setCtime : public Callback_OriginalFile_setCtime_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_OriginalFile_setCtime(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_OriginalFile_setCtimePtr
newCallback_OriginalFile_setCtime(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_setCtime<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_setCtimePtr
newCallback_OriginalFile_setCtime(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_setCtime<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_OriginalFile_setCtimePtr
newCallback_OriginalFile_setCtime(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_setCtime<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_setCtimePtr
newCallback_OriginalFile_setCtime(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_setCtime<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_OriginalFile_setCtime : public Callback_OriginalFile_setCtime_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_OriginalFile_setCtime(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_OriginalFile_setCtimePtr
newCallback_OriginalFile_setCtime(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_setCtime<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_setCtimePtr
newCallback_OriginalFile_setCtime(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_setCtime<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_setCtimePtr
newCallback_OriginalFile_setCtime(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_setCtime<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_setCtimePtr
newCallback_OriginalFile_setCtime(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_setCtime<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_OriginalFile_getHasher : public Callback_OriginalFile_getHasher_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::ChecksumAlgorithmPtr&);

    CallbackNC_OriginalFile_getHasher(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
        ::omero::model::ChecksumAlgorithmPtr __ret;
        try
        {
            __ret = __proxy->end_getHasher(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_OriginalFile_getHasherPtr
newCallback_OriginalFile_getHasher(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ChecksumAlgorithmPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_getHasher<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_getHasherPtr
newCallback_OriginalFile_getHasher(T* instance, void (T::*cb)(const ::omero::model::ChecksumAlgorithmPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_getHasher<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_OriginalFile_getHasher : public Callback_OriginalFile_getHasher_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::ChecksumAlgorithmPtr&, const CT&);

    Callback_OriginalFile_getHasher(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
        ::omero::model::ChecksumAlgorithmPtr __ret;
        try
        {
            __ret = __proxy->end_getHasher(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_OriginalFile_getHasherPtr
newCallback_OriginalFile_getHasher(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ChecksumAlgorithmPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_getHasher<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_getHasherPtr
newCallback_OriginalFile_getHasher(T* instance, void (T::*cb)(const ::omero::model::ChecksumAlgorithmPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_getHasher<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_OriginalFile_setHasher : public Callback_OriginalFile_setHasher_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_OriginalFile_setHasher(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_OriginalFile_setHasherPtr
newCallback_OriginalFile_setHasher(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_setHasher<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_setHasherPtr
newCallback_OriginalFile_setHasher(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_setHasher<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_OriginalFile_setHasherPtr
newCallback_OriginalFile_setHasher(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_setHasher<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_setHasherPtr
newCallback_OriginalFile_setHasher(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_setHasher<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_OriginalFile_setHasher : public Callback_OriginalFile_setHasher_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_OriginalFile_setHasher(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_OriginalFile_setHasherPtr
newCallback_OriginalFile_setHasher(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_setHasher<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_setHasherPtr
newCallback_OriginalFile_setHasher(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_setHasher<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_setHasherPtr
newCallback_OriginalFile_setHasher(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_setHasher<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_setHasherPtr
newCallback_OriginalFile_setHasher(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_setHasher<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_OriginalFile_getHash : public Callback_OriginalFile_getHash_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_OriginalFile_getHash(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getHash(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_OriginalFile_getHashPtr
newCallback_OriginalFile_getHash(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_getHash<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_getHashPtr
newCallback_OriginalFile_getHash(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_getHash<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_OriginalFile_getHash : public Callback_OriginalFile_getHash_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_OriginalFile_getHash(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getHash(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_OriginalFile_getHashPtr
newCallback_OriginalFile_getHash(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_getHash<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_getHashPtr
newCallback_OriginalFile_getHash(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_getHash<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_OriginalFile_setHash : public Callback_OriginalFile_setHash_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_OriginalFile_setHash(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_OriginalFile_setHashPtr
newCallback_OriginalFile_setHash(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_setHash<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_setHashPtr
newCallback_OriginalFile_setHash(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_setHash<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_OriginalFile_setHashPtr
newCallback_OriginalFile_setHash(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_setHash<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_setHashPtr
newCallback_OriginalFile_setHash(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_setHash<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_OriginalFile_setHash : public Callback_OriginalFile_setHash_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_OriginalFile_setHash(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_OriginalFile_setHashPtr
newCallback_OriginalFile_setHash(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_setHash<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_setHashPtr
newCallback_OriginalFile_setHash(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_setHash<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_setHashPtr
newCallback_OriginalFile_setHash(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_setHash<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_setHashPtr
newCallback_OriginalFile_setHash(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_setHash<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_OriginalFile_getMimetype : public Callback_OriginalFile_getMimetype_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_OriginalFile_getMimetype(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getMimetype(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_OriginalFile_getMimetypePtr
newCallback_OriginalFile_getMimetype(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_getMimetype<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_getMimetypePtr
newCallback_OriginalFile_getMimetype(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_getMimetype<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_OriginalFile_getMimetype : public Callback_OriginalFile_getMimetype_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_OriginalFile_getMimetype(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getMimetype(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_OriginalFile_getMimetypePtr
newCallback_OriginalFile_getMimetype(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_getMimetype<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_getMimetypePtr
newCallback_OriginalFile_getMimetype(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_getMimetype<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_OriginalFile_setMimetype : public Callback_OriginalFile_setMimetype_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_OriginalFile_setMimetype(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_OriginalFile_setMimetypePtr
newCallback_OriginalFile_setMimetype(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_setMimetype<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_setMimetypePtr
newCallback_OriginalFile_setMimetype(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_setMimetype<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_OriginalFile_setMimetypePtr
newCallback_OriginalFile_setMimetype(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_setMimetype<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_setMimetypePtr
newCallback_OriginalFile_setMimetype(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_setMimetype<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_OriginalFile_setMimetype : public Callback_OriginalFile_setMimetype_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_OriginalFile_setMimetype(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_OriginalFile_setMimetypePtr
newCallback_OriginalFile_setMimetype(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_setMimetype<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_setMimetypePtr
newCallback_OriginalFile_setMimetype(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_setMimetype<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_setMimetypePtr
newCallback_OriginalFile_setMimetype(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_setMimetype<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_setMimetypePtr
newCallback_OriginalFile_setMimetype(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_setMimetype<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_OriginalFile_unloadAnnotationLinks : public Callback_OriginalFile_unloadAnnotationLinks_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_OriginalFile_unloadAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_OriginalFile_unloadAnnotationLinksPtr
newCallback_OriginalFile_unloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_unloadAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_unloadAnnotationLinksPtr
newCallback_OriginalFile_unloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_unloadAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_OriginalFile_unloadAnnotationLinksPtr
newCallback_OriginalFile_unloadAnnotationLinks(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_unloadAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_unloadAnnotationLinksPtr
newCallback_OriginalFile_unloadAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_unloadAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_OriginalFile_unloadAnnotationLinks : public Callback_OriginalFile_unloadAnnotationLinks_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_OriginalFile_unloadAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_OriginalFile_unloadAnnotationLinksPtr
newCallback_OriginalFile_unloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_unloadAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_unloadAnnotationLinksPtr
newCallback_OriginalFile_unloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_unloadAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_unloadAnnotationLinksPtr
newCallback_OriginalFile_unloadAnnotationLinks(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_unloadAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_unloadAnnotationLinksPtr
newCallback_OriginalFile_unloadAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_unloadAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_OriginalFile_sizeOfAnnotationLinks : public Callback_OriginalFile_sizeOfAnnotationLinks_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_OriginalFile_sizeOfAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfAnnotationLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_OriginalFile_sizeOfAnnotationLinksPtr
newCallback_OriginalFile_sizeOfAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_sizeOfAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_sizeOfAnnotationLinksPtr
newCallback_OriginalFile_sizeOfAnnotationLinks(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_sizeOfAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_OriginalFile_sizeOfAnnotationLinks : public Callback_OriginalFile_sizeOfAnnotationLinks_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_OriginalFile_sizeOfAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfAnnotationLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_OriginalFile_sizeOfAnnotationLinksPtr
newCallback_OriginalFile_sizeOfAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_sizeOfAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_sizeOfAnnotationLinksPtr
newCallback_OriginalFile_sizeOfAnnotationLinks(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_sizeOfAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_OriginalFile_copyAnnotationLinks : public Callback_OriginalFile_copyAnnotationLinks_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::OriginalFileAnnotationLinksSeq&);

    CallbackNC_OriginalFile_copyAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
        ::omero::model::OriginalFileAnnotationLinksSeq __ret;
        try
        {
            __ret = __proxy->end_copyAnnotationLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_OriginalFile_copyAnnotationLinksPtr
newCallback_OriginalFile_copyAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::OriginalFileAnnotationLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_copyAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_copyAnnotationLinksPtr
newCallback_OriginalFile_copyAnnotationLinks(T* instance, void (T::*cb)(const ::omero::model::OriginalFileAnnotationLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_copyAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_OriginalFile_copyAnnotationLinks : public Callback_OriginalFile_copyAnnotationLinks_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::OriginalFileAnnotationLinksSeq&, const CT&);

    Callback_OriginalFile_copyAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
        ::omero::model::OriginalFileAnnotationLinksSeq __ret;
        try
        {
            __ret = __proxy->end_copyAnnotationLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_OriginalFile_copyAnnotationLinksPtr
newCallback_OriginalFile_copyAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::OriginalFileAnnotationLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_copyAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_copyAnnotationLinksPtr
newCallback_OriginalFile_copyAnnotationLinks(T* instance, void (T::*cb)(const ::omero::model::OriginalFileAnnotationLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_copyAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_OriginalFile_addOriginalFileAnnotationLink : public Callback_OriginalFile_addOriginalFileAnnotationLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_OriginalFile_addOriginalFileAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_OriginalFile_addOriginalFileAnnotationLinkPtr
newCallback_OriginalFile_addOriginalFileAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_addOriginalFileAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_addOriginalFileAnnotationLinkPtr
newCallback_OriginalFile_addOriginalFileAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_addOriginalFileAnnotationLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_OriginalFile_addOriginalFileAnnotationLinkPtr
newCallback_OriginalFile_addOriginalFileAnnotationLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_addOriginalFileAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_addOriginalFileAnnotationLinkPtr
newCallback_OriginalFile_addOriginalFileAnnotationLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_addOriginalFileAnnotationLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_OriginalFile_addOriginalFileAnnotationLink : public Callback_OriginalFile_addOriginalFileAnnotationLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_OriginalFile_addOriginalFileAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_OriginalFile_addOriginalFileAnnotationLinkPtr
newCallback_OriginalFile_addOriginalFileAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_addOriginalFileAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_addOriginalFileAnnotationLinkPtr
newCallback_OriginalFile_addOriginalFileAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_addOriginalFileAnnotationLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_addOriginalFileAnnotationLinkPtr
newCallback_OriginalFile_addOriginalFileAnnotationLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_addOriginalFileAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_addOriginalFileAnnotationLinkPtr
newCallback_OriginalFile_addOriginalFileAnnotationLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_addOriginalFileAnnotationLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_OriginalFile_addAllOriginalFileAnnotationLinkSet : public Callback_OriginalFile_addAllOriginalFileAnnotationLinkSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_OriginalFile_addAllOriginalFileAnnotationLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_OriginalFile_addAllOriginalFileAnnotationLinkSetPtr
newCallback_OriginalFile_addAllOriginalFileAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_addAllOriginalFileAnnotationLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_addAllOriginalFileAnnotationLinkSetPtr
newCallback_OriginalFile_addAllOriginalFileAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_addAllOriginalFileAnnotationLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_OriginalFile_addAllOriginalFileAnnotationLinkSetPtr
newCallback_OriginalFile_addAllOriginalFileAnnotationLinkSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_addAllOriginalFileAnnotationLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_addAllOriginalFileAnnotationLinkSetPtr
newCallback_OriginalFile_addAllOriginalFileAnnotationLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_addAllOriginalFileAnnotationLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_OriginalFile_addAllOriginalFileAnnotationLinkSet : public Callback_OriginalFile_addAllOriginalFileAnnotationLinkSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_OriginalFile_addAllOriginalFileAnnotationLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_OriginalFile_addAllOriginalFileAnnotationLinkSetPtr
newCallback_OriginalFile_addAllOriginalFileAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_addAllOriginalFileAnnotationLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_addAllOriginalFileAnnotationLinkSetPtr
newCallback_OriginalFile_addAllOriginalFileAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_addAllOriginalFileAnnotationLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_addAllOriginalFileAnnotationLinkSetPtr
newCallback_OriginalFile_addAllOriginalFileAnnotationLinkSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_addAllOriginalFileAnnotationLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_addAllOriginalFileAnnotationLinkSetPtr
newCallback_OriginalFile_addAllOriginalFileAnnotationLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_addAllOriginalFileAnnotationLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_OriginalFile_removeOriginalFileAnnotationLink : public Callback_OriginalFile_removeOriginalFileAnnotationLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_OriginalFile_removeOriginalFileAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_OriginalFile_removeOriginalFileAnnotationLinkPtr
newCallback_OriginalFile_removeOriginalFileAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_removeOriginalFileAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_removeOriginalFileAnnotationLinkPtr
newCallback_OriginalFile_removeOriginalFileAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_removeOriginalFileAnnotationLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_OriginalFile_removeOriginalFileAnnotationLinkPtr
newCallback_OriginalFile_removeOriginalFileAnnotationLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_removeOriginalFileAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_removeOriginalFileAnnotationLinkPtr
newCallback_OriginalFile_removeOriginalFileAnnotationLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_removeOriginalFileAnnotationLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_OriginalFile_removeOriginalFileAnnotationLink : public Callback_OriginalFile_removeOriginalFileAnnotationLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_OriginalFile_removeOriginalFileAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_OriginalFile_removeOriginalFileAnnotationLinkPtr
newCallback_OriginalFile_removeOriginalFileAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_removeOriginalFileAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_removeOriginalFileAnnotationLinkPtr
newCallback_OriginalFile_removeOriginalFileAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_removeOriginalFileAnnotationLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_removeOriginalFileAnnotationLinkPtr
newCallback_OriginalFile_removeOriginalFileAnnotationLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_removeOriginalFileAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_removeOriginalFileAnnotationLinkPtr
newCallback_OriginalFile_removeOriginalFileAnnotationLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_removeOriginalFileAnnotationLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_OriginalFile_removeAllOriginalFileAnnotationLinkSet : public Callback_OriginalFile_removeAllOriginalFileAnnotationLinkSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_OriginalFile_removeAllOriginalFileAnnotationLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_OriginalFile_removeAllOriginalFileAnnotationLinkSetPtr
newCallback_OriginalFile_removeAllOriginalFileAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_removeAllOriginalFileAnnotationLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_removeAllOriginalFileAnnotationLinkSetPtr
newCallback_OriginalFile_removeAllOriginalFileAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_removeAllOriginalFileAnnotationLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_OriginalFile_removeAllOriginalFileAnnotationLinkSetPtr
newCallback_OriginalFile_removeAllOriginalFileAnnotationLinkSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_removeAllOriginalFileAnnotationLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_removeAllOriginalFileAnnotationLinkSetPtr
newCallback_OriginalFile_removeAllOriginalFileAnnotationLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_removeAllOriginalFileAnnotationLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_OriginalFile_removeAllOriginalFileAnnotationLinkSet : public Callback_OriginalFile_removeAllOriginalFileAnnotationLinkSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_OriginalFile_removeAllOriginalFileAnnotationLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_OriginalFile_removeAllOriginalFileAnnotationLinkSetPtr
newCallback_OriginalFile_removeAllOriginalFileAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_removeAllOriginalFileAnnotationLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_removeAllOriginalFileAnnotationLinkSetPtr
newCallback_OriginalFile_removeAllOriginalFileAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_removeAllOriginalFileAnnotationLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_removeAllOriginalFileAnnotationLinkSetPtr
newCallback_OriginalFile_removeAllOriginalFileAnnotationLinkSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_removeAllOriginalFileAnnotationLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_removeAllOriginalFileAnnotationLinkSetPtr
newCallback_OriginalFile_removeAllOriginalFileAnnotationLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_removeAllOriginalFileAnnotationLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_OriginalFile_clearAnnotationLinks : public Callback_OriginalFile_clearAnnotationLinks_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_OriginalFile_clearAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_OriginalFile_clearAnnotationLinksPtr
newCallback_OriginalFile_clearAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_clearAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_clearAnnotationLinksPtr
newCallback_OriginalFile_clearAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_clearAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_OriginalFile_clearAnnotationLinksPtr
newCallback_OriginalFile_clearAnnotationLinks(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_clearAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_clearAnnotationLinksPtr
newCallback_OriginalFile_clearAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_clearAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_OriginalFile_clearAnnotationLinks : public Callback_OriginalFile_clearAnnotationLinks_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_OriginalFile_clearAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_OriginalFile_clearAnnotationLinksPtr
newCallback_OriginalFile_clearAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_clearAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_clearAnnotationLinksPtr
newCallback_OriginalFile_clearAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_clearAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_clearAnnotationLinksPtr
newCallback_OriginalFile_clearAnnotationLinks(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_clearAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_clearAnnotationLinksPtr
newCallback_OriginalFile_clearAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_clearAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_OriginalFile_reloadAnnotationLinks : public Callback_OriginalFile_reloadAnnotationLinks_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_OriginalFile_reloadAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_OriginalFile_reloadAnnotationLinksPtr
newCallback_OriginalFile_reloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_reloadAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_reloadAnnotationLinksPtr
newCallback_OriginalFile_reloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_reloadAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_OriginalFile_reloadAnnotationLinksPtr
newCallback_OriginalFile_reloadAnnotationLinks(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_reloadAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_reloadAnnotationLinksPtr
newCallback_OriginalFile_reloadAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_reloadAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_OriginalFile_reloadAnnotationLinks : public Callback_OriginalFile_reloadAnnotationLinks_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_OriginalFile_reloadAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_OriginalFile_reloadAnnotationLinksPtr
newCallback_OriginalFile_reloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_reloadAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_reloadAnnotationLinksPtr
newCallback_OriginalFile_reloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_reloadAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_reloadAnnotationLinksPtr
newCallback_OriginalFile_reloadAnnotationLinks(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_reloadAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_reloadAnnotationLinksPtr
newCallback_OriginalFile_reloadAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_reloadAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_OriginalFile_getAnnotationLinksCountPerOwner : public Callback_OriginalFile_getAnnotationLinksCountPerOwner_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::sys::CountMap&);

    CallbackNC_OriginalFile_getAnnotationLinksCountPerOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
        ::omero::sys::CountMap __ret;
        try
        {
            __ret = __proxy->end_getAnnotationLinksCountPerOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_OriginalFile_getAnnotationLinksCountPerOwnerPtr
newCallback_OriginalFile_getAnnotationLinksCountPerOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::CountMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_getAnnotationLinksCountPerOwner<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_getAnnotationLinksCountPerOwnerPtr
newCallback_OriginalFile_getAnnotationLinksCountPerOwner(T* instance, void (T::*cb)(const ::omero::sys::CountMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_getAnnotationLinksCountPerOwner<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_OriginalFile_getAnnotationLinksCountPerOwner : public Callback_OriginalFile_getAnnotationLinksCountPerOwner_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::sys::CountMap&, const CT&);

    Callback_OriginalFile_getAnnotationLinksCountPerOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
        ::omero::sys::CountMap __ret;
        try
        {
            __ret = __proxy->end_getAnnotationLinksCountPerOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_OriginalFile_getAnnotationLinksCountPerOwnerPtr
newCallback_OriginalFile_getAnnotationLinksCountPerOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::CountMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_getAnnotationLinksCountPerOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_getAnnotationLinksCountPerOwnerPtr
newCallback_OriginalFile_getAnnotationLinksCountPerOwner(T* instance, void (T::*cb)(const ::omero::sys::CountMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_getAnnotationLinksCountPerOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_OriginalFile_linkAnnotation : public Callback_OriginalFile_linkAnnotation_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::OriginalFileAnnotationLinkPtr&);

    CallbackNC_OriginalFile_linkAnnotation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
        ::omero::model::OriginalFileAnnotationLinkPtr __ret;
        try
        {
            __ret = __proxy->end_linkAnnotation(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_OriginalFile_linkAnnotationPtr
newCallback_OriginalFile_linkAnnotation(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::OriginalFileAnnotationLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_linkAnnotation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_linkAnnotationPtr
newCallback_OriginalFile_linkAnnotation(T* instance, void (T::*cb)(const ::omero::model::OriginalFileAnnotationLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_linkAnnotation<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_OriginalFile_linkAnnotation : public Callback_OriginalFile_linkAnnotation_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::OriginalFileAnnotationLinkPtr&, const CT&);

    Callback_OriginalFile_linkAnnotation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
        ::omero::model::OriginalFileAnnotationLinkPtr __ret;
        try
        {
            __ret = __proxy->end_linkAnnotation(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_OriginalFile_linkAnnotationPtr
newCallback_OriginalFile_linkAnnotation(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::OriginalFileAnnotationLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_linkAnnotation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_linkAnnotationPtr
newCallback_OriginalFile_linkAnnotation(T* instance, void (T::*cb)(const ::omero::model::OriginalFileAnnotationLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_linkAnnotation<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_OriginalFile_addOriginalFileAnnotationLinkToBoth : public Callback_OriginalFile_addOriginalFileAnnotationLinkToBoth_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_OriginalFile_addOriginalFileAnnotationLinkToBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_OriginalFile_addOriginalFileAnnotationLinkToBothPtr
newCallback_OriginalFile_addOriginalFileAnnotationLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_addOriginalFileAnnotationLinkToBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_addOriginalFileAnnotationLinkToBothPtr
newCallback_OriginalFile_addOriginalFileAnnotationLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_addOriginalFileAnnotationLinkToBoth<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_OriginalFile_addOriginalFileAnnotationLinkToBothPtr
newCallback_OriginalFile_addOriginalFileAnnotationLinkToBoth(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_addOriginalFileAnnotationLinkToBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_addOriginalFileAnnotationLinkToBothPtr
newCallback_OriginalFile_addOriginalFileAnnotationLinkToBoth(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_addOriginalFileAnnotationLinkToBoth<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_OriginalFile_addOriginalFileAnnotationLinkToBoth : public Callback_OriginalFile_addOriginalFileAnnotationLinkToBoth_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_OriginalFile_addOriginalFileAnnotationLinkToBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_OriginalFile_addOriginalFileAnnotationLinkToBothPtr
newCallback_OriginalFile_addOriginalFileAnnotationLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_addOriginalFileAnnotationLinkToBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_addOriginalFileAnnotationLinkToBothPtr
newCallback_OriginalFile_addOriginalFileAnnotationLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_addOriginalFileAnnotationLinkToBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_addOriginalFileAnnotationLinkToBothPtr
newCallback_OriginalFile_addOriginalFileAnnotationLinkToBoth(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_addOriginalFileAnnotationLinkToBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_addOriginalFileAnnotationLinkToBothPtr
newCallback_OriginalFile_addOriginalFileAnnotationLinkToBoth(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_addOriginalFileAnnotationLinkToBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_OriginalFile_findOriginalFileAnnotationLink : public Callback_OriginalFile_findOriginalFileAnnotationLink_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::OriginalFileAnnotationLinksSeq&);

    CallbackNC_OriginalFile_findOriginalFileAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
        ::omero::model::OriginalFileAnnotationLinksSeq __ret;
        try
        {
            __ret = __proxy->end_findOriginalFileAnnotationLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_OriginalFile_findOriginalFileAnnotationLinkPtr
newCallback_OriginalFile_findOriginalFileAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::OriginalFileAnnotationLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_findOriginalFileAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_findOriginalFileAnnotationLinkPtr
newCallback_OriginalFile_findOriginalFileAnnotationLink(T* instance, void (T::*cb)(const ::omero::model::OriginalFileAnnotationLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_findOriginalFileAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_OriginalFile_findOriginalFileAnnotationLink : public Callback_OriginalFile_findOriginalFileAnnotationLink_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::OriginalFileAnnotationLinksSeq&, const CT&);

    Callback_OriginalFile_findOriginalFileAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
        ::omero::model::OriginalFileAnnotationLinksSeq __ret;
        try
        {
            __ret = __proxy->end_findOriginalFileAnnotationLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_OriginalFile_findOriginalFileAnnotationLinkPtr
newCallback_OriginalFile_findOriginalFileAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::OriginalFileAnnotationLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_findOriginalFileAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_findOriginalFileAnnotationLinkPtr
newCallback_OriginalFile_findOriginalFileAnnotationLink(T* instance, void (T::*cb)(const ::omero::model::OriginalFileAnnotationLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_findOriginalFileAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_OriginalFile_unlinkAnnotation : public Callback_OriginalFile_unlinkAnnotation_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_OriginalFile_unlinkAnnotation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_OriginalFile_unlinkAnnotationPtr
newCallback_OriginalFile_unlinkAnnotation(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_unlinkAnnotation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_unlinkAnnotationPtr
newCallback_OriginalFile_unlinkAnnotation(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_unlinkAnnotation<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_OriginalFile_unlinkAnnotationPtr
newCallback_OriginalFile_unlinkAnnotation(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_unlinkAnnotation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_unlinkAnnotationPtr
newCallback_OriginalFile_unlinkAnnotation(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_unlinkAnnotation<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_OriginalFile_unlinkAnnotation : public Callback_OriginalFile_unlinkAnnotation_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_OriginalFile_unlinkAnnotation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_OriginalFile_unlinkAnnotationPtr
newCallback_OriginalFile_unlinkAnnotation(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_unlinkAnnotation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_unlinkAnnotationPtr
newCallback_OriginalFile_unlinkAnnotation(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_unlinkAnnotation<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_unlinkAnnotationPtr
newCallback_OriginalFile_unlinkAnnotation(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_unlinkAnnotation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_unlinkAnnotationPtr
newCallback_OriginalFile_unlinkAnnotation(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_unlinkAnnotation<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_OriginalFile_removeOriginalFileAnnotationLinkFromBoth : public Callback_OriginalFile_removeOriginalFileAnnotationLinkFromBoth_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_OriginalFile_removeOriginalFileAnnotationLinkFromBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_OriginalFile_removeOriginalFileAnnotationLinkFromBothPtr
newCallback_OriginalFile_removeOriginalFileAnnotationLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_removeOriginalFileAnnotationLinkFromBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_removeOriginalFileAnnotationLinkFromBothPtr
newCallback_OriginalFile_removeOriginalFileAnnotationLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_removeOriginalFileAnnotationLinkFromBoth<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_OriginalFile_removeOriginalFileAnnotationLinkFromBothPtr
newCallback_OriginalFile_removeOriginalFileAnnotationLinkFromBoth(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_removeOriginalFileAnnotationLinkFromBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_removeOriginalFileAnnotationLinkFromBothPtr
newCallback_OriginalFile_removeOriginalFileAnnotationLinkFromBoth(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_removeOriginalFileAnnotationLinkFromBoth<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_OriginalFile_removeOriginalFileAnnotationLinkFromBoth : public Callback_OriginalFile_removeOriginalFileAnnotationLinkFromBoth_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_OriginalFile_removeOriginalFileAnnotationLinkFromBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_OriginalFile_removeOriginalFileAnnotationLinkFromBothPtr
newCallback_OriginalFile_removeOriginalFileAnnotationLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_removeOriginalFileAnnotationLinkFromBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_removeOriginalFileAnnotationLinkFromBothPtr
newCallback_OriginalFile_removeOriginalFileAnnotationLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_removeOriginalFileAnnotationLinkFromBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_removeOriginalFileAnnotationLinkFromBothPtr
newCallback_OriginalFile_removeOriginalFileAnnotationLinkFromBoth(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_removeOriginalFileAnnotationLinkFromBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_removeOriginalFileAnnotationLinkFromBothPtr
newCallback_OriginalFile_removeOriginalFileAnnotationLinkFromBoth(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_removeOriginalFileAnnotationLinkFromBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_OriginalFile_linkedAnnotationList : public Callback_OriginalFile_linkedAnnotationList_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::OriginalFileLinkedAnnotationSeq&);

    CallbackNC_OriginalFile_linkedAnnotationList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
        ::omero::model::OriginalFileLinkedAnnotationSeq __ret;
        try
        {
            __ret = __proxy->end_linkedAnnotationList(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_OriginalFile_linkedAnnotationListPtr
newCallback_OriginalFile_linkedAnnotationList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::OriginalFileLinkedAnnotationSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_linkedAnnotationList<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_linkedAnnotationListPtr
newCallback_OriginalFile_linkedAnnotationList(T* instance, void (T::*cb)(const ::omero::model::OriginalFileLinkedAnnotationSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_linkedAnnotationList<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_OriginalFile_linkedAnnotationList : public Callback_OriginalFile_linkedAnnotationList_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::OriginalFileLinkedAnnotationSeq&, const CT&);

    Callback_OriginalFile_linkedAnnotationList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
        ::omero::model::OriginalFileLinkedAnnotationSeq __ret;
        try
        {
            __ret = __proxy->end_linkedAnnotationList(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_OriginalFile_linkedAnnotationListPtr
newCallback_OriginalFile_linkedAnnotationList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::OriginalFileLinkedAnnotationSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_linkedAnnotationList<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_linkedAnnotationListPtr
newCallback_OriginalFile_linkedAnnotationList(T* instance, void (T::*cb)(const ::omero::model::OriginalFileLinkedAnnotationSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_linkedAnnotationList<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_OriginalFile_getName : public Callback_OriginalFile_getName_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_OriginalFile_getName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getName(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_OriginalFile_getNamePtr
newCallback_OriginalFile_getName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_getName<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_getNamePtr
newCallback_OriginalFile_getName(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_getName<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_OriginalFile_getName : public Callback_OriginalFile_getName_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_OriginalFile_getName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::OriginalFilePrx __proxy = ::omero::model::OriginalFilePrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getName(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_OriginalFile_getNamePtr
newCallback_OriginalFile_getName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_getName<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_getNamePtr
newCallback_OriginalFile_getName(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_getName<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_OriginalFile_setName : public Callback_OriginalFile_setName_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_OriginalFile_setName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_OriginalFile_setNamePtr
newCallback_OriginalFile_setName(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_setName<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_setNamePtr
newCallback_OriginalFile_setName(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_setName<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_OriginalFile_setNamePtr
newCallback_OriginalFile_setName(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_setName<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_OriginalFile_setNamePtr
newCallback_OriginalFile_setName(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_OriginalFile_setName<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_OriginalFile_setName : public Callback_OriginalFile_setName_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_OriginalFile_setName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_OriginalFile_setNamePtr
newCallback_OriginalFile_setName(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_setName<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_setNamePtr
newCallback_OriginalFile_setName(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_setName<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_setNamePtr
newCallback_OriginalFile_setName(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_setName<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_OriginalFile_setNamePtr
newCallback_OriginalFile_setName(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_OriginalFile_setName<T, CT>(instance, 0, excb, sentcb);
}

}

}

#endif
