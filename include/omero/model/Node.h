// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Node.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_Node_h__
#define __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_Node_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <omero/model/IObject.h>
#include <omero/RTypes.h>
#include <omero/System.h>
#include <omero/Collections.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace omero
{

namespace model
{

class Session;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Session>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Session*);

class NodeAnnotationLink;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::NodeAnnotationLink>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::NodeAnnotationLink*);

class Annotation;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Annotation>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Annotation*);

class Details;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Details>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Details*);

class Node;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Node>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Node*);

}

}

}

namespace omero
{

namespace model
{

class Session;
bool operator==(const Session&, const Session&);
bool operator<(const Session&, const Session&);
::Ice::Object* upCast(::omero::model::Session*);
typedef ::IceInternal::Handle< ::omero::model::Session> SessionPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Session> SessionPrx;
void __patch(SessionPtr&, const ::Ice::ObjectPtr&);

class NodeAnnotationLink;
bool operator==(const NodeAnnotationLink&, const NodeAnnotationLink&);
bool operator<(const NodeAnnotationLink&, const NodeAnnotationLink&);
::Ice::Object* upCast(::omero::model::NodeAnnotationLink*);
typedef ::IceInternal::Handle< ::omero::model::NodeAnnotationLink> NodeAnnotationLinkPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::NodeAnnotationLink> NodeAnnotationLinkPrx;
void __patch(NodeAnnotationLinkPtr&, const ::Ice::ObjectPtr&);

class Annotation;
bool operator==(const Annotation&, const Annotation&);
bool operator<(const Annotation&, const Annotation&);
::Ice::Object* upCast(::omero::model::Annotation*);
typedef ::IceInternal::Handle< ::omero::model::Annotation> AnnotationPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Annotation> AnnotationPrx;
void __patch(AnnotationPtr&, const ::Ice::ObjectPtr&);

class Details;
bool operator==(const Details&, const Details&);
bool operator<(const Details&, const Details&);
::Ice::Object* upCast(::omero::model::Details*);
typedef ::IceInternal::Handle< ::omero::model::Details> DetailsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Details> DetailsPrx;
void __patch(DetailsPtr&, const ::Ice::ObjectPtr&);

class Node;
bool operator==(const Node&, const Node&);
bool operator<(const Node&, const Node&);
::Ice::Object* upCast(::omero::model::Node*);
typedef ::IceInternal::Handle< ::omero::model::Node> NodePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Node> NodePrx;
void __patch(NodePtr&, const ::Ice::ObjectPtr&);

}

}

namespace omero
{

namespace model
{

typedef ::std::vector< ::omero::model::SessionPtr> NodeSessionsSeq;

typedef ::std::vector< ::omero::model::NodeAnnotationLinkPtr> NodeAnnotationLinksSeq;

typedef ::std::vector< ::omero::model::AnnotationPtr> NodeLinkedAnnotationSeq;

}

}

namespace omero
{

namespace model
{

class Callback_Node_getVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Node_getVersion_Base> Callback_Node_getVersionPtr;

class Callback_Node_setVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Node_setVersion_Base> Callback_Node_setVersionPtr;

class Callback_Node_unloadSessions_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Node_unloadSessions_Base> Callback_Node_unloadSessionsPtr;

class Callback_Node_sizeOfSessions_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Node_sizeOfSessions_Base> Callback_Node_sizeOfSessionsPtr;

class Callback_Node_copySessions_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Node_copySessions_Base> Callback_Node_copySessionsPtr;

class Callback_Node_addSession_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Node_addSession_Base> Callback_Node_addSessionPtr;

class Callback_Node_addAllSessionSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Node_addAllSessionSet_Base> Callback_Node_addAllSessionSetPtr;

class Callback_Node_removeSession_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Node_removeSession_Base> Callback_Node_removeSessionPtr;

class Callback_Node_removeAllSessionSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Node_removeAllSessionSet_Base> Callback_Node_removeAllSessionSetPtr;

class Callback_Node_clearSessions_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Node_clearSessions_Base> Callback_Node_clearSessionsPtr;

class Callback_Node_reloadSessions_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Node_reloadSessions_Base> Callback_Node_reloadSessionsPtr;

class Callback_Node_getUuid_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Node_getUuid_Base> Callback_Node_getUuidPtr;

class Callback_Node_setUuid_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Node_setUuid_Base> Callback_Node_setUuidPtr;

class Callback_Node_getConn_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Node_getConn_Base> Callback_Node_getConnPtr;

class Callback_Node_setConn_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Node_setConn_Base> Callback_Node_setConnPtr;

class Callback_Node_getUp_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Node_getUp_Base> Callback_Node_getUpPtr;

class Callback_Node_setUp_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Node_setUp_Base> Callback_Node_setUpPtr;

class Callback_Node_getDown_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Node_getDown_Base> Callback_Node_getDownPtr;

class Callback_Node_setDown_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Node_setDown_Base> Callback_Node_setDownPtr;

class Callback_Node_getScale_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Node_getScale_Base> Callback_Node_getScalePtr;

class Callback_Node_setScale_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Node_setScale_Base> Callback_Node_setScalePtr;

class Callback_Node_unloadAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Node_unloadAnnotationLinks_Base> Callback_Node_unloadAnnotationLinksPtr;

class Callback_Node_sizeOfAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Node_sizeOfAnnotationLinks_Base> Callback_Node_sizeOfAnnotationLinksPtr;

class Callback_Node_copyAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Node_copyAnnotationLinks_Base> Callback_Node_copyAnnotationLinksPtr;

class Callback_Node_addNodeAnnotationLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Node_addNodeAnnotationLink_Base> Callback_Node_addNodeAnnotationLinkPtr;

class Callback_Node_addAllNodeAnnotationLinkSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Node_addAllNodeAnnotationLinkSet_Base> Callback_Node_addAllNodeAnnotationLinkSetPtr;

class Callback_Node_removeNodeAnnotationLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Node_removeNodeAnnotationLink_Base> Callback_Node_removeNodeAnnotationLinkPtr;

class Callback_Node_removeAllNodeAnnotationLinkSet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Node_removeAllNodeAnnotationLinkSet_Base> Callback_Node_removeAllNodeAnnotationLinkSetPtr;

class Callback_Node_clearAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Node_clearAnnotationLinks_Base> Callback_Node_clearAnnotationLinksPtr;

class Callback_Node_reloadAnnotationLinks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Node_reloadAnnotationLinks_Base> Callback_Node_reloadAnnotationLinksPtr;

class Callback_Node_getAnnotationLinksCountPerOwner_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Node_getAnnotationLinksCountPerOwner_Base> Callback_Node_getAnnotationLinksCountPerOwnerPtr;

class Callback_Node_linkAnnotation_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Node_linkAnnotation_Base> Callback_Node_linkAnnotationPtr;

class Callback_Node_addNodeAnnotationLinkToBoth_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Node_addNodeAnnotationLinkToBoth_Base> Callback_Node_addNodeAnnotationLinkToBothPtr;

class Callback_Node_findNodeAnnotationLink_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Node_findNodeAnnotationLink_Base> Callback_Node_findNodeAnnotationLinkPtr;

class Callback_Node_unlinkAnnotation_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Node_unlinkAnnotation_Base> Callback_Node_unlinkAnnotationPtr;

class Callback_Node_removeNodeAnnotationLinkFromBoth_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Node_removeNodeAnnotationLinkFromBoth_Base> Callback_Node_removeNodeAnnotationLinkFromBothPtr;

class Callback_Node_linkedAnnotationList_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Node_linkedAnnotationList_Base> Callback_Node_linkedAnnotationListPtr;

}

}

namespace IceProxy
{

namespace omero
{

namespace model
{

class Node : virtual public ::IceProxy::omero::model::IObject
{
public:

    ::omero::RIntPtr getVersion()
    {
        return getVersion(0);
    }
    ::omero::RIntPtr getVersion(const ::Ice::Context& __ctx)
    {
        return getVersion(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getVersion(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getVersion(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getVersion(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getVersion(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getVersion(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getVersion(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RIntPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::NodePrx __proxy = ::omero::model::NodePrx::uncheckedCast(__result->getProxy());
                ::omero::RIntPtr __ret;
                try
                {
                    __ret = __proxy->end_getVersion(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RIntPtr&)> _response;
        };
        return begin_getVersion(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getVersion()
    {
        return begin_getVersion(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx)
    {
        return begin_getVersion(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::omero::model::Callback_Node_getVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx, const ::omero::model::Callback_Node_getVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(&__ctx, __del, __cookie);
    }

    ::omero::RIntPtr end_getVersion(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RIntPtr getVersion(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setVersion(const ::omero::RIntPtr& theVersion)
    {
        setVersion(theVersion, 0);
    }
    void setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx)
    {
        setVersion(theVersion, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setVersion(const ::omero::RIntPtr& theVersion, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setVersion(theVersion, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setVersion(const ::omero::RIntPtr& theVersion, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setVersion(theVersion, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setVersion(theVersion, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setVersion(theVersion, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion)
    {
        return begin_setVersion(theVersion, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx)
    {
        return begin_setVersion(theVersion, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::omero::model::Callback_Node_setVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::omero::model::Callback_Node_setVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, &__ctx, __del, __cookie);
    }

    void end_setVersion(const ::Ice::AsyncResultPtr&);
    
private:

    void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unloadSessions()
    {
        unloadSessions(0);
    }
    void unloadSessions(const ::Ice::Context& __ctx)
    {
        unloadSessions(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_unloadSessions(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unloadSessions(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_unloadSessions(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unloadSessions(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unloadSessions(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unloadSessions(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unloadSessions(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unloadSessions(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_unloadSessions()
    {
        return begin_unloadSessions(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadSessions(const ::Ice::Context& __ctx)
    {
        return begin_unloadSessions(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadSessions(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadSessions(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadSessions(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadSessions(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadSessions(const ::omero::model::Callback_Node_unloadSessionsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadSessions(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadSessions(const ::Ice::Context& __ctx, const ::omero::model::Callback_Node_unloadSessionsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadSessions(&__ctx, __del, __cookie);
    }

    void end_unloadSessions(const ::Ice::AsyncResultPtr&);
    
private:

    void unloadSessions(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unloadSessions(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int sizeOfSessions()
    {
        return sizeOfSessions(0);
    }
    ::Ice::Int sizeOfSessions(const ::Ice::Context& __ctx)
    {
        return sizeOfSessions(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_sizeOfSessions(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sizeOfSessions(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfSessions(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sizeOfSessions(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfSessions(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sizeOfSessions(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfSessions(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sizeOfSessions(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_sizeOfSessions(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::NodePrx __proxy = ::omero::model::NodePrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_sizeOfSessions(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_sizeOfSessions(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_sizeOfSessions()
    {
        return begin_sizeOfSessions(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfSessions(const ::Ice::Context& __ctx)
    {
        return begin_sizeOfSessions(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfSessions(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfSessions(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfSessions(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfSessions(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfSessions(const ::omero::model::Callback_Node_sizeOfSessionsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfSessions(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfSessions(const ::Ice::Context& __ctx, const ::omero::model::Callback_Node_sizeOfSessionsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfSessions(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_sizeOfSessions(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int sizeOfSessions(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sizeOfSessions(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::NodeSessionsSeq copySessions()
    {
        return copySessions(0);
    }
    ::omero::model::NodeSessionsSeq copySessions(const ::Ice::Context& __ctx)
    {
        return copySessions(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_copySessions(const ::IceInternal::Function<void (const ::omero::model::NodeSessionsSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_copySessions(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_copySessions(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_copySessions(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_copySessions(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::NodeSessionsSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_copySessions(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_copySessions(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_copySessions(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_copySessions(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::NodeSessionsSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::NodeSessionsSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::NodePrx __proxy = ::omero::model::NodePrx::uncheckedCast(__result->getProxy());
                ::omero::model::NodeSessionsSeq __ret;
                try
                {
                    __ret = __proxy->end_copySessions(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::NodeSessionsSeq&)> _response;
        };
        return begin_copySessions(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_copySessions()
    {
        return begin_copySessions(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copySessions(const ::Ice::Context& __ctx)
    {
        return begin_copySessions(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copySessions(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copySessions(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copySessions(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copySessions(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copySessions(const ::omero::model::Callback_Node_copySessionsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copySessions(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copySessions(const ::Ice::Context& __ctx, const ::omero::model::Callback_Node_copySessionsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copySessions(&__ctx, __del, __cookie);
    }

    ::omero::model::NodeSessionsSeq end_copySessions(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::NodeSessionsSeq copySessions(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_copySessions(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addSession(const ::omero::model::SessionPtr& target)
    {
        addSession(target, 0);
    }
    void addSession(const ::omero::model::SessionPtr& target, const ::Ice::Context& __ctx)
    {
        addSession(target, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addSession(const ::omero::model::SessionPtr& target, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addSession(target, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addSession(const ::omero::model::SessionPtr& target, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addSession(target, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addSession(const ::omero::model::SessionPtr& target, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addSession(target, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addSession(const ::omero::model::SessionPtr& target, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addSession(target, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addSession(const ::omero::model::SessionPtr& target)
    {
        return begin_addSession(target, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addSession(const ::omero::model::SessionPtr& target, const ::Ice::Context& __ctx)
    {
        return begin_addSession(target, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addSession(const ::omero::model::SessionPtr& target, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addSession(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addSession(const ::omero::model::SessionPtr& target, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addSession(target, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addSession(const ::omero::model::SessionPtr& target, const ::omero::model::Callback_Node_addSessionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addSession(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addSession(const ::omero::model::SessionPtr& target, const ::Ice::Context& __ctx, const ::omero::model::Callback_Node_addSessionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addSession(target, &__ctx, __del, __cookie);
    }

    void end_addSession(const ::Ice::AsyncResultPtr&);
    
private:

    void addSession(const ::omero::model::SessionPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addSession(const ::omero::model::SessionPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addAllSessionSet(const ::omero::model::NodeSessionsSeq& targets)
    {
        addAllSessionSet(targets, 0);
    }
    void addAllSessionSet(const ::omero::model::NodeSessionsSeq& targets, const ::Ice::Context& __ctx)
    {
        addAllSessionSet(targets, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addAllSessionSet(const ::omero::model::NodeSessionsSeq& targets, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addAllSessionSet(targets, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addAllSessionSet(const ::omero::model::NodeSessionsSeq& targets, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addAllSessionSet(targets, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addAllSessionSet(const ::omero::model::NodeSessionsSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addAllSessionSet(targets, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addAllSessionSet(const ::omero::model::NodeSessionsSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addAllSessionSet(targets, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addAllSessionSet(const ::omero::model::NodeSessionsSeq& targets)
    {
        return begin_addAllSessionSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllSessionSet(const ::omero::model::NodeSessionsSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_addAllSessionSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllSessionSet(const ::omero::model::NodeSessionsSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllSessionSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllSessionSet(const ::omero::model::NodeSessionsSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllSessionSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllSessionSet(const ::omero::model::NodeSessionsSeq& targets, const ::omero::model::Callback_Node_addAllSessionSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllSessionSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllSessionSet(const ::omero::model::NodeSessionsSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Node_addAllSessionSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllSessionSet(targets, &__ctx, __del, __cookie);
    }

    void end_addAllSessionSet(const ::Ice::AsyncResultPtr&);
    
private:

    void addAllSessionSet(const ::omero::model::NodeSessionsSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addAllSessionSet(const ::omero::model::NodeSessionsSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeSession(const ::omero::model::SessionPtr& theTarget)
    {
        removeSession(theTarget, 0);
    }
    void removeSession(const ::omero::model::SessionPtr& theTarget, const ::Ice::Context& __ctx)
    {
        removeSession(theTarget, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeSession(const ::omero::model::SessionPtr& theTarget, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeSession(theTarget, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeSession(const ::omero::model::SessionPtr& theTarget, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeSession(theTarget, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeSession(const ::omero::model::SessionPtr& theTarget, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeSession(theTarget, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeSession(const ::omero::model::SessionPtr& theTarget, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeSession(theTarget, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeSession(const ::omero::model::SessionPtr& theTarget)
    {
        return begin_removeSession(theTarget, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeSession(const ::omero::model::SessionPtr& theTarget, const ::Ice::Context& __ctx)
    {
        return begin_removeSession(theTarget, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeSession(const ::omero::model::SessionPtr& theTarget, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeSession(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeSession(const ::omero::model::SessionPtr& theTarget, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeSession(theTarget, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeSession(const ::omero::model::SessionPtr& theTarget, const ::omero::model::Callback_Node_removeSessionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeSession(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeSession(const ::omero::model::SessionPtr& theTarget, const ::Ice::Context& __ctx, const ::omero::model::Callback_Node_removeSessionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeSession(theTarget, &__ctx, __del, __cookie);
    }

    void end_removeSession(const ::Ice::AsyncResultPtr&);
    
private:

    void removeSession(const ::omero::model::SessionPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeSession(const ::omero::model::SessionPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeAllSessionSet(const ::omero::model::NodeSessionsSeq& targets)
    {
        removeAllSessionSet(targets, 0);
    }
    void removeAllSessionSet(const ::omero::model::NodeSessionsSeq& targets, const ::Ice::Context& __ctx)
    {
        removeAllSessionSet(targets, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeAllSessionSet(const ::omero::model::NodeSessionsSeq& targets, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeAllSessionSet(targets, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeAllSessionSet(const ::omero::model::NodeSessionsSeq& targets, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeAllSessionSet(targets, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeAllSessionSet(const ::omero::model::NodeSessionsSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeAllSessionSet(targets, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeAllSessionSet(const ::omero::model::NodeSessionsSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeAllSessionSet(targets, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeAllSessionSet(const ::omero::model::NodeSessionsSeq& targets)
    {
        return begin_removeAllSessionSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllSessionSet(const ::omero::model::NodeSessionsSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_removeAllSessionSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllSessionSet(const ::omero::model::NodeSessionsSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllSessionSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllSessionSet(const ::omero::model::NodeSessionsSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllSessionSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllSessionSet(const ::omero::model::NodeSessionsSeq& targets, const ::omero::model::Callback_Node_removeAllSessionSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllSessionSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllSessionSet(const ::omero::model::NodeSessionsSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Node_removeAllSessionSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllSessionSet(targets, &__ctx, __del, __cookie);
    }

    void end_removeAllSessionSet(const ::Ice::AsyncResultPtr&);
    
private:

    void removeAllSessionSet(const ::omero::model::NodeSessionsSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeAllSessionSet(const ::omero::model::NodeSessionsSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void clearSessions()
    {
        clearSessions(0);
    }
    void clearSessions(const ::Ice::Context& __ctx)
    {
        clearSessions(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_clearSessions(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_clearSessions(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_clearSessions(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_clearSessions(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_clearSessions(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_clearSessions(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_clearSessions(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_clearSessions(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_clearSessions()
    {
        return begin_clearSessions(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearSessions(const ::Ice::Context& __ctx)
    {
        return begin_clearSessions(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearSessions(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearSessions(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearSessions(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearSessions(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearSessions(const ::omero::model::Callback_Node_clearSessionsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearSessions(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearSessions(const ::Ice::Context& __ctx, const ::omero::model::Callback_Node_clearSessionsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearSessions(&__ctx, __del, __cookie);
    }

    void end_clearSessions(const ::Ice::AsyncResultPtr&);
    
private:

    void clearSessions(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_clearSessions(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reloadSessions(const ::omero::model::NodePtr& toCopy)
    {
        reloadSessions(toCopy, 0);
    }
    void reloadSessions(const ::omero::model::NodePtr& toCopy, const ::Ice::Context& __ctx)
    {
        reloadSessions(toCopy, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_reloadSessions(const ::omero::model::NodePtr& toCopy, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reloadSessions(toCopy, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_reloadSessions(const ::omero::model::NodePtr& toCopy, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reloadSessions(toCopy, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reloadSessions(const ::omero::model::NodePtr& toCopy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reloadSessions(toCopy, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reloadSessions(const ::omero::model::NodePtr& toCopy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reloadSessions(toCopy, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_reloadSessions(const ::omero::model::NodePtr& toCopy)
    {
        return begin_reloadSessions(toCopy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadSessions(const ::omero::model::NodePtr& toCopy, const ::Ice::Context& __ctx)
    {
        return begin_reloadSessions(toCopy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadSessions(const ::omero::model::NodePtr& toCopy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadSessions(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadSessions(const ::omero::model::NodePtr& toCopy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadSessions(toCopy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadSessions(const ::omero::model::NodePtr& toCopy, const ::omero::model::Callback_Node_reloadSessionsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadSessions(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadSessions(const ::omero::model::NodePtr& toCopy, const ::Ice::Context& __ctx, const ::omero::model::Callback_Node_reloadSessionsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadSessions(toCopy, &__ctx, __del, __cookie);
    }

    void end_reloadSessions(const ::Ice::AsyncResultPtr&);
    
private:

    void reloadSessions(const ::omero::model::NodePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reloadSessions(const ::omero::model::NodePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getUuid()
    {
        return getUuid(0);
    }
    ::omero::RStringPtr getUuid(const ::Ice::Context& __ctx)
    {
        return getUuid(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getUuid(const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getUuid(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getUuid(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getUuid(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getUuid(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getUuid(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getUuid(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getUuid(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getUuid(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RStringPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::NodePrx __proxy = ::omero::model::NodePrx::uncheckedCast(__result->getProxy());
                ::omero::RStringPtr __ret;
                try
                {
                    __ret = __proxy->end_getUuid(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RStringPtr&)> _response;
        };
        return begin_getUuid(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getUuid()
    {
        return begin_getUuid(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getUuid(const ::Ice::Context& __ctx)
    {
        return begin_getUuid(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getUuid(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getUuid(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getUuid(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getUuid(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getUuid(const ::omero::model::Callback_Node_getUuidPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getUuid(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getUuid(const ::Ice::Context& __ctx, const ::omero::model::Callback_Node_getUuidPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getUuid(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getUuid(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getUuid(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getUuid(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setUuid(const ::omero::RStringPtr& theUuid)
    {
        setUuid(theUuid, 0);
    }
    void setUuid(const ::omero::RStringPtr& theUuid, const ::Ice::Context& __ctx)
    {
        setUuid(theUuid, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setUuid(const ::omero::RStringPtr& theUuid, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setUuid(theUuid, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setUuid(const ::omero::RStringPtr& theUuid, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setUuid(theUuid, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setUuid(const ::omero::RStringPtr& theUuid, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setUuid(theUuid, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setUuid(const ::omero::RStringPtr& theUuid, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setUuid(theUuid, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setUuid(const ::omero::RStringPtr& theUuid)
    {
        return begin_setUuid(theUuid, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setUuid(const ::omero::RStringPtr& theUuid, const ::Ice::Context& __ctx)
    {
        return begin_setUuid(theUuid, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setUuid(const ::omero::RStringPtr& theUuid, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setUuid(theUuid, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setUuid(const ::omero::RStringPtr& theUuid, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setUuid(theUuid, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setUuid(const ::omero::RStringPtr& theUuid, const ::omero::model::Callback_Node_setUuidPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setUuid(theUuid, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setUuid(const ::omero::RStringPtr& theUuid, const ::Ice::Context& __ctx, const ::omero::model::Callback_Node_setUuidPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setUuid(theUuid, &__ctx, __del, __cookie);
    }

    void end_setUuid(const ::Ice::AsyncResultPtr&);
    
private:

    void setUuid(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setUuid(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getConn()
    {
        return getConn(0);
    }
    ::omero::RStringPtr getConn(const ::Ice::Context& __ctx)
    {
        return getConn(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getConn(const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getConn(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getConn(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getConn(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getConn(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getConn(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getConn(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getConn(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getConn(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RStringPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RStringPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::NodePrx __proxy = ::omero::model::NodePrx::uncheckedCast(__result->getProxy());
                ::omero::RStringPtr __ret;
                try
                {
                    __ret = __proxy->end_getConn(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RStringPtr&)> _response;
        };
        return begin_getConn(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getConn()
    {
        return begin_getConn(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getConn(const ::Ice::Context& __ctx)
    {
        return begin_getConn(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getConn(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getConn(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getConn(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getConn(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getConn(const ::omero::model::Callback_Node_getConnPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getConn(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getConn(const ::Ice::Context& __ctx, const ::omero::model::Callback_Node_getConnPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getConn(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getConn(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getConn(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getConn(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setConn(const ::omero::RStringPtr& theConn)
    {
        setConn(theConn, 0);
    }
    void setConn(const ::omero::RStringPtr& theConn, const ::Ice::Context& __ctx)
    {
        setConn(theConn, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setConn(const ::omero::RStringPtr& theConn, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setConn(theConn, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setConn(const ::omero::RStringPtr& theConn, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setConn(theConn, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setConn(const ::omero::RStringPtr& theConn, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setConn(theConn, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setConn(const ::omero::RStringPtr& theConn, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setConn(theConn, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setConn(const ::omero::RStringPtr& theConn)
    {
        return begin_setConn(theConn, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setConn(const ::omero::RStringPtr& theConn, const ::Ice::Context& __ctx)
    {
        return begin_setConn(theConn, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setConn(const ::omero::RStringPtr& theConn, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setConn(theConn, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setConn(const ::omero::RStringPtr& theConn, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setConn(theConn, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setConn(const ::omero::RStringPtr& theConn, const ::omero::model::Callback_Node_setConnPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setConn(theConn, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setConn(const ::omero::RStringPtr& theConn, const ::Ice::Context& __ctx, const ::omero::model::Callback_Node_setConnPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setConn(theConn, &__ctx, __del, __cookie);
    }

    void end_setConn(const ::Ice::AsyncResultPtr&);
    
private:

    void setConn(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setConn(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RTimePtr getUp()
    {
        return getUp(0);
    }
    ::omero::RTimePtr getUp(const ::Ice::Context& __ctx)
    {
        return getUp(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getUp(const ::IceInternal::Function<void (const ::omero::RTimePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getUp(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getUp(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getUp(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getUp(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RTimePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getUp(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getUp(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getUp(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getUp(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RTimePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RTimePtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::NodePrx __proxy = ::omero::model::NodePrx::uncheckedCast(__result->getProxy());
                ::omero::RTimePtr __ret;
                try
                {
                    __ret = __proxy->end_getUp(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RTimePtr&)> _response;
        };
        return begin_getUp(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getUp()
    {
        return begin_getUp(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getUp(const ::Ice::Context& __ctx)
    {
        return begin_getUp(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getUp(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getUp(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getUp(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getUp(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getUp(const ::omero::model::Callback_Node_getUpPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getUp(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getUp(const ::Ice::Context& __ctx, const ::omero::model::Callback_Node_getUpPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getUp(&__ctx, __del, __cookie);
    }

    ::omero::RTimePtr end_getUp(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RTimePtr getUp(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getUp(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setUp(const ::omero::RTimePtr& theUp)
    {
        setUp(theUp, 0);
    }
    void setUp(const ::omero::RTimePtr& theUp, const ::Ice::Context& __ctx)
    {
        setUp(theUp, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setUp(const ::omero::RTimePtr& theUp, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setUp(theUp, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setUp(const ::omero::RTimePtr& theUp, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setUp(theUp, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setUp(const ::omero::RTimePtr& theUp, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setUp(theUp, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setUp(const ::omero::RTimePtr& theUp, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setUp(theUp, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setUp(const ::omero::RTimePtr& theUp)
    {
        return begin_setUp(theUp, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setUp(const ::omero::RTimePtr& theUp, const ::Ice::Context& __ctx)
    {
        return begin_setUp(theUp, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setUp(const ::omero::RTimePtr& theUp, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setUp(theUp, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setUp(const ::omero::RTimePtr& theUp, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setUp(theUp, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setUp(const ::omero::RTimePtr& theUp, const ::omero::model::Callback_Node_setUpPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setUp(theUp, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setUp(const ::omero::RTimePtr& theUp, const ::Ice::Context& __ctx, const ::omero::model::Callback_Node_setUpPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setUp(theUp, &__ctx, __del, __cookie);
    }

    void end_setUp(const ::Ice::AsyncResultPtr&);
    
private:

    void setUp(const ::omero::RTimePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setUp(const ::omero::RTimePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RTimePtr getDown()
    {
        return getDown(0);
    }
    ::omero::RTimePtr getDown(const ::Ice::Context& __ctx)
    {
        return getDown(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getDown(const ::IceInternal::Function<void (const ::omero::RTimePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getDown(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getDown(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getDown(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getDown(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RTimePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getDown(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getDown(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getDown(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getDown(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RTimePtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RTimePtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::NodePrx __proxy = ::omero::model::NodePrx::uncheckedCast(__result->getProxy());
                ::omero::RTimePtr __ret;
                try
                {
                    __ret = __proxy->end_getDown(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RTimePtr&)> _response;
        };
        return begin_getDown(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getDown()
    {
        return begin_getDown(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDown(const ::Ice::Context& __ctx)
    {
        return begin_getDown(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDown(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDown(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDown(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDown(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDown(const ::omero::model::Callback_Node_getDownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDown(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDown(const ::Ice::Context& __ctx, const ::omero::model::Callback_Node_getDownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDown(&__ctx, __del, __cookie);
    }

    ::omero::RTimePtr end_getDown(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RTimePtr getDown(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getDown(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setDown(const ::omero::RTimePtr& theDown)
    {
        setDown(theDown, 0);
    }
    void setDown(const ::omero::RTimePtr& theDown, const ::Ice::Context& __ctx)
    {
        setDown(theDown, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setDown(const ::omero::RTimePtr& theDown, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setDown(theDown, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setDown(const ::omero::RTimePtr& theDown, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setDown(theDown, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setDown(const ::omero::RTimePtr& theDown, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setDown(theDown, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setDown(const ::omero::RTimePtr& theDown, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setDown(theDown, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setDown(const ::omero::RTimePtr& theDown)
    {
        return begin_setDown(theDown, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setDown(const ::omero::RTimePtr& theDown, const ::Ice::Context& __ctx)
    {
        return begin_setDown(theDown, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setDown(const ::omero::RTimePtr& theDown, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDown(theDown, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDown(const ::omero::RTimePtr& theDown, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDown(theDown, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDown(const ::omero::RTimePtr& theDown, const ::omero::model::Callback_Node_setDownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDown(theDown, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDown(const ::omero::RTimePtr& theDown, const ::Ice::Context& __ctx, const ::omero::model::Callback_Node_setDownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDown(theDown, &__ctx, __del, __cookie);
    }

    void end_setDown(const ::Ice::AsyncResultPtr&);
    
private:

    void setDown(const ::omero::RTimePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setDown(const ::omero::RTimePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RIntPtr getScale()
    {
        return getScale(0);
    }
    ::omero::RIntPtr getScale(const ::Ice::Context& __ctx)
    {
        return getScale(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getScale(const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getScale(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getScale(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getScale(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getScale(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getScale(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getScale(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getScale(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getScale(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RIntPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RIntPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::NodePrx __proxy = ::omero::model::NodePrx::uncheckedCast(__result->getProxy());
                ::omero::RIntPtr __ret;
                try
                {
                    __ret = __proxy->end_getScale(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RIntPtr&)> _response;
        };
        return begin_getScale(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getScale()
    {
        return begin_getScale(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getScale(const ::Ice::Context& __ctx)
    {
        return begin_getScale(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getScale(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getScale(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getScale(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getScale(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getScale(const ::omero::model::Callback_Node_getScalePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getScale(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getScale(const ::Ice::Context& __ctx, const ::omero::model::Callback_Node_getScalePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getScale(&__ctx, __del, __cookie);
    }

    ::omero::RIntPtr end_getScale(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RIntPtr getScale(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getScale(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setScale(const ::omero::RIntPtr& theScale)
    {
        setScale(theScale, 0);
    }
    void setScale(const ::omero::RIntPtr& theScale, const ::Ice::Context& __ctx)
    {
        setScale(theScale, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setScale(const ::omero::RIntPtr& theScale, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setScale(theScale, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setScale(const ::omero::RIntPtr& theScale, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setScale(theScale, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setScale(const ::omero::RIntPtr& theScale, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setScale(theScale, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setScale(const ::omero::RIntPtr& theScale, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setScale(theScale, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setScale(const ::omero::RIntPtr& theScale)
    {
        return begin_setScale(theScale, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setScale(const ::omero::RIntPtr& theScale, const ::Ice::Context& __ctx)
    {
        return begin_setScale(theScale, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setScale(const ::omero::RIntPtr& theScale, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setScale(theScale, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setScale(const ::omero::RIntPtr& theScale, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setScale(theScale, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setScale(const ::omero::RIntPtr& theScale, const ::omero::model::Callback_Node_setScalePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setScale(theScale, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setScale(const ::omero::RIntPtr& theScale, const ::Ice::Context& __ctx, const ::omero::model::Callback_Node_setScalePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setScale(theScale, &__ctx, __del, __cookie);
    }

    void end_setScale(const ::Ice::AsyncResultPtr&);
    
private:

    void setScale(const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setScale(const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unloadAnnotationLinks()
    {
        unloadAnnotationLinks(0);
    }
    void unloadAnnotationLinks(const ::Ice::Context& __ctx)
    {
        unloadAnnotationLinks(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_unloadAnnotationLinks(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unloadAnnotationLinks(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_unloadAnnotationLinks(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unloadAnnotationLinks(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unloadAnnotationLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unloadAnnotationLinks(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unloadAnnotationLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unloadAnnotationLinks(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks()
    {
        return begin_unloadAnnotationLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return begin_unloadAnnotationLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::omero::model::Callback_Node_unloadAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_Node_unloadAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unloadAnnotationLinks(&__ctx, __del, __cookie);
    }

    void end_unloadAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    void unloadAnnotationLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unloadAnnotationLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int sizeOfAnnotationLinks()
    {
        return sizeOfAnnotationLinks(0);
    }
    ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return sizeOfAnnotationLinks(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_sizeOfAnnotationLinks(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sizeOfAnnotationLinks(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfAnnotationLinks(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sizeOfAnnotationLinks(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfAnnotationLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sizeOfAnnotationLinks(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sizeOfAnnotationLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sizeOfAnnotationLinks(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_sizeOfAnnotationLinks(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::NodePrx __proxy = ::omero::model::NodePrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_sizeOfAnnotationLinks(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_sizeOfAnnotationLinks(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks()
    {
        return begin_sizeOfAnnotationLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return begin_sizeOfAnnotationLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::omero::model::Callback_Node_sizeOfAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_Node_sizeOfAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sizeOfAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_sizeOfAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sizeOfAnnotationLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::NodeAnnotationLinksSeq copyAnnotationLinks()
    {
        return copyAnnotationLinks(0);
    }
    ::omero::model::NodeAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return copyAnnotationLinks(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_copyAnnotationLinks(const ::IceInternal::Function<void (const ::omero::model::NodeAnnotationLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_copyAnnotationLinks(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_copyAnnotationLinks(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_copyAnnotationLinks(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_copyAnnotationLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::NodeAnnotationLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_copyAnnotationLinks(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_copyAnnotationLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_copyAnnotationLinks(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_copyAnnotationLinks(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::NodeAnnotationLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::NodeAnnotationLinksSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::NodePrx __proxy = ::omero::model::NodePrx::uncheckedCast(__result->getProxy());
                ::omero::model::NodeAnnotationLinksSeq __ret;
                try
                {
                    __ret = __proxy->end_copyAnnotationLinks(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::NodeAnnotationLinksSeq&)> _response;
        };
        return begin_copyAnnotationLinks(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks()
    {
        return begin_copyAnnotationLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return begin_copyAnnotationLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::omero::model::Callback_Node_copyAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_Node_copyAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_copyAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::omero::model::NodeAnnotationLinksSeq end_copyAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::NodeAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_copyAnnotationLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addNodeAnnotationLink(const ::omero::model::NodeAnnotationLinkPtr& target)
    {
        addNodeAnnotationLink(target, 0);
    }
    void addNodeAnnotationLink(const ::omero::model::NodeAnnotationLinkPtr& target, const ::Ice::Context& __ctx)
    {
        addNodeAnnotationLink(target, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addNodeAnnotationLink(const ::omero::model::NodeAnnotationLinkPtr& target, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addNodeAnnotationLink(target, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addNodeAnnotationLink(const ::omero::model::NodeAnnotationLinkPtr& target, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addNodeAnnotationLink(target, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addNodeAnnotationLink(const ::omero::model::NodeAnnotationLinkPtr& target, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addNodeAnnotationLink(target, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addNodeAnnotationLink(const ::omero::model::NodeAnnotationLinkPtr& target, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addNodeAnnotationLink(target, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addNodeAnnotationLink(const ::omero::model::NodeAnnotationLinkPtr& target)
    {
        return begin_addNodeAnnotationLink(target, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addNodeAnnotationLink(const ::omero::model::NodeAnnotationLinkPtr& target, const ::Ice::Context& __ctx)
    {
        return begin_addNodeAnnotationLink(target, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addNodeAnnotationLink(const ::omero::model::NodeAnnotationLinkPtr& target, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addNodeAnnotationLink(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addNodeAnnotationLink(const ::omero::model::NodeAnnotationLinkPtr& target, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addNodeAnnotationLink(target, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addNodeAnnotationLink(const ::omero::model::NodeAnnotationLinkPtr& target, const ::omero::model::Callback_Node_addNodeAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addNodeAnnotationLink(target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addNodeAnnotationLink(const ::omero::model::NodeAnnotationLinkPtr& target, const ::Ice::Context& __ctx, const ::omero::model::Callback_Node_addNodeAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addNodeAnnotationLink(target, &__ctx, __del, __cookie);
    }

    void end_addNodeAnnotationLink(const ::Ice::AsyncResultPtr&);
    
private:

    void addNodeAnnotationLink(const ::omero::model::NodeAnnotationLinkPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addNodeAnnotationLink(const ::omero::model::NodeAnnotationLinkPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addAllNodeAnnotationLinkSet(const ::omero::model::NodeAnnotationLinksSeq& targets)
    {
        addAllNodeAnnotationLinkSet(targets, 0);
    }
    void addAllNodeAnnotationLinkSet(const ::omero::model::NodeAnnotationLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        addAllNodeAnnotationLinkSet(targets, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addAllNodeAnnotationLinkSet(const ::omero::model::NodeAnnotationLinksSeq& targets, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addAllNodeAnnotationLinkSet(targets, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addAllNodeAnnotationLinkSet(const ::omero::model::NodeAnnotationLinksSeq& targets, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addAllNodeAnnotationLinkSet(targets, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addAllNodeAnnotationLinkSet(const ::omero::model::NodeAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addAllNodeAnnotationLinkSet(targets, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addAllNodeAnnotationLinkSet(const ::omero::model::NodeAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addAllNodeAnnotationLinkSet(targets, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addAllNodeAnnotationLinkSet(const ::omero::model::NodeAnnotationLinksSeq& targets)
    {
        return begin_addAllNodeAnnotationLinkSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllNodeAnnotationLinkSet(const ::omero::model::NodeAnnotationLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_addAllNodeAnnotationLinkSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addAllNodeAnnotationLinkSet(const ::omero::model::NodeAnnotationLinksSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllNodeAnnotationLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllNodeAnnotationLinkSet(const ::omero::model::NodeAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllNodeAnnotationLinkSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllNodeAnnotationLinkSet(const ::omero::model::NodeAnnotationLinksSeq& targets, const ::omero::model::Callback_Node_addAllNodeAnnotationLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllNodeAnnotationLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addAllNodeAnnotationLinkSet(const ::omero::model::NodeAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Node_addAllNodeAnnotationLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addAllNodeAnnotationLinkSet(targets, &__ctx, __del, __cookie);
    }

    void end_addAllNodeAnnotationLinkSet(const ::Ice::AsyncResultPtr&);
    
private:

    void addAllNodeAnnotationLinkSet(const ::omero::model::NodeAnnotationLinksSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addAllNodeAnnotationLinkSet(const ::omero::model::NodeAnnotationLinksSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeNodeAnnotationLink(const ::omero::model::NodeAnnotationLinkPtr& theTarget)
    {
        removeNodeAnnotationLink(theTarget, 0);
    }
    void removeNodeAnnotationLink(const ::omero::model::NodeAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx)
    {
        removeNodeAnnotationLink(theTarget, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeNodeAnnotationLink(const ::omero::model::NodeAnnotationLinkPtr& theTarget, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeNodeAnnotationLink(theTarget, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeNodeAnnotationLink(const ::omero::model::NodeAnnotationLinkPtr& theTarget, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeNodeAnnotationLink(theTarget, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeNodeAnnotationLink(const ::omero::model::NodeAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeNodeAnnotationLink(theTarget, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeNodeAnnotationLink(const ::omero::model::NodeAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeNodeAnnotationLink(theTarget, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeNodeAnnotationLink(const ::omero::model::NodeAnnotationLinkPtr& theTarget)
    {
        return begin_removeNodeAnnotationLink(theTarget, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeNodeAnnotationLink(const ::omero::model::NodeAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx)
    {
        return begin_removeNodeAnnotationLink(theTarget, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeNodeAnnotationLink(const ::omero::model::NodeAnnotationLinkPtr& theTarget, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeNodeAnnotationLink(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeNodeAnnotationLink(const ::omero::model::NodeAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeNodeAnnotationLink(theTarget, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeNodeAnnotationLink(const ::omero::model::NodeAnnotationLinkPtr& theTarget, const ::omero::model::Callback_Node_removeNodeAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeNodeAnnotationLink(theTarget, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeNodeAnnotationLink(const ::omero::model::NodeAnnotationLinkPtr& theTarget, const ::Ice::Context& __ctx, const ::omero::model::Callback_Node_removeNodeAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeNodeAnnotationLink(theTarget, &__ctx, __del, __cookie);
    }

    void end_removeNodeAnnotationLink(const ::Ice::AsyncResultPtr&);
    
private:

    void removeNodeAnnotationLink(const ::omero::model::NodeAnnotationLinkPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeNodeAnnotationLink(const ::omero::model::NodeAnnotationLinkPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeAllNodeAnnotationLinkSet(const ::omero::model::NodeAnnotationLinksSeq& targets)
    {
        removeAllNodeAnnotationLinkSet(targets, 0);
    }
    void removeAllNodeAnnotationLinkSet(const ::omero::model::NodeAnnotationLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        removeAllNodeAnnotationLinkSet(targets, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeAllNodeAnnotationLinkSet(const ::omero::model::NodeAnnotationLinksSeq& targets, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeAllNodeAnnotationLinkSet(targets, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeAllNodeAnnotationLinkSet(const ::omero::model::NodeAnnotationLinksSeq& targets, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeAllNodeAnnotationLinkSet(targets, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeAllNodeAnnotationLinkSet(const ::omero::model::NodeAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeAllNodeAnnotationLinkSet(targets, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeAllNodeAnnotationLinkSet(const ::omero::model::NodeAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeAllNodeAnnotationLinkSet(targets, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeAllNodeAnnotationLinkSet(const ::omero::model::NodeAnnotationLinksSeq& targets)
    {
        return begin_removeAllNodeAnnotationLinkSet(targets, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllNodeAnnotationLinkSet(const ::omero::model::NodeAnnotationLinksSeq& targets, const ::Ice::Context& __ctx)
    {
        return begin_removeAllNodeAnnotationLinkSet(targets, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAllNodeAnnotationLinkSet(const ::omero::model::NodeAnnotationLinksSeq& targets, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllNodeAnnotationLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllNodeAnnotationLinkSet(const ::omero::model::NodeAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllNodeAnnotationLinkSet(targets, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllNodeAnnotationLinkSet(const ::omero::model::NodeAnnotationLinksSeq& targets, const ::omero::model::Callback_Node_removeAllNodeAnnotationLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllNodeAnnotationLinkSet(targets, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAllNodeAnnotationLinkSet(const ::omero::model::NodeAnnotationLinksSeq& targets, const ::Ice::Context& __ctx, const ::omero::model::Callback_Node_removeAllNodeAnnotationLinkSetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAllNodeAnnotationLinkSet(targets, &__ctx, __del, __cookie);
    }

    void end_removeAllNodeAnnotationLinkSet(const ::Ice::AsyncResultPtr&);
    
private:

    void removeAllNodeAnnotationLinkSet(const ::omero::model::NodeAnnotationLinksSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeAllNodeAnnotationLinkSet(const ::omero::model::NodeAnnotationLinksSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void clearAnnotationLinks()
    {
        clearAnnotationLinks(0);
    }
    void clearAnnotationLinks(const ::Ice::Context& __ctx)
    {
        clearAnnotationLinks(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_clearAnnotationLinks(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_clearAnnotationLinks(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_clearAnnotationLinks(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_clearAnnotationLinks(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_clearAnnotationLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_clearAnnotationLinks(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_clearAnnotationLinks(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_clearAnnotationLinks(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks()
    {
        return begin_clearAnnotationLinks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::Context& __ctx)
    {
        return begin_clearAnnotationLinks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearAnnotationLinks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::omero::model::Callback_Node_clearAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearAnnotationLinks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::Context& __ctx, const ::omero::model::Callback_Node_clearAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_clearAnnotationLinks(&__ctx, __del, __cookie);
    }

    void end_clearAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    void clearAnnotationLinks(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_clearAnnotationLinks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reloadAnnotationLinks(const ::omero::model::NodePtr& toCopy)
    {
        reloadAnnotationLinks(toCopy, 0);
    }
    void reloadAnnotationLinks(const ::omero::model::NodePtr& toCopy, const ::Ice::Context& __ctx)
    {
        reloadAnnotationLinks(toCopy, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_reloadAnnotationLinks(const ::omero::model::NodePtr& toCopy, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reloadAnnotationLinks(toCopy, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_reloadAnnotationLinks(const ::omero::model::NodePtr& toCopy, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reloadAnnotationLinks(toCopy, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reloadAnnotationLinks(const ::omero::model::NodePtr& toCopy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reloadAnnotationLinks(toCopy, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reloadAnnotationLinks(const ::omero::model::NodePtr& toCopy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reloadAnnotationLinks(toCopy, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::NodePtr& toCopy)
    {
        return begin_reloadAnnotationLinks(toCopy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::NodePtr& toCopy, const ::Ice::Context& __ctx)
    {
        return begin_reloadAnnotationLinks(toCopy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::NodePtr& toCopy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadAnnotationLinks(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::NodePtr& toCopy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadAnnotationLinks(toCopy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::NodePtr& toCopy, const ::omero::model::Callback_Node_reloadAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadAnnotationLinks(toCopy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::NodePtr& toCopy, const ::Ice::Context& __ctx, const ::omero::model::Callback_Node_reloadAnnotationLinksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloadAnnotationLinks(toCopy, &__ctx, __del, __cookie);
    }

    void end_reloadAnnotationLinks(const ::Ice::AsyncResultPtr&);
    
private:

    void reloadAnnotationLinks(const ::omero::model::NodePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reloadAnnotationLinks(const ::omero::model::NodePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::sys::CountMap getAnnotationLinksCountPerOwner()
    {
        return getAnnotationLinksCountPerOwner(0);
    }
    ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx)
    {
        return getAnnotationLinksCountPerOwner(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getAnnotationLinksCountPerOwner(const ::IceInternal::Function<void (const ::omero::sys::CountMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAnnotationLinksCountPerOwner(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAnnotationLinksCountPerOwner(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAnnotationLinksCountPerOwner(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::sys::CountMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAnnotationLinksCountPerOwner(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAnnotationLinksCountPerOwner(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getAnnotationLinksCountPerOwner(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::sys::CountMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::sys::CountMap&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::NodePrx __proxy = ::omero::model::NodePrx::uncheckedCast(__result->getProxy());
                ::omero::sys::CountMap __ret;
                try
                {
                    __ret = __proxy->end_getAnnotationLinksCountPerOwner(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::sys::CountMap&)> _response;
        };
        return begin_getAnnotationLinksCountPerOwner(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner()
    {
        return begin_getAnnotationLinksCountPerOwner(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx)
    {
        return begin_getAnnotationLinksCountPerOwner(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAnnotationLinksCountPerOwner(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAnnotationLinksCountPerOwner(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::omero::model::Callback_Node_getAnnotationLinksCountPerOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAnnotationLinksCountPerOwner(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::Context& __ctx, const ::omero::model::Callback_Node_getAnnotationLinksCountPerOwnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAnnotationLinksCountPerOwner(&__ctx, __del, __cookie);
    }

    ::omero::sys::CountMap end_getAnnotationLinksCountPerOwner(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getAnnotationLinksCountPerOwner(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::NodeAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr& addition)
    {
        return linkAnnotation(addition, 0);
    }
    ::omero::model::NodeAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx)
    {
        return linkAnnotation(addition, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::IceInternal::Function<void (const ::omero::model::NodeAnnotationLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_linkAnnotation(addition, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_linkAnnotation(addition, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::NodeAnnotationLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_linkAnnotation(addition, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_linkAnnotation(addition, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::NodeAnnotationLinkPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::NodeAnnotationLinkPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::NodePrx __proxy = ::omero::model::NodePrx::uncheckedCast(__result->getProxy());
                ::omero::model::NodeAnnotationLinkPtr __ret;
                try
                {
                    __ret = __proxy->end_linkAnnotation(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::NodeAnnotationLinkPtr&)> _response;
        };
        return begin_linkAnnotation(addition, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition)
    {
        return begin_linkAnnotation(addition, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx)
    {
        return begin_linkAnnotation(addition, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkAnnotation(addition, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkAnnotation(addition, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::omero::model::Callback_Node_linkAnnotationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkAnnotation(addition, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr& addition, const ::Ice::Context& __ctx, const ::omero::model::Callback_Node_linkAnnotationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkAnnotation(addition, &__ctx, __del, __cookie);
    }

    ::omero::model::NodeAnnotationLinkPtr end_linkAnnotation(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::NodeAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addNodeAnnotationLinkToBoth(const ::omero::model::NodeAnnotationLinkPtr& link, bool bothSides)
    {
        addNodeAnnotationLinkToBoth(link, bothSides, 0);
    }
    void addNodeAnnotationLinkToBoth(const ::omero::model::NodeAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        addNodeAnnotationLinkToBoth(link, bothSides, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addNodeAnnotationLinkToBoth(const ::omero::model::NodeAnnotationLinkPtr& link, bool bothSides, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addNodeAnnotationLinkToBoth(link, bothSides, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addNodeAnnotationLinkToBoth(const ::omero::model::NodeAnnotationLinkPtr& link, bool bothSides, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addNodeAnnotationLinkToBoth(link, bothSides, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addNodeAnnotationLinkToBoth(const ::omero::model::NodeAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addNodeAnnotationLinkToBoth(link, bothSides, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addNodeAnnotationLinkToBoth(const ::omero::model::NodeAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addNodeAnnotationLinkToBoth(link, bothSides, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addNodeAnnotationLinkToBoth(const ::omero::model::NodeAnnotationLinkPtr& link, bool bothSides)
    {
        return begin_addNodeAnnotationLinkToBoth(link, bothSides, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addNodeAnnotationLinkToBoth(const ::omero::model::NodeAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        return begin_addNodeAnnotationLinkToBoth(link, bothSides, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addNodeAnnotationLinkToBoth(const ::omero::model::NodeAnnotationLinkPtr& link, bool bothSides, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addNodeAnnotationLinkToBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addNodeAnnotationLinkToBoth(const ::omero::model::NodeAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addNodeAnnotationLinkToBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addNodeAnnotationLinkToBoth(const ::omero::model::NodeAnnotationLinkPtr& link, bool bothSides, const ::omero::model::Callback_Node_addNodeAnnotationLinkToBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addNodeAnnotationLinkToBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addNodeAnnotationLinkToBoth(const ::omero::model::NodeAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::omero::model::Callback_Node_addNodeAnnotationLinkToBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addNodeAnnotationLinkToBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    void end_addNodeAnnotationLinkToBoth(const ::Ice::AsyncResultPtr&);
    
private:

    void addNodeAnnotationLinkToBoth(const ::omero::model::NodeAnnotationLinkPtr&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addNodeAnnotationLinkToBoth(const ::omero::model::NodeAnnotationLinkPtr&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::NodeAnnotationLinksSeq findNodeAnnotationLink(const ::omero::model::AnnotationPtr& removal)
    {
        return findNodeAnnotationLink(removal, 0);
    }
    ::omero::model::NodeAnnotationLinksSeq findNodeAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx)
    {
        return findNodeAnnotationLink(removal, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_findNodeAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::IceInternal::Function<void (const ::omero::model::NodeAnnotationLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_findNodeAnnotationLink(removal, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_findNodeAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_findNodeAnnotationLink(removal, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_findNodeAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::NodeAnnotationLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_findNodeAnnotationLink(removal, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_findNodeAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_findNodeAnnotationLink(removal, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_findNodeAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::NodeAnnotationLinksSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::NodeAnnotationLinksSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::NodePrx __proxy = ::omero::model::NodePrx::uncheckedCast(__result->getProxy());
                ::omero::model::NodeAnnotationLinksSeq __ret;
                try
                {
                    __ret = __proxy->end_findNodeAnnotationLink(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::NodeAnnotationLinksSeq&)> _response;
        };
        return begin_findNodeAnnotationLink(removal, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_findNodeAnnotationLink(const ::omero::model::AnnotationPtr& removal)
    {
        return begin_findNodeAnnotationLink(removal, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findNodeAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx)
    {
        return begin_findNodeAnnotationLink(removal, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findNodeAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findNodeAnnotationLink(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findNodeAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findNodeAnnotationLink(removal, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findNodeAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::omero::model::Callback_Node_findNodeAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findNodeAnnotationLink(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findNodeAnnotationLink(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::omero::model::Callback_Node_findNodeAnnotationLinkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findNodeAnnotationLink(removal, &__ctx, __del, __cookie);
    }

    ::omero::model::NodeAnnotationLinksSeq end_findNodeAnnotationLink(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::NodeAnnotationLinksSeq findNodeAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_findNodeAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unlinkAnnotation(const ::omero::model::AnnotationPtr& removal)
    {
        unlinkAnnotation(removal, 0);
    }
    void unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx)
    {
        unlinkAnnotation(removal, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unlinkAnnotation(removal, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unlinkAnnotation(removal, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_unlinkAnnotation(removal, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unlinkAnnotation(removal, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal)
    {
        return begin_unlinkAnnotation(removal, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx)
    {
        return begin_unlinkAnnotation(removal, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkAnnotation(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkAnnotation(removal, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::omero::model::Callback_Node_unlinkAnnotationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkAnnotation(removal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr& removal, const ::Ice::Context& __ctx, const ::omero::model::Callback_Node_unlinkAnnotationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unlinkAnnotation(removal, &__ctx, __del, __cookie);
    }

    void end_unlinkAnnotation(const ::Ice::AsyncResultPtr&);
    
private:

    void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeNodeAnnotationLinkFromBoth(const ::omero::model::NodeAnnotationLinkPtr& link, bool bothSides)
    {
        removeNodeAnnotationLinkFromBoth(link, bothSides, 0);
    }
    void removeNodeAnnotationLinkFromBoth(const ::omero::model::NodeAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        removeNodeAnnotationLinkFromBoth(link, bothSides, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeNodeAnnotationLinkFromBoth(const ::omero::model::NodeAnnotationLinkPtr& link, bool bothSides, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeNodeAnnotationLinkFromBoth(link, bothSides, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeNodeAnnotationLinkFromBoth(const ::omero::model::NodeAnnotationLinkPtr& link, bool bothSides, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeNodeAnnotationLinkFromBoth(link, bothSides, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeNodeAnnotationLinkFromBoth(const ::omero::model::NodeAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeNodeAnnotationLinkFromBoth(link, bothSides, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeNodeAnnotationLinkFromBoth(const ::omero::model::NodeAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeNodeAnnotationLinkFromBoth(link, bothSides, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeNodeAnnotationLinkFromBoth(const ::omero::model::NodeAnnotationLinkPtr& link, bool bothSides)
    {
        return begin_removeNodeAnnotationLinkFromBoth(link, bothSides, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeNodeAnnotationLinkFromBoth(const ::omero::model::NodeAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx)
    {
        return begin_removeNodeAnnotationLinkFromBoth(link, bothSides, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeNodeAnnotationLinkFromBoth(const ::omero::model::NodeAnnotationLinkPtr& link, bool bothSides, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeNodeAnnotationLinkFromBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeNodeAnnotationLinkFromBoth(const ::omero::model::NodeAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeNodeAnnotationLinkFromBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeNodeAnnotationLinkFromBoth(const ::omero::model::NodeAnnotationLinkPtr& link, bool bothSides, const ::omero::model::Callback_Node_removeNodeAnnotationLinkFromBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeNodeAnnotationLinkFromBoth(link, bothSides, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeNodeAnnotationLinkFromBoth(const ::omero::model::NodeAnnotationLinkPtr& link, bool bothSides, const ::Ice::Context& __ctx, const ::omero::model::Callback_Node_removeNodeAnnotationLinkFromBothPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeNodeAnnotationLinkFromBoth(link, bothSides, &__ctx, __del, __cookie);
    }

    void end_removeNodeAnnotationLinkFromBoth(const ::Ice::AsyncResultPtr&);
    
private:

    void removeNodeAnnotationLinkFromBoth(const ::omero::model::NodeAnnotationLinkPtr&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeNodeAnnotationLinkFromBoth(const ::omero::model::NodeAnnotationLinkPtr&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::NodeLinkedAnnotationSeq linkedAnnotationList()
    {
        return linkedAnnotationList(0);
    }
    ::omero::model::NodeLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context& __ctx)
    {
        return linkedAnnotationList(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_linkedAnnotationList(const ::IceInternal::Function<void (const ::omero::model::NodeLinkedAnnotationSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_linkedAnnotationList(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_linkedAnnotationList(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_linkedAnnotationList(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_linkedAnnotationList(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::NodeLinkedAnnotationSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_linkedAnnotationList(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_linkedAnnotationList(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_linkedAnnotationList(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_linkedAnnotationList(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::NodeLinkedAnnotationSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::NodeLinkedAnnotationSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::NodePrx __proxy = ::omero::model::NodePrx::uncheckedCast(__result->getProxy());
                ::omero::model::NodeLinkedAnnotationSeq __ret;
                try
                {
                    __ret = __proxy->end_linkedAnnotationList(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::NodeLinkedAnnotationSeq&)> _response;
        };
        return begin_linkedAnnotationList(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_linkedAnnotationList()
    {
        return begin_linkedAnnotationList(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::Context& __ctx)
    {
        return begin_linkedAnnotationList(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedAnnotationList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedAnnotationList(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::omero::model::Callback_Node_linkedAnnotationListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedAnnotationList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::Context& __ctx, const ::omero::model::Callback_Node_linkedAnnotationListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_linkedAnnotationList(&__ctx, __del, __cookie);
    }

    ::omero::model::NodeLinkedAnnotationSeq end_linkedAnnotationList(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::NodeLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_linkedAnnotationList(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Node> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Node*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Node> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Node*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Node> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Node*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Node> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Node*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Node> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Node*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Node> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Node*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Node> ice_secure(bool __secure) const
    {
        return dynamic_cast<Node*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Node> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Node*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Node> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Node*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Node> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Node*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Node> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Node*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Node> ice_twoway() const
    {
        return dynamic_cast<Node*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Node> ice_oneway() const
    {
        return dynamic_cast<Node*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Node> ice_batchOneway() const
    {
        return dynamic_cast<Node*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Node> ice_datagram() const
    {
        return dynamic_cast<Node*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Node> ice_batchDatagram() const
    {
        return dynamic_cast<Node*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Node> ice_compress(bool __compress) const
    {
        return dynamic_cast<Node*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Node> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Node*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Node> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Node*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Node> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Node*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

namespace IceDelegate
{

namespace omero
{

namespace model
{

class Node : virtual public ::IceDelegate::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void unloadSessions(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int sizeOfSessions(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::NodeSessionsSeq copySessions(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addSession(const ::omero::model::SessionPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addAllSessionSet(const ::omero::model::NodeSessionsSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeSession(const ::omero::model::SessionPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeAllSessionSet(const ::omero::model::NodeSessionsSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void clearSessions(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void reloadSessions(const ::omero::model::NodePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RStringPtr getUuid(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setUuid(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RStringPtr getConn(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setConn(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RTimePtr getUp(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setUp(const ::omero::RTimePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RTimePtr getDown(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setDown(const ::omero::RTimePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RIntPtr getScale(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setScale(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void unloadAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::NodeAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addNodeAnnotationLink(const ::omero::model::NodeAnnotationLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addAllNodeAnnotationLinkSet(const ::omero::model::NodeAnnotationLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeNodeAnnotationLink(const ::omero::model::NodeAnnotationLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeAllNodeAnnotationLinkSet(const ::omero::model::NodeAnnotationLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void clearAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void reloadAnnotationLinks(const ::omero::model::NodePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::NodeAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addNodeAnnotationLinkToBoth(const ::omero::model::NodeAnnotationLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::NodeAnnotationLinksSeq findNodeAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeNodeAnnotationLinkFromBoth(const ::omero::model::NodeAnnotationLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::NodeLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

}

namespace IceDelegateM
{

namespace omero
{

namespace model
{

class Node : virtual public ::IceDelegate::omero::model::Node,
             virtual public ::IceDelegateM::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unloadSessions(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int sizeOfSessions(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::NodeSessionsSeq copySessions(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addSession(const ::omero::model::SessionPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addAllSessionSet(const ::omero::model::NodeSessionsSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeSession(const ::omero::model::SessionPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeAllSessionSet(const ::omero::model::NodeSessionsSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void clearSessions(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void reloadSessions(const ::omero::model::NodePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getUuid(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setUuid(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getConn(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setConn(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RTimePtr getUp(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setUp(const ::omero::RTimePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RTimePtr getDown(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setDown(const ::omero::RTimePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RIntPtr getScale(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setScale(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unloadAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::NodeAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addNodeAnnotationLink(const ::omero::model::NodeAnnotationLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addAllNodeAnnotationLinkSet(const ::omero::model::NodeAnnotationLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeNodeAnnotationLink(const ::omero::model::NodeAnnotationLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeAllNodeAnnotationLinkSet(const ::omero::model::NodeAnnotationLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void clearAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void reloadAnnotationLinks(const ::omero::model::NodePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::NodeAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addNodeAnnotationLinkToBoth(const ::omero::model::NodeAnnotationLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::NodeAnnotationLinksSeq findNodeAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeNodeAnnotationLinkFromBoth(const ::omero::model::NodeAnnotationLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::NodeLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace IceDelegateD
{

namespace omero
{

namespace model
{

class Node : virtual public ::IceDelegate::omero::model::Node,
             virtual public ::IceDelegateD::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unloadSessions(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int sizeOfSessions(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::NodeSessionsSeq copySessions(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addSession(const ::omero::model::SessionPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addAllSessionSet(const ::omero::model::NodeSessionsSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeSession(const ::omero::model::SessionPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeAllSessionSet(const ::omero::model::NodeSessionsSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void clearSessions(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void reloadSessions(const ::omero::model::NodePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getUuid(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setUuid(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RStringPtr getConn(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setConn(const ::omero::RStringPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RTimePtr getUp(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setUp(const ::omero::RTimePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RTimePtr getDown(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setDown(const ::omero::RTimePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RIntPtr getScale(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setScale(const ::omero::RIntPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unloadAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::NodeAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addNodeAnnotationLink(const ::omero::model::NodeAnnotationLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addAllNodeAnnotationLinkSet(const ::omero::model::NodeAnnotationLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeNodeAnnotationLink(const ::omero::model::NodeAnnotationLinkPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeAllNodeAnnotationLinkSet(const ::omero::model::NodeAnnotationLinksSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void clearAnnotationLinks(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void reloadAnnotationLinks(const ::omero::model::NodePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::NodeAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addNodeAnnotationLinkToBoth(const ::omero::model::NodeAnnotationLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::NodeAnnotationLinksSeq findNodeAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeNodeAnnotationLinkFromBoth(const ::omero::model::NodeAnnotationLinkPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::NodeLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace omero
{

namespace model
{

class Node : public ::omero::model::IObject
{
public:

    typedef NodePrx ProxyType;
    typedef NodePtr PointerType;

    Node()
    {
    }

    Node(const ::omero::RLongPtr& __ice_id, const ::omero::model::DetailsPtr& __ice_details, bool __ice_loaded, const ::omero::RIntPtr& __ice_version, const ::omero::model::NodeSessionsSeq& __ice_sessionsSeq, bool __ice_sessionsLoaded, const ::omero::RStringPtr& __ice_uuid, const ::omero::RStringPtr& __ice_conn, const ::omero::RTimePtr& __ice_up, const ::omero::RTimePtr& __ice_down, const ::omero::RIntPtr& __ice_scale, const ::omero::model::NodeAnnotationLinksSeq& __ice_annotationLinksSeq, bool __ice_annotationLinksLoaded, const ::omero::sys::CountMap& __ice_annotationLinksCountPerOwner) :
        ::omero::model::IObject(__ice_id, __ice_details, __ice_loaded)
        ,
        version(__ice_version),
        sessionsSeq(__ice_sessionsSeq),
        sessionsLoaded(__ice_sessionsLoaded),
        uuid(__ice_uuid),
        conn(__ice_conn),
        up(__ice_up),
        down(__ice_down),
        scale(__ice_scale),
        annotationLinksSeq(__ice_annotationLinksSeq),
        annotationLinksLoaded(__ice_annotationLinksLoaded),
        annotationLinksCountPerOwner(__ice_annotationLinksCountPerOwner)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    virtual ::omero::RIntPtr getVersion(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unloadSessions(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unloadSessions(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int sizeOfSessions(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sizeOfSessions(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::NodeSessionsSeq copySessions(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___copySessions(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addSession(const ::omero::model::SessionPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addSession(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addAllSessionSet(const ::omero::model::NodeSessionsSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addAllSessionSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeSession(const ::omero::model::SessionPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeSession(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeAllSessionSet(const ::omero::model::NodeSessionsSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeAllSessionSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void clearSessions(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___clearSessions(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reloadSessions(const ::omero::model::NodePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reloadSessions(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getUuid(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getUuid(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setUuid(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setUuid(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getConn(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getConn(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setConn(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setConn(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RTimePtr getUp(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getUp(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setUp(const ::omero::RTimePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setUp(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RTimePtr getDown(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getDown(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setDown(const ::omero::RTimePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setDown(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RIntPtr getScale(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getScale(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setScale(const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setScale(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unloadAnnotationLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unloadAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int sizeOfAnnotationLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sizeOfAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::NodeAnnotationLinksSeq copyAnnotationLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___copyAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addNodeAnnotationLink(const ::omero::model::NodeAnnotationLinkPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addNodeAnnotationLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addAllNodeAnnotationLinkSet(const ::omero::model::NodeAnnotationLinksSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addAllNodeAnnotationLinkSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeNodeAnnotationLink(const ::omero::model::NodeAnnotationLinkPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeNodeAnnotationLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeAllNodeAnnotationLinkSet(const ::omero::model::NodeAnnotationLinksSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeAllNodeAnnotationLinkSet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void clearAnnotationLinks(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___clearAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reloadAnnotationLinks(const ::omero::model::NodePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reloadAnnotationLinks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::sys::CountMap getAnnotationLinksCountPerOwner(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getAnnotationLinksCountPerOwner(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::NodeAnnotationLinkPtr linkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___linkAnnotation(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addNodeAnnotationLinkToBoth(const ::omero::model::NodeAnnotationLinkPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addNodeAnnotationLinkToBoth(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::NodeAnnotationLinksSeq findNodeAnnotationLink(const ::omero::model::AnnotationPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___findNodeAnnotationLink(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unlinkAnnotation(const ::omero::model::AnnotationPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unlinkAnnotation(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeNodeAnnotationLinkFromBoth(const ::omero::model::NodeAnnotationLinkPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeNodeAnnotationLinkFromBoth(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::NodeLinkedAnnotationSeq linkedAnnotationList(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___linkedAnnotationList(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::model::IObject::__writeImpl;
    using ::omero::model::IObject::__readImpl;
    #endif

    ::omero::RIntPtr version;

    ::omero::model::NodeSessionsSeq sessionsSeq;

    bool sessionsLoaded;

    ::omero::RStringPtr uuid;

    ::omero::RStringPtr conn;

    ::omero::RTimePtr up;

    ::omero::RTimePtr down;

    ::omero::RIntPtr scale;

    ::omero::model::NodeAnnotationLinksSeq annotationLinksSeq;

    bool annotationLinksLoaded;

    ::omero::sys::CountMap annotationLinksCountPerOwner;
};

inline bool operator==(const Node& l, const Node& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Node& l, const Node& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

}

namespace omero
{

namespace model
{

template<class T>
class CallbackNC_Node_getVersion : public Callback_Node_getVersion_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RIntPtr&);

    CallbackNC_Node_getVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::NodePrx __proxy = ::omero::model::NodePrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Node_getVersionPtr
newCallback_Node_getVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_getVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_getVersionPtr
newCallback_Node_getVersion(T* instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_getVersion<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Node_getVersion : public Callback_Node_getVersion_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RIntPtr&, const CT&);

    Callback_Node_getVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::NodePrx __proxy = ::omero::model::NodePrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Node_getVersionPtr
newCallback_Node_getVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_getVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_getVersionPtr
newCallback_Node_getVersion(T* instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_getVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Node_setVersion : public Callback_Node_setVersion_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Node_setVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Node_setVersionPtr
newCallback_Node_setVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_setVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_setVersionPtr
newCallback_Node_setVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_setVersion<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Node_setVersionPtr
newCallback_Node_setVersion(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_setVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_setVersionPtr
newCallback_Node_setVersion(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_setVersion<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Node_setVersion : public Callback_Node_setVersion_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Node_setVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Node_setVersionPtr
newCallback_Node_setVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_setVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_setVersionPtr
newCallback_Node_setVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_setVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Node_setVersionPtr
newCallback_Node_setVersion(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_setVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_setVersionPtr
newCallback_Node_setVersion(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_setVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Node_unloadSessions : public Callback_Node_unloadSessions_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Node_unloadSessions(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Node_unloadSessionsPtr
newCallback_Node_unloadSessions(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_unloadSessions<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_unloadSessionsPtr
newCallback_Node_unloadSessions(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_unloadSessions<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Node_unloadSessionsPtr
newCallback_Node_unloadSessions(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_unloadSessions<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_unloadSessionsPtr
newCallback_Node_unloadSessions(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_unloadSessions<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Node_unloadSessions : public Callback_Node_unloadSessions_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Node_unloadSessions(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Node_unloadSessionsPtr
newCallback_Node_unloadSessions(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_unloadSessions<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_unloadSessionsPtr
newCallback_Node_unloadSessions(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_unloadSessions<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Node_unloadSessionsPtr
newCallback_Node_unloadSessions(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_unloadSessions<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_unloadSessionsPtr
newCallback_Node_unloadSessions(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_unloadSessions<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Node_sizeOfSessions : public Callback_Node_sizeOfSessions_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Node_sizeOfSessions(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::NodePrx __proxy = ::omero::model::NodePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfSessions(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Node_sizeOfSessionsPtr
newCallback_Node_sizeOfSessions(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_sizeOfSessions<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_sizeOfSessionsPtr
newCallback_Node_sizeOfSessions(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_sizeOfSessions<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Node_sizeOfSessions : public Callback_Node_sizeOfSessions_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Node_sizeOfSessions(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::NodePrx __proxy = ::omero::model::NodePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfSessions(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Node_sizeOfSessionsPtr
newCallback_Node_sizeOfSessions(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_sizeOfSessions<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_sizeOfSessionsPtr
newCallback_Node_sizeOfSessions(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_sizeOfSessions<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Node_copySessions : public Callback_Node_copySessions_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::NodeSessionsSeq&);

    CallbackNC_Node_copySessions(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::NodePrx __proxy = ::omero::model::NodePrx::uncheckedCast(__result->getProxy());
        ::omero::model::NodeSessionsSeq __ret;
        try
        {
            __ret = __proxy->end_copySessions(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Node_copySessionsPtr
newCallback_Node_copySessions(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::NodeSessionsSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_copySessions<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_copySessionsPtr
newCallback_Node_copySessions(T* instance, void (T::*cb)(const ::omero::model::NodeSessionsSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_copySessions<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Node_copySessions : public Callback_Node_copySessions_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::NodeSessionsSeq&, const CT&);

    Callback_Node_copySessions(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::NodePrx __proxy = ::omero::model::NodePrx::uncheckedCast(__result->getProxy());
        ::omero::model::NodeSessionsSeq __ret;
        try
        {
            __ret = __proxy->end_copySessions(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Node_copySessionsPtr
newCallback_Node_copySessions(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::NodeSessionsSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_copySessions<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_copySessionsPtr
newCallback_Node_copySessions(T* instance, void (T::*cb)(const ::omero::model::NodeSessionsSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_copySessions<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Node_addSession : public Callback_Node_addSession_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Node_addSession(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Node_addSessionPtr
newCallback_Node_addSession(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_addSession<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_addSessionPtr
newCallback_Node_addSession(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_addSession<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Node_addSessionPtr
newCallback_Node_addSession(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_addSession<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_addSessionPtr
newCallback_Node_addSession(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_addSession<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Node_addSession : public Callback_Node_addSession_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Node_addSession(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Node_addSessionPtr
newCallback_Node_addSession(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_addSession<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_addSessionPtr
newCallback_Node_addSession(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_addSession<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Node_addSessionPtr
newCallback_Node_addSession(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_addSession<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_addSessionPtr
newCallback_Node_addSession(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_addSession<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Node_addAllSessionSet : public Callback_Node_addAllSessionSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Node_addAllSessionSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Node_addAllSessionSetPtr
newCallback_Node_addAllSessionSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_addAllSessionSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_addAllSessionSetPtr
newCallback_Node_addAllSessionSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_addAllSessionSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Node_addAllSessionSetPtr
newCallback_Node_addAllSessionSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_addAllSessionSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_addAllSessionSetPtr
newCallback_Node_addAllSessionSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_addAllSessionSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Node_addAllSessionSet : public Callback_Node_addAllSessionSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Node_addAllSessionSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Node_addAllSessionSetPtr
newCallback_Node_addAllSessionSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_addAllSessionSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_addAllSessionSetPtr
newCallback_Node_addAllSessionSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_addAllSessionSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Node_addAllSessionSetPtr
newCallback_Node_addAllSessionSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_addAllSessionSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_addAllSessionSetPtr
newCallback_Node_addAllSessionSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_addAllSessionSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Node_removeSession : public Callback_Node_removeSession_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Node_removeSession(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Node_removeSessionPtr
newCallback_Node_removeSession(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_removeSession<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_removeSessionPtr
newCallback_Node_removeSession(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_removeSession<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Node_removeSessionPtr
newCallback_Node_removeSession(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_removeSession<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_removeSessionPtr
newCallback_Node_removeSession(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_removeSession<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Node_removeSession : public Callback_Node_removeSession_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Node_removeSession(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Node_removeSessionPtr
newCallback_Node_removeSession(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_removeSession<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_removeSessionPtr
newCallback_Node_removeSession(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_removeSession<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Node_removeSessionPtr
newCallback_Node_removeSession(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_removeSession<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_removeSessionPtr
newCallback_Node_removeSession(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_removeSession<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Node_removeAllSessionSet : public Callback_Node_removeAllSessionSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Node_removeAllSessionSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Node_removeAllSessionSetPtr
newCallback_Node_removeAllSessionSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_removeAllSessionSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_removeAllSessionSetPtr
newCallback_Node_removeAllSessionSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_removeAllSessionSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Node_removeAllSessionSetPtr
newCallback_Node_removeAllSessionSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_removeAllSessionSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_removeAllSessionSetPtr
newCallback_Node_removeAllSessionSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_removeAllSessionSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Node_removeAllSessionSet : public Callback_Node_removeAllSessionSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Node_removeAllSessionSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Node_removeAllSessionSetPtr
newCallback_Node_removeAllSessionSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_removeAllSessionSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_removeAllSessionSetPtr
newCallback_Node_removeAllSessionSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_removeAllSessionSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Node_removeAllSessionSetPtr
newCallback_Node_removeAllSessionSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_removeAllSessionSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_removeAllSessionSetPtr
newCallback_Node_removeAllSessionSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_removeAllSessionSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Node_clearSessions : public Callback_Node_clearSessions_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Node_clearSessions(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Node_clearSessionsPtr
newCallback_Node_clearSessions(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_clearSessions<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_clearSessionsPtr
newCallback_Node_clearSessions(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_clearSessions<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Node_clearSessionsPtr
newCallback_Node_clearSessions(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_clearSessions<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_clearSessionsPtr
newCallback_Node_clearSessions(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_clearSessions<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Node_clearSessions : public Callback_Node_clearSessions_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Node_clearSessions(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Node_clearSessionsPtr
newCallback_Node_clearSessions(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_clearSessions<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_clearSessionsPtr
newCallback_Node_clearSessions(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_clearSessions<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Node_clearSessionsPtr
newCallback_Node_clearSessions(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_clearSessions<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_clearSessionsPtr
newCallback_Node_clearSessions(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_clearSessions<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Node_reloadSessions : public Callback_Node_reloadSessions_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Node_reloadSessions(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Node_reloadSessionsPtr
newCallback_Node_reloadSessions(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_reloadSessions<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_reloadSessionsPtr
newCallback_Node_reloadSessions(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_reloadSessions<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Node_reloadSessionsPtr
newCallback_Node_reloadSessions(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_reloadSessions<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_reloadSessionsPtr
newCallback_Node_reloadSessions(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_reloadSessions<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Node_reloadSessions : public Callback_Node_reloadSessions_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Node_reloadSessions(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Node_reloadSessionsPtr
newCallback_Node_reloadSessions(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_reloadSessions<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_reloadSessionsPtr
newCallback_Node_reloadSessions(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_reloadSessions<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Node_reloadSessionsPtr
newCallback_Node_reloadSessions(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_reloadSessions<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_reloadSessionsPtr
newCallback_Node_reloadSessions(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_reloadSessions<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Node_getUuid : public Callback_Node_getUuid_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_Node_getUuid(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::NodePrx __proxy = ::omero::model::NodePrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getUuid(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Node_getUuidPtr
newCallback_Node_getUuid(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_getUuid<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_getUuidPtr
newCallback_Node_getUuid(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_getUuid<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Node_getUuid : public Callback_Node_getUuid_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_Node_getUuid(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::NodePrx __proxy = ::omero::model::NodePrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getUuid(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Node_getUuidPtr
newCallback_Node_getUuid(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_getUuid<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_getUuidPtr
newCallback_Node_getUuid(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_getUuid<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Node_setUuid : public Callback_Node_setUuid_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Node_setUuid(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Node_setUuidPtr
newCallback_Node_setUuid(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_setUuid<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_setUuidPtr
newCallback_Node_setUuid(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_setUuid<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Node_setUuidPtr
newCallback_Node_setUuid(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_setUuid<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_setUuidPtr
newCallback_Node_setUuid(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_setUuid<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Node_setUuid : public Callback_Node_setUuid_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Node_setUuid(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Node_setUuidPtr
newCallback_Node_setUuid(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_setUuid<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_setUuidPtr
newCallback_Node_setUuid(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_setUuid<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Node_setUuidPtr
newCallback_Node_setUuid(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_setUuid<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_setUuidPtr
newCallback_Node_setUuid(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_setUuid<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Node_getConn : public Callback_Node_getConn_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_Node_getConn(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::NodePrx __proxy = ::omero::model::NodePrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getConn(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Node_getConnPtr
newCallback_Node_getConn(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_getConn<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_getConnPtr
newCallback_Node_getConn(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_getConn<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Node_getConn : public Callback_Node_getConn_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_Node_getConn(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::NodePrx __proxy = ::omero::model::NodePrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getConn(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Node_getConnPtr
newCallback_Node_getConn(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_getConn<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_getConnPtr
newCallback_Node_getConn(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_getConn<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Node_setConn : public Callback_Node_setConn_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Node_setConn(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Node_setConnPtr
newCallback_Node_setConn(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_setConn<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_setConnPtr
newCallback_Node_setConn(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_setConn<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Node_setConnPtr
newCallback_Node_setConn(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_setConn<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_setConnPtr
newCallback_Node_setConn(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_setConn<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Node_setConn : public Callback_Node_setConn_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Node_setConn(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Node_setConnPtr
newCallback_Node_setConn(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_setConn<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_setConnPtr
newCallback_Node_setConn(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_setConn<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Node_setConnPtr
newCallback_Node_setConn(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_setConn<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_setConnPtr
newCallback_Node_setConn(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_setConn<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Node_getUp : public Callback_Node_getUp_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RTimePtr&);

    CallbackNC_Node_getUp(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::NodePrx __proxy = ::omero::model::NodePrx::uncheckedCast(__result->getProxy());
        ::omero::RTimePtr __ret;
        try
        {
            __ret = __proxy->end_getUp(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Node_getUpPtr
newCallback_Node_getUp(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RTimePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_getUp<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_getUpPtr
newCallback_Node_getUp(T* instance, void (T::*cb)(const ::omero::RTimePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_getUp<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Node_getUp : public Callback_Node_getUp_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RTimePtr&, const CT&);

    Callback_Node_getUp(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::NodePrx __proxy = ::omero::model::NodePrx::uncheckedCast(__result->getProxy());
        ::omero::RTimePtr __ret;
        try
        {
            __ret = __proxy->end_getUp(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Node_getUpPtr
newCallback_Node_getUp(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RTimePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_getUp<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_getUpPtr
newCallback_Node_getUp(T* instance, void (T::*cb)(const ::omero::RTimePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_getUp<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Node_setUp : public Callback_Node_setUp_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Node_setUp(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Node_setUpPtr
newCallback_Node_setUp(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_setUp<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_setUpPtr
newCallback_Node_setUp(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_setUp<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Node_setUpPtr
newCallback_Node_setUp(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_setUp<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_setUpPtr
newCallback_Node_setUp(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_setUp<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Node_setUp : public Callback_Node_setUp_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Node_setUp(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Node_setUpPtr
newCallback_Node_setUp(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_setUp<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_setUpPtr
newCallback_Node_setUp(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_setUp<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Node_setUpPtr
newCallback_Node_setUp(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_setUp<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_setUpPtr
newCallback_Node_setUp(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_setUp<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Node_getDown : public Callback_Node_getDown_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RTimePtr&);

    CallbackNC_Node_getDown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::NodePrx __proxy = ::omero::model::NodePrx::uncheckedCast(__result->getProxy());
        ::omero::RTimePtr __ret;
        try
        {
            __ret = __proxy->end_getDown(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Node_getDownPtr
newCallback_Node_getDown(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RTimePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_getDown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_getDownPtr
newCallback_Node_getDown(T* instance, void (T::*cb)(const ::omero::RTimePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_getDown<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Node_getDown : public Callback_Node_getDown_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RTimePtr&, const CT&);

    Callback_Node_getDown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::NodePrx __proxy = ::omero::model::NodePrx::uncheckedCast(__result->getProxy());
        ::omero::RTimePtr __ret;
        try
        {
            __ret = __proxy->end_getDown(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Node_getDownPtr
newCallback_Node_getDown(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RTimePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_getDown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_getDownPtr
newCallback_Node_getDown(T* instance, void (T::*cb)(const ::omero::RTimePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_getDown<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Node_setDown : public Callback_Node_setDown_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Node_setDown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Node_setDownPtr
newCallback_Node_setDown(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_setDown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_setDownPtr
newCallback_Node_setDown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_setDown<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Node_setDownPtr
newCallback_Node_setDown(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_setDown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_setDownPtr
newCallback_Node_setDown(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_setDown<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Node_setDown : public Callback_Node_setDown_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Node_setDown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Node_setDownPtr
newCallback_Node_setDown(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_setDown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_setDownPtr
newCallback_Node_setDown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_setDown<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Node_setDownPtr
newCallback_Node_setDown(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_setDown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_setDownPtr
newCallback_Node_setDown(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_setDown<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Node_getScale : public Callback_Node_getScale_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RIntPtr&);

    CallbackNC_Node_getScale(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::NodePrx __proxy = ::omero::model::NodePrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getScale(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Node_getScalePtr
newCallback_Node_getScale(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_getScale<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_getScalePtr
newCallback_Node_getScale(T* instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_getScale<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Node_getScale : public Callback_Node_getScale_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RIntPtr&, const CT&);

    Callback_Node_getScale(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::NodePrx __proxy = ::omero::model::NodePrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getScale(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Node_getScalePtr
newCallback_Node_getScale(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_getScale<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_getScalePtr
newCallback_Node_getScale(T* instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_getScale<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Node_setScale : public Callback_Node_setScale_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Node_setScale(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Node_setScalePtr
newCallback_Node_setScale(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_setScale<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_setScalePtr
newCallback_Node_setScale(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_setScale<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Node_setScalePtr
newCallback_Node_setScale(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_setScale<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_setScalePtr
newCallback_Node_setScale(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_setScale<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Node_setScale : public Callback_Node_setScale_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Node_setScale(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Node_setScalePtr
newCallback_Node_setScale(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_setScale<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_setScalePtr
newCallback_Node_setScale(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_setScale<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Node_setScalePtr
newCallback_Node_setScale(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_setScale<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_setScalePtr
newCallback_Node_setScale(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_setScale<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Node_unloadAnnotationLinks : public Callback_Node_unloadAnnotationLinks_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Node_unloadAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Node_unloadAnnotationLinksPtr
newCallback_Node_unloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_unloadAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_unloadAnnotationLinksPtr
newCallback_Node_unloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_unloadAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Node_unloadAnnotationLinksPtr
newCallback_Node_unloadAnnotationLinks(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_unloadAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_unloadAnnotationLinksPtr
newCallback_Node_unloadAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_unloadAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Node_unloadAnnotationLinks : public Callback_Node_unloadAnnotationLinks_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Node_unloadAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Node_unloadAnnotationLinksPtr
newCallback_Node_unloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_unloadAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_unloadAnnotationLinksPtr
newCallback_Node_unloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_unloadAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Node_unloadAnnotationLinksPtr
newCallback_Node_unloadAnnotationLinks(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_unloadAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_unloadAnnotationLinksPtr
newCallback_Node_unloadAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_unloadAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Node_sizeOfAnnotationLinks : public Callback_Node_sizeOfAnnotationLinks_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Node_sizeOfAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::NodePrx __proxy = ::omero::model::NodePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfAnnotationLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Node_sizeOfAnnotationLinksPtr
newCallback_Node_sizeOfAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_sizeOfAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_sizeOfAnnotationLinksPtr
newCallback_Node_sizeOfAnnotationLinks(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_sizeOfAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Node_sizeOfAnnotationLinks : public Callback_Node_sizeOfAnnotationLinks_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Node_sizeOfAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::NodePrx __proxy = ::omero::model::NodePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_sizeOfAnnotationLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Node_sizeOfAnnotationLinksPtr
newCallback_Node_sizeOfAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_sizeOfAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_sizeOfAnnotationLinksPtr
newCallback_Node_sizeOfAnnotationLinks(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_sizeOfAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Node_copyAnnotationLinks : public Callback_Node_copyAnnotationLinks_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::NodeAnnotationLinksSeq&);

    CallbackNC_Node_copyAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::NodePrx __proxy = ::omero::model::NodePrx::uncheckedCast(__result->getProxy());
        ::omero::model::NodeAnnotationLinksSeq __ret;
        try
        {
            __ret = __proxy->end_copyAnnotationLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Node_copyAnnotationLinksPtr
newCallback_Node_copyAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::NodeAnnotationLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_copyAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_copyAnnotationLinksPtr
newCallback_Node_copyAnnotationLinks(T* instance, void (T::*cb)(const ::omero::model::NodeAnnotationLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_copyAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Node_copyAnnotationLinks : public Callback_Node_copyAnnotationLinks_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::NodeAnnotationLinksSeq&, const CT&);

    Callback_Node_copyAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::NodePrx __proxy = ::omero::model::NodePrx::uncheckedCast(__result->getProxy());
        ::omero::model::NodeAnnotationLinksSeq __ret;
        try
        {
            __ret = __proxy->end_copyAnnotationLinks(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Node_copyAnnotationLinksPtr
newCallback_Node_copyAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::NodeAnnotationLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_copyAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_copyAnnotationLinksPtr
newCallback_Node_copyAnnotationLinks(T* instance, void (T::*cb)(const ::omero::model::NodeAnnotationLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_copyAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Node_addNodeAnnotationLink : public Callback_Node_addNodeAnnotationLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Node_addNodeAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Node_addNodeAnnotationLinkPtr
newCallback_Node_addNodeAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_addNodeAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_addNodeAnnotationLinkPtr
newCallback_Node_addNodeAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_addNodeAnnotationLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Node_addNodeAnnotationLinkPtr
newCallback_Node_addNodeAnnotationLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_addNodeAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_addNodeAnnotationLinkPtr
newCallback_Node_addNodeAnnotationLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_addNodeAnnotationLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Node_addNodeAnnotationLink : public Callback_Node_addNodeAnnotationLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Node_addNodeAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Node_addNodeAnnotationLinkPtr
newCallback_Node_addNodeAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_addNodeAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_addNodeAnnotationLinkPtr
newCallback_Node_addNodeAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_addNodeAnnotationLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Node_addNodeAnnotationLinkPtr
newCallback_Node_addNodeAnnotationLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_addNodeAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_addNodeAnnotationLinkPtr
newCallback_Node_addNodeAnnotationLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_addNodeAnnotationLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Node_addAllNodeAnnotationLinkSet : public Callback_Node_addAllNodeAnnotationLinkSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Node_addAllNodeAnnotationLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Node_addAllNodeAnnotationLinkSetPtr
newCallback_Node_addAllNodeAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_addAllNodeAnnotationLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_addAllNodeAnnotationLinkSetPtr
newCallback_Node_addAllNodeAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_addAllNodeAnnotationLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Node_addAllNodeAnnotationLinkSetPtr
newCallback_Node_addAllNodeAnnotationLinkSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_addAllNodeAnnotationLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_addAllNodeAnnotationLinkSetPtr
newCallback_Node_addAllNodeAnnotationLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_addAllNodeAnnotationLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Node_addAllNodeAnnotationLinkSet : public Callback_Node_addAllNodeAnnotationLinkSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Node_addAllNodeAnnotationLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Node_addAllNodeAnnotationLinkSetPtr
newCallback_Node_addAllNodeAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_addAllNodeAnnotationLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_addAllNodeAnnotationLinkSetPtr
newCallback_Node_addAllNodeAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_addAllNodeAnnotationLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Node_addAllNodeAnnotationLinkSetPtr
newCallback_Node_addAllNodeAnnotationLinkSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_addAllNodeAnnotationLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_addAllNodeAnnotationLinkSetPtr
newCallback_Node_addAllNodeAnnotationLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_addAllNodeAnnotationLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Node_removeNodeAnnotationLink : public Callback_Node_removeNodeAnnotationLink_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Node_removeNodeAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Node_removeNodeAnnotationLinkPtr
newCallback_Node_removeNodeAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_removeNodeAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_removeNodeAnnotationLinkPtr
newCallback_Node_removeNodeAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_removeNodeAnnotationLink<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Node_removeNodeAnnotationLinkPtr
newCallback_Node_removeNodeAnnotationLink(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_removeNodeAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_removeNodeAnnotationLinkPtr
newCallback_Node_removeNodeAnnotationLink(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_removeNodeAnnotationLink<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Node_removeNodeAnnotationLink : public Callback_Node_removeNodeAnnotationLink_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Node_removeNodeAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Node_removeNodeAnnotationLinkPtr
newCallback_Node_removeNodeAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_removeNodeAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_removeNodeAnnotationLinkPtr
newCallback_Node_removeNodeAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_removeNodeAnnotationLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Node_removeNodeAnnotationLinkPtr
newCallback_Node_removeNodeAnnotationLink(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_removeNodeAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_removeNodeAnnotationLinkPtr
newCallback_Node_removeNodeAnnotationLink(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_removeNodeAnnotationLink<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Node_removeAllNodeAnnotationLinkSet : public Callback_Node_removeAllNodeAnnotationLinkSet_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Node_removeAllNodeAnnotationLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Node_removeAllNodeAnnotationLinkSetPtr
newCallback_Node_removeAllNodeAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_removeAllNodeAnnotationLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_removeAllNodeAnnotationLinkSetPtr
newCallback_Node_removeAllNodeAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_removeAllNodeAnnotationLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Node_removeAllNodeAnnotationLinkSetPtr
newCallback_Node_removeAllNodeAnnotationLinkSet(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_removeAllNodeAnnotationLinkSet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_removeAllNodeAnnotationLinkSetPtr
newCallback_Node_removeAllNodeAnnotationLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_removeAllNodeAnnotationLinkSet<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Node_removeAllNodeAnnotationLinkSet : public Callback_Node_removeAllNodeAnnotationLinkSet_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Node_removeAllNodeAnnotationLinkSet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Node_removeAllNodeAnnotationLinkSetPtr
newCallback_Node_removeAllNodeAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_removeAllNodeAnnotationLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_removeAllNodeAnnotationLinkSetPtr
newCallback_Node_removeAllNodeAnnotationLinkSet(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_removeAllNodeAnnotationLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Node_removeAllNodeAnnotationLinkSetPtr
newCallback_Node_removeAllNodeAnnotationLinkSet(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_removeAllNodeAnnotationLinkSet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_removeAllNodeAnnotationLinkSetPtr
newCallback_Node_removeAllNodeAnnotationLinkSet(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_removeAllNodeAnnotationLinkSet<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Node_clearAnnotationLinks : public Callback_Node_clearAnnotationLinks_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Node_clearAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Node_clearAnnotationLinksPtr
newCallback_Node_clearAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_clearAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_clearAnnotationLinksPtr
newCallback_Node_clearAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_clearAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Node_clearAnnotationLinksPtr
newCallback_Node_clearAnnotationLinks(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_clearAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_clearAnnotationLinksPtr
newCallback_Node_clearAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_clearAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Node_clearAnnotationLinks : public Callback_Node_clearAnnotationLinks_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Node_clearAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Node_clearAnnotationLinksPtr
newCallback_Node_clearAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_clearAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_clearAnnotationLinksPtr
newCallback_Node_clearAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_clearAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Node_clearAnnotationLinksPtr
newCallback_Node_clearAnnotationLinks(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_clearAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_clearAnnotationLinksPtr
newCallback_Node_clearAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_clearAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Node_reloadAnnotationLinks : public Callback_Node_reloadAnnotationLinks_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Node_reloadAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Node_reloadAnnotationLinksPtr
newCallback_Node_reloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_reloadAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_reloadAnnotationLinksPtr
newCallback_Node_reloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_reloadAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Node_reloadAnnotationLinksPtr
newCallback_Node_reloadAnnotationLinks(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_reloadAnnotationLinks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_reloadAnnotationLinksPtr
newCallback_Node_reloadAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_reloadAnnotationLinks<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Node_reloadAnnotationLinks : public Callback_Node_reloadAnnotationLinks_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Node_reloadAnnotationLinks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Node_reloadAnnotationLinksPtr
newCallback_Node_reloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_reloadAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_reloadAnnotationLinksPtr
newCallback_Node_reloadAnnotationLinks(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_reloadAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Node_reloadAnnotationLinksPtr
newCallback_Node_reloadAnnotationLinks(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_reloadAnnotationLinks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_reloadAnnotationLinksPtr
newCallback_Node_reloadAnnotationLinks(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_reloadAnnotationLinks<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Node_getAnnotationLinksCountPerOwner : public Callback_Node_getAnnotationLinksCountPerOwner_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::sys::CountMap&);

    CallbackNC_Node_getAnnotationLinksCountPerOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::NodePrx __proxy = ::omero::model::NodePrx::uncheckedCast(__result->getProxy());
        ::omero::sys::CountMap __ret;
        try
        {
            __ret = __proxy->end_getAnnotationLinksCountPerOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Node_getAnnotationLinksCountPerOwnerPtr
newCallback_Node_getAnnotationLinksCountPerOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::CountMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_getAnnotationLinksCountPerOwner<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_getAnnotationLinksCountPerOwnerPtr
newCallback_Node_getAnnotationLinksCountPerOwner(T* instance, void (T::*cb)(const ::omero::sys::CountMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_getAnnotationLinksCountPerOwner<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Node_getAnnotationLinksCountPerOwner : public Callback_Node_getAnnotationLinksCountPerOwner_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::sys::CountMap&, const CT&);

    Callback_Node_getAnnotationLinksCountPerOwner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::NodePrx __proxy = ::omero::model::NodePrx::uncheckedCast(__result->getProxy());
        ::omero::sys::CountMap __ret;
        try
        {
            __ret = __proxy->end_getAnnotationLinksCountPerOwner(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Node_getAnnotationLinksCountPerOwnerPtr
newCallback_Node_getAnnotationLinksCountPerOwner(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::sys::CountMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_getAnnotationLinksCountPerOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_getAnnotationLinksCountPerOwnerPtr
newCallback_Node_getAnnotationLinksCountPerOwner(T* instance, void (T::*cb)(const ::omero::sys::CountMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_getAnnotationLinksCountPerOwner<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Node_linkAnnotation : public Callback_Node_linkAnnotation_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::NodeAnnotationLinkPtr&);

    CallbackNC_Node_linkAnnotation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::NodePrx __proxy = ::omero::model::NodePrx::uncheckedCast(__result->getProxy());
        ::omero::model::NodeAnnotationLinkPtr __ret;
        try
        {
            __ret = __proxy->end_linkAnnotation(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Node_linkAnnotationPtr
newCallback_Node_linkAnnotation(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::NodeAnnotationLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_linkAnnotation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_linkAnnotationPtr
newCallback_Node_linkAnnotation(T* instance, void (T::*cb)(const ::omero::model::NodeAnnotationLinkPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_linkAnnotation<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Node_linkAnnotation : public Callback_Node_linkAnnotation_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::NodeAnnotationLinkPtr&, const CT&);

    Callback_Node_linkAnnotation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::NodePrx __proxy = ::omero::model::NodePrx::uncheckedCast(__result->getProxy());
        ::omero::model::NodeAnnotationLinkPtr __ret;
        try
        {
            __ret = __proxy->end_linkAnnotation(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Node_linkAnnotationPtr
newCallback_Node_linkAnnotation(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::NodeAnnotationLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_linkAnnotation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_linkAnnotationPtr
newCallback_Node_linkAnnotation(T* instance, void (T::*cb)(const ::omero::model::NodeAnnotationLinkPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_linkAnnotation<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Node_addNodeAnnotationLinkToBoth : public Callback_Node_addNodeAnnotationLinkToBoth_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Node_addNodeAnnotationLinkToBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Node_addNodeAnnotationLinkToBothPtr
newCallback_Node_addNodeAnnotationLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_addNodeAnnotationLinkToBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_addNodeAnnotationLinkToBothPtr
newCallback_Node_addNodeAnnotationLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_addNodeAnnotationLinkToBoth<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Node_addNodeAnnotationLinkToBothPtr
newCallback_Node_addNodeAnnotationLinkToBoth(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_addNodeAnnotationLinkToBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_addNodeAnnotationLinkToBothPtr
newCallback_Node_addNodeAnnotationLinkToBoth(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_addNodeAnnotationLinkToBoth<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Node_addNodeAnnotationLinkToBoth : public Callback_Node_addNodeAnnotationLinkToBoth_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Node_addNodeAnnotationLinkToBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Node_addNodeAnnotationLinkToBothPtr
newCallback_Node_addNodeAnnotationLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_addNodeAnnotationLinkToBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_addNodeAnnotationLinkToBothPtr
newCallback_Node_addNodeAnnotationLinkToBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_addNodeAnnotationLinkToBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Node_addNodeAnnotationLinkToBothPtr
newCallback_Node_addNodeAnnotationLinkToBoth(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_addNodeAnnotationLinkToBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_addNodeAnnotationLinkToBothPtr
newCallback_Node_addNodeAnnotationLinkToBoth(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_addNodeAnnotationLinkToBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Node_findNodeAnnotationLink : public Callback_Node_findNodeAnnotationLink_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::NodeAnnotationLinksSeq&);

    CallbackNC_Node_findNodeAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::NodePrx __proxy = ::omero::model::NodePrx::uncheckedCast(__result->getProxy());
        ::omero::model::NodeAnnotationLinksSeq __ret;
        try
        {
            __ret = __proxy->end_findNodeAnnotationLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Node_findNodeAnnotationLinkPtr
newCallback_Node_findNodeAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::NodeAnnotationLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_findNodeAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_findNodeAnnotationLinkPtr
newCallback_Node_findNodeAnnotationLink(T* instance, void (T::*cb)(const ::omero::model::NodeAnnotationLinksSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_findNodeAnnotationLink<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Node_findNodeAnnotationLink : public Callback_Node_findNodeAnnotationLink_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::NodeAnnotationLinksSeq&, const CT&);

    Callback_Node_findNodeAnnotationLink(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::NodePrx __proxy = ::omero::model::NodePrx::uncheckedCast(__result->getProxy());
        ::omero::model::NodeAnnotationLinksSeq __ret;
        try
        {
            __ret = __proxy->end_findNodeAnnotationLink(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Node_findNodeAnnotationLinkPtr
newCallback_Node_findNodeAnnotationLink(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::NodeAnnotationLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_findNodeAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_findNodeAnnotationLinkPtr
newCallback_Node_findNodeAnnotationLink(T* instance, void (T::*cb)(const ::omero::model::NodeAnnotationLinksSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_findNodeAnnotationLink<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Node_unlinkAnnotation : public Callback_Node_unlinkAnnotation_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Node_unlinkAnnotation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Node_unlinkAnnotationPtr
newCallback_Node_unlinkAnnotation(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_unlinkAnnotation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_unlinkAnnotationPtr
newCallback_Node_unlinkAnnotation(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_unlinkAnnotation<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Node_unlinkAnnotationPtr
newCallback_Node_unlinkAnnotation(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_unlinkAnnotation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_unlinkAnnotationPtr
newCallback_Node_unlinkAnnotation(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_unlinkAnnotation<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Node_unlinkAnnotation : public Callback_Node_unlinkAnnotation_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Node_unlinkAnnotation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Node_unlinkAnnotationPtr
newCallback_Node_unlinkAnnotation(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_unlinkAnnotation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_unlinkAnnotationPtr
newCallback_Node_unlinkAnnotation(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_unlinkAnnotation<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Node_unlinkAnnotationPtr
newCallback_Node_unlinkAnnotation(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_unlinkAnnotation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_unlinkAnnotationPtr
newCallback_Node_unlinkAnnotation(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_unlinkAnnotation<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Node_removeNodeAnnotationLinkFromBoth : public Callback_Node_removeNodeAnnotationLinkFromBoth_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Node_removeNodeAnnotationLinkFromBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Node_removeNodeAnnotationLinkFromBothPtr
newCallback_Node_removeNodeAnnotationLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_removeNodeAnnotationLinkFromBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_removeNodeAnnotationLinkFromBothPtr
newCallback_Node_removeNodeAnnotationLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_removeNodeAnnotationLinkFromBoth<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Node_removeNodeAnnotationLinkFromBothPtr
newCallback_Node_removeNodeAnnotationLinkFromBoth(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_removeNodeAnnotationLinkFromBoth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_removeNodeAnnotationLinkFromBothPtr
newCallback_Node_removeNodeAnnotationLinkFromBoth(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_removeNodeAnnotationLinkFromBoth<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Node_removeNodeAnnotationLinkFromBoth : public Callback_Node_removeNodeAnnotationLinkFromBoth_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Node_removeNodeAnnotationLinkFromBoth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Node_removeNodeAnnotationLinkFromBothPtr
newCallback_Node_removeNodeAnnotationLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_removeNodeAnnotationLinkFromBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_removeNodeAnnotationLinkFromBothPtr
newCallback_Node_removeNodeAnnotationLinkFromBoth(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_removeNodeAnnotationLinkFromBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Node_removeNodeAnnotationLinkFromBothPtr
newCallback_Node_removeNodeAnnotationLinkFromBoth(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_removeNodeAnnotationLinkFromBoth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_removeNodeAnnotationLinkFromBothPtr
newCallback_Node_removeNodeAnnotationLinkFromBoth(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_removeNodeAnnotationLinkFromBoth<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Node_linkedAnnotationList : public Callback_Node_linkedAnnotationList_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::NodeLinkedAnnotationSeq&);

    CallbackNC_Node_linkedAnnotationList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::NodePrx __proxy = ::omero::model::NodePrx::uncheckedCast(__result->getProxy());
        ::omero::model::NodeLinkedAnnotationSeq __ret;
        try
        {
            __ret = __proxy->end_linkedAnnotationList(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Node_linkedAnnotationListPtr
newCallback_Node_linkedAnnotationList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::NodeLinkedAnnotationSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_linkedAnnotationList<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_linkedAnnotationListPtr
newCallback_Node_linkedAnnotationList(T* instance, void (T::*cb)(const ::omero::model::NodeLinkedAnnotationSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_linkedAnnotationList<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Node_linkedAnnotationList : public Callback_Node_linkedAnnotationList_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::NodeLinkedAnnotationSeq&, const CT&);

    Callback_Node_linkedAnnotationList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::NodePrx __proxy = ::omero::model::NodePrx::uncheckedCast(__result->getProxy());
        ::omero::model::NodeLinkedAnnotationSeq __ret;
        try
        {
            __ret = __proxy->end_linkedAnnotationList(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Node_linkedAnnotationListPtr
newCallback_Node_linkedAnnotationList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::NodeLinkedAnnotationSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_linkedAnnotationList<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_linkedAnnotationListPtr
newCallback_Node_linkedAnnotationList(T* instance, void (T::*cb)(const ::omero::model::NodeLinkedAnnotationSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_linkedAnnotationList<T, CT>(instance, cb, excb, sentcb);
}

}

}

#endif
