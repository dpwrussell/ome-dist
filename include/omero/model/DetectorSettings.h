// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `DetectorSettings.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_DetectorSettings_h__
#define __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_DetectorSettings_h__

#include <Ice/LocalObjectF.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/StreamF.h>
#include <omero/model/IObject.h>
#include <omero/RTypes.h>
#include <omero/System.h>
#include <omero/Collections.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace omero
{

namespace model
{

class Binning;

class Detector;

class Details;

class DetectorSettings;

}

}

}

namespace omero
{

namespace model
{

class Binning;
bool operator==(const Binning&, const Binning&);
bool operator<(const Binning&, const Binning&);

class Detector;
bool operator==(const Detector&, const Detector&);
bool operator<(const Detector&, const Detector&);

class Details;
bool operator==(const Details&, const Details&);
bool operator<(const Details&, const Details&);

class DetectorSettings;
bool operator==(const DetectorSettings&, const DetectorSettings&);
bool operator<(const DetectorSettings&, const DetectorSettings&);

}

}

namespace IceInternal
{

::Ice::Object* upCast(::omero::model::Binning*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Binning*);

::Ice::Object* upCast(::omero::model::Detector*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Detector*);

::Ice::Object* upCast(::omero::model::Details*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Details*);

::Ice::Object* upCast(::omero::model::DetectorSettings*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::DetectorSettings*);

}

namespace omero
{

namespace model
{

typedef ::IceInternal::Handle< ::omero::model::Binning> BinningPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Binning> BinningPrx;

void __read(::IceInternal::BasicStream*, BinningPrx&);
void __patch__BinningPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::Detector> DetectorPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Detector> DetectorPrx;

void __read(::IceInternal::BasicStream*, DetectorPrx&);
void __patch__DetectorPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::Details> DetailsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Details> DetailsPrx;

void __read(::IceInternal::BasicStream*, DetailsPrx&);
void __patch__DetailsPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::DetectorSettings> DetectorSettingsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::DetectorSettings> DetectorSettingsPrx;

void __read(::IceInternal::BasicStream*, DetectorSettingsPrx&);
void __patch__DetectorSettingsPtr(void*, ::Ice::ObjectPtr&);

}

}

namespace omero
{

namespace model
{

class Callback_DetectorSettings_getVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DetectorSettings_getVersion_Base> Callback_DetectorSettings_getVersionPtr;

class Callback_DetectorSettings_setVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DetectorSettings_setVersion_Base> Callback_DetectorSettings_setVersionPtr;

class Callback_DetectorSettings_getVoltage_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DetectorSettings_getVoltage_Base> Callback_DetectorSettings_getVoltagePtr;

class Callback_DetectorSettings_setVoltage_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DetectorSettings_setVoltage_Base> Callback_DetectorSettings_setVoltagePtr;

class Callback_DetectorSettings_getGain_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DetectorSettings_getGain_Base> Callback_DetectorSettings_getGainPtr;

class Callback_DetectorSettings_setGain_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DetectorSettings_setGain_Base> Callback_DetectorSettings_setGainPtr;

class Callback_DetectorSettings_getOffsetValue_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DetectorSettings_getOffsetValue_Base> Callback_DetectorSettings_getOffsetValuePtr;

class Callback_DetectorSettings_setOffsetValue_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DetectorSettings_setOffsetValue_Base> Callback_DetectorSettings_setOffsetValuePtr;

class Callback_DetectorSettings_getReadOutRate_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DetectorSettings_getReadOutRate_Base> Callback_DetectorSettings_getReadOutRatePtr;

class Callback_DetectorSettings_setReadOutRate_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DetectorSettings_setReadOutRate_Base> Callback_DetectorSettings_setReadOutRatePtr;

class Callback_DetectorSettings_getBinning_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DetectorSettings_getBinning_Base> Callback_DetectorSettings_getBinningPtr;

class Callback_DetectorSettings_setBinning_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DetectorSettings_setBinning_Base> Callback_DetectorSettings_setBinningPtr;

class Callback_DetectorSettings_getIntegration_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DetectorSettings_getIntegration_Base> Callback_DetectorSettings_getIntegrationPtr;

class Callback_DetectorSettings_setIntegration_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DetectorSettings_setIntegration_Base> Callback_DetectorSettings_setIntegrationPtr;

class Callback_DetectorSettings_getZoom_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DetectorSettings_getZoom_Base> Callback_DetectorSettings_getZoomPtr;

class Callback_DetectorSettings_setZoom_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DetectorSettings_setZoom_Base> Callback_DetectorSettings_setZoomPtr;

class Callback_DetectorSettings_getDetector_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DetectorSettings_getDetector_Base> Callback_DetectorSettings_getDetectorPtr;

class Callback_DetectorSettings_setDetector_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DetectorSettings_setDetector_Base> Callback_DetectorSettings_setDetectorPtr;

}

}

namespace IceProxy
{

namespace omero
{

namespace model
{

class DetectorSettings : virtual public ::IceProxy::omero::model::IObject
{
public:

    ::omero::RIntPtr getVersion()
    {
        return getVersion(0);
    }
    ::omero::RIntPtr getVersion(const ::Ice::Context& __ctx)
    {
        return getVersion(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getVersion()
    {
        return begin_getVersion(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx)
    {
        return begin_getVersion(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::omero::model::Callback_DetectorSettings_getVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context& __ctx, const ::omero::model::Callback_DetectorSettings_getVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVersion(&__ctx, __del, __cookie);
    }

    ::omero::RIntPtr end_getVersion(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RIntPtr getVersion(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getVersion(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setVersion(const ::omero::RIntPtr& theVersion)
    {
        setVersion(theVersion, 0);
    }
    void setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx)
    {
        setVersion(theVersion, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion)
    {
        return begin_setVersion(theVersion, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx)
    {
        return begin_setVersion(theVersion, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::omero::model::Callback_DetectorSettings_setVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr& theVersion, const ::Ice::Context& __ctx, const ::omero::model::Callback_DetectorSettings_setVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVersion(theVersion, &__ctx, __del, __cookie);
    }

    void end_setVersion(const ::Ice::AsyncResultPtr&);
    
private:

    void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setVersion(const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RDoublePtr getVoltage()
    {
        return getVoltage(0);
    }
    ::omero::RDoublePtr getVoltage(const ::Ice::Context& __ctx)
    {
        return getVoltage(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getVoltage()
    {
        return begin_getVoltage(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVoltage(const ::Ice::Context& __ctx)
    {
        return begin_getVoltage(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getVoltage(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVoltage(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVoltage(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVoltage(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVoltage(const ::omero::model::Callback_DetectorSettings_getVoltagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVoltage(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getVoltage(const ::Ice::Context& __ctx, const ::omero::model::Callback_DetectorSettings_getVoltagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getVoltage(&__ctx, __del, __cookie);
    }

    ::omero::RDoublePtr end_getVoltage(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RDoublePtr getVoltage(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getVoltage(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setVoltage(const ::omero::RDoublePtr& theVoltage)
    {
        setVoltage(theVoltage, 0);
    }
    void setVoltage(const ::omero::RDoublePtr& theVoltage, const ::Ice::Context& __ctx)
    {
        setVoltage(theVoltage, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setVoltage(const ::omero::RDoublePtr& theVoltage)
    {
        return begin_setVoltage(theVoltage, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVoltage(const ::omero::RDoublePtr& theVoltage, const ::Ice::Context& __ctx)
    {
        return begin_setVoltage(theVoltage, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVoltage(const ::omero::RDoublePtr& theVoltage, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVoltage(theVoltage, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVoltage(const ::omero::RDoublePtr& theVoltage, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVoltage(theVoltage, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVoltage(const ::omero::RDoublePtr& theVoltage, const ::omero::model::Callback_DetectorSettings_setVoltagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVoltage(theVoltage, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setVoltage(const ::omero::RDoublePtr& theVoltage, const ::Ice::Context& __ctx, const ::omero::model::Callback_DetectorSettings_setVoltagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setVoltage(theVoltage, &__ctx, __del, __cookie);
    }

    void end_setVoltage(const ::Ice::AsyncResultPtr&);
    
private:

    void setVoltage(const ::omero::RDoublePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setVoltage(const ::omero::RDoublePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RDoublePtr getGain()
    {
        return getGain(0);
    }
    ::omero::RDoublePtr getGain(const ::Ice::Context& __ctx)
    {
        return getGain(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getGain()
    {
        return begin_getGain(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getGain(const ::Ice::Context& __ctx)
    {
        return begin_getGain(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getGain(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getGain(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getGain(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getGain(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getGain(const ::omero::model::Callback_DetectorSettings_getGainPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getGain(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getGain(const ::Ice::Context& __ctx, const ::omero::model::Callback_DetectorSettings_getGainPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getGain(&__ctx, __del, __cookie);
    }

    ::omero::RDoublePtr end_getGain(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RDoublePtr getGain(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getGain(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setGain(const ::omero::RDoublePtr& theGain)
    {
        setGain(theGain, 0);
    }
    void setGain(const ::omero::RDoublePtr& theGain, const ::Ice::Context& __ctx)
    {
        setGain(theGain, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setGain(const ::omero::RDoublePtr& theGain)
    {
        return begin_setGain(theGain, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setGain(const ::omero::RDoublePtr& theGain, const ::Ice::Context& __ctx)
    {
        return begin_setGain(theGain, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setGain(const ::omero::RDoublePtr& theGain, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setGain(theGain, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setGain(const ::omero::RDoublePtr& theGain, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setGain(theGain, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setGain(const ::omero::RDoublePtr& theGain, const ::omero::model::Callback_DetectorSettings_setGainPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setGain(theGain, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setGain(const ::omero::RDoublePtr& theGain, const ::Ice::Context& __ctx, const ::omero::model::Callback_DetectorSettings_setGainPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setGain(theGain, &__ctx, __del, __cookie);
    }

    void end_setGain(const ::Ice::AsyncResultPtr&);
    
private:

    void setGain(const ::omero::RDoublePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setGain(const ::omero::RDoublePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RDoublePtr getOffsetValue()
    {
        return getOffsetValue(0);
    }
    ::omero::RDoublePtr getOffsetValue(const ::Ice::Context& __ctx)
    {
        return getOffsetValue(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getOffsetValue()
    {
        return begin_getOffsetValue(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getOffsetValue(const ::Ice::Context& __ctx)
    {
        return begin_getOffsetValue(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getOffsetValue(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getOffsetValue(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getOffsetValue(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getOffsetValue(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getOffsetValue(const ::omero::model::Callback_DetectorSettings_getOffsetValuePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getOffsetValue(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getOffsetValue(const ::Ice::Context& __ctx, const ::omero::model::Callback_DetectorSettings_getOffsetValuePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getOffsetValue(&__ctx, __del, __cookie);
    }

    ::omero::RDoublePtr end_getOffsetValue(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RDoublePtr getOffsetValue(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getOffsetValue(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setOffsetValue(const ::omero::RDoublePtr& theOffsetValue)
    {
        setOffsetValue(theOffsetValue, 0);
    }
    void setOffsetValue(const ::omero::RDoublePtr& theOffsetValue, const ::Ice::Context& __ctx)
    {
        setOffsetValue(theOffsetValue, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setOffsetValue(const ::omero::RDoublePtr& theOffsetValue)
    {
        return begin_setOffsetValue(theOffsetValue, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setOffsetValue(const ::omero::RDoublePtr& theOffsetValue, const ::Ice::Context& __ctx)
    {
        return begin_setOffsetValue(theOffsetValue, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setOffsetValue(const ::omero::RDoublePtr& theOffsetValue, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setOffsetValue(theOffsetValue, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setOffsetValue(const ::omero::RDoublePtr& theOffsetValue, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setOffsetValue(theOffsetValue, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setOffsetValue(const ::omero::RDoublePtr& theOffsetValue, const ::omero::model::Callback_DetectorSettings_setOffsetValuePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setOffsetValue(theOffsetValue, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setOffsetValue(const ::omero::RDoublePtr& theOffsetValue, const ::Ice::Context& __ctx, const ::omero::model::Callback_DetectorSettings_setOffsetValuePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setOffsetValue(theOffsetValue, &__ctx, __del, __cookie);
    }

    void end_setOffsetValue(const ::Ice::AsyncResultPtr&);
    
private:

    void setOffsetValue(const ::omero::RDoublePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setOffsetValue(const ::omero::RDoublePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RDoublePtr getReadOutRate()
    {
        return getReadOutRate(0);
    }
    ::omero::RDoublePtr getReadOutRate(const ::Ice::Context& __ctx)
    {
        return getReadOutRate(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getReadOutRate()
    {
        return begin_getReadOutRate(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getReadOutRate(const ::Ice::Context& __ctx)
    {
        return begin_getReadOutRate(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getReadOutRate(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getReadOutRate(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getReadOutRate(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getReadOutRate(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getReadOutRate(const ::omero::model::Callback_DetectorSettings_getReadOutRatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getReadOutRate(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getReadOutRate(const ::Ice::Context& __ctx, const ::omero::model::Callback_DetectorSettings_getReadOutRatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getReadOutRate(&__ctx, __del, __cookie);
    }

    ::omero::RDoublePtr end_getReadOutRate(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RDoublePtr getReadOutRate(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getReadOutRate(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setReadOutRate(const ::omero::RDoublePtr& theReadOutRate)
    {
        setReadOutRate(theReadOutRate, 0);
    }
    void setReadOutRate(const ::omero::RDoublePtr& theReadOutRate, const ::Ice::Context& __ctx)
    {
        setReadOutRate(theReadOutRate, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setReadOutRate(const ::omero::RDoublePtr& theReadOutRate)
    {
        return begin_setReadOutRate(theReadOutRate, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setReadOutRate(const ::omero::RDoublePtr& theReadOutRate, const ::Ice::Context& __ctx)
    {
        return begin_setReadOutRate(theReadOutRate, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setReadOutRate(const ::omero::RDoublePtr& theReadOutRate, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setReadOutRate(theReadOutRate, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setReadOutRate(const ::omero::RDoublePtr& theReadOutRate, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setReadOutRate(theReadOutRate, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setReadOutRate(const ::omero::RDoublePtr& theReadOutRate, const ::omero::model::Callback_DetectorSettings_setReadOutRatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setReadOutRate(theReadOutRate, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setReadOutRate(const ::omero::RDoublePtr& theReadOutRate, const ::Ice::Context& __ctx, const ::omero::model::Callback_DetectorSettings_setReadOutRatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setReadOutRate(theReadOutRate, &__ctx, __del, __cookie);
    }

    void end_setReadOutRate(const ::Ice::AsyncResultPtr&);
    
private:

    void setReadOutRate(const ::omero::RDoublePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setReadOutRate(const ::omero::RDoublePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::BinningPtr getBinning()
    {
        return getBinning(0);
    }
    ::omero::model::BinningPtr getBinning(const ::Ice::Context& __ctx)
    {
        return getBinning(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getBinning()
    {
        return begin_getBinning(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getBinning(const ::Ice::Context& __ctx)
    {
        return begin_getBinning(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getBinning(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBinning(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBinning(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBinning(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBinning(const ::omero::model::Callback_DetectorSettings_getBinningPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBinning(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBinning(const ::Ice::Context& __ctx, const ::omero::model::Callback_DetectorSettings_getBinningPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBinning(&__ctx, __del, __cookie);
    }

    ::omero::model::BinningPtr end_getBinning(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::BinningPtr getBinning(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getBinning(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setBinning(const ::omero::model::BinningPtr& theBinning)
    {
        setBinning(theBinning, 0);
    }
    void setBinning(const ::omero::model::BinningPtr& theBinning, const ::Ice::Context& __ctx)
    {
        setBinning(theBinning, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setBinning(const ::omero::model::BinningPtr& theBinning)
    {
        return begin_setBinning(theBinning, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setBinning(const ::omero::model::BinningPtr& theBinning, const ::Ice::Context& __ctx)
    {
        return begin_setBinning(theBinning, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setBinning(const ::omero::model::BinningPtr& theBinning, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setBinning(theBinning, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setBinning(const ::omero::model::BinningPtr& theBinning, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setBinning(theBinning, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setBinning(const ::omero::model::BinningPtr& theBinning, const ::omero::model::Callback_DetectorSettings_setBinningPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setBinning(theBinning, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setBinning(const ::omero::model::BinningPtr& theBinning, const ::Ice::Context& __ctx, const ::omero::model::Callback_DetectorSettings_setBinningPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setBinning(theBinning, &__ctx, __del, __cookie);
    }

    void end_setBinning(const ::Ice::AsyncResultPtr&);
    
private:

    void setBinning(const ::omero::model::BinningPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setBinning(const ::omero::model::BinningPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RIntPtr getIntegration()
    {
        return getIntegration(0);
    }
    ::omero::RIntPtr getIntegration(const ::Ice::Context& __ctx)
    {
        return getIntegration(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getIntegration()
    {
        return begin_getIntegration(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getIntegration(const ::Ice::Context& __ctx)
    {
        return begin_getIntegration(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getIntegration(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getIntegration(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getIntegration(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getIntegration(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getIntegration(const ::omero::model::Callback_DetectorSettings_getIntegrationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getIntegration(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getIntegration(const ::Ice::Context& __ctx, const ::omero::model::Callback_DetectorSettings_getIntegrationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getIntegration(&__ctx, __del, __cookie);
    }

    ::omero::RIntPtr end_getIntegration(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RIntPtr getIntegration(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getIntegration(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setIntegration(const ::omero::RIntPtr& theIntegration)
    {
        setIntegration(theIntegration, 0);
    }
    void setIntegration(const ::omero::RIntPtr& theIntegration, const ::Ice::Context& __ctx)
    {
        setIntegration(theIntegration, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setIntegration(const ::omero::RIntPtr& theIntegration)
    {
        return begin_setIntegration(theIntegration, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setIntegration(const ::omero::RIntPtr& theIntegration, const ::Ice::Context& __ctx)
    {
        return begin_setIntegration(theIntegration, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setIntegration(const ::omero::RIntPtr& theIntegration, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setIntegration(theIntegration, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setIntegration(const ::omero::RIntPtr& theIntegration, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setIntegration(theIntegration, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setIntegration(const ::omero::RIntPtr& theIntegration, const ::omero::model::Callback_DetectorSettings_setIntegrationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setIntegration(theIntegration, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setIntegration(const ::omero::RIntPtr& theIntegration, const ::Ice::Context& __ctx, const ::omero::model::Callback_DetectorSettings_setIntegrationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setIntegration(theIntegration, &__ctx, __del, __cookie);
    }

    void end_setIntegration(const ::Ice::AsyncResultPtr&);
    
private:

    void setIntegration(const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setIntegration(const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RDoublePtr getZoom()
    {
        return getZoom(0);
    }
    ::omero::RDoublePtr getZoom(const ::Ice::Context& __ctx)
    {
        return getZoom(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getZoom()
    {
        return begin_getZoom(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getZoom(const ::Ice::Context& __ctx)
    {
        return begin_getZoom(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getZoom(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getZoom(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getZoom(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getZoom(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getZoom(const ::omero::model::Callback_DetectorSettings_getZoomPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getZoom(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getZoom(const ::Ice::Context& __ctx, const ::omero::model::Callback_DetectorSettings_getZoomPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getZoom(&__ctx, __del, __cookie);
    }

    ::omero::RDoublePtr end_getZoom(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RDoublePtr getZoom(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getZoom(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setZoom(const ::omero::RDoublePtr& theZoom)
    {
        setZoom(theZoom, 0);
    }
    void setZoom(const ::omero::RDoublePtr& theZoom, const ::Ice::Context& __ctx)
    {
        setZoom(theZoom, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setZoom(const ::omero::RDoublePtr& theZoom)
    {
        return begin_setZoom(theZoom, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setZoom(const ::omero::RDoublePtr& theZoom, const ::Ice::Context& __ctx)
    {
        return begin_setZoom(theZoom, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setZoom(const ::omero::RDoublePtr& theZoom, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setZoom(theZoom, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setZoom(const ::omero::RDoublePtr& theZoom, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setZoom(theZoom, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setZoom(const ::omero::RDoublePtr& theZoom, const ::omero::model::Callback_DetectorSettings_setZoomPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setZoom(theZoom, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setZoom(const ::omero::RDoublePtr& theZoom, const ::Ice::Context& __ctx, const ::omero::model::Callback_DetectorSettings_setZoomPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setZoom(theZoom, &__ctx, __del, __cookie);
    }

    void end_setZoom(const ::Ice::AsyncResultPtr&);
    
private:

    void setZoom(const ::omero::RDoublePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setZoom(const ::omero::RDoublePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::model::DetectorPtr getDetector()
    {
        return getDetector(0);
    }
    ::omero::model::DetectorPtr getDetector(const ::Ice::Context& __ctx)
    {
        return getDetector(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getDetector()
    {
        return begin_getDetector(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDetector(const ::Ice::Context& __ctx)
    {
        return begin_getDetector(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDetector(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDetector(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDetector(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDetector(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDetector(const ::omero::model::Callback_DetectorSettings_getDetectorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDetector(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDetector(const ::Ice::Context& __ctx, const ::omero::model::Callback_DetectorSettings_getDetectorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDetector(&__ctx, __del, __cookie);
    }

    ::omero::model::DetectorPtr end_getDetector(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::DetectorPtr getDetector(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getDetector(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setDetector(const ::omero::model::DetectorPtr& theDetector)
    {
        setDetector(theDetector, 0);
    }
    void setDetector(const ::omero::model::DetectorPtr& theDetector, const ::Ice::Context& __ctx)
    {
        setDetector(theDetector, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setDetector(const ::omero::model::DetectorPtr& theDetector)
    {
        return begin_setDetector(theDetector, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setDetector(const ::omero::model::DetectorPtr& theDetector, const ::Ice::Context& __ctx)
    {
        return begin_setDetector(theDetector, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setDetector(const ::omero::model::DetectorPtr& theDetector, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDetector(theDetector, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDetector(const ::omero::model::DetectorPtr& theDetector, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDetector(theDetector, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDetector(const ::omero::model::DetectorPtr& theDetector, const ::omero::model::Callback_DetectorSettings_setDetectorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDetector(theDetector, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDetector(const ::omero::model::DetectorPtr& theDetector, const ::Ice::Context& __ctx, const ::omero::model::Callback_DetectorSettings_setDetectorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDetector(theDetector, &__ctx, __del, __cookie);
    }

    void end_setDetector(const ::Ice::AsyncResultPtr&);
    
private:

    void setDetector(const ::omero::model::DetectorPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setDetector(const ::omero::model::DetectorPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<DetectorSettings> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DetectorSettings*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<DetectorSettings*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DetectorSettings> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DetectorSettings*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<DetectorSettings*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DetectorSettings> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DetectorSettings*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<DetectorSettings*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DetectorSettings> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DetectorSettings*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<DetectorSettings*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DetectorSettings> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DetectorSettings*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<DetectorSettings*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DetectorSettings> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DetectorSettings*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<DetectorSettings*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DetectorSettings> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DetectorSettings*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<DetectorSettings*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DetectorSettings> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DetectorSettings*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<DetectorSettings*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DetectorSettings> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DetectorSettings*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<DetectorSettings*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DetectorSettings> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DetectorSettings*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<DetectorSettings*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DetectorSettings> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DetectorSettings*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<DetectorSettings*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DetectorSettings> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DetectorSettings*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<DetectorSettings*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DetectorSettings> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DetectorSettings*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<DetectorSettings*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DetectorSettings> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DetectorSettings*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<DetectorSettings*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DetectorSettings> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DetectorSettings*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<DetectorSettings*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DetectorSettings> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DetectorSettings*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<DetectorSettings*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DetectorSettings> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DetectorSettings*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<DetectorSettings*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DetectorSettings> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DetectorSettings*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<DetectorSettings*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DetectorSettings> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DetectorSettings*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<DetectorSettings*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

namespace IceDelegate
{

namespace omero
{

namespace model
{

class DetectorSettings : virtual public ::IceDelegate::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*) = 0;

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::RDoublePtr getVoltage(const ::Ice::Context*) = 0;

    virtual void setVoltage(const ::omero::RDoublePtr&, const ::Ice::Context*) = 0;

    virtual ::omero::RDoublePtr getGain(const ::Ice::Context*) = 0;

    virtual void setGain(const ::omero::RDoublePtr&, const ::Ice::Context*) = 0;

    virtual ::omero::RDoublePtr getOffsetValue(const ::Ice::Context*) = 0;

    virtual void setOffsetValue(const ::omero::RDoublePtr&, const ::Ice::Context*) = 0;

    virtual ::omero::RDoublePtr getReadOutRate(const ::Ice::Context*) = 0;

    virtual void setReadOutRate(const ::omero::RDoublePtr&, const ::Ice::Context*) = 0;

    virtual ::omero::model::BinningPtr getBinning(const ::Ice::Context*) = 0;

    virtual void setBinning(const ::omero::model::BinningPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::RIntPtr getIntegration(const ::Ice::Context*) = 0;

    virtual void setIntegration(const ::omero::RIntPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::RDoublePtr getZoom(const ::Ice::Context*) = 0;

    virtual void setZoom(const ::omero::RDoublePtr&, const ::Ice::Context*) = 0;

    virtual ::omero::model::DetectorPtr getDetector(const ::Ice::Context*) = 0;

    virtual void setDetector(const ::omero::model::DetectorPtr&, const ::Ice::Context*) = 0;
};

}

}

}

namespace IceDelegateM
{

namespace omero
{

namespace model
{

class DetectorSettings : virtual public ::IceDelegate::omero::model::DetectorSettings,
                         virtual public ::IceDelegateM::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::RDoublePtr getVoltage(const ::Ice::Context*);

    virtual void setVoltage(const ::omero::RDoublePtr&, const ::Ice::Context*);

    virtual ::omero::RDoublePtr getGain(const ::Ice::Context*);

    virtual void setGain(const ::omero::RDoublePtr&, const ::Ice::Context*);

    virtual ::omero::RDoublePtr getOffsetValue(const ::Ice::Context*);

    virtual void setOffsetValue(const ::omero::RDoublePtr&, const ::Ice::Context*);

    virtual ::omero::RDoublePtr getReadOutRate(const ::Ice::Context*);

    virtual void setReadOutRate(const ::omero::RDoublePtr&, const ::Ice::Context*);

    virtual ::omero::model::BinningPtr getBinning(const ::Ice::Context*);

    virtual void setBinning(const ::omero::model::BinningPtr&, const ::Ice::Context*);

    virtual ::omero::RIntPtr getIntegration(const ::Ice::Context*);

    virtual void setIntegration(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::RDoublePtr getZoom(const ::Ice::Context*);

    virtual void setZoom(const ::omero::RDoublePtr&, const ::Ice::Context*);

    virtual ::omero::model::DetectorPtr getDetector(const ::Ice::Context*);

    virtual void setDetector(const ::omero::model::DetectorPtr&, const ::Ice::Context*);
};

}

}

}

namespace IceDelegateD
{

namespace omero
{

namespace model
{

class DetectorSettings : virtual public ::IceDelegate::omero::model::DetectorSettings,
                         virtual public ::IceDelegateD::omero::model::IObject
{
public:

    virtual ::omero::RIntPtr getVersion(const ::Ice::Context*);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::RDoublePtr getVoltage(const ::Ice::Context*);

    virtual void setVoltage(const ::omero::RDoublePtr&, const ::Ice::Context*);

    virtual ::omero::RDoublePtr getGain(const ::Ice::Context*);

    virtual void setGain(const ::omero::RDoublePtr&, const ::Ice::Context*);

    virtual ::omero::RDoublePtr getOffsetValue(const ::Ice::Context*);

    virtual void setOffsetValue(const ::omero::RDoublePtr&, const ::Ice::Context*);

    virtual ::omero::RDoublePtr getReadOutRate(const ::Ice::Context*);

    virtual void setReadOutRate(const ::omero::RDoublePtr&, const ::Ice::Context*);

    virtual ::omero::model::BinningPtr getBinning(const ::Ice::Context*);

    virtual void setBinning(const ::omero::model::BinningPtr&, const ::Ice::Context*);

    virtual ::omero::RIntPtr getIntegration(const ::Ice::Context*);

    virtual void setIntegration(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::RDoublePtr getZoom(const ::Ice::Context*);

    virtual void setZoom(const ::omero::RDoublePtr&, const ::Ice::Context*);

    virtual ::omero::model::DetectorPtr getDetector(const ::Ice::Context*);

    virtual void setDetector(const ::omero::model::DetectorPtr&, const ::Ice::Context*);
};

}

}

}

namespace omero
{

namespace model
{

class DetectorSettings : public ::omero::model::IObject
{
public:

    typedef DetectorSettingsPrx ProxyType;
    typedef DetectorSettingsPtr PointerType;
    
    DetectorSettings() {}
    DetectorSettings(const ::omero::RLongPtr&, const ::omero::model::DetailsPtr&, bool, const ::omero::RIntPtr&, const ::omero::RDoublePtr&, const ::omero::RDoublePtr&, const ::omero::RDoublePtr&, const ::omero::RDoublePtr&, const ::omero::model::BinningPtr&, const ::omero::RIntPtr&, const ::omero::RDoublePtr&, const ::omero::model::DetectorPtr&);
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    virtual ::omero::RIntPtr getVersion(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setVersion(const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RDoublePtr getVoltage(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getVoltage(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setVoltage(const ::omero::RDoublePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setVoltage(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RDoublePtr getGain(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getGain(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setGain(const ::omero::RDoublePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setGain(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RDoublePtr getOffsetValue(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getOffsetValue(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setOffsetValue(const ::omero::RDoublePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setOffsetValue(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RDoublePtr getReadOutRate(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getReadOutRate(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setReadOutRate(const ::omero::RDoublePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setReadOutRate(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::BinningPtr getBinning(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getBinning(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setBinning(const ::omero::model::BinningPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setBinning(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RIntPtr getIntegration(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getIntegration(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setIntegration(const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setIntegration(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RDoublePtr getZoom(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getZoom(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setZoom(const ::omero::RDoublePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setZoom(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::model::DetectorPtr getDetector(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getDetector(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setDetector(const ::omero::model::DetectorPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setDetector(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif

protected:

    ::omero::RIntPtr version;

    ::omero::RDoublePtr voltage;

    ::omero::RDoublePtr gain;

    ::omero::RDoublePtr offsetValue;

    ::omero::RDoublePtr readOutRate;

    ::omero::model::BinningPtr binning;

    ::omero::RIntPtr integration;

    ::omero::RDoublePtr zoom;

    ::omero::model::DetectorPtr detector;
};

inline bool operator==(const DetectorSettings& l, const DetectorSettings& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const DetectorSettings& l, const DetectorSettings& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

}

namespace omero
{

namespace model
{

template<class T>
class CallbackNC_DetectorSettings_getVersion : public Callback_DetectorSettings_getVersion_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RIntPtr&);

    CallbackNC_DetectorSettings_getVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::DetectorSettingsPrx __proxy = ::omero::model::DetectorSettingsPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_DetectorSettings_getVersionPtr
newCallback_DetectorSettings_getVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DetectorSettings_getVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DetectorSettings_getVersionPtr
newCallback_DetectorSettings_getVersion(T* instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DetectorSettings_getVersion<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_DetectorSettings_getVersion : public Callback_DetectorSettings_getVersion_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RIntPtr&, const CT&);

    Callback_DetectorSettings_getVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::DetectorSettingsPrx __proxy = ::omero::model::DetectorSettingsPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_DetectorSettings_getVersionPtr
newCallback_DetectorSettings_getVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DetectorSettings_getVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DetectorSettings_getVersionPtr
newCallback_DetectorSettings_getVersion(T* instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DetectorSettings_getVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_DetectorSettings_setVersion : public Callback_DetectorSettings_setVersion_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_DetectorSettings_setVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_DetectorSettings_setVersionPtr
newCallback_DetectorSettings_setVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DetectorSettings_setVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DetectorSettings_setVersionPtr
newCallback_DetectorSettings_setVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DetectorSettings_setVersion<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_DetectorSettings_setVersionPtr
newCallback_DetectorSettings_setVersion(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DetectorSettings_setVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DetectorSettings_setVersionPtr
newCallback_DetectorSettings_setVersion(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DetectorSettings_setVersion<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_DetectorSettings_setVersion : public Callback_DetectorSettings_setVersion_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_DetectorSettings_setVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_DetectorSettings_setVersionPtr
newCallback_DetectorSettings_setVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DetectorSettings_setVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DetectorSettings_setVersionPtr
newCallback_DetectorSettings_setVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DetectorSettings_setVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_DetectorSettings_setVersionPtr
newCallback_DetectorSettings_setVersion(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DetectorSettings_setVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DetectorSettings_setVersionPtr
newCallback_DetectorSettings_setVersion(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DetectorSettings_setVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_DetectorSettings_getVoltage : public Callback_DetectorSettings_getVoltage_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RDoublePtr&);

    CallbackNC_DetectorSettings_getVoltage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::DetectorSettingsPrx __proxy = ::omero::model::DetectorSettingsPrx::uncheckedCast(__result->getProxy());
        ::omero::RDoublePtr __ret;
        try
        {
            __ret = __proxy->end_getVoltage(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_DetectorSettings_getVoltagePtr
newCallback_DetectorSettings_getVoltage(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RDoublePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DetectorSettings_getVoltage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DetectorSettings_getVoltagePtr
newCallback_DetectorSettings_getVoltage(T* instance, void (T::*cb)(const ::omero::RDoublePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DetectorSettings_getVoltage<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_DetectorSettings_getVoltage : public Callback_DetectorSettings_getVoltage_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RDoublePtr&, const CT&);

    Callback_DetectorSettings_getVoltage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::DetectorSettingsPrx __proxy = ::omero::model::DetectorSettingsPrx::uncheckedCast(__result->getProxy());
        ::omero::RDoublePtr __ret;
        try
        {
            __ret = __proxy->end_getVoltage(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_DetectorSettings_getVoltagePtr
newCallback_DetectorSettings_getVoltage(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RDoublePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DetectorSettings_getVoltage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DetectorSettings_getVoltagePtr
newCallback_DetectorSettings_getVoltage(T* instance, void (T::*cb)(const ::omero::RDoublePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DetectorSettings_getVoltage<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_DetectorSettings_setVoltage : public Callback_DetectorSettings_setVoltage_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_DetectorSettings_setVoltage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_DetectorSettings_setVoltagePtr
newCallback_DetectorSettings_setVoltage(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DetectorSettings_setVoltage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DetectorSettings_setVoltagePtr
newCallback_DetectorSettings_setVoltage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DetectorSettings_setVoltage<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_DetectorSettings_setVoltagePtr
newCallback_DetectorSettings_setVoltage(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DetectorSettings_setVoltage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DetectorSettings_setVoltagePtr
newCallback_DetectorSettings_setVoltage(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DetectorSettings_setVoltage<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_DetectorSettings_setVoltage : public Callback_DetectorSettings_setVoltage_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_DetectorSettings_setVoltage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_DetectorSettings_setVoltagePtr
newCallback_DetectorSettings_setVoltage(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DetectorSettings_setVoltage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DetectorSettings_setVoltagePtr
newCallback_DetectorSettings_setVoltage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DetectorSettings_setVoltage<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_DetectorSettings_setVoltagePtr
newCallback_DetectorSettings_setVoltage(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DetectorSettings_setVoltage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DetectorSettings_setVoltagePtr
newCallback_DetectorSettings_setVoltage(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DetectorSettings_setVoltage<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_DetectorSettings_getGain : public Callback_DetectorSettings_getGain_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RDoublePtr&);

    CallbackNC_DetectorSettings_getGain(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::DetectorSettingsPrx __proxy = ::omero::model::DetectorSettingsPrx::uncheckedCast(__result->getProxy());
        ::omero::RDoublePtr __ret;
        try
        {
            __ret = __proxy->end_getGain(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_DetectorSettings_getGainPtr
newCallback_DetectorSettings_getGain(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RDoublePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DetectorSettings_getGain<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DetectorSettings_getGainPtr
newCallback_DetectorSettings_getGain(T* instance, void (T::*cb)(const ::omero::RDoublePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DetectorSettings_getGain<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_DetectorSettings_getGain : public Callback_DetectorSettings_getGain_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RDoublePtr&, const CT&);

    Callback_DetectorSettings_getGain(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::DetectorSettingsPrx __proxy = ::omero::model::DetectorSettingsPrx::uncheckedCast(__result->getProxy());
        ::omero::RDoublePtr __ret;
        try
        {
            __ret = __proxy->end_getGain(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_DetectorSettings_getGainPtr
newCallback_DetectorSettings_getGain(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RDoublePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DetectorSettings_getGain<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DetectorSettings_getGainPtr
newCallback_DetectorSettings_getGain(T* instance, void (T::*cb)(const ::omero::RDoublePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DetectorSettings_getGain<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_DetectorSettings_setGain : public Callback_DetectorSettings_setGain_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_DetectorSettings_setGain(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_DetectorSettings_setGainPtr
newCallback_DetectorSettings_setGain(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DetectorSettings_setGain<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DetectorSettings_setGainPtr
newCallback_DetectorSettings_setGain(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DetectorSettings_setGain<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_DetectorSettings_setGainPtr
newCallback_DetectorSettings_setGain(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DetectorSettings_setGain<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DetectorSettings_setGainPtr
newCallback_DetectorSettings_setGain(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DetectorSettings_setGain<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_DetectorSettings_setGain : public Callback_DetectorSettings_setGain_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_DetectorSettings_setGain(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_DetectorSettings_setGainPtr
newCallback_DetectorSettings_setGain(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DetectorSettings_setGain<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DetectorSettings_setGainPtr
newCallback_DetectorSettings_setGain(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DetectorSettings_setGain<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_DetectorSettings_setGainPtr
newCallback_DetectorSettings_setGain(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DetectorSettings_setGain<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DetectorSettings_setGainPtr
newCallback_DetectorSettings_setGain(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DetectorSettings_setGain<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_DetectorSettings_getOffsetValue : public Callback_DetectorSettings_getOffsetValue_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RDoublePtr&);

    CallbackNC_DetectorSettings_getOffsetValue(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::DetectorSettingsPrx __proxy = ::omero::model::DetectorSettingsPrx::uncheckedCast(__result->getProxy());
        ::omero::RDoublePtr __ret;
        try
        {
            __ret = __proxy->end_getOffsetValue(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_DetectorSettings_getOffsetValuePtr
newCallback_DetectorSettings_getOffsetValue(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RDoublePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DetectorSettings_getOffsetValue<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DetectorSettings_getOffsetValuePtr
newCallback_DetectorSettings_getOffsetValue(T* instance, void (T::*cb)(const ::omero::RDoublePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DetectorSettings_getOffsetValue<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_DetectorSettings_getOffsetValue : public Callback_DetectorSettings_getOffsetValue_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RDoublePtr&, const CT&);

    Callback_DetectorSettings_getOffsetValue(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::DetectorSettingsPrx __proxy = ::omero::model::DetectorSettingsPrx::uncheckedCast(__result->getProxy());
        ::omero::RDoublePtr __ret;
        try
        {
            __ret = __proxy->end_getOffsetValue(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_DetectorSettings_getOffsetValuePtr
newCallback_DetectorSettings_getOffsetValue(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RDoublePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DetectorSettings_getOffsetValue<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DetectorSettings_getOffsetValuePtr
newCallback_DetectorSettings_getOffsetValue(T* instance, void (T::*cb)(const ::omero::RDoublePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DetectorSettings_getOffsetValue<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_DetectorSettings_setOffsetValue : public Callback_DetectorSettings_setOffsetValue_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_DetectorSettings_setOffsetValue(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_DetectorSettings_setOffsetValuePtr
newCallback_DetectorSettings_setOffsetValue(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DetectorSettings_setOffsetValue<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DetectorSettings_setOffsetValuePtr
newCallback_DetectorSettings_setOffsetValue(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DetectorSettings_setOffsetValue<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_DetectorSettings_setOffsetValuePtr
newCallback_DetectorSettings_setOffsetValue(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DetectorSettings_setOffsetValue<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DetectorSettings_setOffsetValuePtr
newCallback_DetectorSettings_setOffsetValue(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DetectorSettings_setOffsetValue<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_DetectorSettings_setOffsetValue : public Callback_DetectorSettings_setOffsetValue_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_DetectorSettings_setOffsetValue(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_DetectorSettings_setOffsetValuePtr
newCallback_DetectorSettings_setOffsetValue(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DetectorSettings_setOffsetValue<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DetectorSettings_setOffsetValuePtr
newCallback_DetectorSettings_setOffsetValue(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DetectorSettings_setOffsetValue<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_DetectorSettings_setOffsetValuePtr
newCallback_DetectorSettings_setOffsetValue(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DetectorSettings_setOffsetValue<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DetectorSettings_setOffsetValuePtr
newCallback_DetectorSettings_setOffsetValue(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DetectorSettings_setOffsetValue<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_DetectorSettings_getReadOutRate : public Callback_DetectorSettings_getReadOutRate_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RDoublePtr&);

    CallbackNC_DetectorSettings_getReadOutRate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::DetectorSettingsPrx __proxy = ::omero::model::DetectorSettingsPrx::uncheckedCast(__result->getProxy());
        ::omero::RDoublePtr __ret;
        try
        {
            __ret = __proxy->end_getReadOutRate(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_DetectorSettings_getReadOutRatePtr
newCallback_DetectorSettings_getReadOutRate(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RDoublePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DetectorSettings_getReadOutRate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DetectorSettings_getReadOutRatePtr
newCallback_DetectorSettings_getReadOutRate(T* instance, void (T::*cb)(const ::omero::RDoublePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DetectorSettings_getReadOutRate<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_DetectorSettings_getReadOutRate : public Callback_DetectorSettings_getReadOutRate_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RDoublePtr&, const CT&);

    Callback_DetectorSettings_getReadOutRate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::DetectorSettingsPrx __proxy = ::omero::model::DetectorSettingsPrx::uncheckedCast(__result->getProxy());
        ::omero::RDoublePtr __ret;
        try
        {
            __ret = __proxy->end_getReadOutRate(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_DetectorSettings_getReadOutRatePtr
newCallback_DetectorSettings_getReadOutRate(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RDoublePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DetectorSettings_getReadOutRate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DetectorSettings_getReadOutRatePtr
newCallback_DetectorSettings_getReadOutRate(T* instance, void (T::*cb)(const ::omero::RDoublePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DetectorSettings_getReadOutRate<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_DetectorSettings_setReadOutRate : public Callback_DetectorSettings_setReadOutRate_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_DetectorSettings_setReadOutRate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_DetectorSettings_setReadOutRatePtr
newCallback_DetectorSettings_setReadOutRate(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DetectorSettings_setReadOutRate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DetectorSettings_setReadOutRatePtr
newCallback_DetectorSettings_setReadOutRate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DetectorSettings_setReadOutRate<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_DetectorSettings_setReadOutRatePtr
newCallback_DetectorSettings_setReadOutRate(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DetectorSettings_setReadOutRate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DetectorSettings_setReadOutRatePtr
newCallback_DetectorSettings_setReadOutRate(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DetectorSettings_setReadOutRate<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_DetectorSettings_setReadOutRate : public Callback_DetectorSettings_setReadOutRate_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_DetectorSettings_setReadOutRate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_DetectorSettings_setReadOutRatePtr
newCallback_DetectorSettings_setReadOutRate(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DetectorSettings_setReadOutRate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DetectorSettings_setReadOutRatePtr
newCallback_DetectorSettings_setReadOutRate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DetectorSettings_setReadOutRate<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_DetectorSettings_setReadOutRatePtr
newCallback_DetectorSettings_setReadOutRate(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DetectorSettings_setReadOutRate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DetectorSettings_setReadOutRatePtr
newCallback_DetectorSettings_setReadOutRate(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DetectorSettings_setReadOutRate<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_DetectorSettings_getBinning : public Callback_DetectorSettings_getBinning_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::BinningPtr&);

    CallbackNC_DetectorSettings_getBinning(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::DetectorSettingsPrx __proxy = ::omero::model::DetectorSettingsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::BinningPtr __ret;
        try
        {
            __ret = __proxy->end_getBinning(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_DetectorSettings_getBinningPtr
newCallback_DetectorSettings_getBinning(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::BinningPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DetectorSettings_getBinning<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DetectorSettings_getBinningPtr
newCallback_DetectorSettings_getBinning(T* instance, void (T::*cb)(const ::omero::model::BinningPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DetectorSettings_getBinning<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_DetectorSettings_getBinning : public Callback_DetectorSettings_getBinning_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::BinningPtr&, const CT&);

    Callback_DetectorSettings_getBinning(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::DetectorSettingsPrx __proxy = ::omero::model::DetectorSettingsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::BinningPtr __ret;
        try
        {
            __ret = __proxy->end_getBinning(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_DetectorSettings_getBinningPtr
newCallback_DetectorSettings_getBinning(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::BinningPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DetectorSettings_getBinning<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DetectorSettings_getBinningPtr
newCallback_DetectorSettings_getBinning(T* instance, void (T::*cb)(const ::omero::model::BinningPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DetectorSettings_getBinning<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_DetectorSettings_setBinning : public Callback_DetectorSettings_setBinning_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_DetectorSettings_setBinning(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_DetectorSettings_setBinningPtr
newCallback_DetectorSettings_setBinning(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DetectorSettings_setBinning<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DetectorSettings_setBinningPtr
newCallback_DetectorSettings_setBinning(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DetectorSettings_setBinning<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_DetectorSettings_setBinningPtr
newCallback_DetectorSettings_setBinning(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DetectorSettings_setBinning<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DetectorSettings_setBinningPtr
newCallback_DetectorSettings_setBinning(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DetectorSettings_setBinning<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_DetectorSettings_setBinning : public Callback_DetectorSettings_setBinning_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_DetectorSettings_setBinning(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_DetectorSettings_setBinningPtr
newCallback_DetectorSettings_setBinning(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DetectorSettings_setBinning<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DetectorSettings_setBinningPtr
newCallback_DetectorSettings_setBinning(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DetectorSettings_setBinning<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_DetectorSettings_setBinningPtr
newCallback_DetectorSettings_setBinning(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DetectorSettings_setBinning<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DetectorSettings_setBinningPtr
newCallback_DetectorSettings_setBinning(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DetectorSettings_setBinning<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_DetectorSettings_getIntegration : public Callback_DetectorSettings_getIntegration_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RIntPtr&);

    CallbackNC_DetectorSettings_getIntegration(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::DetectorSettingsPrx __proxy = ::omero::model::DetectorSettingsPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getIntegration(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_DetectorSettings_getIntegrationPtr
newCallback_DetectorSettings_getIntegration(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DetectorSettings_getIntegration<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DetectorSettings_getIntegrationPtr
newCallback_DetectorSettings_getIntegration(T* instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DetectorSettings_getIntegration<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_DetectorSettings_getIntegration : public Callback_DetectorSettings_getIntegration_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RIntPtr&, const CT&);

    Callback_DetectorSettings_getIntegration(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::DetectorSettingsPrx __proxy = ::omero::model::DetectorSettingsPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getIntegration(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_DetectorSettings_getIntegrationPtr
newCallback_DetectorSettings_getIntegration(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DetectorSettings_getIntegration<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DetectorSettings_getIntegrationPtr
newCallback_DetectorSettings_getIntegration(T* instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DetectorSettings_getIntegration<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_DetectorSettings_setIntegration : public Callback_DetectorSettings_setIntegration_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_DetectorSettings_setIntegration(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_DetectorSettings_setIntegrationPtr
newCallback_DetectorSettings_setIntegration(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DetectorSettings_setIntegration<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DetectorSettings_setIntegrationPtr
newCallback_DetectorSettings_setIntegration(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DetectorSettings_setIntegration<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_DetectorSettings_setIntegrationPtr
newCallback_DetectorSettings_setIntegration(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DetectorSettings_setIntegration<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DetectorSettings_setIntegrationPtr
newCallback_DetectorSettings_setIntegration(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DetectorSettings_setIntegration<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_DetectorSettings_setIntegration : public Callback_DetectorSettings_setIntegration_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_DetectorSettings_setIntegration(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_DetectorSettings_setIntegrationPtr
newCallback_DetectorSettings_setIntegration(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DetectorSettings_setIntegration<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DetectorSettings_setIntegrationPtr
newCallback_DetectorSettings_setIntegration(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DetectorSettings_setIntegration<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_DetectorSettings_setIntegrationPtr
newCallback_DetectorSettings_setIntegration(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DetectorSettings_setIntegration<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DetectorSettings_setIntegrationPtr
newCallback_DetectorSettings_setIntegration(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DetectorSettings_setIntegration<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_DetectorSettings_getZoom : public Callback_DetectorSettings_getZoom_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RDoublePtr&);

    CallbackNC_DetectorSettings_getZoom(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::DetectorSettingsPrx __proxy = ::omero::model::DetectorSettingsPrx::uncheckedCast(__result->getProxy());
        ::omero::RDoublePtr __ret;
        try
        {
            __ret = __proxy->end_getZoom(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_DetectorSettings_getZoomPtr
newCallback_DetectorSettings_getZoom(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RDoublePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DetectorSettings_getZoom<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DetectorSettings_getZoomPtr
newCallback_DetectorSettings_getZoom(T* instance, void (T::*cb)(const ::omero::RDoublePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DetectorSettings_getZoom<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_DetectorSettings_getZoom : public Callback_DetectorSettings_getZoom_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RDoublePtr&, const CT&);

    Callback_DetectorSettings_getZoom(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::DetectorSettingsPrx __proxy = ::omero::model::DetectorSettingsPrx::uncheckedCast(__result->getProxy());
        ::omero::RDoublePtr __ret;
        try
        {
            __ret = __proxy->end_getZoom(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_DetectorSettings_getZoomPtr
newCallback_DetectorSettings_getZoom(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RDoublePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DetectorSettings_getZoom<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DetectorSettings_getZoomPtr
newCallback_DetectorSettings_getZoom(T* instance, void (T::*cb)(const ::omero::RDoublePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DetectorSettings_getZoom<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_DetectorSettings_setZoom : public Callback_DetectorSettings_setZoom_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_DetectorSettings_setZoom(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_DetectorSettings_setZoomPtr
newCallback_DetectorSettings_setZoom(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DetectorSettings_setZoom<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DetectorSettings_setZoomPtr
newCallback_DetectorSettings_setZoom(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DetectorSettings_setZoom<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_DetectorSettings_setZoomPtr
newCallback_DetectorSettings_setZoom(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DetectorSettings_setZoom<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DetectorSettings_setZoomPtr
newCallback_DetectorSettings_setZoom(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DetectorSettings_setZoom<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_DetectorSettings_setZoom : public Callback_DetectorSettings_setZoom_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_DetectorSettings_setZoom(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_DetectorSettings_setZoomPtr
newCallback_DetectorSettings_setZoom(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DetectorSettings_setZoom<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DetectorSettings_setZoomPtr
newCallback_DetectorSettings_setZoom(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DetectorSettings_setZoom<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_DetectorSettings_setZoomPtr
newCallback_DetectorSettings_setZoom(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DetectorSettings_setZoom<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DetectorSettings_setZoomPtr
newCallback_DetectorSettings_setZoom(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DetectorSettings_setZoom<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_DetectorSettings_getDetector : public Callback_DetectorSettings_getDetector_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::DetectorPtr&);

    CallbackNC_DetectorSettings_getDetector(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::DetectorSettingsPrx __proxy = ::omero::model::DetectorSettingsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::DetectorPtr __ret;
        try
        {
            __ret = __proxy->end_getDetector(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_DetectorSettings_getDetectorPtr
newCallback_DetectorSettings_getDetector(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::DetectorPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DetectorSettings_getDetector<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DetectorSettings_getDetectorPtr
newCallback_DetectorSettings_getDetector(T* instance, void (T::*cb)(const ::omero::model::DetectorPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DetectorSettings_getDetector<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_DetectorSettings_getDetector : public Callback_DetectorSettings_getDetector_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::DetectorPtr&, const CT&);

    Callback_DetectorSettings_getDetector(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::DetectorSettingsPrx __proxy = ::omero::model::DetectorSettingsPrx::uncheckedCast(__result->getProxy());
        ::omero::model::DetectorPtr __ret;
        try
        {
            __ret = __proxy->end_getDetector(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_DetectorSettings_getDetectorPtr
newCallback_DetectorSettings_getDetector(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::DetectorPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DetectorSettings_getDetector<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DetectorSettings_getDetectorPtr
newCallback_DetectorSettings_getDetector(T* instance, void (T::*cb)(const ::omero::model::DetectorPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DetectorSettings_getDetector<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_DetectorSettings_setDetector : public Callback_DetectorSettings_setDetector_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_DetectorSettings_setDetector(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_DetectorSettings_setDetectorPtr
newCallback_DetectorSettings_setDetector(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DetectorSettings_setDetector<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DetectorSettings_setDetectorPtr
newCallback_DetectorSettings_setDetector(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DetectorSettings_setDetector<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_DetectorSettings_setDetectorPtr
newCallback_DetectorSettings_setDetector(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DetectorSettings_setDetector<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DetectorSettings_setDetectorPtr
newCallback_DetectorSettings_setDetector(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DetectorSettings_setDetector<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_DetectorSettings_setDetector : public Callback_DetectorSettings_setDetector_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_DetectorSettings_setDetector(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_DetectorSettings_setDetectorPtr
newCallback_DetectorSettings_setDetector(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DetectorSettings_setDetector<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DetectorSettings_setDetectorPtr
newCallback_DetectorSettings_setDetector(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DetectorSettings_setDetector<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_DetectorSettings_setDetectorPtr
newCallback_DetectorSettings_setDetector(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DetectorSettings_setDetector<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DetectorSettings_setDetectorPtr
newCallback_DetectorSettings_setDetector(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DetectorSettings_setDetector<T, CT>(instance, 0, excb, sentcb);
}

}

}

#endif
