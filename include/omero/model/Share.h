// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Share.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_Share_h__
#define __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_Share_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <omero/model/IObject.h>
#include <omero/RTypes.h>
#include <omero/System.h>
#include <omero/Collections.h>
#include <omero/model/Session.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace omero
{

namespace model
{

class ExperimenterGroup;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::ExperimenterGroup>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::ExperimenterGroup*);

class Node;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Node>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Node*);

class Experimenter;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Experimenter>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Experimenter*);

class Event;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Event>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Event*);

class SessionAnnotationLink;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::SessionAnnotationLink>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::SessionAnnotationLink*);

class Annotation;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Annotation>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Annotation*);

class Details;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Details>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Details*);

class Share;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Share>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Share*);

}

}

}

namespace omero
{

namespace model
{

class ExperimenterGroup;
bool operator==(const ExperimenterGroup&, const ExperimenterGroup&);
bool operator<(const ExperimenterGroup&, const ExperimenterGroup&);
::Ice::Object* upCast(::omero::model::ExperimenterGroup*);
typedef ::IceInternal::Handle< ::omero::model::ExperimenterGroup> ExperimenterGroupPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::ExperimenterGroup> ExperimenterGroupPrx;
void __patch(ExperimenterGroupPtr&, const ::Ice::ObjectPtr&);

class Node;
bool operator==(const Node&, const Node&);
bool operator<(const Node&, const Node&);
::Ice::Object* upCast(::omero::model::Node*);
typedef ::IceInternal::Handle< ::omero::model::Node> NodePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Node> NodePrx;
void __patch(NodePtr&, const ::Ice::ObjectPtr&);

class Experimenter;
bool operator==(const Experimenter&, const Experimenter&);
bool operator<(const Experimenter&, const Experimenter&);
::Ice::Object* upCast(::omero::model::Experimenter*);
typedef ::IceInternal::Handle< ::omero::model::Experimenter> ExperimenterPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Experimenter> ExperimenterPrx;
void __patch(ExperimenterPtr&, const ::Ice::ObjectPtr&);

class Event;
bool operator==(const Event&, const Event&);
bool operator<(const Event&, const Event&);
::Ice::Object* upCast(::omero::model::Event*);
typedef ::IceInternal::Handle< ::omero::model::Event> EventPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Event> EventPrx;
void __patch(EventPtr&, const ::Ice::ObjectPtr&);

class SessionAnnotationLink;
bool operator==(const SessionAnnotationLink&, const SessionAnnotationLink&);
bool operator<(const SessionAnnotationLink&, const SessionAnnotationLink&);
::Ice::Object* upCast(::omero::model::SessionAnnotationLink*);
typedef ::IceInternal::Handle< ::omero::model::SessionAnnotationLink> SessionAnnotationLinkPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::SessionAnnotationLink> SessionAnnotationLinkPrx;
void __patch(SessionAnnotationLinkPtr&, const ::Ice::ObjectPtr&);

class Annotation;
bool operator==(const Annotation&, const Annotation&);
bool operator<(const Annotation&, const Annotation&);
::Ice::Object* upCast(::omero::model::Annotation*);
typedef ::IceInternal::Handle< ::omero::model::Annotation> AnnotationPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Annotation> AnnotationPrx;
void __patch(AnnotationPtr&, const ::Ice::ObjectPtr&);

class Details;
bool operator==(const Details&, const Details&);
bool operator<(const Details&, const Details&);
::Ice::Object* upCast(::omero::model::Details*);
typedef ::IceInternal::Handle< ::omero::model::Details> DetailsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Details> DetailsPrx;
void __patch(DetailsPtr&, const ::Ice::ObjectPtr&);

class Share;
bool operator==(const Share&, const Share&);
bool operator<(const Share&, const Share&);
::Ice::Object* upCast(::omero::model::Share*);
typedef ::IceInternal::Handle< ::omero::model::Share> SharePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Share> SharePrx;
void __patch(SharePtr&, const ::Ice::ObjectPtr&);

}

}

namespace omero
{

namespace model
{

class Callback_Share_getGroup_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Share_getGroup_Base> Callback_Share_getGroupPtr;

class Callback_Share_setGroup_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Share_setGroup_Base> Callback_Share_setGroupPtr;

class Callback_Share_getItemCount_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Share_getItemCount_Base> Callback_Share_getItemCountPtr;

class Callback_Share_setItemCount_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Share_setItemCount_Base> Callback_Share_setItemCountPtr;

class Callback_Share_getActive_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Share_getActive_Base> Callback_Share_getActivePtr;

class Callback_Share_setActive_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Share_setActive_Base> Callback_Share_setActivePtr;

class Callback_Share_getData_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Share_getData_Base> Callback_Share_getDataPtr;

class Callback_Share_setData_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Share_setData_Base> Callback_Share_setDataPtr;

}

}

namespace IceProxy
{

namespace omero
{

namespace model
{

class Share : virtual public ::IceProxy::omero::model::Session
{
public:

    ::omero::model::ExperimenterGroupPtr getGroup()
    {
        return getGroup(0);
    }
    ::omero::model::ExperimenterGroupPtr getGroup(const ::Ice::Context& __ctx)
    {
        return getGroup(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getGroup(const ::IceInternal::Function<void (const ::omero::model::ExperimenterGroupPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getGroup(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getGroup(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getGroup(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getGroup(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::ExperimenterGroupPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getGroup(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getGroup(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getGroup(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getGroup(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::ExperimenterGroupPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::ExperimenterGroupPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::SharePrx __proxy = ::omero::model::SharePrx::uncheckedCast(__result->getProxy());
                ::omero::model::ExperimenterGroupPtr __ret;
                try
                {
                    __ret = __proxy->end_getGroup(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::ExperimenterGroupPtr&)> _response;
        };
        return begin_getGroup(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getGroup()
    {
        return begin_getGroup(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getGroup(const ::Ice::Context& __ctx)
    {
        return begin_getGroup(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getGroup(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getGroup(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getGroup(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getGroup(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getGroup(const ::omero::model::Callback_Share_getGroupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getGroup(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getGroup(const ::Ice::Context& __ctx, const ::omero::model::Callback_Share_getGroupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getGroup(&__ctx, __del, __cookie);
    }

    ::omero::model::ExperimenterGroupPtr end_getGroup(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::ExperimenterGroupPtr getGroup(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getGroup(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setGroup(const ::omero::model::ExperimenterGroupPtr& theGroup)
    {
        setGroup(theGroup, 0);
    }
    void setGroup(const ::omero::model::ExperimenterGroupPtr& theGroup, const ::Ice::Context& __ctx)
    {
        setGroup(theGroup, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setGroup(const ::omero::model::ExperimenterGroupPtr& theGroup, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setGroup(theGroup, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setGroup(const ::omero::model::ExperimenterGroupPtr& theGroup, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setGroup(theGroup, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setGroup(const ::omero::model::ExperimenterGroupPtr& theGroup, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setGroup(theGroup, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setGroup(const ::omero::model::ExperimenterGroupPtr& theGroup, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setGroup(theGroup, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setGroup(const ::omero::model::ExperimenterGroupPtr& theGroup)
    {
        return begin_setGroup(theGroup, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setGroup(const ::omero::model::ExperimenterGroupPtr& theGroup, const ::Ice::Context& __ctx)
    {
        return begin_setGroup(theGroup, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setGroup(const ::omero::model::ExperimenterGroupPtr& theGroup, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setGroup(theGroup, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setGroup(const ::omero::model::ExperimenterGroupPtr& theGroup, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setGroup(theGroup, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setGroup(const ::omero::model::ExperimenterGroupPtr& theGroup, const ::omero::model::Callback_Share_setGroupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setGroup(theGroup, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setGroup(const ::omero::model::ExperimenterGroupPtr& theGroup, const ::Ice::Context& __ctx, const ::omero::model::Callback_Share_setGroupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setGroup(theGroup, &__ctx, __del, __cookie);
    }

    void end_setGroup(const ::Ice::AsyncResultPtr&);
    
private:

    void setGroup(const ::omero::model::ExperimenterGroupPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setGroup(const ::omero::model::ExperimenterGroupPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RLongPtr getItemCount()
    {
        return getItemCount(0);
    }
    ::omero::RLongPtr getItemCount(const ::Ice::Context& __ctx)
    {
        return getItemCount(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getItemCount(const ::IceInternal::Function<void (const ::omero::RLongPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getItemCount(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getItemCount(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getItemCount(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getItemCount(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RLongPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getItemCount(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getItemCount(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getItemCount(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getItemCount(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RLongPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RLongPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::SharePrx __proxy = ::omero::model::SharePrx::uncheckedCast(__result->getProxy());
                ::omero::RLongPtr __ret;
                try
                {
                    __ret = __proxy->end_getItemCount(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RLongPtr&)> _response;
        };
        return begin_getItemCount(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getItemCount()
    {
        return begin_getItemCount(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getItemCount(const ::Ice::Context& __ctx)
    {
        return begin_getItemCount(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getItemCount(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getItemCount(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getItemCount(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getItemCount(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getItemCount(const ::omero::model::Callback_Share_getItemCountPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getItemCount(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getItemCount(const ::Ice::Context& __ctx, const ::omero::model::Callback_Share_getItemCountPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getItemCount(&__ctx, __del, __cookie);
    }

    ::omero::RLongPtr end_getItemCount(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RLongPtr getItemCount(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getItemCount(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setItemCount(const ::omero::RLongPtr& theItemCount)
    {
        setItemCount(theItemCount, 0);
    }
    void setItemCount(const ::omero::RLongPtr& theItemCount, const ::Ice::Context& __ctx)
    {
        setItemCount(theItemCount, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setItemCount(const ::omero::RLongPtr& theItemCount, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setItemCount(theItemCount, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setItemCount(const ::omero::RLongPtr& theItemCount, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setItemCount(theItemCount, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setItemCount(const ::omero::RLongPtr& theItemCount, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setItemCount(theItemCount, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setItemCount(const ::omero::RLongPtr& theItemCount, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setItemCount(theItemCount, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setItemCount(const ::omero::RLongPtr& theItemCount)
    {
        return begin_setItemCount(theItemCount, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setItemCount(const ::omero::RLongPtr& theItemCount, const ::Ice::Context& __ctx)
    {
        return begin_setItemCount(theItemCount, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setItemCount(const ::omero::RLongPtr& theItemCount, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setItemCount(theItemCount, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setItemCount(const ::omero::RLongPtr& theItemCount, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setItemCount(theItemCount, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setItemCount(const ::omero::RLongPtr& theItemCount, const ::omero::model::Callback_Share_setItemCountPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setItemCount(theItemCount, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setItemCount(const ::omero::RLongPtr& theItemCount, const ::Ice::Context& __ctx, const ::omero::model::Callback_Share_setItemCountPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setItemCount(theItemCount, &__ctx, __del, __cookie);
    }

    void end_setItemCount(const ::Ice::AsyncResultPtr&);
    
private:

    void setItemCount(const ::omero::RLongPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setItemCount(const ::omero::RLongPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RBoolPtr getActive()
    {
        return getActive(0);
    }
    ::omero::RBoolPtr getActive(const ::Ice::Context& __ctx)
    {
        return getActive(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getActive(const ::IceInternal::Function<void (const ::omero::RBoolPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getActive(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getActive(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getActive(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getActive(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::RBoolPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getActive(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getActive(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getActive(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getActive(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::RBoolPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::RBoolPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::SharePrx __proxy = ::omero::model::SharePrx::uncheckedCast(__result->getProxy());
                ::omero::RBoolPtr __ret;
                try
                {
                    __ret = __proxy->end_getActive(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::RBoolPtr&)> _response;
        };
        return begin_getActive(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getActive()
    {
        return begin_getActive(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getActive(const ::Ice::Context& __ctx)
    {
        return begin_getActive(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getActive(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getActive(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getActive(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getActive(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getActive(const ::omero::model::Callback_Share_getActivePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getActive(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getActive(const ::Ice::Context& __ctx, const ::omero::model::Callback_Share_getActivePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getActive(&__ctx, __del, __cookie);
    }

    ::omero::RBoolPtr end_getActive(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RBoolPtr getActive(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getActive(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setActive(const ::omero::RBoolPtr& theActive)
    {
        setActive(theActive, 0);
    }
    void setActive(const ::omero::RBoolPtr& theActive, const ::Ice::Context& __ctx)
    {
        setActive(theActive, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setActive(const ::omero::RBoolPtr& theActive, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setActive(theActive, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setActive(const ::omero::RBoolPtr& theActive, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setActive(theActive, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setActive(const ::omero::RBoolPtr& theActive, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setActive(theActive, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setActive(const ::omero::RBoolPtr& theActive, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setActive(theActive, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setActive(const ::omero::RBoolPtr& theActive)
    {
        return begin_setActive(theActive, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setActive(const ::omero::RBoolPtr& theActive, const ::Ice::Context& __ctx)
    {
        return begin_setActive(theActive, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setActive(const ::omero::RBoolPtr& theActive, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setActive(theActive, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setActive(const ::omero::RBoolPtr& theActive, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setActive(theActive, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setActive(const ::omero::RBoolPtr& theActive, const ::omero::model::Callback_Share_setActivePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setActive(theActive, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setActive(const ::omero::RBoolPtr& theActive, const ::Ice::Context& __ctx, const ::omero::model::Callback_Share_setActivePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setActive(theActive, &__ctx, __del, __cookie);
    }

    void end_setActive(const ::Ice::AsyncResultPtr&);
    
private:

    void setActive(const ::omero::RBoolPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setActive(const ::omero::RBoolPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::ByteSeq getData()
    {
        return getData(0);
    }
    ::Ice::ByteSeq getData(const ::Ice::Context& __ctx)
    {
        return getData(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getData(const ::IceInternal::Function<void (const ::Ice::ByteSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getData(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getData(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getData(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getData(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::ByteSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getData(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getData(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getData(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getData(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Ice::ByteSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::Ice::ByteSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::model::SharePrx __proxy = ::omero::model::SharePrx::uncheckedCast(__result->getProxy());
                ::Ice::ByteSeq __ret;
                try
                {
                    __ret = __proxy->end_getData(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::Ice::ByteSeq&)> _response;
        };
        return begin_getData(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getData()
    {
        return begin_getData(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getData(const ::Ice::Context& __ctx)
    {
        return begin_getData(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getData(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getData(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getData(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getData(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getData(const ::omero::model::Callback_Share_getDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getData(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getData(const ::Ice::Context& __ctx, const ::omero::model::Callback_Share_getDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getData(&__ctx, __del, __cookie);
    }

    ::Ice::ByteSeq end_getData(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::ByteSeq getData(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getData(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setData(const ::Ice::ByteSeq& theData)
    {
        setData(theData, 0);
    }
    void setData(const ::Ice::ByteSeq& theData, const ::Ice::Context& __ctx)
    {
        setData(theData, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setData(const ::Ice::ByteSeq& theData, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setData(theData, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setData(const ::Ice::ByteSeq& theData, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setData(theData, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setData(const ::Ice::ByteSeq& theData, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setData(theData, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setData(const ::Ice::ByteSeq& theData, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setData(theData, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setData(const ::Ice::ByteSeq& theData)
    {
        return begin_setData(theData, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setData(const ::Ice::ByteSeq& theData, const ::Ice::Context& __ctx)
    {
        return begin_setData(theData, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setData(const ::Ice::ByteSeq& theData, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setData(theData, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setData(const ::Ice::ByteSeq& theData, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setData(theData, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setData(const ::Ice::ByteSeq& theData, const ::omero::model::Callback_Share_setDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setData(theData, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setData(const ::Ice::ByteSeq& theData, const ::Ice::Context& __ctx, const ::omero::model::Callback_Share_setDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setData(theData, &__ctx, __del, __cookie);
    }

    void end_setData(const ::Ice::AsyncResultPtr&);
    
private:

    void setData(const ::Ice::ByteSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setData(const ::Ice::ByteSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Share> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Share*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Share> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Share*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Share> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Share*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Share> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Share*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Share> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Share*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Share> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Share*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Share> ice_secure(bool __secure) const
    {
        return dynamic_cast<Share*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Share> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Share*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Share> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Share*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Share> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Share*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Share> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Share*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Share> ice_twoway() const
    {
        return dynamic_cast<Share*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Share> ice_oneway() const
    {
        return dynamic_cast<Share*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Share> ice_batchOneway() const
    {
        return dynamic_cast<Share*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Share> ice_datagram() const
    {
        return dynamic_cast<Share*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Share> ice_batchDatagram() const
    {
        return dynamic_cast<Share*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Share> ice_compress(bool __compress) const
    {
        return dynamic_cast<Share*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Share> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Share*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Share> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Share*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Share> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Share*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

namespace IceDelegate
{

namespace omero
{

namespace model
{

class Share : virtual public ::IceDelegate::omero::model::Session
{
public:

    virtual ::omero::model::ExperimenterGroupPtr getGroup(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setGroup(const ::omero::model::ExperimenterGroupPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RLongPtr getItemCount(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setItemCount(const ::omero::RLongPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::RBoolPtr getActive(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setActive(const ::omero::RBoolPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::ByteSeq getData(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setData(const ::Ice::ByteSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

}

namespace IceDelegateM
{

namespace omero
{

namespace model
{

class Share : virtual public ::IceDelegate::omero::model::Share,
              virtual public ::IceDelegateM::omero::model::Session
{
public:

    virtual ::omero::model::ExperimenterGroupPtr getGroup(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setGroup(const ::omero::model::ExperimenterGroupPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RLongPtr getItemCount(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setItemCount(const ::omero::RLongPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RBoolPtr getActive(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setActive(const ::omero::RBoolPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::ByteSeq getData(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setData(const ::Ice::ByteSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace IceDelegateD
{

namespace omero
{

namespace model
{

class Share : virtual public ::IceDelegate::omero::model::Share,
              virtual public ::IceDelegateD::omero::model::Session
{
public:

    virtual ::omero::model::ExperimenterGroupPtr getGroup(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setGroup(const ::omero::model::ExperimenterGroupPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RLongPtr getItemCount(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setItemCount(const ::omero::RLongPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::RBoolPtr getActive(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setActive(const ::omero::RBoolPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::ByteSeq getData(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setData(const ::Ice::ByteSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace omero
{

namespace model
{

class Share : public ::omero::model::Session
{
public:

    typedef SharePrx ProxyType;
    typedef SharePtr PointerType;

    Share()
    {
    }

    Share(const ::omero::RLongPtr& __ice_id, const ::omero::model::DetailsPtr& __ice_details, bool __ice_loaded, const ::omero::RIntPtr& __ice_version, const ::omero::model::NodePtr& __ice_node, const ::omero::RStringPtr& __ice_uuid, const ::omero::model::ExperimenterPtr& __ice_owner, const ::omero::RLongPtr& __ice_timeToIdle, const ::omero::RLongPtr& __ice_timeToLive, const ::omero::RTimePtr& __ice_started, const ::omero::RTimePtr& __ice_closed, const ::omero::RStringPtr& __ice_message, const ::omero::RStringPtr& __ice_defaultEventType, const ::omero::RStringPtr& __ice_userAgent, const ::omero::model::SessionEventsSeq& __ice_eventsSeq, bool __ice_eventsLoaded, const ::omero::model::SessionAnnotationLinksSeq& __ice_annotationLinksSeq, bool __ice_annotationLinksLoaded, const ::omero::sys::CountMap& __ice_annotationLinksCountPerOwner, const ::omero::model::ExperimenterGroupPtr& __ice_group, const ::omero::RLongPtr& __ice_itemCount, const ::omero::RBoolPtr& __ice_active, const ::Ice::ByteSeq& __ice_data) :
        ::omero::model::Session(__ice_id, __ice_details, __ice_loaded, __ice_version, __ice_node, __ice_uuid, __ice_owner, __ice_timeToIdle, __ice_timeToLive, __ice_started, __ice_closed, __ice_message, __ice_defaultEventType, __ice_userAgent, __ice_eventsSeq, __ice_eventsLoaded, __ice_annotationLinksSeq, __ice_annotationLinksLoaded, __ice_annotationLinksCountPerOwner)
        ,
        group(__ice_group),
        itemCount(__ice_itemCount),
        active(__ice_active),
        data(__ice_data)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    virtual ::omero::model::ExperimenterGroupPtr getGroup(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getGroup(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setGroup(const ::omero::model::ExperimenterGroupPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setGroup(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RLongPtr getItemCount(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getItemCount(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setItemCount(const ::omero::RLongPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setItemCount(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RBoolPtr getActive(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getActive(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setActive(const ::omero::RBoolPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setActive(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::ByteSeq getData(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setData(const ::Ice::ByteSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::omero::model::Session::__writeImpl;
    using ::omero::model::Session::__readImpl;
    #endif

    ::omero::model::ExperimenterGroupPtr group;

    ::omero::RLongPtr itemCount;

    ::omero::RBoolPtr active;

    ::Ice::ByteSeq data;
};

inline bool operator==(const Share& l, const Share& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Share& l, const Share& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

}

namespace omero
{

namespace model
{

template<class T>
class CallbackNC_Share_getGroup : public Callback_Share_getGroup_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::ExperimenterGroupPtr&);

    CallbackNC_Share_getGroup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::SharePrx __proxy = ::omero::model::SharePrx::uncheckedCast(__result->getProxy());
        ::omero::model::ExperimenterGroupPtr __ret;
        try
        {
            __ret = __proxy->end_getGroup(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Share_getGroupPtr
newCallback_Share_getGroup(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ExperimenterGroupPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Share_getGroup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Share_getGroupPtr
newCallback_Share_getGroup(T* instance, void (T::*cb)(const ::omero::model::ExperimenterGroupPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Share_getGroup<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Share_getGroup : public Callback_Share_getGroup_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::ExperimenterGroupPtr&, const CT&);

    Callback_Share_getGroup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::SharePrx __proxy = ::omero::model::SharePrx::uncheckedCast(__result->getProxy());
        ::omero::model::ExperimenterGroupPtr __ret;
        try
        {
            __ret = __proxy->end_getGroup(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Share_getGroupPtr
newCallback_Share_getGroup(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ExperimenterGroupPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Share_getGroup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Share_getGroupPtr
newCallback_Share_getGroup(T* instance, void (T::*cb)(const ::omero::model::ExperimenterGroupPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Share_getGroup<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Share_setGroup : public Callback_Share_setGroup_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Share_setGroup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Share_setGroupPtr
newCallback_Share_setGroup(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Share_setGroup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Share_setGroupPtr
newCallback_Share_setGroup(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Share_setGroup<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Share_setGroupPtr
newCallback_Share_setGroup(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Share_setGroup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Share_setGroupPtr
newCallback_Share_setGroup(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Share_setGroup<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Share_setGroup : public Callback_Share_setGroup_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Share_setGroup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Share_setGroupPtr
newCallback_Share_setGroup(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Share_setGroup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Share_setGroupPtr
newCallback_Share_setGroup(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Share_setGroup<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Share_setGroupPtr
newCallback_Share_setGroup(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Share_setGroup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Share_setGroupPtr
newCallback_Share_setGroup(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Share_setGroup<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Share_getItemCount : public Callback_Share_getItemCount_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RLongPtr&);

    CallbackNC_Share_getItemCount(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::SharePrx __proxy = ::omero::model::SharePrx::uncheckedCast(__result->getProxy());
        ::omero::RLongPtr __ret;
        try
        {
            __ret = __proxy->end_getItemCount(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Share_getItemCountPtr
newCallback_Share_getItemCount(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RLongPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Share_getItemCount<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Share_getItemCountPtr
newCallback_Share_getItemCount(T* instance, void (T::*cb)(const ::omero::RLongPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Share_getItemCount<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Share_getItemCount : public Callback_Share_getItemCount_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RLongPtr&, const CT&);

    Callback_Share_getItemCount(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::SharePrx __proxy = ::omero::model::SharePrx::uncheckedCast(__result->getProxy());
        ::omero::RLongPtr __ret;
        try
        {
            __ret = __proxy->end_getItemCount(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Share_getItemCountPtr
newCallback_Share_getItemCount(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RLongPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Share_getItemCount<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Share_getItemCountPtr
newCallback_Share_getItemCount(T* instance, void (T::*cb)(const ::omero::RLongPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Share_getItemCount<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Share_setItemCount : public Callback_Share_setItemCount_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Share_setItemCount(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Share_setItemCountPtr
newCallback_Share_setItemCount(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Share_setItemCount<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Share_setItemCountPtr
newCallback_Share_setItemCount(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Share_setItemCount<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Share_setItemCountPtr
newCallback_Share_setItemCount(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Share_setItemCount<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Share_setItemCountPtr
newCallback_Share_setItemCount(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Share_setItemCount<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Share_setItemCount : public Callback_Share_setItemCount_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Share_setItemCount(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Share_setItemCountPtr
newCallback_Share_setItemCount(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Share_setItemCount<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Share_setItemCountPtr
newCallback_Share_setItemCount(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Share_setItemCount<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Share_setItemCountPtr
newCallback_Share_setItemCount(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Share_setItemCount<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Share_setItemCountPtr
newCallback_Share_setItemCount(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Share_setItemCount<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Share_getActive : public Callback_Share_getActive_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RBoolPtr&);

    CallbackNC_Share_getActive(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::SharePrx __proxy = ::omero::model::SharePrx::uncheckedCast(__result->getProxy());
        ::omero::RBoolPtr __ret;
        try
        {
            __ret = __proxy->end_getActive(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Share_getActivePtr
newCallback_Share_getActive(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RBoolPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Share_getActive<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Share_getActivePtr
newCallback_Share_getActive(T* instance, void (T::*cb)(const ::omero::RBoolPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Share_getActive<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Share_getActive : public Callback_Share_getActive_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RBoolPtr&, const CT&);

    Callback_Share_getActive(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::SharePrx __proxy = ::omero::model::SharePrx::uncheckedCast(__result->getProxy());
        ::omero::RBoolPtr __ret;
        try
        {
            __ret = __proxy->end_getActive(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Share_getActivePtr
newCallback_Share_getActive(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RBoolPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Share_getActive<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Share_getActivePtr
newCallback_Share_getActive(T* instance, void (T::*cb)(const ::omero::RBoolPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Share_getActive<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Share_setActive : public Callback_Share_setActive_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Share_setActive(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Share_setActivePtr
newCallback_Share_setActive(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Share_setActive<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Share_setActivePtr
newCallback_Share_setActive(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Share_setActive<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Share_setActivePtr
newCallback_Share_setActive(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Share_setActive<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Share_setActivePtr
newCallback_Share_setActive(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Share_setActive<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Share_setActive : public Callback_Share_setActive_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Share_setActive(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Share_setActivePtr
newCallback_Share_setActive(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Share_setActive<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Share_setActivePtr
newCallback_Share_setActive(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Share_setActive<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Share_setActivePtr
newCallback_Share_setActive(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Share_setActive<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Share_setActivePtr
newCallback_Share_setActive(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Share_setActive<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Share_getData : public Callback_Share_getData_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Ice::ByteSeq&);

    CallbackNC_Share_getData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::SharePrx __proxy = ::omero::model::SharePrx::uncheckedCast(__result->getProxy());
        ::Ice::ByteSeq __ret;
        try
        {
            __ret = __proxy->end_getData(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Share_getDataPtr
newCallback_Share_getData(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Ice::ByteSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Share_getData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Share_getDataPtr
newCallback_Share_getData(T* instance, void (T::*cb)(const ::Ice::ByteSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Share_getData<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Share_getData : public Callback_Share_getData_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Ice::ByteSeq&, const CT&);

    Callback_Share_getData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::SharePrx __proxy = ::omero::model::SharePrx::uncheckedCast(__result->getProxy());
        ::Ice::ByteSeq __ret;
        try
        {
            __ret = __proxy->end_getData(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Share_getDataPtr
newCallback_Share_getData(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Ice::ByteSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Share_getData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Share_getDataPtr
newCallback_Share_getData(T* instance, void (T::*cb)(const ::Ice::ByteSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Share_getData<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Share_setData : public Callback_Share_setData_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Share_setData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Share_setDataPtr
newCallback_Share_setData(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Share_setData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Share_setDataPtr
newCallback_Share_setData(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Share_setData<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Share_setDataPtr
newCallback_Share_setData(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Share_setData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Share_setDataPtr
newCallback_Share_setData(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Share_setData<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Share_setData : public Callback_Share_setData_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Share_setData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Share_setDataPtr
newCallback_Share_setData(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Share_setData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Share_setDataPtr
newCallback_Share_setData(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Share_setData<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Share_setDataPtr
newCallback_Share_setData(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Share_setData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Share_setDataPtr
newCallback_Share_setData(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Share_setData<T, CT>(instance, 0, excb, sentcb);
}

}

}

#endif
