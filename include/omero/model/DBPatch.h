// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `DBPatch.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_DBPatch_h__
#define __omero_model__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_model_DBPatch_h__

#include <Ice/LocalObjectF.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/StreamF.h>
#include <omero/model/IObject.h>
#include <omero/RTypes.h>
#include <omero/System.h>
#include <omero/Collections.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace omero
{

namespace model
{

class Details;

class DBPatch;

}

}

}

namespace omero
{

namespace model
{

class Details;
bool operator==(const Details&, const Details&);
bool operator<(const Details&, const Details&);

class DBPatch;
bool operator==(const DBPatch&, const DBPatch&);
bool operator<(const DBPatch&, const DBPatch&);

}

}

namespace IceInternal
{

::Ice::Object* upCast(::omero::model::Details*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::Details*);

::Ice::Object* upCast(::omero::model::DBPatch*);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::model::DBPatch*);

}

namespace omero
{

namespace model
{

typedef ::IceInternal::Handle< ::omero::model::Details> DetailsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::Details> DetailsPrx;

void __read(::IceInternal::BasicStream*, DetailsPrx&);
void __patch__DetailsPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::omero::model::DBPatch> DBPatchPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::model::DBPatch> DBPatchPrx;

void __read(::IceInternal::BasicStream*, DBPatchPrx&);
void __patch__DBPatchPtr(void*, ::Ice::ObjectPtr&);

}

}

namespace omero
{

namespace model
{

class Callback_DBPatch_getCurrentVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DBPatch_getCurrentVersion_Base> Callback_DBPatch_getCurrentVersionPtr;

class Callback_DBPatch_setCurrentVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DBPatch_setCurrentVersion_Base> Callback_DBPatch_setCurrentVersionPtr;

class Callback_DBPatch_getCurrentPatch_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DBPatch_getCurrentPatch_Base> Callback_DBPatch_getCurrentPatchPtr;

class Callback_DBPatch_setCurrentPatch_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DBPatch_setCurrentPatch_Base> Callback_DBPatch_setCurrentPatchPtr;

class Callback_DBPatch_getPreviousVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DBPatch_getPreviousVersion_Base> Callback_DBPatch_getPreviousVersionPtr;

class Callback_DBPatch_setPreviousVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DBPatch_setPreviousVersion_Base> Callback_DBPatch_setPreviousVersionPtr;

class Callback_DBPatch_getPreviousPatch_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DBPatch_getPreviousPatch_Base> Callback_DBPatch_getPreviousPatchPtr;

class Callback_DBPatch_setPreviousPatch_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DBPatch_setPreviousPatch_Base> Callback_DBPatch_setPreviousPatchPtr;

class Callback_DBPatch_getFinished_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DBPatch_getFinished_Base> Callback_DBPatch_getFinishedPtr;

class Callback_DBPatch_setFinished_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DBPatch_setFinished_Base> Callback_DBPatch_setFinishedPtr;

class Callback_DBPatch_getMessage_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DBPatch_getMessage_Base> Callback_DBPatch_getMessagePtr;

class Callback_DBPatch_setMessage_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DBPatch_setMessage_Base> Callback_DBPatch_setMessagePtr;

}

}

namespace IceProxy
{

namespace omero
{

namespace model
{

class DBPatch : virtual public ::IceProxy::omero::model::IObject
{
public:

    ::omero::RStringPtr getCurrentVersion()
    {
        return getCurrentVersion(0);
    }
    ::omero::RStringPtr getCurrentVersion(const ::Ice::Context& __ctx)
    {
        return getCurrentVersion(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getCurrentVersion()
    {
        return begin_getCurrentVersion(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getCurrentVersion(const ::Ice::Context& __ctx)
    {
        return begin_getCurrentVersion(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getCurrentVersion(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCurrentVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCurrentVersion(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCurrentVersion(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCurrentVersion(const ::omero::model::Callback_DBPatch_getCurrentVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCurrentVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCurrentVersion(const ::Ice::Context& __ctx, const ::omero::model::Callback_DBPatch_getCurrentVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCurrentVersion(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getCurrentVersion(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getCurrentVersion(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getCurrentVersion(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setCurrentVersion(const ::omero::RStringPtr& theCurrentVersion)
    {
        setCurrentVersion(theCurrentVersion, 0);
    }
    void setCurrentVersion(const ::omero::RStringPtr& theCurrentVersion, const ::Ice::Context& __ctx)
    {
        setCurrentVersion(theCurrentVersion, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setCurrentVersion(const ::omero::RStringPtr& theCurrentVersion)
    {
        return begin_setCurrentVersion(theCurrentVersion, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setCurrentVersion(const ::omero::RStringPtr& theCurrentVersion, const ::Ice::Context& __ctx)
    {
        return begin_setCurrentVersion(theCurrentVersion, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setCurrentVersion(const ::omero::RStringPtr& theCurrentVersion, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCurrentVersion(theCurrentVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setCurrentVersion(const ::omero::RStringPtr& theCurrentVersion, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCurrentVersion(theCurrentVersion, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setCurrentVersion(const ::omero::RStringPtr& theCurrentVersion, const ::omero::model::Callback_DBPatch_setCurrentVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCurrentVersion(theCurrentVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setCurrentVersion(const ::omero::RStringPtr& theCurrentVersion, const ::Ice::Context& __ctx, const ::omero::model::Callback_DBPatch_setCurrentVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCurrentVersion(theCurrentVersion, &__ctx, __del, __cookie);
    }

    void end_setCurrentVersion(const ::Ice::AsyncResultPtr&);
    
private:

    void setCurrentVersion(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setCurrentVersion(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RIntPtr getCurrentPatch()
    {
        return getCurrentPatch(0);
    }
    ::omero::RIntPtr getCurrentPatch(const ::Ice::Context& __ctx)
    {
        return getCurrentPatch(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getCurrentPatch()
    {
        return begin_getCurrentPatch(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getCurrentPatch(const ::Ice::Context& __ctx)
    {
        return begin_getCurrentPatch(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getCurrentPatch(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCurrentPatch(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCurrentPatch(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCurrentPatch(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCurrentPatch(const ::omero::model::Callback_DBPatch_getCurrentPatchPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCurrentPatch(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCurrentPatch(const ::Ice::Context& __ctx, const ::omero::model::Callback_DBPatch_getCurrentPatchPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCurrentPatch(&__ctx, __del, __cookie);
    }

    ::omero::RIntPtr end_getCurrentPatch(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RIntPtr getCurrentPatch(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getCurrentPatch(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setCurrentPatch(const ::omero::RIntPtr& theCurrentPatch)
    {
        setCurrentPatch(theCurrentPatch, 0);
    }
    void setCurrentPatch(const ::omero::RIntPtr& theCurrentPatch, const ::Ice::Context& __ctx)
    {
        setCurrentPatch(theCurrentPatch, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setCurrentPatch(const ::omero::RIntPtr& theCurrentPatch)
    {
        return begin_setCurrentPatch(theCurrentPatch, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setCurrentPatch(const ::omero::RIntPtr& theCurrentPatch, const ::Ice::Context& __ctx)
    {
        return begin_setCurrentPatch(theCurrentPatch, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setCurrentPatch(const ::omero::RIntPtr& theCurrentPatch, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCurrentPatch(theCurrentPatch, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setCurrentPatch(const ::omero::RIntPtr& theCurrentPatch, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCurrentPatch(theCurrentPatch, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setCurrentPatch(const ::omero::RIntPtr& theCurrentPatch, const ::omero::model::Callback_DBPatch_setCurrentPatchPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCurrentPatch(theCurrentPatch, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setCurrentPatch(const ::omero::RIntPtr& theCurrentPatch, const ::Ice::Context& __ctx, const ::omero::model::Callback_DBPatch_setCurrentPatchPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCurrentPatch(theCurrentPatch, &__ctx, __del, __cookie);
    }

    void end_setCurrentPatch(const ::Ice::AsyncResultPtr&);
    
private:

    void setCurrentPatch(const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setCurrentPatch(const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getPreviousVersion()
    {
        return getPreviousVersion(0);
    }
    ::omero::RStringPtr getPreviousVersion(const ::Ice::Context& __ctx)
    {
        return getPreviousVersion(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getPreviousVersion()
    {
        return begin_getPreviousVersion(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPreviousVersion(const ::Ice::Context& __ctx)
    {
        return begin_getPreviousVersion(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPreviousVersion(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPreviousVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPreviousVersion(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPreviousVersion(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPreviousVersion(const ::omero::model::Callback_DBPatch_getPreviousVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPreviousVersion(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPreviousVersion(const ::Ice::Context& __ctx, const ::omero::model::Callback_DBPatch_getPreviousVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPreviousVersion(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getPreviousVersion(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getPreviousVersion(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getPreviousVersion(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setPreviousVersion(const ::omero::RStringPtr& thePreviousVersion)
    {
        setPreviousVersion(thePreviousVersion, 0);
    }
    void setPreviousVersion(const ::omero::RStringPtr& thePreviousVersion, const ::Ice::Context& __ctx)
    {
        setPreviousVersion(thePreviousVersion, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setPreviousVersion(const ::omero::RStringPtr& thePreviousVersion)
    {
        return begin_setPreviousVersion(thePreviousVersion, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPreviousVersion(const ::omero::RStringPtr& thePreviousVersion, const ::Ice::Context& __ctx)
    {
        return begin_setPreviousVersion(thePreviousVersion, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPreviousVersion(const ::omero::RStringPtr& thePreviousVersion, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPreviousVersion(thePreviousVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPreviousVersion(const ::omero::RStringPtr& thePreviousVersion, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPreviousVersion(thePreviousVersion, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPreviousVersion(const ::omero::RStringPtr& thePreviousVersion, const ::omero::model::Callback_DBPatch_setPreviousVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPreviousVersion(thePreviousVersion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPreviousVersion(const ::omero::RStringPtr& thePreviousVersion, const ::Ice::Context& __ctx, const ::omero::model::Callback_DBPatch_setPreviousVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPreviousVersion(thePreviousVersion, &__ctx, __del, __cookie);
    }

    void end_setPreviousVersion(const ::Ice::AsyncResultPtr&);
    
private:

    void setPreviousVersion(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setPreviousVersion(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RIntPtr getPreviousPatch()
    {
        return getPreviousPatch(0);
    }
    ::omero::RIntPtr getPreviousPatch(const ::Ice::Context& __ctx)
    {
        return getPreviousPatch(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getPreviousPatch()
    {
        return begin_getPreviousPatch(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPreviousPatch(const ::Ice::Context& __ctx)
    {
        return begin_getPreviousPatch(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPreviousPatch(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPreviousPatch(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPreviousPatch(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPreviousPatch(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPreviousPatch(const ::omero::model::Callback_DBPatch_getPreviousPatchPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPreviousPatch(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPreviousPatch(const ::Ice::Context& __ctx, const ::omero::model::Callback_DBPatch_getPreviousPatchPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPreviousPatch(&__ctx, __del, __cookie);
    }

    ::omero::RIntPtr end_getPreviousPatch(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RIntPtr getPreviousPatch(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getPreviousPatch(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setPreviousPatch(const ::omero::RIntPtr& thePreviousPatch)
    {
        setPreviousPatch(thePreviousPatch, 0);
    }
    void setPreviousPatch(const ::omero::RIntPtr& thePreviousPatch, const ::Ice::Context& __ctx)
    {
        setPreviousPatch(thePreviousPatch, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setPreviousPatch(const ::omero::RIntPtr& thePreviousPatch)
    {
        return begin_setPreviousPatch(thePreviousPatch, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPreviousPatch(const ::omero::RIntPtr& thePreviousPatch, const ::Ice::Context& __ctx)
    {
        return begin_setPreviousPatch(thePreviousPatch, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPreviousPatch(const ::omero::RIntPtr& thePreviousPatch, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPreviousPatch(thePreviousPatch, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPreviousPatch(const ::omero::RIntPtr& thePreviousPatch, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPreviousPatch(thePreviousPatch, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPreviousPatch(const ::omero::RIntPtr& thePreviousPatch, const ::omero::model::Callback_DBPatch_setPreviousPatchPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPreviousPatch(thePreviousPatch, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPreviousPatch(const ::omero::RIntPtr& thePreviousPatch, const ::Ice::Context& __ctx, const ::omero::model::Callback_DBPatch_setPreviousPatchPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPreviousPatch(thePreviousPatch, &__ctx, __del, __cookie);
    }

    void end_setPreviousPatch(const ::Ice::AsyncResultPtr&);
    
private:

    void setPreviousPatch(const ::omero::RIntPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setPreviousPatch(const ::omero::RIntPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RTimePtr getFinished()
    {
        return getFinished(0);
    }
    ::omero::RTimePtr getFinished(const ::Ice::Context& __ctx)
    {
        return getFinished(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getFinished()
    {
        return begin_getFinished(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getFinished(const ::Ice::Context& __ctx)
    {
        return begin_getFinished(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getFinished(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFinished(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getFinished(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFinished(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getFinished(const ::omero::model::Callback_DBPatch_getFinishedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFinished(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getFinished(const ::Ice::Context& __ctx, const ::omero::model::Callback_DBPatch_getFinishedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFinished(&__ctx, __del, __cookie);
    }

    ::omero::RTimePtr end_getFinished(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RTimePtr getFinished(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getFinished(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setFinished(const ::omero::RTimePtr& theFinished)
    {
        setFinished(theFinished, 0);
    }
    void setFinished(const ::omero::RTimePtr& theFinished, const ::Ice::Context& __ctx)
    {
        setFinished(theFinished, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setFinished(const ::omero::RTimePtr& theFinished)
    {
        return begin_setFinished(theFinished, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setFinished(const ::omero::RTimePtr& theFinished, const ::Ice::Context& __ctx)
    {
        return begin_setFinished(theFinished, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setFinished(const ::omero::RTimePtr& theFinished, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setFinished(theFinished, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setFinished(const ::omero::RTimePtr& theFinished, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setFinished(theFinished, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setFinished(const ::omero::RTimePtr& theFinished, const ::omero::model::Callback_DBPatch_setFinishedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setFinished(theFinished, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setFinished(const ::omero::RTimePtr& theFinished, const ::Ice::Context& __ctx, const ::omero::model::Callback_DBPatch_setFinishedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setFinished(theFinished, &__ctx, __del, __cookie);
    }

    void end_setFinished(const ::Ice::AsyncResultPtr&);
    
private:

    void setFinished(const ::omero::RTimePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setFinished(const ::omero::RTimePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::omero::RStringPtr getMessage()
    {
        return getMessage(0);
    }
    ::omero::RStringPtr getMessage(const ::Ice::Context& __ctx)
    {
        return getMessage(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getMessage()
    {
        return begin_getMessage(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getMessage(const ::Ice::Context& __ctx)
    {
        return begin_getMessage(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getMessage(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMessage(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMessage(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMessage(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMessage(const ::omero::model::Callback_DBPatch_getMessagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMessage(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMessage(const ::Ice::Context& __ctx, const ::omero::model::Callback_DBPatch_getMessagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMessage(&__ctx, __del, __cookie);
    }

    ::omero::RStringPtr end_getMessage(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::RStringPtr getMessage(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getMessage(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setMessage(const ::omero::RStringPtr& theMessage)
    {
        setMessage(theMessage, 0);
    }
    void setMessage(const ::omero::RStringPtr& theMessage, const ::Ice::Context& __ctx)
    {
        setMessage(theMessage, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setMessage(const ::omero::RStringPtr& theMessage)
    {
        return begin_setMessage(theMessage, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setMessage(const ::omero::RStringPtr& theMessage, const ::Ice::Context& __ctx)
    {
        return begin_setMessage(theMessage, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setMessage(const ::omero::RStringPtr& theMessage, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setMessage(theMessage, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setMessage(const ::omero::RStringPtr& theMessage, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setMessage(theMessage, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setMessage(const ::omero::RStringPtr& theMessage, const ::omero::model::Callback_DBPatch_setMessagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setMessage(theMessage, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setMessage(const ::omero::RStringPtr& theMessage, const ::Ice::Context& __ctx, const ::omero::model::Callback_DBPatch_setMessagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setMessage(theMessage, &__ctx, __del, __cookie);
    }

    void end_setMessage(const ::Ice::AsyncResultPtr&);
    
private:

    void setMessage(const ::omero::RStringPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setMessage(const ::omero::RStringPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<DBPatch> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DBPatch*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<DBPatch*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DBPatch> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DBPatch*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<DBPatch*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DBPatch> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DBPatch*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<DBPatch*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DBPatch> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DBPatch*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<DBPatch*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DBPatch> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DBPatch*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<DBPatch*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DBPatch> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DBPatch*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<DBPatch*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DBPatch> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DBPatch*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<DBPatch*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DBPatch> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DBPatch*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<DBPatch*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DBPatch> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DBPatch*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<DBPatch*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DBPatch> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DBPatch*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<DBPatch*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DBPatch> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DBPatch*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<DBPatch*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DBPatch> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DBPatch*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<DBPatch*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DBPatch> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DBPatch*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<DBPatch*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DBPatch> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DBPatch*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<DBPatch*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DBPatch> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DBPatch*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<DBPatch*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DBPatch> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DBPatch*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<DBPatch*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DBPatch> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DBPatch*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<DBPatch*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DBPatch> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DBPatch*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<DBPatch*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DBPatch> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DBPatch*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<DBPatch*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

namespace IceDelegate
{

namespace omero
{

namespace model
{

class DBPatch : virtual public ::IceDelegate::omero::model::IObject
{
public:

    virtual ::omero::RStringPtr getCurrentVersion(const ::Ice::Context*) = 0;

    virtual void setCurrentVersion(const ::omero::RStringPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::RIntPtr getCurrentPatch(const ::Ice::Context*) = 0;

    virtual void setCurrentPatch(const ::omero::RIntPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::RStringPtr getPreviousVersion(const ::Ice::Context*) = 0;

    virtual void setPreviousVersion(const ::omero::RStringPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::RIntPtr getPreviousPatch(const ::Ice::Context*) = 0;

    virtual void setPreviousPatch(const ::omero::RIntPtr&, const ::Ice::Context*) = 0;

    virtual ::omero::RTimePtr getFinished(const ::Ice::Context*) = 0;

    virtual void setFinished(const ::omero::RTimePtr&, const ::Ice::Context*) = 0;

    virtual ::omero::RStringPtr getMessage(const ::Ice::Context*) = 0;

    virtual void setMessage(const ::omero::RStringPtr&, const ::Ice::Context*) = 0;
};

}

}

}

namespace IceDelegateM
{

namespace omero
{

namespace model
{

class DBPatch : virtual public ::IceDelegate::omero::model::DBPatch,
                virtual public ::IceDelegateM::omero::model::IObject
{
public:

    virtual ::omero::RStringPtr getCurrentVersion(const ::Ice::Context*);

    virtual void setCurrentVersion(const ::omero::RStringPtr&, const ::Ice::Context*);

    virtual ::omero::RIntPtr getCurrentPatch(const ::Ice::Context*);

    virtual void setCurrentPatch(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::RStringPtr getPreviousVersion(const ::Ice::Context*);

    virtual void setPreviousVersion(const ::omero::RStringPtr&, const ::Ice::Context*);

    virtual ::omero::RIntPtr getPreviousPatch(const ::Ice::Context*);

    virtual void setPreviousPatch(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::RTimePtr getFinished(const ::Ice::Context*);

    virtual void setFinished(const ::omero::RTimePtr&, const ::Ice::Context*);

    virtual ::omero::RStringPtr getMessage(const ::Ice::Context*);

    virtual void setMessage(const ::omero::RStringPtr&, const ::Ice::Context*);
};

}

}

}

namespace IceDelegateD
{

namespace omero
{

namespace model
{

class DBPatch : virtual public ::IceDelegate::omero::model::DBPatch,
                virtual public ::IceDelegateD::omero::model::IObject
{
public:

    virtual ::omero::RStringPtr getCurrentVersion(const ::Ice::Context*);

    virtual void setCurrentVersion(const ::omero::RStringPtr&, const ::Ice::Context*);

    virtual ::omero::RIntPtr getCurrentPatch(const ::Ice::Context*);

    virtual void setCurrentPatch(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::RStringPtr getPreviousVersion(const ::Ice::Context*);

    virtual void setPreviousVersion(const ::omero::RStringPtr&, const ::Ice::Context*);

    virtual ::omero::RIntPtr getPreviousPatch(const ::Ice::Context*);

    virtual void setPreviousPatch(const ::omero::RIntPtr&, const ::Ice::Context*);

    virtual ::omero::RTimePtr getFinished(const ::Ice::Context*);

    virtual void setFinished(const ::omero::RTimePtr&, const ::Ice::Context*);

    virtual ::omero::RStringPtr getMessage(const ::Ice::Context*);

    virtual void setMessage(const ::omero::RStringPtr&, const ::Ice::Context*);
};

}

}

}

namespace omero
{

namespace model
{

class DBPatch : public ::omero::model::IObject
{
public:

    typedef DBPatchPrx ProxyType;
    typedef DBPatchPtr PointerType;
    
    DBPatch() {}
    DBPatch(const ::omero::RLongPtr&, const ::omero::model::DetailsPtr&, bool, const ::omero::RStringPtr&, const ::omero::RIntPtr&, const ::omero::RStringPtr&, const ::omero::RIntPtr&, const ::omero::RTimePtr&, const ::omero::RStringPtr&);
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    virtual ::omero::RStringPtr getCurrentVersion(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getCurrentVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setCurrentVersion(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setCurrentVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RIntPtr getCurrentPatch(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getCurrentPatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setCurrentPatch(const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setCurrentPatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getPreviousVersion(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getPreviousVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setPreviousVersion(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setPreviousVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RIntPtr getPreviousPatch(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getPreviousPatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setPreviousPatch(const ::omero::RIntPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setPreviousPatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RTimePtr getFinished(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getFinished(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setFinished(const ::omero::RTimePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setFinished(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::omero::RStringPtr getMessage(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getMessage(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setMessage(const ::omero::RStringPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setMessage(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif

protected:

    ::omero::RStringPtr currentVersion;

    ::omero::RIntPtr currentPatch;

    ::omero::RStringPtr previousVersion;

    ::omero::RIntPtr previousPatch;

    ::omero::RTimePtr finished;

    ::omero::RStringPtr message;
};

inline bool operator==(const DBPatch& l, const DBPatch& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const DBPatch& l, const DBPatch& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

}

namespace omero
{

namespace model
{

template<class T>
class CallbackNC_DBPatch_getCurrentVersion : public Callback_DBPatch_getCurrentVersion_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_DBPatch_getCurrentVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::DBPatchPrx __proxy = ::omero::model::DBPatchPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getCurrentVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_DBPatch_getCurrentVersionPtr
newCallback_DBPatch_getCurrentVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DBPatch_getCurrentVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DBPatch_getCurrentVersionPtr
newCallback_DBPatch_getCurrentVersion(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DBPatch_getCurrentVersion<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_DBPatch_getCurrentVersion : public Callback_DBPatch_getCurrentVersion_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_DBPatch_getCurrentVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::DBPatchPrx __proxy = ::omero::model::DBPatchPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getCurrentVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_DBPatch_getCurrentVersionPtr
newCallback_DBPatch_getCurrentVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DBPatch_getCurrentVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DBPatch_getCurrentVersionPtr
newCallback_DBPatch_getCurrentVersion(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DBPatch_getCurrentVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_DBPatch_setCurrentVersion : public Callback_DBPatch_setCurrentVersion_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_DBPatch_setCurrentVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_DBPatch_setCurrentVersionPtr
newCallback_DBPatch_setCurrentVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DBPatch_setCurrentVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DBPatch_setCurrentVersionPtr
newCallback_DBPatch_setCurrentVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DBPatch_setCurrentVersion<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_DBPatch_setCurrentVersionPtr
newCallback_DBPatch_setCurrentVersion(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DBPatch_setCurrentVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DBPatch_setCurrentVersionPtr
newCallback_DBPatch_setCurrentVersion(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DBPatch_setCurrentVersion<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_DBPatch_setCurrentVersion : public Callback_DBPatch_setCurrentVersion_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_DBPatch_setCurrentVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_DBPatch_setCurrentVersionPtr
newCallback_DBPatch_setCurrentVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DBPatch_setCurrentVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DBPatch_setCurrentVersionPtr
newCallback_DBPatch_setCurrentVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DBPatch_setCurrentVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_DBPatch_setCurrentVersionPtr
newCallback_DBPatch_setCurrentVersion(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DBPatch_setCurrentVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DBPatch_setCurrentVersionPtr
newCallback_DBPatch_setCurrentVersion(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DBPatch_setCurrentVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_DBPatch_getCurrentPatch : public Callback_DBPatch_getCurrentPatch_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RIntPtr&);

    CallbackNC_DBPatch_getCurrentPatch(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::DBPatchPrx __proxy = ::omero::model::DBPatchPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getCurrentPatch(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_DBPatch_getCurrentPatchPtr
newCallback_DBPatch_getCurrentPatch(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DBPatch_getCurrentPatch<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DBPatch_getCurrentPatchPtr
newCallback_DBPatch_getCurrentPatch(T* instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DBPatch_getCurrentPatch<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_DBPatch_getCurrentPatch : public Callback_DBPatch_getCurrentPatch_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RIntPtr&, const CT&);

    Callback_DBPatch_getCurrentPatch(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::DBPatchPrx __proxy = ::omero::model::DBPatchPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getCurrentPatch(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_DBPatch_getCurrentPatchPtr
newCallback_DBPatch_getCurrentPatch(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DBPatch_getCurrentPatch<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DBPatch_getCurrentPatchPtr
newCallback_DBPatch_getCurrentPatch(T* instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DBPatch_getCurrentPatch<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_DBPatch_setCurrentPatch : public Callback_DBPatch_setCurrentPatch_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_DBPatch_setCurrentPatch(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_DBPatch_setCurrentPatchPtr
newCallback_DBPatch_setCurrentPatch(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DBPatch_setCurrentPatch<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DBPatch_setCurrentPatchPtr
newCallback_DBPatch_setCurrentPatch(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DBPatch_setCurrentPatch<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_DBPatch_setCurrentPatchPtr
newCallback_DBPatch_setCurrentPatch(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DBPatch_setCurrentPatch<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DBPatch_setCurrentPatchPtr
newCallback_DBPatch_setCurrentPatch(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DBPatch_setCurrentPatch<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_DBPatch_setCurrentPatch : public Callback_DBPatch_setCurrentPatch_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_DBPatch_setCurrentPatch(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_DBPatch_setCurrentPatchPtr
newCallback_DBPatch_setCurrentPatch(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DBPatch_setCurrentPatch<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DBPatch_setCurrentPatchPtr
newCallback_DBPatch_setCurrentPatch(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DBPatch_setCurrentPatch<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_DBPatch_setCurrentPatchPtr
newCallback_DBPatch_setCurrentPatch(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DBPatch_setCurrentPatch<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DBPatch_setCurrentPatchPtr
newCallback_DBPatch_setCurrentPatch(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DBPatch_setCurrentPatch<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_DBPatch_getPreviousVersion : public Callback_DBPatch_getPreviousVersion_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_DBPatch_getPreviousVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::DBPatchPrx __proxy = ::omero::model::DBPatchPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getPreviousVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_DBPatch_getPreviousVersionPtr
newCallback_DBPatch_getPreviousVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DBPatch_getPreviousVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DBPatch_getPreviousVersionPtr
newCallback_DBPatch_getPreviousVersion(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DBPatch_getPreviousVersion<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_DBPatch_getPreviousVersion : public Callback_DBPatch_getPreviousVersion_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_DBPatch_getPreviousVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::DBPatchPrx __proxy = ::omero::model::DBPatchPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getPreviousVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_DBPatch_getPreviousVersionPtr
newCallback_DBPatch_getPreviousVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DBPatch_getPreviousVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DBPatch_getPreviousVersionPtr
newCallback_DBPatch_getPreviousVersion(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DBPatch_getPreviousVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_DBPatch_setPreviousVersion : public Callback_DBPatch_setPreviousVersion_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_DBPatch_setPreviousVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_DBPatch_setPreviousVersionPtr
newCallback_DBPatch_setPreviousVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DBPatch_setPreviousVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DBPatch_setPreviousVersionPtr
newCallback_DBPatch_setPreviousVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DBPatch_setPreviousVersion<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_DBPatch_setPreviousVersionPtr
newCallback_DBPatch_setPreviousVersion(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DBPatch_setPreviousVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DBPatch_setPreviousVersionPtr
newCallback_DBPatch_setPreviousVersion(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DBPatch_setPreviousVersion<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_DBPatch_setPreviousVersion : public Callback_DBPatch_setPreviousVersion_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_DBPatch_setPreviousVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_DBPatch_setPreviousVersionPtr
newCallback_DBPatch_setPreviousVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DBPatch_setPreviousVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DBPatch_setPreviousVersionPtr
newCallback_DBPatch_setPreviousVersion(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DBPatch_setPreviousVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_DBPatch_setPreviousVersionPtr
newCallback_DBPatch_setPreviousVersion(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DBPatch_setPreviousVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DBPatch_setPreviousVersionPtr
newCallback_DBPatch_setPreviousVersion(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DBPatch_setPreviousVersion<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_DBPatch_getPreviousPatch : public Callback_DBPatch_getPreviousPatch_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RIntPtr&);

    CallbackNC_DBPatch_getPreviousPatch(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::DBPatchPrx __proxy = ::omero::model::DBPatchPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getPreviousPatch(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_DBPatch_getPreviousPatchPtr
newCallback_DBPatch_getPreviousPatch(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DBPatch_getPreviousPatch<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DBPatch_getPreviousPatchPtr
newCallback_DBPatch_getPreviousPatch(T* instance, void (T::*cb)(const ::omero::RIntPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DBPatch_getPreviousPatch<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_DBPatch_getPreviousPatch : public Callback_DBPatch_getPreviousPatch_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RIntPtr&, const CT&);

    Callback_DBPatch_getPreviousPatch(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::DBPatchPrx __proxy = ::omero::model::DBPatchPrx::uncheckedCast(__result->getProxy());
        ::omero::RIntPtr __ret;
        try
        {
            __ret = __proxy->end_getPreviousPatch(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_DBPatch_getPreviousPatchPtr
newCallback_DBPatch_getPreviousPatch(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DBPatch_getPreviousPatch<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DBPatch_getPreviousPatchPtr
newCallback_DBPatch_getPreviousPatch(T* instance, void (T::*cb)(const ::omero::RIntPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DBPatch_getPreviousPatch<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_DBPatch_setPreviousPatch : public Callback_DBPatch_setPreviousPatch_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_DBPatch_setPreviousPatch(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_DBPatch_setPreviousPatchPtr
newCallback_DBPatch_setPreviousPatch(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DBPatch_setPreviousPatch<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DBPatch_setPreviousPatchPtr
newCallback_DBPatch_setPreviousPatch(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DBPatch_setPreviousPatch<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_DBPatch_setPreviousPatchPtr
newCallback_DBPatch_setPreviousPatch(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DBPatch_setPreviousPatch<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DBPatch_setPreviousPatchPtr
newCallback_DBPatch_setPreviousPatch(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DBPatch_setPreviousPatch<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_DBPatch_setPreviousPatch : public Callback_DBPatch_setPreviousPatch_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_DBPatch_setPreviousPatch(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_DBPatch_setPreviousPatchPtr
newCallback_DBPatch_setPreviousPatch(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DBPatch_setPreviousPatch<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DBPatch_setPreviousPatchPtr
newCallback_DBPatch_setPreviousPatch(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DBPatch_setPreviousPatch<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_DBPatch_setPreviousPatchPtr
newCallback_DBPatch_setPreviousPatch(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DBPatch_setPreviousPatch<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DBPatch_setPreviousPatchPtr
newCallback_DBPatch_setPreviousPatch(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DBPatch_setPreviousPatch<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_DBPatch_getFinished : public Callback_DBPatch_getFinished_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RTimePtr&);

    CallbackNC_DBPatch_getFinished(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::DBPatchPrx __proxy = ::omero::model::DBPatchPrx::uncheckedCast(__result->getProxy());
        ::omero::RTimePtr __ret;
        try
        {
            __ret = __proxy->end_getFinished(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_DBPatch_getFinishedPtr
newCallback_DBPatch_getFinished(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RTimePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DBPatch_getFinished<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DBPatch_getFinishedPtr
newCallback_DBPatch_getFinished(T* instance, void (T::*cb)(const ::omero::RTimePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DBPatch_getFinished<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_DBPatch_getFinished : public Callback_DBPatch_getFinished_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RTimePtr&, const CT&);

    Callback_DBPatch_getFinished(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::DBPatchPrx __proxy = ::omero::model::DBPatchPrx::uncheckedCast(__result->getProxy());
        ::omero::RTimePtr __ret;
        try
        {
            __ret = __proxy->end_getFinished(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_DBPatch_getFinishedPtr
newCallback_DBPatch_getFinished(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RTimePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DBPatch_getFinished<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DBPatch_getFinishedPtr
newCallback_DBPatch_getFinished(T* instance, void (T::*cb)(const ::omero::RTimePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DBPatch_getFinished<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_DBPatch_setFinished : public Callback_DBPatch_setFinished_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_DBPatch_setFinished(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_DBPatch_setFinishedPtr
newCallback_DBPatch_setFinished(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DBPatch_setFinished<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DBPatch_setFinishedPtr
newCallback_DBPatch_setFinished(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DBPatch_setFinished<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_DBPatch_setFinishedPtr
newCallback_DBPatch_setFinished(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DBPatch_setFinished<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DBPatch_setFinishedPtr
newCallback_DBPatch_setFinished(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DBPatch_setFinished<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_DBPatch_setFinished : public Callback_DBPatch_setFinished_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_DBPatch_setFinished(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_DBPatch_setFinishedPtr
newCallback_DBPatch_setFinished(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DBPatch_setFinished<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DBPatch_setFinishedPtr
newCallback_DBPatch_setFinished(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DBPatch_setFinished<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_DBPatch_setFinishedPtr
newCallback_DBPatch_setFinished(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DBPatch_setFinished<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DBPatch_setFinishedPtr
newCallback_DBPatch_setFinished(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DBPatch_setFinished<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_DBPatch_getMessage : public Callback_DBPatch_getMessage_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::RStringPtr&);

    CallbackNC_DBPatch_getMessage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::DBPatchPrx __proxy = ::omero::model::DBPatchPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getMessage(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_DBPatch_getMessagePtr
newCallback_DBPatch_getMessage(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DBPatch_getMessage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DBPatch_getMessagePtr
newCallback_DBPatch_getMessage(T* instance, void (T::*cb)(const ::omero::RStringPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DBPatch_getMessage<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_DBPatch_getMessage : public Callback_DBPatch_getMessage_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::RStringPtr&, const CT&);

    Callback_DBPatch_getMessage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::model::DBPatchPrx __proxy = ::omero::model::DBPatchPrx::uncheckedCast(__result->getProxy());
        ::omero::RStringPtr __ret;
        try
        {
            __ret = __proxy->end_getMessage(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_DBPatch_getMessagePtr
newCallback_DBPatch_getMessage(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DBPatch_getMessage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DBPatch_getMessagePtr
newCallback_DBPatch_getMessage(T* instance, void (T::*cb)(const ::omero::RStringPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DBPatch_getMessage<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_DBPatch_setMessage : public Callback_DBPatch_setMessage_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_DBPatch_setMessage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_DBPatch_setMessagePtr
newCallback_DBPatch_setMessage(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DBPatch_setMessage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DBPatch_setMessagePtr
newCallback_DBPatch_setMessage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DBPatch_setMessage<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_DBPatch_setMessagePtr
newCallback_DBPatch_setMessage(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DBPatch_setMessage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DBPatch_setMessagePtr
newCallback_DBPatch_setMessage(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DBPatch_setMessage<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_DBPatch_setMessage : public Callback_DBPatch_setMessage_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_DBPatch_setMessage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_DBPatch_setMessagePtr
newCallback_DBPatch_setMessage(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DBPatch_setMessage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DBPatch_setMessagePtr
newCallback_DBPatch_setMessage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DBPatch_setMessage<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_DBPatch_setMessagePtr
newCallback_DBPatch_setMessage(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DBPatch_setMessage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DBPatch_setMessagePtr
newCallback_DBPatch_setMessage(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DBPatch_setMessage<T, CT>(instance, 0, excb, sentcb);
}

}

}

#endif
