   /*
   **   Generated by blitz/templates/resouces/combined.vm
   **   See ../../README.ice for information on these types.
   **
   **   Copyright 2007, 2008 Glencoe Software, Inc. All rights reserved.
   **   Use is subject to license terms supplied in LICENSE.txt
   **
   */
#ifndef SHAPE_ICE
#define SHAPE_ICE
#include <omero/model/IObject.ice>
#include <omero/RTypes.ice>
#include <omero/System.ice>
#include <omero/Collections.ice>
module omero {
  module model {
    class Roi;
    class Details;
    ["protected"] class Shape
    extends omero::model::IObject
    {
      omero::RInt version;
      omero::RInt getVersion();
      void setVersion(omero::RInt theVersion);
      omero::RInt theZ;
      omero::RInt getTheZ();
      void setTheZ(omero::RInt theTheZ);
      omero::RInt theT;
      omero::RInt getTheT();
      void setTheT(omero::RInt theTheT);
      omero::RInt theC;
      omero::RInt getTheC();
      void setTheC(omero::RInt theTheC);
      omero::model::Roi roi;
      omero::model::Roi getRoi();
      void setRoi(omero::model::Roi theRoi);
      omero::RBool locked;
      omero::RBool getLocked();
      void setLocked(omero::RBool theLocked);
      omero::RString g;
      omero::RString getG();
      void setG(omero::RString theG);
      omero::RString transform;
      omero::RString getTransform();
      void setTransform(omero::RString theTransform);
      omero::RString vectorEffect;
      omero::RString getVectorEffect();
      void setVectorEffect(omero::RString theVectorEffect);
      omero::RBool visibility;
      omero::RBool getVisibility();
      void setVisibility(omero::RBool theVisibility);
      omero::RInt fillColor;
      omero::RInt getFillColor();
      void setFillColor(omero::RInt theFillColor);
      omero::RString fillRule;
      omero::RString getFillRule();
      void setFillRule(omero::RString theFillRule);
      omero::RInt strokeColor;
      omero::RInt getStrokeColor();
      void setStrokeColor(omero::RInt theStrokeColor);
      omero::RString strokeDashArray;
      omero::RString getStrokeDashArray();
      void setStrokeDashArray(omero::RString theStrokeDashArray);
      omero::RInt strokeDashOffset;
      omero::RInt getStrokeDashOffset();
      void setStrokeDashOffset(omero::RInt theStrokeDashOffset);
      omero::RString strokeLineCap;
      omero::RString getStrokeLineCap();
      void setStrokeLineCap(omero::RString theStrokeLineCap);
      omero::RString strokeLineJoin;
      omero::RString getStrokeLineJoin();
      void setStrokeLineJoin(omero::RString theStrokeLineJoin);
      omero::RInt strokeMiterLimit;
      omero::RInt getStrokeMiterLimit();
      void setStrokeMiterLimit(omero::RInt theStrokeMiterLimit);
      omero::RInt strokeWidth;
      omero::RInt getStrokeWidth();
      void setStrokeWidth(omero::RInt theStrokeWidth);
      omero::RString fontFamily;
      omero::RString getFontFamily();
      void setFontFamily(omero::RString theFontFamily);
      omero::RInt fontSize;
      omero::RInt getFontSize();
      void setFontSize(omero::RInt theFontSize);
      omero::RString fontStretch;
      omero::RString getFontStretch();
      void setFontStretch(omero::RString theFontStretch);
      omero::RString fontStyle;
      omero::RString getFontStyle();
      void setFontStyle(omero::RString theFontStyle);
      omero::RString fontVariant;
      omero::RString getFontVariant();
      void setFontVariant(omero::RString theFontVariant);
      omero::RString fontWeight;
      omero::RString getFontWeight();
      void setFontWeight(omero::RString theFontWeight);
    };
  };
};
#endif // SHAPE_ICE
